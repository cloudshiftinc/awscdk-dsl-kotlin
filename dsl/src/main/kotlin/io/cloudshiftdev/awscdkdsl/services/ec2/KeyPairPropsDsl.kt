@file:Suppress(
    "RedundantVisibilityModifier",
    "RedundantUnitReturnType",
    "RemoveRedundantQualifierName",
    "unused",
    "UnusedImport",
    "ClassName",
    "REDUNDANT_PROJECTION",
    "DEPRECATION"
)

package io.cloudshiftdev.awscdkdsl.services.ec2

import io.cloudshiftdev.awscdkdsl.common.CdkDslMarker
import kotlin.String
import software.amazon.awscdk.services.ec2.KeyPairFormat
import software.amazon.awscdk.services.ec2.KeyPairProps
import software.amazon.awscdk.services.ec2.KeyPairType

/**
 * The properties of a Key Pair.
 *
 * Example:
 * ```
 * Vpc vpc;
 * InstanceType instanceType;
 * KeyPair keyPair = KeyPair.Builder.create(this, "KeyPair")
 * .type(KeyPairType.ED25519)
 * .format(KeyPairFormat.PEM)
 * .build();
 * Instance instance = Instance.Builder.create(this, "Instance")
 * .vpc(vpc)
 * .instanceType(instanceType)
 * .machineImage(MachineImage.latestAmazonLinux2023())
 * // Use the custom key pair
 * .keyPair(keyPair)
 * .build();
 * ```
 */
@CdkDslMarker
public class KeyPairPropsDsl {
    private val cdkBuilder: KeyPairProps.Builder = KeyPairProps.builder()

    /** @param account The AWS account ID this resource belongs to. */
    public fun account(account: String) {
        cdkBuilder.account(account)
    }

    /**
     * @param environmentFromArn ARN to deduce region and account from. The ARN is parsed and the
     *   account and region are taken from the ARN. This should be used for imported resources.
     *
     * Cannot be supplied together with either `account` or `region`.
     */
    public fun environmentFromArn(environmentFromArn: String) {
        cdkBuilder.environmentFromArn(environmentFromArn)
    }

    /** @param format The format of the key pair. */
    public fun format(format: KeyPairFormat) {
        cdkBuilder.format(format)
    }

    /** @param keyPairName A unique name for the key pair. */
    public fun keyPairName(keyPairName: String) {
        cdkBuilder.keyPairName(keyPairName)
    }

    /**
     * @param physicalName The value passed in by users to the physical name prop of the resource.
     * * `undefined` implies that a physical name will be allocated by CloudFormation during
     *   deployment.
     * * a concrete value implies a specific physical name
     * * `PhysicalName.GENERATE_IF_NEEDED` is a marker that indicates that a physical will only be
     *   generated by the CDK if it is needed for cross-environment references. Otherwise, it will
     *   be allocated by CloudFormation.
     */
    public fun physicalName(physicalName: String) {
        cdkBuilder.physicalName(physicalName)
    }

    /**
     * @param publicKeyMaterial The public key material. If this is provided the key is considered
     *   "imported". For imported keys, it is assumed that you already have the private key material
     *   so the private key material will not be returned or stored in AWS Systems Manager Parameter
     *   Store.
     */
    public fun publicKeyMaterial(publicKeyMaterial: String) {
        cdkBuilder.publicKeyMaterial(publicKeyMaterial)
    }

    /** @param region The AWS region this resource belongs to. */
    public fun region(region: String) {
        cdkBuilder.region(region)
    }

    /** @param type The type of key pair. */
    public fun type(type: KeyPairType) {
        cdkBuilder.type(type)
    }

    public fun build(): KeyPairProps = cdkBuilder.build()
}
