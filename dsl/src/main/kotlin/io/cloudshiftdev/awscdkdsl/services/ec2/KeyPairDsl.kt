@file:Suppress(
    "RedundantVisibilityModifier",
    "RedundantUnitReturnType",
    "RemoveRedundantQualifierName",
    "unused",
    "UnusedImport",
    "ClassName",
    "REDUNDANT_PROJECTION",
    "DEPRECATION"
)

package io.cloudshiftdev.awscdkdsl.services.ec2

import io.cloudshiftdev.awscdkdsl.common.CdkDslMarker
import kotlin.String
import software.amazon.awscdk.services.ec2.KeyPair
import software.amazon.awscdk.services.ec2.KeyPairFormat
import software.amazon.awscdk.services.ec2.KeyPairType
import software.constructs.Construct

/**
 * An EC2 Key Pair.
 *
 * Example:
 * ```
 * IKeyPair keyPair = KeyPair.fromKeyPairAttributes(this, "KeyPair", KeyPairAttributes.builder()
 * .keyPairName("the-keypair-name")
 * .type(KeyPairType.RSA)
 * .build());
 * ```
 */
@CdkDslMarker
public class KeyPairDsl(
    scope: Construct,
    id: String,
) {
    private val cdkBuilder: KeyPair.Builder = KeyPair.Builder.create(scope, id)

    /**
     * The AWS account ID this resource belongs to.
     *
     * Default: - the resource is in the same account as the stack it belongs to
     *
     * @param account The AWS account ID this resource belongs to.
     */
    public fun account(account: String) {
        cdkBuilder.account(account)
    }

    /**
     * ARN to deduce region and account from.
     *
     * The ARN is parsed and the account and region are taken from the ARN. This should be used for
     * imported resources.
     *
     * Cannot be supplied together with either `account` or `region`.
     *
     * Default: - take environment from `account`, `region` parameters, or use Stack environment.
     *
     * @param environmentFromArn ARN to deduce region and account from.
     */
    public fun environmentFromArn(environmentFromArn: String) {
        cdkBuilder.environmentFromArn(environmentFromArn)
    }

    /**
     * The format of the key pair.
     *
     * Default: PEM
     *
     * @param format The format of the key pair.
     */
    public fun format(format: KeyPairFormat) {
        cdkBuilder.format(format)
    }

    /**
     * A unique name for the key pair.
     *
     * Default: A generated name
     *
     * @param keyPairName A unique name for the key pair.
     */
    public fun keyPairName(keyPairName: String) {
        cdkBuilder.keyPairName(keyPairName)
    }

    /**
     * The value passed in by users to the physical name prop of the resource.
     * * `undefined` implies that a physical name will be allocated by CloudFormation during
     *   deployment.
     * * a concrete value implies a specific physical name
     * * `PhysicalName.GENERATE_IF_NEEDED` is a marker that indicates that a physical will only be
     *   generated by the CDK if it is needed for cross-environment references. Otherwise, it will
     *   be allocated by CloudFormation.
     *
     * Default: - The physical name will be allocated by CloudFormation at deployment time
     *
     * @param physicalName The value passed in by users to the physical name prop of the resource.
     */
    public fun physicalName(physicalName: String) {
        cdkBuilder.physicalName(physicalName)
    }

    /**
     * The public key material.
     *
     * If this is provided the key is considered "imported". For imported keys, it is assumed that
     * you already have the private key material so the private key material will not be returned or
     * stored in AWS Systems Manager Parameter Store.
     *
     * Default: a public and private key will be generated
     *
     * @param publicKeyMaterial The public key material.
     */
    public fun publicKeyMaterial(publicKeyMaterial: String) {
        cdkBuilder.publicKeyMaterial(publicKeyMaterial)
    }

    /**
     * The AWS region this resource belongs to.
     *
     * Default: - the resource is in the same region as the stack it belongs to
     *
     * @param region The AWS region this resource belongs to.
     */
    public fun region(region: String) {
        cdkBuilder.region(region)
    }

    /**
     * The type of key pair.
     *
     * Default: RSA (ignored if keyMaterial is provided)
     *
     * @param type The type of key pair.
     */
    public fun type(type: KeyPairType) {
        cdkBuilder.type(type)
    }

    public fun build(): KeyPair = cdkBuilder.build()
}
