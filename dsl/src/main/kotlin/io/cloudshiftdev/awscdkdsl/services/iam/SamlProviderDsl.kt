@file:Suppress(
    "RedundantVisibilityModifier",
    "RedundantUnitReturnType",
    "RemoveRedundantQualifierName",
    "unused",
    "UnusedImport",
    "ClassName",
    "REDUNDANT_PROJECTION",
    "DEPRECATION"
)

package io.cloudshiftdev.awscdkdsl.services.iam

import io.cloudshiftdev.awscdkdsl.common.CdkDslMarker
import kotlin.String
import software.amazon.awscdk.services.iam.SamlMetadataDocument
import software.amazon.awscdk.services.iam.SamlProvider
import software.constructs.Construct

/**
 * A SAML provider.
 *
 * Example:
 * ```
 * SamlProvider provider = SamlProvider.Builder.create(this, "Provider")
 * .metadataDocument(SamlMetadataDocument.fromFile("/path/to/saml-metadata-document.xml"))
 * .build();
 * Role.Builder.create(this, "Role")
 * .assumedBy(new SamlConsolePrincipal(provider))
 * .build();
 * ```
 */
@CdkDslMarker
public class SamlProviderDsl(
    scope: Construct,
    id: String,
) {
    private val cdkBuilder: SamlProvider.Builder = SamlProvider.Builder.create(scope, id)

    /**
     * An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document
     * includes the issuer's name, expiration information, and keys that can be used to validate the
     * SAML authentication response (assertions) that are received from the IdP. You must generate
     * the metadata document using the identity management software that is used as your
     * organization's IdP.
     *
     * @param metadataDocument An XML document generated by an identity provider (IdP) that supports
     *   SAML 2.0. The document includes the issuer's name, expiration information, and keys that
     *   can be used to validate the SAML authentication response (assertions) that are received
     *   from the IdP. You must generate the metadata document using the identity management
     *   software that is used as your organization's IdP.
     */
    public fun metadataDocument(metadataDocument: SamlMetadataDocument) {
        cdkBuilder.metadataDocument(metadataDocument)
    }

    /**
     * The name of the provider to create.
     *
     * This parameter allows a string of characters consisting of upper and lowercase alphanumeric
     * characters with no spaces. You can also include any of the following characters: _+=,.&#64;-
     *
     * Length must be between 1 and 128 characters.
     *
     * Default: - a CloudFormation generated name
     *
     * @param name The name of the provider to create.
     */
    public fun name(name: String) {
        cdkBuilder.name(name)
    }

    public fun build(): SamlProvider = cdkBuilder.build()
}
