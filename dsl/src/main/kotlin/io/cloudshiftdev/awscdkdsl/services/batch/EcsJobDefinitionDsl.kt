@file:Suppress(
    "RedundantVisibilityModifier",
    "RedundantUnitReturnType",
    "RemoveRedundantQualifierName",
    "unused",
    "UnusedImport",
    "ClassName",
    "REDUNDANT_PROJECTION",
    "DEPRECATION"
)

package io.cloudshiftdev.awscdkdsl.services.batch

import io.cloudshiftdev.awscdkdsl.common.CdkDslMarker
import io.cloudshiftdev.awscdkdsl.common.MapBuilder
import kotlin.Any
import kotlin.Boolean
import kotlin.Number
import kotlin.String
import kotlin.Unit
import kotlin.collections.Collection
import kotlin.collections.Map
import kotlin.collections.MutableList
import software.amazon.awscdk.Duration
import software.amazon.awscdk.services.batch.EcsJobDefinition
import software.amazon.awscdk.services.batch.IEcsContainerDefinition
import software.amazon.awscdk.services.batch.RetryStrategy
import software.constructs.Construct

/**
 * A JobDefinition that uses ECS orchestration.
 *
 * Example:
 * ```
 * IVpc vpc;
 * EcsJobDefinition ecsJob = EcsJobDefinition.Builder.create(this, "JobDefn")
 * .container(EcsEc2ContainerDefinition.Builder.create(this, "containerDefn")
 * .image(ContainerImage.fromRegistry("public.ecr.aws/amazonlinux/amazonlinux:latest"))
 * .memory(Size.mebibytes(2048))
 * .cpu(256)
 * .build())
 * .build();
 * JobQueue queue = JobQueue.Builder.create(this, "JobQueue")
 * .computeEnvironments(List.of(OrderedComputeEnvironment.builder()
 * .computeEnvironment(ManagedEc2EcsComputeEnvironment.Builder.create(this, "managedEc2CE")
 * .vpc(vpc)
 * .build())
 * .order(1)
 * .build()))
 * .priority(10)
 * .build();
 * User user = new User(this, "MyUser");
 * ecsJob.grantSubmitJob(user, queue);
 * ```
 */
@CdkDslMarker
public class EcsJobDefinitionDsl(
    scope: Construct,
    id: String,
) {
    private val cdkBuilder: EcsJobDefinition.Builder = EcsJobDefinition.Builder.create(scope, id)

    private val _retryStrategies: MutableList<RetryStrategy> = mutableListOf()

    /**
     * The container that this job will run.
     *
     * @param container The container that this job will run.
     */
    public fun container(container: IEcsContainerDefinition) {
        cdkBuilder.container(container)
    }

    /**
     * The name of this job definition.
     *
     * Default: - generated by CloudFormation
     *
     * @param jobDefinitionName The name of this job definition.
     */
    public fun jobDefinitionName(jobDefinitionName: String) {
        cdkBuilder.jobDefinitionName(jobDefinitionName)
    }

    /**
     * The default parameters passed to the container These parameters can be referenced in the
     * `command` that you give to the container.
     *
     * Default: none
     *
     * [Documentation](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html#parameters)
     *
     * @param parameters The default parameters passed to the container These parameters can be
     *   referenced in the `command` that you give to the container.
     */
    public fun parameters(parameters: MapBuilder.() -> Unit = {}) {
        val builder = MapBuilder()
        builder.apply(parameters)
        cdkBuilder.parameters(builder.map)
    }

    /**
     * The default parameters passed to the container These parameters can be referenced in the
     * `command` that you give to the container.
     *
     * Default: none
     *
     * [Documentation](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html#parameters)
     *
     * @param parameters The default parameters passed to the container These parameters can be
     *   referenced in the `command` that you give to the container.
     */
    public fun parameters(parameters: Map<String, Any>) {
        cdkBuilder.parameters(parameters)
    }

    /**
     * Whether to propogate tags from the JobDefinition to the ECS task that Batch spawns.
     *
     * Default: false
     *
     * @param propagateTags Whether to propogate tags from the JobDefinition to the ECS task that
     *   Batch spawns.
     */
    public fun propagateTags(propagateTags: Boolean) {
        cdkBuilder.propagateTags(propagateTags)
    }

    /**
     * The number of times to retry a job.
     *
     * The job is retried on failure the same number of attempts as the value.
     *
     * Default: 1
     *
     * @param retryAttempts The number of times to retry a job.
     */
    public fun retryAttempts(retryAttempts: Number) {
        cdkBuilder.retryAttempts(retryAttempts)
    }

    /**
     * Defines the retry behavior for this job.
     *
     * Default: - no `RetryStrategy`
     *
     * @param retryStrategies Defines the retry behavior for this job.
     */
    public fun retryStrategies(vararg retryStrategies: RetryStrategy) {
        _retryStrategies.addAll(listOf(*retryStrategies))
    }

    /**
     * Defines the retry behavior for this job.
     *
     * Default: - no `RetryStrategy`
     *
     * @param retryStrategies Defines the retry behavior for this job.
     */
    public fun retryStrategies(retryStrategies: Collection<RetryStrategy>) {
        _retryStrategies.addAll(retryStrategies)
    }

    /**
     * The priority of this Job.
     *
     * Only used in Fairshare Scheduling to decide which job to run first when there are multiple
     * jobs with the same share identifier.
     *
     * Default: none
     *
     * @param schedulingPriority The priority of this Job.
     */
    public fun schedulingPriority(schedulingPriority: Number) {
        cdkBuilder.schedulingPriority(schedulingPriority)
    }

    /**
     * The timeout time for jobs that are submitted with this job definition.
     *
     * After the amount of time you specify passes, Batch terminates your jobs if they aren't
     * finished.
     *
     * Default: - no timeout
     *
     * @param timeout The timeout time for jobs that are submitted with this job definition.
     */
    public fun timeout(timeout: Duration) {
        cdkBuilder.timeout(timeout)
    }

    public fun build(): EcsJobDefinition {
        if (_retryStrategies.isNotEmpty()) cdkBuilder.retryStrategies(_retryStrategies)
        return cdkBuilder.build()
    }
}
