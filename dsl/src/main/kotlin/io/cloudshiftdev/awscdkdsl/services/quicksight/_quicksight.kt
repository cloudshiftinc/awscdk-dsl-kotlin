@file:Suppress(
    "RedundantVisibilityModifier",
    "RedundantUnitReturnType",
    "RemoveRedundantQualifierName",
    "unused",
    "UnusedImport",
    "ClassName",
    "REDUNDANT_PROJECTION",
    "DEPRECATION"
)

package io.cloudshiftdev.awscdkdsl.services.quicksight

import kotlin.String
import kotlin.Unit
import software.amazon.awscdk.services.quicksight.CfnAnalysis
import software.amazon.awscdk.services.quicksight.CfnAnalysisProps
import software.amazon.awscdk.services.quicksight.CfnDashboard
import software.amazon.awscdk.services.quicksight.CfnDashboardProps
import software.amazon.awscdk.services.quicksight.CfnDataSet
import software.amazon.awscdk.services.quicksight.CfnDataSetProps
import software.amazon.awscdk.services.quicksight.CfnDataSource
import software.amazon.awscdk.services.quicksight.CfnDataSourceProps
import software.amazon.awscdk.services.quicksight.CfnRefreshSchedule
import software.amazon.awscdk.services.quicksight.CfnRefreshScheduleProps
import software.amazon.awscdk.services.quicksight.CfnTemplate
import software.amazon.awscdk.services.quicksight.CfnTemplateProps
import software.amazon.awscdk.services.quicksight.CfnTheme
import software.amazon.awscdk.services.quicksight.CfnThemeProps
import software.amazon.awscdk.services.quicksight.CfnTopic
import software.amazon.awscdk.services.quicksight.CfnTopicProps
import software.amazon.awscdk.services.quicksight.CfnVPCConnection
import software.amazon.awscdk.services.quicksight.CfnVPCConnectionProps
import software.constructs.Construct

public object quicksight {
    /**
     * Creates an analysis in Amazon QuickSight.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html)
     */
    public inline fun cfnAnalysis(
        scope: Construct,
        id: String,
        block: CfnAnalysisDsl.() -> Unit = {},
    ): CfnAnalysis {
        val builder = CfnAnalysisDsl(scope, id)
        builder.apply(block)
        return builder.build()
    }

    /**
     * An aggregation function aggregates values from a dimension or measure.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AggregationFunctionProperty aggregationFunctionProperty = AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html)
     */
    public inline fun cfnAnalysisAggregationFunctionProperty(
        block: CfnAnalysisAggregationFunctionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AggregationFunctionProperty {
        val builder = CfnAnalysisAggregationFunctionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration options to sort aggregated values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AggregationSortConfigurationProperty aggregationSortConfigurationProperty =
     * AggregationSortConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sortDirection("sortDirection")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationsortconfiguration.html)
     */
    public inline fun cfnAnalysisAggregationSortConfigurationProperty(
        block: CfnAnalysisAggregationSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AggregationSortConfigurationProperty {
        val builder = CfnAnalysisAggregationSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for default analysis settings.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AnalysisDefaultsProperty analysisDefaultsProperty = AnalysisDefaultsProperty.builder()
     * .defaultNewSheetConfiguration(DefaultNewSheetConfigurationProperty.builder()
     * .interactiveLayoutConfiguration(DefaultInteractiveLayoutConfigurationProperty.builder()
     * .freeForm(DefaultFreeFormLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .grid(DefaultGridLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build())
     * .paginatedLayoutConfiguration(DefaultPaginatedLayoutConfigurationProperty.builder()
     * .sectionBased(DefaultSectionBasedLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .build())
     * .build())
     * .sheetContentType("sheetContentType")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefaults.html)
     */
    public inline fun cfnAnalysisAnalysisDefaultsProperty(
        block: CfnAnalysisAnalysisDefaultsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AnalysisDefaultsProperty {
        val builder = CfnAnalysisAnalysisDefaultsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The definition of an analysis.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html)
     */
    public inline fun cfnAnalysisAnalysisDefinitionProperty(
        block: CfnAnalysisAnalysisDefinitionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AnalysisDefinitionProperty {
        val builder = CfnAnalysisAnalysisDefinitionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Analysis error.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AnalysisErrorProperty analysisErrorProperty = AnalysisErrorProperty.builder()
     * .message("message")
     * .type("type")
     * .violatedEntities(List.of(EntityProperty.builder()
     * .path("path")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysiserror.html)
     */
    public inline fun cfnAnalysisAnalysisErrorProperty(
        block: CfnAnalysisAnalysisErrorPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AnalysisErrorProperty {
        val builder = CfnAnalysisAnalysisErrorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The source entity of an analysis.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AnalysisSourceEntityProperty analysisSourceEntityProperty =
     * AnalysisSourceEntityProperty.builder()
     * .sourceTemplate(AnalysisSourceTemplateProperty.builder()
     * .arn("arn")
     * .dataSetReferences(List.of(DataSetReferenceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .dataSetPlaceholder("dataSetPlaceholder")
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourceentity.html)
     */
    public inline fun cfnAnalysisAnalysisSourceEntityProperty(
        block: CfnAnalysisAnalysisSourceEntityPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AnalysisSourceEntityProperty {
        val builder = CfnAnalysisAnalysisSourceEntityPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The source template of an analysis.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AnalysisSourceTemplateProperty analysisSourceTemplateProperty =
     * AnalysisSourceTemplateProperty.builder()
     * .arn("arn")
     * .dataSetReferences(List.of(DataSetReferenceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .dataSetPlaceholder("dataSetPlaceholder")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourcetemplate.html)
     */
    public inline fun cfnAnalysisAnalysisSourceTemplateProperty(
        block: CfnAnalysisAnalysisSourceTemplatePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AnalysisSourceTemplateProperty {
        val builder = CfnAnalysisAnalysisSourceTemplatePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The date configuration of the filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AnchorDateConfigurationProperty anchorDateConfigurationProperty =
     * AnchorDateConfigurationProperty.builder()
     * .anchorOption("anchorOption")
     * .parameterName("parameterName")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-anchordateconfiguration.html)
     */
    public inline fun cfnAnalysisAnchorDateConfigurationProperty(
        block: CfnAnalysisAnchorDateConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AnchorDateConfigurationProperty {
        val builder = CfnAnalysisAnchorDateConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The arc axis configuration of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ArcAxisConfigurationProperty arcAxisConfigurationProperty =
     * ArcAxisConfigurationProperty.builder()
     * .range(ArcAxisDisplayRangeProperty.builder()
     * .max(123)
     * .min(123)
     * .build())
     * .reserveRange(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisconfiguration.html)
     */
    public inline fun cfnAnalysisArcAxisConfigurationProperty(
        block: CfnAnalysisArcAxisConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ArcAxisConfigurationProperty {
        val builder = CfnAnalysisArcAxisConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The arc axis range of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ArcAxisDisplayRangeProperty arcAxisDisplayRangeProperty = ArcAxisDisplayRangeProperty.builder()
     * .max(123)
     * .min(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisdisplayrange.html)
     */
    public inline fun cfnAnalysisArcAxisDisplayRangeProperty(
        block: CfnAnalysisArcAxisDisplayRangePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ArcAxisDisplayRangeProperty {
        val builder = CfnAnalysisArcAxisDisplayRangePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The arc configuration of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ArcConfigurationProperty arcConfigurationProperty = ArcConfigurationProperty.builder()
     * .arcAngle(123)
     * .arcThickness("arcThickness")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcconfiguration.html)
     */
    public inline fun cfnAnalysisArcConfigurationProperty(
        block: CfnAnalysisArcConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ArcConfigurationProperty {
        val builder = CfnAnalysisArcConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the arc thickness of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ArcOptionsProperty arcOptionsProperty = ArcOptionsProperty.builder()
     * .arcThickness("arcThickness")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcoptions.html)
     */
    public inline fun cfnAnalysisArcOptionsProperty(
        block: CfnAnalysisArcOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ArcOptionsProperty {
        val builder = CfnAnalysisArcOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data options for an axis.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * AxisDataOptionsProperty axisDataOptionsProperty = AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdataoptions.html)
     */
    public inline fun cfnAnalysisAxisDataOptionsProperty(
        block: CfnAnalysisAxisDataOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AxisDataOptionsProperty {
        val builder = CfnAnalysisAxisDataOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The minimum and maximum setup for an axis display range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisDisplayMinMaxRangeProperty axisDisplayMinMaxRangeProperty =
     * AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayminmaxrange.html)
     */
    public inline fun cfnAnalysisAxisDisplayMinMaxRangeProperty(
        block: CfnAnalysisAxisDisplayMinMaxRangePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AxisDisplayMinMaxRangeProperty {
        val builder = CfnAnalysisAxisDisplayMinMaxRangePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options for the axis label.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * AxisDisplayOptionsProperty axisDisplayOptionsProperty = AxisDisplayOptionsProperty.builder()
     * .axisLineVisibility("axisLineVisibility")
     * .axisOffset("axisOffset")
     * .dataOptions(AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build())
     * .gridLineVisibility("gridLineVisibility")
     * .scrollbarOptions(ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build())
     * .tickLabelOptions(AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html)
     */
    public inline fun cfnAnalysisAxisDisplayOptionsProperty(
        block: CfnAnalysisAxisDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AxisDisplayOptionsProperty {
        val builder = CfnAnalysisAxisDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The range setup of a numeric axis display range.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * AxisDisplayRangeProperty axisDisplayRangeProperty = AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayrange.html)
     */
    public inline fun cfnAnalysisAxisDisplayRangeProperty(
        block: CfnAnalysisAxisDisplayRangePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AxisDisplayRangeProperty {
        val builder = CfnAnalysisAxisDisplayRangePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The label options for a chart axis.
     *
     * You must specify the field that the label is targeted to.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisLabelOptionsProperty axisLabelOptionsProperty = AxisLabelOptionsProperty.builder()
     * .applyTo(AxisLabelReferenceOptionsProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * .build())
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabeloptions.html)
     */
    public inline fun cfnAnalysisAxisLabelOptionsProperty(
        block: CfnAnalysisAxisLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AxisLabelOptionsProperty {
        val builder = CfnAnalysisAxisLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The reference that specifies where the axis label is applied to.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisLabelReferenceOptionsProperty axisLabelReferenceOptionsProperty =
     * AxisLabelReferenceOptionsProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabelreferenceoptions.html)
     */
    public inline fun cfnAnalysisAxisLabelReferenceOptionsProperty(
        block: CfnAnalysisAxisLabelReferenceOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AxisLabelReferenceOptionsProperty {
        val builder = CfnAnalysisAxisLabelReferenceOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The liner axis scale setup.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisLinearScaleProperty axisLinearScaleProperty = AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislinearscale.html)
     */
    public inline fun cfnAnalysisAxisLinearScaleProperty(
        block: CfnAnalysisAxisLinearScalePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AxisLinearScaleProperty {
        val builder = CfnAnalysisAxisLinearScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The logarithmic axis scale setup.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisLogarithmicScaleProperty axisLogarithmicScaleProperty =
     * AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislogarithmicscale.html)
     */
    public inline fun cfnAnalysisAxisLogarithmicScaleProperty(
        block: CfnAnalysisAxisLogarithmicScalePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AxisLogarithmicScaleProperty {
        val builder = CfnAnalysisAxisLogarithmicScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The scale setup options for a numeric axis display.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisScaleProperty axisScaleProperty = AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisscale.html)
     */
    public inline fun cfnAnalysisAxisScaleProperty(
        block: CfnAnalysisAxisScalePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AxisScaleProperty {
        val builder = CfnAnalysisAxisScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The tick label options of an axis.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisTickLabelOptionsProperty axisTickLabelOptionsProperty =
     * AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisticklabeloptions.html)
     */
    public inline fun cfnAnalysisAxisTickLabelOptionsProperty(
        block: CfnAnalysisAxisTickLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.AxisTickLabelOptionsProperty {
        val builder = CfnAnalysisAxisTickLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells of a bar chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisBarChartAggregatedFieldWellsProperty(
        block: CfnAnalysisBarChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BarChartAggregatedFieldWellsProperty {
        val builder = CfnAnalysisBarChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `BarChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html)
     */
    public inline fun cfnAnalysisBarChartConfigurationProperty(
        block: CfnAnalysisBarChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BarChartConfigurationProperty {
        val builder = CfnAnalysisBarChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a `BarChartVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartfieldwells.html)
     */
    public inline fun cfnAnalysisBarChartFieldWellsProperty(
        block: CfnAnalysisBarChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BarChartFieldWellsProperty {
        val builder = CfnAnalysisBarChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * sort-configuration-description.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BarChartSortConfigurationProperty barChartSortConfigurationProperty =
     * BarChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .colorItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .colorSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .smallMultiplesSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html)
     */
    public inline fun cfnAnalysisBarChartSortConfigurationProperty(
        block: CfnAnalysisBarChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BarChartSortConfigurationProperty {
        val builder = CfnAnalysisBarChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A bar chart.
     *
     * The `BarChartVisual` structure describes a visual that is a member of the bar chart family.
     * The following charts can be described using this structure:
     * * Horizontal bar chart
     * * Vertical bar chart
     * * Horizontal stacked bar chart
     * * Vertical stacked bar chart
     * * Horizontal stacked 100% bar chart
     * * Vertical stacked 100% bar chart
     *
     * For more information, see
     * [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html)
     */
    public inline fun cfnAnalysisBarChartVisualProperty(
        block: CfnAnalysisBarChartVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BarChartVisualProperty {
        val builder = CfnAnalysisBarChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the bin count of a histogram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BinCountOptionsProperty binCountOptionsProperty = BinCountOptionsProperty.builder()
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bincountoptions.html)
     */
    public inline fun cfnAnalysisBinCountOptionsProperty(
        block: CfnAnalysisBinCountOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BinCountOptionsProperty {
        val builder = CfnAnalysisBinCountOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the bin width of a histogram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BinWidthOptionsProperty binWidthOptionsProperty = BinWidthOptionsProperty.builder()
     * .binCountLimit(123)
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-binwidthoptions.html)
     */
    public inline fun cfnAnalysisBinWidthOptionsProperty(
        block: CfnAnalysisBinWidthOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BinWidthOptionsProperty {
        val builder = CfnAnalysisBinWidthOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a body section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BodySectionConfigurationProperty bodySectionConfigurationProperty =
     * BodySectionConfigurationProperty.builder()
     * .content(BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .pageBreakConfiguration(SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build())
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html)
     */
    public inline fun cfnAnalysisBodySectionConfigurationProperty(
        block: CfnAnalysisBodySectionConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BodySectionConfigurationProperty {
        val builder = CfnAnalysisBodySectionConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of content in a body section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BodySectionContentProperty bodySectionContentProperty = BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectioncontent.html)
     */
    public inline fun cfnAnalysisBodySectionContentProperty(
        block: CfnAnalysisBodySectionContentPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BodySectionContentProperty {
        val builder = CfnAnalysisBodySectionContentPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well for a box plot.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotAggregatedFieldWellsProperty boxPlotAggregatedFieldWellsProperty =
     * BoxPlotAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisBoxPlotAggregatedFieldWellsProperty(
        block: CfnAnalysisBoxPlotAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BoxPlotAggregatedFieldWellsProperty {
        val builder = CfnAnalysisBoxPlotAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `BoxPlotVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html)
     */
    public inline fun cfnAnalysisBoxPlotChartConfigurationProperty(
        block: CfnAnalysisBoxPlotChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BoxPlotChartConfigurationProperty {
        val builder = CfnAnalysisBoxPlotChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a `BoxPlotVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotFieldWellsProperty boxPlotFieldWellsProperty = BoxPlotFieldWellsProperty.builder()
     * .boxPlotAggregatedFieldWells(BoxPlotAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotfieldwells.html)
     */
    public inline fun cfnAnalysisBoxPlotFieldWellsProperty(
        block: CfnAnalysisBoxPlotFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BoxPlotFieldWellsProperty {
        val builder = CfnAnalysisBoxPlotFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options of a box plot visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotOptionsProperty boxPlotOptionsProperty = BoxPlotOptionsProperty.builder()
     * .allDataPointsVisibility("allDataPointsVisibility")
     * .outlierVisibility("outlierVisibility")
     * .styleOptions(BoxPlotStyleOptionsProperty.builder()
     * .fillStyle("fillStyle")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotoptions.html)
     */
    public inline fun cfnAnalysisBoxPlotOptionsProperty(
        block: CfnAnalysisBoxPlotOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BoxPlotOptionsProperty {
        val builder = CfnAnalysisBoxPlotOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `BoxPlotVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotSortConfigurationProperty boxPlotSortConfigurationProperty =
     * BoxPlotSortConfigurationProperty.builder()
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .paginationConfiguration(PaginationConfigurationProperty.builder()
     * .pageNumber(123)
     * .pageSize(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotsortconfiguration.html)
     */
    public inline fun cfnAnalysisBoxPlotSortConfigurationProperty(
        block: CfnAnalysisBoxPlotSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BoxPlotSortConfigurationProperty {
        val builder = CfnAnalysisBoxPlotSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The style options of the box plot.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotStyleOptionsProperty boxPlotStyleOptionsProperty = BoxPlotStyleOptionsProperty.builder()
     * .fillStyle("fillStyle")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotstyleoptions.html)
     */
    public inline fun cfnAnalysisBoxPlotStyleOptionsProperty(
        block: CfnAnalysisBoxPlotStyleOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BoxPlotStyleOptionsProperty {
        val builder = CfnAnalysisBoxPlotStyleOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A box plot.
     *
     * For more information, see
     * [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html)
     */
    public inline fun cfnAnalysisBoxPlotVisualProperty(
        block: CfnAnalysisBoxPlotVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.BoxPlotVisualProperty {
        val builder = CfnAnalysisBoxPlotVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The calculated field of an analysis.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CalculatedFieldProperty calculatedFieldProperty = CalculatedFieldProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .expression("expression")
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedfield.html)
     */
    public inline fun cfnAnalysisCalculatedFieldProperty(
        block: CfnAnalysisCalculatedFieldPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CalculatedFieldProperty {
        val builder = CfnAnalysisCalculatedFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The table calculation measure field for pivot tables.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CalculatedMeasureFieldProperty calculatedMeasureFieldProperty =
     * CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedmeasurefield.html)
     */
    public inline fun cfnAnalysisCalculatedMeasureFieldProperty(
        block: CfnAnalysisCalculatedMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CalculatedMeasureFieldProperty {
        val builder = CfnAnalysisCalculatedMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The values that are displayed in a control can be configured to only show values that are
     * valid based on what's selected in other controls.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CascadingControlConfigurationProperty cascadingControlConfigurationProperty =
     * CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolconfiguration.html)
     */
    public inline fun cfnAnalysisCascadingControlConfigurationProperty(
        block: CfnAnalysisCascadingControlConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CascadingControlConfigurationProperty {
        val builder = CfnAnalysisCascadingControlConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The source controls that are used in a `CascadingControlConfiguration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CascadingControlSourceProperty cascadingControlSourceProperty =
     * CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolsource.html)
     */
    public inline fun cfnAnalysisCascadingControlSourceProperty(
        block: CfnAnalysisCascadingControlSourcePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CascadingControlSourceProperty {
        val builder = CfnAnalysisCascadingControlSourcePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dimension type field with categorical type columns..
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoricalDimensionFieldProperty categoricalDimensionFieldProperty =
     * CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html)
     */
    public inline fun cfnAnalysisCategoricalDimensionFieldProperty(
        block: CfnAnalysisCategoricalDimensionFieldPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CategoricalDimensionFieldProperty {
        val builder = CfnAnalysisCategoricalDimensionFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The measure type field with categorical type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoricalMeasureFieldProperty categoricalMeasureFieldProperty =
     * CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html)
     */
    public inline fun cfnAnalysisCategoricalMeasureFieldProperty(
        block: CfnAnalysisCategoricalMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CategoricalMeasureFieldProperty {
        val builder = CfnAnalysisCategoricalMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The numeric equality type drill down filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoryDrillDownFilterProperty categoryDrillDownFilterProperty =
     * CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categorydrilldownfilter.html)
     */
    public inline fun cfnAnalysisCategoryDrillDownFilterProperty(
        block: CfnAnalysisCategoryDrillDownFilterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CategoryDrillDownFilterProperty {
        val builder = CfnAnalysisCategoryDrillDownFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `CategoryFilter` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoryFilterConfigurationProperty categoryFilterConfigurationProperty =
     * CategoryFilterConfigurationProperty.builder()
     * .customFilterConfiguration(CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .customFilterListConfiguration(CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .filterListConfiguration(FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilterconfiguration.html)
     */
    public inline fun cfnAnalysisCategoryFilterConfigurationProperty(
        block: CfnAnalysisCategoryFilterConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CategoryFilterConfigurationProperty {
        val builder = CfnAnalysisCategoryFilterConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `CategoryFilter` filters text values.
     *
     * For more information, see
     * [Adding text filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoryFilterProperty categoryFilterProperty = CategoryFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .configuration(CategoryFilterConfigurationProperty.builder()
     * .customFilterConfiguration(CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .customFilterListConfiguration(CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .filterListConfiguration(FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .build())
     * .filterId("filterId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilter.html)
     */
    public inline fun cfnAnalysisCategoryFilterProperty(
        block: CfnAnalysisCategoryFilterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CategoryFilterProperty {
        val builder = CfnAnalysisCategoryFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The label options for an axis on a chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ChartAxisLabelOptionsProperty chartAxisLabelOptionsProperty =
     * ChartAxisLabelOptionsProperty.builder()
     * .axisLabelOptions(List.of(AxisLabelOptionsProperty.builder()
     * .applyTo(AxisLabelReferenceOptionsProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * .build())
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .build()))
     * .sortIconVisibility("sortIconVisibility")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-chartaxislabeloptions.html)
     */
    public inline fun cfnAnalysisChartAxisLabelOptionsProperty(
        block: CfnAnalysisChartAxisLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ChartAxisLabelOptionsProperty {
        val builder = CfnAnalysisChartAxisLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The cluster marker configuration of the geospatial map selected point style.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ClusterMarkerConfigurationProperty clusterMarkerConfigurationProperty =
     * ClusterMarkerConfigurationProperty.builder()
     * .clusterMarker(ClusterMarkerProperty.builder()
     * .simpleClusterMarker(SimpleClusterMarkerProperty.builder()
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-clustermarkerconfiguration.html)
     */
    public inline fun cfnAnalysisClusterMarkerConfigurationProperty(
        block: CfnAnalysisClusterMarkerConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ClusterMarkerConfigurationProperty {
        val builder = CfnAnalysisClusterMarkerConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The cluster marker that is a part of the cluster marker configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ClusterMarkerProperty clusterMarkerProperty = ClusterMarkerProperty.builder()
     * .simpleClusterMarker(SimpleClusterMarkerProperty.builder()
     * .color("color")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-clustermarker.html)
     */
    public inline fun cfnAnalysisClusterMarkerProperty(
        block: CfnAnalysisClusterMarkerPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ClusterMarkerProperty {
        val builder = CfnAnalysisClusterMarkerPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the color scale that is applied to the visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColorScaleProperty colorScaleProperty = ColorScaleProperty.builder()
     * .colorFillType("colorFillType")
     * .colors(List.of(DataColorProperty.builder()
     * .color("color")
     * .dataValue(123)
     * .build()))
     * // the properties below are optional
     * .nullValueColor(DataColorProperty.builder()
     * .color("color")
     * .dataValue(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorscale.html)
     */
    public inline fun cfnAnalysisColorScaleProperty(
        block: CfnAnalysisColorScalePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ColorScaleProperty {
        val builder = CfnAnalysisColorScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The general configuration of a column.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnConfigurationProperty columnConfigurationProperty = ColumnConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .formatConfiguration(FormatConfigurationProperty.builder()
     * .dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .numberFormatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .stringFormatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .role("role")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html)
     */
    public inline fun cfnAnalysisColumnConfigurationProperty(
        block: CfnAnalysisColumnConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ColumnConfigurationProperty {
        val builder = CfnAnalysisColumnConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the hierarchy of the fields for a visual element.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnHierarchyProperty columnHierarchyProperty = ColumnHierarchyProperty.builder()
     * .dateTimeHierarchy(DateTimeHierarchyProperty.builder()
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build())
     * .explicitHierarchy(ExplicitHierarchyProperty.builder()
     * .columns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build())
     * .predefinedHierarchy(PredefinedHierarchyProperty.builder()
     * .columns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnhierarchy.html)
     */
    public inline fun cfnAnalysisColumnHierarchyProperty(
        block: CfnAnalysisColumnHierarchyPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ColumnHierarchyProperty {
        val builder = CfnAnalysisColumnHierarchyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A column of a data set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnIdentifierProperty columnIdentifierProperty = ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnidentifier.html)
     */
    public inline fun cfnAnalysisColumnIdentifierProperty(
        block: CfnAnalysisColumnIdentifierPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ColumnIdentifierProperty {
        val builder = CfnAnalysisColumnIdentifierPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration for a column that is not used in a field well.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnSortProperty columnSortProperty = ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnsort.html)
     */
    public inline fun cfnAnalysisColumnSortProperty(
        block: CfnAnalysisColumnSortPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ColumnSortProperty {
        val builder = CfnAnalysisColumnSortPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The tooltip item for the columns that are not part of a field well.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnTooltipItemProperty columnTooltipItemProperty = ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html)
     */
    public inline fun cfnAnalysisColumnTooltipItemProperty(
        block: CfnAnalysisColumnTooltipItemPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ColumnTooltipItemProperty {
        val builder = CfnAnalysisColumnTooltipItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells of a combo chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisComboChartAggregatedFieldWellsProperty(
        block: CfnAnalysisComboChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ComboChartAggregatedFieldWellsProperty {
        val builder = CfnAnalysisComboChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `ComboChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html)
     */
    public inline fun cfnAnalysisComboChartConfigurationProperty(
        block: CfnAnalysisComboChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ComboChartConfigurationProperty {
        val builder = CfnAnalysisComboChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of the visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartfieldwells.html)
     */
    public inline fun cfnAnalysisComboChartFieldWellsProperty(
        block: CfnAnalysisComboChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ComboChartFieldWellsProperty {
        val builder = CfnAnalysisComboChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `ComboChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ComboChartSortConfigurationProperty comboChartSortConfigurationProperty =
     * ComboChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .colorItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .colorSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html)
     */
    public inline fun cfnAnalysisComboChartSortConfigurationProperty(
        block: CfnAnalysisComboChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ComboChartSortConfigurationProperty {
        val builder = CfnAnalysisComboChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A combo chart.
     *
     * The `ComboChartVisual` includes stacked bar combo charts and clustered bar combo charts
     *
     * For more information, see
     * [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html)
     */
    public inline fun cfnAnalysisComboChartVisualProperty(
        block: CfnAnalysisComboChartVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ComboChartVisualProperty {
        val builder = CfnAnalysisComboChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The comparison display configuration of a KPI or gauge chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ComparisonConfigurationProperty comparisonConfigurationProperty =
     * ComparisonConfigurationProperty.builder()
     * .comparisonFormat(ComparisonFormatConfigurationProperty.builder()
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .comparisonMethod("comparisonMethod")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonconfiguration.html)
     */
    public inline fun cfnAnalysisComparisonConfigurationProperty(
        block: CfnAnalysisComparisonConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ComparisonConfigurationProperty {
        val builder = CfnAnalysisComparisonConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The format of the comparison.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ComparisonFormatConfigurationProperty comparisonFormatConfigurationProperty =
     * ComparisonFormatConfigurationProperty.builder()
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonformatconfiguration.html)
     */
    public inline fun cfnAnalysisComparisonFormatConfigurationProperty(
        block: CfnAnalysisComparisonFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ComparisonFormatConfigurationProperty {
        val builder = CfnAnalysisComparisonFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The computation union that is used in an insight visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html)
     */
    public inline fun cfnAnalysisComputationProperty(
        block: CfnAnalysisComputationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ComputationProperty {
        val builder = CfnAnalysisComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The formatting configuration for the color.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingColorProperty conditionalFormattingColorProperty =
     * ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcolor.html)
     */
    public inline fun cfnAnalysisConditionalFormattingColorProperty(
        block: CfnAnalysisConditionalFormattingColorPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ConditionalFormattingColorProperty {
        val builder = CfnAnalysisConditionalFormattingColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the custom condition for an icon set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingCustomIconConditionProperty
     * conditionalFormattingCustomIconConditionProperty =
     * ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html)
     */
    public inline fun cfnAnalysisConditionalFormattingCustomIconConditionProperty(
        block: CfnAnalysisConditionalFormattingCustomIconConditionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ConditionalFormattingCustomIconConditionProperty {
        val builder = CfnAnalysisConditionalFormattingCustomIconConditionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Custom icon options for an icon set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingCustomIconOptionsProperty conditionalFormattingCustomIconOptionsProperty =
     * ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconoptions.html)
     */
    public inline fun cfnAnalysisConditionalFormattingCustomIconOptionsProperty(
        block: CfnAnalysisConditionalFormattingCustomIconOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ConditionalFormattingCustomIconOptionsProperty {
        val builder = CfnAnalysisConditionalFormattingCustomIconOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for gradient color.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingGradientColorProperty conditionalFormattingGradientColorProperty =
     * ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattinggradientcolor.html)
     */
    public inline fun cfnAnalysisConditionalFormattingGradientColorProperty(
        block: CfnAnalysisConditionalFormattingGradientColorPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ConditionalFormattingGradientColorProperty {
        val builder = CfnAnalysisConditionalFormattingGradientColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the icon display configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingIconDisplayConfigurationProperty
     * conditionalFormattingIconDisplayConfigurationProperty =
     * ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicondisplayconfiguration.html)
     */
    public inline fun cfnAnalysisConditionalFormattingIconDisplayConfigurationProperty(
        block: CfnAnalysisConditionalFormattingIconDisplayConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ConditionalFormattingIconDisplayConfigurationProperty {
        val builder = CfnAnalysisConditionalFormattingIconDisplayConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The formatting configuration for the icon.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingIconProperty conditionalFormattingIconProperty =
     * ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicon.html)
     */
    public inline fun cfnAnalysisConditionalFormattingIconProperty(
        block: CfnAnalysisConditionalFormattingIconPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ConditionalFormattingIconProperty {
        val builder = CfnAnalysisConditionalFormattingIconPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for icon set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingIconSetProperty conditionalFormattingIconSetProperty =
     * ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingiconset.html)
     */
    public inline fun cfnAnalysisConditionalFormattingIconSetProperty(
        block: CfnAnalysisConditionalFormattingIconSetPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ConditionalFormattingIconSetProperty {
        val builder = CfnAnalysisConditionalFormattingIconSetPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for solid color.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingSolidColorProperty conditionalFormattingSolidColorProperty =
     * ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingsolidcolor.html)
     */
    public inline fun cfnAnalysisConditionalFormattingSolidColorProperty(
        block: CfnAnalysisConditionalFormattingSolidColorPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ConditionalFormattingSolidColorProperty {
        val builder = CfnAnalysisConditionalFormattingSolidColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The contribution analysis visual display for a line, pie, or bar chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ContributionAnalysisDefaultProperty contributionAnalysisDefaultProperty =
     * ContributionAnalysisDefaultProperty.builder()
     * .contributorDimensions(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .measureFieldId("measureFieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-contributionanalysisdefault.html)
     */
    public inline fun cfnAnalysisContributionAnalysisDefaultProperty(
        block: CfnAnalysisContributionAnalysisDefaultPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ContributionAnalysisDefaultProperty {
        val builder = CfnAnalysisContributionAnalysisDefaultPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the currency display format configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CurrencyDisplayFormatConfigurationProperty currencyDisplayFormatConfigurationProperty =
     * CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html)
     */
    public inline fun cfnAnalysisCurrencyDisplayFormatConfigurationProperty(
        block: CfnAnalysisCurrencyDisplayFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CurrencyDisplayFormatConfigurationProperty {
        val builder = CfnAnalysisCurrencyDisplayFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The filter operation that filters data included in a visual or in an entire sheet.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomActionFilterOperationProperty customActionFilterOperationProperty =
     * CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionfilteroperation.html)
     */
    public inline fun cfnAnalysisCustomActionFilterOperationProperty(
        block: CfnAnalysisCustomActionFilterOperationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CustomActionFilterOperationProperty {
        val builder = CfnAnalysisCustomActionFilterOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The navigation operation that navigates between different sheets in the same analysis.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomActionNavigationOperationProperty customActionNavigationOperationProperty =
     * CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionnavigationoperation.html)
     */
    public inline fun cfnAnalysisCustomActionNavigationOperationProperty(
        block: CfnAnalysisCustomActionNavigationOperationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CustomActionNavigationOperationProperty {
        val builder = CfnAnalysisCustomActionNavigationOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The set parameter operation that sets parameters in custom action.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomActionSetParametersOperationProperty customActionSetParametersOperationProperty =
     * CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionsetparametersoperation.html)
     */
    public inline fun cfnAnalysisCustomActionSetParametersOperationProperty(
        block: CfnAnalysisCustomActionSetParametersOperationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CustomActionSetParametersOperationProperty {
        val builder = CfnAnalysisCustomActionSetParametersOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The URL operation that opens a link to another webpage.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomActionURLOperationProperty customActionURLOperationProperty =
     * CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionurloperation.html)
     */
    public inline fun cfnAnalysisCustomActionURLOperationProperty(
        block: CfnAnalysisCustomActionURLOperationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CustomActionURLOperationProperty {
        val builder = CfnAnalysisCustomActionURLOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `CustomContentVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomContentConfigurationProperty customContentConfigurationProperty =
     * CustomContentConfigurationProperty.builder()
     * .contentType("contentType")
     * .contentUrl("contentUrl")
     * .imageScaling("imageScaling")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentconfiguration.html)
     */
    public inline fun cfnAnalysisCustomContentConfigurationProperty(
        block: CfnAnalysisCustomContentConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CustomContentConfigurationProperty {
        val builder = CfnAnalysisCustomContentConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A visual that contains custom content.
     *
     * For more information, see
     * [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomContentVisualProperty customContentVisualProperty = CustomContentVisualProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .visualId("visualId")
     * // the properties below are optional
     * .actions(List.of(VisualCustomActionProperty.builder()
     * .actionOperations(List.of(VisualCustomActionOperationProperty.builder()
     * .filterOperation(CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build())
     * .navigationOperation(CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build())
     * .setParametersOperation(CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build())
     * .urlOperation(CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build())
     * .build()))
     * .customActionId("customActionId")
     * .name("name")
     * .trigger("trigger")
     * // the properties below are optional
     * .status("status")
     * .build()))
     * .chartConfiguration(CustomContentConfigurationProperty.builder()
     * .contentType("contentType")
     * .contentUrl("contentUrl")
     * .imageScaling("imageScaling")
     * .build())
     * .subtitle(VisualSubtitleLabelOptionsProperty.builder()
     * .formatText(LongFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build())
     * .visibility("visibility")
     * .build())
     * .title(VisualTitleLabelOptionsProperty.builder()
     * .formatText(ShortFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html)
     */
    public inline fun cfnAnalysisCustomContentVisualProperty(
        block: CfnAnalysisCustomContentVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CustomContentVisualProperty {
        val builder = CfnAnalysisCustomContentVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A custom filter that filters based on a single value.
     *
     * This filter can be partially matched.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomFilterConfigurationProperty customFilterConfigurationProperty =
     * CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html)
     */
    public inline fun cfnAnalysisCustomFilterConfigurationProperty(
        block: CfnAnalysisCustomFilterConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CustomFilterConfigurationProperty {
        val builder = CfnAnalysisCustomFilterConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of custom filter values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomFilterListConfigurationProperty customFilterListConfigurationProperty =
     * CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html)
     */
    public inline fun cfnAnalysisCustomFilterListConfigurationProperty(
        block: CfnAnalysisCustomFilterListConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CustomFilterListConfigurationProperty {
        val builder = CfnAnalysisCustomFilterListConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The custom narrative options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomNarrativeOptionsProperty customNarrativeOptionsProperty =
     * CustomNarrativeOptionsProperty.builder()
     * .narrative("narrative")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customnarrativeoptions.html)
     */
    public inline fun cfnAnalysisCustomNarrativeOptionsProperty(
        block: CfnAnalysisCustomNarrativeOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CustomNarrativeOptionsProperty {
        val builder = CfnAnalysisCustomNarrativeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The customized parameter values.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomParameterValuesProperty customParameterValuesProperty =
     * CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html)
     */
    public inline fun cfnAnalysisCustomParameterValuesProperty(
        block: CfnAnalysisCustomParameterValuesPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CustomParameterValuesProperty {
        val builder = CfnAnalysisCustomParameterValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of custom values for the destination parameter in
     * `DestinationParameterValueConfiguration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomValuesConfigurationProperty customValuesConfigurationProperty =
     * CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customvaluesconfiguration.html)
     */
    public inline fun cfnAnalysisCustomValuesConfigurationProperty(
        block: CfnAnalysisCustomValuesConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.CustomValuesConfigurationProperty {
        val builder = CfnAnalysisCustomValuesConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for data bars.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataBarsOptionsProperty dataBarsOptionsProperty = DataBarsOptionsProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .negativeColor("negativeColor")
     * .positiveColor("positiveColor")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-databarsoptions.html)
     */
    public inline fun cfnAnalysisDataBarsOptionsProperty(
        block: CfnAnalysisDataBarsOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DataBarsOptionsProperty {
        val builder = CfnAnalysisDataBarsOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the color that is applied to a particular data value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataColorProperty dataColorProperty = DataColorProperty.builder()
     * .color("color")
     * .dataValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datacolor.html)
     */
    public inline fun cfnAnalysisDataColorProperty(
        block: CfnAnalysisDataColorPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DataColorProperty {
        val builder = CfnAnalysisDataColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data field series item configuration of a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataFieldSeriesItemProperty dataFieldSeriesItemProperty = DataFieldSeriesItemProperty.builder()
     * .axisBinding("axisBinding")
     * .fieldId("fieldId")
     * // the properties below are optional
     * .fieldValue("fieldValue")
     * .settings(LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html)
     */
    public inline fun cfnAnalysisDataFieldSeriesItemProperty(
        block: CfnAnalysisDataFieldSeriesItemPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DataFieldSeriesItemProperty {
        val builder = CfnAnalysisDataFieldSeriesItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the data labels.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataLabelOptionsProperty dataLabelOptionsProperty = DataLabelOptionsProperty.builder()
     * .categoryLabelVisibility("categoryLabelVisibility")
     * .dataLabelTypes(List.of(DataLabelTypeProperty.builder()
     * .dataPathLabelType(DataPathLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .visibility("visibility")
     * .build())
     * .fieldLabelType(FieldLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .visibility("visibility")
     * .build())
     * .maximumLabelType(MaximumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .minimumLabelType(MinimumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .rangeEndsLabelType(RangeEndsLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build()))
     * .labelColor("labelColor")
     * .labelContent("labelContent")
     * .labelFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .measureLabelVisibility("measureLabelVisibility")
     * .overlap("overlap")
     * .position("position")
     * .totalsVisibility("totalsVisibility")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html)
     */
    public inline fun cfnAnalysisDataLabelOptionsProperty(
        block: CfnAnalysisDataLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DataLabelOptionsProperty {
        val builder = CfnAnalysisDataLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the data label type.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataLabelTypeProperty dataLabelTypeProperty = DataLabelTypeProperty.builder()
     * .dataPathLabelType(DataPathLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .visibility("visibility")
     * .build())
     * .fieldLabelType(FieldLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .visibility("visibility")
     * .build())
     * .maximumLabelType(MaximumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .minimumLabelType(MinimumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .rangeEndsLabelType(RangeEndsLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html)
     */
    public inline fun cfnAnalysisDataLabelTypeProperty(
        block: CfnAnalysisDataLabelTypePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DataLabelTypeProperty {
        val builder = CfnAnalysisDataLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The color map that determines the color options for a particular element.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPathColorProperty dataPathColorProperty = DataPathColorProperty.builder()
     * .color("color")
     * .element(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build())
     * // the properties below are optional
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathcolor.html)
     */
    public inline fun cfnAnalysisDataPathColorProperty(
        block: CfnAnalysisDataPathColorPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DataPathColorProperty {
        val builder = CfnAnalysisDataPathColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that specifies individual data values for labels.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPathLabelTypeProperty dataPathLabelTypeProperty = DataPathLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathlabeltype.html)
     */
    public inline fun cfnAnalysisDataPathLabelTypeProperty(
        block: CfnAnalysisDataPathLabelTypePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DataPathLabelTypeProperty {
        val builder = CfnAnalysisDataPathLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Allows data paths to be sorted by a specific data value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPathSortProperty dataPathSortProperty = DataPathSortProperty.builder()
     * .direction("direction")
     * .sortPaths(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathsort.html)
     */
    public inline fun cfnAnalysisDataPathSortProperty(
        block: CfnAnalysisDataPathSortPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DataPathSortProperty {
        val builder = CfnAnalysisDataPathSortPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data path that needs to be sorted.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPathValueProperty dataPathValueProperty = DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathvalue.html)
     */
    public inline fun cfnAnalysisDataPathValueProperty(
        block: CfnAnalysisDataPathValuePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DataPathValueProperty {
        val builder = CfnAnalysisDataPathValuePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A data set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataSetIdentifierDeclarationProperty dataSetIdentifierDeclarationProperty =
     * DataSetIdentifierDeclarationProperty.builder()
     * .dataSetArn("dataSetArn")
     * .identifier("identifier")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetidentifierdeclaration.html)
     */
    public inline fun cfnAnalysisDataSetIdentifierDeclarationProperty(
        block: CfnAnalysisDataSetIdentifierDeclarationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DataSetIdentifierDeclarationProperty {
        val builder = CfnAnalysisDataSetIdentifierDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Dataset reference.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataSetReferenceProperty dataSetReferenceProperty = DataSetReferenceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .dataSetPlaceholder("dataSetPlaceholder")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetreference.html)
     */
    public inline fun cfnAnalysisDataSetReferenceProperty(
        block: CfnAnalysisDataSetReferencePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DataSetReferenceProperty {
        val builder = CfnAnalysisDataSetReferencePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine how a date axis is displayed.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateAxisOptionsProperty dateAxisOptionsProperty = DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dateaxisoptions.html)
     */
    public inline fun cfnAnalysisDateAxisOptionsProperty(
        block: CfnAnalysisDateAxisOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DateAxisOptionsProperty {
        val builder = CfnAnalysisDateAxisOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dimension type field with date type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateDimensionFieldProperty dateDimensionFieldProperty = DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html)
     */
    public inline fun cfnAnalysisDateDimensionFieldProperty(
        block: CfnAnalysisDateDimensionFieldPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DateDimensionFieldProperty {
        val builder = CfnAnalysisDateDimensionFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The measure type field with date type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateMeasureFieldProperty dateMeasureFieldProperty = DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html)
     */
    public inline fun cfnAnalysisDateMeasureFieldProperty(
        block: CfnAnalysisDateMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DateMeasureFieldProperty {
        val builder = CfnAnalysisDateMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The default values of the `DateTimeParameterDeclaration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeDefaultValuesProperty dateTimeDefaultValuesProperty =
     * DateTimeDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimedefaultvalues.html)
     */
    public inline fun cfnAnalysisDateTimeDefaultValuesProperty(
        block: CfnAnalysisDateTimeDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DateTimeDefaultValuesProperty {
        val builder = CfnAnalysisDateTimeDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for `DateTime` fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeFormatConfigurationProperty dateTimeFormatConfigurationProperty =
     * DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeformatconfiguration.html)
     */
    public inline fun cfnAnalysisDateTimeFormatConfigurationProperty(
        block: CfnAnalysisDateTimeFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DateTimeFormatConfigurationProperty {
        val builder = CfnAnalysisDateTimeFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the hierarchy of any `DateTime` fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeHierarchyProperty dateTimeHierarchyProperty = DateTimeHierarchyProperty.builder()
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimehierarchy.html)
     */
    public inline fun cfnAnalysisDateTimeHierarchyProperty(
        block: CfnAnalysisDateTimeHierarchyPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DateTimeHierarchyProperty {
        val builder = CfnAnalysisDateTimeHierarchyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `DateTime` data type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeParameterDeclarationProperty dateTimeParameterDeclarationProperty =
     * DateTimeParameterDeclarationProperty.builder()
     * .name("name")
     * // the properties below are optional
     * .defaultValues(DateTimeDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .timeGranularity("timeGranularity")
     * .valueWhenUnset(DateTimeValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html)
     */
    public inline fun cfnAnalysisDateTimeParameterDeclarationProperty(
        block: CfnAnalysisDateTimeParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DateTimeParameterDeclarationProperty {
        val builder = CfnAnalysisDateTimeParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A date-time parameter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeParameterProperty dateTimeParameterProperty = DateTimeParameterProperty.builder()
     * .name("name")
     * .values(List.of("values"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameter.html)
     */
    public inline fun cfnAnalysisDateTimeParameterProperty(
        block: CfnAnalysisDateTimeParameterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DateTimeParameterProperty {
        val builder = CfnAnalysisDateTimeParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimePickerControlDisplayOptionsProperty dateTimePickerControlDisplayOptionsProperty =
     * DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimepickercontroldisplayoptions.html)
     */
    public inline fun cfnAnalysisDateTimePickerControlDisplayOptionsProperty(
        block: CfnAnalysisDateTimePickerControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DateTimePickerControlDisplayOptionsProperty {
        val builder = CfnAnalysisDateTimePickerControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that defines the default value of a `DateTime` parameter when a value has
     * not been set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeValueWhenUnsetConfigurationProperty dateTimeValueWhenUnsetConfigurationProperty =
     * DateTimeValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimevaluewhenunsetconfiguration.html)
     */
    public inline fun cfnAnalysisDateTimeValueWhenUnsetConfigurationProperty(
        block: CfnAnalysisDateTimeValueWhenUnsetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DateTimeValueWhenUnsetConfigurationProperty {
        val builder = CfnAnalysisDateTimeValueWhenUnsetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The default values of the `DecimalParameterDeclaration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalDefaultValuesProperty decimalDefaultValuesProperty =
     * DecimalDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimaldefaultvalues.html)
     */
    public inline fun cfnAnalysisDecimalDefaultValuesProperty(
        block: CfnAnalysisDecimalDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DecimalDefaultValuesProperty {
        val builder = CfnAnalysisDecimalDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `Decimal` data type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalParameterDeclarationProperty decimalParameterDeclarationProperty =
     * DecimalParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(DecimalDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(DecimalValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html)
     */
    public inline fun cfnAnalysisDecimalParameterDeclarationProperty(
        block: CfnAnalysisDecimalParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DecimalParameterDeclarationProperty {
        val builder = CfnAnalysisDecimalParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A decimal parameter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalParameterProperty decimalParameterProperty = DecimalParameterProperty.builder()
     * .name("name")
     * .values(List.of(123))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameter.html)
     */
    public inline fun cfnAnalysisDecimalParameterProperty(
        block: CfnAnalysisDecimalParameterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DecimalParameterProperty {
        val builder = CfnAnalysisDecimalParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the decimal places configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalPlacesConfigurationProperty decimalPlacesConfigurationProperty =
     * DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalplacesconfiguration.html)
     */
    public inline fun cfnAnalysisDecimalPlacesConfigurationProperty(
        block: CfnAnalysisDecimalPlacesConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DecimalPlacesConfigurationProperty {
        val builder = CfnAnalysisDecimalPlacesConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that defines the default value of a `Decimal` parameter when a value has
     * not been set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalValueWhenUnsetConfigurationProperty decimalValueWhenUnsetConfigurationProperty =
     * DecimalValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalvaluewhenunsetconfiguration.html)
     */
    public inline fun cfnAnalysisDecimalValueWhenUnsetConfigurationProperty(
        block: CfnAnalysisDecimalValueWhenUnsetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DecimalValueWhenUnsetConfigurationProperty {
        val builder = CfnAnalysisDecimalValueWhenUnsetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings of a free-form layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultFreeFormLayoutConfigurationProperty defaultFreeFormLayoutConfigurationProperty =
     * DefaultFreeFormLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultfreeformlayoutconfiguration.html)
     */
    public inline fun cfnAnalysisDefaultFreeFormLayoutConfigurationProperty(
        block: CfnAnalysisDefaultFreeFormLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DefaultFreeFormLayoutConfigurationProperty {
        val builder = CfnAnalysisDefaultFreeFormLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings for a grid layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultGridLayoutConfigurationProperty defaultGridLayoutConfigurationProperty =
     * DefaultGridLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultgridlayoutconfiguration.html)
     */
    public inline fun cfnAnalysisDefaultGridLayoutConfigurationProperty(
        block: CfnAnalysisDefaultGridLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DefaultGridLayoutConfigurationProperty {
        val builder = CfnAnalysisDefaultGridLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings for interactive layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultInteractiveLayoutConfigurationProperty defaultInteractiveLayoutConfigurationProperty =
     * DefaultInteractiveLayoutConfigurationProperty.builder()
     * .freeForm(DefaultFreeFormLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .grid(DefaultGridLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultinteractivelayoutconfiguration.html)
     */
    public inline fun cfnAnalysisDefaultInteractiveLayoutConfigurationProperty(
        block: CfnAnalysisDefaultInteractiveLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DefaultInteractiveLayoutConfigurationProperty {
        val builder = CfnAnalysisDefaultInteractiveLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for default new sheet settings.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultNewSheetConfigurationProperty defaultNewSheetConfigurationProperty =
     * DefaultNewSheetConfigurationProperty.builder()
     * .interactiveLayoutConfiguration(DefaultInteractiveLayoutConfigurationProperty.builder()
     * .freeForm(DefaultFreeFormLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .grid(DefaultGridLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build())
     * .paginatedLayoutConfiguration(DefaultPaginatedLayoutConfigurationProperty.builder()
     * .sectionBased(DefaultSectionBasedLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .build())
     * .build())
     * .sheetContentType("sheetContentType")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultnewsheetconfiguration.html)
     */
    public inline fun cfnAnalysisDefaultNewSheetConfigurationProperty(
        block: CfnAnalysisDefaultNewSheetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DefaultNewSheetConfigurationProperty {
        val builder = CfnAnalysisDefaultNewSheetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings for a paginated layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultPaginatedLayoutConfigurationProperty defaultPaginatedLayoutConfigurationProperty =
     * DefaultPaginatedLayoutConfigurationProperty.builder()
     * .sectionBased(DefaultSectionBasedLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultpaginatedlayoutconfiguration.html)
     */
    public inline fun cfnAnalysisDefaultPaginatedLayoutConfigurationProperty(
        block: CfnAnalysisDefaultPaginatedLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DefaultPaginatedLayoutConfigurationProperty {
        val builder = CfnAnalysisDefaultPaginatedLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings for a section-based layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultSectionBasedLayoutConfigurationProperty defaultSectionBasedLayoutConfigurationProperty =
     * DefaultSectionBasedLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultsectionbasedlayoutconfiguration.html)
     */
    public inline fun cfnAnalysisDefaultSectionBasedLayoutConfigurationProperty(
        block: CfnAnalysisDefaultSectionBasedLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DefaultSectionBasedLayoutConfigurationProperty {
        val builder = CfnAnalysisDefaultSectionBasedLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of destination parameter values.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DestinationParameterValueConfigurationProperty destinationParameterValueConfigurationProperty =
     * DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html)
     */
    public inline fun cfnAnalysisDestinationParameterValueConfigurationProperty(
        block: CfnAnalysisDestinationParameterValueConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DestinationParameterValueConfigurationProperty {
        val builder = CfnAnalysisDestinationParameterValueConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dimension type field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DimensionFieldProperty dimensionFieldProperty = DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dimensionfield.html)
     */
    public inline fun cfnAnalysisDimensionFieldProperty(
        block: CfnAnalysisDimensionFieldPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DimensionFieldProperty {
        val builder = CfnAnalysisDimensionFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The label options of the label that is displayed in the center of a donut chart.
     *
     * This option isn't available for pie charts.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DonutCenterOptionsProperty donutCenterOptionsProperty = DonutCenterOptionsProperty.builder()
     * .labelVisibility("labelVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutcenteroptions.html)
     */
    public inline fun cfnAnalysisDonutCenterOptionsProperty(
        block: CfnAnalysisDonutCenterOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DonutCenterOptionsProperty {
        val builder = CfnAnalysisDonutCenterOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for configuring a donut chart or pie chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DonutOptionsProperty donutOptionsProperty = DonutOptionsProperty.builder()
     * .arcOptions(ArcOptionsProperty.builder()
     * .arcThickness("arcThickness")
     * .build())
     * .donutCenterOptions(DonutCenterOptionsProperty.builder()
     * .labelVisibility("labelVisibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutoptions.html)
     */
    public inline fun cfnAnalysisDonutOptionsProperty(
        block: CfnAnalysisDonutOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DonutOptionsProperty {
        val builder = CfnAnalysisDonutOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The drill down filter for the column hierarchies.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DrillDownFilterProperty drillDownFilterProperty = DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-drilldownfilter.html)
     */
    public inline fun cfnAnalysisDrillDownFilterProperty(
        block: CfnAnalysisDrillDownFilterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DrillDownFilterProperty {
        val builder = CfnAnalysisDrillDownFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DropDownControlDisplayOptionsProperty dropDownControlDisplayOptionsProperty =
     * DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dropdowncontroldisplayoptions.html)
     */
    public inline fun cfnAnalysisDropDownControlDisplayOptionsProperty(
        block: CfnAnalysisDropDownControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DropDownControlDisplayOptionsProperty {
        val builder = CfnAnalysisDropDownControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Defines different defaults to the users or groups based on mapping.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DynamicDefaultValueProperty dynamicDefaultValueProperty = DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dynamicdefaultvalue.html)
     */
    public inline fun cfnAnalysisDynamicDefaultValueProperty(
        block: CfnAnalysisDynamicDefaultValuePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.DynamicDefaultValueProperty {
        val builder = CfnAnalysisDynamicDefaultValuePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An empty visual.
     *
     * Empty visuals are used in layouts but have not been configured to show any data. A new visual
     * created in the Amazon QuickSight console is considered an `EmptyVisual` until a visual type
     * is selected.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * EmptyVisualProperty emptyVisualProperty = EmptyVisualProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .visualId("visualId")
     * // the properties below are optional
     * .actions(List.of(VisualCustomActionProperty.builder()
     * .actionOperations(List.of(VisualCustomActionOperationProperty.builder()
     * .filterOperation(CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build())
     * .navigationOperation(CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build())
     * .setParametersOperation(CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build())
     * .urlOperation(CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build())
     * .build()))
     * .customActionId("customActionId")
     * .name("name")
     * .trigger("trigger")
     * // the properties below are optional
     * .status("status")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-emptyvisual.html)
     */
    public inline fun cfnAnalysisEmptyVisualProperty(
        block: CfnAnalysisEmptyVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.EmptyVisualProperty {
        val builder = CfnAnalysisEmptyVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An object, structure, or sub-structure of an analysis, template, or dashboard.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * EntityProperty entityProperty = EntityProperty.builder()
     * .path("path")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-entity.html)
     */
    public inline fun cfnAnalysisEntityProperty(
        block: CfnAnalysisEntityPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.EntityProperty {
        val builder = CfnAnalysisEntityPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The exclude period of `TimeRangeFilter` or `RelativeDatesFilter` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ExcludePeriodConfigurationProperty excludePeriodConfigurationProperty =
     * ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-excludeperiodconfiguration.html)
     */
    public inline fun cfnAnalysisExcludePeriodConfigurationProperty(
        block: CfnAnalysisExcludePeriodConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ExcludePeriodConfigurationProperty {
        val builder = CfnAnalysisExcludePeriodConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the hierarchy of the fields that are built within a visual's field
     * wells.
     *
     * These fields can't be duplicated to other visuals.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ExplicitHierarchyProperty explicitHierarchyProperty = ExplicitHierarchyProperty.builder()
     * .columns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-explicithierarchy.html)
     */
    public inline fun cfnAnalysisExplicitHierarchyProperty(
        block: CfnAnalysisExplicitHierarchyPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ExplicitHierarchyProperty {
        val builder = CfnAnalysisExplicitHierarchyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The setup for the detailed tooltip.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldBasedTooltipProperty fieldBasedTooltipProperty = FieldBasedTooltipProperty.builder()
     * .aggregationVisibility("aggregationVisibility")
     * .tooltipFields(List.of(TooltipItemProperty.builder()
     * .columnTooltipItem(ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .fieldTooltipItem(FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .build()))
     * .tooltipTitleType("tooltipTitleType")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldbasedtooltip.html)
     */
    public inline fun cfnAnalysisFieldBasedTooltipProperty(
        block: CfnAnalysisFieldBasedTooltipPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FieldBasedTooltipProperty {
        val builder = CfnAnalysisFieldBasedTooltipPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field label type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldLabelTypeProperty fieldLabelTypeProperty = FieldLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldlabeltype.html)
     */
    public inline fun cfnAnalysisFieldLabelTypeProperty(
        block: CfnAnalysisFieldLabelTypePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FieldLabelTypeProperty {
        val builder = CfnAnalysisFieldLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field series item configuration of a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldSeriesItemProperty fieldSeriesItemProperty = FieldSeriesItemProperty.builder()
     * .axisBinding("axisBinding")
     * .fieldId("fieldId")
     * // the properties below are optional
     * .settings(LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldseriesitem.html)
     */
    public inline fun cfnAnalysisFieldSeriesItemProperty(
        block: CfnAnalysisFieldSeriesItemPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FieldSeriesItemProperty {
        val builder = CfnAnalysisFieldSeriesItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field sort options in a chart configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldSortOptionsProperty fieldSortOptionsProperty = FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsortoptions.html)
     */
    public inline fun cfnAnalysisFieldSortOptionsProperty(
        block: CfnAnalysisFieldSortOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FieldSortOptionsProperty {
        val builder = CfnAnalysisFieldSortOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration for a field in a field well.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldSortProperty fieldSortProperty = FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsort.html)
     */
    public inline fun cfnAnalysisFieldSortProperty(
        block: CfnAnalysisFieldSortPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FieldSortProperty {
        val builder = CfnAnalysisFieldSortPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The tooltip item for the fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldTooltipItemProperty fieldTooltipItemProperty = FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldtooltipitem.html)
     */
    public inline fun cfnAnalysisFieldTooltipItemProperty(
        block: CfnAnalysisFieldTooltipItemPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FieldTooltipItemProperty {
        val builder = CfnAnalysisFieldTooltipItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well of the filled map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapAggregatedFieldWellsProperty filledMapAggregatedFieldWellsProperty =
     * FilledMapAggregatedFieldWellsProperty.builder()
     * .geospatial(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisFilledMapAggregatedFieldWellsProperty(
        block: CfnAnalysisFilledMapAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilledMapAggregatedFieldWellsProperty {
        val builder = CfnAnalysisFilledMapAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Conditional formatting options of a `FilledMapVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapConditionalFormattingOptionProperty filledMapConditionalFormattingOptionProperty =
     * FilledMapConditionalFormattingOptionProperty.builder()
     * .shape(FilledMapShapeConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .format(ShapeConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconditionalformattingoption.html)
     */
    public inline fun cfnAnalysisFilledMapConditionalFormattingOptionProperty(
        block: CfnAnalysisFilledMapConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilledMapConditionalFormattingOptionProperty {
        val builder = CfnAnalysisFilledMapConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting of a `FilledMapVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapConditionalFormattingProperty filledMapConditionalFormattingProperty =
     * FilledMapConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(FilledMapConditionalFormattingOptionProperty.builder()
     * .shape(FilledMapShapeConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .format(ShapeConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconditionalformatting.html)
     */
    public inline fun cfnAnalysisFilledMapConditionalFormattingProperty(
        block: CfnAnalysisFilledMapConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilledMapConditionalFormattingProperty {
        val builder = CfnAnalysisFilledMapConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `FilledMapVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html)
     */
    public inline fun cfnAnalysisFilledMapConfigurationProperty(
        block: CfnAnalysisFilledMapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilledMapConfigurationProperty {
        val builder = CfnAnalysisFilledMapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a `FilledMapVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapFieldWellsProperty filledMapFieldWellsProperty = FilledMapFieldWellsProperty.builder()
     * .filledMapAggregatedFieldWells(FilledMapAggregatedFieldWellsProperty.builder()
     * .geospatial(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapfieldwells.html)
     */
    public inline fun cfnAnalysisFilledMapFieldWellsProperty(
        block: CfnAnalysisFilledMapFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilledMapFieldWellsProperty {
        val builder = CfnAnalysisFilledMapFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting that determines the shape of the filled map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapShapeConditionalFormattingProperty filledMapShapeConditionalFormattingProperty =
     * FilledMapShapeConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .format(ShapeConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapshapeconditionalformatting.html)
     */
    public inline fun cfnAnalysisFilledMapShapeConditionalFormattingProperty(
        block: CfnAnalysisFilledMapShapeConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilledMapShapeConditionalFormattingProperty {
        val builder = CfnAnalysisFilledMapShapeConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `FilledMapVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapSortConfigurationProperty filledMapSortConfigurationProperty =
     * FilledMapSortConfigurationProperty.builder()
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapsortconfiguration.html)
     */
    public inline fun cfnAnalysisFilledMapSortConfigurationProperty(
        block: CfnAnalysisFilledMapSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilledMapSortConfigurationProperty {
        val builder = CfnAnalysisFilledMapSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A filled map.
     *
     * For more information, see
     * [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html)
     */
    public inline fun cfnAnalysisFilledMapVisualProperty(
        block: CfnAnalysisFilledMapVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilledMapVisualProperty {
        val builder = CfnAnalysisFilledMapVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The control of a filter that is used to interact with a dashboard or an analysis.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterControlProperty filterControlProperty = FilterControlProperty.builder()
     * .dateTimePicker(FilterDateTimePickerControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .type("type")
     * .build())
     * .dropdown(FilterDropDownControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build())
     * .list(FilterListControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build())
     * .relativeDateTime(FilterRelativeDateTimeControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(RelativeDateTimeControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .slider(FilterSliderControlProperty.builder()
     * .filterControlId("filterControlId")
     * .maximumValue(123)
     * .minimumValue(123)
     * .sourceFilterId("sourceFilterId")
     * .stepSize(123)
     * .title("title")
     * // the properties below are optional
     * .displayOptions(SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .type("type")
     * .build())
     * .textArea(FilterTextAreaControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .delimiter("delimiter")
     * .displayOptions(TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .textField(FilterTextFieldControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html)
     */
    public inline fun cfnAnalysisFilterControlProperty(
        block: CfnAnalysisFilterControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterControlProperty {
        val builder = CfnAnalysisFilterControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control from a date filter that is used to specify date and time.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterDateTimePickerControlProperty filterDateTimePickerControlProperty =
     * FilterDateTimePickerControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html)
     */
    public inline fun cfnAnalysisFilterDateTimePickerControlProperty(
        block: CfnAnalysisFilterDateTimePickerControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterDateTimePickerControlProperty {
        val builder = CfnAnalysisFilterDateTimePickerControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a dropdown list with buttons that are used to select a single value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterDropDownControlProperty filterDropDownControlProperty =
     * FilterDropDownControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html)
     */
    public inline fun cfnAnalysisFilterDropDownControlProperty(
        block: CfnAnalysisFilterDropDownControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterDropDownControlProperty {
        val builder = CfnAnalysisFilterDropDownControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A grouping of individual filters. Filter groups are applied to the same group of visuals.
     *
     * For more information, see
     * [Adding filter conditions (group filters) with AND and OR operators](https://docs.aws.amazon.com/quicksight/latest/user/add-a-compound-filter.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterGroupProperty filterGroupProperty = FilterGroupProperty.builder()
     * .crossDataset("crossDataset")
     * .filterGroupId("filterGroupId")
     * .filters(List.of(FilterProperty.builder()
     * .categoryFilter(CategoryFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .configuration(CategoryFilterConfigurationProperty.builder()
     * .customFilterConfiguration(CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .customFilterListConfiguration(CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .filterListConfiguration(FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .build())
     * .filterId("filterId")
     * .build())
     * .numericEqualityFilter(NumericEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .value(123)
     * .build())
     * .numericRangeFilter(NumericRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .rangeMinimum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .relativeDatesFilter(RelativeDatesFilterProperty.builder()
     * .anchorDateConfiguration(AnchorDateConfigurationProperty.builder()
     * .anchorOption("anchorOption")
     * .parameterName("parameterName")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * .relativeDateType("relativeDateType")
     * .timeGranularity("timeGranularity")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .minimumGranularity("minimumGranularity")
     * .parameterName("parameterName")
     * .relativeDateValue(123)
     * .build())
     * .timeEqualityFilter(TimeEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .value("value")
     * .build())
     * .timeRangeFilter(TimeRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .rangeMinimumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .timeGranularity("timeGranularity")
     * .build())
     * .topBottomFilter(TopBottomFilterProperty.builder()
     * .aggregationSortConfigurations(List.of(AggregationSortConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sortDirection("sortDirection")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build()))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .limit(123)
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .scopeConfiguration(FilterScopeConfigurationProperty.builder()
     * .selectedSheets(SelectedSheetsFilterScopeConfigurationProperty.builder()
     * .sheetVisualScopingConfigurations(List.of(SheetVisualScopingConfigurationProperty.builder()
     * .scope("scope")
     * .sheetId("sheetId")
     * // the properties below are optional
     * .visualIds(List.of("visualIds"))
     * .build()))
     * .build())
     * .build())
     * // the properties below are optional
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html)
     */
    public inline fun cfnAnalysisFilterGroupProperty(
        block: CfnAnalysisFilterGroupPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterGroupProperty {
        val builder = CfnAnalysisFilterGroupPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of filter configurations.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterListConfigurationProperty filterListConfigurationProperty =
     * FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html)
     */
    public inline fun cfnAnalysisFilterListConfigurationProperty(
        block: CfnAnalysisFilterListConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterListConfigurationProperty {
        val builder = CfnAnalysisFilterListConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a list of buttons or boxes.
     *
     * This is used to select either a single value or multiple values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterListControlProperty filterListControlProperty = FilterListControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html)
     */
    public inline fun cfnAnalysisFilterListControlProperty(
        block: CfnAnalysisFilterListControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterListControlProperty {
        val builder = CfnAnalysisFilterListControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of selected fields in the `CustomActionFilterOperation` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterOperationSelectedFieldsConfigurationProperty
     * filterOperationSelectedFieldsConfigurationProperty =
     * FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationselectedfieldsconfiguration.html)
     */
    public inline fun cfnAnalysisFilterOperationSelectedFieldsConfigurationProperty(
        block: CfnAnalysisFilterOperationSelectedFieldsConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterOperationSelectedFieldsConfigurationProperty {
        val builder = CfnAnalysisFilterOperationSelectedFieldsConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of target visuals that you want to be filtered.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterOperationTargetVisualsConfigurationProperty
     * filterOperationTargetVisualsConfigurationProperty =
     * FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationtargetvisualsconfiguration.html)
     */
    public inline fun cfnAnalysisFilterOperationTargetVisualsConfigurationProperty(
        block: CfnAnalysisFilterOperationTargetVisualsConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterOperationTargetVisualsConfigurationProperty {
        val builder = CfnAnalysisFilterOperationTargetVisualsConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * With a `Filter` , you can remove portions of data from a particular visual or view.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterProperty filterProperty = FilterProperty.builder()
     * .categoryFilter(CategoryFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .configuration(CategoryFilterConfigurationProperty.builder()
     * .customFilterConfiguration(CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .customFilterListConfiguration(CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .filterListConfiguration(FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .build())
     * .filterId("filterId")
     * .build())
     * .numericEqualityFilter(NumericEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .value(123)
     * .build())
     * .numericRangeFilter(NumericRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .rangeMinimum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .relativeDatesFilter(RelativeDatesFilterProperty.builder()
     * .anchorDateConfiguration(AnchorDateConfigurationProperty.builder()
     * .anchorOption("anchorOption")
     * .parameterName("parameterName")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * .relativeDateType("relativeDateType")
     * .timeGranularity("timeGranularity")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .minimumGranularity("minimumGranularity")
     * .parameterName("parameterName")
     * .relativeDateValue(123)
     * .build())
     * .timeEqualityFilter(TimeEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .value("value")
     * .build())
     * .timeRangeFilter(TimeRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .rangeMinimumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .timeGranularity("timeGranularity")
     * .build())
     * .topBottomFilter(TopBottomFilterProperty.builder()
     * .aggregationSortConfigurations(List.of(AggregationSortConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sortDirection("sortDirection")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build()))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .limit(123)
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html)
     */
    public inline fun cfnAnalysisFilterProperty(
        block: CfnAnalysisFilterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterProperty {
        val builder = CfnAnalysisFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control from a date filter that is used to specify the relative date.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterRelativeDateTimeControlProperty filterRelativeDateTimeControlProperty =
     * FilterRelativeDateTimeControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(RelativeDateTimeControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html)
     */
    public inline fun cfnAnalysisFilterRelativeDateTimeControlProperty(
        block: CfnAnalysisFilterRelativeDateTimeControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterRelativeDateTimeControlProperty {
        val builder = CfnAnalysisFilterRelativeDateTimeControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The scope configuration for a `FilterGroup` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterScopeConfigurationProperty filterScopeConfigurationProperty =
     * FilterScopeConfigurationProperty.builder()
     * .selectedSheets(SelectedSheetsFilterScopeConfigurationProperty.builder()
     * .sheetVisualScopingConfigurations(List.of(SheetVisualScopingConfigurationProperty.builder()
     * .scope("scope")
     * .sheetId("sheetId")
     * // the properties below are optional
     * .visualIds(List.of("visualIds"))
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterscopeconfiguration.html)
     */
    public inline fun cfnAnalysisFilterScopeConfigurationProperty(
        block: CfnAnalysisFilterScopeConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterScopeConfigurationProperty {
        val builder = CfnAnalysisFilterScopeConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of selectable values that are used in a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterSelectableValuesProperty filterSelectableValuesProperty =
     * FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterselectablevalues.html)
     */
    public inline fun cfnAnalysisFilterSelectableValuesProperty(
        block: CfnAnalysisFilterSelectableValuesPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterSelectableValuesProperty {
        val builder = CfnAnalysisFilterSelectableValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a horizontal toggle bar.
     *
     * This is used to change a value by sliding the toggle.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterSliderControlProperty filterSliderControlProperty = FilterSliderControlProperty.builder()
     * .filterControlId("filterControlId")
     * .maximumValue(123)
     * .minimumValue(123)
     * .sourceFilterId("sourceFilterId")
     * .stepSize(123)
     * .title("title")
     * // the properties below are optional
     * .displayOptions(SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html)
     */
    public inline fun cfnAnalysisFilterSliderControlProperty(
        block: CfnAnalysisFilterSliderControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterSliderControlProperty {
        val builder = CfnAnalysisFilterSliderControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a text box that is used to enter multiple entries.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterTextAreaControlProperty filterTextAreaControlProperty =
     * FilterTextAreaControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .delimiter("delimiter")
     * .displayOptions(TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html)
     */
    public inline fun cfnAnalysisFilterTextAreaControlProperty(
        block: CfnAnalysisFilterTextAreaControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterTextAreaControlProperty {
        val builder = CfnAnalysisFilterTextAreaControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a text box that is used to enter a single entry.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterTextFieldControlProperty filterTextFieldControlProperty =
     * FilterTextFieldControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html)
     */
    public inline fun cfnAnalysisFilterTextFieldControlProperty(
        block: CfnAnalysisFilterTextFieldControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FilterTextFieldControlProperty {
        val builder = CfnAnalysisFilterTextFieldControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Configures the display properties of the given text.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FontConfigurationProperty fontConfigurationProperty = FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html)
     */
    public inline fun cfnAnalysisFontConfigurationProperty(
        block: CfnAnalysisFontConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FontConfigurationProperty {
        val builder = CfnAnalysisFontConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the text display size.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FontSizeProperty fontSizeProperty = FontSizeProperty.builder()
     * .relative("relative")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontsize.html)
     */
    public inline fun cfnAnalysisFontSizeProperty(
        block: CfnAnalysisFontSizePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FontSizeProperty {
        val builder = CfnAnalysisFontSizePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the text display weight, or boldness.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FontWeightProperty fontWeightProperty = FontWeightProperty.builder()
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontweight.html)
     */
    public inline fun cfnAnalysisFontWeightProperty(
        block: CfnAnalysisFontWeightPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FontWeightProperty {
        val builder = CfnAnalysisFontWeightPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The forecast computation configuration.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html)
     */
    public inline fun cfnAnalysisForecastComputationProperty(
        block: CfnAnalysisForecastComputationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ForecastComputationProperty {
        val builder = CfnAnalysisForecastComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The forecast configuration that is used in a line chart's display properties.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ForecastConfigurationProperty forecastConfigurationProperty =
     * ForecastConfigurationProperty.builder()
     * .forecastProperties(TimeBasedForecastPropertiesProperty.builder()
     * .lowerBoundary(123)
     * .periodsBackward(123)
     * .periodsForward(123)
     * .predictionInterval(123)
     * .seasonality(123)
     * .upperBoundary(123)
     * .build())
     * .scenario(ForecastScenarioProperty.builder()
     * .whatIfPointScenario(WhatIfPointScenarioProperty.builder()
     * .date("date")
     * .value(123)
     * .build())
     * .whatIfRangeScenario(WhatIfRangeScenarioProperty.builder()
     * .endDate("endDate")
     * .startDate("startDate")
     * .value(123)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastconfiguration.html)
     */
    public inline fun cfnAnalysisForecastConfigurationProperty(
        block: CfnAnalysisForecastConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ForecastConfigurationProperty {
        val builder = CfnAnalysisForecastConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The forecast scenario of a forecast in the line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ForecastScenarioProperty forecastScenarioProperty = ForecastScenarioProperty.builder()
     * .whatIfPointScenario(WhatIfPointScenarioProperty.builder()
     * .date("date")
     * .value(123)
     * .build())
     * .whatIfRangeScenario(WhatIfRangeScenarioProperty.builder()
     * .endDate("endDate")
     * .startDate("startDate")
     * .value(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastscenario.html)
     */
    public inline fun cfnAnalysisForecastScenarioProperty(
        block: CfnAnalysisForecastScenarioPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ForecastScenarioProperty {
        val builder = CfnAnalysisForecastScenarioPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The formatting configuration for all types of field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FormatConfigurationProperty formatConfigurationProperty = FormatConfigurationProperty.builder()
     * .dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .numberFormatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .stringFormatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-formatconfiguration.html)
     */
    public inline fun cfnAnalysisFormatConfigurationProperty(
        block: CfnAnalysisFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FormatConfigurationProperty {
        val builder = CfnAnalysisFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Configuration options for the canvas of a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutCanvasSizeOptionsProperty freeFormLayoutCanvasSizeOptionsProperty =
     * FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutcanvassizeoptions.html)
     */
    public inline fun cfnAnalysisFreeFormLayoutCanvasSizeOptionsProperty(
        block: CfnAnalysisFreeFormLayoutCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FreeFormLayoutCanvasSizeOptionsProperty {
        val builder = CfnAnalysisFreeFormLayoutCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutConfigurationProperty freeFormLayoutConfigurationProperty =
     * FreeFormLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutconfiguration.html)
     */
    public inline fun cfnAnalysisFreeFormLayoutConfigurationProperty(
        block: CfnAnalysisFreeFormLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FreeFormLayoutConfigurationProperty {
        val builder = CfnAnalysisFreeFormLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The background style configuration of a free-form layout element.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutElementBackgroundStyleProperty freeFormLayoutElementBackgroundStyleProperty =
     * FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementbackgroundstyle.html)
     */
    public inline fun cfnAnalysisFreeFormLayoutElementBackgroundStyleProperty(
        block: CfnAnalysisFreeFormLayoutElementBackgroundStylePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FreeFormLayoutElementBackgroundStyleProperty {
        val builder = CfnAnalysisFreeFormLayoutElementBackgroundStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The background style configuration of a free-form layout element.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutElementBorderStyleProperty freeFormLayoutElementBorderStyleProperty =
     * FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementborderstyle.html)
     */
    public inline fun cfnAnalysisFreeFormLayoutElementBorderStyleProperty(
        block: CfnAnalysisFreeFormLayoutElementBorderStylePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FreeFormLayoutElementBorderStyleProperty {
        val builder = CfnAnalysisFreeFormLayoutElementBorderStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An element within a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutElementProperty freeFormLayoutElementProperty =
     * FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html)
     */
    public inline fun cfnAnalysisFreeFormLayoutElementProperty(
        block: CfnAnalysisFreeFormLayoutElementPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FreeFormLayoutElementProperty {
        val builder = CfnAnalysisFreeFormLayoutElementPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the sizing of the canvas used in a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutScreenCanvasSizeOptionsProperty freeFormLayoutScreenCanvasSizeOptionsProperty =
     * FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutscreencanvassizeoptions.html)
     */
    public inline fun cfnAnalysisFreeFormLayoutScreenCanvasSizeOptionsProperty(
        block: CfnAnalysisFreeFormLayoutScreenCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FreeFormLayoutScreenCanvasSizeOptionsProperty {
        val builder = CfnAnalysisFreeFormLayoutScreenCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The free-form layout configuration of a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormSectionLayoutConfigurationProperty freeFormSectionLayoutConfigurationProperty =
     * FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformsectionlayoutconfiguration.html)
     */
    public inline fun cfnAnalysisFreeFormSectionLayoutConfigurationProperty(
        block: CfnAnalysisFreeFormSectionLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FreeFormSectionLayoutConfigurationProperty {
        val builder = CfnAnalysisFreeFormSectionLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a `FunnelChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FunnelChartAggregatedFieldWellsProperty funnelChartAggregatedFieldWellsProperty =
     * FunnelChartAggregatedFieldWellsProperty.builder()
     * .category(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisFunnelChartAggregatedFieldWellsProperty(
        block: CfnAnalysisFunnelChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FunnelChartAggregatedFieldWellsProperty {
        val builder = CfnAnalysisFunnelChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `FunnelChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html)
     */
    public inline fun cfnAnalysisFunnelChartConfigurationProperty(
        block: CfnAnalysisFunnelChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FunnelChartConfigurationProperty {
        val builder = CfnAnalysisFunnelChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the data labels.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FunnelChartDataLabelOptionsProperty funnelChartDataLabelOptionsProperty =
     * FunnelChartDataLabelOptionsProperty.builder()
     * .categoryLabelVisibility("categoryLabelVisibility")
     * .labelColor("labelColor")
     * .labelFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .measureDataLabelStyle("measureDataLabelStyle")
     * .measureLabelVisibility("measureLabelVisibility")
     * .position("position")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html)
     */
    public inline fun cfnAnalysisFunnelChartDataLabelOptionsProperty(
        block: CfnAnalysisFunnelChartDataLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FunnelChartDataLabelOptionsProperty {
        val builder = CfnAnalysisFunnelChartDataLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a `FunnelChartVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FunnelChartFieldWellsProperty funnelChartFieldWellsProperty =
     * FunnelChartFieldWellsProperty.builder()
     * .funnelChartAggregatedFieldWells(FunnelChartAggregatedFieldWellsProperty.builder()
     * .category(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartfieldwells.html)
     */
    public inline fun cfnAnalysisFunnelChartFieldWellsProperty(
        block: CfnAnalysisFunnelChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FunnelChartFieldWellsProperty {
        val builder = CfnAnalysisFunnelChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `FunnelChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FunnelChartSortConfigurationProperty funnelChartSortConfigurationProperty =
     * FunnelChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartsortconfiguration.html)
     */
    public inline fun cfnAnalysisFunnelChartSortConfigurationProperty(
        block: CfnAnalysisFunnelChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FunnelChartSortConfigurationProperty {
        val builder = CfnAnalysisFunnelChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A funnel chart.
     *
     * For more information, see
     * [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html)
     */
    public inline fun cfnAnalysisFunnelChartVisualProperty(
        block: CfnAnalysisFunnelChartVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.FunnelChartVisualProperty {
        val builder = CfnAnalysisFunnelChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the arc of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartArcConditionalFormattingProperty gaugeChartArcConditionalFormattingProperty =
     * GaugeChartArcConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartarcconditionalformatting.html)
     */
    public inline fun cfnAnalysisGaugeChartArcConditionalFormattingProperty(
        block: CfnAnalysisGaugeChartArcConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GaugeChartArcConditionalFormattingProperty {
        val builder = CfnAnalysisGaugeChartArcConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Conditional formatting options of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartConditionalFormattingOptionProperty gaugeChartConditionalFormattingOptionProperty =
     * GaugeChartConditionalFormattingOptionProperty.builder()
     * .arc(GaugeChartArcConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .primaryValue(GaugeChartPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformattingoption.html)
     */
    public inline fun cfnAnalysisGaugeChartConditionalFormattingOptionProperty(
        block: CfnAnalysisGaugeChartConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GaugeChartConditionalFormattingOptionProperty {
        val builder = CfnAnalysisGaugeChartConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartConditionalFormattingProperty gaugeChartConditionalFormattingProperty =
     * GaugeChartConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(GaugeChartConditionalFormattingOptionProperty.builder()
     * .arc(GaugeChartArcConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .primaryValue(GaugeChartPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformatting.html)
     */
    public inline fun cfnAnalysisGaugeChartConditionalFormattingProperty(
        block: CfnAnalysisGaugeChartConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GaugeChartConditionalFormattingProperty {
        val builder = CfnAnalysisGaugeChartConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html)
     */
    public inline fun cfnAnalysisGaugeChartConfigurationProperty(
        block: CfnAnalysisGaugeChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GaugeChartConfigurationProperty {
        val builder = CfnAnalysisGaugeChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartfieldwells.html)
     */
    public inline fun cfnAnalysisGaugeChartFieldWellsProperty(
        block: CfnAnalysisGaugeChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GaugeChartFieldWellsProperty {
        val builder = CfnAnalysisGaugeChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartOptionsProperty gaugeChartOptionsProperty = GaugeChartOptionsProperty.builder()
     * .arc(ArcConfigurationProperty.builder()
     * .arcAngle(123)
     * .arcThickness("arcThickness")
     * .build())
     * .arcAxis(ArcAxisConfigurationProperty.builder()
     * .range(ArcAxisDisplayRangeProperty.builder()
     * .max(123)
     * .min(123)
     * .build())
     * .reserveRange(123)
     * .build())
     * .comparison(ComparisonConfigurationProperty.builder()
     * .comparisonFormat(ComparisonFormatConfigurationProperty.builder()
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .comparisonMethod("comparisonMethod")
     * .build())
     * .primaryValueDisplayType("primaryValueDisplayType")
     * .primaryValueFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html)
     */
    public inline fun cfnAnalysisGaugeChartOptionsProperty(
        block: CfnAnalysisGaugeChartOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GaugeChartOptionsProperty {
        val builder = CfnAnalysisGaugeChartOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for the primary value of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartPrimaryValueConditionalFormattingProperty
     * gaugeChartPrimaryValueConditionalFormattingProperty =
     * GaugeChartPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartprimaryvalueconditionalformatting.html)
     */
    public inline fun cfnAnalysisGaugeChartPrimaryValueConditionalFormattingProperty(
        block: CfnAnalysisGaugeChartPrimaryValueConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GaugeChartPrimaryValueConditionalFormattingProperty {
        val builder = CfnAnalysisGaugeChartPrimaryValueConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A gauge chart.
     *
     * For more information, see
     * [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html)
     */
    public inline fun cfnAnalysisGaugeChartVisualProperty(
        block: CfnAnalysisGaugeChartVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GaugeChartVisualProperty {
        val builder = CfnAnalysisGaugeChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The bound options (north, south, west, east) of the geospatial window options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialCoordinateBoundsProperty geospatialCoordinateBoundsProperty =
     * GeospatialCoordinateBoundsProperty.builder()
     * .east(123)
     * .north(123)
     * .south(123)
     * .west(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html)
     */
    public inline fun cfnAnalysisGeospatialCoordinateBoundsProperty(
        block: CfnAnalysisGeospatialCoordinateBoundsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GeospatialCoordinateBoundsProperty {
        val builder = CfnAnalysisGeospatialCoordinateBoundsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The color scale specification for the heatmap point style.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialHeatmapColorScaleProperty geospatialHeatmapColorScaleProperty =
     * GeospatialHeatmapColorScaleProperty.builder()
     * .colors(List.of(GeospatialHeatmapDataColorProperty.builder()
     * .color("color")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapcolorscale.html)
     */
    public inline fun cfnAnalysisGeospatialHeatmapColorScaleProperty(
        block: CfnAnalysisGeospatialHeatmapColorScalePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GeospatialHeatmapColorScaleProperty {
        val builder = CfnAnalysisGeospatialHeatmapColorScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The heatmap configuration of the geospatial point style.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialHeatmapConfigurationProperty geospatialHeatmapConfigurationProperty =
     * GeospatialHeatmapConfigurationProperty.builder()
     * .heatmapColor(GeospatialHeatmapColorScaleProperty.builder()
     * .colors(List.of(GeospatialHeatmapDataColorProperty.builder()
     * .color("color")
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapconfiguration.html)
     */
    public inline fun cfnAnalysisGeospatialHeatmapConfigurationProperty(
        block: CfnAnalysisGeospatialHeatmapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GeospatialHeatmapConfigurationProperty {
        val builder = CfnAnalysisGeospatialHeatmapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The color to be used in the heatmap point style.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialHeatmapDataColorProperty geospatialHeatmapDataColorProperty =
     * GeospatialHeatmapDataColorProperty.builder()
     * .color("color")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapdatacolor.html)
     */
    public inline fun cfnAnalysisGeospatialHeatmapDataColorProperty(
        block: CfnAnalysisGeospatialHeatmapDataColorPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GeospatialHeatmapDataColorProperty {
        val builder = CfnAnalysisGeospatialHeatmapDataColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells for a geospatial map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisGeospatialMapAggregatedFieldWellsProperty(
        block: CfnAnalysisGeospatialMapAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GeospatialMapAggregatedFieldWellsProperty {
        val builder = CfnAnalysisGeospatialMapAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `GeospatialMapVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html)
     */
    public inline fun cfnAnalysisGeospatialMapConfigurationProperty(
        block: CfnAnalysisGeospatialMapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GeospatialMapConfigurationProperty {
        val builder = CfnAnalysisGeospatialMapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a `GeospatialMapVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapfieldwells.html)
     */
    public inline fun cfnAnalysisGeospatialMapFieldWellsProperty(
        block: CfnAnalysisGeospatialMapFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GeospatialMapFieldWellsProperty {
        val builder = CfnAnalysisGeospatialMapFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The map style options of the geospatial map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialMapStyleOptionsProperty geospatialMapStyleOptionsProperty =
     * GeospatialMapStyleOptionsProperty.builder()
     * .baseMapStyle("baseMapStyle")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapstyleoptions.html)
     */
    public inline fun cfnAnalysisGeospatialMapStyleOptionsProperty(
        block: CfnAnalysisGeospatialMapStyleOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GeospatialMapStyleOptionsProperty {
        val builder = CfnAnalysisGeospatialMapStyleOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A geospatial map or a points on map visual.
     *
     * For more information, see
     * [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html)
     */
    public inline fun cfnAnalysisGeospatialMapVisualProperty(
        block: CfnAnalysisGeospatialMapVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GeospatialMapVisualProperty {
        val builder = CfnAnalysisGeospatialMapVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The point style of the geospatial map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialPointStyleOptionsProperty geospatialPointStyleOptionsProperty =
     * GeospatialPointStyleOptionsProperty.builder()
     * .clusterMarkerConfiguration(ClusterMarkerConfigurationProperty.builder()
     * .clusterMarker(ClusterMarkerProperty.builder()
     * .simpleClusterMarker(SimpleClusterMarkerProperty.builder()
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .heatmapConfiguration(GeospatialHeatmapConfigurationProperty.builder()
     * .heatmapColor(GeospatialHeatmapColorScaleProperty.builder()
     * .colors(List.of(GeospatialHeatmapDataColorProperty.builder()
     * .color("color")
     * .build()))
     * .build())
     * .build())
     * .selectedPointStyle("selectedPointStyle")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialpointstyleoptions.html)
     */
    public inline fun cfnAnalysisGeospatialPointStyleOptionsProperty(
        block: CfnAnalysisGeospatialPointStyleOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GeospatialPointStyleOptionsProperty {
        val builder = CfnAnalysisGeospatialPointStyleOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The window options of the geospatial map visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialWindowOptionsProperty geospatialWindowOptionsProperty =
     * GeospatialWindowOptionsProperty.builder()
     * .bounds(GeospatialCoordinateBoundsProperty.builder()
     * .east(123)
     * .north(123)
     * .south(123)
     * .west(123)
     * .build())
     * .mapZoomMode("mapZoomMode")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialwindowoptions.html)
     */
    public inline fun cfnAnalysisGeospatialWindowOptionsProperty(
        block: CfnAnalysisGeospatialWindowOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GeospatialWindowOptionsProperty {
        val builder = CfnAnalysisGeospatialWindowOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the border options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GlobalTableBorderOptionsProperty globalTableBorderOptionsProperty =
     * GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-globaltableborderoptions.html)
     */
    public inline fun cfnAnalysisGlobalTableBorderOptionsProperty(
        block: CfnAnalysisGlobalTableBorderOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GlobalTableBorderOptionsProperty {
        val builder = CfnAnalysisGlobalTableBorderOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the gradient color settings.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GradientColorProperty gradientColorProperty = GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientcolor.html)
     */
    public inline fun cfnAnalysisGradientColorProperty(
        block: CfnAnalysisGradientColorPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GradientColorProperty {
        val builder = CfnAnalysisGradientColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the gradient stop configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GradientStopProperty gradientStopProperty = GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientstop.html)
     */
    public inline fun cfnAnalysisGradientStopProperty(
        block: CfnAnalysisGradientStopPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GradientStopProperty {
        val builder = CfnAnalysisGradientStopPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Configuration options for the canvas of a grid layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GridLayoutCanvasSizeOptionsProperty gridLayoutCanvasSizeOptionsProperty =
     * GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutcanvassizeoptions.html)
     */
    public inline fun cfnAnalysisGridLayoutCanvasSizeOptionsProperty(
        block: CfnAnalysisGridLayoutCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GridLayoutCanvasSizeOptionsProperty {
        val builder = CfnAnalysisGridLayoutCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a grid layout. Also called a tiled layout.
     *
     * Visuals snap to a grid with standard spacing and alignment. Dashboards are displayed as
     * designed, with options to fit to screen or view at actual size.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GridLayoutConfigurationProperty gridLayoutConfigurationProperty =
     * GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutconfiguration.html)
     */
    public inline fun cfnAnalysisGridLayoutConfigurationProperty(
        block: CfnAnalysisGridLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GridLayoutConfigurationProperty {
        val builder = CfnAnalysisGridLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An element within a grid layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GridLayoutElementProperty gridLayoutElementProperty = GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html)
     */
    public inline fun cfnAnalysisGridLayoutElementProperty(
        block: CfnAnalysisGridLayoutElementPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GridLayoutElementProperty {
        val builder = CfnAnalysisGridLayoutElementPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the sizing of the canvas used in a grid layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GridLayoutScreenCanvasSizeOptionsProperty gridLayoutScreenCanvasSizeOptionsProperty =
     * GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutscreencanvassizeoptions.html)
     */
    public inline fun cfnAnalysisGridLayoutScreenCanvasSizeOptionsProperty(
        block: CfnAnalysisGridLayoutScreenCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GridLayoutScreenCanvasSizeOptionsProperty {
        val builder = CfnAnalysisGridLayoutScreenCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The growth rate computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GrowthRateComputationProperty growthRateComputationProperty =
     * GrowthRateComputationProperty.builder()
     * .computationId("computationId")
     * .time(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * // the properties below are optional
     * .name("name")
     * .periodSize(123)
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html)
     */
    public inline fun cfnAnalysisGrowthRateComputationProperty(
        block: CfnAnalysisGrowthRateComputationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.GrowthRateComputationProperty {
        val builder = CfnAnalysisGrowthRateComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a header or footer section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HeaderFooterSectionConfigurationProperty headerFooterSectionConfigurationProperty =
     * HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-headerfootersectionconfiguration.html)
     */
    public inline fun cfnAnalysisHeaderFooterSectionConfigurationProperty(
        block: CfnAnalysisHeaderFooterSectionConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.HeaderFooterSectionConfigurationProperty {
        val builder = CfnAnalysisHeaderFooterSectionConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells of a heat map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisHeatMapAggregatedFieldWellsProperty(
        block: CfnAnalysisHeatMapAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.HeatMapAggregatedFieldWellsProperty {
        val builder = CfnAnalysisHeatMapAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a heat map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html)
     */
    public inline fun cfnAnalysisHeatMapConfigurationProperty(
        block: CfnAnalysisHeatMapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.HeatMapConfigurationProperty {
        val builder = CfnAnalysisHeatMapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a heat map.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapfieldwells.html)
     */
    public inline fun cfnAnalysisHeatMapFieldWellsProperty(
        block: CfnAnalysisHeatMapFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.HeatMapFieldWellsProperty {
        val builder = CfnAnalysisHeatMapFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a heat map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HeatMapSortConfigurationProperty heatMapSortConfigurationProperty =
     * HeatMapSortConfigurationProperty.builder()
     * .heatMapColumnItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .heatMapColumnSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .heatMapRowItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .heatMapRowSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html)
     */
    public inline fun cfnAnalysisHeatMapSortConfigurationProperty(
        block: CfnAnalysisHeatMapSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.HeatMapSortConfigurationProperty {
        val builder = CfnAnalysisHeatMapSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A heat map.
     *
     * For more information, see
     * [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html)
     */
    public inline fun cfnAnalysisHeatMapVisualProperty(
        block: CfnAnalysisHeatMapVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.HeatMapVisualProperty {
        val builder = CfnAnalysisHeatMapVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a histogram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HistogramAggregatedFieldWellsProperty histogramAggregatedFieldWellsProperty =
     * HistogramAggregatedFieldWellsProperty.builder()
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisHistogramAggregatedFieldWellsProperty(
        block: CfnAnalysisHistogramAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.HistogramAggregatedFieldWellsProperty {
        val builder = CfnAnalysisHistogramAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of histogram bins.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HistogramBinOptionsProperty histogramBinOptionsProperty = HistogramBinOptionsProperty.builder()
     * .binCount(BinCountOptionsProperty.builder()
     * .value(123)
     * .build())
     * .binWidth(BinWidthOptionsProperty.builder()
     * .binCountLimit(123)
     * .value(123)
     * .build())
     * .selectedBinType("selectedBinType")
     * .startValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html)
     */
    public inline fun cfnAnalysisHistogramBinOptionsProperty(
        block: CfnAnalysisHistogramBinOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.HistogramBinOptionsProperty {
        val builder = CfnAnalysisHistogramBinOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `HistogramVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * HistogramConfigurationProperty histogramConfigurationProperty =
     * HistogramConfigurationProperty.builder()
     * .binOptions(HistogramBinOptionsProperty.builder()
     * .binCount(BinCountOptionsProperty.builder()
     * .value(123)
     * .build())
     * .binWidth(BinWidthOptionsProperty.builder()
     * .binCountLimit(123)
     * .value(123)
     * .build())
     * .selectedBinType("selectedBinType")
     * .startValue(123)
     * .build())
     * .dataLabels(DataLabelOptionsProperty.builder()
     * .categoryLabelVisibility("categoryLabelVisibility")
     * .dataLabelTypes(List.of(DataLabelTypeProperty.builder()
     * .dataPathLabelType(DataPathLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .visibility("visibility")
     * .build())
     * .fieldLabelType(FieldLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .visibility("visibility")
     * .build())
     * .maximumLabelType(MaximumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .minimumLabelType(MinimumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .rangeEndsLabelType(RangeEndsLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build()))
     * .labelColor("labelColor")
     * .labelContent("labelContent")
     * .labelFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .measureLabelVisibility("measureLabelVisibility")
     * .overlap("overlap")
     * .position("position")
     * .totalsVisibility("totalsVisibility")
     * .visibility("visibility")
     * .build())
     * .fieldWells(HistogramFieldWellsProperty.builder()
     * .histogramAggregatedFieldWells(HistogramAggregatedFieldWellsProperty.builder()
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build())
     * .tooltip(TooltipOptionsProperty.builder()
     * .fieldBasedTooltip(FieldBasedTooltipProperty.builder()
     * .aggregationVisibility("aggregationVisibility")
     * .tooltipFields(List.of(TooltipItemProperty.builder()
     * .columnTooltipItem(ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .fieldTooltipItem(FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .build()))
     * .tooltipTitleType("tooltipTitleType")
     * .build())
     * .selectedTooltipType("selectedTooltipType")
     * .tooltipVisibility("tooltipVisibility")
     * .build())
     * .visualPalette(VisualPaletteProperty.builder()
     * .chartColor("chartColor")
     * .colorMap(List.of(DataPathColorProperty.builder()
     * .color("color")
     * .element(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build())
     * // the properties below are optional
     * .timeGranularity("timeGranularity")
     * .build()))
     * .build())
     * .xAxisDisplayOptions(AxisDisplayOptionsProperty.builder()
     * .axisLineVisibility("axisLineVisibility")
     * .axisOffset("axisOffset")
     * .dataOptions(AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build())
     * .gridLineVisibility("gridLineVisibility")
     * .scrollbarOptions(ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build())
     * .tickLabelOptions(AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build())
     * .build())
     * .xAxisLabelOptions(ChartAxisLabelOptionsProperty.builder()
     * .axisLabelOptions(List.of(AxisLabelOptionsProperty.builder()
     * .applyTo(AxisLabelReferenceOptionsProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * .build())
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .build()))
     * .sortIconVisibility("sortIconVisibility")
     * .visibility("visibility")
     * .build())
     * .yAxisDisplayOptions(AxisDisplayOptionsProperty.builder()
     * .axisLineVisibility("axisLineVisibility")
     * .axisOffset("axisOffset")
     * .dataOptions(AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build())
     * .gridLineVisibility("gridLineVisibility")
     * .scrollbarOptions(ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build())
     * .tickLabelOptions(AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html)
     */
    public inline fun cfnAnalysisHistogramConfigurationProperty(
        block: CfnAnalysisHistogramConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.HistogramConfigurationProperty {
        val builder = CfnAnalysisHistogramConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a histogram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HistogramFieldWellsProperty histogramFieldWellsProperty = HistogramFieldWellsProperty.builder()
     * .histogramAggregatedFieldWells(HistogramAggregatedFieldWellsProperty.builder()
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramfieldwells.html)
     */
    public inline fun cfnAnalysisHistogramFieldWellsProperty(
        block: CfnAnalysisHistogramFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.HistogramFieldWellsProperty {
        val builder = CfnAnalysisHistogramFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A histogram.
     *
     * For more information, see
     * [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html)
     */
    public inline fun cfnAnalysisHistogramVisualProperty(
        block: CfnAnalysisHistogramVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.HistogramVisualProperty {
        val builder = CfnAnalysisHistogramVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of an insight visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightconfiguration.html)
     */
    public inline fun cfnAnalysisInsightConfigurationProperty(
        block: CfnAnalysisInsightConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.InsightConfigurationProperty {
        val builder = CfnAnalysisInsightConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An insight visual.
     *
     * For more information, see
     * [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html)
     */
    public inline fun cfnAnalysisInsightVisualProperty(
        block: CfnAnalysisInsightVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.InsightVisualProperty {
        val builder = CfnAnalysisInsightVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The default values of the `IntegerParameterDeclaration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerDefaultValuesProperty integerDefaultValuesProperty =
     * IntegerDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerdefaultvalues.html)
     */
    public inline fun cfnAnalysisIntegerDefaultValuesProperty(
        block: CfnAnalysisIntegerDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.IntegerDefaultValuesProperty {
        val builder = CfnAnalysisIntegerDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `Integer` data type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerParameterDeclarationProperty integerParameterDeclarationProperty =
     * IntegerParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(IntegerDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(IntegerValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html)
     */
    public inline fun cfnAnalysisIntegerParameterDeclarationProperty(
        block: CfnAnalysisIntegerParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.IntegerParameterDeclarationProperty {
        val builder = CfnAnalysisIntegerParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An integer parameter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerParameterProperty integerParameterProperty = IntegerParameterProperty.builder()
     * .name("name")
     * .values(List.of(123))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameter.html)
     */
    public inline fun cfnAnalysisIntegerParameterProperty(
        block: CfnAnalysisIntegerParameterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.IntegerParameterProperty {
        val builder = CfnAnalysisIntegerParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `Integer` data type.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerValueWhenUnsetConfigurationProperty integerValueWhenUnsetConfigurationProperty =
     * IntegerValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integervaluewhenunsetconfiguration.html)
     */
    public inline fun cfnAnalysisIntegerValueWhenUnsetConfigurationProperty(
        block: CfnAnalysisIntegerValueWhenUnsetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.IntegerValueWhenUnsetConfigurationProperty {
        val builder = CfnAnalysisIntegerValueWhenUnsetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The limit configuration of the visual display for an axis.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ItemsLimitConfigurationProperty itemsLimitConfigurationProperty =
     * ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-itemslimitconfiguration.html)
     */
    public inline fun cfnAnalysisItemsLimitConfigurationProperty(
        block: CfnAnalysisItemsLimitConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ItemsLimitConfigurationProperty {
        val builder = CfnAnalysisItemsLimitConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting options of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIConditionalFormattingOptionProperty kPIConditionalFormattingOptionProperty =
     * KPIConditionalFormattingOptionProperty.builder()
     * .primaryValue(KPIPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .progressBar(KPIProgressBarConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html)
     */
    public inline fun cfnAnalysisKPIConditionalFormattingOptionProperty(
        block: CfnAnalysisKPIConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.KPIConditionalFormattingOptionProperty {
        val builder = CfnAnalysisKPIConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIConditionalFormattingProperty kPIConditionalFormattingProperty =
     * KPIConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(KPIConditionalFormattingOptionProperty.builder()
     * .primaryValue(KPIPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .progressBar(KPIProgressBarConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformatting.html)
     */
    public inline fun cfnAnalysisKPIConditionalFormattingProperty(
        block: CfnAnalysisKPIConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.KPIConditionalFormattingProperty {
        val builder = CfnAnalysisKPIConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a KPI visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconfiguration.html)
     */
    public inline fun cfnAnalysisKPIConfigurationProperty(
        block: CfnAnalysisKPIConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.KPIConfigurationProperty {
        val builder = CfnAnalysisKPIConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a KPI visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpifieldwells.html)
     */
    public inline fun cfnAnalysisKPIFieldWellsProperty(
        block: CfnAnalysisKPIFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.KPIFieldWellsProperty {
        val builder = CfnAnalysisKPIFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIOptionsProperty kPIOptionsProperty = KPIOptionsProperty.builder()
     * .comparison(ComparisonConfigurationProperty.builder()
     * .comparisonFormat(ComparisonFormatConfigurationProperty.builder()
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .comparisonMethod("comparisonMethod")
     * .build())
     * .primaryValueDisplayType("primaryValueDisplayType")
     * .primaryValueFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .progressBar(ProgressBarOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .secondaryValue(SecondaryValueOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .secondaryValueFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .trendArrows(TrendArrowOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html)
     */
    public inline fun cfnAnalysisKPIOptionsProperty(
        block: CfnAnalysisKPIOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.KPIOptionsProperty {
        val builder = CfnAnalysisKPIOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for the primary value of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIPrimaryValueConditionalFormattingProperty kPIPrimaryValueConditionalFormattingProperty =
     * KPIPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprimaryvalueconditionalformatting.html)
     */
    public inline fun cfnAnalysisKPIPrimaryValueConditionalFormattingProperty(
        block: CfnAnalysisKPIPrimaryValueConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.KPIPrimaryValueConditionalFormattingProperty {
        val builder = CfnAnalysisKPIPrimaryValueConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for the progress bar of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIProgressBarConditionalFormattingProperty kPIProgressBarConditionalFormattingProperty =
     * KPIProgressBarConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprogressbarconditionalformatting.html)
     */
    public inline fun cfnAnalysisKPIProgressBarConditionalFormattingProperty(
        block: CfnAnalysisKPIProgressBarConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.KPIProgressBarConditionalFormattingProperty {
        val builder = CfnAnalysisKPIProgressBarConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPISortConfigurationProperty kPISortConfigurationProperty =
     * KPISortConfigurationProperty.builder()
     * .trendGroupSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisortconfiguration.html)
     */
    public inline fun cfnAnalysisKPISortConfigurationProperty(
        block: CfnAnalysisKPISortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.KPISortConfigurationProperty {
        val builder = CfnAnalysisKPISortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A key performance indicator (KPI).
     *
     * For more information, see
     * [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html)
     */
    public inline fun cfnAnalysisKPIVisualProperty(
        block: CfnAnalysisKPIVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.KPIVisualProperty {
        val builder = CfnAnalysisKPIVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The share label options for the labels.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LabelOptionsProperty labelOptionsProperty = LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-labeloptions.html)
     */
    public inline fun cfnAnalysisLabelOptionsProperty(
        block: CfnAnalysisLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LabelOptionsProperty {
        val builder = CfnAnalysisLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that determines what the type of layout will be used on a sheet.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LayoutConfigurationProperty layoutConfigurationProperty = LayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .gridLayout(GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .sectionBasedLayout(SectionBasedLayoutConfigurationProperty.builder()
     * .bodySections(List.of(BodySectionConfigurationProperty.builder()
     * .content(BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .pageBreakConfiguration(SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build())
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .footerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .headerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layoutconfiguration.html)
     */
    public inline fun cfnAnalysisLayoutConfigurationProperty(
        block: CfnAnalysisLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LayoutConfigurationProperty {
        val builder = CfnAnalysisLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `Layout` defines the placement of elements within a sheet.
     *
     * For more information, see
     * [Types of layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LayoutProperty layoutProperty = LayoutProperty.builder()
     * .configuration(LayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .gridLayout(GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .sectionBasedLayout(SectionBasedLayoutConfigurationProperty.builder()
     * .bodySections(List.of(BodySectionConfigurationProperty.builder()
     * .content(BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .pageBreakConfiguration(SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build())
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .footerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .headerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layout.html)
     */
    public inline fun cfnAnalysisLayoutProperty(
        block: CfnAnalysisLayoutPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LayoutProperty {
        val builder = CfnAnalysisLayoutPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for the legend setup of a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LegendOptionsProperty legendOptionsProperty = LegendOptionsProperty.builder()
     * .height("height")
     * .position("position")
     * .title(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .width("width")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html)
     */
    public inline fun cfnAnalysisLegendOptionsProperty(
        block: CfnAnalysisLegendOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LegendOptionsProperty {
        val builder = CfnAnalysisLegendOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a line chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisLineChartAggregatedFieldWellsProperty(
        block: CfnAnalysisLineChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LineChartAggregatedFieldWellsProperty {
        val builder = CfnAnalysisLineChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a line chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html)
     */
    public inline fun cfnAnalysisLineChartConfigurationProperty(
        block: CfnAnalysisLineChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LineChartConfigurationProperty {
        val builder = CfnAnalysisLineChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default presentation of all line series in `LineChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartDefaultSeriesSettingsProperty lineChartDefaultSeriesSettingsProperty =
     * LineChartDefaultSeriesSettingsProperty.builder()
     * .axisBinding("axisBinding")
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartdefaultseriessettings.html)
     */
    public inline fun cfnAnalysisLineChartDefaultSeriesSettingsProperty(
        block: CfnAnalysisLineChartDefaultSeriesSettingsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LineChartDefaultSeriesSettingsProperty {
        val builder = CfnAnalysisLineChartDefaultSeriesSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a line chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartfieldwells.html)
     */
    public inline fun cfnAnalysisLineChartFieldWellsProperty(
        block: CfnAnalysisLineChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LineChartFieldWellsProperty {
        val builder = CfnAnalysisLineChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Line styles options for a line series in `LineChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartLineStyleSettingsProperty lineChartLineStyleSettingsProperty =
     * LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html)
     */
    public inline fun cfnAnalysisLineChartLineStyleSettingsProperty(
        block: CfnAnalysisLineChartLineStyleSettingsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LineChartLineStyleSettingsProperty {
        val builder = CfnAnalysisLineChartLineStyleSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Marker styles options for a line series in `LineChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartMarkerStyleSettingsProperty lineChartMarkerStyleSettingsProperty =
     * LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html)
     */
    public inline fun cfnAnalysisLineChartMarkerStyleSettingsProperty(
        block: CfnAnalysisLineChartMarkerStyleSettingsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LineChartMarkerStyleSettingsProperty {
        val builder = CfnAnalysisLineChartMarkerStyleSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of a line series in the visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartSeriesSettingsProperty lineChartSeriesSettingsProperty =
     * LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartseriessettings.html)
     */
    public inline fun cfnAnalysisLineChartSeriesSettingsProperty(
        block: CfnAnalysisLineChartSeriesSettingsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LineChartSeriesSettingsProperty {
        val builder = CfnAnalysisLineChartSeriesSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartSortConfigurationProperty lineChartSortConfigurationProperty =
     * LineChartSortConfigurationProperty.builder()
     * .categoryItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .colorItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .smallMultiplesSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html)
     */
    public inline fun cfnAnalysisLineChartSortConfigurationProperty(
        block: CfnAnalysisLineChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LineChartSortConfigurationProperty {
        val builder = CfnAnalysisLineChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A line chart.
     *
     * For more information, see
     * [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html)
     */
    public inline fun cfnAnalysisLineChartVisualProperty(
        block: CfnAnalysisLineChartVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LineChartVisualProperty {
        val builder = CfnAnalysisLineChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The series axis configuration of a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * LineSeriesAxisDisplayOptionsProperty lineSeriesAxisDisplayOptionsProperty =
     * LineSeriesAxisDisplayOptionsProperty.builder()
     * .axisOptions(AxisDisplayOptionsProperty.builder()
     * .axisLineVisibility("axisLineVisibility")
     * .axisOffset("axisOffset")
     * .dataOptions(AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build())
     * .gridLineVisibility("gridLineVisibility")
     * .scrollbarOptions(ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build())
     * .tickLabelOptions(AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build())
     * .build())
     * .missingDataConfigurations(List.of(MissingDataConfigurationProperty.builder()
     * .treatmentOption("treatmentOption")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-lineseriesaxisdisplayoptions.html)
     */
    public inline fun cfnAnalysisLineSeriesAxisDisplayOptionsProperty(
        block: CfnAnalysisLineSeriesAxisDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LineSeriesAxisDisplayOptionsProperty {
        val builder = CfnAnalysisLineSeriesAxisDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ListControlDisplayOptionsProperty listControlDisplayOptionsProperty =
     * ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html)
     */
    public inline fun cfnAnalysisListControlDisplayOptionsProperty(
        block: CfnAnalysisListControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ListControlDisplayOptionsProperty {
        val builder = CfnAnalysisListControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of the search options in a list control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ListControlSearchOptionsProperty listControlSearchOptionsProperty =
     * ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontrolsearchoptions.html)
     */
    public inline fun cfnAnalysisListControlSearchOptionsProperty(
        block: CfnAnalysisListControlSearchOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ListControlSearchOptionsProperty {
        val builder = CfnAnalysisListControlSearchOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of the `Select all` options in a list control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ListControlSelectAllOptionsProperty listControlSelectAllOptionsProperty =
     * ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontrolselectalloptions.html)
     */
    public inline fun cfnAnalysisListControlSelectAllOptionsProperty(
        block: CfnAnalysisListControlSelectAllOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ListControlSelectAllOptionsProperty {
        val builder = CfnAnalysisListControlSelectAllOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of loading animation in free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LoadingAnimationProperty loadingAnimationProperty = LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-loadinganimation.html)
     */
    public inline fun cfnAnalysisLoadingAnimationProperty(
        block: CfnAnalysisLoadingAnimationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LoadingAnimationProperty {
        val builder = CfnAnalysisLoadingAnimationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The navigation configuration for `CustomActionNavigationOperation` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LocalNavigationConfigurationProperty localNavigationConfigurationProperty =
     * LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-localnavigationconfiguration.html)
     */
    public inline fun cfnAnalysisLocalNavigationConfigurationProperty(
        block: CfnAnalysisLocalNavigationConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LocalNavigationConfigurationProperty {
        val builder = CfnAnalysisLocalNavigationConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The text format for a subtitle.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LongFormatTextProperty longFormatTextProperty = LongFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-longformattext.html)
     */
    public inline fun cfnAnalysisLongFormatTextProperty(
        block: CfnAnalysisLongFormatTextPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.LongFormatTextProperty {
        val builder = CfnAnalysisLongFormatTextPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A dataset parameter that is mapped to an analysis parameter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MappedDataSetParameterProperty mappedDataSetParameterProperty =
     * MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-mappeddatasetparameter.html)
     */
    public inline fun cfnAnalysisMappedDataSetParameterProperty(
        block: CfnAnalysisMappedDataSetParameterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.MappedDataSetParameterProperty {
        val builder = CfnAnalysisMappedDataSetParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The maximum label of a data path label.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MaximumLabelTypeProperty maximumLabelTypeProperty = MaximumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumlabeltype.html)
     */
    public inline fun cfnAnalysisMaximumLabelTypeProperty(
        block: CfnAnalysisMaximumLabelTypePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.MaximumLabelTypeProperty {
        val builder = CfnAnalysisMaximumLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The maximum and minimum computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MaximumMinimumComputationProperty maximumMinimumComputationProperty =
     * MaximumMinimumComputationProperty.builder()
     * .computationId("computationId")
     * .time(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * .type("type")
     * // the properties below are optional
     * .name("name")
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html)
     */
    public inline fun cfnAnalysisMaximumMinimumComputationProperty(
        block: CfnAnalysisMaximumMinimumComputationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.MaximumMinimumComputationProperty {
        val builder = CfnAnalysisMaximumMinimumComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The measure (metric) type field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MeasureFieldProperty measureFieldProperty = MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html)
     */
    public inline fun cfnAnalysisMeasureFieldProperty(
        block: CfnAnalysisMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.MeasureFieldProperty {
        val builder = CfnAnalysisMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The metric comparison computation configuration.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html)
     */
    public inline fun cfnAnalysisMetricComparisonComputationProperty(
        block: CfnAnalysisMetricComparisonComputationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.MetricComparisonComputationProperty {
        val builder = CfnAnalysisMetricComparisonComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The minimum label of a data path label.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MinimumLabelTypeProperty minimumLabelTypeProperty = MinimumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-minimumlabeltype.html)
     */
    public inline fun cfnAnalysisMinimumLabelTypeProperty(
        block: CfnAnalysisMinimumLabelTypePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.MinimumLabelTypeProperty {
        val builder = CfnAnalysisMinimumLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration options that determine how missing data is treated during the rendering of
     * a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MissingDataConfigurationProperty missingDataConfigurationProperty =
     * MissingDataConfigurationProperty.builder()
     * .treatmentOption("treatmentOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-missingdataconfiguration.html)
     */
    public inline fun cfnAnalysisMissingDataConfigurationProperty(
        block: CfnAnalysisMissingDataConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.MissingDataConfigurationProperty {
        val builder = CfnAnalysisMissingDataConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the negative value configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NegativeValueConfigurationProperty negativeValueConfigurationProperty =
     * NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-negativevalueconfiguration.html)
     */
    public inline fun cfnAnalysisNegativeValueConfigurationProperty(
        block: CfnAnalysisNegativeValueConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NegativeValueConfigurationProperty {
        val builder = CfnAnalysisNegativeValueConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the null value format configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NullValueFormatConfigurationProperty nullValueFormatConfigurationProperty =
     * NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-nullvalueformatconfiguration.html)
     */
    public inline fun cfnAnalysisNullValueFormatConfigurationProperty(
        block: CfnAnalysisNullValueFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NullValueFormatConfigurationProperty {
        val builder = CfnAnalysisNullValueFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the number display format configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumberDisplayFormatConfigurationProperty numberDisplayFormatConfigurationProperty =
     * NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html)
     */
    public inline fun cfnAnalysisNumberDisplayFormatConfigurationProperty(
        block: CfnAnalysisNumberDisplayFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NumberDisplayFormatConfigurationProperty {
        val builder = CfnAnalysisNumberDisplayFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for number fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumberFormatConfigurationProperty numberFormatConfigurationProperty =
     * NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberformatconfiguration.html)
     */
    public inline fun cfnAnalysisNumberFormatConfigurationProperty(
        block: CfnAnalysisNumberFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NumberFormatConfigurationProperty {
        val builder = CfnAnalysisNumberFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for an axis with a numeric field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * NumericAxisOptionsProperty numericAxisOptionsProperty = NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaxisoptions.html)
     */
    public inline fun cfnAnalysisNumericAxisOptionsProperty(
        block: CfnAnalysisNumericAxisOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NumericAxisOptionsProperty {
        val builder = CfnAnalysisNumericAxisOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The category drill down filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericEqualityDrillDownFilterProperty numericEqualityDrillDownFilterProperty =
     * NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalitydrilldownfilter.html)
     */
    public inline fun cfnAnalysisNumericEqualityDrillDownFilterProperty(
        block: CfnAnalysisNumericEqualityDrillDownFilterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NumericEqualityDrillDownFilterProperty {
        val builder = CfnAnalysisNumericEqualityDrillDownFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `NumericEqualityFilter` filters values that are equal to the specified value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericEqualityFilterProperty numericEqualityFilterProperty =
     * NumericEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html)
     */
    public inline fun cfnAnalysisNumericEqualityFilterProperty(
        block: CfnAnalysisNumericEqualityFilterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NumericEqualityFilterProperty {
        val builder = CfnAnalysisNumericEqualityFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the numeric format configuration.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericFormatConfigurationProperty numericFormatConfigurationProperty =
     * NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericformatconfiguration.html)
     */
    public inline fun cfnAnalysisNumericFormatConfigurationProperty(
        block: CfnAnalysisNumericFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NumericFormatConfigurationProperty {
        val builder = CfnAnalysisNumericFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `NumericRangeFilter` filters values that are within the value range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericRangeFilterProperty numericRangeFilterProperty = NumericRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .rangeMinimum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .selectAllOptions("selectAllOptions")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html)
     */
    public inline fun cfnAnalysisNumericRangeFilterProperty(
        block: CfnAnalysisNumericRangeFilterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NumericRangeFilterProperty {
        val builder = CfnAnalysisNumericRangeFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The value input pf the numeric range filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericRangeFilterValueProperty numericRangeFilterValueProperty =
     * NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefiltervalue.html)
     */
    public inline fun cfnAnalysisNumericRangeFilterValueProperty(
        block: CfnAnalysisNumericRangeFilterValuePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NumericRangeFilterValueProperty {
        val builder = CfnAnalysisNumericRangeFilterValuePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the numeric separator configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericSeparatorConfigurationProperty numericSeparatorConfigurationProperty =
     * NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericseparatorconfiguration.html)
     */
    public inline fun cfnAnalysisNumericSeparatorConfigurationProperty(
        block: CfnAnalysisNumericSeparatorConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NumericSeparatorConfigurationProperty {
        val builder = CfnAnalysisNumericSeparatorConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Aggregation for numerical values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericalAggregationFunctionProperty numericalAggregationFunctionProperty =
     * NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalaggregationfunction.html)
     */
    public inline fun cfnAnalysisNumericalAggregationFunctionProperty(
        block: CfnAnalysisNumericalAggregationFunctionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NumericalAggregationFunctionProperty {
        val builder = CfnAnalysisNumericalAggregationFunctionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dimension type field with numerical type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericalDimensionFieldProperty numericalDimensionFieldProperty =
     * NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html)
     */
    public inline fun cfnAnalysisNumericalDimensionFieldProperty(
        block: CfnAnalysisNumericalDimensionFieldPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NumericalDimensionFieldProperty {
        val builder = CfnAnalysisNumericalDimensionFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The measure type field with numerical type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericalMeasureFieldProperty numericalMeasureFieldProperty =
     * NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html)
     */
    public inline fun cfnAnalysisNumericalMeasureFieldProperty(
        block: CfnAnalysisNumericalMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.NumericalMeasureFieldProperty {
        val builder = CfnAnalysisNumericalMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The pagination configuration for a table visual or boxplot.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PaginationConfigurationProperty paginationConfigurationProperty =
     * PaginationConfigurationProperty.builder()
     * .pageNumber(123)
     * .pageSize(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paginationconfiguration.html)
     */
    public inline fun cfnAnalysisPaginationConfigurationProperty(
        block: CfnAnalysisPaginationConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PaginationConfigurationProperty {
        val builder = CfnAnalysisPaginationConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A collection of options that configure how each panel displays in a small multiples chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PanelConfigurationProperty panelConfigurationProperty = PanelConfigurationProperty.builder()
     * .backgroundColor("backgroundColor")
     * .backgroundVisibility("backgroundVisibility")
     * .borderColor("borderColor")
     * .borderStyle("borderStyle")
     * .borderThickness("borderThickness")
     * .borderVisibility("borderVisibility")
     * .gutterSpacing("gutterSpacing")
     * .gutterVisibility("gutterVisibility")
     * .title(PanelTitleOptionsProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html)
     */
    public inline fun cfnAnalysisPanelConfigurationProperty(
        block: CfnAnalysisPanelConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PanelConfigurationProperty {
        val builder = CfnAnalysisPanelConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the title styles for each small multiples panel.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PanelTitleOptionsProperty panelTitleOptionsProperty = PanelTitleOptionsProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paneltitleoptions.html)
     */
    public inline fun cfnAnalysisPanelTitleOptionsProperty(
        block: CfnAnalysisPanelTitleOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PanelTitleOptionsProperty {
        val builder = CfnAnalysisPanelTitleOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The control of a parameter that users can interact with in a dashboard or an analysis.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterControlProperty parameterControlProperty = ParameterControlProperty.builder()
     * .dateTimePicker(ParameterDateTimePickerControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .dropdown(ParameterDropDownControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build())
     * .list(ParameterListControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build())
     * .slider(ParameterSliderControlProperty.builder()
     * .maximumValue(123)
     * .minimumValue(123)
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .stepSize(123)
     * .title("title")
     * // the properties below are optional
     * .displayOptions(SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .textArea(ParameterTextAreaControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .delimiter("delimiter")
     * .displayOptions(TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .textField(ParameterTextFieldControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html)
     */
    public inline fun cfnAnalysisParameterControlProperty(
        block: CfnAnalysisParameterControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ParameterControlProperty {
        val builder = CfnAnalysisParameterControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control from a date parameter that specifies date and time.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterDateTimePickerControlProperty parameterDateTimePickerControlProperty =
     * ParameterDateTimePickerControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html)
     */
    public inline fun cfnAnalysisParameterDateTimePickerControlProperty(
        block: CfnAnalysisParameterDateTimePickerControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ParameterDateTimePickerControlProperty {
        val builder = CfnAnalysisParameterDateTimePickerControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The declaration definition of a parameter.
     *
     * For more information, see
     * [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterDeclarationProperty parameterDeclarationProperty =
     * ParameterDeclarationProperty.builder()
     * .dateTimeParameterDeclaration(DateTimeParameterDeclarationProperty.builder()
     * .name("name")
     * // the properties below are optional
     * .defaultValues(DateTimeDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .timeGranularity("timeGranularity")
     * .valueWhenUnset(DateTimeValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build())
     * .decimalParameterDeclaration(DecimalParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(DecimalDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(DecimalValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build())
     * .integerParameterDeclaration(IntegerParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(IntegerDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(IntegerValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build())
     * .stringParameterDeclaration(StringParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(StringDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(StringValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html)
     */
    public inline fun cfnAnalysisParameterDeclarationProperty(
        block: CfnAnalysisParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ParameterDeclarationProperty {
        val builder = CfnAnalysisParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a dropdown list with buttons that are used to select a single value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterDropDownControlProperty parameterDropDownControlProperty =
     * ParameterDropDownControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html)
     */
    public inline fun cfnAnalysisParameterDropDownControlProperty(
        block: CfnAnalysisParameterDropDownControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ParameterDropDownControlProperty {
        val builder = CfnAnalysisParameterDropDownControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a list with buttons or boxes that are used to select either a single
     * value or multiple values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterListControlProperty parameterListControlProperty =
     * ParameterListControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html)
     */
    public inline fun cfnAnalysisParameterListControlProperty(
        block: CfnAnalysisParameterListControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ParameterListControlProperty {
        val builder = CfnAnalysisParameterListControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of selectable values that are used in a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterSelectableValuesProperty parameterSelectableValuesProperty =
     * ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterselectablevalues.html)
     */
    public inline fun cfnAnalysisParameterSelectableValuesProperty(
        block: CfnAnalysisParameterSelectableValuesPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ParameterSelectableValuesProperty {
        val builder = CfnAnalysisParameterSelectableValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a horizontal toggle bar.
     *
     * This is used to change a value by sliding the toggle.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterSliderControlProperty parameterSliderControlProperty =
     * ParameterSliderControlProperty.builder()
     * .maximumValue(123)
     * .minimumValue(123)
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .stepSize(123)
     * .title("title")
     * // the properties below are optional
     * .displayOptions(SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html)
     */
    public inline fun cfnAnalysisParameterSliderControlProperty(
        block: CfnAnalysisParameterSliderControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ParameterSliderControlProperty {
        val builder = CfnAnalysisParameterSliderControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a text box that is used to enter multiple entries.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterTextAreaControlProperty parameterTextAreaControlProperty =
     * ParameterTextAreaControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .delimiter("delimiter")
     * .displayOptions(TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html)
     */
    public inline fun cfnAnalysisParameterTextAreaControlProperty(
        block: CfnAnalysisParameterTextAreaControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ParameterTextAreaControlProperty {
        val builder = CfnAnalysisParameterTextAreaControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a text box that is used to enter a single entry.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterTextFieldControlProperty parameterTextFieldControlProperty =
     * ParameterTextFieldControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html)
     */
    public inline fun cfnAnalysisParameterTextFieldControlProperty(
        block: CfnAnalysisParameterTextFieldControlPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ParameterTextFieldControlProperty {
        val builder = CfnAnalysisParameterTextFieldControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of Amazon QuickSight parameters and the list's override values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParametersProperty parametersProperty = ParametersProperty.builder()
     * .dateTimeParameters(List.of(DateTimeParameterProperty.builder()
     * .name("name")
     * .values(List.of("values"))
     * .build()))
     * .decimalParameters(List.of(DecimalParameterProperty.builder()
     * .name("name")
     * .values(List.of(123))
     * .build()))
     * .integerParameters(List.of(IntegerParameterProperty.builder()
     * .name("name")
     * .values(List.of(123))
     * .build()))
     * .stringParameters(List.of(StringParameterProperty.builder()
     * .name("name")
     * .values(List.of("values"))
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html)
     */
    public inline fun cfnAnalysisParametersProperty(
        block: CfnAnalysisParametersPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ParametersProperty {
        val builder = CfnAnalysisParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The percent range in the visible range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PercentVisibleRangeProperty percentVisibleRangeProperty = PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentvisiblerange.html)
     */
    public inline fun cfnAnalysisPercentVisibleRangeProperty(
        block: CfnAnalysisPercentVisibleRangePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PercentVisibleRangeProperty {
        val builder = CfnAnalysisPercentVisibleRangePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the percentage display format configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PercentageDisplayFormatConfigurationProperty percentageDisplayFormatConfigurationProperty =
     * PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html)
     */
    public inline fun cfnAnalysisPercentageDisplayFormatConfigurationProperty(
        block: CfnAnalysisPercentageDisplayFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PercentageDisplayFormatConfigurationProperty {
        val builder = CfnAnalysisPercentageDisplayFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An aggregation based on the percentile of values in a dimension or measure.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PercentileAggregationProperty percentileAggregationProperty =
     * PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentileaggregation.html)
     */
    public inline fun cfnAnalysisPercentileAggregationProperty(
        block: CfnAnalysisPercentileAggregationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PercentileAggregationProperty {
        val builder = CfnAnalysisPercentileAggregationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The period over period computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PeriodOverPeriodComputationProperty periodOverPeriodComputationProperty =
     * PeriodOverPeriodComputationProperty.builder()
     * .computationId("computationId")
     * .time(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * // the properties below are optional
     * .name("name")
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html)
     */
    public inline fun cfnAnalysisPeriodOverPeriodComputationProperty(
        block: CfnAnalysisPeriodOverPeriodComputationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PeriodOverPeriodComputationProperty {
        val builder = CfnAnalysisPeriodOverPeriodComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The period to date computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PeriodToDateComputationProperty periodToDateComputationProperty =
     * PeriodToDateComputationProperty.builder()
     * .computationId("computationId")
     * .time(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * // the properties below are optional
     * .name("name")
     * .periodTimeGranularity("periodTimeGranularity")
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html)
     */
    public inline fun cfnAnalysisPeriodToDateComputationProperty(
        block: CfnAnalysisPeriodToDateComputationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PeriodToDateComputationProperty {
        val builder = CfnAnalysisPeriodToDateComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a pie chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisPieChartAggregatedFieldWellsProperty(
        block: CfnAnalysisPieChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PieChartAggregatedFieldWellsProperty {
        val builder = CfnAnalysisPieChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a pie chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html)
     */
    public inline fun cfnAnalysisPieChartConfigurationProperty(
        block: CfnAnalysisPieChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PieChartConfigurationProperty {
        val builder = CfnAnalysisPieChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a pie chart.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartfieldwells.html)
     */
    public inline fun cfnAnalysisPieChartFieldWellsProperty(
        block: CfnAnalysisPieChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PieChartFieldWellsProperty {
        val builder = CfnAnalysisPieChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a pie chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PieChartSortConfigurationProperty pieChartSortConfigurationProperty =
     * PieChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .smallMultiplesSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html)
     */
    public inline fun cfnAnalysisPieChartSortConfigurationProperty(
        block: CfnAnalysisPieChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PieChartSortConfigurationProperty {
        val builder = CfnAnalysisPieChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A pie or donut chart.
     *
     * The `PieChartVisual` structure describes a visual that is a member of the pie chart family.
     *
     * The following charts can be described by using this structure:
     * * Pie charts
     * * Donut charts
     *
     * For more information, see
     * [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * For more information, see
     * [Using donut charts](https://docs.aws.amazon.com/quicksight/latest/user/donut-chart.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html)
     */
    public inline fun cfnAnalysisPieChartVisualProperty(
        block: CfnAnalysisPieChartVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PieChartVisualProperty {
        val builder = CfnAnalysisPieChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field sort options for a pivot table sort configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotFieldSortOptionsProperty pivotFieldSortOptionsProperty =
     * PivotFieldSortOptionsProperty.builder()
     * .fieldId("fieldId")
     * .sortBy(PivotTableSortByProperty.builder()
     * .column(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .dataPath(DataPathSortProperty.builder()
     * .direction("direction")
     * .sortPaths(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .build())
     * .field(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivotfieldsortoptions.html)
     */
    public inline fun cfnAnalysisPivotFieldSortOptionsProperty(
        block: CfnAnalysisPivotFieldSortOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotFieldSortOptionsProperty {
        val builder = CfnAnalysisPivotFieldSortOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well for the pivot table.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisPivotTableAggregatedFieldWellsProperty(
        block: CfnAnalysisPivotTableAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableAggregatedFieldWellsProperty {
        val builder = CfnAnalysisPivotTableAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The cell conditional formatting option for a pivot table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableCellConditionalFormattingProperty pivotTableCellConditionalFormattingProperty =
     * PivotTableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .scope(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build())
     * .scopes(List.of(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build()))
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html)
     */
    public inline fun cfnAnalysisPivotTableCellConditionalFormattingProperty(
        block: CfnAnalysisPivotTableCellConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableCellConditionalFormattingProperty {
        val builder = CfnAnalysisPivotTableCellConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Conditional formatting options for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableConditionalFormattingOptionProperty pivotTableConditionalFormattingOptionProperty =
     * PivotTableConditionalFormattingOptionProperty.builder()
     * .cell(PivotTableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .scope(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build())
     * .scopes(List.of(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build()))
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformattingoption.html)
     */
    public inline fun cfnAnalysisPivotTableConditionalFormattingOptionProperty(
        block: CfnAnalysisPivotTableConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableConditionalFormattingOptionProperty {
        val builder = CfnAnalysisPivotTableConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableConditionalFormattingProperty pivotTableConditionalFormattingProperty =
     * PivotTableConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(PivotTableConditionalFormattingOptionProperty.builder()
     * .cell(PivotTableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .scope(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build())
     * .scopes(List.of(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build()))
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformatting.html)
     */
    public inline fun cfnAnalysisPivotTableConditionalFormattingProperty(
        block: CfnAnalysisPivotTableConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableConditionalFormattingProperty {
        val builder = CfnAnalysisPivotTableConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The scope of the cell for conditional formatting.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableConditionalFormattingScopeProperty pivotTableConditionalFormattingScopeProperty =
     * PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformattingscope.html)
     */
    public inline fun cfnAnalysisPivotTableConditionalFormattingScopeProperty(
        block: CfnAnalysisPivotTableConditionalFormattingScopePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableConditionalFormattingScopeProperty {
        val builder = CfnAnalysisPivotTableConditionalFormattingScopePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html)
     */
    public inline fun cfnAnalysisPivotTableConfigurationProperty(
        block: CfnAnalysisPivotTableConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableConfigurationProperty {
        val builder = CfnAnalysisPivotTableConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data path options for the pivot table field options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableDataPathOptionProperty pivotTableDataPathOptionProperty =
     * PivotTableDataPathOptionProperty.builder()
     * .dataPathList(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * // the properties below are optional
     * .width("width")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabledatapathoption.html)
     */
    public inline fun cfnAnalysisPivotTableDataPathOptionProperty(
        block: CfnAnalysisPivotTableDataPathOptionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableDataPathOptionProperty {
        val builder = CfnAnalysisPivotTableDataPathOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The collapse state options for the pivot table field options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldCollapseStateOptionProperty pivotTableFieldCollapseStateOptionProperty =
     * PivotTableFieldCollapseStateOptionProperty.builder()
     * .target(PivotTableFieldCollapseStateTargetProperty.builder()
     * .fieldDataPathValues(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .fieldId("fieldId")
     * .build())
     * // the properties below are optional
     * .state("state")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestateoption.html)
     */
    public inline fun cfnAnalysisPivotTableFieldCollapseStateOptionProperty(
        block: CfnAnalysisPivotTableFieldCollapseStateOptionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableFieldCollapseStateOptionProperty {
        val builder = CfnAnalysisPivotTableFieldCollapseStateOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The target of a pivot table field collapse state.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldCollapseStateTargetProperty pivotTableFieldCollapseStateTargetProperty =
     * PivotTableFieldCollapseStateTargetProperty.builder()
     * .fieldDataPathValues(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestatetarget.html)
     */
    public inline fun cfnAnalysisPivotTableFieldCollapseStateTargetProperty(
        block: CfnAnalysisPivotTableFieldCollapseStateTargetPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableFieldCollapseStateTargetProperty {
        val builder = CfnAnalysisPivotTableFieldCollapseStateTargetPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The selected field options for the pivot table field options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldOptionProperty pivotTableFieldOptionProperty =
     * PivotTableFieldOptionProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .customLabel("customLabel")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoption.html)
     */
    public inline fun cfnAnalysisPivotTableFieldOptionProperty(
        block: CfnAnalysisPivotTableFieldOptionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableFieldOptionProperty {
        val builder = CfnAnalysisPivotTableFieldOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field options for a pivot table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldOptionsProperty pivotTableFieldOptionsProperty =
     * PivotTableFieldOptionsProperty.builder()
     * .collapseStateOptions(List.of(PivotTableFieldCollapseStateOptionProperty.builder()
     * .target(PivotTableFieldCollapseStateTargetProperty.builder()
     * .fieldDataPathValues(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .fieldId("fieldId")
     * .build())
     * // the properties below are optional
     * .state("state")
     * .build()))
     * .dataPathOptions(List.of(PivotTableDataPathOptionProperty.builder()
     * .dataPathList(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * // the properties below are optional
     * .width("width")
     * .build()))
     * .selectedFieldOptions(List.of(PivotTableFieldOptionProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .customLabel("customLabel")
     * .visibility("visibility")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoptions.html)
     */
    public inline fun cfnAnalysisPivotTableFieldOptionsProperty(
        block: CfnAnalysisPivotTableFieldOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableFieldOptionsProperty {
        val builder = CfnAnalysisPivotTableFieldOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The optional configuration of subtotals cells.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldSubtotalOptionsProperty pivotTableFieldSubtotalOptionsProperty =
     * PivotTableFieldSubtotalOptionsProperty.builder()
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldsubtotaloptions.html)
     */
    public inline fun cfnAnalysisPivotTableFieldSubtotalOptionsProperty(
        block: CfnAnalysisPivotTableFieldSubtotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableFieldSubtotalOptionsProperty {
        val builder = CfnAnalysisPivotTableFieldSubtotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells for a pivot table visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldwells.html)
     */
    public inline fun cfnAnalysisPivotTableFieldWellsProperty(
        block: CfnAnalysisPivotTableFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableFieldWellsProperty {
        val builder = CfnAnalysisPivotTableFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The table options for a pivot table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableOptionsProperty pivotTableOptionsProperty = PivotTableOptionsProperty.builder()
     * .cellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .collapsedRowDimensionsVisibility("collapsedRowDimensionsVisibility")
     * .columnHeaderStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .columnNamesVisibility("columnNamesVisibility")
     * .metricPlacement("metricPlacement")
     * .rowAlternateColorOptions(RowAlternateColorOptionsProperty.builder()
     * .rowAlternateColors(List.of("rowAlternateColors"))
     * .status("status")
     * .build())
     * .rowFieldNamesStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .rowHeaderStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .singleMetricVisibility("singleMetricVisibility")
     * .toggleButtonsVisibility("toggleButtonsVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html)
     */
    public inline fun cfnAnalysisPivotTableOptionsProperty(
        block: CfnAnalysisPivotTableOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableOptionsProperty {
        val builder = CfnAnalysisPivotTableOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The paginated report options for a pivot table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTablePaginatedReportOptionsProperty pivotTablePaginatedReportOptionsProperty =
     * PivotTablePaginatedReportOptionsProperty.builder()
     * .overflowColumnHeaderVisibility("overflowColumnHeaderVisibility")
     * .verticalOverflowVisibility("verticalOverflowVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablepaginatedreportoptions.html)
     */
    public inline fun cfnAnalysisPivotTablePaginatedReportOptionsProperty(
        block: CfnAnalysisPivotTablePaginatedReportOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTablePaginatedReportOptionsProperty {
        val builder = CfnAnalysisPivotTablePaginatedReportOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort by field for the field sort options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableSortByProperty pivotTableSortByProperty = PivotTableSortByProperty.builder()
     * .column(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .dataPath(DataPathSortProperty.builder()
     * .direction("direction")
     * .sortPaths(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .build())
     * .field(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortby.html)
     */
    public inline fun cfnAnalysisPivotTableSortByProperty(
        block: CfnAnalysisPivotTableSortByPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableSortByProperty {
        val builder = CfnAnalysisPivotTableSortByPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableSortConfigurationProperty pivotTableSortConfigurationProperty =
     * PivotTableSortConfigurationProperty.builder()
     * .fieldSortOptions(List.of(PivotFieldSortOptionsProperty.builder()
     * .fieldId("fieldId")
     * .sortBy(PivotTableSortByProperty.builder()
     * .column(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .dataPath(DataPathSortProperty.builder()
     * .direction("direction")
     * .sortPaths(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .build())
     * .field(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortconfiguration.html)
     */
    public inline fun cfnAnalysisPivotTableSortConfigurationProperty(
        block: CfnAnalysisPivotTableSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableSortConfigurationProperty {
        val builder = CfnAnalysisPivotTableSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The total options for a pivot table visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html)
     */
    public inline fun cfnAnalysisPivotTableTotalOptionsProperty(
        block: CfnAnalysisPivotTableTotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableTotalOptionsProperty {
        val builder = CfnAnalysisPivotTableTotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A pivot table.
     *
     * For more information, see
     * [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html)
     */
    public inline fun cfnAnalysisPivotTableVisualProperty(
        block: CfnAnalysisPivotTableVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTableVisualProperty {
        val builder = CfnAnalysisPivotTableVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The optional configuration of totals cells in a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTotalOptionsProperty pivotTotalOptionsProperty = PivotTotalOptionsProperty.builder()
     * .customLabel("customLabel")
     * .metricHeaderCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .placement("placement")
     * .scrollStatus("scrollStatus")
     * .totalCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .totalsVisibility("totalsVisibility")
     * .valueCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html)
     */
    public inline fun cfnAnalysisPivotTotalOptionsProperty(
        block: CfnAnalysisPivotTotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PivotTotalOptionsProperty {
        val builder = CfnAnalysisPivotTotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the hierarchy of the fields that are defined during data
     * preparation.
     *
     * These fields are available to use in any analysis that uses the data source.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PredefinedHierarchyProperty predefinedHierarchyProperty = PredefinedHierarchyProperty.builder()
     * .columns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-predefinedhierarchy.html)
     */
    public inline fun cfnAnalysisPredefinedHierarchyProperty(
        block: CfnAnalysisPredefinedHierarchyPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.PredefinedHierarchyProperty {
        val builder = CfnAnalysisPredefinedHierarchyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the progress bar of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ProgressBarOptionsProperty progressBarOptionsProperty = ProgressBarOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-progressbaroptions.html)
     */
    public inline fun cfnAnalysisProgressBarOptionsProperty(
        block: CfnAnalysisProgressBarOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ProgressBarOptionsProperty {
        val builder = CfnAnalysisProgressBarOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Properties for defining a `CfnAnalysis`.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html)
     */
    public inline fun cfnAnalysisProps(
        block: CfnAnalysisPropsDsl.() -> Unit = {}
    ): CfnAnalysisProps {
        val builder = CfnAnalysisPropsDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well configuration of a `RadarChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisRadarChartAggregatedFieldWellsProperty(
        block: CfnAnalysisRadarChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.RadarChartAggregatedFieldWellsProperty {
        val builder = CfnAnalysisRadarChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configured style settings of a radar chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RadarChartAreaStyleSettingsProperty radarChartAreaStyleSettingsProperty =
     * RadarChartAreaStyleSettingsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartareastylesettings.html)
     */
    public inline fun cfnAnalysisRadarChartAreaStyleSettingsProperty(
        block: CfnAnalysisRadarChartAreaStyleSettingsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.RadarChartAreaStyleSettingsProperty {
        val builder = CfnAnalysisRadarChartAreaStyleSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `RadarChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html)
     */
    public inline fun cfnAnalysisRadarChartConfigurationProperty(
        block: CfnAnalysisRadarChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.RadarChartConfigurationProperty {
        val builder = CfnAnalysisRadarChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a radar chart visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartfieldwells.html)
     */
    public inline fun cfnAnalysisRadarChartFieldWellsProperty(
        block: CfnAnalysisRadarChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.RadarChartFieldWellsProperty {
        val builder = CfnAnalysisRadarChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The series settings of a radar chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RadarChartSeriesSettingsProperty radarChartSeriesSettingsProperty =
     * RadarChartSeriesSettingsProperty.builder()
     * .areaStyleSettings(RadarChartAreaStyleSettingsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartseriessettings.html)
     */
    public inline fun cfnAnalysisRadarChartSeriesSettingsProperty(
        block: CfnAnalysisRadarChartSeriesSettingsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.RadarChartSeriesSettingsProperty {
        val builder = CfnAnalysisRadarChartSeriesSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `RadarChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RadarChartSortConfigurationProperty radarChartSortConfigurationProperty =
     * RadarChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .colorItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .colorSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html)
     */
    public inline fun cfnAnalysisRadarChartSortConfigurationProperty(
        block: CfnAnalysisRadarChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.RadarChartSortConfigurationProperty {
        val builder = CfnAnalysisRadarChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A radar chart visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html)
     */
    public inline fun cfnAnalysisRadarChartVisualProperty(
        block: CfnAnalysisRadarChartVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.RadarChartVisualProperty {
        val builder = CfnAnalysisRadarChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The range ends label type of a data path label.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RangeEndsLabelTypeProperty rangeEndsLabelTypeProperty = RangeEndsLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rangeendslabeltype.html)
     */
    public inline fun cfnAnalysisRangeEndsLabelTypeProperty(
        block: CfnAnalysisRangeEndsLabelTypePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.RangeEndsLabelTypeProperty {
        val builder = CfnAnalysisRangeEndsLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a custom label on a `ReferenceLine` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineCustomLabelConfigurationProperty referenceLineCustomLabelConfigurationProperty =
     * ReferenceLineCustomLabelConfigurationProperty.builder()
     * .customLabel("customLabel")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinecustomlabelconfiguration.html)
     */
    public inline fun cfnAnalysisReferenceLineCustomLabelConfigurationProperty(
        block: CfnAnalysisReferenceLineCustomLabelConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ReferenceLineCustomLabelConfigurationProperty {
        val builder = CfnAnalysisReferenceLineCustomLabelConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data configuration of the reference line.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineDataConfigurationProperty referenceLineDataConfigurationProperty =
     * ReferenceLineDataConfigurationProperty.builder()
     * .axisBinding("axisBinding")
     * .dynamicConfiguration(ReferenceLineDynamicDataConfigurationProperty.builder()
     * .calculation(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .measureAggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .staticConfiguration(ReferenceLineStaticDataConfigurationProperty.builder()
     * .value(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html)
     */
    public inline fun cfnAnalysisReferenceLineDataConfigurationProperty(
        block: CfnAnalysisReferenceLineDataConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ReferenceLineDataConfigurationProperty {
        val builder = CfnAnalysisReferenceLineDataConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dynamic configuration of the reference line data configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineDynamicDataConfigurationProperty referenceLineDynamicDataConfigurationProperty =
     * ReferenceLineDynamicDataConfigurationProperty.builder()
     * .calculation(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .measureAggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedynamicdataconfiguration.html)
     */
    public inline fun cfnAnalysisReferenceLineDynamicDataConfigurationProperty(
        block: CfnAnalysisReferenceLineDynamicDataConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ReferenceLineDynamicDataConfigurationProperty {
        val builder = CfnAnalysisReferenceLineDynamicDataConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The label configuration of a reference line.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineLabelConfigurationProperty referenceLineLabelConfigurationProperty =
     * ReferenceLineLabelConfigurationProperty.builder()
     * .customLabelConfiguration(ReferenceLineCustomLabelConfigurationProperty.builder()
     * .customLabel("customLabel")
     * .build())
     * .fontColor("fontColor")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalPosition("horizontalPosition")
     * .valueLabelConfiguration(ReferenceLineValueLabelConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .relativePosition("relativePosition")
     * .build())
     * .verticalPosition("verticalPosition")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html)
     */
    public inline fun cfnAnalysisReferenceLineLabelConfigurationProperty(
        block: CfnAnalysisReferenceLineLabelConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ReferenceLineLabelConfigurationProperty {
        val builder = CfnAnalysisReferenceLineLabelConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The reference line visual display options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineProperty referenceLineProperty = ReferenceLineProperty.builder()
     * .dataConfiguration(ReferenceLineDataConfigurationProperty.builder()
     * .axisBinding("axisBinding")
     * .dynamicConfiguration(ReferenceLineDynamicDataConfigurationProperty.builder()
     * .calculation(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .measureAggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .staticConfiguration(ReferenceLineStaticDataConfigurationProperty.builder()
     * .value(123)
     * .build())
     * .build())
     * // the properties below are optional
     * .labelConfiguration(ReferenceLineLabelConfigurationProperty.builder()
     * .customLabelConfiguration(ReferenceLineCustomLabelConfigurationProperty.builder()
     * .customLabel("customLabel")
     * .build())
     * .fontColor("fontColor")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalPosition("horizontalPosition")
     * .valueLabelConfiguration(ReferenceLineValueLabelConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .relativePosition("relativePosition")
     * .build())
     * .verticalPosition("verticalPosition")
     * .build())
     * .status("status")
     * .styleConfiguration(ReferenceLineStyleConfigurationProperty.builder()
     * .color("color")
     * .pattern("pattern")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html)
     */
    public inline fun cfnAnalysisReferenceLineProperty(
        block: CfnAnalysisReferenceLinePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ReferenceLineProperty {
        val builder = CfnAnalysisReferenceLinePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The static data configuration of the reference line data configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineStaticDataConfigurationProperty referenceLineStaticDataConfigurationProperty =
     * ReferenceLineStaticDataConfigurationProperty.builder()
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestaticdataconfiguration.html)
     */
    public inline fun cfnAnalysisReferenceLineStaticDataConfigurationProperty(
        block: CfnAnalysisReferenceLineStaticDataConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ReferenceLineStaticDataConfigurationProperty {
        val builder = CfnAnalysisReferenceLineStaticDataConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The style configuration of the reference line.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineStyleConfigurationProperty referenceLineStyleConfigurationProperty =
     * ReferenceLineStyleConfigurationProperty.builder()
     * .color("color")
     * .pattern("pattern")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestyleconfiguration.html)
     */
    public inline fun cfnAnalysisReferenceLineStyleConfigurationProperty(
        block: CfnAnalysisReferenceLineStyleConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ReferenceLineStyleConfigurationProperty {
        val builder = CfnAnalysisReferenceLineStyleConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The value label configuration of the label in a reference line.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineValueLabelConfigurationProperty referenceLineValueLabelConfigurationProperty =
     * ReferenceLineValueLabelConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .relativePosition("relativePosition")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinevaluelabelconfiguration.html)
     */
    public inline fun cfnAnalysisReferenceLineValueLabelConfigurationProperty(
        block: CfnAnalysisReferenceLineValueLabelConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ReferenceLineValueLabelConfigurationProperty {
        val builder = CfnAnalysisReferenceLineValueLabelConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RelativeDateTimeControlDisplayOptionsProperty relativeDateTimeControlDisplayOptionsProperty =
     * RelativeDateTimeControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatetimecontroldisplayoptions.html)
     */
    public inline fun cfnAnalysisRelativeDateTimeControlDisplayOptionsProperty(
        block: CfnAnalysisRelativeDateTimeControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.RelativeDateTimeControlDisplayOptionsProperty {
        val builder = CfnAnalysisRelativeDateTimeControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `RelativeDatesFilter` filters relative dates values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RelativeDatesFilterProperty relativeDatesFilterProperty = RelativeDatesFilterProperty.builder()
     * .anchorDateConfiguration(AnchorDateConfigurationProperty.builder()
     * .anchorOption("anchorOption")
     * .parameterName("parameterName")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * .relativeDateType("relativeDateType")
     * .timeGranularity("timeGranularity")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .minimumGranularity("minimumGranularity")
     * .parameterName("parameterName")
     * .relativeDateValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html)
     */
    public inline fun cfnAnalysisRelativeDatesFilterProperty(
        block: CfnAnalysisRelativeDatesFilterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.RelativeDatesFilterProperty {
        val builder = CfnAnalysisRelativeDatesFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Permission for the resource.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ResourcePermissionProperty resourcePermissionProperty = ResourcePermissionProperty.builder()
     * .actions(List.of("actions"))
     * .principal("principal")
     * // the properties below are optional
     * .resource("resource")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-resourcepermission.html)
     */
    public inline fun cfnAnalysisResourcePermissionProperty(
        block: CfnAnalysisResourcePermissionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ResourcePermissionProperty {
        val builder = CfnAnalysisResourcePermissionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The rolling date configuration of a date time filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RollingDateConfigurationProperty rollingDateConfigurationProperty =
     * RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rollingdateconfiguration.html)
     */
    public inline fun cfnAnalysisRollingDateConfigurationProperty(
        block: CfnAnalysisRollingDateConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.RollingDateConfigurationProperty {
        val builder = CfnAnalysisRollingDateConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the row alternate color options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RowAlternateColorOptionsProperty rowAlternateColorOptionsProperty =
     * RowAlternateColorOptionsProperty.builder()
     * .rowAlternateColors(List.of("rowAlternateColors"))
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rowalternatecoloroptions.html)
     */
    public inline fun cfnAnalysisRowAlternateColorOptionsProperty(
        block: CfnAnalysisRowAlternateColorOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.RowAlternateColorOptionsProperty {
        val builder = CfnAnalysisRowAlternateColorOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of the same-sheet target visuals that you want to be filtered.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SameSheetTargetVisualConfigurationProperty sameSheetTargetVisualConfigurationProperty =
     * SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-samesheettargetvisualconfiguration.html)
     */
    public inline fun cfnAnalysisSameSheetTargetVisualConfigurationProperty(
        block: CfnAnalysisSameSheetTargetVisualConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SameSheetTargetVisualConfigurationProperty {
        val builder = CfnAnalysisSameSheetTargetVisualConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a sankey diagram.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisSankeyDiagramAggregatedFieldWellsProperty(
        block: CfnAnalysisSankeyDiagramAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SankeyDiagramAggregatedFieldWellsProperty {
        val builder = CfnAnalysisSankeyDiagramAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a sankey diagram.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramchartconfiguration.html)
     */
    public inline fun cfnAnalysisSankeyDiagramChartConfigurationProperty(
        block: CfnAnalysisSankeyDiagramChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SankeyDiagramChartConfigurationProperty {
        val builder = CfnAnalysisSankeyDiagramChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a sankey diagram.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramfieldwells.html)
     */
    public inline fun cfnAnalysisSankeyDiagramFieldWellsProperty(
        block: CfnAnalysisSankeyDiagramFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SankeyDiagramFieldWellsProperty {
        val builder = CfnAnalysisSankeyDiagramFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a sankey diagram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SankeyDiagramSortConfigurationProperty sankeyDiagramSortConfigurationProperty =
     * SankeyDiagramSortConfigurationProperty.builder()
     * .destinationItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .sourceItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .weightSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramsortconfiguration.html)
     */
    public inline fun cfnAnalysisSankeyDiagramSortConfigurationProperty(
        block: CfnAnalysisSankeyDiagramSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SankeyDiagramSortConfigurationProperty {
        val builder = CfnAnalysisSankeyDiagramSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A sankey diagram.
     *
     * For more information, see
     * [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html)
     */
    public inline fun cfnAnalysisSankeyDiagramVisualProperty(
        block: CfnAnalysisSankeyDiagramVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SankeyDiagramVisualProperty {
        val builder = CfnAnalysisSankeyDiagramVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well of a scatter plot.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisScatterPlotCategoricallyAggregatedFieldWellsProperty(
        block: CfnAnalysisScatterPlotCategoricallyAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ScatterPlotCategoricallyAggregatedFieldWellsProperty {
        val builder = CfnAnalysisScatterPlotCategoricallyAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a scatter plot.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html)
     */
    public inline fun cfnAnalysisScatterPlotConfigurationProperty(
        block: CfnAnalysisScatterPlotConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ScatterPlotConfigurationProperty {
        val builder = CfnAnalysisScatterPlotConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a scatter plot.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotfieldwells.html)
     */
    public inline fun cfnAnalysisScatterPlotFieldWellsProperty(
        block: CfnAnalysisScatterPlotFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ScatterPlotFieldWellsProperty {
        val builder = CfnAnalysisScatterPlotFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The unaggregated field wells of a scatter plot.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisScatterPlotUnaggregatedFieldWellsProperty(
        block: CfnAnalysisScatterPlotUnaggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ScatterPlotUnaggregatedFieldWellsProperty {
        val builder = CfnAnalysisScatterPlotUnaggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A scatter plot.
     *
     * For more information, see
     * [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html)
     */
    public inline fun cfnAnalysisScatterPlotVisualProperty(
        block: CfnAnalysisScatterPlotVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ScatterPlotVisualProperty {
        val builder = CfnAnalysisScatterPlotVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The visual display options for a data zoom scroll bar.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ScrollBarOptionsProperty scrollBarOptionsProperty = ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scrollbaroptions.html)
     */
    public inline fun cfnAnalysisScrollBarOptionsProperty(
        block: CfnAnalysisScrollBarOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ScrollBarOptionsProperty {
        val builder = CfnAnalysisScrollBarOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the secondary value of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SecondaryValueOptionsProperty secondaryValueOptionsProperty =
     * SecondaryValueOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-secondaryvalueoptions.html)
     */
    public inline fun cfnAnalysisSecondaryValueOptionsProperty(
        block: CfnAnalysisSecondaryValueOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SecondaryValueOptionsProperty {
        val builder = CfnAnalysisSecondaryValueOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a page break after a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionAfterPageBreakProperty sectionAfterPageBreakProperty =
     * SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionafterpagebreak.html)
     */
    public inline fun cfnAnalysisSectionAfterPageBreakProperty(
        block: CfnAnalysisSectionAfterPageBreakPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SectionAfterPageBreakProperty {
        val builder = CfnAnalysisSectionAfterPageBreakPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for the canvas of a section-based layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionBasedLayoutCanvasSizeOptionsProperty sectionBasedLayoutCanvasSizeOptionsProperty =
     * SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutcanvassizeoptions.html)
     */
    public inline fun cfnAnalysisSectionBasedLayoutCanvasSizeOptionsProperty(
        block: CfnAnalysisSectionBasedLayoutCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SectionBasedLayoutCanvasSizeOptionsProperty {
        val builder = CfnAnalysisSectionBasedLayoutCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a section-based layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionBasedLayoutConfigurationProperty sectionBasedLayoutConfigurationProperty =
     * SectionBasedLayoutConfigurationProperty.builder()
     * .bodySections(List.of(BodySectionConfigurationProperty.builder()
     * .content(BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .pageBreakConfiguration(SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build())
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .footerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .headerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html)
     */
    public inline fun cfnAnalysisSectionBasedLayoutConfigurationProperty(
        block: CfnAnalysisSectionBasedLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SectionBasedLayoutConfigurationProperty {
        val builder = CfnAnalysisSectionBasedLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for a paper canvas of a section-based layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionBasedLayoutPaperCanvasSizeOptionsProperty
     * sectionBasedLayoutPaperCanvasSizeOptionsProperty =
     * SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions.html)
     */
    public inline fun cfnAnalysisSectionBasedLayoutPaperCanvasSizeOptionsProperty(
        block: CfnAnalysisSectionBasedLayoutPaperCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SectionBasedLayoutPaperCanvasSizeOptionsProperty {
        val builder = CfnAnalysisSectionBasedLayoutPaperCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The layout configuration of a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionLayoutConfigurationProperty sectionLayoutConfigurationProperty =
     * SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionlayoutconfiguration.html)
     */
    public inline fun cfnAnalysisSectionLayoutConfigurationProperty(
        block: CfnAnalysisSectionLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SectionLayoutConfigurationProperty {
        val builder = CfnAnalysisSectionLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a page break for a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionPageBreakConfigurationProperty sectionPageBreakConfigurationProperty =
     * SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionpagebreakconfiguration.html)
     */
    public inline fun cfnAnalysisSectionPageBreakConfigurationProperty(
        block: CfnAnalysisSectionPageBreakConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SectionPageBreakConfigurationProperty {
        val builder = CfnAnalysisSectionPageBreakConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that style a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionStyleProperty sectionStyleProperty = SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionstyle.html)
     */
    public inline fun cfnAnalysisSectionStyleProperty(
        block: CfnAnalysisSectionStylePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SectionStyleProperty {
        val builder = CfnAnalysisSectionStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for applying a filter to specific sheets or visuals.
     *
     * You can apply this filter to multiple visuals that are on one sheet or to all visuals on a
     * sheet.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SelectedSheetsFilterScopeConfigurationProperty selectedSheetsFilterScopeConfigurationProperty =
     * SelectedSheetsFilterScopeConfigurationProperty.builder()
     * .sheetVisualScopingConfigurations(List.of(SheetVisualScopingConfigurationProperty.builder()
     * .scope("scope")
     * .sheetId("sheetId")
     * // the properties below are optional
     * .visualIds(List.of("visualIds"))
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-selectedsheetsfilterscopeconfiguration.html)
     */
    public inline fun cfnAnalysisSelectedSheetsFilterScopeConfigurationProperty(
        block: CfnAnalysisSelectedSheetsFilterScopeConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SelectedSheetsFilterScopeConfigurationProperty {
        val builder = CfnAnalysisSelectedSheetsFilterScopeConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The series item configuration of a line chart.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SeriesItemProperty seriesItemProperty = SeriesItemProperty.builder()
     * .dataFieldSeriesItem(DataFieldSeriesItemProperty.builder()
     * .axisBinding("axisBinding")
     * .fieldId("fieldId")
     * // the properties below are optional
     * .fieldValue("fieldValue")
     * .settings(LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build())
     * .build())
     * .fieldSeriesItem(FieldSeriesItemProperty.builder()
     * .axisBinding("axisBinding")
     * .fieldId("fieldId")
     * // the properties below are optional
     * .settings(LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-seriesitem.html)
     */
    public inline fun cfnAnalysisSeriesItemProperty(
        block: CfnAnalysisSeriesItemPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SeriesItemProperty {
        val builder = CfnAnalysisSeriesItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of adding parameters in action.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SetParameterValueConfigurationProperty setParameterValueConfigurationProperty =
     * SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-setparametervalueconfiguration.html)
     */
    public inline fun cfnAnalysisSetParameterValueConfigurationProperty(
        block: CfnAnalysisSetParameterValueConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SetParameterValueConfigurationProperty {
        val builder = CfnAnalysisSetParameterValueConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The shape conditional formatting of a filled map visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ShapeConditionalFormatProperty shapeConditionalFormatProperty =
     * ShapeConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shapeconditionalformat.html)
     */
    public inline fun cfnAnalysisShapeConditionalFormatProperty(
        block: CfnAnalysisShapeConditionalFormatPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ShapeConditionalFormatProperty {
        val builder = CfnAnalysisShapeConditionalFormatPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that determines the elements and canvas size options of sheet control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetControlLayoutConfigurationProperty sheetControlLayoutConfigurationProperty =
     * SheetControlLayoutConfigurationProperty.builder()
     * .gridLayout(GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrollayoutconfiguration.html)
     */
    public inline fun cfnAnalysisSheetControlLayoutConfigurationProperty(
        block: CfnAnalysisSheetControlLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SheetControlLayoutConfigurationProperty {
        val builder = CfnAnalysisSheetControlLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A grid layout to define the placement of sheet control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetControlLayoutProperty sheetControlLayoutProperty = SheetControlLayoutProperty.builder()
     * .configuration(SheetControlLayoutConfigurationProperty.builder()
     * .gridLayout(GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrollayout.html)
     */
    public inline fun cfnAnalysisSheetControlLayoutProperty(
        block: CfnAnalysisSheetControlLayoutPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SheetControlLayoutProperty {
        val builder = CfnAnalysisSheetControlLayoutPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A sheet is an object that contains a set of visuals that are viewed together on one page in a
     * paginated report.
     *
     * Every analysis and dashboard must contain at least one sheet.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html)
     */
    public inline fun cfnAnalysisSheetDefinitionProperty(
        block: CfnAnalysisSheetDefinitionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SheetDefinitionProperty {
        val builder = CfnAnalysisSheetDefinitionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The override configuration of the rendering rules of a sheet.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetElementConfigurationOverridesProperty sheetElementConfigurationOverridesProperty =
     * SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementconfigurationoverrides.html)
     */
    public inline fun cfnAnalysisSheetElementConfigurationOverridesProperty(
        block: CfnAnalysisSheetElementConfigurationOverridesPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SheetElementConfigurationOverridesProperty {
        val builder = CfnAnalysisSheetElementConfigurationOverridesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The rendering rules of a sheet that uses a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetElementRenderingRuleProperty sheetElementRenderingRuleProperty =
     * SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementrenderingrule.html)
     */
    public inline fun cfnAnalysisSheetElementRenderingRuleProperty(
        block: CfnAnalysisSheetElementRenderingRulePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SheetElementRenderingRuleProperty {
        val builder = CfnAnalysisSheetElementRenderingRulePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A *sheet* , which is an object that contains a set of visuals that are viewed together on one
     * page in Amazon QuickSight.
     *
     * Every analysis and dashboard contains at least one sheet. Each sheet contains at least one
     * visualization widget, for example a chart, pivot table, or narrative insight. Sheets can be
     * associated with other components, such as controls, filters, and so on.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetProperty sheetProperty = SheetProperty.builder()
     * .name("name")
     * .sheetId("sheetId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheet.html)
     */
    public inline fun cfnAnalysisSheetProperty(
        block: CfnAnalysisSheetPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SheetProperty {
        val builder = CfnAnalysisSheetPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A text box.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetTextBoxProperty sheetTextBoxProperty = SheetTextBoxProperty.builder()
     * .sheetTextBoxId("sheetTextBoxId")
     * // the properties below are optional
     * .content("content")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheettextbox.html)
     */
    public inline fun cfnAnalysisSheetTextBoxProperty(
        block: CfnAnalysisSheetTextBoxPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SheetTextBoxProperty {
        val builder = CfnAnalysisSheetTextBoxPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The filter that is applied to the options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetVisualScopingConfigurationProperty sheetVisualScopingConfigurationProperty =
     * SheetVisualScopingConfigurationProperty.builder()
     * .scope("scope")
     * .sheetId("sheetId")
     * // the properties below are optional
     * .visualIds(List.of("visualIds"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetvisualscopingconfiguration.html)
     */
    public inline fun cfnAnalysisSheetVisualScopingConfigurationProperty(
        block: CfnAnalysisSheetVisualScopingConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SheetVisualScopingConfigurationProperty {
        val builder = CfnAnalysisSheetVisualScopingConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The text format for the title.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ShortFormatTextProperty shortFormatTextProperty = ShortFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shortformattext.html)
     */
    public inline fun cfnAnalysisShortFormatTextProperty(
        block: CfnAnalysisShortFormatTextPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ShortFormatTextProperty {
        val builder = CfnAnalysisShortFormatTextPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The simple cluster marker of the cluster marker.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SimpleClusterMarkerProperty simpleClusterMarkerProperty = SimpleClusterMarkerProperty.builder()
     * .color("color")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-simpleclustermarker.html)
     */
    public inline fun cfnAnalysisSimpleClusterMarkerProperty(
        block: CfnAnalysisSimpleClusterMarkerPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SimpleClusterMarkerProperty {
        val builder = CfnAnalysisSimpleClusterMarkerPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SliderControlDisplayOptionsProperty sliderControlDisplayOptionsProperty =
     * SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-slidercontroldisplayoptions.html)
     */
    public inline fun cfnAnalysisSliderControlDisplayOptionsProperty(
        block: CfnAnalysisSliderControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SliderControlDisplayOptionsProperty {
        val builder = CfnAnalysisSliderControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Options that determine the layout and display options of a chart's small multiples.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SmallMultiplesOptionsProperty smallMultiplesOptionsProperty =
     * SmallMultiplesOptionsProperty.builder()
     * .maxVisibleColumns(123)
     * .maxVisibleRows(123)
     * .panelConfiguration(PanelConfigurationProperty.builder()
     * .backgroundColor("backgroundColor")
     * .backgroundVisibility("backgroundVisibility")
     * .borderColor("borderColor")
     * .borderStyle("borderStyle")
     * .borderThickness("borderThickness")
     * .borderVisibility("borderVisibility")
     * .gutterSpacing("gutterSpacing")
     * .gutterVisibility("gutterVisibility")
     * .title(PanelTitleOptionsProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html)
     */
    public inline fun cfnAnalysisSmallMultiplesOptionsProperty(
        block: CfnAnalysisSmallMultiplesOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SmallMultiplesOptionsProperty {
        val builder = CfnAnalysisSmallMultiplesOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of spacing (often a margin or padding).
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SpacingProperty spacingProperty = SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html)
     */
    public inline fun cfnAnalysisSpacingProperty(
        block: CfnAnalysisSpacingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SpacingProperty {
        val builder = CfnAnalysisSpacingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The default values of the `StringParameterDeclaration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringDefaultValuesProperty stringDefaultValuesProperty = StringDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringdefaultvalues.html)
     */
    public inline fun cfnAnalysisStringDefaultValuesProperty(
        block: CfnAnalysisStringDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.StringDefaultValuesProperty {
        val builder = CfnAnalysisStringDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for string fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringFormatConfigurationProperty stringFormatConfigurationProperty =
     * StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringformatconfiguration.html)
     */
    public inline fun cfnAnalysisStringFormatConfigurationProperty(
        block: CfnAnalysisStringFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.StringFormatConfigurationProperty {
        val builder = CfnAnalysisStringFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `String` data type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringParameterDeclarationProperty stringParameterDeclarationProperty =
     * StringParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(StringDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(StringValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html)
     */
    public inline fun cfnAnalysisStringParameterDeclarationProperty(
        block: CfnAnalysisStringParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.StringParameterDeclarationProperty {
        val builder = CfnAnalysisStringParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A string parameter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringParameterProperty stringParameterProperty = StringParameterProperty.builder()
     * .name("name")
     * .values(List.of("values"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameter.html)
     */
    public inline fun cfnAnalysisStringParameterProperty(
        block: CfnAnalysisStringParameterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.StringParameterProperty {
        val builder = CfnAnalysisStringParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that defines the default value of a `String` parameter when a value has not
     * been set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringValueWhenUnsetConfigurationProperty stringValueWhenUnsetConfigurationProperty =
     * StringValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringvaluewhenunsetconfiguration.html)
     */
    public inline fun cfnAnalysisStringValueWhenUnsetConfigurationProperty(
        block: CfnAnalysisStringValueWhenUnsetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.StringValueWhenUnsetConfigurationProperty {
        val builder = CfnAnalysisStringValueWhenUnsetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The subtotal options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SubtotalOptionsProperty subtotalOptionsProperty = SubtotalOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fieldLevel("fieldLevel")
     * .fieldLevelOptions(List.of(PivotTableFieldSubtotalOptionsProperty.builder()
     * .fieldId("fieldId")
     * .build()))
     * .metricHeaderCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .totalCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .totalsVisibility("totalsVisibility")
     * .valueCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html)
     */
    public inline fun cfnAnalysisSubtotalOptionsProperty(
        block: CfnAnalysisSubtotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.SubtotalOptionsProperty {
        val builder = CfnAnalysisSubtotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well for the table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableAggregatedFieldWellsProperty tableAggregatedFieldWellsProperty =
     * TableAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisTableAggregatedFieldWellsProperty(
        block: CfnAnalysisTableAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableAggregatedFieldWellsProperty {
        val builder = CfnAnalysisTableAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The border options for a table border.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableBorderOptionsProperty tableBorderOptionsProperty = TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableborderoptions.html)
     */
    public inline fun cfnAnalysisTableBorderOptionsProperty(
        block: CfnAnalysisTableBorderOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableBorderOptionsProperty {
        val builder = CfnAnalysisTableBorderOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The cell conditional formatting option for a table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableCellConditionalFormattingProperty tableCellConditionalFormattingProperty =
     * TableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellconditionalformatting.html)
     */
    public inline fun cfnAnalysisTableCellConditionalFormattingProperty(
        block: CfnAnalysisTableCellConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableCellConditionalFormattingProperty {
        val builder = CfnAnalysisTableCellConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sizing options for the table image configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableCellImageSizingConfigurationProperty tableCellImageSizingConfigurationProperty =
     * TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellimagesizingconfiguration.html)
     */
    public inline fun cfnAnalysisTableCellImageSizingConfigurationProperty(
        block: CfnAnalysisTableCellImageSizingConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableCellImageSizingConfigurationProperty {
        val builder = CfnAnalysisTableCellImageSizingConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The table cell style for a cell in pivot table or table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableCellStyleProperty tableCellStyleProperty = TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html)
     */
    public inline fun cfnAnalysisTableCellStyleProperty(
        block: CfnAnalysisTableCellStylePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableCellStyleProperty {
        val builder = CfnAnalysisTableCellStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Conditional formatting options for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableConditionalFormattingOptionProperty tableConditionalFormattingOptionProperty =
     * TableConditionalFormattingOptionProperty.builder()
     * .cell(TableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .row(TableRowConditionalFormattingProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformattingoption.html)
     */
    public inline fun cfnAnalysisTableConditionalFormattingOptionProperty(
        block: CfnAnalysisTableConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableConditionalFormattingOptionProperty {
        val builder = CfnAnalysisTableConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableConditionalFormattingProperty tableConditionalFormattingProperty =
     * TableConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(TableConditionalFormattingOptionProperty.builder()
     * .cell(TableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .row(TableRowConditionalFormattingProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformatting.html)
     */
    public inline fun cfnAnalysisTableConditionalFormattingProperty(
        block: CfnAnalysisTableConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableConditionalFormattingProperty {
        val builder = CfnAnalysisTableConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `TableVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html)
     */
    public inline fun cfnAnalysisTableConfigurationProperty(
        block: CfnAnalysisTableConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableConfigurationProperty {
        val builder = CfnAnalysisTableConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The custom icon content for the table link content configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldCustomIconContentProperty tableFieldCustomIconContentProperty =
     * TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomiconcontent.html)
     */
    public inline fun cfnAnalysisTableFieldCustomIconContentProperty(
        block: CfnAnalysisTableFieldCustomIconContentPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableFieldCustomIconContentProperty {
        val builder = CfnAnalysisTableFieldCustomIconContentPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The custom text content (value, font configuration) for the table link content configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldCustomTextContentProperty tableFieldCustomTextContentProperty =
     * TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomtextcontent.html)
     */
    public inline fun cfnAnalysisTableFieldCustomTextContentProperty(
        block: CfnAnalysisTableFieldCustomTextContentPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableFieldCustomTextContentProperty {
        val builder = CfnAnalysisTableFieldCustomTextContentPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The image configuration of a table field URL.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldImageConfigurationProperty tableFieldImageConfigurationProperty =
     * TableFieldImageConfigurationProperty.builder()
     * .sizingOptions(TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldimageconfiguration.html)
     */
    public inline fun cfnAnalysisTableFieldImageConfigurationProperty(
        block: CfnAnalysisTableFieldImageConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableFieldImageConfigurationProperty {
        val builder = CfnAnalysisTableFieldImageConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The link configuration of a table field URL.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldLinkConfigurationProperty tableFieldLinkConfigurationProperty =
     * TableFieldLinkConfigurationProperty.builder()
     * .content(TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build())
     * .target("target")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkconfiguration.html)
     */
    public inline fun cfnAnalysisTableFieldLinkConfigurationProperty(
        block: CfnAnalysisTableFieldLinkConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableFieldLinkConfigurationProperty {
        val builder = CfnAnalysisTableFieldLinkConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The URL content (text, icon) for the table link configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldLinkContentConfigurationProperty tableFieldLinkContentConfigurationProperty =
     * TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkcontentconfiguration.html)
     */
    public inline fun cfnAnalysisTableFieldLinkContentConfigurationProperty(
        block: CfnAnalysisTableFieldLinkContentConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableFieldLinkContentConfigurationProperty {
        val builder = CfnAnalysisTableFieldLinkContentConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for a table field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldOptionProperty tableFieldOptionProperty = TableFieldOptionProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .customLabel("customLabel")
     * .urlStyling(TableFieldURLConfigurationProperty.builder()
     * .imageConfiguration(TableFieldImageConfigurationProperty.builder()
     * .sizingOptions(TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build())
     * .build())
     * .linkConfiguration(TableFieldLinkConfigurationProperty.builder()
     * .content(TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build())
     * .target("target")
     * .build())
     * .build())
     * .visibility("visibility")
     * .width("width")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html)
     */
    public inline fun cfnAnalysisTableFieldOptionProperty(
        block: CfnAnalysisTableFieldOptionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableFieldOptionProperty {
        val builder = CfnAnalysisTableFieldOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldOptionsProperty tableFieldOptionsProperty = TableFieldOptionsProperty.builder()
     * .order(List.of("order"))
     * .selectedFieldOptions(List.of(TableFieldOptionProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .customLabel("customLabel")
     * .urlStyling(TableFieldURLConfigurationProperty.builder()
     * .imageConfiguration(TableFieldImageConfigurationProperty.builder()
     * .sizingOptions(TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build())
     * .build())
     * .linkConfiguration(TableFieldLinkConfigurationProperty.builder()
     * .content(TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build())
     * .target("target")
     * .build())
     * .build())
     * .visibility("visibility")
     * .width("width")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoptions.html)
     */
    public inline fun cfnAnalysisTableFieldOptionsProperty(
        block: CfnAnalysisTableFieldOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableFieldOptionsProperty {
        val builder = CfnAnalysisTableFieldOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The URL configuration for a table field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldURLConfigurationProperty tableFieldURLConfigurationProperty =
     * TableFieldURLConfigurationProperty.builder()
     * .imageConfiguration(TableFieldImageConfigurationProperty.builder()
     * .sizingOptions(TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build())
     * .build())
     * .linkConfiguration(TableFieldLinkConfigurationProperty.builder()
     * .content(TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build())
     * .target("target")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldurlconfiguration.html)
     */
    public inline fun cfnAnalysisTableFieldURLConfigurationProperty(
        block: CfnAnalysisTableFieldURLConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableFieldURLConfigurationProperty {
        val builder = CfnAnalysisTableFieldURLConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells for a table visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldwells.html)
     */
    public inline fun cfnAnalysisTableFieldWellsProperty(
        block: CfnAnalysisTableFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableFieldWellsProperty {
        val builder = CfnAnalysisTableFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The inline visualization of a specific type to display within a chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableInlineVisualizationProperty tableInlineVisualizationProperty =
     * TableInlineVisualizationProperty.builder()
     * .dataBars(DataBarsOptionsProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .negativeColor("negativeColor")
     * .positiveColor("positiveColor")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableinlinevisualization.html)
     */
    public inline fun cfnAnalysisTableInlineVisualizationProperty(
        block: CfnAnalysisTableInlineVisualizationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableInlineVisualizationProperty {
        val builder = CfnAnalysisTableInlineVisualizationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The table options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableOptionsProperty tableOptionsProperty = TableOptionsProperty.builder()
     * .cellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .headerStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .orientation("orientation")
     * .rowAlternateColorOptions(RowAlternateColorOptionsProperty.builder()
     * .rowAlternateColors(List.of("rowAlternateColors"))
     * .status("status")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html)
     */
    public inline fun cfnAnalysisTableOptionsProperty(
        block: CfnAnalysisTableOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableOptionsProperty {
        val builder = CfnAnalysisTableOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The paginated report options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TablePaginatedReportOptionsProperty tablePaginatedReportOptionsProperty =
     * TablePaginatedReportOptionsProperty.builder()
     * .overflowColumnHeaderVisibility("overflowColumnHeaderVisibility")
     * .verticalOverflowVisibility("verticalOverflowVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablepaginatedreportoptions.html)
     */
    public inline fun cfnAnalysisTablePaginatedReportOptionsProperty(
        block: CfnAnalysisTablePaginatedReportOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TablePaginatedReportOptionsProperty {
        val builder = CfnAnalysisTablePaginatedReportOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting of a table row.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableRowConditionalFormattingProperty tableRowConditionalFormattingProperty =
     * TableRowConditionalFormattingProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablerowconditionalformatting.html)
     */
    public inline fun cfnAnalysisTableRowConditionalFormattingProperty(
        block: CfnAnalysisTableRowConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableRowConditionalFormattingProperty {
        val builder = CfnAnalysisTableRowConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The side border options for a table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableSideBorderOptionsProperty tableSideBorderOptionsProperty =
     * TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html)
     */
    public inline fun cfnAnalysisTableSideBorderOptionsProperty(
        block: CfnAnalysisTableSideBorderOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableSideBorderOptionsProperty {
        val builder = CfnAnalysisTableSideBorderOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration for a `TableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableSortConfigurationProperty tableSortConfigurationProperty =
     * TableSortConfigurationProperty.builder()
     * .paginationConfiguration(PaginationConfigurationProperty.builder()
     * .pageNumber(123)
     * .pageSize(123)
     * .build())
     * .rowSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesortconfiguration.html)
     */
    public inline fun cfnAnalysisTableSortConfigurationProperty(
        block: CfnAnalysisTableSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableSortConfigurationProperty {
        val builder = CfnAnalysisTableSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The unaggregated field well for the table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableUnaggregatedFieldWellsProperty tableUnaggregatedFieldWellsProperty =
     * TableUnaggregatedFieldWellsProperty.builder()
     * .values(List.of(UnaggregatedFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(FormatConfigurationProperty.builder()
     * .dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .numberFormatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .stringFormatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableunaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisTableUnaggregatedFieldWellsProperty(
        block: CfnAnalysisTableUnaggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableUnaggregatedFieldWellsProperty {
        val builder = CfnAnalysisTableUnaggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A table visual.
     *
     * For more information, see
     * [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html)
     */
    public inline fun cfnAnalysisTableVisualProperty(
        block: CfnAnalysisTableVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TableVisualProperty {
        val builder = CfnAnalysisTableVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TextAreaControlDisplayOptionsProperty textAreaControlDisplayOptionsProperty =
     * TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textareacontroldisplayoptions.html)
     */
    public inline fun cfnAnalysisTextAreaControlDisplayOptionsProperty(
        block: CfnAnalysisTextAreaControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TextAreaControlDisplayOptionsProperty {
        val builder = CfnAnalysisTextAreaControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for the text.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TextConditionalFormatProperty textConditionalFormatProperty =
     * TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textconditionalformat.html)
     */
    public inline fun cfnAnalysisTextConditionalFormatProperty(
        block: CfnAnalysisTextConditionalFormatPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TextConditionalFormatProperty {
        val builder = CfnAnalysisTextConditionalFormatPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of the placeholder options in a text control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TextControlPlaceholderOptionsProperty textControlPlaceholderOptionsProperty =
     * TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textcontrolplaceholderoptions.html)
     */
    public inline fun cfnAnalysisTextControlPlaceholderOptionsProperty(
        block: CfnAnalysisTextControlPlaceholderOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TextControlPlaceholderOptionsProperty {
        val builder = CfnAnalysisTextControlPlaceholderOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TextFieldControlDisplayOptionsProperty textFieldControlDisplayOptionsProperty =
     * TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textfieldcontroldisplayoptions.html)
     */
    public inline fun cfnAnalysisTextFieldControlDisplayOptionsProperty(
        block: CfnAnalysisTextFieldControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TextFieldControlDisplayOptionsProperty {
        val builder = CfnAnalysisTextFieldControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the thousands separator configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ThousandSeparatorOptionsProperty thousandSeparatorOptionsProperty =
     * ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-thousandseparatoroptions.html)
     */
    public inline fun cfnAnalysisThousandSeparatorOptionsProperty(
        block: CfnAnalysisThousandSeparatorOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.ThousandSeparatorOptionsProperty {
        val builder = CfnAnalysisThousandSeparatorOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The forecast properties setup of a forecast in the line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeBasedForecastPropertiesProperty timeBasedForecastPropertiesProperty =
     * TimeBasedForecastPropertiesProperty.builder()
     * .lowerBoundary(123)
     * .periodsBackward(123)
     * .periodsForward(123)
     * .predictionInterval(123)
     * .seasonality(123)
     * .upperBoundary(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html)
     */
    public inline fun cfnAnalysisTimeBasedForecastPropertiesProperty(
        block: CfnAnalysisTimeBasedForecastPropertiesPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TimeBasedForecastPropertiesProperty {
        val builder = CfnAnalysisTimeBasedForecastPropertiesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `TimeEqualityFilter` filters values that are equal to a given value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeEqualityFilterProperty timeEqualityFilterProperty = TimeEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .value("value")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html)
     */
    public inline fun cfnAnalysisTimeEqualityFilterProperty(
        block: CfnAnalysisTimeEqualityFilterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TimeEqualityFilterProperty {
        val builder = CfnAnalysisTimeEqualityFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The time range drill down filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeRangeDrillDownFilterProperty timeRangeDrillDownFilterProperty =
     * TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html)
     */
    public inline fun cfnAnalysisTimeRangeDrillDownFilterProperty(
        block: CfnAnalysisTimeRangeDrillDownFilterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TimeRangeDrillDownFilterProperty {
        val builder = CfnAnalysisTimeRangeDrillDownFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `TimeRangeFilter` filters values that are between two specified values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeRangeFilterProperty timeRangeFilterProperty = TimeRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .rangeMinimumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html)
     */
    public inline fun cfnAnalysisTimeRangeFilterProperty(
        block: CfnAnalysisTimeRangeFilterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TimeRangeFilterProperty {
        val builder = CfnAnalysisTimeRangeFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The value of a time range filter.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeRangeFilterValueProperty timeRangeFilterValueProperty =
     * TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefiltervalue.html)
     */
    public inline fun cfnAnalysisTimeRangeFilterValueProperty(
        block: CfnAnalysisTimeRangeFilterValuePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TimeRangeFilterValueProperty {
        val builder = CfnAnalysisTimeRangeFilterValuePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The tooltip.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TooltipItemProperty tooltipItemProperty = TooltipItemProperty.builder()
     * .columnTooltipItem(ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .fieldTooltipItem(FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipitem.html)
     */
    public inline fun cfnAnalysisTooltipItemProperty(
        block: CfnAnalysisTooltipItemPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TooltipItemProperty {
        val builder = CfnAnalysisTooltipItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options for the visual tooltip.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TooltipOptionsProperty tooltipOptionsProperty = TooltipOptionsProperty.builder()
     * .fieldBasedTooltip(FieldBasedTooltipProperty.builder()
     * .aggregationVisibility("aggregationVisibility")
     * .tooltipFields(List.of(TooltipItemProperty.builder()
     * .columnTooltipItem(ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .fieldTooltipItem(FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .build()))
     * .tooltipTitleType("tooltipTitleType")
     * .build())
     * .selectedTooltipType("selectedTooltipType")
     * .tooltipVisibility("tooltipVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipoptions.html)
     */
    public inline fun cfnAnalysisTooltipOptionsProperty(
        block: CfnAnalysisTooltipOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TooltipOptionsProperty {
        val builder = CfnAnalysisTooltipOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `TopBottomFilter` filters values that are at the top or the bottom.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopBottomFilterProperty topBottomFilterProperty = TopBottomFilterProperty.builder()
     * .aggregationSortConfigurations(List.of(AggregationSortConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sortDirection("sortDirection")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build()))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .limit(123)
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html)
     */
    public inline fun cfnAnalysisTopBottomFilterProperty(
        block: CfnAnalysisTopBottomFilterPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TopBottomFilterProperty {
        val builder = CfnAnalysisTopBottomFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The top movers and bottom movers computation setup.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html)
     */
    public inline fun cfnAnalysisTopBottomMoversComputationProperty(
        block: CfnAnalysisTopBottomMoversComputationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TopBottomMoversComputationProperty {
        val builder = CfnAnalysisTopBottomMoversComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The top ranked and bottom ranked computation configuration.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html)
     */
    public inline fun cfnAnalysisTopBottomRankedComputationProperty(
        block: CfnAnalysisTopBottomRankedComputationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TopBottomRankedComputationProperty {
        val builder = CfnAnalysisTopBottomRankedComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The total aggregation computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TotalAggregationComputationProperty totalAggregationComputationProperty =
     * TotalAggregationComputationProperty.builder()
     * .computationId("computationId")
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * // the properties below are optional
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationcomputation.html)
     */
    public inline fun cfnAnalysisTotalAggregationComputationProperty(
        block: CfnAnalysisTotalAggregationComputationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TotalAggregationComputationProperty {
        val builder = CfnAnalysisTotalAggregationComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The total options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TotalOptionsProperty totalOptionsProperty = TotalOptionsProperty.builder()
     * .customLabel("customLabel")
     * .placement("placement")
     * .scrollStatus("scrollStatus")
     * .totalCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .totalsVisibility("totalsVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html)
     */
    public inline fun cfnAnalysisTotalOptionsProperty(
        block: CfnAnalysisTotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TotalOptionsProperty {
        val builder = CfnAnalysisTotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Aggregated field wells of a tree map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisTreeMapAggregatedFieldWellsProperty(
        block: CfnAnalysisTreeMapAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TreeMapAggregatedFieldWellsProperty {
        val builder = CfnAnalysisTreeMapAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a tree map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html)
     */
    public inline fun cfnAnalysisTreeMapConfigurationProperty(
        block: CfnAnalysisTreeMapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TreeMapConfigurationProperty {
        val builder = CfnAnalysisTreeMapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a tree map.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapfieldwells.html)
     */
    public inline fun cfnAnalysisTreeMapFieldWellsProperty(
        block: CfnAnalysisTreeMapFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TreeMapFieldWellsProperty {
        val builder = CfnAnalysisTreeMapFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a tree map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TreeMapSortConfigurationProperty treeMapSortConfigurationProperty =
     * TreeMapSortConfigurationProperty.builder()
     * .treeMapGroupItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .treeMapSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapsortconfiguration.html)
     */
    public inline fun cfnAnalysisTreeMapSortConfigurationProperty(
        block: CfnAnalysisTreeMapSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TreeMapSortConfigurationProperty {
        val builder = CfnAnalysisTreeMapSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A tree map.
     *
     * For more information, see
     * [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html)
     */
    public inline fun cfnAnalysisTreeMapVisualProperty(
        block: CfnAnalysisTreeMapVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TreeMapVisualProperty {
        val builder = CfnAnalysisTreeMapVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of trend arrows in a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TrendArrowOptionsProperty trendArrowOptionsProperty = TrendArrowOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-trendarrowoptions.html)
     */
    public inline fun cfnAnalysisTrendArrowOptionsProperty(
        block: CfnAnalysisTrendArrowOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.TrendArrowOptionsProperty {
        val builder = CfnAnalysisTrendArrowOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The unaggregated field for a table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * UnaggregatedFieldProperty unaggregatedFieldProperty = UnaggregatedFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(FormatConfigurationProperty.builder()
     * .dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .numberFormatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .stringFormatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-unaggregatedfield.html)
     */
    public inline fun cfnAnalysisUnaggregatedFieldProperty(
        block: CfnAnalysisUnaggregatedFieldPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.UnaggregatedFieldProperty {
        val builder = CfnAnalysisUnaggregatedFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The unique values computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * UniqueValuesComputationProperty uniqueValuesComputationProperty =
     * UniqueValuesComputationProperty.builder()
     * .category(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * .computationId("computationId")
     * // the properties below are optional
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-uniquevaluescomputation.html)
     */
    public inline fun cfnAnalysisUniqueValuesComputationProperty(
        block: CfnAnalysisUniqueValuesComputationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.UniqueValuesComputationProperty {
        val builder = CfnAnalysisUniqueValuesComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The range options for the data zoom scroll bar.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisibleRangeOptionsProperty visibleRangeOptionsProperty = VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visiblerangeoptions.html)
     */
    public inline fun cfnAnalysisVisibleRangeOptionsProperty(
        block: CfnAnalysisVisibleRangeOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.VisibleRangeOptionsProperty {
        val builder = CfnAnalysisVisibleRangeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The operation that is defined by the custom action.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualCustomActionOperationProperty visualCustomActionOperationProperty =
     * VisualCustomActionOperationProperty.builder()
     * .filterOperation(CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build())
     * .navigationOperation(CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build())
     * .setParametersOperation(CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build())
     * .urlOperation(CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html)
     */
    public inline fun cfnAnalysisVisualCustomActionOperationProperty(
        block: CfnAnalysisVisualCustomActionOperationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.VisualCustomActionOperationProperty {
        val builder = CfnAnalysisVisualCustomActionOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A custom action defined on a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualCustomActionProperty visualCustomActionProperty = VisualCustomActionProperty.builder()
     * .actionOperations(List.of(VisualCustomActionOperationProperty.builder()
     * .filterOperation(CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build())
     * .navigationOperation(CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build())
     * .setParametersOperation(CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build())
     * .urlOperation(CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build())
     * .build()))
     * .customActionId("customActionId")
     * .name("name")
     * .trigger("trigger")
     * // the properties below are optional
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html)
     */
    public inline fun cfnAnalysisVisualCustomActionProperty(
        block: CfnAnalysisVisualCustomActionPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.VisualCustomActionProperty {
        val builder = CfnAnalysisVisualCustomActionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The visual display options for the visual palette.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualPaletteProperty visualPaletteProperty = VisualPaletteProperty.builder()
     * .chartColor("chartColor")
     * .colorMap(List.of(DataPathColorProperty.builder()
     * .color("color")
     * .element(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build())
     * // the properties below are optional
     * .timeGranularity("timeGranularity")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualpalette.html)
     */
    public inline fun cfnAnalysisVisualPaletteProperty(
        block: CfnAnalysisVisualPalettePropertyDsl.() -> Unit = {}
    ): CfnAnalysis.VisualPaletteProperty {
        val builder = CfnAnalysisVisualPalettePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A visual displayed on a sheet in an analysis, dashboard, or template.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html)
     */
    public inline fun cfnAnalysisVisualProperty(
        block: CfnAnalysisVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.VisualProperty {
        val builder = CfnAnalysisVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The subtitle label options for a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualSubtitleLabelOptionsProperty visualSubtitleLabelOptionsProperty =
     * VisualSubtitleLabelOptionsProperty.builder()
     * .formatText(LongFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build())
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualsubtitlelabeloptions.html)
     */
    public inline fun cfnAnalysisVisualSubtitleLabelOptionsProperty(
        block: CfnAnalysisVisualSubtitleLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.VisualSubtitleLabelOptionsProperty {
        val builder = CfnAnalysisVisualSubtitleLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The title label options for a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualTitleLabelOptionsProperty visualTitleLabelOptionsProperty =
     * VisualTitleLabelOptionsProperty.builder()
     * .formatText(ShortFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build())
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualtitlelabeloptions.html)
     */
    public inline fun cfnAnalysisVisualTitleLabelOptionsProperty(
        block: CfnAnalysisVisualTitleLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.VisualTitleLabelOptionsProperty {
        val builder = CfnAnalysisVisualTitleLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a waterfall visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisWaterfallChartAggregatedFieldWellsProperty(
        block: CfnAnalysisWaterfallChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WaterfallChartAggregatedFieldWellsProperty {
        val builder = CfnAnalysisWaterfallChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a waterfall visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html)
     */
    public inline fun cfnAnalysisWaterfallChartConfigurationProperty(
        block: CfnAnalysisWaterfallChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WaterfallChartConfigurationProperty {
        val builder = CfnAnalysisWaterfallChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a waterfall visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartfieldwells.html)
     */
    public inline fun cfnAnalysisWaterfallChartFieldWellsProperty(
        block: CfnAnalysisWaterfallChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WaterfallChartFieldWellsProperty {
        val builder = CfnAnalysisWaterfallChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of a waterfall visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WaterfallChartOptionsProperty waterfallChartOptionsProperty =
     * WaterfallChartOptionsProperty.builder()
     * .totalBarLabel("totalBarLabel")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartoptions.html)
     */
    public inline fun cfnAnalysisWaterfallChartOptionsProperty(
        block: CfnAnalysisWaterfallChartOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WaterfallChartOptionsProperty {
        val builder = CfnAnalysisWaterfallChartOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a waterfall visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WaterfallChartSortConfigurationProperty waterfallChartSortConfigurationProperty =
     * WaterfallChartSortConfigurationProperty.builder()
     * .breakdownItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartsortconfiguration.html)
     */
    public inline fun cfnAnalysisWaterfallChartSortConfigurationProperty(
        block: CfnAnalysisWaterfallChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WaterfallChartSortConfigurationProperty {
        val builder = CfnAnalysisWaterfallChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A waterfall chart.
     *
     * For more information, see
     * [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html)
     */
    public inline fun cfnAnalysisWaterfallVisualProperty(
        block: CfnAnalysisWaterfallVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WaterfallVisualProperty {
        val builder = CfnAnalysisWaterfallVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Provides the forecast to meet the target for a particular date.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WhatIfPointScenarioProperty whatIfPointScenarioProperty = WhatIfPointScenarioProperty.builder()
     * .date("date")
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifpointscenario.html)
     */
    public inline fun cfnAnalysisWhatIfPointScenarioProperty(
        block: CfnAnalysisWhatIfPointScenarioPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WhatIfPointScenarioProperty {
        val builder = CfnAnalysisWhatIfPointScenarioPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Provides the forecast to meet the target for a particular date range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WhatIfRangeScenarioProperty whatIfRangeScenarioProperty = WhatIfRangeScenarioProperty.builder()
     * .endDate("endDate")
     * .startDate("startDate")
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifrangescenario.html)
     */
    public inline fun cfnAnalysisWhatIfRangeScenarioProperty(
        block: CfnAnalysisWhatIfRangeScenarioPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WhatIfRangeScenarioProperty {
        val builder = CfnAnalysisWhatIfRangeScenarioPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells of a word cloud.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WordCloudAggregatedFieldWellsProperty wordCloudAggregatedFieldWellsProperty =
     * WordCloudAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .size(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudaggregatedfieldwells.html)
     */
    public inline fun cfnAnalysisWordCloudAggregatedFieldWellsProperty(
        block: CfnAnalysisWordCloudAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WordCloudAggregatedFieldWellsProperty {
        val builder = CfnAnalysisWordCloudAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a word cloud visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html)
     */
    public inline fun cfnAnalysisWordCloudChartConfigurationProperty(
        block: CfnAnalysisWordCloudChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WordCloudChartConfigurationProperty {
        val builder = CfnAnalysisWordCloudChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a word cloud visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WordCloudFieldWellsProperty wordCloudFieldWellsProperty = WordCloudFieldWellsProperty.builder()
     * .wordCloudAggregatedFieldWells(WordCloudAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .size(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudfieldwells.html)
     */
    public inline fun cfnAnalysisWordCloudFieldWellsProperty(
        block: CfnAnalysisWordCloudFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WordCloudFieldWellsProperty {
        val builder = CfnAnalysisWordCloudFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The word cloud options for a word cloud visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WordCloudOptionsProperty wordCloudOptionsProperty = WordCloudOptionsProperty.builder()
     * .cloudLayout("cloudLayout")
     * .maximumStringLength(123)
     * .wordCasing("wordCasing")
     * .wordOrientation("wordOrientation")
     * .wordPadding("wordPadding")
     * .wordScaling("wordScaling")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html)
     */
    public inline fun cfnAnalysisWordCloudOptionsProperty(
        block: CfnAnalysisWordCloudOptionsPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WordCloudOptionsProperty {
        val builder = CfnAnalysisWordCloudOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a word cloud visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WordCloudSortConfigurationProperty wordCloudSortConfigurationProperty =
     * WordCloudSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudsortconfiguration.html)
     */
    public inline fun cfnAnalysisWordCloudSortConfigurationProperty(
        block: CfnAnalysisWordCloudSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WordCloudSortConfigurationProperty {
        val builder = CfnAnalysisWordCloudSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A word cloud.
     *
     * For more information, see
     * [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html)
     */
    public inline fun cfnAnalysisWordCloudVisualProperty(
        block: CfnAnalysisWordCloudVisualPropertyDsl.() -> Unit = {}
    ): CfnAnalysis.WordCloudVisualProperty {
        val builder = CfnAnalysisWordCloudVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Creates a dashboard from a template. To first create a template, see the `CreateTemplate` API
     * operation.
     *
     * A dashboard is an entity in Amazon QuickSight that identifies Amazon QuickSight reports,
     * created from analyses. You can share Amazon QuickSight dashboards. With the right
     * permissions, you can create scheduled email reports from them. If you have the correct
     * permissions, you can create a dashboard from a template that exists in a different AWS
     * account .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html)
     */
    public inline fun cfnDashboard(
        scope: Construct,
        id: String,
        block: CfnDashboardDsl.() -> Unit = {},
    ): CfnDashboard {
        val builder = CfnDashboardDsl(scope, id)
        builder.apply(block)
        return builder.build()
    }

    /**
     * An ad hoc (one-time) filtering option.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AdHocFilteringOptionProperty adHocFilteringOptionProperty =
     * AdHocFilteringOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-adhocfilteringoption.html)
     */
    public inline fun cfnDashboardAdHocFilteringOptionProperty(
        block: CfnDashboardAdHocFilteringOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.AdHocFilteringOptionProperty {
        val builder = CfnDashboardAdHocFilteringOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An aggregation function aggregates values from a dimension or measure.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AggregationFunctionProperty aggregationFunctionProperty = AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-aggregationfunction.html)
     */
    public inline fun cfnDashboardAggregationFunctionProperty(
        block: CfnDashboardAggregationFunctionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.AggregationFunctionProperty {
        val builder = CfnDashboardAggregationFunctionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration options to sort aggregated values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AggregationSortConfigurationProperty aggregationSortConfigurationProperty =
     * AggregationSortConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sortDirection("sortDirection")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-aggregationsortconfiguration.html)
     */
    public inline fun cfnDashboardAggregationSortConfigurationProperty(
        block: CfnDashboardAggregationSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.AggregationSortConfigurationProperty {
        val builder = CfnDashboardAggregationSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for default analysis settings.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AnalysisDefaultsProperty analysisDefaultsProperty = AnalysisDefaultsProperty.builder()
     * .defaultNewSheetConfiguration(DefaultNewSheetConfigurationProperty.builder()
     * .interactiveLayoutConfiguration(DefaultInteractiveLayoutConfigurationProperty.builder()
     * .freeForm(DefaultFreeFormLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .grid(DefaultGridLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build())
     * .paginatedLayoutConfiguration(DefaultPaginatedLayoutConfigurationProperty.builder()
     * .sectionBased(DefaultSectionBasedLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .build())
     * .build())
     * .sheetContentType("sheetContentType")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-analysisdefaults.html)
     */
    public inline fun cfnDashboardAnalysisDefaultsProperty(
        block: CfnDashboardAnalysisDefaultsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.AnalysisDefaultsProperty {
        val builder = CfnDashboardAnalysisDefaultsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The date configuration of the filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AnchorDateConfigurationProperty anchorDateConfigurationProperty =
     * AnchorDateConfigurationProperty.builder()
     * .anchorOption("anchorOption")
     * .parameterName("parameterName")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-anchordateconfiguration.html)
     */
    public inline fun cfnDashboardAnchorDateConfigurationProperty(
        block: CfnDashboardAnchorDateConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.AnchorDateConfigurationProperty {
        val builder = CfnDashboardAnchorDateConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The arc axis configuration of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ArcAxisConfigurationProperty arcAxisConfigurationProperty =
     * ArcAxisConfigurationProperty.builder()
     * .range(ArcAxisDisplayRangeProperty.builder()
     * .max(123)
     * .min(123)
     * .build())
     * .reserveRange(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcaxisconfiguration.html)
     */
    public inline fun cfnDashboardArcAxisConfigurationProperty(
        block: CfnDashboardArcAxisConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ArcAxisConfigurationProperty {
        val builder = CfnDashboardArcAxisConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The arc axis range of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ArcAxisDisplayRangeProperty arcAxisDisplayRangeProperty = ArcAxisDisplayRangeProperty.builder()
     * .max(123)
     * .min(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcaxisdisplayrange.html)
     */
    public inline fun cfnDashboardArcAxisDisplayRangeProperty(
        block: CfnDashboardArcAxisDisplayRangePropertyDsl.() -> Unit = {}
    ): CfnDashboard.ArcAxisDisplayRangeProperty {
        val builder = CfnDashboardArcAxisDisplayRangePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The arc configuration of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ArcConfigurationProperty arcConfigurationProperty = ArcConfigurationProperty.builder()
     * .arcAngle(123)
     * .arcThickness("arcThickness")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcconfiguration.html)
     */
    public inline fun cfnDashboardArcConfigurationProperty(
        block: CfnDashboardArcConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ArcConfigurationProperty {
        val builder = CfnDashboardArcConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the arc thickness of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ArcOptionsProperty arcOptionsProperty = ArcOptionsProperty.builder()
     * .arcThickness("arcThickness")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcoptions.html)
     */
    public inline fun cfnDashboardArcOptionsProperty(
        block: CfnDashboardArcOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ArcOptionsProperty {
        val builder = CfnDashboardArcOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data options for an axis.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * AxisDataOptionsProperty axisDataOptionsProperty = AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdataoptions.html)
     */
    public inline fun cfnDashboardAxisDataOptionsProperty(
        block: CfnDashboardAxisDataOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.AxisDataOptionsProperty {
        val builder = CfnDashboardAxisDataOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The minimum and maximum setup for an axis display range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisDisplayMinMaxRangeProperty axisDisplayMinMaxRangeProperty =
     * AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayminmaxrange.html)
     */
    public inline fun cfnDashboardAxisDisplayMinMaxRangeProperty(
        block: CfnDashboardAxisDisplayMinMaxRangePropertyDsl.() -> Unit = {}
    ): CfnDashboard.AxisDisplayMinMaxRangeProperty {
        val builder = CfnDashboardAxisDisplayMinMaxRangePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options for the axis label.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * AxisDisplayOptionsProperty axisDisplayOptionsProperty = AxisDisplayOptionsProperty.builder()
     * .axisLineVisibility("axisLineVisibility")
     * .axisOffset("axisOffset")
     * .dataOptions(AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build())
     * .gridLineVisibility("gridLineVisibility")
     * .scrollbarOptions(ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build())
     * .tickLabelOptions(AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayoptions.html)
     */
    public inline fun cfnDashboardAxisDisplayOptionsProperty(
        block: CfnDashboardAxisDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.AxisDisplayOptionsProperty {
        val builder = CfnDashboardAxisDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The range setup of a numeric axis display range.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * AxisDisplayRangeProperty axisDisplayRangeProperty = AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayrange.html)
     */
    public inline fun cfnDashboardAxisDisplayRangeProperty(
        block: CfnDashboardAxisDisplayRangePropertyDsl.() -> Unit = {}
    ): CfnDashboard.AxisDisplayRangeProperty {
        val builder = CfnDashboardAxisDisplayRangePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The label options for a chart axis.
     *
     * You must specify the field that the label is targeted to.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisLabelOptionsProperty axisLabelOptionsProperty = AxisLabelOptionsProperty.builder()
     * .applyTo(AxisLabelReferenceOptionsProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * .build())
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislabeloptions.html)
     */
    public inline fun cfnDashboardAxisLabelOptionsProperty(
        block: CfnDashboardAxisLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.AxisLabelOptionsProperty {
        val builder = CfnDashboardAxisLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The reference that specifies where the axis label is applied to.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisLabelReferenceOptionsProperty axisLabelReferenceOptionsProperty =
     * AxisLabelReferenceOptionsProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislabelreferenceoptions.html)
     */
    public inline fun cfnDashboardAxisLabelReferenceOptionsProperty(
        block: CfnDashboardAxisLabelReferenceOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.AxisLabelReferenceOptionsProperty {
        val builder = CfnDashboardAxisLabelReferenceOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The liner axis scale setup.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisLinearScaleProperty axisLinearScaleProperty = AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislinearscale.html)
     */
    public inline fun cfnDashboardAxisLinearScaleProperty(
        block: CfnDashboardAxisLinearScalePropertyDsl.() -> Unit = {}
    ): CfnDashboard.AxisLinearScaleProperty {
        val builder = CfnDashboardAxisLinearScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The logarithmic axis scale setup.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisLogarithmicScaleProperty axisLogarithmicScaleProperty =
     * AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislogarithmicscale.html)
     */
    public inline fun cfnDashboardAxisLogarithmicScaleProperty(
        block: CfnDashboardAxisLogarithmicScalePropertyDsl.() -> Unit = {}
    ): CfnDashboard.AxisLogarithmicScaleProperty {
        val builder = CfnDashboardAxisLogarithmicScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The scale setup options for a numeric axis display.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisScaleProperty axisScaleProperty = AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisscale.html)
     */
    public inline fun cfnDashboardAxisScaleProperty(
        block: CfnDashboardAxisScalePropertyDsl.() -> Unit = {}
    ): CfnDashboard.AxisScaleProperty {
        val builder = CfnDashboardAxisScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The tick label options of an axis.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisTickLabelOptionsProperty axisTickLabelOptionsProperty =
     * AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisticklabeloptions.html)
     */
    public inline fun cfnDashboardAxisTickLabelOptionsProperty(
        block: CfnDashboardAxisTickLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.AxisTickLabelOptionsProperty {
        val builder = CfnDashboardAxisTickLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells of a bar chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardBarChartAggregatedFieldWellsProperty(
        block: CfnDashboardBarChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BarChartAggregatedFieldWellsProperty {
        val builder = CfnDashboardBarChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `BarChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html)
     */
    public inline fun cfnDashboardBarChartConfigurationProperty(
        block: CfnDashboardBarChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BarChartConfigurationProperty {
        val builder = CfnDashboardBarChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a `BarChartVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartfieldwells.html)
     */
    public inline fun cfnDashboardBarChartFieldWellsProperty(
        block: CfnDashboardBarChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BarChartFieldWellsProperty {
        val builder = CfnDashboardBarChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * sort-configuration-description.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BarChartSortConfigurationProperty barChartSortConfigurationProperty =
     * BarChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .colorItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .colorSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .smallMultiplesSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartsortconfiguration.html)
     */
    public inline fun cfnDashboardBarChartSortConfigurationProperty(
        block: CfnDashboardBarChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BarChartSortConfigurationProperty {
        val builder = CfnDashboardBarChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A bar chart.
     *
     * The `BarChartVisual` structure describes a visual that is a member of the bar chart family.
     * The following charts can be described using this structure:
     * * Horizontal bar chart
     * * Vertical bar chart
     * * Horizontal stacked bar chart
     * * Vertical stacked bar chart
     * * Horizontal stacked 100% bar chart
     * * Vertical stacked 100% bar chart
     *
     * For more information, see
     * [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartvisual.html)
     */
    public inline fun cfnDashboardBarChartVisualProperty(
        block: CfnDashboardBarChartVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BarChartVisualProperty {
        val builder = CfnDashboardBarChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the bin count of a histogram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BinCountOptionsProperty binCountOptionsProperty = BinCountOptionsProperty.builder()
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-bincountoptions.html)
     */
    public inline fun cfnDashboardBinCountOptionsProperty(
        block: CfnDashboardBinCountOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BinCountOptionsProperty {
        val builder = CfnDashboardBinCountOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the bin width of a histogram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BinWidthOptionsProperty binWidthOptionsProperty = BinWidthOptionsProperty.builder()
     * .binCountLimit(123)
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-binwidthoptions.html)
     */
    public inline fun cfnDashboardBinWidthOptionsProperty(
        block: CfnDashboardBinWidthOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BinWidthOptionsProperty {
        val builder = CfnDashboardBinWidthOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a body section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BodySectionConfigurationProperty bodySectionConfigurationProperty =
     * BodySectionConfigurationProperty.builder()
     * .content(BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .pageBreakConfiguration(SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build())
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-bodysectionconfiguration.html)
     */
    public inline fun cfnDashboardBodySectionConfigurationProperty(
        block: CfnDashboardBodySectionConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BodySectionConfigurationProperty {
        val builder = CfnDashboardBodySectionConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of content in a body section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BodySectionContentProperty bodySectionContentProperty = BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-bodysectioncontent.html)
     */
    public inline fun cfnDashboardBodySectionContentProperty(
        block: CfnDashboardBodySectionContentPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BodySectionContentProperty {
        val builder = CfnDashboardBodySectionContentPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well for a box plot.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotAggregatedFieldWellsProperty boxPlotAggregatedFieldWellsProperty =
     * BoxPlotAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardBoxPlotAggregatedFieldWellsProperty(
        block: CfnDashboardBoxPlotAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BoxPlotAggregatedFieldWellsProperty {
        val builder = CfnDashboardBoxPlotAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `BoxPlotVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html)
     */
    public inline fun cfnDashboardBoxPlotChartConfigurationProperty(
        block: CfnDashboardBoxPlotChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BoxPlotChartConfigurationProperty {
        val builder = CfnDashboardBoxPlotChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a `BoxPlotVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotFieldWellsProperty boxPlotFieldWellsProperty = BoxPlotFieldWellsProperty.builder()
     * .boxPlotAggregatedFieldWells(BoxPlotAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotfieldwells.html)
     */
    public inline fun cfnDashboardBoxPlotFieldWellsProperty(
        block: CfnDashboardBoxPlotFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BoxPlotFieldWellsProperty {
        val builder = CfnDashboardBoxPlotFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options of a box plot visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotOptionsProperty boxPlotOptionsProperty = BoxPlotOptionsProperty.builder()
     * .allDataPointsVisibility("allDataPointsVisibility")
     * .outlierVisibility("outlierVisibility")
     * .styleOptions(BoxPlotStyleOptionsProperty.builder()
     * .fillStyle("fillStyle")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotoptions.html)
     */
    public inline fun cfnDashboardBoxPlotOptionsProperty(
        block: CfnDashboardBoxPlotOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BoxPlotOptionsProperty {
        val builder = CfnDashboardBoxPlotOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `BoxPlotVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotSortConfigurationProperty boxPlotSortConfigurationProperty =
     * BoxPlotSortConfigurationProperty.builder()
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .paginationConfiguration(PaginationConfigurationProperty.builder()
     * .pageNumber(123)
     * .pageSize(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotsortconfiguration.html)
     */
    public inline fun cfnDashboardBoxPlotSortConfigurationProperty(
        block: CfnDashboardBoxPlotSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BoxPlotSortConfigurationProperty {
        val builder = CfnDashboardBoxPlotSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The style options of the box plot.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotStyleOptionsProperty boxPlotStyleOptionsProperty = BoxPlotStyleOptionsProperty.builder()
     * .fillStyle("fillStyle")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotstyleoptions.html)
     */
    public inline fun cfnDashboardBoxPlotStyleOptionsProperty(
        block: CfnDashboardBoxPlotStyleOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BoxPlotStyleOptionsProperty {
        val builder = CfnDashboardBoxPlotStyleOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A box plot.
     *
     * For more information, see
     * [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotvisual.html)
     */
    public inline fun cfnDashboardBoxPlotVisualProperty(
        block: CfnDashboardBoxPlotVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.BoxPlotVisualProperty {
        val builder = CfnDashboardBoxPlotVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The calculated field of an analysis.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CalculatedFieldProperty calculatedFieldProperty = CalculatedFieldProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .expression("expression")
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-calculatedfield.html)
     */
    public inline fun cfnDashboardCalculatedFieldProperty(
        block: CfnDashboardCalculatedFieldPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CalculatedFieldProperty {
        val builder = CfnDashboardCalculatedFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The table calculation measure field for pivot tables.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CalculatedMeasureFieldProperty calculatedMeasureFieldProperty =
     * CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-calculatedmeasurefield.html)
     */
    public inline fun cfnDashboardCalculatedMeasureFieldProperty(
        block: CfnDashboardCalculatedMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CalculatedMeasureFieldProperty {
        val builder = CfnDashboardCalculatedMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The values that are displayed in a control can be configured to only show values that are
     * valid based on what's selected in other controls.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CascadingControlConfigurationProperty cascadingControlConfigurationProperty =
     * CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-cascadingcontrolconfiguration.html)
     */
    public inline fun cfnDashboardCascadingControlConfigurationProperty(
        block: CfnDashboardCascadingControlConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CascadingControlConfigurationProperty {
        val builder = CfnDashboardCascadingControlConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The source controls that are used in a `CascadingControlConfiguration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CascadingControlSourceProperty cascadingControlSourceProperty =
     * CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-cascadingcontrolsource.html)
     */
    public inline fun cfnDashboardCascadingControlSourceProperty(
        block: CfnDashboardCascadingControlSourcePropertyDsl.() -> Unit = {}
    ): CfnDashboard.CascadingControlSourceProperty {
        val builder = CfnDashboardCascadingControlSourcePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dimension type field with categorical type columns..
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoricalDimensionFieldProperty categoricalDimensionFieldProperty =
     * CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoricaldimensionfield.html)
     */
    public inline fun cfnDashboardCategoricalDimensionFieldProperty(
        block: CfnDashboardCategoricalDimensionFieldPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CategoricalDimensionFieldProperty {
        val builder = CfnDashboardCategoricalDimensionFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The measure type field with categorical type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoricalMeasureFieldProperty categoricalMeasureFieldProperty =
     * CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoricalmeasurefield.html)
     */
    public inline fun cfnDashboardCategoricalMeasureFieldProperty(
        block: CfnDashboardCategoricalMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CategoricalMeasureFieldProperty {
        val builder = CfnDashboardCategoricalMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The numeric equality type drill down filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoryDrillDownFilterProperty categoryDrillDownFilterProperty =
     * CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categorydrilldownfilter.html)
     */
    public inline fun cfnDashboardCategoryDrillDownFilterProperty(
        block: CfnDashboardCategoryDrillDownFilterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CategoryDrillDownFilterProperty {
        val builder = CfnDashboardCategoryDrillDownFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `CategoryFilter` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoryFilterConfigurationProperty categoryFilterConfigurationProperty =
     * CategoryFilterConfigurationProperty.builder()
     * .customFilterConfiguration(CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .customFilterListConfiguration(CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .filterListConfiguration(FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoryfilterconfiguration.html)
     */
    public inline fun cfnDashboardCategoryFilterConfigurationProperty(
        block: CfnDashboardCategoryFilterConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CategoryFilterConfigurationProperty {
        val builder = CfnDashboardCategoryFilterConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `CategoryFilter` filters text values.
     *
     * For more information, see
     * [Adding text filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoryFilterProperty categoryFilterProperty = CategoryFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .configuration(CategoryFilterConfigurationProperty.builder()
     * .customFilterConfiguration(CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .customFilterListConfiguration(CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .filterListConfiguration(FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .build())
     * .filterId("filterId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoryfilter.html)
     */
    public inline fun cfnDashboardCategoryFilterProperty(
        block: CfnDashboardCategoryFilterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CategoryFilterProperty {
        val builder = CfnDashboardCategoryFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The label options for an axis on a chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ChartAxisLabelOptionsProperty chartAxisLabelOptionsProperty =
     * ChartAxisLabelOptionsProperty.builder()
     * .axisLabelOptions(List.of(AxisLabelOptionsProperty.builder()
     * .applyTo(AxisLabelReferenceOptionsProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * .build())
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .build()))
     * .sortIconVisibility("sortIconVisibility")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-chartaxislabeloptions.html)
     */
    public inline fun cfnDashboardChartAxisLabelOptionsProperty(
        block: CfnDashboardChartAxisLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ChartAxisLabelOptionsProperty {
        val builder = CfnDashboardChartAxisLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The cluster marker configuration of the geospatial map selected point style.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ClusterMarkerConfigurationProperty clusterMarkerConfigurationProperty =
     * ClusterMarkerConfigurationProperty.builder()
     * .clusterMarker(ClusterMarkerProperty.builder()
     * .simpleClusterMarker(SimpleClusterMarkerProperty.builder()
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-clustermarkerconfiguration.html)
     */
    public inline fun cfnDashboardClusterMarkerConfigurationProperty(
        block: CfnDashboardClusterMarkerConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ClusterMarkerConfigurationProperty {
        val builder = CfnDashboardClusterMarkerConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The cluster marker that is a part of the cluster marker configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ClusterMarkerProperty clusterMarkerProperty = ClusterMarkerProperty.builder()
     * .simpleClusterMarker(SimpleClusterMarkerProperty.builder()
     * .color("color")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-clustermarker.html)
     */
    public inline fun cfnDashboardClusterMarkerProperty(
        block: CfnDashboardClusterMarkerPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ClusterMarkerProperty {
        val builder = CfnDashboardClusterMarkerPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the color scale that is applied to the visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColorScaleProperty colorScaleProperty = ColorScaleProperty.builder()
     * .colorFillType("colorFillType")
     * .colors(List.of(DataColorProperty.builder()
     * .color("color")
     * .dataValue(123)
     * .build()))
     * // the properties below are optional
     * .nullValueColor(DataColorProperty.builder()
     * .color("color")
     * .dataValue(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-colorscale.html)
     */
    public inline fun cfnDashboardColorScaleProperty(
        block: CfnDashboardColorScalePropertyDsl.() -> Unit = {}
    ): CfnDashboard.ColorScaleProperty {
        val builder = CfnDashboardColorScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The general configuration of a column.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnConfigurationProperty columnConfigurationProperty = ColumnConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .formatConfiguration(FormatConfigurationProperty.builder()
     * .dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .numberFormatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .stringFormatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .role("role")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnconfiguration.html)
     */
    public inline fun cfnDashboardColumnConfigurationProperty(
        block: CfnDashboardColumnConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ColumnConfigurationProperty {
        val builder = CfnDashboardColumnConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the hierarchy of the fields for a visual element.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnHierarchyProperty columnHierarchyProperty = ColumnHierarchyProperty.builder()
     * .dateTimeHierarchy(DateTimeHierarchyProperty.builder()
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build())
     * .explicitHierarchy(ExplicitHierarchyProperty.builder()
     * .columns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build())
     * .predefinedHierarchy(PredefinedHierarchyProperty.builder()
     * .columns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnhierarchy.html)
     */
    public inline fun cfnDashboardColumnHierarchyProperty(
        block: CfnDashboardColumnHierarchyPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ColumnHierarchyProperty {
        val builder = CfnDashboardColumnHierarchyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A column of a data set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnIdentifierProperty columnIdentifierProperty = ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnidentifier.html)
     */
    public inline fun cfnDashboardColumnIdentifierProperty(
        block: CfnDashboardColumnIdentifierPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ColumnIdentifierProperty {
        val builder = CfnDashboardColumnIdentifierPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration for a column that is not used in a field well.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnSortProperty columnSortProperty = ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnsort.html)
     */
    public inline fun cfnDashboardColumnSortProperty(
        block: CfnDashboardColumnSortPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ColumnSortProperty {
        val builder = CfnDashboardColumnSortPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The tooltip item for the columns that are not part of a field well.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnTooltipItemProperty columnTooltipItemProperty = ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columntooltipitem.html)
     */
    public inline fun cfnDashboardColumnTooltipItemProperty(
        block: CfnDashboardColumnTooltipItemPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ColumnTooltipItemProperty {
        val builder = CfnDashboardColumnTooltipItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells of a combo chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardComboChartAggregatedFieldWellsProperty(
        block: CfnDashboardComboChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ComboChartAggregatedFieldWellsProperty {
        val builder = CfnDashboardComboChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `ComboChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html)
     */
    public inline fun cfnDashboardComboChartConfigurationProperty(
        block: CfnDashboardComboChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ComboChartConfigurationProperty {
        val builder = CfnDashboardComboChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of the visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartfieldwells.html)
     */
    public inline fun cfnDashboardComboChartFieldWellsProperty(
        block: CfnDashboardComboChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ComboChartFieldWellsProperty {
        val builder = CfnDashboardComboChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `ComboChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ComboChartSortConfigurationProperty comboChartSortConfigurationProperty =
     * ComboChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .colorItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .colorSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartsortconfiguration.html)
     */
    public inline fun cfnDashboardComboChartSortConfigurationProperty(
        block: CfnDashboardComboChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ComboChartSortConfigurationProperty {
        val builder = CfnDashboardComboChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A combo chart.
     *
     * The `ComboChartVisual` includes stacked bar combo charts and clustered bar combo charts
     *
     * For more information, see
     * [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartvisual.html)
     */
    public inline fun cfnDashboardComboChartVisualProperty(
        block: CfnDashboardComboChartVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ComboChartVisualProperty {
        val builder = CfnDashboardComboChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The comparison display configuration of a KPI or gauge chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ComparisonConfigurationProperty comparisonConfigurationProperty =
     * ComparisonConfigurationProperty.builder()
     * .comparisonFormat(ComparisonFormatConfigurationProperty.builder()
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .comparisonMethod("comparisonMethod")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-comparisonconfiguration.html)
     */
    public inline fun cfnDashboardComparisonConfigurationProperty(
        block: CfnDashboardComparisonConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ComparisonConfigurationProperty {
        val builder = CfnDashboardComparisonConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The format of the comparison.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ComparisonFormatConfigurationProperty comparisonFormatConfigurationProperty =
     * ComparisonFormatConfigurationProperty.builder()
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-comparisonformatconfiguration.html)
     */
    public inline fun cfnDashboardComparisonFormatConfigurationProperty(
        block: CfnDashboardComparisonFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ComparisonFormatConfigurationProperty {
        val builder = CfnDashboardComparisonFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The computation union that is used in an insight visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-computation.html)
     */
    public inline fun cfnDashboardComputationProperty(
        block: CfnDashboardComputationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ComputationProperty {
        val builder = CfnDashboardComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The formatting configuration for the color.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingColorProperty conditionalFormattingColorProperty =
     * ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcolor.html)
     */
    public inline fun cfnDashboardConditionalFormattingColorProperty(
        block: CfnDashboardConditionalFormattingColorPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ConditionalFormattingColorProperty {
        val builder = CfnDashboardConditionalFormattingColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the custom condition for an icon set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingCustomIconConditionProperty
     * conditionalFormattingCustomIconConditionProperty =
     * ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcustomiconcondition.html)
     */
    public inline fun cfnDashboardConditionalFormattingCustomIconConditionProperty(
        block: CfnDashboardConditionalFormattingCustomIconConditionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ConditionalFormattingCustomIconConditionProperty {
        val builder = CfnDashboardConditionalFormattingCustomIconConditionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Custom icon options for an icon set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingCustomIconOptionsProperty conditionalFormattingCustomIconOptionsProperty =
     * ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcustomiconoptions.html)
     */
    public inline fun cfnDashboardConditionalFormattingCustomIconOptionsProperty(
        block: CfnDashboardConditionalFormattingCustomIconOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ConditionalFormattingCustomIconOptionsProperty {
        val builder = CfnDashboardConditionalFormattingCustomIconOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for gradient color.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingGradientColorProperty conditionalFormattingGradientColorProperty =
     * ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattinggradientcolor.html)
     */
    public inline fun cfnDashboardConditionalFormattingGradientColorProperty(
        block: CfnDashboardConditionalFormattingGradientColorPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ConditionalFormattingGradientColorProperty {
        val builder = CfnDashboardConditionalFormattingGradientColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the icon display configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingIconDisplayConfigurationProperty
     * conditionalFormattingIconDisplayConfigurationProperty =
     * ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingicondisplayconfiguration.html)
     */
    public inline fun cfnDashboardConditionalFormattingIconDisplayConfigurationProperty(
        block: CfnDashboardConditionalFormattingIconDisplayConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ConditionalFormattingIconDisplayConfigurationProperty {
        val builder = CfnDashboardConditionalFormattingIconDisplayConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The formatting configuration for the icon.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingIconProperty conditionalFormattingIconProperty =
     * ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingicon.html)
     */
    public inline fun cfnDashboardConditionalFormattingIconProperty(
        block: CfnDashboardConditionalFormattingIconPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ConditionalFormattingIconProperty {
        val builder = CfnDashboardConditionalFormattingIconPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for icon set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingIconSetProperty conditionalFormattingIconSetProperty =
     * ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingiconset.html)
     */
    public inline fun cfnDashboardConditionalFormattingIconSetProperty(
        block: CfnDashboardConditionalFormattingIconSetPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ConditionalFormattingIconSetProperty {
        val builder = CfnDashboardConditionalFormattingIconSetPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for solid color.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingSolidColorProperty conditionalFormattingSolidColorProperty =
     * ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingsolidcolor.html)
     */
    public inline fun cfnDashboardConditionalFormattingSolidColorProperty(
        block: CfnDashboardConditionalFormattingSolidColorPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ConditionalFormattingSolidColorProperty {
        val builder = CfnDashboardConditionalFormattingSolidColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The contribution analysis visual display for a line, pie, or bar chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ContributionAnalysisDefaultProperty contributionAnalysisDefaultProperty =
     * ContributionAnalysisDefaultProperty.builder()
     * .contributorDimensions(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .measureFieldId("measureFieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-contributionanalysisdefault.html)
     */
    public inline fun cfnDashboardContributionAnalysisDefaultProperty(
        block: CfnDashboardContributionAnalysisDefaultPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ContributionAnalysisDefaultProperty {
        val builder = CfnDashboardContributionAnalysisDefaultPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the currency display format configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CurrencyDisplayFormatConfigurationProperty currencyDisplayFormatConfigurationProperty =
     * CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-currencydisplayformatconfiguration.html)
     */
    public inline fun cfnDashboardCurrencyDisplayFormatConfigurationProperty(
        block: CfnDashboardCurrencyDisplayFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CurrencyDisplayFormatConfigurationProperty {
        val builder = CfnDashboardCurrencyDisplayFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The filter operation that filters data included in a visual or in an entire sheet.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomActionFilterOperationProperty customActionFilterOperationProperty =
     * CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionfilteroperation.html)
     */
    public inline fun cfnDashboardCustomActionFilterOperationProperty(
        block: CfnDashboardCustomActionFilterOperationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CustomActionFilterOperationProperty {
        val builder = CfnDashboardCustomActionFilterOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The navigation operation that navigates between different sheets in the same analysis.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomActionNavigationOperationProperty customActionNavigationOperationProperty =
     * CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionnavigationoperation.html)
     */
    public inline fun cfnDashboardCustomActionNavigationOperationProperty(
        block: CfnDashboardCustomActionNavigationOperationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CustomActionNavigationOperationProperty {
        val builder = CfnDashboardCustomActionNavigationOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The set parameter operation that sets parameters in custom action.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomActionSetParametersOperationProperty customActionSetParametersOperationProperty =
     * CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionsetparametersoperation.html)
     */
    public inline fun cfnDashboardCustomActionSetParametersOperationProperty(
        block: CfnDashboardCustomActionSetParametersOperationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CustomActionSetParametersOperationProperty {
        val builder = CfnDashboardCustomActionSetParametersOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The URL operation that opens a link to another webpage.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomActionURLOperationProperty customActionURLOperationProperty =
     * CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionurloperation.html)
     */
    public inline fun cfnDashboardCustomActionURLOperationProperty(
        block: CfnDashboardCustomActionURLOperationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CustomActionURLOperationProperty {
        val builder = CfnDashboardCustomActionURLOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `CustomContentVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomContentConfigurationProperty customContentConfigurationProperty =
     * CustomContentConfigurationProperty.builder()
     * .contentType("contentType")
     * .contentUrl("contentUrl")
     * .imageScaling("imageScaling")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentconfiguration.html)
     */
    public inline fun cfnDashboardCustomContentConfigurationProperty(
        block: CfnDashboardCustomContentConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CustomContentConfigurationProperty {
        val builder = CfnDashboardCustomContentConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A visual that contains custom content.
     *
     * For more information, see
     * [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomContentVisualProperty customContentVisualProperty = CustomContentVisualProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .visualId("visualId")
     * // the properties below are optional
     * .actions(List.of(VisualCustomActionProperty.builder()
     * .actionOperations(List.of(VisualCustomActionOperationProperty.builder()
     * .filterOperation(CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build())
     * .navigationOperation(CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build())
     * .setParametersOperation(CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build())
     * .urlOperation(CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build())
     * .build()))
     * .customActionId("customActionId")
     * .name("name")
     * .trigger("trigger")
     * // the properties below are optional
     * .status("status")
     * .build()))
     * .chartConfiguration(CustomContentConfigurationProperty.builder()
     * .contentType("contentType")
     * .contentUrl("contentUrl")
     * .imageScaling("imageScaling")
     * .build())
     * .subtitle(VisualSubtitleLabelOptionsProperty.builder()
     * .formatText(LongFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build())
     * .visibility("visibility")
     * .build())
     * .title(VisualTitleLabelOptionsProperty.builder()
     * .formatText(ShortFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentvisual.html)
     */
    public inline fun cfnDashboardCustomContentVisualProperty(
        block: CfnDashboardCustomContentVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CustomContentVisualProperty {
        val builder = CfnDashboardCustomContentVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A custom filter that filters based on a single value.
     *
     * This filter can be partially matched.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomFilterConfigurationProperty customFilterConfigurationProperty =
     * CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterconfiguration.html)
     */
    public inline fun cfnDashboardCustomFilterConfigurationProperty(
        block: CfnDashboardCustomFilterConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CustomFilterConfigurationProperty {
        val builder = CfnDashboardCustomFilterConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of custom filter values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomFilterListConfigurationProperty customFilterListConfigurationProperty =
     * CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterlistconfiguration.html)
     */
    public inline fun cfnDashboardCustomFilterListConfigurationProperty(
        block: CfnDashboardCustomFilterListConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CustomFilterListConfigurationProperty {
        val builder = CfnDashboardCustomFilterListConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The custom narrative options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomNarrativeOptionsProperty customNarrativeOptionsProperty =
     * CustomNarrativeOptionsProperty.builder()
     * .narrative("narrative")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customnarrativeoptions.html)
     */
    public inline fun cfnDashboardCustomNarrativeOptionsProperty(
        block: CfnDashboardCustomNarrativeOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CustomNarrativeOptionsProperty {
        val builder = CfnDashboardCustomNarrativeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The customized parameter values.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomParameterValuesProperty customParameterValuesProperty =
     * CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customparametervalues.html)
     */
    public inline fun cfnDashboardCustomParameterValuesProperty(
        block: CfnDashboardCustomParameterValuesPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CustomParameterValuesProperty {
        val builder = CfnDashboardCustomParameterValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of custom values for the destination parameter in
     * `DestinationParameterValueConfiguration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomValuesConfigurationProperty customValuesConfigurationProperty =
     * CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customvaluesconfiguration.html)
     */
    public inline fun cfnDashboardCustomValuesConfigurationProperty(
        block: CfnDashboardCustomValuesConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.CustomValuesConfigurationProperty {
        val builder = CfnDashboardCustomValuesConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Dashboard error.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DashboardErrorProperty dashboardErrorProperty = DashboardErrorProperty.builder()
     * .message("message")
     * .type("type")
     * .violatedEntities(List.of(EntityProperty.builder()
     * .path("path")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboarderror.html)
     */
    public inline fun cfnDashboardDashboardErrorProperty(
        block: CfnDashboardDashboardErrorPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DashboardErrorProperty {
        val builder = CfnDashboardDashboardErrorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Dashboard publish options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DashboardPublishOptionsProperty dashboardPublishOptionsProperty =
     * DashboardPublishOptionsProperty.builder()
     * .adHocFilteringOption(AdHocFilteringOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build())
     * .dataPointDrillUpDownOption(DataPointDrillUpDownOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build())
     * .dataPointMenuLabelOption(DataPointMenuLabelOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build())
     * .dataPointTooltipOption(DataPointTooltipOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build())
     * .exportToCsvOption(ExportToCSVOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build())
     * .exportWithHiddenFieldsOption(ExportWithHiddenFieldsOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build())
     * .sheetControlsOption(SheetControlsOptionProperty.builder()
     * .visibilityState("visibilityState")
     * .build())
     * .sheetLayoutElementMaximizationOption(SheetLayoutElementMaximizationOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build())
     * .visualAxisSortOption(VisualAxisSortOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build())
     * .visualMenuOption(VisualMenuOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build())
     * .visualPublishOptions(DashboardVisualPublishOptionsProperty.builder()
     * .exportHiddenFieldsOption(ExportHiddenFieldsOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html)
     */
    public inline fun cfnDashboardDashboardPublishOptionsProperty(
        block: CfnDashboardDashboardPublishOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DashboardPublishOptionsProperty {
        val builder = CfnDashboardDashboardPublishOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Dashboard source entity.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DashboardSourceEntityProperty dashboardSourceEntityProperty =
     * DashboardSourceEntityProperty.builder()
     * .sourceTemplate(DashboardSourceTemplateProperty.builder()
     * .arn("arn")
     * .dataSetReferences(List.of(DataSetReferenceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .dataSetPlaceholder("dataSetPlaceholder")
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardsourceentity.html)
     */
    public inline fun cfnDashboardDashboardSourceEntityProperty(
        block: CfnDashboardDashboardSourceEntityPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DashboardSourceEntityProperty {
        val builder = CfnDashboardDashboardSourceEntityPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Dashboard source template.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DashboardSourceTemplateProperty dashboardSourceTemplateProperty =
     * DashboardSourceTemplateProperty.builder()
     * .arn("arn")
     * .dataSetReferences(List.of(DataSetReferenceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .dataSetPlaceholder("dataSetPlaceholder")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardsourcetemplate.html)
     */
    public inline fun cfnDashboardDashboardSourceTemplateProperty(
        block: CfnDashboardDashboardSourceTemplatePropertyDsl.() -> Unit = {}
    ): CfnDashboard.DashboardSourceTemplateProperty {
        val builder = CfnDashboardDashboardSourceTemplatePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The contents of a dashboard.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversiondefinition.html)
     */
    public inline fun cfnDashboardDashboardVersionDefinitionProperty(
        block: CfnDashboardDashboardVersionDefinitionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DashboardVersionDefinitionProperty {
        val builder = CfnDashboardDashboardVersionDefinitionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Dashboard version.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DashboardVersionProperty dashboardVersionProperty = DashboardVersionProperty.builder()
     * .arn("arn")
     * .createdTime("createdTime")
     * .dataSetArns(List.of("dataSetArns"))
     * .description("description")
     * .errors(List.of(DashboardErrorProperty.builder()
     * .message("message")
     * .type("type")
     * .violatedEntities(List.of(EntityProperty.builder()
     * .path("path")
     * .build()))
     * .build()))
     * .sheets(List.of(SheetProperty.builder()
     * .name("name")
     * .sheetId("sheetId")
     * .build()))
     * .sourceEntityArn("sourceEntityArn")
     * .status("status")
     * .themeArn("themeArn")
     * .versionNumber(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversion.html)
     */
    public inline fun cfnDashboardDashboardVersionProperty(
        block: CfnDashboardDashboardVersionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DashboardVersionProperty {
        val builder = CfnDashboardDashboardVersionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The visual publish options of a visual in a dashboard.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DashboardVisualPublishOptionsProperty dashboardVisualPublishOptionsProperty =
     * DashboardVisualPublishOptionsProperty.builder()
     * .exportHiddenFieldsOption(ExportHiddenFieldsOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardvisualpublishoptions.html)
     */
    public inline fun cfnDashboardDashboardVisualPublishOptionsProperty(
        block: CfnDashboardDashboardVisualPublishOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DashboardVisualPublishOptionsProperty {
        val builder = CfnDashboardDashboardVisualPublishOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for data bars.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataBarsOptionsProperty dataBarsOptionsProperty = DataBarsOptionsProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .negativeColor("negativeColor")
     * .positiveColor("positiveColor")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-databarsoptions.html)
     */
    public inline fun cfnDashboardDataBarsOptionsProperty(
        block: CfnDashboardDataBarsOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataBarsOptionsProperty {
        val builder = CfnDashboardDataBarsOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the color that is applied to a particular data value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataColorProperty dataColorProperty = DataColorProperty.builder()
     * .color("color")
     * .dataValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datacolor.html)
     */
    public inline fun cfnDashboardDataColorProperty(
        block: CfnDashboardDataColorPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataColorProperty {
        val builder = CfnDashboardDataColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data field series item configuration of a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataFieldSeriesItemProperty dataFieldSeriesItemProperty = DataFieldSeriesItemProperty.builder()
     * .axisBinding("axisBinding")
     * .fieldId("fieldId")
     * // the properties below are optional
     * .fieldValue("fieldValue")
     * .settings(LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datafieldseriesitem.html)
     */
    public inline fun cfnDashboardDataFieldSeriesItemProperty(
        block: CfnDashboardDataFieldSeriesItemPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataFieldSeriesItemProperty {
        val builder = CfnDashboardDataFieldSeriesItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the data labels.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataLabelOptionsProperty dataLabelOptionsProperty = DataLabelOptionsProperty.builder()
     * .categoryLabelVisibility("categoryLabelVisibility")
     * .dataLabelTypes(List.of(DataLabelTypeProperty.builder()
     * .dataPathLabelType(DataPathLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .visibility("visibility")
     * .build())
     * .fieldLabelType(FieldLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .visibility("visibility")
     * .build())
     * .maximumLabelType(MaximumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .minimumLabelType(MinimumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .rangeEndsLabelType(RangeEndsLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build()))
     * .labelColor("labelColor")
     * .labelContent("labelContent")
     * .labelFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .measureLabelVisibility("measureLabelVisibility")
     * .overlap("overlap")
     * .position("position")
     * .totalsVisibility("totalsVisibility")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeloptions.html)
     */
    public inline fun cfnDashboardDataLabelOptionsProperty(
        block: CfnDashboardDataLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataLabelOptionsProperty {
        val builder = CfnDashboardDataLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the data label type.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataLabelTypeProperty dataLabelTypeProperty = DataLabelTypeProperty.builder()
     * .dataPathLabelType(DataPathLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .visibility("visibility")
     * .build())
     * .fieldLabelType(FieldLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .visibility("visibility")
     * .build())
     * .maximumLabelType(MaximumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .minimumLabelType(MinimumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .rangeEndsLabelType(RangeEndsLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeltype.html)
     */
    public inline fun cfnDashboardDataLabelTypeProperty(
        block: CfnDashboardDataLabelTypePropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataLabelTypeProperty {
        val builder = CfnDashboardDataLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The color map that determines the color options for a particular element.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPathColorProperty dataPathColorProperty = DataPathColorProperty.builder()
     * .color("color")
     * .element(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build())
     * // the properties below are optional
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathcolor.html)
     */
    public inline fun cfnDashboardDataPathColorProperty(
        block: CfnDashboardDataPathColorPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataPathColorProperty {
        val builder = CfnDashboardDataPathColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that specifies individual data values for labels.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPathLabelTypeProperty dataPathLabelTypeProperty = DataPathLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathlabeltype.html)
     */
    public inline fun cfnDashboardDataPathLabelTypeProperty(
        block: CfnDashboardDataPathLabelTypePropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataPathLabelTypeProperty {
        val builder = CfnDashboardDataPathLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Allows data paths to be sorted by a specific data value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPathSortProperty dataPathSortProperty = DataPathSortProperty.builder()
     * .direction("direction")
     * .sortPaths(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathsort.html)
     */
    public inline fun cfnDashboardDataPathSortProperty(
        block: CfnDashboardDataPathSortPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataPathSortProperty {
        val builder = CfnDashboardDataPathSortPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data path that needs to be sorted.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPathValueProperty dataPathValueProperty = DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathvalue.html)
     */
    public inline fun cfnDashboardDataPathValueProperty(
        block: CfnDashboardDataPathValuePropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataPathValueProperty {
        val builder = CfnDashboardDataPathValuePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The drill down options for data points in a dashbaord.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPointDrillUpDownOptionProperty dataPointDrillUpDownOptionProperty =
     * DataPointDrillUpDownOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapointdrillupdownoption.html)
     */
    public inline fun cfnDashboardDataPointDrillUpDownOptionProperty(
        block: CfnDashboardDataPointDrillUpDownOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataPointDrillUpDownOptionProperty {
        val builder = CfnDashboardDataPointDrillUpDownOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data point menu options of a dashboard.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPointMenuLabelOptionProperty dataPointMenuLabelOptionProperty =
     * DataPointMenuLabelOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapointmenulabeloption.html)
     */
    public inline fun cfnDashboardDataPointMenuLabelOptionProperty(
        block: CfnDashboardDataPointMenuLabelOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataPointMenuLabelOptionProperty {
        val builder = CfnDashboardDataPointMenuLabelOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data point tooltip options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPointTooltipOptionProperty dataPointTooltipOptionProperty =
     * DataPointTooltipOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapointtooltipoption.html)
     */
    public inline fun cfnDashboardDataPointTooltipOptionProperty(
        block: CfnDashboardDataPointTooltipOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataPointTooltipOptionProperty {
        val builder = CfnDashboardDataPointTooltipOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A data set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataSetIdentifierDeclarationProperty dataSetIdentifierDeclarationProperty =
     * DataSetIdentifierDeclarationProperty.builder()
     * .dataSetArn("dataSetArn")
     * .identifier("identifier")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datasetidentifierdeclaration.html)
     */
    public inline fun cfnDashboardDataSetIdentifierDeclarationProperty(
        block: CfnDashboardDataSetIdentifierDeclarationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataSetIdentifierDeclarationProperty {
        val builder = CfnDashboardDataSetIdentifierDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Dataset reference.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataSetReferenceProperty dataSetReferenceProperty = DataSetReferenceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .dataSetPlaceholder("dataSetPlaceholder")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datasetreference.html)
     */
    public inline fun cfnDashboardDataSetReferenceProperty(
        block: CfnDashboardDataSetReferencePropertyDsl.() -> Unit = {}
    ): CfnDashboard.DataSetReferenceProperty {
        val builder = CfnDashboardDataSetReferencePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine how a date axis is displayed.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateAxisOptionsProperty dateAxisOptionsProperty = DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dateaxisoptions.html)
     */
    public inline fun cfnDashboardDateAxisOptionsProperty(
        block: CfnDashboardDateAxisOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DateAxisOptionsProperty {
        val builder = CfnDashboardDateAxisOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dimension type field with date type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateDimensionFieldProperty dateDimensionFieldProperty = DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datedimensionfield.html)
     */
    public inline fun cfnDashboardDateDimensionFieldProperty(
        block: CfnDashboardDateDimensionFieldPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DateDimensionFieldProperty {
        val builder = CfnDashboardDateDimensionFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The measure type field with date type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateMeasureFieldProperty dateMeasureFieldProperty = DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datemeasurefield.html)
     */
    public inline fun cfnDashboardDateMeasureFieldProperty(
        block: CfnDashboardDateMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DateMeasureFieldProperty {
        val builder = CfnDashboardDateMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The default values of the `DateTimeParameterDeclaration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeDefaultValuesProperty dateTimeDefaultValuesProperty =
     * DateTimeDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimedefaultvalues.html)
     */
    public inline fun cfnDashboardDateTimeDefaultValuesProperty(
        block: CfnDashboardDateTimeDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DateTimeDefaultValuesProperty {
        val builder = CfnDashboardDateTimeDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for `DateTime` fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeFormatConfigurationProperty dateTimeFormatConfigurationProperty =
     * DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeformatconfiguration.html)
     */
    public inline fun cfnDashboardDateTimeFormatConfigurationProperty(
        block: CfnDashboardDateTimeFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DateTimeFormatConfigurationProperty {
        val builder = CfnDashboardDateTimeFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the hierarchy of any `DateTime` fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeHierarchyProperty dateTimeHierarchyProperty = DateTimeHierarchyProperty.builder()
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimehierarchy.html)
     */
    public inline fun cfnDashboardDateTimeHierarchyProperty(
        block: CfnDashboardDateTimeHierarchyPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DateTimeHierarchyProperty {
        val builder = CfnDashboardDateTimeHierarchyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `DateTime` data type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeParameterDeclarationProperty dateTimeParameterDeclarationProperty =
     * DateTimeParameterDeclarationProperty.builder()
     * .name("name")
     * // the properties below are optional
     * .defaultValues(DateTimeDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .timeGranularity("timeGranularity")
     * .valueWhenUnset(DateTimeValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeparameterdeclaration.html)
     */
    public inline fun cfnDashboardDateTimeParameterDeclarationProperty(
        block: CfnDashboardDateTimeParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DateTimeParameterDeclarationProperty {
        val builder = CfnDashboardDateTimeParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A date-time parameter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeParameterProperty dateTimeParameterProperty = DateTimeParameterProperty.builder()
     * .name("name")
     * .values(List.of("values"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeparameter.html)
     */
    public inline fun cfnDashboardDateTimeParameterProperty(
        block: CfnDashboardDateTimeParameterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DateTimeParameterProperty {
        val builder = CfnDashboardDateTimeParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimePickerControlDisplayOptionsProperty dateTimePickerControlDisplayOptionsProperty =
     * DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimepickercontroldisplayoptions.html)
     */
    public inline fun cfnDashboardDateTimePickerControlDisplayOptionsProperty(
        block: CfnDashboardDateTimePickerControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DateTimePickerControlDisplayOptionsProperty {
        val builder = CfnDashboardDateTimePickerControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that defines the default value of a `DateTime` parameter when a value has
     * not been set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeValueWhenUnsetConfigurationProperty dateTimeValueWhenUnsetConfigurationProperty =
     * DateTimeValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimevaluewhenunsetconfiguration.html)
     */
    public inline fun cfnDashboardDateTimeValueWhenUnsetConfigurationProperty(
        block: CfnDashboardDateTimeValueWhenUnsetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DateTimeValueWhenUnsetConfigurationProperty {
        val builder = CfnDashboardDateTimeValueWhenUnsetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The default values of the `DecimalParameterDeclaration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalDefaultValuesProperty decimalDefaultValuesProperty =
     * DecimalDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimaldefaultvalues.html)
     */
    public inline fun cfnDashboardDecimalDefaultValuesProperty(
        block: CfnDashboardDecimalDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DecimalDefaultValuesProperty {
        val builder = CfnDashboardDecimalDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `Decimal` data type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalParameterDeclarationProperty decimalParameterDeclarationProperty =
     * DecimalParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(DecimalDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(DecimalValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalparameterdeclaration.html)
     */
    public inline fun cfnDashboardDecimalParameterDeclarationProperty(
        block: CfnDashboardDecimalParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DecimalParameterDeclarationProperty {
        val builder = CfnDashboardDecimalParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A decimal parameter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalParameterProperty decimalParameterProperty = DecimalParameterProperty.builder()
     * .name("name")
     * .values(List.of(123))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalparameter.html)
     */
    public inline fun cfnDashboardDecimalParameterProperty(
        block: CfnDashboardDecimalParameterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DecimalParameterProperty {
        val builder = CfnDashboardDecimalParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the decimal places configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalPlacesConfigurationProperty decimalPlacesConfigurationProperty =
     * DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalplacesconfiguration.html)
     */
    public inline fun cfnDashboardDecimalPlacesConfigurationProperty(
        block: CfnDashboardDecimalPlacesConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DecimalPlacesConfigurationProperty {
        val builder = CfnDashboardDecimalPlacesConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that defines the default value of a `Decimal` parameter when a value has
     * not been set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalValueWhenUnsetConfigurationProperty decimalValueWhenUnsetConfigurationProperty =
     * DecimalValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalvaluewhenunsetconfiguration.html)
     */
    public inline fun cfnDashboardDecimalValueWhenUnsetConfigurationProperty(
        block: CfnDashboardDecimalValueWhenUnsetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DecimalValueWhenUnsetConfigurationProperty {
        val builder = CfnDashboardDecimalValueWhenUnsetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings of a free-form layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultFreeFormLayoutConfigurationProperty defaultFreeFormLayoutConfigurationProperty =
     * DefaultFreeFormLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultfreeformlayoutconfiguration.html)
     */
    public inline fun cfnDashboardDefaultFreeFormLayoutConfigurationProperty(
        block: CfnDashboardDefaultFreeFormLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DefaultFreeFormLayoutConfigurationProperty {
        val builder = CfnDashboardDefaultFreeFormLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings for a grid layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultGridLayoutConfigurationProperty defaultGridLayoutConfigurationProperty =
     * DefaultGridLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultgridlayoutconfiguration.html)
     */
    public inline fun cfnDashboardDefaultGridLayoutConfigurationProperty(
        block: CfnDashboardDefaultGridLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DefaultGridLayoutConfigurationProperty {
        val builder = CfnDashboardDefaultGridLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings for interactive layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultInteractiveLayoutConfigurationProperty defaultInteractiveLayoutConfigurationProperty =
     * DefaultInteractiveLayoutConfigurationProperty.builder()
     * .freeForm(DefaultFreeFormLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .grid(DefaultGridLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultinteractivelayoutconfiguration.html)
     */
    public inline fun cfnDashboardDefaultInteractiveLayoutConfigurationProperty(
        block: CfnDashboardDefaultInteractiveLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DefaultInteractiveLayoutConfigurationProperty {
        val builder = CfnDashboardDefaultInteractiveLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for default new sheet settings.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultNewSheetConfigurationProperty defaultNewSheetConfigurationProperty =
     * DefaultNewSheetConfigurationProperty.builder()
     * .interactiveLayoutConfiguration(DefaultInteractiveLayoutConfigurationProperty.builder()
     * .freeForm(DefaultFreeFormLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .grid(DefaultGridLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build())
     * .paginatedLayoutConfiguration(DefaultPaginatedLayoutConfigurationProperty.builder()
     * .sectionBased(DefaultSectionBasedLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .build())
     * .build())
     * .sheetContentType("sheetContentType")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultnewsheetconfiguration.html)
     */
    public inline fun cfnDashboardDefaultNewSheetConfigurationProperty(
        block: CfnDashboardDefaultNewSheetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DefaultNewSheetConfigurationProperty {
        val builder = CfnDashboardDefaultNewSheetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings for a paginated layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultPaginatedLayoutConfigurationProperty defaultPaginatedLayoutConfigurationProperty =
     * DefaultPaginatedLayoutConfigurationProperty.builder()
     * .sectionBased(DefaultSectionBasedLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultpaginatedlayoutconfiguration.html)
     */
    public inline fun cfnDashboardDefaultPaginatedLayoutConfigurationProperty(
        block: CfnDashboardDefaultPaginatedLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DefaultPaginatedLayoutConfigurationProperty {
        val builder = CfnDashboardDefaultPaginatedLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings for a section-based layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultSectionBasedLayoutConfigurationProperty defaultSectionBasedLayoutConfigurationProperty =
     * DefaultSectionBasedLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultsectionbasedlayoutconfiguration.html)
     */
    public inline fun cfnDashboardDefaultSectionBasedLayoutConfigurationProperty(
        block: CfnDashboardDefaultSectionBasedLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DefaultSectionBasedLayoutConfigurationProperty {
        val builder = CfnDashboardDefaultSectionBasedLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of destination parameter values.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DestinationParameterValueConfigurationProperty destinationParameterValueConfigurationProperty =
     * DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-destinationparametervalueconfiguration.html)
     */
    public inline fun cfnDashboardDestinationParameterValueConfigurationProperty(
        block: CfnDashboardDestinationParameterValueConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DestinationParameterValueConfigurationProperty {
        val builder = CfnDashboardDestinationParameterValueConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dimension type field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DimensionFieldProperty dimensionFieldProperty = DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dimensionfield.html)
     */
    public inline fun cfnDashboardDimensionFieldProperty(
        block: CfnDashboardDimensionFieldPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DimensionFieldProperty {
        val builder = CfnDashboardDimensionFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The label options of the label that is displayed in the center of a donut chart.
     *
     * This option isn't available for pie charts.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DonutCenterOptionsProperty donutCenterOptionsProperty = DonutCenterOptionsProperty.builder()
     * .labelVisibility("labelVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-donutcenteroptions.html)
     */
    public inline fun cfnDashboardDonutCenterOptionsProperty(
        block: CfnDashboardDonutCenterOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DonutCenterOptionsProperty {
        val builder = CfnDashboardDonutCenterOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for configuring a donut chart or pie chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DonutOptionsProperty donutOptionsProperty = DonutOptionsProperty.builder()
     * .arcOptions(ArcOptionsProperty.builder()
     * .arcThickness("arcThickness")
     * .build())
     * .donutCenterOptions(DonutCenterOptionsProperty.builder()
     * .labelVisibility("labelVisibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-donutoptions.html)
     */
    public inline fun cfnDashboardDonutOptionsProperty(
        block: CfnDashboardDonutOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DonutOptionsProperty {
        val builder = CfnDashboardDonutOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The drill down filter for the column hierarchies.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DrillDownFilterProperty drillDownFilterProperty = DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-drilldownfilter.html)
     */
    public inline fun cfnDashboardDrillDownFilterProperty(
        block: CfnDashboardDrillDownFilterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DrillDownFilterProperty {
        val builder = CfnDashboardDrillDownFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DropDownControlDisplayOptionsProperty dropDownControlDisplayOptionsProperty =
     * DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dropdowncontroldisplayoptions.html)
     */
    public inline fun cfnDashboardDropDownControlDisplayOptionsProperty(
        block: CfnDashboardDropDownControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.DropDownControlDisplayOptionsProperty {
        val builder = CfnDashboardDropDownControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Defines different defaults to the users or groups based on mapping.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DynamicDefaultValueProperty dynamicDefaultValueProperty = DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dynamicdefaultvalue.html)
     */
    public inline fun cfnDashboardDynamicDefaultValueProperty(
        block: CfnDashboardDynamicDefaultValuePropertyDsl.() -> Unit = {}
    ): CfnDashboard.DynamicDefaultValueProperty {
        val builder = CfnDashboardDynamicDefaultValuePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An empty visual.
     *
     * Empty visuals are used in layouts but have not been configured to show any data. A new visual
     * created in the Amazon QuickSight console is considered an `EmptyVisual` until a visual type
     * is selected.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * EmptyVisualProperty emptyVisualProperty = EmptyVisualProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .visualId("visualId")
     * // the properties below are optional
     * .actions(List.of(VisualCustomActionProperty.builder()
     * .actionOperations(List.of(VisualCustomActionOperationProperty.builder()
     * .filterOperation(CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build())
     * .navigationOperation(CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build())
     * .setParametersOperation(CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build())
     * .urlOperation(CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build())
     * .build()))
     * .customActionId("customActionId")
     * .name("name")
     * .trigger("trigger")
     * // the properties below are optional
     * .status("status")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-emptyvisual.html)
     */
    public inline fun cfnDashboardEmptyVisualProperty(
        block: CfnDashboardEmptyVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.EmptyVisualProperty {
        val builder = CfnDashboardEmptyVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An object, structure, or sub-structure of an analysis, template, or dashboard.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * EntityProperty entityProperty = EntityProperty.builder()
     * .path("path")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-entity.html)
     */
    public inline fun cfnDashboardEntityProperty(
        block: CfnDashboardEntityPropertyDsl.() -> Unit = {}
    ): CfnDashboard.EntityProperty {
        val builder = CfnDashboardEntityPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The exclude period of `TimeRangeFilter` or `RelativeDatesFilter` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ExcludePeriodConfigurationProperty excludePeriodConfigurationProperty =
     * ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-excludeperiodconfiguration.html)
     */
    public inline fun cfnDashboardExcludePeriodConfigurationProperty(
        block: CfnDashboardExcludePeriodConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ExcludePeriodConfigurationProperty {
        val builder = CfnDashboardExcludePeriodConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the hierarchy of the fields that are built within a visual's field
     * wells.
     *
     * These fields can't be duplicated to other visuals.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ExplicitHierarchyProperty explicitHierarchyProperty = ExplicitHierarchyProperty.builder()
     * .columns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-explicithierarchy.html)
     */
    public inline fun cfnDashboardExplicitHierarchyProperty(
        block: CfnDashboardExplicitHierarchyPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ExplicitHierarchyProperty {
        val builder = CfnDashboardExplicitHierarchyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines if hidden fields are included in an exported dashboard.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ExportHiddenFieldsOptionProperty exportHiddenFieldsOptionProperty =
     * ExportHiddenFieldsOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-exporthiddenfieldsoption.html)
     */
    public inline fun cfnDashboardExportHiddenFieldsOptionProperty(
        block: CfnDashboardExportHiddenFieldsOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ExportHiddenFieldsOptionProperty {
        val builder = CfnDashboardExportHiddenFieldsOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Export to .csv option.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ExportToCSVOptionProperty exportToCSVOptionProperty = ExportToCSVOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-exporttocsvoption.html)
     */
    public inline fun cfnDashboardExportToCSVOptionProperty(
        block: CfnDashboardExportToCSVOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ExportToCSVOptionProperty {
        val builder = CfnDashboardExportToCSVOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines whether or not hidden fields are visible on exported dashbaords.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ExportWithHiddenFieldsOptionProperty exportWithHiddenFieldsOptionProperty =
     * ExportWithHiddenFieldsOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-exportwithhiddenfieldsoption.html)
     */
    public inline fun cfnDashboardExportWithHiddenFieldsOptionProperty(
        block: CfnDashboardExportWithHiddenFieldsOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ExportWithHiddenFieldsOptionProperty {
        val builder = CfnDashboardExportWithHiddenFieldsOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The setup for the detailed tooltip.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldBasedTooltipProperty fieldBasedTooltipProperty = FieldBasedTooltipProperty.builder()
     * .aggregationVisibility("aggregationVisibility")
     * .tooltipFields(List.of(TooltipItemProperty.builder()
     * .columnTooltipItem(ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .fieldTooltipItem(FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .build()))
     * .tooltipTitleType("tooltipTitleType")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldbasedtooltip.html)
     */
    public inline fun cfnDashboardFieldBasedTooltipProperty(
        block: CfnDashboardFieldBasedTooltipPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FieldBasedTooltipProperty {
        val builder = CfnDashboardFieldBasedTooltipPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field label type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldLabelTypeProperty fieldLabelTypeProperty = FieldLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldlabeltype.html)
     */
    public inline fun cfnDashboardFieldLabelTypeProperty(
        block: CfnDashboardFieldLabelTypePropertyDsl.() -> Unit = {}
    ): CfnDashboard.FieldLabelTypeProperty {
        val builder = CfnDashboardFieldLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field series item configuration of a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldSeriesItemProperty fieldSeriesItemProperty = FieldSeriesItemProperty.builder()
     * .axisBinding("axisBinding")
     * .fieldId("fieldId")
     * // the properties below are optional
     * .settings(LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldseriesitem.html)
     */
    public inline fun cfnDashboardFieldSeriesItemProperty(
        block: CfnDashboardFieldSeriesItemPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FieldSeriesItemProperty {
        val builder = CfnDashboardFieldSeriesItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field sort options in a chart configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldSortOptionsProperty fieldSortOptionsProperty = FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldsortoptions.html)
     */
    public inline fun cfnDashboardFieldSortOptionsProperty(
        block: CfnDashboardFieldSortOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FieldSortOptionsProperty {
        val builder = CfnDashboardFieldSortOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration for a field in a field well.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldSortProperty fieldSortProperty = FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldsort.html)
     */
    public inline fun cfnDashboardFieldSortProperty(
        block: CfnDashboardFieldSortPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FieldSortProperty {
        val builder = CfnDashboardFieldSortPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The tooltip item for the fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldTooltipItemProperty fieldTooltipItemProperty = FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldtooltipitem.html)
     */
    public inline fun cfnDashboardFieldTooltipItemProperty(
        block: CfnDashboardFieldTooltipItemPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FieldTooltipItemProperty {
        val builder = CfnDashboardFieldTooltipItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well of the filled map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapAggregatedFieldWellsProperty filledMapAggregatedFieldWellsProperty =
     * FilledMapAggregatedFieldWellsProperty.builder()
     * .geospatial(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardFilledMapAggregatedFieldWellsProperty(
        block: CfnDashboardFilledMapAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilledMapAggregatedFieldWellsProperty {
        val builder = CfnDashboardFilledMapAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Conditional formatting options of a `FilledMapVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapConditionalFormattingOptionProperty filledMapConditionalFormattingOptionProperty =
     * FilledMapConditionalFormattingOptionProperty.builder()
     * .shape(FilledMapShapeConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .format(ShapeConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconditionalformattingoption.html)
     */
    public inline fun cfnDashboardFilledMapConditionalFormattingOptionProperty(
        block: CfnDashboardFilledMapConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilledMapConditionalFormattingOptionProperty {
        val builder = CfnDashboardFilledMapConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting of a `FilledMapVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapConditionalFormattingProperty filledMapConditionalFormattingProperty =
     * FilledMapConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(FilledMapConditionalFormattingOptionProperty.builder()
     * .shape(FilledMapShapeConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .format(ShapeConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconditionalformatting.html)
     */
    public inline fun cfnDashboardFilledMapConditionalFormattingProperty(
        block: CfnDashboardFilledMapConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilledMapConditionalFormattingProperty {
        val builder = CfnDashboardFilledMapConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `FilledMapVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconfiguration.html)
     */
    public inline fun cfnDashboardFilledMapConfigurationProperty(
        block: CfnDashboardFilledMapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilledMapConfigurationProperty {
        val builder = CfnDashboardFilledMapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a `FilledMapVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapFieldWellsProperty filledMapFieldWellsProperty = FilledMapFieldWellsProperty.builder()
     * .filledMapAggregatedFieldWells(FilledMapAggregatedFieldWellsProperty.builder()
     * .geospatial(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapfieldwells.html)
     */
    public inline fun cfnDashboardFilledMapFieldWellsProperty(
        block: CfnDashboardFilledMapFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilledMapFieldWellsProperty {
        val builder = CfnDashboardFilledMapFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting that determines the shape of the filled map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapShapeConditionalFormattingProperty filledMapShapeConditionalFormattingProperty =
     * FilledMapShapeConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .format(ShapeConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapshapeconditionalformatting.html)
     */
    public inline fun cfnDashboardFilledMapShapeConditionalFormattingProperty(
        block: CfnDashboardFilledMapShapeConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilledMapShapeConditionalFormattingProperty {
        val builder = CfnDashboardFilledMapShapeConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `FilledMapVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapSortConfigurationProperty filledMapSortConfigurationProperty =
     * FilledMapSortConfigurationProperty.builder()
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapsortconfiguration.html)
     */
    public inline fun cfnDashboardFilledMapSortConfigurationProperty(
        block: CfnDashboardFilledMapSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilledMapSortConfigurationProperty {
        val builder = CfnDashboardFilledMapSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A filled map.
     *
     * For more information, see
     * [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapvisual.html)
     */
    public inline fun cfnDashboardFilledMapVisualProperty(
        block: CfnDashboardFilledMapVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilledMapVisualProperty {
        val builder = CfnDashboardFilledMapVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The control of a filter that is used to interact with a dashboard or an analysis.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterControlProperty filterControlProperty = FilterControlProperty.builder()
     * .dateTimePicker(FilterDateTimePickerControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .type("type")
     * .build())
     * .dropdown(FilterDropDownControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build())
     * .list(FilterListControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build())
     * .relativeDateTime(FilterRelativeDateTimeControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(RelativeDateTimeControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .slider(FilterSliderControlProperty.builder()
     * .filterControlId("filterControlId")
     * .maximumValue(123)
     * .minimumValue(123)
     * .sourceFilterId("sourceFilterId")
     * .stepSize(123)
     * .title("title")
     * // the properties below are optional
     * .displayOptions(SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .type("type")
     * .build())
     * .textArea(FilterTextAreaControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .delimiter("delimiter")
     * .displayOptions(TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .textField(FilterTextFieldControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtercontrol.html)
     */
    public inline fun cfnDashboardFilterControlProperty(
        block: CfnDashboardFilterControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterControlProperty {
        val builder = CfnDashboardFilterControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control from a date filter that is used to specify date and time.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterDateTimePickerControlProperty filterDateTimePickerControlProperty =
     * FilterDateTimePickerControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdatetimepickercontrol.html)
     */
    public inline fun cfnDashboardFilterDateTimePickerControlProperty(
        block: CfnDashboardFilterDateTimePickerControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterDateTimePickerControlProperty {
        val builder = CfnDashboardFilterDateTimePickerControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a dropdown list with buttons that are used to select a single value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterDropDownControlProperty filterDropDownControlProperty =
     * FilterDropDownControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdropdowncontrol.html)
     */
    public inline fun cfnDashboardFilterDropDownControlProperty(
        block: CfnDashboardFilterDropDownControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterDropDownControlProperty {
        val builder = CfnDashboardFilterDropDownControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A grouping of individual filters. Filter groups are applied to the same group of visuals.
     *
     * For more information, see
     * [Adding filter conditions (group filters) with AND and OR operators](https://docs.aws.amazon.com/quicksight/latest/user/add-a-compound-filter.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterGroupProperty filterGroupProperty = FilterGroupProperty.builder()
     * .crossDataset("crossDataset")
     * .filterGroupId("filterGroupId")
     * .filters(List.of(FilterProperty.builder()
     * .categoryFilter(CategoryFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .configuration(CategoryFilterConfigurationProperty.builder()
     * .customFilterConfiguration(CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .customFilterListConfiguration(CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .filterListConfiguration(FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .build())
     * .filterId("filterId")
     * .build())
     * .numericEqualityFilter(NumericEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .value(123)
     * .build())
     * .numericRangeFilter(NumericRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .rangeMinimum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .relativeDatesFilter(RelativeDatesFilterProperty.builder()
     * .anchorDateConfiguration(AnchorDateConfigurationProperty.builder()
     * .anchorOption("anchorOption")
     * .parameterName("parameterName")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * .relativeDateType("relativeDateType")
     * .timeGranularity("timeGranularity")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .minimumGranularity("minimumGranularity")
     * .parameterName("parameterName")
     * .relativeDateValue(123)
     * .build())
     * .timeEqualityFilter(TimeEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .value("value")
     * .build())
     * .timeRangeFilter(TimeRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .rangeMinimumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .timeGranularity("timeGranularity")
     * .build())
     * .topBottomFilter(TopBottomFilterProperty.builder()
     * .aggregationSortConfigurations(List.of(AggregationSortConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sortDirection("sortDirection")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build()))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .limit(123)
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .scopeConfiguration(FilterScopeConfigurationProperty.builder()
     * .selectedSheets(SelectedSheetsFilterScopeConfigurationProperty.builder()
     * .sheetVisualScopingConfigurations(List.of(SheetVisualScopingConfigurationProperty.builder()
     * .scope("scope")
     * .sheetId("sheetId")
     * // the properties below are optional
     * .visualIds(List.of("visualIds"))
     * .build()))
     * .build())
     * .build())
     * // the properties below are optional
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtergroup.html)
     */
    public inline fun cfnDashboardFilterGroupProperty(
        block: CfnDashboardFilterGroupPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterGroupProperty {
        val builder = CfnDashboardFilterGroupPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of filter configurations.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterListConfigurationProperty filterListConfigurationProperty =
     * FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistconfiguration.html)
     */
    public inline fun cfnDashboardFilterListConfigurationProperty(
        block: CfnDashboardFilterListConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterListConfigurationProperty {
        val builder = CfnDashboardFilterListConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a list of buttons or boxes.
     *
     * This is used to select either a single value or multiple values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterListControlProperty filterListControlProperty = FilterListControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistcontrol.html)
     */
    public inline fun cfnDashboardFilterListControlProperty(
        block: CfnDashboardFilterListControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterListControlProperty {
        val builder = CfnDashboardFilterListControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of selected fields in the `CustomActionFilterOperation` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterOperationSelectedFieldsConfigurationProperty
     * filterOperationSelectedFieldsConfigurationProperty =
     * FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filteroperationselectedfieldsconfiguration.html)
     */
    public inline fun cfnDashboardFilterOperationSelectedFieldsConfigurationProperty(
        block: CfnDashboardFilterOperationSelectedFieldsConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterOperationSelectedFieldsConfigurationProperty {
        val builder = CfnDashboardFilterOperationSelectedFieldsConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of target visuals that you want to be filtered.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterOperationTargetVisualsConfigurationProperty
     * filterOperationTargetVisualsConfigurationProperty =
     * FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filteroperationtargetvisualsconfiguration.html)
     */
    public inline fun cfnDashboardFilterOperationTargetVisualsConfigurationProperty(
        block: CfnDashboardFilterOperationTargetVisualsConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterOperationTargetVisualsConfigurationProperty {
        val builder = CfnDashboardFilterOperationTargetVisualsConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * With a `Filter` , you can remove portions of data from a particular visual or view.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterProperty filterProperty = FilterProperty.builder()
     * .categoryFilter(CategoryFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .configuration(CategoryFilterConfigurationProperty.builder()
     * .customFilterConfiguration(CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .customFilterListConfiguration(CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .filterListConfiguration(FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .build())
     * .filterId("filterId")
     * .build())
     * .numericEqualityFilter(NumericEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .value(123)
     * .build())
     * .numericRangeFilter(NumericRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .rangeMinimum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .relativeDatesFilter(RelativeDatesFilterProperty.builder()
     * .anchorDateConfiguration(AnchorDateConfigurationProperty.builder()
     * .anchorOption("anchorOption")
     * .parameterName("parameterName")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * .relativeDateType("relativeDateType")
     * .timeGranularity("timeGranularity")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .minimumGranularity("minimumGranularity")
     * .parameterName("parameterName")
     * .relativeDateValue(123)
     * .build())
     * .timeEqualityFilter(TimeEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .value("value")
     * .build())
     * .timeRangeFilter(TimeRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .rangeMinimumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .timeGranularity("timeGranularity")
     * .build())
     * .topBottomFilter(TopBottomFilterProperty.builder()
     * .aggregationSortConfigurations(List.of(AggregationSortConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sortDirection("sortDirection")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build()))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .limit(123)
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filter.html)
     */
    public inline fun cfnDashboardFilterProperty(
        block: CfnDashboardFilterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterProperty {
        val builder = CfnDashboardFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control from a date filter that is used to specify the relative date.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterRelativeDateTimeControlProperty filterRelativeDateTimeControlProperty =
     * FilterRelativeDateTimeControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(RelativeDateTimeControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterrelativedatetimecontrol.html)
     */
    public inline fun cfnDashboardFilterRelativeDateTimeControlProperty(
        block: CfnDashboardFilterRelativeDateTimeControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterRelativeDateTimeControlProperty {
        val builder = CfnDashboardFilterRelativeDateTimeControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The scope configuration for a `FilterGroup` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterScopeConfigurationProperty filterScopeConfigurationProperty =
     * FilterScopeConfigurationProperty.builder()
     * .selectedSheets(SelectedSheetsFilterScopeConfigurationProperty.builder()
     * .sheetVisualScopingConfigurations(List.of(SheetVisualScopingConfigurationProperty.builder()
     * .scope("scope")
     * .sheetId("sheetId")
     * // the properties below are optional
     * .visualIds(List.of("visualIds"))
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterscopeconfiguration.html)
     */
    public inline fun cfnDashboardFilterScopeConfigurationProperty(
        block: CfnDashboardFilterScopeConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterScopeConfigurationProperty {
        val builder = CfnDashboardFilterScopeConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of selectable values that are used in a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterSelectableValuesProperty filterSelectableValuesProperty =
     * FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterselectablevalues.html)
     */
    public inline fun cfnDashboardFilterSelectableValuesProperty(
        block: CfnDashboardFilterSelectableValuesPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterSelectableValuesProperty {
        val builder = CfnDashboardFilterSelectableValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a horizontal toggle bar.
     *
     * This is used to change a value by sliding the toggle.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterSliderControlProperty filterSliderControlProperty = FilterSliderControlProperty.builder()
     * .filterControlId("filterControlId")
     * .maximumValue(123)
     * .minimumValue(123)
     * .sourceFilterId("sourceFilterId")
     * .stepSize(123)
     * .title("title")
     * // the properties below are optional
     * .displayOptions(SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterslidercontrol.html)
     */
    public inline fun cfnDashboardFilterSliderControlProperty(
        block: CfnDashboardFilterSliderControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterSliderControlProperty {
        val builder = CfnDashboardFilterSliderControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a text box that is used to enter multiple entries.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterTextAreaControlProperty filterTextAreaControlProperty =
     * FilterTextAreaControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .delimiter("delimiter")
     * .displayOptions(TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextareacontrol.html)
     */
    public inline fun cfnDashboardFilterTextAreaControlProperty(
        block: CfnDashboardFilterTextAreaControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterTextAreaControlProperty {
        val builder = CfnDashboardFilterTextAreaControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a text box that is used to enter a single entry.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterTextFieldControlProperty filterTextFieldControlProperty =
     * FilterTextFieldControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextfieldcontrol.html)
     */
    public inline fun cfnDashboardFilterTextFieldControlProperty(
        block: CfnDashboardFilterTextFieldControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FilterTextFieldControlProperty {
        val builder = CfnDashboardFilterTextFieldControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Configures the display properties of the given text.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FontConfigurationProperty fontConfigurationProperty = FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontconfiguration.html)
     */
    public inline fun cfnDashboardFontConfigurationProperty(
        block: CfnDashboardFontConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FontConfigurationProperty {
        val builder = CfnDashboardFontConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the text display size.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FontSizeProperty fontSizeProperty = FontSizeProperty.builder()
     * .relative("relative")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontsize.html)
     */
    public inline fun cfnDashboardFontSizeProperty(
        block: CfnDashboardFontSizePropertyDsl.() -> Unit = {}
    ): CfnDashboard.FontSizeProperty {
        val builder = CfnDashboardFontSizePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the text display weight, or boldness.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FontWeightProperty fontWeightProperty = FontWeightProperty.builder()
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontweight.html)
     */
    public inline fun cfnDashboardFontWeightProperty(
        block: CfnDashboardFontWeightPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FontWeightProperty {
        val builder = CfnDashboardFontWeightPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The forecast computation configuration.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html)
     */
    public inline fun cfnDashboardForecastComputationProperty(
        block: CfnDashboardForecastComputationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ForecastComputationProperty {
        val builder = CfnDashboardForecastComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The forecast configuration that is used in a line chart's display properties.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ForecastConfigurationProperty forecastConfigurationProperty =
     * ForecastConfigurationProperty.builder()
     * .forecastProperties(TimeBasedForecastPropertiesProperty.builder()
     * .lowerBoundary(123)
     * .periodsBackward(123)
     * .periodsForward(123)
     * .predictionInterval(123)
     * .seasonality(123)
     * .upperBoundary(123)
     * .build())
     * .scenario(ForecastScenarioProperty.builder()
     * .whatIfPointScenario(WhatIfPointScenarioProperty.builder()
     * .date("date")
     * .value(123)
     * .build())
     * .whatIfRangeScenario(WhatIfRangeScenarioProperty.builder()
     * .endDate("endDate")
     * .startDate("startDate")
     * .value(123)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastconfiguration.html)
     */
    public inline fun cfnDashboardForecastConfigurationProperty(
        block: CfnDashboardForecastConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ForecastConfigurationProperty {
        val builder = CfnDashboardForecastConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The forecast scenario of a forecast in the line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ForecastScenarioProperty forecastScenarioProperty = ForecastScenarioProperty.builder()
     * .whatIfPointScenario(WhatIfPointScenarioProperty.builder()
     * .date("date")
     * .value(123)
     * .build())
     * .whatIfRangeScenario(WhatIfRangeScenarioProperty.builder()
     * .endDate("endDate")
     * .startDate("startDate")
     * .value(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastscenario.html)
     */
    public inline fun cfnDashboardForecastScenarioProperty(
        block: CfnDashboardForecastScenarioPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ForecastScenarioProperty {
        val builder = CfnDashboardForecastScenarioPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The formatting configuration for all types of field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FormatConfigurationProperty formatConfigurationProperty = FormatConfigurationProperty.builder()
     * .dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .numberFormatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .stringFormatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-formatconfiguration.html)
     */
    public inline fun cfnDashboardFormatConfigurationProperty(
        block: CfnDashboardFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FormatConfigurationProperty {
        val builder = CfnDashboardFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Configuration options for the canvas of a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutCanvasSizeOptionsProperty freeFormLayoutCanvasSizeOptionsProperty =
     * FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutcanvassizeoptions.html)
     */
    public inline fun cfnDashboardFreeFormLayoutCanvasSizeOptionsProperty(
        block: CfnDashboardFreeFormLayoutCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FreeFormLayoutCanvasSizeOptionsProperty {
        val builder = CfnDashboardFreeFormLayoutCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutConfigurationProperty freeFormLayoutConfigurationProperty =
     * FreeFormLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutconfiguration.html)
     */
    public inline fun cfnDashboardFreeFormLayoutConfigurationProperty(
        block: CfnDashboardFreeFormLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FreeFormLayoutConfigurationProperty {
        val builder = CfnDashboardFreeFormLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The background style configuration of a free-form layout element.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutElementBackgroundStyleProperty freeFormLayoutElementBackgroundStyleProperty =
     * FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelementbackgroundstyle.html)
     */
    public inline fun cfnDashboardFreeFormLayoutElementBackgroundStyleProperty(
        block: CfnDashboardFreeFormLayoutElementBackgroundStylePropertyDsl.() -> Unit = {}
    ): CfnDashboard.FreeFormLayoutElementBackgroundStyleProperty {
        val builder = CfnDashboardFreeFormLayoutElementBackgroundStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The background style configuration of a free-form layout element.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutElementBorderStyleProperty freeFormLayoutElementBorderStyleProperty =
     * FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelementborderstyle.html)
     */
    public inline fun cfnDashboardFreeFormLayoutElementBorderStyleProperty(
        block: CfnDashboardFreeFormLayoutElementBorderStylePropertyDsl.() -> Unit = {}
    ): CfnDashboard.FreeFormLayoutElementBorderStyleProperty {
        val builder = CfnDashboardFreeFormLayoutElementBorderStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An element within a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutElementProperty freeFormLayoutElementProperty =
     * FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html)
     */
    public inline fun cfnDashboardFreeFormLayoutElementProperty(
        block: CfnDashboardFreeFormLayoutElementPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FreeFormLayoutElementProperty {
        val builder = CfnDashboardFreeFormLayoutElementPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the sizing of the canvas used in a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutScreenCanvasSizeOptionsProperty freeFormLayoutScreenCanvasSizeOptionsProperty =
     * FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutscreencanvassizeoptions.html)
     */
    public inline fun cfnDashboardFreeFormLayoutScreenCanvasSizeOptionsProperty(
        block: CfnDashboardFreeFormLayoutScreenCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FreeFormLayoutScreenCanvasSizeOptionsProperty {
        val builder = CfnDashboardFreeFormLayoutScreenCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The free-form layout configuration of a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormSectionLayoutConfigurationProperty freeFormSectionLayoutConfigurationProperty =
     * FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformsectionlayoutconfiguration.html)
     */
    public inline fun cfnDashboardFreeFormSectionLayoutConfigurationProperty(
        block: CfnDashboardFreeFormSectionLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FreeFormSectionLayoutConfigurationProperty {
        val builder = CfnDashboardFreeFormSectionLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a `FunnelChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FunnelChartAggregatedFieldWellsProperty funnelChartAggregatedFieldWellsProperty =
     * FunnelChartAggregatedFieldWellsProperty.builder()
     * .category(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardFunnelChartAggregatedFieldWellsProperty(
        block: CfnDashboardFunnelChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FunnelChartAggregatedFieldWellsProperty {
        val builder = CfnDashboardFunnelChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `FunnelChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartconfiguration.html)
     */
    public inline fun cfnDashboardFunnelChartConfigurationProperty(
        block: CfnDashboardFunnelChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FunnelChartConfigurationProperty {
        val builder = CfnDashboardFunnelChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the data labels.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FunnelChartDataLabelOptionsProperty funnelChartDataLabelOptionsProperty =
     * FunnelChartDataLabelOptionsProperty.builder()
     * .categoryLabelVisibility("categoryLabelVisibility")
     * .labelColor("labelColor")
     * .labelFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .measureDataLabelStyle("measureDataLabelStyle")
     * .measureLabelVisibility("measureLabelVisibility")
     * .position("position")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartdatalabeloptions.html)
     */
    public inline fun cfnDashboardFunnelChartDataLabelOptionsProperty(
        block: CfnDashboardFunnelChartDataLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FunnelChartDataLabelOptionsProperty {
        val builder = CfnDashboardFunnelChartDataLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a `FunnelChartVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FunnelChartFieldWellsProperty funnelChartFieldWellsProperty =
     * FunnelChartFieldWellsProperty.builder()
     * .funnelChartAggregatedFieldWells(FunnelChartAggregatedFieldWellsProperty.builder()
     * .category(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartfieldwells.html)
     */
    public inline fun cfnDashboardFunnelChartFieldWellsProperty(
        block: CfnDashboardFunnelChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FunnelChartFieldWellsProperty {
        val builder = CfnDashboardFunnelChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `FunnelChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FunnelChartSortConfigurationProperty funnelChartSortConfigurationProperty =
     * FunnelChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartsortconfiguration.html)
     */
    public inline fun cfnDashboardFunnelChartSortConfigurationProperty(
        block: CfnDashboardFunnelChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FunnelChartSortConfigurationProperty {
        val builder = CfnDashboardFunnelChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A funnel chart.
     *
     * For more information, see
     * [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartvisual.html)
     */
    public inline fun cfnDashboardFunnelChartVisualProperty(
        block: CfnDashboardFunnelChartVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.FunnelChartVisualProperty {
        val builder = CfnDashboardFunnelChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the arc of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartArcConditionalFormattingProperty gaugeChartArcConditionalFormattingProperty =
     * GaugeChartArcConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartarcconditionalformatting.html)
     */
    public inline fun cfnDashboardGaugeChartArcConditionalFormattingProperty(
        block: CfnDashboardGaugeChartArcConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GaugeChartArcConditionalFormattingProperty {
        val builder = CfnDashboardGaugeChartArcConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Conditional formatting options of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartConditionalFormattingOptionProperty gaugeChartConditionalFormattingOptionProperty =
     * GaugeChartConditionalFormattingOptionProperty.builder()
     * .arc(GaugeChartArcConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .primaryValue(GaugeChartPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconditionalformattingoption.html)
     */
    public inline fun cfnDashboardGaugeChartConditionalFormattingOptionProperty(
        block: CfnDashboardGaugeChartConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GaugeChartConditionalFormattingOptionProperty {
        val builder = CfnDashboardGaugeChartConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartConditionalFormattingProperty gaugeChartConditionalFormattingProperty =
     * GaugeChartConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(GaugeChartConditionalFormattingOptionProperty.builder()
     * .arc(GaugeChartArcConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .primaryValue(GaugeChartPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconditionalformatting.html)
     */
    public inline fun cfnDashboardGaugeChartConditionalFormattingProperty(
        block: CfnDashboardGaugeChartConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GaugeChartConditionalFormattingProperty {
        val builder = CfnDashboardGaugeChartConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconfiguration.html)
     */
    public inline fun cfnDashboardGaugeChartConfigurationProperty(
        block: CfnDashboardGaugeChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GaugeChartConfigurationProperty {
        val builder = CfnDashboardGaugeChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartfieldwells.html)
     */
    public inline fun cfnDashboardGaugeChartFieldWellsProperty(
        block: CfnDashboardGaugeChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GaugeChartFieldWellsProperty {
        val builder = CfnDashboardGaugeChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartOptionsProperty gaugeChartOptionsProperty = GaugeChartOptionsProperty.builder()
     * .arc(ArcConfigurationProperty.builder()
     * .arcAngle(123)
     * .arcThickness("arcThickness")
     * .build())
     * .arcAxis(ArcAxisConfigurationProperty.builder()
     * .range(ArcAxisDisplayRangeProperty.builder()
     * .max(123)
     * .min(123)
     * .build())
     * .reserveRange(123)
     * .build())
     * .comparison(ComparisonConfigurationProperty.builder()
     * .comparisonFormat(ComparisonFormatConfigurationProperty.builder()
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .comparisonMethod("comparisonMethod")
     * .build())
     * .primaryValueDisplayType("primaryValueDisplayType")
     * .primaryValueFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartoptions.html)
     */
    public inline fun cfnDashboardGaugeChartOptionsProperty(
        block: CfnDashboardGaugeChartOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GaugeChartOptionsProperty {
        val builder = CfnDashboardGaugeChartOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for the primary value of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartPrimaryValueConditionalFormattingProperty
     * gaugeChartPrimaryValueConditionalFormattingProperty =
     * GaugeChartPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartprimaryvalueconditionalformatting.html)
     */
    public inline fun cfnDashboardGaugeChartPrimaryValueConditionalFormattingProperty(
        block: CfnDashboardGaugeChartPrimaryValueConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GaugeChartPrimaryValueConditionalFormattingProperty {
        val builder = CfnDashboardGaugeChartPrimaryValueConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A gauge chart.
     *
     * For more information, see
     * [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartvisual.html)
     */
    public inline fun cfnDashboardGaugeChartVisualProperty(
        block: CfnDashboardGaugeChartVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GaugeChartVisualProperty {
        val builder = CfnDashboardGaugeChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The bound options (north, south, west, east) of the geospatial window options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialCoordinateBoundsProperty geospatialCoordinateBoundsProperty =
     * GeospatialCoordinateBoundsProperty.builder()
     * .east(123)
     * .north(123)
     * .south(123)
     * .west(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialcoordinatebounds.html)
     */
    public inline fun cfnDashboardGeospatialCoordinateBoundsProperty(
        block: CfnDashboardGeospatialCoordinateBoundsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GeospatialCoordinateBoundsProperty {
        val builder = CfnDashboardGeospatialCoordinateBoundsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The color scale specification for the heatmap point style.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialHeatmapColorScaleProperty geospatialHeatmapColorScaleProperty =
     * GeospatialHeatmapColorScaleProperty.builder()
     * .colors(List.of(GeospatialHeatmapDataColorProperty.builder()
     * .color("color")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialheatmapcolorscale.html)
     */
    public inline fun cfnDashboardGeospatialHeatmapColorScaleProperty(
        block: CfnDashboardGeospatialHeatmapColorScalePropertyDsl.() -> Unit = {}
    ): CfnDashboard.GeospatialHeatmapColorScaleProperty {
        val builder = CfnDashboardGeospatialHeatmapColorScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The heatmap configuration of the geospatial point style.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialHeatmapConfigurationProperty geospatialHeatmapConfigurationProperty =
     * GeospatialHeatmapConfigurationProperty.builder()
     * .heatmapColor(GeospatialHeatmapColorScaleProperty.builder()
     * .colors(List.of(GeospatialHeatmapDataColorProperty.builder()
     * .color("color")
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialheatmapconfiguration.html)
     */
    public inline fun cfnDashboardGeospatialHeatmapConfigurationProperty(
        block: CfnDashboardGeospatialHeatmapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GeospatialHeatmapConfigurationProperty {
        val builder = CfnDashboardGeospatialHeatmapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The color to be used in the heatmap point style.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialHeatmapDataColorProperty geospatialHeatmapDataColorProperty =
     * GeospatialHeatmapDataColorProperty.builder()
     * .color("color")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialheatmapdatacolor.html)
     */
    public inline fun cfnDashboardGeospatialHeatmapDataColorProperty(
        block: CfnDashboardGeospatialHeatmapDataColorPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GeospatialHeatmapDataColorProperty {
        val builder = CfnDashboardGeospatialHeatmapDataColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells for a geospatial map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardGeospatialMapAggregatedFieldWellsProperty(
        block: CfnDashboardGeospatialMapAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GeospatialMapAggregatedFieldWellsProperty {
        val builder = CfnDashboardGeospatialMapAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `GeospatialMapVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapconfiguration.html)
     */
    public inline fun cfnDashboardGeospatialMapConfigurationProperty(
        block: CfnDashboardGeospatialMapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GeospatialMapConfigurationProperty {
        val builder = CfnDashboardGeospatialMapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a `GeospatialMapVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapfieldwells.html)
     */
    public inline fun cfnDashboardGeospatialMapFieldWellsProperty(
        block: CfnDashboardGeospatialMapFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GeospatialMapFieldWellsProperty {
        val builder = CfnDashboardGeospatialMapFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The map style options of the geospatial map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialMapStyleOptionsProperty geospatialMapStyleOptionsProperty =
     * GeospatialMapStyleOptionsProperty.builder()
     * .baseMapStyle("baseMapStyle")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapstyleoptions.html)
     */
    public inline fun cfnDashboardGeospatialMapStyleOptionsProperty(
        block: CfnDashboardGeospatialMapStyleOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GeospatialMapStyleOptionsProperty {
        val builder = CfnDashboardGeospatialMapStyleOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A geospatial map or a points on map visual.
     *
     * For more information, see
     * [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapvisual.html)
     */
    public inline fun cfnDashboardGeospatialMapVisualProperty(
        block: CfnDashboardGeospatialMapVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GeospatialMapVisualProperty {
        val builder = CfnDashboardGeospatialMapVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The point style of the geospatial map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialPointStyleOptionsProperty geospatialPointStyleOptionsProperty =
     * GeospatialPointStyleOptionsProperty.builder()
     * .clusterMarkerConfiguration(ClusterMarkerConfigurationProperty.builder()
     * .clusterMarker(ClusterMarkerProperty.builder()
     * .simpleClusterMarker(SimpleClusterMarkerProperty.builder()
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .heatmapConfiguration(GeospatialHeatmapConfigurationProperty.builder()
     * .heatmapColor(GeospatialHeatmapColorScaleProperty.builder()
     * .colors(List.of(GeospatialHeatmapDataColorProperty.builder()
     * .color("color")
     * .build()))
     * .build())
     * .build())
     * .selectedPointStyle("selectedPointStyle")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialpointstyleoptions.html)
     */
    public inline fun cfnDashboardGeospatialPointStyleOptionsProperty(
        block: CfnDashboardGeospatialPointStyleOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GeospatialPointStyleOptionsProperty {
        val builder = CfnDashboardGeospatialPointStyleOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The window options of the geospatial map visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialWindowOptionsProperty geospatialWindowOptionsProperty =
     * GeospatialWindowOptionsProperty.builder()
     * .bounds(GeospatialCoordinateBoundsProperty.builder()
     * .east(123)
     * .north(123)
     * .south(123)
     * .west(123)
     * .build())
     * .mapZoomMode("mapZoomMode")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialwindowoptions.html)
     */
    public inline fun cfnDashboardGeospatialWindowOptionsProperty(
        block: CfnDashboardGeospatialWindowOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GeospatialWindowOptionsProperty {
        val builder = CfnDashboardGeospatialWindowOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the border options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GlobalTableBorderOptionsProperty globalTableBorderOptionsProperty =
     * GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-globaltableborderoptions.html)
     */
    public inline fun cfnDashboardGlobalTableBorderOptionsProperty(
        block: CfnDashboardGlobalTableBorderOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GlobalTableBorderOptionsProperty {
        val builder = CfnDashboardGlobalTableBorderOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the gradient color settings.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GradientColorProperty gradientColorProperty = GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gradientcolor.html)
     */
    public inline fun cfnDashboardGradientColorProperty(
        block: CfnDashboardGradientColorPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GradientColorProperty {
        val builder = CfnDashboardGradientColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the gradient stop configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GradientStopProperty gradientStopProperty = GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gradientstop.html)
     */
    public inline fun cfnDashboardGradientStopProperty(
        block: CfnDashboardGradientStopPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GradientStopProperty {
        val builder = CfnDashboardGradientStopPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Configuration options for the canvas of a grid layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GridLayoutCanvasSizeOptionsProperty gridLayoutCanvasSizeOptionsProperty =
     * GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutcanvassizeoptions.html)
     */
    public inline fun cfnDashboardGridLayoutCanvasSizeOptionsProperty(
        block: CfnDashboardGridLayoutCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GridLayoutCanvasSizeOptionsProperty {
        val builder = CfnDashboardGridLayoutCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a grid layout. Also called a tiled layout.
     *
     * Visuals snap to a grid with standard spacing and alignment. Dashboards are displayed as
     * designed, with options to fit to screen or view at actual size.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GridLayoutConfigurationProperty gridLayoutConfigurationProperty =
     * GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutconfiguration.html)
     */
    public inline fun cfnDashboardGridLayoutConfigurationProperty(
        block: CfnDashboardGridLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GridLayoutConfigurationProperty {
        val builder = CfnDashboardGridLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An element within a grid layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GridLayoutElementProperty gridLayoutElementProperty = GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutelement.html)
     */
    public inline fun cfnDashboardGridLayoutElementProperty(
        block: CfnDashboardGridLayoutElementPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GridLayoutElementProperty {
        val builder = CfnDashboardGridLayoutElementPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the sizing of the canvas used in a grid layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GridLayoutScreenCanvasSizeOptionsProperty gridLayoutScreenCanvasSizeOptionsProperty =
     * GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutscreencanvassizeoptions.html)
     */
    public inline fun cfnDashboardGridLayoutScreenCanvasSizeOptionsProperty(
        block: CfnDashboardGridLayoutScreenCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GridLayoutScreenCanvasSizeOptionsProperty {
        val builder = CfnDashboardGridLayoutScreenCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The growth rate computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GrowthRateComputationProperty growthRateComputationProperty =
     * GrowthRateComputationProperty.builder()
     * .computationId("computationId")
     * .time(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * // the properties below are optional
     * .name("name")
     * .periodSize(123)
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-growthratecomputation.html)
     */
    public inline fun cfnDashboardGrowthRateComputationProperty(
        block: CfnDashboardGrowthRateComputationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.GrowthRateComputationProperty {
        val builder = CfnDashboardGrowthRateComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a header or footer section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HeaderFooterSectionConfigurationProperty headerFooterSectionConfigurationProperty =
     * HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-headerfootersectionconfiguration.html)
     */
    public inline fun cfnDashboardHeaderFooterSectionConfigurationProperty(
        block: CfnDashboardHeaderFooterSectionConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.HeaderFooterSectionConfigurationProperty {
        val builder = CfnDashboardHeaderFooterSectionConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells of a heat map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardHeatMapAggregatedFieldWellsProperty(
        block: CfnDashboardHeatMapAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.HeatMapAggregatedFieldWellsProperty {
        val builder = CfnDashboardHeatMapAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a heat map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapconfiguration.html)
     */
    public inline fun cfnDashboardHeatMapConfigurationProperty(
        block: CfnDashboardHeatMapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.HeatMapConfigurationProperty {
        val builder = CfnDashboardHeatMapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a heat map.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapfieldwells.html)
     */
    public inline fun cfnDashboardHeatMapFieldWellsProperty(
        block: CfnDashboardHeatMapFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.HeatMapFieldWellsProperty {
        val builder = CfnDashboardHeatMapFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a heat map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HeatMapSortConfigurationProperty heatMapSortConfigurationProperty =
     * HeatMapSortConfigurationProperty.builder()
     * .heatMapColumnItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .heatMapColumnSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .heatMapRowItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .heatMapRowSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapsortconfiguration.html)
     */
    public inline fun cfnDashboardHeatMapSortConfigurationProperty(
        block: CfnDashboardHeatMapSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.HeatMapSortConfigurationProperty {
        val builder = CfnDashboardHeatMapSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A heat map.
     *
     * For more information, see
     * [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapvisual.html)
     */
    public inline fun cfnDashboardHeatMapVisualProperty(
        block: CfnDashboardHeatMapVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.HeatMapVisualProperty {
        val builder = CfnDashboardHeatMapVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a histogram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HistogramAggregatedFieldWellsProperty histogramAggregatedFieldWellsProperty =
     * HistogramAggregatedFieldWellsProperty.builder()
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardHistogramAggregatedFieldWellsProperty(
        block: CfnDashboardHistogramAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.HistogramAggregatedFieldWellsProperty {
        val builder = CfnDashboardHistogramAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of histogram bins.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HistogramBinOptionsProperty histogramBinOptionsProperty = HistogramBinOptionsProperty.builder()
     * .binCount(BinCountOptionsProperty.builder()
     * .value(123)
     * .build())
     * .binWidth(BinWidthOptionsProperty.builder()
     * .binCountLimit(123)
     * .value(123)
     * .build())
     * .selectedBinType("selectedBinType")
     * .startValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogrambinoptions.html)
     */
    public inline fun cfnDashboardHistogramBinOptionsProperty(
        block: CfnDashboardHistogramBinOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.HistogramBinOptionsProperty {
        val builder = CfnDashboardHistogramBinOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `HistogramVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * HistogramConfigurationProperty histogramConfigurationProperty =
     * HistogramConfigurationProperty.builder()
     * .binOptions(HistogramBinOptionsProperty.builder()
     * .binCount(BinCountOptionsProperty.builder()
     * .value(123)
     * .build())
     * .binWidth(BinWidthOptionsProperty.builder()
     * .binCountLimit(123)
     * .value(123)
     * .build())
     * .selectedBinType("selectedBinType")
     * .startValue(123)
     * .build())
     * .dataLabels(DataLabelOptionsProperty.builder()
     * .categoryLabelVisibility("categoryLabelVisibility")
     * .dataLabelTypes(List.of(DataLabelTypeProperty.builder()
     * .dataPathLabelType(DataPathLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .visibility("visibility")
     * .build())
     * .fieldLabelType(FieldLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .visibility("visibility")
     * .build())
     * .maximumLabelType(MaximumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .minimumLabelType(MinimumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .rangeEndsLabelType(RangeEndsLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build()))
     * .labelColor("labelColor")
     * .labelContent("labelContent")
     * .labelFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .measureLabelVisibility("measureLabelVisibility")
     * .overlap("overlap")
     * .position("position")
     * .totalsVisibility("totalsVisibility")
     * .visibility("visibility")
     * .build())
     * .fieldWells(HistogramFieldWellsProperty.builder()
     * .histogramAggregatedFieldWells(HistogramAggregatedFieldWellsProperty.builder()
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build())
     * .tooltip(TooltipOptionsProperty.builder()
     * .fieldBasedTooltip(FieldBasedTooltipProperty.builder()
     * .aggregationVisibility("aggregationVisibility")
     * .tooltipFields(List.of(TooltipItemProperty.builder()
     * .columnTooltipItem(ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .fieldTooltipItem(FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .build()))
     * .tooltipTitleType("tooltipTitleType")
     * .build())
     * .selectedTooltipType("selectedTooltipType")
     * .tooltipVisibility("tooltipVisibility")
     * .build())
     * .visualPalette(VisualPaletteProperty.builder()
     * .chartColor("chartColor")
     * .colorMap(List.of(DataPathColorProperty.builder()
     * .color("color")
     * .element(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build())
     * // the properties below are optional
     * .timeGranularity("timeGranularity")
     * .build()))
     * .build())
     * .xAxisDisplayOptions(AxisDisplayOptionsProperty.builder()
     * .axisLineVisibility("axisLineVisibility")
     * .axisOffset("axisOffset")
     * .dataOptions(AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build())
     * .gridLineVisibility("gridLineVisibility")
     * .scrollbarOptions(ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build())
     * .tickLabelOptions(AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build())
     * .build())
     * .xAxisLabelOptions(ChartAxisLabelOptionsProperty.builder()
     * .axisLabelOptions(List.of(AxisLabelOptionsProperty.builder()
     * .applyTo(AxisLabelReferenceOptionsProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * .build())
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .build()))
     * .sortIconVisibility("sortIconVisibility")
     * .visibility("visibility")
     * .build())
     * .yAxisDisplayOptions(AxisDisplayOptionsProperty.builder()
     * .axisLineVisibility("axisLineVisibility")
     * .axisOffset("axisOffset")
     * .dataOptions(AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build())
     * .gridLineVisibility("gridLineVisibility")
     * .scrollbarOptions(ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build())
     * .tickLabelOptions(AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramconfiguration.html)
     */
    public inline fun cfnDashboardHistogramConfigurationProperty(
        block: CfnDashboardHistogramConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.HistogramConfigurationProperty {
        val builder = CfnDashboardHistogramConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a histogram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HistogramFieldWellsProperty histogramFieldWellsProperty = HistogramFieldWellsProperty.builder()
     * .histogramAggregatedFieldWells(HistogramAggregatedFieldWellsProperty.builder()
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramfieldwells.html)
     */
    public inline fun cfnDashboardHistogramFieldWellsProperty(
        block: CfnDashboardHistogramFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.HistogramFieldWellsProperty {
        val builder = CfnDashboardHistogramFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A histogram.
     *
     * For more information, see
     * [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramvisual.html)
     */
    public inline fun cfnDashboardHistogramVisualProperty(
        block: CfnDashboardHistogramVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.HistogramVisualProperty {
        val builder = CfnDashboardHistogramVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of an insight visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-insightconfiguration.html)
     */
    public inline fun cfnDashboardInsightConfigurationProperty(
        block: CfnDashboardInsightConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.InsightConfigurationProperty {
        val builder = CfnDashboardInsightConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An insight visual.
     *
     * For more information, see
     * [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-insightvisual.html)
     */
    public inline fun cfnDashboardInsightVisualProperty(
        block: CfnDashboardInsightVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.InsightVisualProperty {
        val builder = CfnDashboardInsightVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The default values of the `IntegerParameterDeclaration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerDefaultValuesProperty integerDefaultValuesProperty =
     * IntegerDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerdefaultvalues.html)
     */
    public inline fun cfnDashboardIntegerDefaultValuesProperty(
        block: CfnDashboardIntegerDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnDashboard.IntegerDefaultValuesProperty {
        val builder = CfnDashboardIntegerDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `Integer` data type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerParameterDeclarationProperty integerParameterDeclarationProperty =
     * IntegerParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(IntegerDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(IntegerValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerparameterdeclaration.html)
     */
    public inline fun cfnDashboardIntegerParameterDeclarationProperty(
        block: CfnDashboardIntegerParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.IntegerParameterDeclarationProperty {
        val builder = CfnDashboardIntegerParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An integer parameter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerParameterProperty integerParameterProperty = IntegerParameterProperty.builder()
     * .name("name")
     * .values(List.of(123))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerparameter.html)
     */
    public inline fun cfnDashboardIntegerParameterProperty(
        block: CfnDashboardIntegerParameterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.IntegerParameterProperty {
        val builder = CfnDashboardIntegerParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `Integer` data type.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerValueWhenUnsetConfigurationProperty integerValueWhenUnsetConfigurationProperty =
     * IntegerValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integervaluewhenunsetconfiguration.html)
     */
    public inline fun cfnDashboardIntegerValueWhenUnsetConfigurationProperty(
        block: CfnDashboardIntegerValueWhenUnsetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.IntegerValueWhenUnsetConfigurationProperty {
        val builder = CfnDashboardIntegerValueWhenUnsetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The limit configuration of the visual display for an axis.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ItemsLimitConfigurationProperty itemsLimitConfigurationProperty =
     * ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-itemslimitconfiguration.html)
     */
    public inline fun cfnDashboardItemsLimitConfigurationProperty(
        block: CfnDashboardItemsLimitConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ItemsLimitConfigurationProperty {
        val builder = CfnDashboardItemsLimitConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting options of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIConditionalFormattingOptionProperty kPIConditionalFormattingOptionProperty =
     * KPIConditionalFormattingOptionProperty.builder()
     * .primaryValue(KPIPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .progressBar(KPIProgressBarConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconditionalformattingoption.html)
     */
    public inline fun cfnDashboardKPIConditionalFormattingOptionProperty(
        block: CfnDashboardKPIConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.KPIConditionalFormattingOptionProperty {
        val builder = CfnDashboardKPIConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIConditionalFormattingProperty kPIConditionalFormattingProperty =
     * KPIConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(KPIConditionalFormattingOptionProperty.builder()
     * .primaryValue(KPIPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .progressBar(KPIProgressBarConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconditionalformatting.html)
     */
    public inline fun cfnDashboardKPIConditionalFormattingProperty(
        block: CfnDashboardKPIConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.KPIConditionalFormattingProperty {
        val builder = CfnDashboardKPIConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a KPI visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconfiguration.html)
     */
    public inline fun cfnDashboardKPIConfigurationProperty(
        block: CfnDashboardKPIConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.KPIConfigurationProperty {
        val builder = CfnDashboardKPIConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a KPI visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpifieldwells.html)
     */
    public inline fun cfnDashboardKPIFieldWellsProperty(
        block: CfnDashboardKPIFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.KPIFieldWellsProperty {
        val builder = CfnDashboardKPIFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIOptionsProperty kPIOptionsProperty = KPIOptionsProperty.builder()
     * .comparison(ComparisonConfigurationProperty.builder()
     * .comparisonFormat(ComparisonFormatConfigurationProperty.builder()
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .comparisonMethod("comparisonMethod")
     * .build())
     * .primaryValueDisplayType("primaryValueDisplayType")
     * .primaryValueFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .progressBar(ProgressBarOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .secondaryValue(SecondaryValueOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .secondaryValueFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .trendArrows(TrendArrowOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpioptions.html)
     */
    public inline fun cfnDashboardKPIOptionsProperty(
        block: CfnDashboardKPIOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.KPIOptionsProperty {
        val builder = CfnDashboardKPIOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for the primary value of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIPrimaryValueConditionalFormattingProperty kPIPrimaryValueConditionalFormattingProperty =
     * KPIPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiprimaryvalueconditionalformatting.html)
     */
    public inline fun cfnDashboardKPIPrimaryValueConditionalFormattingProperty(
        block: CfnDashboardKPIPrimaryValueConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.KPIPrimaryValueConditionalFormattingProperty {
        val builder = CfnDashboardKPIPrimaryValueConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for the progress bar of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIProgressBarConditionalFormattingProperty kPIProgressBarConditionalFormattingProperty =
     * KPIProgressBarConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiprogressbarconditionalformatting.html)
     */
    public inline fun cfnDashboardKPIProgressBarConditionalFormattingProperty(
        block: CfnDashboardKPIProgressBarConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.KPIProgressBarConditionalFormattingProperty {
        val builder = CfnDashboardKPIProgressBarConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPISortConfigurationProperty kPISortConfigurationProperty =
     * KPISortConfigurationProperty.builder()
     * .trendGroupSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpisortconfiguration.html)
     */
    public inline fun cfnDashboardKPISortConfigurationProperty(
        block: CfnDashboardKPISortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.KPISortConfigurationProperty {
        val builder = CfnDashboardKPISortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A key performance indicator (KPI).
     *
     * For more information, see
     * [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisual.html)
     */
    public inline fun cfnDashboardKPIVisualProperty(
        block: CfnDashboardKPIVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.KPIVisualProperty {
        val builder = CfnDashboardKPIVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The share label options for the labels.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LabelOptionsProperty labelOptionsProperty = LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-labeloptions.html)
     */
    public inline fun cfnDashboardLabelOptionsProperty(
        block: CfnDashboardLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LabelOptionsProperty {
        val builder = CfnDashboardLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that determines what the type of layout will be used on a sheet.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LayoutConfigurationProperty layoutConfigurationProperty = LayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .gridLayout(GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .sectionBasedLayout(SectionBasedLayoutConfigurationProperty.builder()
     * .bodySections(List.of(BodySectionConfigurationProperty.builder()
     * .content(BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .pageBreakConfiguration(SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build())
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .footerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .headerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-layoutconfiguration.html)
     */
    public inline fun cfnDashboardLayoutConfigurationProperty(
        block: CfnDashboardLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LayoutConfigurationProperty {
        val builder = CfnDashboardLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `Layout` defines the placement of elements within a sheet.
     *
     * For more information, see
     * [Types of layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LayoutProperty layoutProperty = LayoutProperty.builder()
     * .configuration(LayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .gridLayout(GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .sectionBasedLayout(SectionBasedLayoutConfigurationProperty.builder()
     * .bodySections(List.of(BodySectionConfigurationProperty.builder()
     * .content(BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .pageBreakConfiguration(SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build())
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .footerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .headerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-layout.html)
     */
    public inline fun cfnDashboardLayoutProperty(
        block: CfnDashboardLayoutPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LayoutProperty {
        val builder = CfnDashboardLayoutPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for the legend setup of a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LegendOptionsProperty legendOptionsProperty = LegendOptionsProperty.builder()
     * .height("height")
     * .position("position")
     * .title(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .width("width")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-legendoptions.html)
     */
    public inline fun cfnDashboardLegendOptionsProperty(
        block: CfnDashboardLegendOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LegendOptionsProperty {
        val builder = CfnDashboardLegendOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a line chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardLineChartAggregatedFieldWellsProperty(
        block: CfnDashboardLineChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LineChartAggregatedFieldWellsProperty {
        val builder = CfnDashboardLineChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a line chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html)
     */
    public inline fun cfnDashboardLineChartConfigurationProperty(
        block: CfnDashboardLineChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LineChartConfigurationProperty {
        val builder = CfnDashboardLineChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default presentation of all line series in `LineChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartDefaultSeriesSettingsProperty lineChartDefaultSeriesSettingsProperty =
     * LineChartDefaultSeriesSettingsProperty.builder()
     * .axisBinding("axisBinding")
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartdefaultseriessettings.html)
     */
    public inline fun cfnDashboardLineChartDefaultSeriesSettingsProperty(
        block: CfnDashboardLineChartDefaultSeriesSettingsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LineChartDefaultSeriesSettingsProperty {
        val builder = CfnDashboardLineChartDefaultSeriesSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a line chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartfieldwells.html)
     */
    public inline fun cfnDashboardLineChartFieldWellsProperty(
        block: CfnDashboardLineChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LineChartFieldWellsProperty {
        val builder = CfnDashboardLineChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Line styles options for a line series in `LineChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartLineStyleSettingsProperty lineChartLineStyleSettingsProperty =
     * LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartlinestylesettings.html)
     */
    public inline fun cfnDashboardLineChartLineStyleSettingsProperty(
        block: CfnDashboardLineChartLineStyleSettingsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LineChartLineStyleSettingsProperty {
        val builder = CfnDashboardLineChartLineStyleSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Marker styles options for a line series in `LineChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartMarkerStyleSettingsProperty lineChartMarkerStyleSettingsProperty =
     * LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartmarkerstylesettings.html)
     */
    public inline fun cfnDashboardLineChartMarkerStyleSettingsProperty(
        block: CfnDashboardLineChartMarkerStyleSettingsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LineChartMarkerStyleSettingsProperty {
        val builder = CfnDashboardLineChartMarkerStyleSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of a line series in the visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartSeriesSettingsProperty lineChartSeriesSettingsProperty =
     * LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartseriessettings.html)
     */
    public inline fun cfnDashboardLineChartSeriesSettingsProperty(
        block: CfnDashboardLineChartSeriesSettingsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LineChartSeriesSettingsProperty {
        val builder = CfnDashboardLineChartSeriesSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartSortConfigurationProperty lineChartSortConfigurationProperty =
     * LineChartSortConfigurationProperty.builder()
     * .categoryItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .colorItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .smallMultiplesSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartsortconfiguration.html)
     */
    public inline fun cfnDashboardLineChartSortConfigurationProperty(
        block: CfnDashboardLineChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LineChartSortConfigurationProperty {
        val builder = CfnDashboardLineChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A line chart.
     *
     * For more information, see
     * [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartvisual.html)
     */
    public inline fun cfnDashboardLineChartVisualProperty(
        block: CfnDashboardLineChartVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LineChartVisualProperty {
        val builder = CfnDashboardLineChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The series axis configuration of a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * LineSeriesAxisDisplayOptionsProperty lineSeriesAxisDisplayOptionsProperty =
     * LineSeriesAxisDisplayOptionsProperty.builder()
     * .axisOptions(AxisDisplayOptionsProperty.builder()
     * .axisLineVisibility("axisLineVisibility")
     * .axisOffset("axisOffset")
     * .dataOptions(AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build())
     * .gridLineVisibility("gridLineVisibility")
     * .scrollbarOptions(ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build())
     * .tickLabelOptions(AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build())
     * .build())
     * .missingDataConfigurations(List.of(MissingDataConfigurationProperty.builder()
     * .treatmentOption("treatmentOption")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-lineseriesaxisdisplayoptions.html)
     */
    public inline fun cfnDashboardLineSeriesAxisDisplayOptionsProperty(
        block: CfnDashboardLineSeriesAxisDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LineSeriesAxisDisplayOptionsProperty {
        val builder = CfnDashboardLineSeriesAxisDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ListControlDisplayOptionsProperty listControlDisplayOptionsProperty =
     * ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-listcontroldisplayoptions.html)
     */
    public inline fun cfnDashboardListControlDisplayOptionsProperty(
        block: CfnDashboardListControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ListControlDisplayOptionsProperty {
        val builder = CfnDashboardListControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of the search options in a list control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ListControlSearchOptionsProperty listControlSearchOptionsProperty =
     * ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-listcontrolsearchoptions.html)
     */
    public inline fun cfnDashboardListControlSearchOptionsProperty(
        block: CfnDashboardListControlSearchOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ListControlSearchOptionsProperty {
        val builder = CfnDashboardListControlSearchOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of the `Select all` options in a list control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ListControlSelectAllOptionsProperty listControlSelectAllOptionsProperty =
     * ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-listcontrolselectalloptions.html)
     */
    public inline fun cfnDashboardListControlSelectAllOptionsProperty(
        block: CfnDashboardListControlSelectAllOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ListControlSelectAllOptionsProperty {
        val builder = CfnDashboardListControlSelectAllOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of loading animation in free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LoadingAnimationProperty loadingAnimationProperty = LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-loadinganimation.html)
     */
    public inline fun cfnDashboardLoadingAnimationProperty(
        block: CfnDashboardLoadingAnimationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LoadingAnimationProperty {
        val builder = CfnDashboardLoadingAnimationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The navigation configuration for `CustomActionNavigationOperation` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LocalNavigationConfigurationProperty localNavigationConfigurationProperty =
     * LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-localnavigationconfiguration.html)
     */
    public inline fun cfnDashboardLocalNavigationConfigurationProperty(
        block: CfnDashboardLocalNavigationConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LocalNavigationConfigurationProperty {
        val builder = CfnDashboardLocalNavigationConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The text format for a subtitle.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LongFormatTextProperty longFormatTextProperty = LongFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-longformattext.html)
     */
    public inline fun cfnDashboardLongFormatTextProperty(
        block: CfnDashboardLongFormatTextPropertyDsl.() -> Unit = {}
    ): CfnDashboard.LongFormatTextProperty {
        val builder = CfnDashboardLongFormatTextPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A dataset parameter that is mapped to an analysis parameter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MappedDataSetParameterProperty mappedDataSetParameterProperty =
     * MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-mappeddatasetparameter.html)
     */
    public inline fun cfnDashboardMappedDataSetParameterProperty(
        block: CfnDashboardMappedDataSetParameterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.MappedDataSetParameterProperty {
        val builder = CfnDashboardMappedDataSetParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The maximum label of a data path label.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MaximumLabelTypeProperty maximumLabelTypeProperty = MaximumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-maximumlabeltype.html)
     */
    public inline fun cfnDashboardMaximumLabelTypeProperty(
        block: CfnDashboardMaximumLabelTypePropertyDsl.() -> Unit = {}
    ): CfnDashboard.MaximumLabelTypeProperty {
        val builder = CfnDashboardMaximumLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The maximum and minimum computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MaximumMinimumComputationProperty maximumMinimumComputationProperty =
     * MaximumMinimumComputationProperty.builder()
     * .computationId("computationId")
     * .time(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * .type("type")
     * // the properties below are optional
     * .name("name")
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-maximumminimumcomputation.html)
     */
    public inline fun cfnDashboardMaximumMinimumComputationProperty(
        block: CfnDashboardMaximumMinimumComputationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.MaximumMinimumComputationProperty {
        val builder = CfnDashboardMaximumMinimumComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The measure (metric) type field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MeasureFieldProperty measureFieldProperty = MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-measurefield.html)
     */
    public inline fun cfnDashboardMeasureFieldProperty(
        block: CfnDashboardMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnDashboard.MeasureFieldProperty {
        val builder = CfnDashboardMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The metric comparison computation configuration.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-metriccomparisoncomputation.html)
     */
    public inline fun cfnDashboardMetricComparisonComputationProperty(
        block: CfnDashboardMetricComparisonComputationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.MetricComparisonComputationProperty {
        val builder = CfnDashboardMetricComparisonComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The minimum label of a data path label.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MinimumLabelTypeProperty minimumLabelTypeProperty = MinimumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-minimumlabeltype.html)
     */
    public inline fun cfnDashboardMinimumLabelTypeProperty(
        block: CfnDashboardMinimumLabelTypePropertyDsl.() -> Unit = {}
    ): CfnDashboard.MinimumLabelTypeProperty {
        val builder = CfnDashboardMinimumLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration options that determine how missing data is treated during the rendering of
     * a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MissingDataConfigurationProperty missingDataConfigurationProperty =
     * MissingDataConfigurationProperty.builder()
     * .treatmentOption("treatmentOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-missingdataconfiguration.html)
     */
    public inline fun cfnDashboardMissingDataConfigurationProperty(
        block: CfnDashboardMissingDataConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.MissingDataConfigurationProperty {
        val builder = CfnDashboardMissingDataConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the negative value configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NegativeValueConfigurationProperty negativeValueConfigurationProperty =
     * NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-negativevalueconfiguration.html)
     */
    public inline fun cfnDashboardNegativeValueConfigurationProperty(
        block: CfnDashboardNegativeValueConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NegativeValueConfigurationProperty {
        val builder = CfnDashboardNegativeValueConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the null value format configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NullValueFormatConfigurationProperty nullValueFormatConfigurationProperty =
     * NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-nullvalueformatconfiguration.html)
     */
    public inline fun cfnDashboardNullValueFormatConfigurationProperty(
        block: CfnDashboardNullValueFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NullValueFormatConfigurationProperty {
        val builder = CfnDashboardNullValueFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the number display format configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumberDisplayFormatConfigurationProperty numberDisplayFormatConfigurationProperty =
     * NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numberdisplayformatconfiguration.html)
     */
    public inline fun cfnDashboardNumberDisplayFormatConfigurationProperty(
        block: CfnDashboardNumberDisplayFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NumberDisplayFormatConfigurationProperty {
        val builder = CfnDashboardNumberDisplayFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for number fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumberFormatConfigurationProperty numberFormatConfigurationProperty =
     * NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numberformatconfiguration.html)
     */
    public inline fun cfnDashboardNumberFormatConfigurationProperty(
        block: CfnDashboardNumberFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NumberFormatConfigurationProperty {
        val builder = CfnDashboardNumberFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for an axis with a numeric field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * NumericAxisOptionsProperty numericAxisOptionsProperty = NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericaxisoptions.html)
     */
    public inline fun cfnDashboardNumericAxisOptionsProperty(
        block: CfnDashboardNumericAxisOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NumericAxisOptionsProperty {
        val builder = CfnDashboardNumericAxisOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The category drill down filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericEqualityDrillDownFilterProperty numericEqualityDrillDownFilterProperty =
     * NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalitydrilldownfilter.html)
     */
    public inline fun cfnDashboardNumericEqualityDrillDownFilterProperty(
        block: CfnDashboardNumericEqualityDrillDownFilterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NumericEqualityDrillDownFilterProperty {
        val builder = CfnDashboardNumericEqualityDrillDownFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `NumericEqualityFilter` filters values that are equal to the specified value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericEqualityFilterProperty numericEqualityFilterProperty =
     * NumericEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalityfilter.html)
     */
    public inline fun cfnDashboardNumericEqualityFilterProperty(
        block: CfnDashboardNumericEqualityFilterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NumericEqualityFilterProperty {
        val builder = CfnDashboardNumericEqualityFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the numeric format configuration.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericFormatConfigurationProperty numericFormatConfigurationProperty =
     * NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericformatconfiguration.html)
     */
    public inline fun cfnDashboardNumericFormatConfigurationProperty(
        block: CfnDashboardNumericFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NumericFormatConfigurationProperty {
        val builder = CfnDashboardNumericFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `NumericRangeFilter` filters values that are within the value range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericRangeFilterProperty numericRangeFilterProperty = NumericRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .rangeMinimum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .selectAllOptions("selectAllOptions")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefilter.html)
     */
    public inline fun cfnDashboardNumericRangeFilterProperty(
        block: CfnDashboardNumericRangeFilterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NumericRangeFilterProperty {
        val builder = CfnDashboardNumericRangeFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The value input pf the numeric range filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericRangeFilterValueProperty numericRangeFilterValueProperty =
     * NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefiltervalue.html)
     */
    public inline fun cfnDashboardNumericRangeFilterValueProperty(
        block: CfnDashboardNumericRangeFilterValuePropertyDsl.() -> Unit = {}
    ): CfnDashboard.NumericRangeFilterValueProperty {
        val builder = CfnDashboardNumericRangeFilterValuePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the numeric separator configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericSeparatorConfigurationProperty numericSeparatorConfigurationProperty =
     * NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericseparatorconfiguration.html)
     */
    public inline fun cfnDashboardNumericSeparatorConfigurationProperty(
        block: CfnDashboardNumericSeparatorConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NumericSeparatorConfigurationProperty {
        val builder = CfnDashboardNumericSeparatorConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Aggregation for numerical values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericalAggregationFunctionProperty numericalAggregationFunctionProperty =
     * NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericalaggregationfunction.html)
     */
    public inline fun cfnDashboardNumericalAggregationFunctionProperty(
        block: CfnDashboardNumericalAggregationFunctionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NumericalAggregationFunctionProperty {
        val builder = CfnDashboardNumericalAggregationFunctionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dimension type field with numerical type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericalDimensionFieldProperty numericalDimensionFieldProperty =
     * NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericaldimensionfield.html)
     */
    public inline fun cfnDashboardNumericalDimensionFieldProperty(
        block: CfnDashboardNumericalDimensionFieldPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NumericalDimensionFieldProperty {
        val builder = CfnDashboardNumericalDimensionFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The measure type field with numerical type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericalMeasureFieldProperty numericalMeasureFieldProperty =
     * NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericalmeasurefield.html)
     */
    public inline fun cfnDashboardNumericalMeasureFieldProperty(
        block: CfnDashboardNumericalMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnDashboard.NumericalMeasureFieldProperty {
        val builder = CfnDashboardNumericalMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The pagination configuration for a table visual or boxplot.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PaginationConfigurationProperty paginationConfigurationProperty =
     * PaginationConfigurationProperty.builder()
     * .pageNumber(123)
     * .pageSize(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-paginationconfiguration.html)
     */
    public inline fun cfnDashboardPaginationConfigurationProperty(
        block: CfnDashboardPaginationConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PaginationConfigurationProperty {
        val builder = CfnDashboardPaginationConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A collection of options that configure how each panel displays in a small multiples chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PanelConfigurationProperty panelConfigurationProperty = PanelConfigurationProperty.builder()
     * .backgroundColor("backgroundColor")
     * .backgroundVisibility("backgroundVisibility")
     * .borderColor("borderColor")
     * .borderStyle("borderStyle")
     * .borderThickness("borderThickness")
     * .borderVisibility("borderVisibility")
     * .gutterSpacing("gutterSpacing")
     * .gutterVisibility("gutterVisibility")
     * .title(PanelTitleOptionsProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-panelconfiguration.html)
     */
    public inline fun cfnDashboardPanelConfigurationProperty(
        block: CfnDashboardPanelConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PanelConfigurationProperty {
        val builder = CfnDashboardPanelConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the title styles for each small multiples panel.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PanelTitleOptionsProperty panelTitleOptionsProperty = PanelTitleOptionsProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-paneltitleoptions.html)
     */
    public inline fun cfnDashboardPanelTitleOptionsProperty(
        block: CfnDashboardPanelTitleOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PanelTitleOptionsProperty {
        val builder = CfnDashboardPanelTitleOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The control of a parameter that users can interact with in a dashboard or an analysis.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterControlProperty parameterControlProperty = ParameterControlProperty.builder()
     * .dateTimePicker(ParameterDateTimePickerControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .dropdown(ParameterDropDownControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build())
     * .list(ParameterListControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build())
     * .slider(ParameterSliderControlProperty.builder()
     * .maximumValue(123)
     * .minimumValue(123)
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .stepSize(123)
     * .title("title")
     * // the properties below are optional
     * .displayOptions(SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .textArea(ParameterTextAreaControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .delimiter("delimiter")
     * .displayOptions(TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .textField(ParameterTextFieldControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametercontrol.html)
     */
    public inline fun cfnDashboardParameterControlProperty(
        block: CfnDashboardParameterControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ParameterControlProperty {
        val builder = CfnDashboardParameterControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control from a date parameter that specifies date and time.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterDateTimePickerControlProperty parameterDateTimePickerControlProperty =
     * ParameterDateTimePickerControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdatetimepickercontrol.html)
     */
    public inline fun cfnDashboardParameterDateTimePickerControlProperty(
        block: CfnDashboardParameterDateTimePickerControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ParameterDateTimePickerControlProperty {
        val builder = CfnDashboardParameterDateTimePickerControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The declaration definition of a parameter.
     *
     * For more information, see
     * [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterDeclarationProperty parameterDeclarationProperty =
     * ParameterDeclarationProperty.builder()
     * .dateTimeParameterDeclaration(DateTimeParameterDeclarationProperty.builder()
     * .name("name")
     * // the properties below are optional
     * .defaultValues(DateTimeDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .timeGranularity("timeGranularity")
     * .valueWhenUnset(DateTimeValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build())
     * .decimalParameterDeclaration(DecimalParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(DecimalDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(DecimalValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build())
     * .integerParameterDeclaration(IntegerParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(IntegerDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(IntegerValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build())
     * .stringParameterDeclaration(StringParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(StringDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(StringValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdeclaration.html)
     */
    public inline fun cfnDashboardParameterDeclarationProperty(
        block: CfnDashboardParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ParameterDeclarationProperty {
        val builder = CfnDashboardParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a dropdown list with buttons that are used to select a single value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterDropDownControlProperty parameterDropDownControlProperty =
     * ParameterDropDownControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdropdowncontrol.html)
     */
    public inline fun cfnDashboardParameterDropDownControlProperty(
        block: CfnDashboardParameterDropDownControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ParameterDropDownControlProperty {
        val builder = CfnDashboardParameterDropDownControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a list with buttons or boxes that are used to select either a single
     * value or multiple values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterListControlProperty parameterListControlProperty =
     * ParameterListControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterlistcontrol.html)
     */
    public inline fun cfnDashboardParameterListControlProperty(
        block: CfnDashboardParameterListControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ParameterListControlProperty {
        val builder = CfnDashboardParameterListControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of selectable values that are used in a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterSelectableValuesProperty parameterSelectableValuesProperty =
     * ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterselectablevalues.html)
     */
    public inline fun cfnDashboardParameterSelectableValuesProperty(
        block: CfnDashboardParameterSelectableValuesPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ParameterSelectableValuesProperty {
        val builder = CfnDashboardParameterSelectableValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a horizontal toggle bar.
     *
     * This is used to change a value by sliding the toggle.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterSliderControlProperty parameterSliderControlProperty =
     * ParameterSliderControlProperty.builder()
     * .maximumValue(123)
     * .minimumValue(123)
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .stepSize(123)
     * .title("title")
     * // the properties below are optional
     * .displayOptions(SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterslidercontrol.html)
     */
    public inline fun cfnDashboardParameterSliderControlProperty(
        block: CfnDashboardParameterSliderControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ParameterSliderControlProperty {
        val builder = CfnDashboardParameterSliderControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a text box that is used to enter multiple entries.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterTextAreaControlProperty parameterTextAreaControlProperty =
     * ParameterTextAreaControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .delimiter("delimiter")
     * .displayOptions(TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextareacontrol.html)
     */
    public inline fun cfnDashboardParameterTextAreaControlProperty(
        block: CfnDashboardParameterTextAreaControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ParameterTextAreaControlProperty {
        val builder = CfnDashboardParameterTextAreaControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a text box that is used to enter a single entry.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterTextFieldControlProperty parameterTextFieldControlProperty =
     * ParameterTextFieldControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextfieldcontrol.html)
     */
    public inline fun cfnDashboardParameterTextFieldControlProperty(
        block: CfnDashboardParameterTextFieldControlPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ParameterTextFieldControlProperty {
        val builder = CfnDashboardParameterTextFieldControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of Amazon QuickSight parameters and the list's override values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParametersProperty parametersProperty = ParametersProperty.builder()
     * .dateTimeParameters(List.of(DateTimeParameterProperty.builder()
     * .name("name")
     * .values(List.of("values"))
     * .build()))
     * .decimalParameters(List.of(DecimalParameterProperty.builder()
     * .name("name")
     * .values(List.of(123))
     * .build()))
     * .integerParameters(List.of(IntegerParameterProperty.builder()
     * .name("name")
     * .values(List.of(123))
     * .build()))
     * .stringParameters(List.of(StringParameterProperty.builder()
     * .name("name")
     * .values(List.of("values"))
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameters.html)
     */
    public inline fun cfnDashboardParametersProperty(
        block: CfnDashboardParametersPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ParametersProperty {
        val builder = CfnDashboardParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The percent range in the visible range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PercentVisibleRangeProperty percentVisibleRangeProperty = PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentvisiblerange.html)
     */
    public inline fun cfnDashboardPercentVisibleRangeProperty(
        block: CfnDashboardPercentVisibleRangePropertyDsl.() -> Unit = {}
    ): CfnDashboard.PercentVisibleRangeProperty {
        val builder = CfnDashboardPercentVisibleRangePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the percentage display format configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PercentageDisplayFormatConfigurationProperty percentageDisplayFormatConfigurationProperty =
     * PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentagedisplayformatconfiguration.html)
     */
    public inline fun cfnDashboardPercentageDisplayFormatConfigurationProperty(
        block: CfnDashboardPercentageDisplayFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PercentageDisplayFormatConfigurationProperty {
        val builder = CfnDashboardPercentageDisplayFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An aggregation based on the percentile of values in a dimension or measure.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PercentileAggregationProperty percentileAggregationProperty =
     * PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentileaggregation.html)
     */
    public inline fun cfnDashboardPercentileAggregationProperty(
        block: CfnDashboardPercentileAggregationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PercentileAggregationProperty {
        val builder = CfnDashboardPercentileAggregationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The period over period computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PeriodOverPeriodComputationProperty periodOverPeriodComputationProperty =
     * PeriodOverPeriodComputationProperty.builder()
     * .computationId("computationId")
     * .time(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * // the properties below are optional
     * .name("name")
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodoverperiodcomputation.html)
     */
    public inline fun cfnDashboardPeriodOverPeriodComputationProperty(
        block: CfnDashboardPeriodOverPeriodComputationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PeriodOverPeriodComputationProperty {
        val builder = CfnDashboardPeriodOverPeriodComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The period to date computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PeriodToDateComputationProperty periodToDateComputationProperty =
     * PeriodToDateComputationProperty.builder()
     * .computationId("computationId")
     * .time(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * // the properties below are optional
     * .name("name")
     * .periodTimeGranularity("periodTimeGranularity")
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodtodatecomputation.html)
     */
    public inline fun cfnDashboardPeriodToDateComputationProperty(
        block: CfnDashboardPeriodToDateComputationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PeriodToDateComputationProperty {
        val builder = CfnDashboardPeriodToDateComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a pie chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardPieChartAggregatedFieldWellsProperty(
        block: CfnDashboardPieChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PieChartAggregatedFieldWellsProperty {
        val builder = CfnDashboardPieChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a pie chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html)
     */
    public inline fun cfnDashboardPieChartConfigurationProperty(
        block: CfnDashboardPieChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PieChartConfigurationProperty {
        val builder = CfnDashboardPieChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a pie chart.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartfieldwells.html)
     */
    public inline fun cfnDashboardPieChartFieldWellsProperty(
        block: CfnDashboardPieChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PieChartFieldWellsProperty {
        val builder = CfnDashboardPieChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a pie chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PieChartSortConfigurationProperty pieChartSortConfigurationProperty =
     * PieChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .smallMultiplesSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartsortconfiguration.html)
     */
    public inline fun cfnDashboardPieChartSortConfigurationProperty(
        block: CfnDashboardPieChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PieChartSortConfigurationProperty {
        val builder = CfnDashboardPieChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A pie or donut chart.
     *
     * The `PieChartVisual` structure describes a visual that is a member of the pie chart family.
     *
     * The following charts can be described by using this structure:
     * * Pie charts
     * * Donut charts
     *
     * For more information, see
     * [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * For more information, see
     * [Using donut charts](https://docs.aws.amazon.com/quicksight/latest/user/donut-chart.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartvisual.html)
     */
    public inline fun cfnDashboardPieChartVisualProperty(
        block: CfnDashboardPieChartVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PieChartVisualProperty {
        val builder = CfnDashboardPieChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field sort options for a pivot table sort configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotFieldSortOptionsProperty pivotFieldSortOptionsProperty =
     * PivotFieldSortOptionsProperty.builder()
     * .fieldId("fieldId")
     * .sortBy(PivotTableSortByProperty.builder()
     * .column(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .dataPath(DataPathSortProperty.builder()
     * .direction("direction")
     * .sortPaths(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .build())
     * .field(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivotfieldsortoptions.html)
     */
    public inline fun cfnDashboardPivotFieldSortOptionsProperty(
        block: CfnDashboardPivotFieldSortOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotFieldSortOptionsProperty {
        val builder = CfnDashboardPivotFieldSortOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well for the pivot table.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardPivotTableAggregatedFieldWellsProperty(
        block: CfnDashboardPivotTableAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableAggregatedFieldWellsProperty {
        val builder = CfnDashboardPivotTableAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The cell conditional formatting option for a pivot table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableCellConditionalFormattingProperty pivotTableCellConditionalFormattingProperty =
     * PivotTableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .scope(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build())
     * .scopes(List.of(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build()))
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablecellconditionalformatting.html)
     */
    public inline fun cfnDashboardPivotTableCellConditionalFormattingProperty(
        block: CfnDashboardPivotTableCellConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableCellConditionalFormattingProperty {
        val builder = CfnDashboardPivotTableCellConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Conditional formatting options for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableConditionalFormattingOptionProperty pivotTableConditionalFormattingOptionProperty =
     * PivotTableConditionalFormattingOptionProperty.builder()
     * .cell(PivotTableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .scope(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build())
     * .scopes(List.of(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build()))
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconditionalformattingoption.html)
     */
    public inline fun cfnDashboardPivotTableConditionalFormattingOptionProperty(
        block: CfnDashboardPivotTableConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableConditionalFormattingOptionProperty {
        val builder = CfnDashboardPivotTableConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableConditionalFormattingProperty pivotTableConditionalFormattingProperty =
     * PivotTableConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(PivotTableConditionalFormattingOptionProperty.builder()
     * .cell(PivotTableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .scope(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build())
     * .scopes(List.of(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build()))
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconditionalformatting.html)
     */
    public inline fun cfnDashboardPivotTableConditionalFormattingProperty(
        block: CfnDashboardPivotTableConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableConditionalFormattingProperty {
        val builder = CfnDashboardPivotTableConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The scope of the cell for conditional formatting.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableConditionalFormattingScopeProperty pivotTableConditionalFormattingScopeProperty =
     * PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconditionalformattingscope.html)
     */
    public inline fun cfnDashboardPivotTableConditionalFormattingScopeProperty(
        block: CfnDashboardPivotTableConditionalFormattingScopePropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableConditionalFormattingScopeProperty {
        val builder = CfnDashboardPivotTableConditionalFormattingScopePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconfiguration.html)
     */
    public inline fun cfnDashboardPivotTableConfigurationProperty(
        block: CfnDashboardPivotTableConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableConfigurationProperty {
        val builder = CfnDashboardPivotTableConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data path options for the pivot table field options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableDataPathOptionProperty pivotTableDataPathOptionProperty =
     * PivotTableDataPathOptionProperty.builder()
     * .dataPathList(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * // the properties below are optional
     * .width("width")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottabledatapathoption.html)
     */
    public inline fun cfnDashboardPivotTableDataPathOptionProperty(
        block: CfnDashboardPivotTableDataPathOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableDataPathOptionProperty {
        val builder = CfnDashboardPivotTableDataPathOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The collapse state options for the pivot table field options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldCollapseStateOptionProperty pivotTableFieldCollapseStateOptionProperty =
     * PivotTableFieldCollapseStateOptionProperty.builder()
     * .target(PivotTableFieldCollapseStateTargetProperty.builder()
     * .fieldDataPathValues(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .fieldId("fieldId")
     * .build())
     * // the properties below are optional
     * .state("state")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldcollapsestateoption.html)
     */
    public inline fun cfnDashboardPivotTableFieldCollapseStateOptionProperty(
        block: CfnDashboardPivotTableFieldCollapseStateOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableFieldCollapseStateOptionProperty {
        val builder = CfnDashboardPivotTableFieldCollapseStateOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The target of a pivot table field collapse state.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldCollapseStateTargetProperty pivotTableFieldCollapseStateTargetProperty =
     * PivotTableFieldCollapseStateTargetProperty.builder()
     * .fieldDataPathValues(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldcollapsestatetarget.html)
     */
    public inline fun cfnDashboardPivotTableFieldCollapseStateTargetProperty(
        block: CfnDashboardPivotTableFieldCollapseStateTargetPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableFieldCollapseStateTargetProperty {
        val builder = CfnDashboardPivotTableFieldCollapseStateTargetPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The selected field options for the pivot table field options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldOptionProperty pivotTableFieldOptionProperty =
     * PivotTableFieldOptionProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .customLabel("customLabel")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldoption.html)
     */
    public inline fun cfnDashboardPivotTableFieldOptionProperty(
        block: CfnDashboardPivotTableFieldOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableFieldOptionProperty {
        val builder = CfnDashboardPivotTableFieldOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field options for a pivot table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldOptionsProperty pivotTableFieldOptionsProperty =
     * PivotTableFieldOptionsProperty.builder()
     * .collapseStateOptions(List.of(PivotTableFieldCollapseStateOptionProperty.builder()
     * .target(PivotTableFieldCollapseStateTargetProperty.builder()
     * .fieldDataPathValues(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .fieldId("fieldId")
     * .build())
     * // the properties below are optional
     * .state("state")
     * .build()))
     * .dataPathOptions(List.of(PivotTableDataPathOptionProperty.builder()
     * .dataPathList(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * // the properties below are optional
     * .width("width")
     * .build()))
     * .selectedFieldOptions(List.of(PivotTableFieldOptionProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .customLabel("customLabel")
     * .visibility("visibility")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldoptions.html)
     */
    public inline fun cfnDashboardPivotTableFieldOptionsProperty(
        block: CfnDashboardPivotTableFieldOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableFieldOptionsProperty {
        val builder = CfnDashboardPivotTableFieldOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The optional configuration of subtotals cells.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldSubtotalOptionsProperty pivotTableFieldSubtotalOptionsProperty =
     * PivotTableFieldSubtotalOptionsProperty.builder()
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldsubtotaloptions.html)
     */
    public inline fun cfnDashboardPivotTableFieldSubtotalOptionsProperty(
        block: CfnDashboardPivotTableFieldSubtotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableFieldSubtotalOptionsProperty {
        val builder = CfnDashboardPivotTableFieldSubtotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells for a pivot table visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldwells.html)
     */
    public inline fun cfnDashboardPivotTableFieldWellsProperty(
        block: CfnDashboardPivotTableFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableFieldWellsProperty {
        val builder = CfnDashboardPivotTableFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The table options for a pivot table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableOptionsProperty pivotTableOptionsProperty = PivotTableOptionsProperty.builder()
     * .cellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .collapsedRowDimensionsVisibility("collapsedRowDimensionsVisibility")
     * .columnHeaderStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .columnNamesVisibility("columnNamesVisibility")
     * .metricPlacement("metricPlacement")
     * .rowAlternateColorOptions(RowAlternateColorOptionsProperty.builder()
     * .rowAlternateColors(List.of("rowAlternateColors"))
     * .status("status")
     * .build())
     * .rowFieldNamesStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .rowHeaderStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .singleMetricVisibility("singleMetricVisibility")
     * .toggleButtonsVisibility("toggleButtonsVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html)
     */
    public inline fun cfnDashboardPivotTableOptionsProperty(
        block: CfnDashboardPivotTableOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableOptionsProperty {
        val builder = CfnDashboardPivotTableOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The paginated report options for a pivot table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTablePaginatedReportOptionsProperty pivotTablePaginatedReportOptionsProperty =
     * PivotTablePaginatedReportOptionsProperty.builder()
     * .overflowColumnHeaderVisibility("overflowColumnHeaderVisibility")
     * .verticalOverflowVisibility("verticalOverflowVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablepaginatedreportoptions.html)
     */
    public inline fun cfnDashboardPivotTablePaginatedReportOptionsProperty(
        block: CfnDashboardPivotTablePaginatedReportOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTablePaginatedReportOptionsProperty {
        val builder = CfnDashboardPivotTablePaginatedReportOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort by field for the field sort options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableSortByProperty pivotTableSortByProperty = PivotTableSortByProperty.builder()
     * .column(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .dataPath(DataPathSortProperty.builder()
     * .direction("direction")
     * .sortPaths(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .build())
     * .field(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablesortby.html)
     */
    public inline fun cfnDashboardPivotTableSortByProperty(
        block: CfnDashboardPivotTableSortByPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableSortByProperty {
        val builder = CfnDashboardPivotTableSortByPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableSortConfigurationProperty pivotTableSortConfigurationProperty =
     * PivotTableSortConfigurationProperty.builder()
     * .fieldSortOptions(List.of(PivotFieldSortOptionsProperty.builder()
     * .fieldId("fieldId")
     * .sortBy(PivotTableSortByProperty.builder()
     * .column(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .dataPath(DataPathSortProperty.builder()
     * .direction("direction")
     * .sortPaths(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .build())
     * .field(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablesortconfiguration.html)
     */
    public inline fun cfnDashboardPivotTableSortConfigurationProperty(
        block: CfnDashboardPivotTableSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableSortConfigurationProperty {
        val builder = CfnDashboardPivotTableSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The total options for a pivot table visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottabletotaloptions.html)
     */
    public inline fun cfnDashboardPivotTableTotalOptionsProperty(
        block: CfnDashboardPivotTableTotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableTotalOptionsProperty {
        val builder = CfnDashboardPivotTableTotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A pivot table.
     *
     * For more information, see
     * [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablevisual.html)
     */
    public inline fun cfnDashboardPivotTableVisualProperty(
        block: CfnDashboardPivotTableVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTableVisualProperty {
        val builder = CfnDashboardPivotTableVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The optional configuration of totals cells in a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTotalOptionsProperty pivotTotalOptionsProperty = PivotTotalOptionsProperty.builder()
     * .customLabel("customLabel")
     * .metricHeaderCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .placement("placement")
     * .scrollStatus("scrollStatus")
     * .totalCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .totalsVisibility("totalsVisibility")
     * .valueCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottotaloptions.html)
     */
    public inline fun cfnDashboardPivotTotalOptionsProperty(
        block: CfnDashboardPivotTotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PivotTotalOptionsProperty {
        val builder = CfnDashboardPivotTotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the hierarchy of the fields that are defined during data
     * preparation.
     *
     * These fields are available to use in any analysis that uses the data source.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PredefinedHierarchyProperty predefinedHierarchyProperty = PredefinedHierarchyProperty.builder()
     * .columns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-predefinedhierarchy.html)
     */
    public inline fun cfnDashboardPredefinedHierarchyProperty(
        block: CfnDashboardPredefinedHierarchyPropertyDsl.() -> Unit = {}
    ): CfnDashboard.PredefinedHierarchyProperty {
        val builder = CfnDashboardPredefinedHierarchyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the progress bar of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ProgressBarOptionsProperty progressBarOptionsProperty = ProgressBarOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-progressbaroptions.html)
     */
    public inline fun cfnDashboardProgressBarOptionsProperty(
        block: CfnDashboardProgressBarOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ProgressBarOptionsProperty {
        val builder = CfnDashboardProgressBarOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Properties for defining a `CfnDashboard`.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html)
     */
    public inline fun cfnDashboardProps(
        block: CfnDashboardPropsDsl.() -> Unit = {}
    ): CfnDashboardProps {
        val builder = CfnDashboardPropsDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well configuration of a `RadarChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardRadarChartAggregatedFieldWellsProperty(
        block: CfnDashboardRadarChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.RadarChartAggregatedFieldWellsProperty {
        val builder = CfnDashboardRadarChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configured style settings of a radar chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RadarChartAreaStyleSettingsProperty radarChartAreaStyleSettingsProperty =
     * RadarChartAreaStyleSettingsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartareastylesettings.html)
     */
    public inline fun cfnDashboardRadarChartAreaStyleSettingsProperty(
        block: CfnDashboardRadarChartAreaStyleSettingsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.RadarChartAreaStyleSettingsProperty {
        val builder = CfnDashboardRadarChartAreaStyleSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `RadarChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html)
     */
    public inline fun cfnDashboardRadarChartConfigurationProperty(
        block: CfnDashboardRadarChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.RadarChartConfigurationProperty {
        val builder = CfnDashboardRadarChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a radar chart visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartfieldwells.html)
     */
    public inline fun cfnDashboardRadarChartFieldWellsProperty(
        block: CfnDashboardRadarChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.RadarChartFieldWellsProperty {
        val builder = CfnDashboardRadarChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The series settings of a radar chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RadarChartSeriesSettingsProperty radarChartSeriesSettingsProperty =
     * RadarChartSeriesSettingsProperty.builder()
     * .areaStyleSettings(RadarChartAreaStyleSettingsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartseriessettings.html)
     */
    public inline fun cfnDashboardRadarChartSeriesSettingsProperty(
        block: CfnDashboardRadarChartSeriesSettingsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.RadarChartSeriesSettingsProperty {
        val builder = CfnDashboardRadarChartSeriesSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `RadarChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RadarChartSortConfigurationProperty radarChartSortConfigurationProperty =
     * RadarChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .colorItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .colorSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartsortconfiguration.html)
     */
    public inline fun cfnDashboardRadarChartSortConfigurationProperty(
        block: CfnDashboardRadarChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.RadarChartSortConfigurationProperty {
        val builder = CfnDashboardRadarChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A radar chart visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartvisual.html)
     */
    public inline fun cfnDashboardRadarChartVisualProperty(
        block: CfnDashboardRadarChartVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.RadarChartVisualProperty {
        val builder = CfnDashboardRadarChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The range ends label type of a data path label.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RangeEndsLabelTypeProperty rangeEndsLabelTypeProperty = RangeEndsLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-rangeendslabeltype.html)
     */
    public inline fun cfnDashboardRangeEndsLabelTypeProperty(
        block: CfnDashboardRangeEndsLabelTypePropertyDsl.() -> Unit = {}
    ): CfnDashboard.RangeEndsLabelTypeProperty {
        val builder = CfnDashboardRangeEndsLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a custom label on a `ReferenceLine` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineCustomLabelConfigurationProperty referenceLineCustomLabelConfigurationProperty =
     * ReferenceLineCustomLabelConfigurationProperty.builder()
     * .customLabel("customLabel")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinecustomlabelconfiguration.html)
     */
    public inline fun cfnDashboardReferenceLineCustomLabelConfigurationProperty(
        block: CfnDashboardReferenceLineCustomLabelConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ReferenceLineCustomLabelConfigurationProperty {
        val builder = CfnDashboardReferenceLineCustomLabelConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data configuration of the reference line.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineDataConfigurationProperty referenceLineDataConfigurationProperty =
     * ReferenceLineDataConfigurationProperty.builder()
     * .axisBinding("axisBinding")
     * .dynamicConfiguration(ReferenceLineDynamicDataConfigurationProperty.builder()
     * .calculation(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .measureAggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .staticConfiguration(ReferenceLineStaticDataConfigurationProperty.builder()
     * .value(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinedataconfiguration.html)
     */
    public inline fun cfnDashboardReferenceLineDataConfigurationProperty(
        block: CfnDashboardReferenceLineDataConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ReferenceLineDataConfigurationProperty {
        val builder = CfnDashboardReferenceLineDataConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dynamic configuration of the reference line data configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineDynamicDataConfigurationProperty referenceLineDynamicDataConfigurationProperty =
     * ReferenceLineDynamicDataConfigurationProperty.builder()
     * .calculation(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .measureAggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinedynamicdataconfiguration.html)
     */
    public inline fun cfnDashboardReferenceLineDynamicDataConfigurationProperty(
        block: CfnDashboardReferenceLineDynamicDataConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ReferenceLineDynamicDataConfigurationProperty {
        val builder = CfnDashboardReferenceLineDynamicDataConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The label configuration of a reference line.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineLabelConfigurationProperty referenceLineLabelConfigurationProperty =
     * ReferenceLineLabelConfigurationProperty.builder()
     * .customLabelConfiguration(ReferenceLineCustomLabelConfigurationProperty.builder()
     * .customLabel("customLabel")
     * .build())
     * .fontColor("fontColor")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalPosition("horizontalPosition")
     * .valueLabelConfiguration(ReferenceLineValueLabelConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .relativePosition("relativePosition")
     * .build())
     * .verticalPosition("verticalPosition")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinelabelconfiguration.html)
     */
    public inline fun cfnDashboardReferenceLineLabelConfigurationProperty(
        block: CfnDashboardReferenceLineLabelConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ReferenceLineLabelConfigurationProperty {
        val builder = CfnDashboardReferenceLineLabelConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The reference line visual display options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineProperty referenceLineProperty = ReferenceLineProperty.builder()
     * .dataConfiguration(ReferenceLineDataConfigurationProperty.builder()
     * .axisBinding("axisBinding")
     * .dynamicConfiguration(ReferenceLineDynamicDataConfigurationProperty.builder()
     * .calculation(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .measureAggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .staticConfiguration(ReferenceLineStaticDataConfigurationProperty.builder()
     * .value(123)
     * .build())
     * .build())
     * // the properties below are optional
     * .labelConfiguration(ReferenceLineLabelConfigurationProperty.builder()
     * .customLabelConfiguration(ReferenceLineCustomLabelConfigurationProperty.builder()
     * .customLabel("customLabel")
     * .build())
     * .fontColor("fontColor")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalPosition("horizontalPosition")
     * .valueLabelConfiguration(ReferenceLineValueLabelConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .relativePosition("relativePosition")
     * .build())
     * .verticalPosition("verticalPosition")
     * .build())
     * .status("status")
     * .styleConfiguration(ReferenceLineStyleConfigurationProperty.builder()
     * .color("color")
     * .pattern("pattern")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referenceline.html)
     */
    public inline fun cfnDashboardReferenceLineProperty(
        block: CfnDashboardReferenceLinePropertyDsl.() -> Unit = {}
    ): CfnDashboard.ReferenceLineProperty {
        val builder = CfnDashboardReferenceLinePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The static data configuration of the reference line data configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineStaticDataConfigurationProperty referenceLineStaticDataConfigurationProperty =
     * ReferenceLineStaticDataConfigurationProperty.builder()
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinestaticdataconfiguration.html)
     */
    public inline fun cfnDashboardReferenceLineStaticDataConfigurationProperty(
        block: CfnDashboardReferenceLineStaticDataConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ReferenceLineStaticDataConfigurationProperty {
        val builder = CfnDashboardReferenceLineStaticDataConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The style configuration of the reference line.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineStyleConfigurationProperty referenceLineStyleConfigurationProperty =
     * ReferenceLineStyleConfigurationProperty.builder()
     * .color("color")
     * .pattern("pattern")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinestyleconfiguration.html)
     */
    public inline fun cfnDashboardReferenceLineStyleConfigurationProperty(
        block: CfnDashboardReferenceLineStyleConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ReferenceLineStyleConfigurationProperty {
        val builder = CfnDashboardReferenceLineStyleConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The value label configuration of the label in a reference line.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineValueLabelConfigurationProperty referenceLineValueLabelConfigurationProperty =
     * ReferenceLineValueLabelConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .relativePosition("relativePosition")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinevaluelabelconfiguration.html)
     */
    public inline fun cfnDashboardReferenceLineValueLabelConfigurationProperty(
        block: CfnDashboardReferenceLineValueLabelConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ReferenceLineValueLabelConfigurationProperty {
        val builder = CfnDashboardReferenceLineValueLabelConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RelativeDateTimeControlDisplayOptionsProperty relativeDateTimeControlDisplayOptionsProperty =
     * RelativeDateTimeControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatetimecontroldisplayoptions.html)
     */
    public inline fun cfnDashboardRelativeDateTimeControlDisplayOptionsProperty(
        block: CfnDashboardRelativeDateTimeControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.RelativeDateTimeControlDisplayOptionsProperty {
        val builder = CfnDashboardRelativeDateTimeControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `RelativeDatesFilter` filters relative dates values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RelativeDatesFilterProperty relativeDatesFilterProperty = RelativeDatesFilterProperty.builder()
     * .anchorDateConfiguration(AnchorDateConfigurationProperty.builder()
     * .anchorOption("anchorOption")
     * .parameterName("parameterName")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * .relativeDateType("relativeDateType")
     * .timeGranularity("timeGranularity")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .minimumGranularity("minimumGranularity")
     * .parameterName("parameterName")
     * .relativeDateValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatesfilter.html)
     */
    public inline fun cfnDashboardRelativeDatesFilterProperty(
        block: CfnDashboardRelativeDatesFilterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.RelativeDatesFilterProperty {
        val builder = CfnDashboardRelativeDatesFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Permission for the resource.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ResourcePermissionProperty resourcePermissionProperty = ResourcePermissionProperty.builder()
     * .actions(List.of("actions"))
     * .principal("principal")
     * // the properties below are optional
     * .resource("resource")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-resourcepermission.html)
     */
    public inline fun cfnDashboardResourcePermissionProperty(
        block: CfnDashboardResourcePermissionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ResourcePermissionProperty {
        val builder = CfnDashboardResourcePermissionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The rolling date configuration of a date time filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RollingDateConfigurationProperty rollingDateConfigurationProperty =
     * RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-rollingdateconfiguration.html)
     */
    public inline fun cfnDashboardRollingDateConfigurationProperty(
        block: CfnDashboardRollingDateConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.RollingDateConfigurationProperty {
        val builder = CfnDashboardRollingDateConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the row alternate color options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RowAlternateColorOptionsProperty rowAlternateColorOptionsProperty =
     * RowAlternateColorOptionsProperty.builder()
     * .rowAlternateColors(List.of("rowAlternateColors"))
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-rowalternatecoloroptions.html)
     */
    public inline fun cfnDashboardRowAlternateColorOptionsProperty(
        block: CfnDashboardRowAlternateColorOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.RowAlternateColorOptionsProperty {
        val builder = CfnDashboardRowAlternateColorOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of the same-sheet target visuals that you want to be filtered.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SameSheetTargetVisualConfigurationProperty sameSheetTargetVisualConfigurationProperty =
     * SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-samesheettargetvisualconfiguration.html)
     */
    public inline fun cfnDashboardSameSheetTargetVisualConfigurationProperty(
        block: CfnDashboardSameSheetTargetVisualConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SameSheetTargetVisualConfigurationProperty {
        val builder = CfnDashboardSameSheetTargetVisualConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a sankey diagram.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardSankeyDiagramAggregatedFieldWellsProperty(
        block: CfnDashboardSankeyDiagramAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SankeyDiagramAggregatedFieldWellsProperty {
        val builder = CfnDashboardSankeyDiagramAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a sankey diagram.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramchartconfiguration.html)
     */
    public inline fun cfnDashboardSankeyDiagramChartConfigurationProperty(
        block: CfnDashboardSankeyDiagramChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SankeyDiagramChartConfigurationProperty {
        val builder = CfnDashboardSankeyDiagramChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a sankey diagram.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramfieldwells.html)
     */
    public inline fun cfnDashboardSankeyDiagramFieldWellsProperty(
        block: CfnDashboardSankeyDiagramFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SankeyDiagramFieldWellsProperty {
        val builder = CfnDashboardSankeyDiagramFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a sankey diagram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SankeyDiagramSortConfigurationProperty sankeyDiagramSortConfigurationProperty =
     * SankeyDiagramSortConfigurationProperty.builder()
     * .destinationItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .sourceItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .weightSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramsortconfiguration.html)
     */
    public inline fun cfnDashboardSankeyDiagramSortConfigurationProperty(
        block: CfnDashboardSankeyDiagramSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SankeyDiagramSortConfigurationProperty {
        val builder = CfnDashboardSankeyDiagramSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A sankey diagram.
     *
     * For more information, see
     * [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramvisual.html)
     */
    public inline fun cfnDashboardSankeyDiagramVisualProperty(
        block: CfnDashboardSankeyDiagramVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SankeyDiagramVisualProperty {
        val builder = CfnDashboardSankeyDiagramVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well of a scatter plot.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotcategoricallyaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardScatterPlotCategoricallyAggregatedFieldWellsProperty(
        block: CfnDashboardScatterPlotCategoricallyAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ScatterPlotCategoricallyAggregatedFieldWellsProperty {
        val builder = CfnDashboardScatterPlotCategoricallyAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a scatter plot.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotconfiguration.html)
     */
    public inline fun cfnDashboardScatterPlotConfigurationProperty(
        block: CfnDashboardScatterPlotConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ScatterPlotConfigurationProperty {
        val builder = CfnDashboardScatterPlotConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a scatter plot.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotfieldwells.html)
     */
    public inline fun cfnDashboardScatterPlotFieldWellsProperty(
        block: CfnDashboardScatterPlotFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ScatterPlotFieldWellsProperty {
        val builder = CfnDashboardScatterPlotFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The unaggregated field wells of a scatter plot.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotunaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardScatterPlotUnaggregatedFieldWellsProperty(
        block: CfnDashboardScatterPlotUnaggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ScatterPlotUnaggregatedFieldWellsProperty {
        val builder = CfnDashboardScatterPlotUnaggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A scatter plot.
     *
     * For more information, see
     * [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotvisual.html)
     */
    public inline fun cfnDashboardScatterPlotVisualProperty(
        block: CfnDashboardScatterPlotVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ScatterPlotVisualProperty {
        val builder = CfnDashboardScatterPlotVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The visual display options for a data zoom scroll bar.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ScrollBarOptionsProperty scrollBarOptionsProperty = ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scrollbaroptions.html)
     */
    public inline fun cfnDashboardScrollBarOptionsProperty(
        block: CfnDashboardScrollBarOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ScrollBarOptionsProperty {
        val builder = CfnDashboardScrollBarOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the secondary value of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SecondaryValueOptionsProperty secondaryValueOptionsProperty =
     * SecondaryValueOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-secondaryvalueoptions.html)
     */
    public inline fun cfnDashboardSecondaryValueOptionsProperty(
        block: CfnDashboardSecondaryValueOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SecondaryValueOptionsProperty {
        val builder = CfnDashboardSecondaryValueOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a page break after a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionAfterPageBreakProperty sectionAfterPageBreakProperty =
     * SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionafterpagebreak.html)
     */
    public inline fun cfnDashboardSectionAfterPageBreakProperty(
        block: CfnDashboardSectionAfterPageBreakPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SectionAfterPageBreakProperty {
        val builder = CfnDashboardSectionAfterPageBreakPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for the canvas of a section-based layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionBasedLayoutCanvasSizeOptionsProperty sectionBasedLayoutCanvasSizeOptionsProperty =
     * SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutcanvassizeoptions.html)
     */
    public inline fun cfnDashboardSectionBasedLayoutCanvasSizeOptionsProperty(
        block: CfnDashboardSectionBasedLayoutCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SectionBasedLayoutCanvasSizeOptionsProperty {
        val builder = CfnDashboardSectionBasedLayoutCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a section-based layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionBasedLayoutConfigurationProperty sectionBasedLayoutConfigurationProperty =
     * SectionBasedLayoutConfigurationProperty.builder()
     * .bodySections(List.of(BodySectionConfigurationProperty.builder()
     * .content(BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .pageBreakConfiguration(SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build())
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .footerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .headerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutconfiguration.html)
     */
    public inline fun cfnDashboardSectionBasedLayoutConfigurationProperty(
        block: CfnDashboardSectionBasedLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SectionBasedLayoutConfigurationProperty {
        val builder = CfnDashboardSectionBasedLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for a paper canvas of a section-based layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionBasedLayoutPaperCanvasSizeOptionsProperty
     * sectionBasedLayoutPaperCanvasSizeOptionsProperty =
     * SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutpapercanvassizeoptions.html)
     */
    public inline fun cfnDashboardSectionBasedLayoutPaperCanvasSizeOptionsProperty(
        block: CfnDashboardSectionBasedLayoutPaperCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SectionBasedLayoutPaperCanvasSizeOptionsProperty {
        val builder = CfnDashboardSectionBasedLayoutPaperCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The layout configuration of a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionLayoutConfigurationProperty sectionLayoutConfigurationProperty =
     * SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionlayoutconfiguration.html)
     */
    public inline fun cfnDashboardSectionLayoutConfigurationProperty(
        block: CfnDashboardSectionLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SectionLayoutConfigurationProperty {
        val builder = CfnDashboardSectionLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a page break for a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionPageBreakConfigurationProperty sectionPageBreakConfigurationProperty =
     * SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionpagebreakconfiguration.html)
     */
    public inline fun cfnDashboardSectionPageBreakConfigurationProperty(
        block: CfnDashboardSectionPageBreakConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SectionPageBreakConfigurationProperty {
        val builder = CfnDashboardSectionPageBreakConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that style a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionStyleProperty sectionStyleProperty = SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionstyle.html)
     */
    public inline fun cfnDashboardSectionStyleProperty(
        block: CfnDashboardSectionStylePropertyDsl.() -> Unit = {}
    ): CfnDashboard.SectionStyleProperty {
        val builder = CfnDashboardSectionStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for applying a filter to specific sheets or visuals.
     *
     * You can apply this filter to multiple visuals that are on one sheet or to all visuals on a
     * sheet.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SelectedSheetsFilterScopeConfigurationProperty selectedSheetsFilterScopeConfigurationProperty =
     * SelectedSheetsFilterScopeConfigurationProperty.builder()
     * .sheetVisualScopingConfigurations(List.of(SheetVisualScopingConfigurationProperty.builder()
     * .scope("scope")
     * .sheetId("sheetId")
     * // the properties below are optional
     * .visualIds(List.of("visualIds"))
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-selectedsheetsfilterscopeconfiguration.html)
     */
    public inline fun cfnDashboardSelectedSheetsFilterScopeConfigurationProperty(
        block: CfnDashboardSelectedSheetsFilterScopeConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SelectedSheetsFilterScopeConfigurationProperty {
        val builder = CfnDashboardSelectedSheetsFilterScopeConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The series item configuration of a line chart.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SeriesItemProperty seriesItemProperty = SeriesItemProperty.builder()
     * .dataFieldSeriesItem(DataFieldSeriesItemProperty.builder()
     * .axisBinding("axisBinding")
     * .fieldId("fieldId")
     * // the properties below are optional
     * .fieldValue("fieldValue")
     * .settings(LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build())
     * .build())
     * .fieldSeriesItem(FieldSeriesItemProperty.builder()
     * .axisBinding("axisBinding")
     * .fieldId("fieldId")
     * // the properties below are optional
     * .settings(LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-seriesitem.html)
     */
    public inline fun cfnDashboardSeriesItemProperty(
        block: CfnDashboardSeriesItemPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SeriesItemProperty {
        val builder = CfnDashboardSeriesItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of adding parameters in action.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SetParameterValueConfigurationProperty setParameterValueConfigurationProperty =
     * SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-setparametervalueconfiguration.html)
     */
    public inline fun cfnDashboardSetParameterValueConfigurationProperty(
        block: CfnDashboardSetParameterValueConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SetParameterValueConfigurationProperty {
        val builder = CfnDashboardSetParameterValueConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The shape conditional formatting of a filled map visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ShapeConditionalFormatProperty shapeConditionalFormatProperty =
     * ShapeConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-shapeconditionalformat.html)
     */
    public inline fun cfnDashboardShapeConditionalFormatProperty(
        block: CfnDashboardShapeConditionalFormatPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ShapeConditionalFormatProperty {
        val builder = CfnDashboardShapeConditionalFormatPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that determines the elements and canvas size options of sheet control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetControlLayoutConfigurationProperty sheetControlLayoutConfigurationProperty =
     * SheetControlLayoutConfigurationProperty.builder()
     * .gridLayout(GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetcontrollayoutconfiguration.html)
     */
    public inline fun cfnDashboardSheetControlLayoutConfigurationProperty(
        block: CfnDashboardSheetControlLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SheetControlLayoutConfigurationProperty {
        val builder = CfnDashboardSheetControlLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A grid layout to define the placement of sheet control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetControlLayoutProperty sheetControlLayoutProperty = SheetControlLayoutProperty.builder()
     * .configuration(SheetControlLayoutConfigurationProperty.builder()
     * .gridLayout(GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetcontrollayout.html)
     */
    public inline fun cfnDashboardSheetControlLayoutProperty(
        block: CfnDashboardSheetControlLayoutPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SheetControlLayoutProperty {
        val builder = CfnDashboardSheetControlLayoutPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Sheet controls option.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetControlsOptionProperty sheetControlsOptionProperty = SheetControlsOptionProperty.builder()
     * .visibilityState("visibilityState")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetcontrolsoption.html)
     */
    public inline fun cfnDashboardSheetControlsOptionProperty(
        block: CfnDashboardSheetControlsOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SheetControlsOptionProperty {
        val builder = CfnDashboardSheetControlsOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A sheet is an object that contains a set of visuals that are viewed together on one page in a
     * paginated report.
     *
     * Every analysis and dashboard must contain at least one sheet.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html)
     */
    public inline fun cfnDashboardSheetDefinitionProperty(
        block: CfnDashboardSheetDefinitionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SheetDefinitionProperty {
        val builder = CfnDashboardSheetDefinitionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The override configuration of the rendering rules of a sheet.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetElementConfigurationOverridesProperty sheetElementConfigurationOverridesProperty =
     * SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetelementconfigurationoverrides.html)
     */
    public inline fun cfnDashboardSheetElementConfigurationOverridesProperty(
        block: CfnDashboardSheetElementConfigurationOverridesPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SheetElementConfigurationOverridesProperty {
        val builder = CfnDashboardSheetElementConfigurationOverridesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The rendering rules of a sheet that uses a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetElementRenderingRuleProperty sheetElementRenderingRuleProperty =
     * SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetelementrenderingrule.html)
     */
    public inline fun cfnDashboardSheetElementRenderingRuleProperty(
        block: CfnDashboardSheetElementRenderingRulePropertyDsl.() -> Unit = {}
    ): CfnDashboard.SheetElementRenderingRuleProperty {
        val builder = CfnDashboardSheetElementRenderingRulePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sheet layout maximization options of a dashbaord.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetLayoutElementMaximizationOptionProperty sheetLayoutElementMaximizationOptionProperty =
     * SheetLayoutElementMaximizationOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetlayoutelementmaximizationoption.html)
     */
    public inline fun cfnDashboardSheetLayoutElementMaximizationOptionProperty(
        block: CfnDashboardSheetLayoutElementMaximizationOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SheetLayoutElementMaximizationOptionProperty {
        val builder = CfnDashboardSheetLayoutElementMaximizationOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A *sheet* , which is an object that contains a set of visuals that are viewed together on one
     * page in Amazon QuickSight.
     *
     * Every analysis and dashboard contains at least one sheet. Each sheet contains at least one
     * visualization widget, for example a chart, pivot table, or narrative insight. Sheets can be
     * associated with other components, such as controls, filters, and so on.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetProperty sheetProperty = SheetProperty.builder()
     * .name("name")
     * .sheetId("sheetId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheet.html)
     */
    public inline fun cfnDashboardSheetProperty(
        block: CfnDashboardSheetPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SheetProperty {
        val builder = CfnDashboardSheetPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A text box.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetTextBoxProperty sheetTextBoxProperty = SheetTextBoxProperty.builder()
     * .sheetTextBoxId("sheetTextBoxId")
     * // the properties below are optional
     * .content("content")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheettextbox.html)
     */
    public inline fun cfnDashboardSheetTextBoxProperty(
        block: CfnDashboardSheetTextBoxPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SheetTextBoxProperty {
        val builder = CfnDashboardSheetTextBoxPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The filter that is applied to the options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetVisualScopingConfigurationProperty sheetVisualScopingConfigurationProperty =
     * SheetVisualScopingConfigurationProperty.builder()
     * .scope("scope")
     * .sheetId("sheetId")
     * // the properties below are optional
     * .visualIds(List.of("visualIds"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetvisualscopingconfiguration.html)
     */
    public inline fun cfnDashboardSheetVisualScopingConfigurationProperty(
        block: CfnDashboardSheetVisualScopingConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SheetVisualScopingConfigurationProperty {
        val builder = CfnDashboardSheetVisualScopingConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The text format for the title.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ShortFormatTextProperty shortFormatTextProperty = ShortFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-shortformattext.html)
     */
    public inline fun cfnDashboardShortFormatTextProperty(
        block: CfnDashboardShortFormatTextPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ShortFormatTextProperty {
        val builder = CfnDashboardShortFormatTextPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The simple cluster marker of the cluster marker.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SimpleClusterMarkerProperty simpleClusterMarkerProperty = SimpleClusterMarkerProperty.builder()
     * .color("color")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-simpleclustermarker.html)
     */
    public inline fun cfnDashboardSimpleClusterMarkerProperty(
        block: CfnDashboardSimpleClusterMarkerPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SimpleClusterMarkerProperty {
        val builder = CfnDashboardSimpleClusterMarkerPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SliderControlDisplayOptionsProperty sliderControlDisplayOptionsProperty =
     * SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-slidercontroldisplayoptions.html)
     */
    public inline fun cfnDashboardSliderControlDisplayOptionsProperty(
        block: CfnDashboardSliderControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SliderControlDisplayOptionsProperty {
        val builder = CfnDashboardSliderControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Options that determine the layout and display options of a chart's small multiples.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SmallMultiplesOptionsProperty smallMultiplesOptionsProperty =
     * SmallMultiplesOptionsProperty.builder()
     * .maxVisibleColumns(123)
     * .maxVisibleRows(123)
     * .panelConfiguration(PanelConfigurationProperty.builder()
     * .backgroundColor("backgroundColor")
     * .backgroundVisibility("backgroundVisibility")
     * .borderColor("borderColor")
     * .borderStyle("borderStyle")
     * .borderThickness("borderThickness")
     * .borderVisibility("borderVisibility")
     * .gutterSpacing("gutterSpacing")
     * .gutterVisibility("gutterVisibility")
     * .title(PanelTitleOptionsProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-smallmultiplesoptions.html)
     */
    public inline fun cfnDashboardSmallMultiplesOptionsProperty(
        block: CfnDashboardSmallMultiplesOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SmallMultiplesOptionsProperty {
        val builder = CfnDashboardSmallMultiplesOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of spacing (often a margin or padding).
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SpacingProperty spacingProperty = SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-spacing.html)
     */
    public inline fun cfnDashboardSpacingProperty(
        block: CfnDashboardSpacingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SpacingProperty {
        val builder = CfnDashboardSpacingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The default values of the `StringParameterDeclaration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringDefaultValuesProperty stringDefaultValuesProperty = StringDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringdefaultvalues.html)
     */
    public inline fun cfnDashboardStringDefaultValuesProperty(
        block: CfnDashboardStringDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnDashboard.StringDefaultValuesProperty {
        val builder = CfnDashboardStringDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for string fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringFormatConfigurationProperty stringFormatConfigurationProperty =
     * StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringformatconfiguration.html)
     */
    public inline fun cfnDashboardStringFormatConfigurationProperty(
        block: CfnDashboardStringFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.StringFormatConfigurationProperty {
        val builder = CfnDashboardStringFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `String` data type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringParameterDeclarationProperty stringParameterDeclarationProperty =
     * StringParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(StringDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(StringValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringparameterdeclaration.html)
     */
    public inline fun cfnDashboardStringParameterDeclarationProperty(
        block: CfnDashboardStringParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.StringParameterDeclarationProperty {
        val builder = CfnDashboardStringParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A string parameter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringParameterProperty stringParameterProperty = StringParameterProperty.builder()
     * .name("name")
     * .values(List.of("values"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringparameter.html)
     */
    public inline fun cfnDashboardStringParameterProperty(
        block: CfnDashboardStringParameterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.StringParameterProperty {
        val builder = CfnDashboardStringParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that defines the default value of a `String` parameter when a value has not
     * been set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringValueWhenUnsetConfigurationProperty stringValueWhenUnsetConfigurationProperty =
     * StringValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringvaluewhenunsetconfiguration.html)
     */
    public inline fun cfnDashboardStringValueWhenUnsetConfigurationProperty(
        block: CfnDashboardStringValueWhenUnsetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.StringValueWhenUnsetConfigurationProperty {
        val builder = CfnDashboardStringValueWhenUnsetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The subtotal options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SubtotalOptionsProperty subtotalOptionsProperty = SubtotalOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fieldLevel("fieldLevel")
     * .fieldLevelOptions(List.of(PivotTableFieldSubtotalOptionsProperty.builder()
     * .fieldId("fieldId")
     * .build()))
     * .metricHeaderCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .totalCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .totalsVisibility("totalsVisibility")
     * .valueCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-subtotaloptions.html)
     */
    public inline fun cfnDashboardSubtotalOptionsProperty(
        block: CfnDashboardSubtotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.SubtotalOptionsProperty {
        val builder = CfnDashboardSubtotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well for the table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableAggregatedFieldWellsProperty tableAggregatedFieldWellsProperty =
     * TableAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardTableAggregatedFieldWellsProperty(
        block: CfnDashboardTableAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableAggregatedFieldWellsProperty {
        val builder = CfnDashboardTableAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The border options for a table border.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableBorderOptionsProperty tableBorderOptionsProperty = TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableborderoptions.html)
     */
    public inline fun cfnDashboardTableBorderOptionsProperty(
        block: CfnDashboardTableBorderOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableBorderOptionsProperty {
        val builder = CfnDashboardTableBorderOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The cell conditional formatting option for a table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableCellConditionalFormattingProperty tableCellConditionalFormattingProperty =
     * TableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellconditionalformatting.html)
     */
    public inline fun cfnDashboardTableCellConditionalFormattingProperty(
        block: CfnDashboardTableCellConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableCellConditionalFormattingProperty {
        val builder = CfnDashboardTableCellConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sizing options for the table image configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableCellImageSizingConfigurationProperty tableCellImageSizingConfigurationProperty =
     * TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellimagesizingconfiguration.html)
     */
    public inline fun cfnDashboardTableCellImageSizingConfigurationProperty(
        block: CfnDashboardTableCellImageSizingConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableCellImageSizingConfigurationProperty {
        val builder = CfnDashboardTableCellImageSizingConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The table cell style for a cell in pivot table or table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableCellStyleProperty tableCellStyleProperty = TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellstyle.html)
     */
    public inline fun cfnDashboardTableCellStyleProperty(
        block: CfnDashboardTableCellStylePropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableCellStyleProperty {
        val builder = CfnDashboardTableCellStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Conditional formatting options for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableConditionalFormattingOptionProperty tableConditionalFormattingOptionProperty =
     * TableConditionalFormattingOptionProperty.builder()
     * .cell(TableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .row(TableRowConditionalFormattingProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconditionalformattingoption.html)
     */
    public inline fun cfnDashboardTableConditionalFormattingOptionProperty(
        block: CfnDashboardTableConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableConditionalFormattingOptionProperty {
        val builder = CfnDashboardTableConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableConditionalFormattingProperty tableConditionalFormattingProperty =
     * TableConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(TableConditionalFormattingOptionProperty.builder()
     * .cell(TableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .row(TableRowConditionalFormattingProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconditionalformatting.html)
     */
    public inline fun cfnDashboardTableConditionalFormattingProperty(
        block: CfnDashboardTableConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableConditionalFormattingProperty {
        val builder = CfnDashboardTableConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `TableVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconfiguration.html)
     */
    public inline fun cfnDashboardTableConfigurationProperty(
        block: CfnDashboardTableConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableConfigurationProperty {
        val builder = CfnDashboardTableConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The custom icon content for the table link content configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldCustomIconContentProperty tableFieldCustomIconContentProperty =
     * TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldcustomiconcontent.html)
     */
    public inline fun cfnDashboardTableFieldCustomIconContentProperty(
        block: CfnDashboardTableFieldCustomIconContentPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableFieldCustomIconContentProperty {
        val builder = CfnDashboardTableFieldCustomIconContentPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The custom text content (value, font configuration) for the table link content configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldCustomTextContentProperty tableFieldCustomTextContentProperty =
     * TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldcustomtextcontent.html)
     */
    public inline fun cfnDashboardTableFieldCustomTextContentProperty(
        block: CfnDashboardTableFieldCustomTextContentPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableFieldCustomTextContentProperty {
        val builder = CfnDashboardTableFieldCustomTextContentPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The image configuration of a table field URL.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldImageConfigurationProperty tableFieldImageConfigurationProperty =
     * TableFieldImageConfigurationProperty.builder()
     * .sizingOptions(TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldimageconfiguration.html)
     */
    public inline fun cfnDashboardTableFieldImageConfigurationProperty(
        block: CfnDashboardTableFieldImageConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableFieldImageConfigurationProperty {
        val builder = CfnDashboardTableFieldImageConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The link configuration of a table field URL.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldLinkConfigurationProperty tableFieldLinkConfigurationProperty =
     * TableFieldLinkConfigurationProperty.builder()
     * .content(TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build())
     * .target("target")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldlinkconfiguration.html)
     */
    public inline fun cfnDashboardTableFieldLinkConfigurationProperty(
        block: CfnDashboardTableFieldLinkConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableFieldLinkConfigurationProperty {
        val builder = CfnDashboardTableFieldLinkConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The URL content (text, icon) for the table link configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldLinkContentConfigurationProperty tableFieldLinkContentConfigurationProperty =
     * TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldlinkcontentconfiguration.html)
     */
    public inline fun cfnDashboardTableFieldLinkContentConfigurationProperty(
        block: CfnDashboardTableFieldLinkContentConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableFieldLinkContentConfigurationProperty {
        val builder = CfnDashboardTableFieldLinkContentConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for a table field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldOptionProperty tableFieldOptionProperty = TableFieldOptionProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .customLabel("customLabel")
     * .urlStyling(TableFieldURLConfigurationProperty.builder()
     * .imageConfiguration(TableFieldImageConfigurationProperty.builder()
     * .sizingOptions(TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build())
     * .build())
     * .linkConfiguration(TableFieldLinkConfigurationProperty.builder()
     * .content(TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build())
     * .target("target")
     * .build())
     * .build())
     * .visibility("visibility")
     * .width("width")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldoption.html)
     */
    public inline fun cfnDashboardTableFieldOptionProperty(
        block: CfnDashboardTableFieldOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableFieldOptionProperty {
        val builder = CfnDashboardTableFieldOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldOptionsProperty tableFieldOptionsProperty = TableFieldOptionsProperty.builder()
     * .order(List.of("order"))
     * .selectedFieldOptions(List.of(TableFieldOptionProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .customLabel("customLabel")
     * .urlStyling(TableFieldURLConfigurationProperty.builder()
     * .imageConfiguration(TableFieldImageConfigurationProperty.builder()
     * .sizingOptions(TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build())
     * .build())
     * .linkConfiguration(TableFieldLinkConfigurationProperty.builder()
     * .content(TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build())
     * .target("target")
     * .build())
     * .build())
     * .visibility("visibility")
     * .width("width")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldoptions.html)
     */
    public inline fun cfnDashboardTableFieldOptionsProperty(
        block: CfnDashboardTableFieldOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableFieldOptionsProperty {
        val builder = CfnDashboardTableFieldOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The URL configuration for a table field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldURLConfigurationProperty tableFieldURLConfigurationProperty =
     * TableFieldURLConfigurationProperty.builder()
     * .imageConfiguration(TableFieldImageConfigurationProperty.builder()
     * .sizingOptions(TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build())
     * .build())
     * .linkConfiguration(TableFieldLinkConfigurationProperty.builder()
     * .content(TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build())
     * .target("target")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldurlconfiguration.html)
     */
    public inline fun cfnDashboardTableFieldURLConfigurationProperty(
        block: CfnDashboardTableFieldURLConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableFieldURLConfigurationProperty {
        val builder = CfnDashboardTableFieldURLConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells for a table visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldwells.html)
     */
    public inline fun cfnDashboardTableFieldWellsProperty(
        block: CfnDashboardTableFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableFieldWellsProperty {
        val builder = CfnDashboardTableFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The inline visualization of a specific type to display within a chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableInlineVisualizationProperty tableInlineVisualizationProperty =
     * TableInlineVisualizationProperty.builder()
     * .dataBars(DataBarsOptionsProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .negativeColor("negativeColor")
     * .positiveColor("positiveColor")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableinlinevisualization.html)
     */
    public inline fun cfnDashboardTableInlineVisualizationProperty(
        block: CfnDashboardTableInlineVisualizationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableInlineVisualizationProperty {
        val builder = CfnDashboardTableInlineVisualizationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The table options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableOptionsProperty tableOptionsProperty = TableOptionsProperty.builder()
     * .cellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .headerStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .orientation("orientation")
     * .rowAlternateColorOptions(RowAlternateColorOptionsProperty.builder()
     * .rowAlternateColors(List.of("rowAlternateColors"))
     * .status("status")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableoptions.html)
     */
    public inline fun cfnDashboardTableOptionsProperty(
        block: CfnDashboardTableOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableOptionsProperty {
        val builder = CfnDashboardTableOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The paginated report options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TablePaginatedReportOptionsProperty tablePaginatedReportOptionsProperty =
     * TablePaginatedReportOptionsProperty.builder()
     * .overflowColumnHeaderVisibility("overflowColumnHeaderVisibility")
     * .verticalOverflowVisibility("verticalOverflowVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablepaginatedreportoptions.html)
     */
    public inline fun cfnDashboardTablePaginatedReportOptionsProperty(
        block: CfnDashboardTablePaginatedReportOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TablePaginatedReportOptionsProperty {
        val builder = CfnDashboardTablePaginatedReportOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting of a table row.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableRowConditionalFormattingProperty tableRowConditionalFormattingProperty =
     * TableRowConditionalFormattingProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablerowconditionalformatting.html)
     */
    public inline fun cfnDashboardTableRowConditionalFormattingProperty(
        block: CfnDashboardTableRowConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableRowConditionalFormattingProperty {
        val builder = CfnDashboardTableRowConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The side border options for a table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableSideBorderOptionsProperty tableSideBorderOptionsProperty =
     * TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablesideborderoptions.html)
     */
    public inline fun cfnDashboardTableSideBorderOptionsProperty(
        block: CfnDashboardTableSideBorderOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableSideBorderOptionsProperty {
        val builder = CfnDashboardTableSideBorderOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration for a `TableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableSortConfigurationProperty tableSortConfigurationProperty =
     * TableSortConfigurationProperty.builder()
     * .paginationConfiguration(PaginationConfigurationProperty.builder()
     * .pageNumber(123)
     * .pageSize(123)
     * .build())
     * .rowSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablesortconfiguration.html)
     */
    public inline fun cfnDashboardTableSortConfigurationProperty(
        block: CfnDashboardTableSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableSortConfigurationProperty {
        val builder = CfnDashboardTableSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The unaggregated field well for the table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableUnaggregatedFieldWellsProperty tableUnaggregatedFieldWellsProperty =
     * TableUnaggregatedFieldWellsProperty.builder()
     * .values(List.of(UnaggregatedFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(FormatConfigurationProperty.builder()
     * .dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .numberFormatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .stringFormatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableunaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardTableUnaggregatedFieldWellsProperty(
        block: CfnDashboardTableUnaggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableUnaggregatedFieldWellsProperty {
        val builder = CfnDashboardTableUnaggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A table visual.
     *
     * For more information, see
     * [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablevisual.html)
     */
    public inline fun cfnDashboardTableVisualProperty(
        block: CfnDashboardTableVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TableVisualProperty {
        val builder = CfnDashboardTableVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TextAreaControlDisplayOptionsProperty textAreaControlDisplayOptionsProperty =
     * TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textareacontroldisplayoptions.html)
     */
    public inline fun cfnDashboardTextAreaControlDisplayOptionsProperty(
        block: CfnDashboardTextAreaControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TextAreaControlDisplayOptionsProperty {
        val builder = CfnDashboardTextAreaControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for the text.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TextConditionalFormatProperty textConditionalFormatProperty =
     * TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textconditionalformat.html)
     */
    public inline fun cfnDashboardTextConditionalFormatProperty(
        block: CfnDashboardTextConditionalFormatPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TextConditionalFormatProperty {
        val builder = CfnDashboardTextConditionalFormatPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of the placeholder options in a text control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TextControlPlaceholderOptionsProperty textControlPlaceholderOptionsProperty =
     * TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textcontrolplaceholderoptions.html)
     */
    public inline fun cfnDashboardTextControlPlaceholderOptionsProperty(
        block: CfnDashboardTextControlPlaceholderOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TextControlPlaceholderOptionsProperty {
        val builder = CfnDashboardTextControlPlaceholderOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TextFieldControlDisplayOptionsProperty textFieldControlDisplayOptionsProperty =
     * TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textfieldcontroldisplayoptions.html)
     */
    public inline fun cfnDashboardTextFieldControlDisplayOptionsProperty(
        block: CfnDashboardTextFieldControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TextFieldControlDisplayOptionsProperty {
        val builder = CfnDashboardTextFieldControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the thousands separator configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ThousandSeparatorOptionsProperty thousandSeparatorOptionsProperty =
     * ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-thousandseparatoroptions.html)
     */
    public inline fun cfnDashboardThousandSeparatorOptionsProperty(
        block: CfnDashboardThousandSeparatorOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.ThousandSeparatorOptionsProperty {
        val builder = CfnDashboardThousandSeparatorOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The forecast properties setup of a forecast in the line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeBasedForecastPropertiesProperty timeBasedForecastPropertiesProperty =
     * TimeBasedForecastPropertiesProperty.builder()
     * .lowerBoundary(123)
     * .periodsBackward(123)
     * .periodsForward(123)
     * .predictionInterval(123)
     * .seasonality(123)
     * .upperBoundary(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timebasedforecastproperties.html)
     */
    public inline fun cfnDashboardTimeBasedForecastPropertiesProperty(
        block: CfnDashboardTimeBasedForecastPropertiesPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TimeBasedForecastPropertiesProperty {
        val builder = CfnDashboardTimeBasedForecastPropertiesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `TimeEqualityFilter` filters values that are equal to a given value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeEqualityFilterProperty timeEqualityFilterProperty = TimeEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .value("value")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timeequalityfilter.html)
     */
    public inline fun cfnDashboardTimeEqualityFilterProperty(
        block: CfnDashboardTimeEqualityFilterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TimeEqualityFilterProperty {
        val builder = CfnDashboardTimeEqualityFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The time range drill down filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeRangeDrillDownFilterProperty timeRangeDrillDownFilterProperty =
     * TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangedrilldownfilter.html)
     */
    public inline fun cfnDashboardTimeRangeDrillDownFilterProperty(
        block: CfnDashboardTimeRangeDrillDownFilterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TimeRangeDrillDownFilterProperty {
        val builder = CfnDashboardTimeRangeDrillDownFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `TimeRangeFilter` filters values that are between two specified values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeRangeFilterProperty timeRangeFilterProperty = TimeRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .rangeMinimumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefilter.html)
     */
    public inline fun cfnDashboardTimeRangeFilterProperty(
        block: CfnDashboardTimeRangeFilterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TimeRangeFilterProperty {
        val builder = CfnDashboardTimeRangeFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The value of a time range filter.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeRangeFilterValueProperty timeRangeFilterValueProperty =
     * TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefiltervalue.html)
     */
    public inline fun cfnDashboardTimeRangeFilterValueProperty(
        block: CfnDashboardTimeRangeFilterValuePropertyDsl.() -> Unit = {}
    ): CfnDashboard.TimeRangeFilterValueProperty {
        val builder = CfnDashboardTimeRangeFilterValuePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The tooltip.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TooltipItemProperty tooltipItemProperty = TooltipItemProperty.builder()
     * .columnTooltipItem(ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .fieldTooltipItem(FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tooltipitem.html)
     */
    public inline fun cfnDashboardTooltipItemProperty(
        block: CfnDashboardTooltipItemPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TooltipItemProperty {
        val builder = CfnDashboardTooltipItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options for the visual tooltip.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TooltipOptionsProperty tooltipOptionsProperty = TooltipOptionsProperty.builder()
     * .fieldBasedTooltip(FieldBasedTooltipProperty.builder()
     * .aggregationVisibility("aggregationVisibility")
     * .tooltipFields(List.of(TooltipItemProperty.builder()
     * .columnTooltipItem(ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .fieldTooltipItem(FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .build()))
     * .tooltipTitleType("tooltipTitleType")
     * .build())
     * .selectedTooltipType("selectedTooltipType")
     * .tooltipVisibility("tooltipVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tooltipoptions.html)
     */
    public inline fun cfnDashboardTooltipOptionsProperty(
        block: CfnDashboardTooltipOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TooltipOptionsProperty {
        val builder = CfnDashboardTooltipOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `TopBottomFilter` filters values that are at the top or the bottom.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopBottomFilterProperty topBottomFilterProperty = TopBottomFilterProperty.builder()
     * .aggregationSortConfigurations(List.of(AggregationSortConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sortDirection("sortDirection")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build()))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .limit(123)
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomfilter.html)
     */
    public inline fun cfnDashboardTopBottomFilterProperty(
        block: CfnDashboardTopBottomFilterPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TopBottomFilterProperty {
        val builder = CfnDashboardTopBottomFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The top movers and bottom movers computation setup.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottommoverscomputation.html)
     */
    public inline fun cfnDashboardTopBottomMoversComputationProperty(
        block: CfnDashboardTopBottomMoversComputationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TopBottomMoversComputationProperty {
        val builder = CfnDashboardTopBottomMoversComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The top ranked and bottom ranked computation configuration.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomrankedcomputation.html)
     */
    public inline fun cfnDashboardTopBottomRankedComputationProperty(
        block: CfnDashboardTopBottomRankedComputationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TopBottomRankedComputationProperty {
        val builder = CfnDashboardTopBottomRankedComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The total aggregation computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TotalAggregationComputationProperty totalAggregationComputationProperty =
     * TotalAggregationComputationProperty.builder()
     * .computationId("computationId")
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * // the properties below are optional
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totalaggregationcomputation.html)
     */
    public inline fun cfnDashboardTotalAggregationComputationProperty(
        block: CfnDashboardTotalAggregationComputationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TotalAggregationComputationProperty {
        val builder = CfnDashboardTotalAggregationComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The total options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TotalOptionsProperty totalOptionsProperty = TotalOptionsProperty.builder()
     * .customLabel("customLabel")
     * .placement("placement")
     * .scrollStatus("scrollStatus")
     * .totalCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .totalsVisibility("totalsVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totaloptions.html)
     */
    public inline fun cfnDashboardTotalOptionsProperty(
        block: CfnDashboardTotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TotalOptionsProperty {
        val builder = CfnDashboardTotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Aggregated field wells of a tree map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardTreeMapAggregatedFieldWellsProperty(
        block: CfnDashboardTreeMapAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TreeMapAggregatedFieldWellsProperty {
        val builder = CfnDashboardTreeMapAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a tree map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapconfiguration.html)
     */
    public inline fun cfnDashboardTreeMapConfigurationProperty(
        block: CfnDashboardTreeMapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TreeMapConfigurationProperty {
        val builder = CfnDashboardTreeMapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a tree map.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapfieldwells.html)
     */
    public inline fun cfnDashboardTreeMapFieldWellsProperty(
        block: CfnDashboardTreeMapFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TreeMapFieldWellsProperty {
        val builder = CfnDashboardTreeMapFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a tree map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TreeMapSortConfigurationProperty treeMapSortConfigurationProperty =
     * TreeMapSortConfigurationProperty.builder()
     * .treeMapGroupItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .treeMapSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapsortconfiguration.html)
     */
    public inline fun cfnDashboardTreeMapSortConfigurationProperty(
        block: CfnDashboardTreeMapSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TreeMapSortConfigurationProperty {
        val builder = CfnDashboardTreeMapSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A tree map.
     *
     * For more information, see
     * [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapvisual.html)
     */
    public inline fun cfnDashboardTreeMapVisualProperty(
        block: CfnDashboardTreeMapVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TreeMapVisualProperty {
        val builder = CfnDashboardTreeMapVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of trend arrows in a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TrendArrowOptionsProperty trendArrowOptionsProperty = TrendArrowOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-trendarrowoptions.html)
     */
    public inline fun cfnDashboardTrendArrowOptionsProperty(
        block: CfnDashboardTrendArrowOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.TrendArrowOptionsProperty {
        val builder = CfnDashboardTrendArrowOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The unaggregated field for a table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * UnaggregatedFieldProperty unaggregatedFieldProperty = UnaggregatedFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(FormatConfigurationProperty.builder()
     * .dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .numberFormatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .stringFormatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-unaggregatedfield.html)
     */
    public inline fun cfnDashboardUnaggregatedFieldProperty(
        block: CfnDashboardUnaggregatedFieldPropertyDsl.() -> Unit = {}
    ): CfnDashboard.UnaggregatedFieldProperty {
        val builder = CfnDashboardUnaggregatedFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The unique values computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * UniqueValuesComputationProperty uniqueValuesComputationProperty =
     * UniqueValuesComputationProperty.builder()
     * .category(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * .computationId("computationId")
     * // the properties below are optional
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-uniquevaluescomputation.html)
     */
    public inline fun cfnDashboardUniqueValuesComputationProperty(
        block: CfnDashboardUniqueValuesComputationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.UniqueValuesComputationProperty {
        val builder = CfnDashboardUniqueValuesComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The range options for the data zoom scroll bar.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisibleRangeOptionsProperty visibleRangeOptionsProperty = VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visiblerangeoptions.html)
     */
    public inline fun cfnDashboardVisibleRangeOptionsProperty(
        block: CfnDashboardVisibleRangeOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.VisibleRangeOptionsProperty {
        val builder = CfnDashboardVisibleRangeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The axis sort options for a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualAxisSortOptionProperty visualAxisSortOptionProperty =
     * VisualAxisSortOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualaxissortoption.html)
     */
    public inline fun cfnDashboardVisualAxisSortOptionProperty(
        block: CfnDashboardVisualAxisSortOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.VisualAxisSortOptionProperty {
        val builder = CfnDashboardVisualAxisSortOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The operation that is defined by the custom action.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualCustomActionOperationProperty visualCustomActionOperationProperty =
     * VisualCustomActionOperationProperty.builder()
     * .filterOperation(CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build())
     * .navigationOperation(CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build())
     * .setParametersOperation(CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build())
     * .urlOperation(CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomactionoperation.html)
     */
    public inline fun cfnDashboardVisualCustomActionOperationProperty(
        block: CfnDashboardVisualCustomActionOperationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.VisualCustomActionOperationProperty {
        val builder = CfnDashboardVisualCustomActionOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A custom action defined on a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualCustomActionProperty visualCustomActionProperty = VisualCustomActionProperty.builder()
     * .actionOperations(List.of(VisualCustomActionOperationProperty.builder()
     * .filterOperation(CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build())
     * .navigationOperation(CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build())
     * .setParametersOperation(CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build())
     * .urlOperation(CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build())
     * .build()))
     * .customActionId("customActionId")
     * .name("name")
     * .trigger("trigger")
     * // the properties below are optional
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomaction.html)
     */
    public inline fun cfnDashboardVisualCustomActionProperty(
        block: CfnDashboardVisualCustomActionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.VisualCustomActionProperty {
        val builder = CfnDashboardVisualCustomActionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The menu options for a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualMenuOptionProperty visualMenuOptionProperty = VisualMenuOptionProperty.builder()
     * .availabilityStatus("availabilityStatus")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualmenuoption.html)
     */
    public inline fun cfnDashboardVisualMenuOptionProperty(
        block: CfnDashboardVisualMenuOptionPropertyDsl.() -> Unit = {}
    ): CfnDashboard.VisualMenuOptionProperty {
        val builder = CfnDashboardVisualMenuOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The visual display options for the visual palette.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualPaletteProperty visualPaletteProperty = VisualPaletteProperty.builder()
     * .chartColor("chartColor")
     * .colorMap(List.of(DataPathColorProperty.builder()
     * .color("color")
     * .element(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build())
     * // the properties below are optional
     * .timeGranularity("timeGranularity")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualpalette.html)
     */
    public inline fun cfnDashboardVisualPaletteProperty(
        block: CfnDashboardVisualPalettePropertyDsl.() -> Unit = {}
    ): CfnDashboard.VisualPaletteProperty {
        val builder = CfnDashboardVisualPalettePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A visual displayed on a sheet in an analysis, dashboard, or template.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html)
     */
    public inline fun cfnDashboardVisualProperty(
        block: CfnDashboardVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.VisualProperty {
        val builder = CfnDashboardVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The subtitle label options for a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualSubtitleLabelOptionsProperty visualSubtitleLabelOptionsProperty =
     * VisualSubtitleLabelOptionsProperty.builder()
     * .formatText(LongFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build())
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualsubtitlelabeloptions.html)
     */
    public inline fun cfnDashboardVisualSubtitleLabelOptionsProperty(
        block: CfnDashboardVisualSubtitleLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.VisualSubtitleLabelOptionsProperty {
        val builder = CfnDashboardVisualSubtitleLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The title label options for a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualTitleLabelOptionsProperty visualTitleLabelOptionsProperty =
     * VisualTitleLabelOptionsProperty.builder()
     * .formatText(ShortFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build())
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualtitlelabeloptions.html)
     */
    public inline fun cfnDashboardVisualTitleLabelOptionsProperty(
        block: CfnDashboardVisualTitleLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.VisualTitleLabelOptionsProperty {
        val builder = CfnDashboardVisualTitleLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a waterfall visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardWaterfallChartAggregatedFieldWellsProperty(
        block: CfnDashboardWaterfallChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WaterfallChartAggregatedFieldWellsProperty {
        val builder = CfnDashboardWaterfallChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a waterfall visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartconfiguration.html)
     */
    public inline fun cfnDashboardWaterfallChartConfigurationProperty(
        block: CfnDashboardWaterfallChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WaterfallChartConfigurationProperty {
        val builder = CfnDashboardWaterfallChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a waterfall visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartfieldwells.html)
     */
    public inline fun cfnDashboardWaterfallChartFieldWellsProperty(
        block: CfnDashboardWaterfallChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WaterfallChartFieldWellsProperty {
        val builder = CfnDashboardWaterfallChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of a waterfall visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WaterfallChartOptionsProperty waterfallChartOptionsProperty =
     * WaterfallChartOptionsProperty.builder()
     * .totalBarLabel("totalBarLabel")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartoptions.html)
     */
    public inline fun cfnDashboardWaterfallChartOptionsProperty(
        block: CfnDashboardWaterfallChartOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WaterfallChartOptionsProperty {
        val builder = CfnDashboardWaterfallChartOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a waterfall visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WaterfallChartSortConfigurationProperty waterfallChartSortConfigurationProperty =
     * WaterfallChartSortConfigurationProperty.builder()
     * .breakdownItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartsortconfiguration.html)
     */
    public inline fun cfnDashboardWaterfallChartSortConfigurationProperty(
        block: CfnDashboardWaterfallChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WaterfallChartSortConfigurationProperty {
        val builder = CfnDashboardWaterfallChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A waterfall chart.
     *
     * For more information, see
     * [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallvisual.html)
     */
    public inline fun cfnDashboardWaterfallVisualProperty(
        block: CfnDashboardWaterfallVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WaterfallVisualProperty {
        val builder = CfnDashboardWaterfallVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Provides the forecast to meet the target for a particular date.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WhatIfPointScenarioProperty whatIfPointScenarioProperty = WhatIfPointScenarioProperty.builder()
     * .date("date")
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-whatifpointscenario.html)
     */
    public inline fun cfnDashboardWhatIfPointScenarioProperty(
        block: CfnDashboardWhatIfPointScenarioPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WhatIfPointScenarioProperty {
        val builder = CfnDashboardWhatIfPointScenarioPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Provides the forecast to meet the target for a particular date range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WhatIfRangeScenarioProperty whatIfRangeScenarioProperty = WhatIfRangeScenarioProperty.builder()
     * .endDate("endDate")
     * .startDate("startDate")
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-whatifrangescenario.html)
     */
    public inline fun cfnDashboardWhatIfRangeScenarioProperty(
        block: CfnDashboardWhatIfRangeScenarioPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WhatIfRangeScenarioProperty {
        val builder = CfnDashboardWhatIfRangeScenarioPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells of a word cloud.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WordCloudAggregatedFieldWellsProperty wordCloudAggregatedFieldWellsProperty =
     * WordCloudAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .size(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudaggregatedfieldwells.html)
     */
    public inline fun cfnDashboardWordCloudAggregatedFieldWellsProperty(
        block: CfnDashboardWordCloudAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WordCloudAggregatedFieldWellsProperty {
        val builder = CfnDashboardWordCloudAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a word cloud visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudchartconfiguration.html)
     */
    public inline fun cfnDashboardWordCloudChartConfigurationProperty(
        block: CfnDashboardWordCloudChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WordCloudChartConfigurationProperty {
        val builder = CfnDashboardWordCloudChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a word cloud visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WordCloudFieldWellsProperty wordCloudFieldWellsProperty = WordCloudFieldWellsProperty.builder()
     * .wordCloudAggregatedFieldWells(WordCloudAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .size(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudfieldwells.html)
     */
    public inline fun cfnDashboardWordCloudFieldWellsProperty(
        block: CfnDashboardWordCloudFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WordCloudFieldWellsProperty {
        val builder = CfnDashboardWordCloudFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The word cloud options for a word cloud visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WordCloudOptionsProperty wordCloudOptionsProperty = WordCloudOptionsProperty.builder()
     * .cloudLayout("cloudLayout")
     * .maximumStringLength(123)
     * .wordCasing("wordCasing")
     * .wordOrientation("wordOrientation")
     * .wordPadding("wordPadding")
     * .wordScaling("wordScaling")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudoptions.html)
     */
    public inline fun cfnDashboardWordCloudOptionsProperty(
        block: CfnDashboardWordCloudOptionsPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WordCloudOptionsProperty {
        val builder = CfnDashboardWordCloudOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a word cloud visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WordCloudSortConfigurationProperty wordCloudSortConfigurationProperty =
     * WordCloudSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudsortconfiguration.html)
     */
    public inline fun cfnDashboardWordCloudSortConfigurationProperty(
        block: CfnDashboardWordCloudSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WordCloudSortConfigurationProperty {
        val builder = CfnDashboardWordCloudSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A word cloud.
     *
     * For more information, see
     * [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudvisual.html)
     */
    public inline fun cfnDashboardWordCloudVisualProperty(
        block: CfnDashboardWordCloudVisualPropertyDsl.() -> Unit = {}
    ): CfnDashboard.WordCloudVisualProperty {
        val builder = CfnDashboardWordCloudVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Creates a dataset.
     *
     * This operation doesn't support datasets that include uploaded files as a source.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object tagRuleConfigurations;
     * CfnDataSet cfnDataSet = CfnDataSet.Builder.create(this, "MyCfnDataSet")
     * .awsAccountId("awsAccountId")
     * .columnGroups(List.of(ColumnGroupProperty.builder()
     * .geoSpatialColumnGroup(GeoSpatialColumnGroupProperty.builder()
     * .columns(List.of("columns"))
     * .name("name")
     * // the properties below are optional
     * .countryCode("countryCode")
     * .build())
     * .build()))
     * .columnLevelPermissionRules(List.of(ColumnLevelPermissionRuleProperty.builder()
     * .columnNames(List.of("columnNames"))
     * .principals(List.of("principals"))
     * .build()))
     * .dataSetId("dataSetId")
     * .datasetParameters(List.of(DatasetParameterProperty.builder()
     * .dateTimeDatasetParameter(DateTimeDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(DateTimeDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of("staticValues"))
     * .build())
     * .timeGranularity("timeGranularity")
     * .build())
     * .decimalDatasetParameter(DecimalDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(DecimalDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of(123))
     * .build())
     * .build())
     * .integerDatasetParameter(IntegerDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(IntegerDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of(123))
     * .build())
     * .build())
     * .stringDatasetParameter(StringDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(StringDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of("staticValues"))
     * .build())
     * .build())
     * .build()))
     * .dataSetRefreshProperties(DataSetRefreshPropertiesProperty.builder()
     * .refreshConfiguration(RefreshConfigurationProperty.builder()
     * .incrementalRefresh(IncrementalRefreshProperty.builder()
     * .lookbackWindow(LookbackWindowProperty.builder()
     * .columnName("columnName")
     * .size(123)
     * .sizeUnit("sizeUnit")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dataSetUsageConfiguration(DataSetUsageConfigurationProperty.builder()
     * .disableUseAsDirectQuerySource(false)
     * .disableUseAsImportedSource(false)
     * .build())
     * .fieldFolders(Map.of(
     * "fieldFoldersKey", FieldFolderProperty.builder()
     * .columns(List.of("columns"))
     * .description("description")
     * .build()))
     * .importMode("importMode")
     * .ingestionWaitPolicy(IngestionWaitPolicyProperty.builder()
     * .ingestionWaitTimeInHours(123)
     * .waitForSpiceIngestion(false)
     * .build())
     * .logicalTableMap(Map.of(
     * "logicalTableMapKey", LogicalTableProperty.builder()
     * .alias("alias")
     * .source(LogicalTableSourceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .joinInstruction(JoinInstructionProperty.builder()
     * .leftOperand("leftOperand")
     * .onClause("onClause")
     * .rightOperand("rightOperand")
     * .type("type")
     * // the properties below are optional
     * .leftJoinKeyProperties(JoinKeyPropertiesProperty.builder()
     * .uniqueKey(false)
     * .build())
     * .rightJoinKeyProperties(JoinKeyPropertiesProperty.builder()
     * .uniqueKey(false)
     * .build())
     * .build())
     * .physicalTableId("physicalTableId")
     * .build())
     * // the properties below are optional
     * .dataTransforms(List.of(TransformOperationProperty.builder()
     * .castColumnTypeOperation(CastColumnTypeOperationProperty.builder()
     * .columnName("columnName")
     * .newColumnType("newColumnType")
     * // the properties below are optional
     * .format("format")
     * .build())
     * .createColumnsOperation(CreateColumnsOperationProperty.builder()
     * .columns(List.of(CalculatedColumnProperty.builder()
     * .columnId("columnId")
     * .columnName("columnName")
     * .expression("expression")
     * .build()))
     * .build())
     * .filterOperation(FilterOperationProperty.builder()
     * .conditionExpression("conditionExpression")
     * .build())
     * .overrideDatasetParameterOperation(OverrideDatasetParameterOperationProperty.builder()
     * .parameterName("parameterName")
     * // the properties below are optional
     * .newDefaultValues(NewDefaultValuesProperty.builder()
     * .dateTimeStaticValues(List.of("dateTimeStaticValues"))
     * .decimalStaticValues(List.of(123))
     * .integerStaticValues(List.of(123))
     * .stringStaticValues(List.of("stringStaticValues"))
     * .build())
     * .newParameterName("newParameterName")
     * .build())
     * .projectOperation(ProjectOperationProperty.builder()
     * .projectedColumns(List.of("projectedColumns"))
     * .build())
     * .renameColumnOperation(RenameColumnOperationProperty.builder()
     * .columnName("columnName")
     * .newColumnName("newColumnName")
     * .build())
     * .tagColumnOperation(TagColumnOperationProperty.builder()
     * .columnName("columnName")
     * .tags(List.of(ColumnTagProperty.builder()
     * .columnDescription(ColumnDescriptionProperty.builder()
     * .text("text")
     * .build())
     * .columnGeographicRole("columnGeographicRole")
     * .build()))
     * .build())
     * .build()))
     * .build()))
     * .name("name")
     * .permissions(List.of(ResourcePermissionProperty.builder()
     * .actions(List.of("actions"))
     * .principal("principal")
     * .build()))
     * .physicalTableMap(Map.of(
     * "physicalTableMapKey", PhysicalTableProperty.builder()
     * .customSql(CustomSqlProperty.builder()
     * .columns(List.of(InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build()))
     * .dataSourceArn("dataSourceArn")
     * .name("name")
     * .sqlQuery("sqlQuery")
     * .build())
     * .relationalTable(RelationalTableProperty.builder()
     * .dataSourceArn("dataSourceArn")
     * .inputColumns(List.of(InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build()))
     * .name("name")
     * // the properties below are optional
     * .catalog("catalog")
     * .schema("schema")
     * .build())
     * .s3Source(S3SourceProperty.builder()
     * .dataSourceArn("dataSourceArn")
     * .inputColumns(List.of(InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build()))
     * // the properties below are optional
     * .uploadSettings(UploadSettingsProperty.builder()
     * .containsHeader(false)
     * .delimiter("delimiter")
     * .format("format")
     * .startFromRow(123)
     * .textQualifier("textQualifier")
     * .build())
     * .build())
     * .build()))
     * .rowLevelPermissionDataSet(RowLevelPermissionDataSetProperty.builder()
     * .arn("arn")
     * .permissionPolicy("permissionPolicy")
     * // the properties below are optional
     * .formatVersion("formatVersion")
     * .namespace("namespace")
     * .status("status")
     * .build())
     * .rowLevelPermissionTagConfiguration(RowLevelPermissionTagConfigurationProperty.builder()
     * .tagRules(List.of(RowLevelPermissionTagRuleProperty.builder()
     * .columnName("columnName")
     * .tagKey("tagKey")
     * // the properties below are optional
     * .matchAllValue("matchAllValue")
     * .tagMultiValueDelimiter("tagMultiValueDelimiter")
     * .build()))
     * // the properties below are optional
     * .status("status")
     * .tagRuleConfigurations(tagRuleConfigurations)
     * .build())
     * .tags(List.of(CfnTag.builder()
     * .key("key")
     * .value("value")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html)
     */
    public inline fun cfnDataSet(
        scope: Construct,
        id: String,
        block: CfnDataSetDsl.() -> Unit = {},
    ): CfnDataSet {
        val builder = CfnDataSetDsl(scope, id)
        builder.apply(block)
        return builder.build()
    }

    /**
     * A calculated column for a dataset.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CalculatedColumnProperty calculatedColumnProperty = CalculatedColumnProperty.builder()
     * .columnId("columnId")
     * .columnName("columnName")
     * .expression("expression")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-calculatedcolumn.html)
     */
    public inline fun cfnDataSetCalculatedColumnProperty(
        block: CfnDataSetCalculatedColumnPropertyDsl.() -> Unit = {}
    ): CfnDataSet.CalculatedColumnProperty {
        val builder = CfnDataSetCalculatedColumnPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A transform operation that casts a column to a different type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CastColumnTypeOperationProperty castColumnTypeOperationProperty =
     * CastColumnTypeOperationProperty.builder()
     * .columnName("columnName")
     * .newColumnType("newColumnType")
     * // the properties below are optional
     * .format("format")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-castcolumntypeoperation.html)
     */
    public inline fun cfnDataSetCastColumnTypeOperationProperty(
        block: CfnDataSetCastColumnTypeOperationPropertyDsl.() -> Unit = {}
    ): CfnDataSet.CastColumnTypeOperationProperty {
        val builder = CfnDataSetCastColumnTypeOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Metadata that contains a description for a column.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnDescriptionProperty columnDescriptionProperty = ColumnDescriptionProperty.builder()
     * .text("text")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columndescription.html)
     */
    public inline fun cfnDataSetColumnDescriptionProperty(
        block: CfnDataSetColumnDescriptionPropertyDsl.() -> Unit = {}
    ): CfnDataSet.ColumnDescriptionProperty {
        val builder = CfnDataSetColumnDescriptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Groupings of columns that work together in certain Amazon QuickSight features.
     *
     * This is a variant type structure. For this structure to be valid, only one of the attributes
     * can be non-null.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnGroupProperty columnGroupProperty = ColumnGroupProperty.builder()
     * .geoSpatialColumnGroup(GeoSpatialColumnGroupProperty.builder()
     * .columns(List.of("columns"))
     * .name("name")
     * // the properties below are optional
     * .countryCode("countryCode")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columngroup.html)
     */
    public inline fun cfnDataSetColumnGroupProperty(
        block: CfnDataSetColumnGroupPropertyDsl.() -> Unit = {}
    ): CfnDataSet.ColumnGroupProperty {
        val builder = CfnDataSetColumnGroupPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A rule defined to grant access on one or more restricted columns.
     *
     * Each dataset can have multiple rules. To create a restricted column, you add it to one or
     * more rules. Each rule must contain at least one column and at least one user or group. To be
     * able to see a restricted column, a user or group needs to be added to a rule for that column.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnLevelPermissionRuleProperty columnLevelPermissionRuleProperty =
     * ColumnLevelPermissionRuleProperty.builder()
     * .columnNames(List.of("columnNames"))
     * .principals(List.of("principals"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columnlevelpermissionrule.html)
     */
    public inline fun cfnDataSetColumnLevelPermissionRuleProperty(
        block: CfnDataSetColumnLevelPermissionRulePropertyDsl.() -> Unit = {}
    ): CfnDataSet.ColumnLevelPermissionRuleProperty {
        val builder = CfnDataSetColumnLevelPermissionRulePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A tag for a column in a
     * `[TagColumnOperation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_TagColumnOperation.html)`
     * structure. This is a variant type structure. For this structure to be valid, only one of the
     * attributes can be non-null.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnTagProperty columnTagProperty = ColumnTagProperty.builder()
     * .columnDescription(ColumnDescriptionProperty.builder()
     * .text("text")
     * .build())
     * .columnGeographicRole("columnGeographicRole")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columntag.html)
     */
    public inline fun cfnDataSetColumnTagProperty(
        block: CfnDataSetColumnTagPropertyDsl.() -> Unit = {}
    ): CfnDataSet.ColumnTagProperty {
        val builder = CfnDataSetColumnTagPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A transform operation that creates calculated columns.
     *
     * Columns created in one such operation form a lexical closure.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CreateColumnsOperationProperty createColumnsOperationProperty =
     * CreateColumnsOperationProperty.builder()
     * .columns(List.of(CalculatedColumnProperty.builder()
     * .columnId("columnId")
     * .columnName("columnName")
     * .expression("expression")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-createcolumnsoperation.html)
     */
    public inline fun cfnDataSetCreateColumnsOperationProperty(
        block: CfnDataSetCreateColumnsOperationPropertyDsl.() -> Unit = {}
    ): CfnDataSet.CreateColumnsOperationProperty {
        val builder = CfnDataSetCreateColumnsOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A physical table type built from the results of the custom SQL query.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomSqlProperty customSqlProperty = CustomSqlProperty.builder()
     * .columns(List.of(InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build()))
     * .dataSourceArn("dataSourceArn")
     * .name("name")
     * .sqlQuery("sqlQuery")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-customsql.html)
     */
    public inline fun cfnDataSetCustomSqlProperty(
        block: CfnDataSetCustomSqlPropertyDsl.() -> Unit = {}
    ): CfnDataSet.CustomSqlProperty {
        val builder = CfnDataSetCustomSqlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dataset refresh properties for the dataset.</p>.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataSetRefreshPropertiesProperty dataSetRefreshPropertiesProperty =
     * DataSetRefreshPropertiesProperty.builder()
     * .refreshConfiguration(RefreshConfigurationProperty.builder()
     * .incrementalRefresh(IncrementalRefreshProperty.builder()
     * .lookbackWindow(LookbackWindowProperty.builder()
     * .columnName("columnName")
     * .size(123)
     * .sizeUnit("sizeUnit")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetrefreshproperties.html)
     */
    public inline fun cfnDataSetDataSetRefreshPropertiesProperty(
        block: CfnDataSetDataSetRefreshPropertiesPropertyDsl.() -> Unit = {}
    ): CfnDataSet.DataSetRefreshPropertiesProperty {
        val builder = CfnDataSetDataSetRefreshPropertiesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The usage configuration to apply to child datasets that reference this dataset as a source.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataSetUsageConfigurationProperty dataSetUsageConfigurationProperty =
     * DataSetUsageConfigurationProperty.builder()
     * .disableUseAsDirectQuerySource(false)
     * .disableUseAsImportedSource(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetusageconfiguration.html)
     */
    public inline fun cfnDataSetDataSetUsageConfigurationProperty(
        block: CfnDataSetDataSetUsageConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDataSet.DataSetUsageConfigurationProperty {
        val builder = CfnDataSetDataSetUsageConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter created in the dataset that could be of any one data type such as string,
     * integer, decimal or datetime.</p>.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DatasetParameterProperty datasetParameterProperty = DatasetParameterProperty.builder()
     * .dateTimeDatasetParameter(DateTimeDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(DateTimeDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of("staticValues"))
     * .build())
     * .timeGranularity("timeGranularity")
     * .build())
     * .decimalDatasetParameter(DecimalDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(DecimalDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of(123))
     * .build())
     * .build())
     * .integerDatasetParameter(IntegerDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(IntegerDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of(123))
     * .build())
     * .build())
     * .stringDatasetParameter(StringDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(StringDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of("staticValues"))
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetparameter.html)
     */
    public inline fun cfnDataSetDatasetParameterProperty(
        block: CfnDataSetDatasetParameterPropertyDsl.() -> Unit = {}
    ): CfnDataSet.DatasetParameterProperty {
        val builder = CfnDataSetDatasetParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * List of default values defined for a given string date time parameter type.
     *
     * Currently only static values are supported.</p>
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeDatasetParameterDefaultValuesProperty dateTimeDatasetParameterDefaultValuesProperty =
     * DateTimeDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of("staticValues"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datetimedatasetparameterdefaultvalues.html)
     */
    public inline fun cfnDataSetDateTimeDatasetParameterDefaultValuesProperty(
        block: CfnDataSetDateTimeDatasetParameterDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnDataSet.DateTimeDatasetParameterDefaultValuesProperty {
        val builder = CfnDataSetDateTimeDatasetParameterDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter created in the dataset of date time data type.</p>.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeDatasetParameterProperty dateTimeDatasetParameterProperty =
     * DateTimeDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(DateTimeDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of("staticValues"))
     * .build())
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datetimedatasetparameter.html)
     */
    public inline fun cfnDataSetDateTimeDatasetParameterProperty(
        block: CfnDataSetDateTimeDatasetParameterPropertyDsl.() -> Unit = {}
    ): CfnDataSet.DateTimeDatasetParameterProperty {
        val builder = CfnDataSetDateTimeDatasetParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * List of default values defined for a given decimal dataset parameter type.
     *
     * Currently only static values are supported.</p>
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalDatasetParameterDefaultValuesProperty decimalDatasetParameterDefaultValuesProperty =
     * DecimalDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of(123))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-decimaldatasetparameterdefaultvalues.html)
     */
    public inline fun cfnDataSetDecimalDatasetParameterDefaultValuesProperty(
        block: CfnDataSetDecimalDatasetParameterDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnDataSet.DecimalDatasetParameterDefaultValuesProperty {
        val builder = CfnDataSetDecimalDatasetParameterDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter created in the dataset of decimal data type.</p>.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalDatasetParameterProperty decimalDatasetParameterProperty =
     * DecimalDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(DecimalDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of(123))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-decimaldatasetparameter.html)
     */
    public inline fun cfnDataSetDecimalDatasetParameterProperty(
        block: CfnDataSetDecimalDatasetParameterPropertyDsl.() -> Unit = {}
    ): CfnDataSet.DecimalDatasetParameterProperty {
        val builder = CfnDataSetDecimalDatasetParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A FieldFolder element is a folder that contains fields and nested subfolders.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldFolderProperty fieldFolderProperty = FieldFolderProperty.builder()
     * .columns(List.of("columns"))
     * .description("description")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-fieldfolder.html)
     */
    public inline fun cfnDataSetFieldFolderProperty(
        block: CfnDataSetFieldFolderPropertyDsl.() -> Unit = {}
    ): CfnDataSet.FieldFolderProperty {
        val builder = CfnDataSetFieldFolderPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A transform operation that filters rows based on a condition.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterOperationProperty filterOperationProperty = FilterOperationProperty.builder()
     * .conditionExpression("conditionExpression")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-filteroperation.html)
     */
    public inline fun cfnDataSetFilterOperationProperty(
        block: CfnDataSetFilterOperationPropertyDsl.() -> Unit = {}
    ): CfnDataSet.FilterOperationProperty {
        val builder = CfnDataSetFilterOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Geospatial column group that denotes a hierarchy.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeoSpatialColumnGroupProperty geoSpatialColumnGroupProperty =
     * GeoSpatialColumnGroupProperty.builder()
     * .columns(List.of("columns"))
     * .name("name")
     * // the properties below are optional
     * .countryCode("countryCode")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-geospatialcolumngroup.html)
     */
    public inline fun cfnDataSetGeoSpatialColumnGroupProperty(
        block: CfnDataSetGeoSpatialColumnGroupPropertyDsl.() -> Unit = {}
    ): CfnDataSet.GeoSpatialColumnGroupProperty {
        val builder = CfnDataSetGeoSpatialColumnGroupPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Incremental Refresh</p>.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IncrementalRefreshProperty incrementalRefreshProperty = IncrementalRefreshProperty.builder()
     * .lookbackWindow(LookbackWindowProperty.builder()
     * .columnName("columnName")
     * .size(123)
     * .sizeUnit("sizeUnit")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-incrementalrefresh.html)
     */
    public inline fun cfnDataSetIncrementalRefreshProperty(
        block: CfnDataSetIncrementalRefreshPropertyDsl.() -> Unit = {}
    ): CfnDataSet.IncrementalRefreshProperty {
        val builder = CfnDataSetIncrementalRefreshPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The wait policy to use when creating or updating a Dataset.
     *
     * The default is to wait for SPICE ingestion to finish with timeout of 36 hours.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IngestionWaitPolicyProperty ingestionWaitPolicyProperty = IngestionWaitPolicyProperty.builder()
     * .ingestionWaitTimeInHours(123)
     * .waitForSpiceIngestion(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-ingestionwaitpolicy.html)
     */
    public inline fun cfnDataSetIngestionWaitPolicyProperty(
        block: CfnDataSetIngestionWaitPolicyPropertyDsl.() -> Unit = {}
    ): CfnDataSet.IngestionWaitPolicyProperty {
        val builder = CfnDataSetIngestionWaitPolicyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Metadata for a column that is used as the input of a transform operation.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * InputColumnProperty inputColumnProperty = InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-inputcolumn.html)
     */
    public inline fun cfnDataSetInputColumnProperty(
        block: CfnDataSetInputColumnPropertyDsl.() -> Unit = {}
    ): CfnDataSet.InputColumnProperty {
        val builder = CfnDataSetInputColumnPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * List of default values defined for a given integer dataset parameter type.
     *
     * Currently only static values are supported.</p>
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerDatasetParameterDefaultValuesProperty integerDatasetParameterDefaultValuesProperty =
     * IntegerDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of(123))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-integerdatasetparameterdefaultvalues.html)
     */
    public inline fun cfnDataSetIntegerDatasetParameterDefaultValuesProperty(
        block: CfnDataSetIntegerDatasetParameterDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnDataSet.IntegerDatasetParameterDefaultValuesProperty {
        val builder = CfnDataSetIntegerDatasetParameterDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter created in the dataset of integer data type.</p>.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerDatasetParameterProperty integerDatasetParameterProperty =
     * IntegerDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(IntegerDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of(123))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-integerdatasetparameter.html)
     */
    public inline fun cfnDataSetIntegerDatasetParameterProperty(
        block: CfnDataSetIntegerDatasetParameterPropertyDsl.() -> Unit = {}
    ): CfnDataSet.IntegerDatasetParameterProperty {
        val builder = CfnDataSetIntegerDatasetParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The instructions associated with a join.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * JoinInstructionProperty joinInstructionProperty = JoinInstructionProperty.builder()
     * .leftOperand("leftOperand")
     * .onClause("onClause")
     * .rightOperand("rightOperand")
     * .type("type")
     * // the properties below are optional
     * .leftJoinKeyProperties(JoinKeyPropertiesProperty.builder()
     * .uniqueKey(false)
     * .build())
     * .rightJoinKeyProperties(JoinKeyPropertiesProperty.builder()
     * .uniqueKey(false)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-joininstruction.html)
     */
    public inline fun cfnDataSetJoinInstructionProperty(
        block: CfnDataSetJoinInstructionPropertyDsl.() -> Unit = {}
    ): CfnDataSet.JoinInstructionProperty {
        val builder = CfnDataSetJoinInstructionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Properties associated with the columns participating in a join.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * JoinKeyPropertiesProperty joinKeyPropertiesProperty = JoinKeyPropertiesProperty.builder()
     * .uniqueKey(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-joinkeyproperties.html)
     */
    public inline fun cfnDataSetJoinKeyPropertiesProperty(
        block: CfnDataSetJoinKeyPropertiesPropertyDsl.() -> Unit = {}
    ): CfnDataSet.JoinKeyPropertiesProperty {
        val builder = CfnDataSetJoinKeyPropertiesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A *logical table* is a unit that joins and that data transformations operate on.
     *
     * A logical table has a source, which can be either a physical table or result of a join. When
     * a logical table points to a physical table, the logical table acts as a mutable copy of that
     * physical table through transform operations.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LogicalTableProperty logicalTableProperty = LogicalTableProperty.builder()
     * .alias("alias")
     * .source(LogicalTableSourceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .joinInstruction(JoinInstructionProperty.builder()
     * .leftOperand("leftOperand")
     * .onClause("onClause")
     * .rightOperand("rightOperand")
     * .type("type")
     * // the properties below are optional
     * .leftJoinKeyProperties(JoinKeyPropertiesProperty.builder()
     * .uniqueKey(false)
     * .build())
     * .rightJoinKeyProperties(JoinKeyPropertiesProperty.builder()
     * .uniqueKey(false)
     * .build())
     * .build())
     * .physicalTableId("physicalTableId")
     * .build())
     * // the properties below are optional
     * .dataTransforms(List.of(TransformOperationProperty.builder()
     * .castColumnTypeOperation(CastColumnTypeOperationProperty.builder()
     * .columnName("columnName")
     * .newColumnType("newColumnType")
     * // the properties below are optional
     * .format("format")
     * .build())
     * .createColumnsOperation(CreateColumnsOperationProperty.builder()
     * .columns(List.of(CalculatedColumnProperty.builder()
     * .columnId("columnId")
     * .columnName("columnName")
     * .expression("expression")
     * .build()))
     * .build())
     * .filterOperation(FilterOperationProperty.builder()
     * .conditionExpression("conditionExpression")
     * .build())
     * .overrideDatasetParameterOperation(OverrideDatasetParameterOperationProperty.builder()
     * .parameterName("parameterName")
     * // the properties below are optional
     * .newDefaultValues(NewDefaultValuesProperty.builder()
     * .dateTimeStaticValues(List.of("dateTimeStaticValues"))
     * .decimalStaticValues(List.of(123))
     * .integerStaticValues(List.of(123))
     * .stringStaticValues(List.of("stringStaticValues"))
     * .build())
     * .newParameterName("newParameterName")
     * .build())
     * .projectOperation(ProjectOperationProperty.builder()
     * .projectedColumns(List.of("projectedColumns"))
     * .build())
     * .renameColumnOperation(RenameColumnOperationProperty.builder()
     * .columnName("columnName")
     * .newColumnName("newColumnName")
     * .build())
     * .tagColumnOperation(TagColumnOperationProperty.builder()
     * .columnName("columnName")
     * .tags(List.of(ColumnTagProperty.builder()
     * .columnDescription(ColumnDescriptionProperty.builder()
     * .text("text")
     * .build())
     * .columnGeographicRole("columnGeographicRole")
     * .build()))
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-logicaltable.html)
     */
    public inline fun cfnDataSetLogicalTableProperty(
        block: CfnDataSetLogicalTablePropertyDsl.() -> Unit = {}
    ): CfnDataSet.LogicalTableProperty {
        val builder = CfnDataSetLogicalTablePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Information about the source of a logical table.
     *
     * This is a variant type structure. For this structure to be valid, only one of the attributes
     * can be non-null.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LogicalTableSourceProperty logicalTableSourceProperty = LogicalTableSourceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .joinInstruction(JoinInstructionProperty.builder()
     * .leftOperand("leftOperand")
     * .onClause("onClause")
     * .rightOperand("rightOperand")
     * .type("type")
     * // the properties below are optional
     * .leftJoinKeyProperties(JoinKeyPropertiesProperty.builder()
     * .uniqueKey(false)
     * .build())
     * .rightJoinKeyProperties(JoinKeyPropertiesProperty.builder()
     * .uniqueKey(false)
     * .build())
     * .build())
     * .physicalTableId("physicalTableId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-logicaltablesource.html)
     */
    public inline fun cfnDataSetLogicalTableSourceProperty(
        block: CfnDataSetLogicalTableSourcePropertyDsl.() -> Unit = {}
    ): CfnDataSet.LogicalTableSourceProperty {
        val builder = CfnDataSetLogicalTableSourcePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LookbackWindowProperty lookbackWindowProperty = LookbackWindowProperty.builder()
     * .columnName("columnName")
     * .size(123)
     * .sizeUnit("sizeUnit")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-lookbackwindow.html)
     */
    public inline fun cfnDataSetLookbackWindowProperty(
        block: CfnDataSetLookbackWindowPropertyDsl.() -> Unit = {}
    ): CfnDataSet.LookbackWindowProperty {
        val builder = CfnDataSetLookbackWindowPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NewDefaultValuesProperty newDefaultValuesProperty = NewDefaultValuesProperty.builder()
     * .dateTimeStaticValues(List.of("dateTimeStaticValues"))
     * .decimalStaticValues(List.of(123))
     * .integerStaticValues(List.of(123))
     * .stringStaticValues(List.of("stringStaticValues"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-newdefaultvalues.html)
     */
    public inline fun cfnDataSetNewDefaultValuesProperty(
        block: CfnDataSetNewDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnDataSet.NewDefaultValuesProperty {
        val builder = CfnDataSetNewDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Output column.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * OutputColumnProperty outputColumnProperty = OutputColumnProperty.builder()
     * .description("description")
     * .name("name")
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-outputcolumn.html)
     */
    public inline fun cfnDataSetOutputColumnProperty(
        block: CfnDataSetOutputColumnPropertyDsl.() -> Unit = {}
    ): CfnDataSet.OutputColumnProperty {
        val builder = CfnDataSetOutputColumnPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A transform operation that overrides the dataset parameter values defined in another
     * dataset.</p>.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * OverrideDatasetParameterOperationProperty overrideDatasetParameterOperationProperty =
     * OverrideDatasetParameterOperationProperty.builder()
     * .parameterName("parameterName")
     * // the properties below are optional
     * .newDefaultValues(NewDefaultValuesProperty.builder()
     * .dateTimeStaticValues(List.of("dateTimeStaticValues"))
     * .decimalStaticValues(List.of(123))
     * .integerStaticValues(List.of(123))
     * .stringStaticValues(List.of("stringStaticValues"))
     * .build())
     * .newParameterName("newParameterName")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-overridedatasetparameteroperation.html)
     */
    public inline fun cfnDataSetOverrideDatasetParameterOperationProperty(
        block: CfnDataSetOverrideDatasetParameterOperationPropertyDsl.() -> Unit = {}
    ): CfnDataSet.OverrideDatasetParameterOperationProperty {
        val builder = CfnDataSetOverrideDatasetParameterOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A view of a data source that contains information about the shape of the data in the
     * underlying source.
     *
     * This is a variant type structure. For this structure to be valid, only one of the attributes
     * can be non-null.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PhysicalTableProperty physicalTableProperty = PhysicalTableProperty.builder()
     * .customSql(CustomSqlProperty.builder()
     * .columns(List.of(InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build()))
     * .dataSourceArn("dataSourceArn")
     * .name("name")
     * .sqlQuery("sqlQuery")
     * .build())
     * .relationalTable(RelationalTableProperty.builder()
     * .dataSourceArn("dataSourceArn")
     * .inputColumns(List.of(InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build()))
     * .name("name")
     * // the properties below are optional
     * .catalog("catalog")
     * .schema("schema")
     * .build())
     * .s3Source(S3SourceProperty.builder()
     * .dataSourceArn("dataSourceArn")
     * .inputColumns(List.of(InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build()))
     * // the properties below are optional
     * .uploadSettings(UploadSettingsProperty.builder()
     * .containsHeader(false)
     * .delimiter("delimiter")
     * .format("format")
     * .startFromRow(123)
     * .textQualifier("textQualifier")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-physicaltable.html)
     */
    public inline fun cfnDataSetPhysicalTableProperty(
        block: CfnDataSetPhysicalTablePropertyDsl.() -> Unit = {}
    ): CfnDataSet.PhysicalTableProperty {
        val builder = CfnDataSetPhysicalTablePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A transform operation that projects columns.
     *
     * Operations that come after a projection can only refer to projected columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ProjectOperationProperty projectOperationProperty = ProjectOperationProperty.builder()
     * .projectedColumns(List.of("projectedColumns"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-projectoperation.html)
     */
    public inline fun cfnDataSetProjectOperationProperty(
        block: CfnDataSetProjectOperationPropertyDsl.() -> Unit = {}
    ): CfnDataSet.ProjectOperationProperty {
        val builder = CfnDataSetProjectOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Properties for defining a `CfnDataSet`.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object tagRuleConfigurations;
     * CfnDataSetProps cfnDataSetProps = CfnDataSetProps.builder()
     * .awsAccountId("awsAccountId")
     * .columnGroups(List.of(ColumnGroupProperty.builder()
     * .geoSpatialColumnGroup(GeoSpatialColumnGroupProperty.builder()
     * .columns(List.of("columns"))
     * .name("name")
     * // the properties below are optional
     * .countryCode("countryCode")
     * .build())
     * .build()))
     * .columnLevelPermissionRules(List.of(ColumnLevelPermissionRuleProperty.builder()
     * .columnNames(List.of("columnNames"))
     * .principals(List.of("principals"))
     * .build()))
     * .dataSetId("dataSetId")
     * .datasetParameters(List.of(DatasetParameterProperty.builder()
     * .dateTimeDatasetParameter(DateTimeDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(DateTimeDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of("staticValues"))
     * .build())
     * .timeGranularity("timeGranularity")
     * .build())
     * .decimalDatasetParameter(DecimalDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(DecimalDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of(123))
     * .build())
     * .build())
     * .integerDatasetParameter(IntegerDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(IntegerDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of(123))
     * .build())
     * .build())
     * .stringDatasetParameter(StringDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(StringDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of("staticValues"))
     * .build())
     * .build())
     * .build()))
     * .dataSetRefreshProperties(DataSetRefreshPropertiesProperty.builder()
     * .refreshConfiguration(RefreshConfigurationProperty.builder()
     * .incrementalRefresh(IncrementalRefreshProperty.builder()
     * .lookbackWindow(LookbackWindowProperty.builder()
     * .columnName("columnName")
     * .size(123)
     * .sizeUnit("sizeUnit")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dataSetUsageConfiguration(DataSetUsageConfigurationProperty.builder()
     * .disableUseAsDirectQuerySource(false)
     * .disableUseAsImportedSource(false)
     * .build())
     * .fieldFolders(Map.of(
     * "fieldFoldersKey", FieldFolderProperty.builder()
     * .columns(List.of("columns"))
     * .description("description")
     * .build()))
     * .importMode("importMode")
     * .ingestionWaitPolicy(IngestionWaitPolicyProperty.builder()
     * .ingestionWaitTimeInHours(123)
     * .waitForSpiceIngestion(false)
     * .build())
     * .logicalTableMap(Map.of(
     * "logicalTableMapKey", LogicalTableProperty.builder()
     * .alias("alias")
     * .source(LogicalTableSourceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .joinInstruction(JoinInstructionProperty.builder()
     * .leftOperand("leftOperand")
     * .onClause("onClause")
     * .rightOperand("rightOperand")
     * .type("type")
     * // the properties below are optional
     * .leftJoinKeyProperties(JoinKeyPropertiesProperty.builder()
     * .uniqueKey(false)
     * .build())
     * .rightJoinKeyProperties(JoinKeyPropertiesProperty.builder()
     * .uniqueKey(false)
     * .build())
     * .build())
     * .physicalTableId("physicalTableId")
     * .build())
     * // the properties below are optional
     * .dataTransforms(List.of(TransformOperationProperty.builder()
     * .castColumnTypeOperation(CastColumnTypeOperationProperty.builder()
     * .columnName("columnName")
     * .newColumnType("newColumnType")
     * // the properties below are optional
     * .format("format")
     * .build())
     * .createColumnsOperation(CreateColumnsOperationProperty.builder()
     * .columns(List.of(CalculatedColumnProperty.builder()
     * .columnId("columnId")
     * .columnName("columnName")
     * .expression("expression")
     * .build()))
     * .build())
     * .filterOperation(FilterOperationProperty.builder()
     * .conditionExpression("conditionExpression")
     * .build())
     * .overrideDatasetParameterOperation(OverrideDatasetParameterOperationProperty.builder()
     * .parameterName("parameterName")
     * // the properties below are optional
     * .newDefaultValues(NewDefaultValuesProperty.builder()
     * .dateTimeStaticValues(List.of("dateTimeStaticValues"))
     * .decimalStaticValues(List.of(123))
     * .integerStaticValues(List.of(123))
     * .stringStaticValues(List.of("stringStaticValues"))
     * .build())
     * .newParameterName("newParameterName")
     * .build())
     * .projectOperation(ProjectOperationProperty.builder()
     * .projectedColumns(List.of("projectedColumns"))
     * .build())
     * .renameColumnOperation(RenameColumnOperationProperty.builder()
     * .columnName("columnName")
     * .newColumnName("newColumnName")
     * .build())
     * .tagColumnOperation(TagColumnOperationProperty.builder()
     * .columnName("columnName")
     * .tags(List.of(ColumnTagProperty.builder()
     * .columnDescription(ColumnDescriptionProperty.builder()
     * .text("text")
     * .build())
     * .columnGeographicRole("columnGeographicRole")
     * .build()))
     * .build())
     * .build()))
     * .build()))
     * .name("name")
     * .permissions(List.of(ResourcePermissionProperty.builder()
     * .actions(List.of("actions"))
     * .principal("principal")
     * .build()))
     * .physicalTableMap(Map.of(
     * "physicalTableMapKey", PhysicalTableProperty.builder()
     * .customSql(CustomSqlProperty.builder()
     * .columns(List.of(InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build()))
     * .dataSourceArn("dataSourceArn")
     * .name("name")
     * .sqlQuery("sqlQuery")
     * .build())
     * .relationalTable(RelationalTableProperty.builder()
     * .dataSourceArn("dataSourceArn")
     * .inputColumns(List.of(InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build()))
     * .name("name")
     * // the properties below are optional
     * .catalog("catalog")
     * .schema("schema")
     * .build())
     * .s3Source(S3SourceProperty.builder()
     * .dataSourceArn("dataSourceArn")
     * .inputColumns(List.of(InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build()))
     * // the properties below are optional
     * .uploadSettings(UploadSettingsProperty.builder()
     * .containsHeader(false)
     * .delimiter("delimiter")
     * .format("format")
     * .startFromRow(123)
     * .textQualifier("textQualifier")
     * .build())
     * .build())
     * .build()))
     * .rowLevelPermissionDataSet(RowLevelPermissionDataSetProperty.builder()
     * .arn("arn")
     * .permissionPolicy("permissionPolicy")
     * // the properties below are optional
     * .formatVersion("formatVersion")
     * .namespace("namespace")
     * .status("status")
     * .build())
     * .rowLevelPermissionTagConfiguration(RowLevelPermissionTagConfigurationProperty.builder()
     * .tagRules(List.of(RowLevelPermissionTagRuleProperty.builder()
     * .columnName("columnName")
     * .tagKey("tagKey")
     * // the properties below are optional
     * .matchAllValue("matchAllValue")
     * .tagMultiValueDelimiter("tagMultiValueDelimiter")
     * .build()))
     * // the properties below are optional
     * .status("status")
     * .tagRuleConfigurations(tagRuleConfigurations)
     * .build())
     * .tags(List.of(CfnTag.builder()
     * .key("key")
     * .value("value")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html)
     */
    public inline fun cfnDataSetProps(block: CfnDataSetPropsDsl.() -> Unit = {}): CfnDataSetProps {
        val builder = CfnDataSetPropsDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Refresh Configuration.</p>.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RefreshConfigurationProperty refreshConfigurationProperty =
     * RefreshConfigurationProperty.builder()
     * .incrementalRefresh(IncrementalRefreshProperty.builder()
     * .lookbackWindow(LookbackWindowProperty.builder()
     * .columnName("columnName")
     * .size(123)
     * .sizeUnit("sizeUnit")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-refreshconfiguration.html)
     */
    public inline fun cfnDataSetRefreshConfigurationProperty(
        block: CfnDataSetRefreshConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDataSet.RefreshConfigurationProperty {
        val builder = CfnDataSetRefreshConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A physical table type for relational data sources.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RelationalTableProperty relationalTableProperty = RelationalTableProperty.builder()
     * .dataSourceArn("dataSourceArn")
     * .inputColumns(List.of(InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build()))
     * .name("name")
     * // the properties below are optional
     * .catalog("catalog")
     * .schema("schema")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-relationaltable.html)
     */
    public inline fun cfnDataSetRelationalTableProperty(
        block: CfnDataSetRelationalTablePropertyDsl.() -> Unit = {}
    ): CfnDataSet.RelationalTableProperty {
        val builder = CfnDataSetRelationalTablePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A transform operation that renames a column.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RenameColumnOperationProperty renameColumnOperationProperty =
     * RenameColumnOperationProperty.builder()
     * .columnName("columnName")
     * .newColumnName("newColumnName")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-renamecolumnoperation.html)
     */
    public inline fun cfnDataSetRenameColumnOperationProperty(
        block: CfnDataSetRenameColumnOperationPropertyDsl.() -> Unit = {}
    ): CfnDataSet.RenameColumnOperationProperty {
        val builder = CfnDataSetRenameColumnOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Permission for the resource.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ResourcePermissionProperty resourcePermissionProperty = ResourcePermissionProperty.builder()
     * .actions(List.of("actions"))
     * .principal("principal")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-resourcepermission.html)
     */
    public inline fun cfnDataSetResourcePermissionProperty(
        block: CfnDataSetResourcePermissionPropertyDsl.() -> Unit = {}
    ): CfnDataSet.ResourcePermissionProperty {
        val builder = CfnDataSetResourcePermissionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Information about a dataset that contains permissions for row-level security (RLS).
     *
     * The permissions dataset maps fields to users or groups. For more information, see
     * [Using Row-Level Security (RLS) to Restrict Access to a Dataset](https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * The option to deny permissions by setting `PermissionPolicy` to `DENY_ACCESS` is not
     * supported for new RLS datasets.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RowLevelPermissionDataSetProperty rowLevelPermissionDataSetProperty =
     * RowLevelPermissionDataSetProperty.builder()
     * .arn("arn")
     * .permissionPolicy("permissionPolicy")
     * // the properties below are optional
     * .formatVersion("formatVersion")
     * .namespace("namespace")
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiondataset.html)
     */
    public inline fun cfnDataSetRowLevelPermissionDataSetProperty(
        block: CfnDataSetRowLevelPermissionDataSetPropertyDsl.() -> Unit = {}
    ): CfnDataSet.RowLevelPermissionDataSetProperty {
        val builder = CfnDataSetRowLevelPermissionDataSetPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of tags on a dataset to set row-level security.</p>.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object tagRuleConfigurations;
     * RowLevelPermissionTagConfigurationProperty rowLevelPermissionTagConfigurationProperty =
     * RowLevelPermissionTagConfigurationProperty.builder()
     * .tagRules(List.of(RowLevelPermissionTagRuleProperty.builder()
     * .columnName("columnName")
     * .tagKey("tagKey")
     * // the properties below are optional
     * .matchAllValue("matchAllValue")
     * .tagMultiValueDelimiter("tagMultiValueDelimiter")
     * .build()))
     * // the properties below are optional
     * .status("status")
     * .tagRuleConfigurations(tagRuleConfigurations)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiontagconfiguration.html)
     */
    public inline fun cfnDataSetRowLevelPermissionTagConfigurationProperty(
        block: CfnDataSetRowLevelPermissionTagConfigurationPropertyDsl.() -> Unit = {}
    ): CfnDataSet.RowLevelPermissionTagConfigurationProperty {
        val builder = CfnDataSetRowLevelPermissionTagConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Permission for the resource.</p>.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RowLevelPermissionTagRuleProperty rowLevelPermissionTagRuleProperty =
     * RowLevelPermissionTagRuleProperty.builder()
     * .columnName("columnName")
     * .tagKey("tagKey")
     * // the properties below are optional
     * .matchAllValue("matchAllValue")
     * .tagMultiValueDelimiter("tagMultiValueDelimiter")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiontagrule.html)
     */
    public inline fun cfnDataSetRowLevelPermissionTagRuleProperty(
        block: CfnDataSetRowLevelPermissionTagRulePropertyDsl.() -> Unit = {}
    ): CfnDataSet.RowLevelPermissionTagRuleProperty {
        val builder = CfnDataSetRowLevelPermissionTagRulePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A physical table type for an S3 data source.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * S3SourceProperty s3SourceProperty = S3SourceProperty.builder()
     * .dataSourceArn("dataSourceArn")
     * .inputColumns(List.of(InputColumnProperty.builder()
     * .name("name")
     * .type("type")
     * .build()))
     * // the properties below are optional
     * .uploadSettings(UploadSettingsProperty.builder()
     * .containsHeader(false)
     * .delimiter("delimiter")
     * .format("format")
     * .startFromRow(123)
     * .textQualifier("textQualifier")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-s3source.html)
     */
    public inline fun cfnDataSetS3SourceProperty(
        block: CfnDataSetS3SourcePropertyDsl.() -> Unit = {}
    ): CfnDataSet.S3SourceProperty {
        val builder = CfnDataSetS3SourcePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * List of default values defined for a given string dataset parameter type.
     *
     * Currently only static values are supported.</p>
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringDatasetParameterDefaultValuesProperty stringDatasetParameterDefaultValuesProperty =
     * StringDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of("staticValues"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-stringdatasetparameterdefaultvalues.html)
     */
    public inline fun cfnDataSetStringDatasetParameterDefaultValuesProperty(
        block: CfnDataSetStringDatasetParameterDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnDataSet.StringDatasetParameterDefaultValuesProperty {
        val builder = CfnDataSetStringDatasetParameterDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter created in the dataset of string data type.</p>.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringDatasetParameterProperty stringDatasetParameterProperty =
     * StringDatasetParameterProperty.builder()
     * .id("id")
     * .name("name")
     * .valueType("valueType")
     * // the properties below are optional
     * .defaultValues(StringDatasetParameterDefaultValuesProperty.builder()
     * .staticValues(List.of("staticValues"))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-stringdatasetparameter.html)
     */
    public inline fun cfnDataSetStringDatasetParameterProperty(
        block: CfnDataSetStringDatasetParameterPropertyDsl.() -> Unit = {}
    ): CfnDataSet.StringDatasetParameterProperty {
        val builder = CfnDataSetStringDatasetParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A transform operation that tags a column with additional information.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TagColumnOperationProperty tagColumnOperationProperty = TagColumnOperationProperty.builder()
     * .columnName("columnName")
     * .tags(List.of(ColumnTagProperty.builder()
     * .columnDescription(ColumnDescriptionProperty.builder()
     * .text("text")
     * .build())
     * .columnGeographicRole("columnGeographicRole")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-tagcolumnoperation.html)
     */
    public inline fun cfnDataSetTagColumnOperationProperty(
        block: CfnDataSetTagColumnOperationPropertyDsl.() -> Unit = {}
    ): CfnDataSet.TagColumnOperationProperty {
        val builder = CfnDataSetTagColumnOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A data transformation on a logical table.
     *
     * This is a variant type structure. For this structure to be valid, only one of the attributes
     * can be non-null.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TransformOperationProperty transformOperationProperty = TransformOperationProperty.builder()
     * .castColumnTypeOperation(CastColumnTypeOperationProperty.builder()
     * .columnName("columnName")
     * .newColumnType("newColumnType")
     * // the properties below are optional
     * .format("format")
     * .build())
     * .createColumnsOperation(CreateColumnsOperationProperty.builder()
     * .columns(List.of(CalculatedColumnProperty.builder()
     * .columnId("columnId")
     * .columnName("columnName")
     * .expression("expression")
     * .build()))
     * .build())
     * .filterOperation(FilterOperationProperty.builder()
     * .conditionExpression("conditionExpression")
     * .build())
     * .overrideDatasetParameterOperation(OverrideDatasetParameterOperationProperty.builder()
     * .parameterName("parameterName")
     * // the properties below are optional
     * .newDefaultValues(NewDefaultValuesProperty.builder()
     * .dateTimeStaticValues(List.of("dateTimeStaticValues"))
     * .decimalStaticValues(List.of(123))
     * .integerStaticValues(List.of(123))
     * .stringStaticValues(List.of("stringStaticValues"))
     * .build())
     * .newParameterName("newParameterName")
     * .build())
     * .projectOperation(ProjectOperationProperty.builder()
     * .projectedColumns(List.of("projectedColumns"))
     * .build())
     * .renameColumnOperation(RenameColumnOperationProperty.builder()
     * .columnName("columnName")
     * .newColumnName("newColumnName")
     * .build())
     * .tagColumnOperation(TagColumnOperationProperty.builder()
     * .columnName("columnName")
     * .tags(List.of(ColumnTagProperty.builder()
     * .columnDescription(ColumnDescriptionProperty.builder()
     * .text("text")
     * .build())
     * .columnGeographicRole("columnGeographicRole")
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-transformoperation.html)
     */
    public inline fun cfnDataSetTransformOperationProperty(
        block: CfnDataSetTransformOperationPropertyDsl.() -> Unit = {}
    ): CfnDataSet.TransformOperationProperty {
        val builder = CfnDataSetTransformOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Information about the format for a source file or files.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * UploadSettingsProperty uploadSettingsProperty = UploadSettingsProperty.builder()
     * .containsHeader(false)
     * .delimiter("delimiter")
     * .format("format")
     * .startFromRow(123)
     * .textQualifier("textQualifier")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-uploadsettings.html)
     */
    public inline fun cfnDataSetUploadSettingsProperty(
        block: CfnDataSetUploadSettingsPropertyDsl.() -> Unit = {}
    ): CfnDataSet.UploadSettingsProperty {
        val builder = CfnDataSetUploadSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Creates a data source.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CfnDataSource cfnDataSource = CfnDataSource.Builder.create(this, "MyCfnDataSource")
     * .alternateDataSourceParameters(List.of(DataSourceParametersProperty.builder()
     * .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .athenaParameters(AthenaParametersProperty.builder()
     * .roleArn("roleArn")
     * .workGroup("workGroup")
     * .build())
     * .auroraParameters(AuroraParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .databricksParameters(DatabricksParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .sqlEndpointPath("sqlEndpointPath")
     * .build())
     * .mariaDbParameters(MariaDbParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .mySqlParameters(MySqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .oracleParameters(OracleParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .postgreSqlParameters(PostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .prestoParameters(PrestoParametersProperty.builder()
     * .catalog("catalog")
     * .host("host")
     * .port(123)
     * .build())
     * .rdsParameters(RdsParametersProperty.builder()
     * .database("database")
     * .instanceId("instanceId")
     * .build())
     * .redshiftParameters(RedshiftParametersProperty.builder()
     * .database("database")
     * // the properties below are optional
     * .clusterId("clusterId")
     * .host("host")
     * .port(123)
     * .build())
     * .s3Parameters(S3ParametersProperty.builder()
     * .manifestFileLocation(ManifestFileLocationProperty.builder()
     * .bucket("bucket")
     * .key("key")
     * .build())
     * // the properties below are optional
     * .roleArn("roleArn")
     * .build())
     * .snowflakeParameters(SnowflakeParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .warehouse("warehouse")
     * .build())
     * .sparkParameters(SparkParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .build())
     * .sqlServerParameters(SqlServerParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .teradataParameters(TeradataParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .build()))
     * .awsAccountId("awsAccountId")
     * .credentials(DataSourceCredentialsProperty.builder()
     * .copySourceArn("copySourceArn")
     * .credentialPair(CredentialPairProperty.builder()
     * .password("password")
     * .username("username")
     * // the properties below are optional
     * .alternateDataSourceParameters(List.of(DataSourceParametersProperty.builder()
     * .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .athenaParameters(AthenaParametersProperty.builder()
     * .roleArn("roleArn")
     * .workGroup("workGroup")
     * .build())
     * .auroraParameters(AuroraParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .databricksParameters(DatabricksParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .sqlEndpointPath("sqlEndpointPath")
     * .build())
     * .mariaDbParameters(MariaDbParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .mySqlParameters(MySqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .oracleParameters(OracleParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .postgreSqlParameters(PostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .prestoParameters(PrestoParametersProperty.builder()
     * .catalog("catalog")
     * .host("host")
     * .port(123)
     * .build())
     * .rdsParameters(RdsParametersProperty.builder()
     * .database("database")
     * .instanceId("instanceId")
     * .build())
     * .redshiftParameters(RedshiftParametersProperty.builder()
     * .database("database")
     * // the properties below are optional
     * .clusterId("clusterId")
     * .host("host")
     * .port(123)
     * .build())
     * .s3Parameters(S3ParametersProperty.builder()
     * .manifestFileLocation(ManifestFileLocationProperty.builder()
     * .bucket("bucket")
     * .key("key")
     * .build())
     * // the properties below are optional
     * .roleArn("roleArn")
     * .build())
     * .snowflakeParameters(SnowflakeParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .warehouse("warehouse")
     * .build())
     * .sparkParameters(SparkParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .build())
     * .sqlServerParameters(SqlServerParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .teradataParameters(TeradataParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .build()))
     * .build())
     * .secretArn("secretArn")
     * .build())
     * .dataSourceId("dataSourceId")
     * .dataSourceParameters(DataSourceParametersProperty.builder()
     * .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .athenaParameters(AthenaParametersProperty.builder()
     * .roleArn("roleArn")
     * .workGroup("workGroup")
     * .build())
     * .auroraParameters(AuroraParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .databricksParameters(DatabricksParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .sqlEndpointPath("sqlEndpointPath")
     * .build())
     * .mariaDbParameters(MariaDbParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .mySqlParameters(MySqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .oracleParameters(OracleParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .postgreSqlParameters(PostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .prestoParameters(PrestoParametersProperty.builder()
     * .catalog("catalog")
     * .host("host")
     * .port(123)
     * .build())
     * .rdsParameters(RdsParametersProperty.builder()
     * .database("database")
     * .instanceId("instanceId")
     * .build())
     * .redshiftParameters(RedshiftParametersProperty.builder()
     * .database("database")
     * // the properties below are optional
     * .clusterId("clusterId")
     * .host("host")
     * .port(123)
     * .build())
     * .s3Parameters(S3ParametersProperty.builder()
     * .manifestFileLocation(ManifestFileLocationProperty.builder()
     * .bucket("bucket")
     * .key("key")
     * .build())
     * // the properties below are optional
     * .roleArn("roleArn")
     * .build())
     * .snowflakeParameters(SnowflakeParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .warehouse("warehouse")
     * .build())
     * .sparkParameters(SparkParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .build())
     * .sqlServerParameters(SqlServerParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .teradataParameters(TeradataParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .build())
     * .errorInfo(DataSourceErrorInfoProperty.builder()
     * .message("message")
     * .type("type")
     * .build())
     * .name("name")
     * .permissions(List.of(ResourcePermissionProperty.builder()
     * .actions(List.of("actions"))
     * .principal("principal")
     * .build()))
     * .sslProperties(SslPropertiesProperty.builder()
     * .disableSsl(false)
     * .build())
     * .tags(List.of(CfnTag.builder()
     * .key("key")
     * .value("value")
     * .build()))
     * .type("type")
     * .vpcConnectionProperties(VpcConnectionPropertiesProperty.builder()
     * .vpcConnectionArn("vpcConnectionArn")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html)
     */
    public inline fun cfnDataSource(
        scope: Construct,
        id: String,
        block: CfnDataSourceDsl.() -> Unit = {},
    ): CfnDataSource {
        val builder = CfnDataSourceDsl(scope, id)
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for OpenSearch.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AmazonElasticsearchParametersProperty amazonElasticsearchParametersProperty =
     * AmazonElasticsearchParametersProperty.builder()
     * .domain("domain")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-amazonelasticsearchparameters.html)
     */
    public inline fun cfnDataSourceAmazonElasticsearchParametersProperty(
        block: CfnDataSourceAmazonElasticsearchParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.AmazonElasticsearchParametersProperty {
        val builder = CfnDataSourceAmazonElasticsearchParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for OpenSearch.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AmazonOpenSearchParametersProperty amazonOpenSearchParametersProperty =
     * AmazonOpenSearchParametersProperty.builder()
     * .domain("domain")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-amazonopensearchparameters.html)
     */
    public inline fun cfnDataSourceAmazonOpenSearchParametersProperty(
        block: CfnDataSourceAmazonOpenSearchParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.AmazonOpenSearchParametersProperty {
        val builder = CfnDataSourceAmazonOpenSearchParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Parameters for Amazon Athena.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AthenaParametersProperty athenaParametersProperty = AthenaParametersProperty.builder()
     * .roleArn("roleArn")
     * .workGroup("workGroup")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-athenaparameters.html)
     */
    public inline fun cfnDataSourceAthenaParametersProperty(
        block: CfnDataSourceAthenaParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.AthenaParametersProperty {
        val builder = CfnDataSourceAthenaParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Parameters for Amazon Aurora.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AuroraParametersProperty auroraParametersProperty = AuroraParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-auroraparameters.html)
     */
    public inline fun cfnDataSourceAuroraParametersProperty(
        block: CfnDataSourceAuroraParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.AuroraParametersProperty {
        val builder = CfnDataSourceAuroraParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Parameters for Amazon Aurora PostgreSQL-Compatible Edition.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AuroraPostgreSqlParametersProperty auroraPostgreSqlParametersProperty =
     * AuroraPostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-aurorapostgresqlparameters.html)
     */
    public inline fun cfnDataSourceAuroraPostgreSqlParametersProperty(
        block: CfnDataSourceAuroraPostgreSqlParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.AuroraPostgreSqlParametersProperty {
        val builder = CfnDataSourceAuroraPostgreSqlParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The combination of user name and password that are used as credentials.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CredentialPairProperty credentialPairProperty = CredentialPairProperty.builder()
     * .password("password")
     * .username("username")
     * // the properties below are optional
     * .alternateDataSourceParameters(List.of(DataSourceParametersProperty.builder()
     * .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .athenaParameters(AthenaParametersProperty.builder()
     * .roleArn("roleArn")
     * .workGroup("workGroup")
     * .build())
     * .auroraParameters(AuroraParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .databricksParameters(DatabricksParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .sqlEndpointPath("sqlEndpointPath")
     * .build())
     * .mariaDbParameters(MariaDbParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .mySqlParameters(MySqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .oracleParameters(OracleParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .postgreSqlParameters(PostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .prestoParameters(PrestoParametersProperty.builder()
     * .catalog("catalog")
     * .host("host")
     * .port(123)
     * .build())
     * .rdsParameters(RdsParametersProperty.builder()
     * .database("database")
     * .instanceId("instanceId")
     * .build())
     * .redshiftParameters(RedshiftParametersProperty.builder()
     * .database("database")
     * // the properties below are optional
     * .clusterId("clusterId")
     * .host("host")
     * .port(123)
     * .build())
     * .s3Parameters(S3ParametersProperty.builder()
     * .manifestFileLocation(ManifestFileLocationProperty.builder()
     * .bucket("bucket")
     * .key("key")
     * .build())
     * // the properties below are optional
     * .roleArn("roleArn")
     * .build())
     * .snowflakeParameters(SnowflakeParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .warehouse("warehouse")
     * .build())
     * .sparkParameters(SparkParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .build())
     * .sqlServerParameters(SqlServerParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .teradataParameters(TeradataParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-credentialpair.html)
     */
    public inline fun cfnDataSourceCredentialPairProperty(
        block: CfnDataSourceCredentialPairPropertyDsl.() -> Unit = {}
    ): CfnDataSource.CredentialPairProperty {
        val builder = CfnDataSourceCredentialPairPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Data source credentials.
     *
     * This is a variant type structure. For this structure to be valid, only one of the attributes
     * can be non-null.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataSourceCredentialsProperty dataSourceCredentialsProperty =
     * DataSourceCredentialsProperty.builder()
     * .copySourceArn("copySourceArn")
     * .credentialPair(CredentialPairProperty.builder()
     * .password("password")
     * .username("username")
     * // the properties below are optional
     * .alternateDataSourceParameters(List.of(DataSourceParametersProperty.builder()
     * .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .athenaParameters(AthenaParametersProperty.builder()
     * .roleArn("roleArn")
     * .workGroup("workGroup")
     * .build())
     * .auroraParameters(AuroraParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .databricksParameters(DatabricksParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .sqlEndpointPath("sqlEndpointPath")
     * .build())
     * .mariaDbParameters(MariaDbParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .mySqlParameters(MySqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .oracleParameters(OracleParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .postgreSqlParameters(PostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .prestoParameters(PrestoParametersProperty.builder()
     * .catalog("catalog")
     * .host("host")
     * .port(123)
     * .build())
     * .rdsParameters(RdsParametersProperty.builder()
     * .database("database")
     * .instanceId("instanceId")
     * .build())
     * .redshiftParameters(RedshiftParametersProperty.builder()
     * .database("database")
     * // the properties below are optional
     * .clusterId("clusterId")
     * .host("host")
     * .port(123)
     * .build())
     * .s3Parameters(S3ParametersProperty.builder()
     * .manifestFileLocation(ManifestFileLocationProperty.builder()
     * .bucket("bucket")
     * .key("key")
     * .build())
     * // the properties below are optional
     * .roleArn("roleArn")
     * .build())
     * .snowflakeParameters(SnowflakeParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .warehouse("warehouse")
     * .build())
     * .sparkParameters(SparkParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .build())
     * .sqlServerParameters(SqlServerParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .teradataParameters(TeradataParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .build()))
     * .build())
     * .secretArn("secretArn")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourcecredentials.html)
     */
    public inline fun cfnDataSourceDataSourceCredentialsProperty(
        block: CfnDataSourceDataSourceCredentialsPropertyDsl.() -> Unit = {}
    ): CfnDataSource.DataSourceCredentialsProperty {
        val builder = CfnDataSourceDataSourceCredentialsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Error information for the data source creation or update.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataSourceErrorInfoProperty dataSourceErrorInfoProperty = DataSourceErrorInfoProperty.builder()
     * .message("message")
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceerrorinfo.html)
     */
    public inline fun cfnDataSourceDataSourceErrorInfoProperty(
        block: CfnDataSourceDataSourceErrorInfoPropertyDsl.() -> Unit = {}
    ): CfnDataSource.DataSourceErrorInfoProperty {
        val builder = CfnDataSourceDataSourceErrorInfoPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters that Amazon QuickSight uses to connect to your underlying data source.
     *
     * This is a variant type structure. For this structure to be valid, only one of the attributes
     * can be non-null.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataSourceParametersProperty dataSourceParametersProperty =
     * DataSourceParametersProperty.builder()
     * .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .athenaParameters(AthenaParametersProperty.builder()
     * .roleArn("roleArn")
     * .workGroup("workGroup")
     * .build())
     * .auroraParameters(AuroraParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .databricksParameters(DatabricksParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .sqlEndpointPath("sqlEndpointPath")
     * .build())
     * .mariaDbParameters(MariaDbParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .mySqlParameters(MySqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .oracleParameters(OracleParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .postgreSqlParameters(PostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .prestoParameters(PrestoParametersProperty.builder()
     * .catalog("catalog")
     * .host("host")
     * .port(123)
     * .build())
     * .rdsParameters(RdsParametersProperty.builder()
     * .database("database")
     * .instanceId("instanceId")
     * .build())
     * .redshiftParameters(RedshiftParametersProperty.builder()
     * .database("database")
     * // the properties below are optional
     * .clusterId("clusterId")
     * .host("host")
     * .port(123)
     * .build())
     * .s3Parameters(S3ParametersProperty.builder()
     * .manifestFileLocation(ManifestFileLocationProperty.builder()
     * .bucket("bucket")
     * .key("key")
     * .build())
     * // the properties below are optional
     * .roleArn("roleArn")
     * .build())
     * .snowflakeParameters(SnowflakeParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .warehouse("warehouse")
     * .build())
     * .sparkParameters(SparkParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .build())
     * .sqlServerParameters(SqlServerParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .teradataParameters(TeradataParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html)
     */
    public inline fun cfnDataSourceDataSourceParametersProperty(
        block: CfnDataSourceDataSourceParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.DataSourceParametersProperty {
        val builder = CfnDataSourceDataSourceParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The required parameters that are needed to connect to a Databricks data source.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DatabricksParametersProperty databricksParametersProperty =
     * DatabricksParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .sqlEndpointPath("sqlEndpointPath")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-databricksparameters.html)
     */
    public inline fun cfnDataSourceDatabricksParametersProperty(
        block: CfnDataSourceDatabricksParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.DatabricksParametersProperty {
        val builder = CfnDataSourceDatabricksParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Amazon S3 manifest file location.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ManifestFileLocationProperty manifestFileLocationProperty =
     * ManifestFileLocationProperty.builder()
     * .bucket("bucket")
     * .key("key")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-manifestfilelocation.html)
     */
    public inline fun cfnDataSourceManifestFileLocationProperty(
        block: CfnDataSourceManifestFileLocationPropertyDsl.() -> Unit = {}
    ): CfnDataSource.ManifestFileLocationProperty {
        val builder = CfnDataSourceManifestFileLocationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for MariaDB.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MariaDbParametersProperty mariaDbParametersProperty = MariaDbParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-mariadbparameters.html)
     */
    public inline fun cfnDataSourceMariaDbParametersProperty(
        block: CfnDataSourceMariaDbParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.MariaDbParametersProperty {
        val builder = CfnDataSourceMariaDbParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for MySQL.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MySqlParametersProperty mySqlParametersProperty = MySqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-mysqlparameters.html)
     */
    public inline fun cfnDataSourceMySqlParametersProperty(
        block: CfnDataSourceMySqlParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.MySqlParametersProperty {
        val builder = CfnDataSourceMySqlParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Oracle parameters.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * OracleParametersProperty oracleParametersProperty = OracleParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-oracleparameters.html)
     */
    public inline fun cfnDataSourceOracleParametersProperty(
        block: CfnDataSourceOracleParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.OracleParametersProperty {
        val builder = CfnDataSourceOracleParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for PostgreSQL.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PostgreSqlParametersProperty postgreSqlParametersProperty =
     * PostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-postgresqlparameters.html)
     */
    public inline fun cfnDataSourcePostgreSqlParametersProperty(
        block: CfnDataSourcePostgreSqlParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.PostgreSqlParametersProperty {
        val builder = CfnDataSourcePostgreSqlParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for Presto.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PrestoParametersProperty prestoParametersProperty = PrestoParametersProperty.builder()
     * .catalog("catalog")
     * .host("host")
     * .port(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-prestoparameters.html)
     */
    public inline fun cfnDataSourcePrestoParametersProperty(
        block: CfnDataSourcePrestoParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.PrestoParametersProperty {
        val builder = CfnDataSourcePrestoParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Properties for defining a `CfnDataSource`.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CfnDataSourceProps cfnDataSourceProps = CfnDataSourceProps.builder()
     * .alternateDataSourceParameters(List.of(DataSourceParametersProperty.builder()
     * .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .athenaParameters(AthenaParametersProperty.builder()
     * .roleArn("roleArn")
     * .workGroup("workGroup")
     * .build())
     * .auroraParameters(AuroraParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .databricksParameters(DatabricksParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .sqlEndpointPath("sqlEndpointPath")
     * .build())
     * .mariaDbParameters(MariaDbParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .mySqlParameters(MySqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .oracleParameters(OracleParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .postgreSqlParameters(PostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .prestoParameters(PrestoParametersProperty.builder()
     * .catalog("catalog")
     * .host("host")
     * .port(123)
     * .build())
     * .rdsParameters(RdsParametersProperty.builder()
     * .database("database")
     * .instanceId("instanceId")
     * .build())
     * .redshiftParameters(RedshiftParametersProperty.builder()
     * .database("database")
     * // the properties below are optional
     * .clusterId("clusterId")
     * .host("host")
     * .port(123)
     * .build())
     * .s3Parameters(S3ParametersProperty.builder()
     * .manifestFileLocation(ManifestFileLocationProperty.builder()
     * .bucket("bucket")
     * .key("key")
     * .build())
     * // the properties below are optional
     * .roleArn("roleArn")
     * .build())
     * .snowflakeParameters(SnowflakeParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .warehouse("warehouse")
     * .build())
     * .sparkParameters(SparkParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .build())
     * .sqlServerParameters(SqlServerParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .teradataParameters(TeradataParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .build()))
     * .awsAccountId("awsAccountId")
     * .credentials(DataSourceCredentialsProperty.builder()
     * .copySourceArn("copySourceArn")
     * .credentialPair(CredentialPairProperty.builder()
     * .password("password")
     * .username("username")
     * // the properties below are optional
     * .alternateDataSourceParameters(List.of(DataSourceParametersProperty.builder()
     * .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .athenaParameters(AthenaParametersProperty.builder()
     * .roleArn("roleArn")
     * .workGroup("workGroup")
     * .build())
     * .auroraParameters(AuroraParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .databricksParameters(DatabricksParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .sqlEndpointPath("sqlEndpointPath")
     * .build())
     * .mariaDbParameters(MariaDbParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .mySqlParameters(MySqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .oracleParameters(OracleParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .postgreSqlParameters(PostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .prestoParameters(PrestoParametersProperty.builder()
     * .catalog("catalog")
     * .host("host")
     * .port(123)
     * .build())
     * .rdsParameters(RdsParametersProperty.builder()
     * .database("database")
     * .instanceId("instanceId")
     * .build())
     * .redshiftParameters(RedshiftParametersProperty.builder()
     * .database("database")
     * // the properties below are optional
     * .clusterId("clusterId")
     * .host("host")
     * .port(123)
     * .build())
     * .s3Parameters(S3ParametersProperty.builder()
     * .manifestFileLocation(ManifestFileLocationProperty.builder()
     * .bucket("bucket")
     * .key("key")
     * .build())
     * // the properties below are optional
     * .roleArn("roleArn")
     * .build())
     * .snowflakeParameters(SnowflakeParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .warehouse("warehouse")
     * .build())
     * .sparkParameters(SparkParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .build())
     * .sqlServerParameters(SqlServerParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .teradataParameters(TeradataParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .build()))
     * .build())
     * .secretArn("secretArn")
     * .build())
     * .dataSourceId("dataSourceId")
     * .dataSourceParameters(DataSourceParametersProperty.builder()
     * .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()
     * .domain("domain")
     * .build())
     * .athenaParameters(AthenaParametersProperty.builder()
     * .roleArn("roleArn")
     * .workGroup("workGroup")
     * .build())
     * .auroraParameters(AuroraParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .databricksParameters(DatabricksParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .sqlEndpointPath("sqlEndpointPath")
     * .build())
     * .mariaDbParameters(MariaDbParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .mySqlParameters(MySqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .oracleParameters(OracleParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .postgreSqlParameters(PostgreSqlParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .prestoParameters(PrestoParametersProperty.builder()
     * .catalog("catalog")
     * .host("host")
     * .port(123)
     * .build())
     * .rdsParameters(RdsParametersProperty.builder()
     * .database("database")
     * .instanceId("instanceId")
     * .build())
     * .redshiftParameters(RedshiftParametersProperty.builder()
     * .database("database")
     * // the properties below are optional
     * .clusterId("clusterId")
     * .host("host")
     * .port(123)
     * .build())
     * .s3Parameters(S3ParametersProperty.builder()
     * .manifestFileLocation(ManifestFileLocationProperty.builder()
     * .bucket("bucket")
     * .key("key")
     * .build())
     * // the properties below are optional
     * .roleArn("roleArn")
     * .build())
     * .snowflakeParameters(SnowflakeParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .warehouse("warehouse")
     * .build())
     * .sparkParameters(SparkParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .build())
     * .sqlServerParameters(SqlServerParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .teradataParameters(TeradataParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build())
     * .build())
     * .errorInfo(DataSourceErrorInfoProperty.builder()
     * .message("message")
     * .type("type")
     * .build())
     * .name("name")
     * .permissions(List.of(ResourcePermissionProperty.builder()
     * .actions(List.of("actions"))
     * .principal("principal")
     * .build()))
     * .sslProperties(SslPropertiesProperty.builder()
     * .disableSsl(false)
     * .build())
     * .tags(List.of(CfnTag.builder()
     * .key("key")
     * .value("value")
     * .build()))
     * .type("type")
     * .vpcConnectionProperties(VpcConnectionPropertiesProperty.builder()
     * .vpcConnectionArn("vpcConnectionArn")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html)
     */
    public inline fun cfnDataSourceProps(
        block: CfnDataSourcePropsDsl.() -> Unit = {}
    ): CfnDataSourceProps {
        val builder = CfnDataSourcePropsDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for Amazon RDS.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RdsParametersProperty rdsParametersProperty = RdsParametersProperty.builder()
     * .database("database")
     * .instanceId("instanceId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-rdsparameters.html)
     */
    public inline fun cfnDataSourceRdsParametersProperty(
        block: CfnDataSourceRdsParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.RdsParametersProperty {
        val builder = CfnDataSourceRdsParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for Amazon Redshift.
     *
     * The `ClusterId` field can be blank if `Host` and `Port` are both set. The `Host` and `Port`
     * fields can be blank if the `ClusterId` field is set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RedshiftParametersProperty redshiftParametersProperty = RedshiftParametersProperty.builder()
     * .database("database")
     * // the properties below are optional
     * .clusterId("clusterId")
     * .host("host")
     * .port(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-redshiftparameters.html)
     */
    public inline fun cfnDataSourceRedshiftParametersProperty(
        block: CfnDataSourceRedshiftParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.RedshiftParametersProperty {
        val builder = CfnDataSourceRedshiftParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Permission for the resource.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ResourcePermissionProperty resourcePermissionProperty = ResourcePermissionProperty.builder()
     * .actions(List.of("actions"))
     * .principal("principal")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-resourcepermission.html)
     */
    public inline fun cfnDataSourceResourcePermissionProperty(
        block: CfnDataSourceResourcePermissionPropertyDsl.() -> Unit = {}
    ): CfnDataSource.ResourcePermissionProperty {
        val builder = CfnDataSourceResourcePermissionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for S3.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * S3ParametersProperty s3ParametersProperty = S3ParametersProperty.builder()
     * .manifestFileLocation(ManifestFileLocationProperty.builder()
     * .bucket("bucket")
     * .key("key")
     * .build())
     * // the properties below are optional
     * .roleArn("roleArn")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-s3parameters.html)
     */
    public inline fun cfnDataSourceS3ParametersProperty(
        block: CfnDataSourceS3ParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.S3ParametersProperty {
        val builder = CfnDataSourceS3ParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for Snowflake.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SnowflakeParametersProperty snowflakeParametersProperty = SnowflakeParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .warehouse("warehouse")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-snowflakeparameters.html)
     */
    public inline fun cfnDataSourceSnowflakeParametersProperty(
        block: CfnDataSourceSnowflakeParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.SnowflakeParametersProperty {
        val builder = CfnDataSourceSnowflakeParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for Spark.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SparkParametersProperty sparkParametersProperty = SparkParametersProperty.builder()
     * .host("host")
     * .port(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-sparkparameters.html)
     */
    public inline fun cfnDataSourceSparkParametersProperty(
        block: CfnDataSourceSparkParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.SparkParametersProperty {
        val builder = CfnDataSourceSparkParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for SQL Server.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SqlServerParametersProperty sqlServerParametersProperty = SqlServerParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-sqlserverparameters.html)
     */
    public inline fun cfnDataSourceSqlServerParametersProperty(
        block: CfnDataSourceSqlServerParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.SqlServerParametersProperty {
        val builder = CfnDataSourceSqlServerParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your
     * underlying data source.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SslPropertiesProperty sslPropertiesProperty = SslPropertiesProperty.builder()
     * .disableSsl(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-sslproperties.html)
     */
    public inline fun cfnDataSourceSslPropertiesProperty(
        block: CfnDataSourceSslPropertiesPropertyDsl.() -> Unit = {}
    ): CfnDataSource.SslPropertiesProperty {
        val builder = CfnDataSourceSslPropertiesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The parameters for Teradata.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TeradataParametersProperty teradataParametersProperty = TeradataParametersProperty.builder()
     * .database("database")
     * .host("host")
     * .port(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-teradataparameters.html)
     */
    public inline fun cfnDataSourceTeradataParametersProperty(
        block: CfnDataSourceTeradataParametersPropertyDsl.() -> Unit = {}
    ): CfnDataSource.TeradataParametersProperty {
        val builder = CfnDataSourceTeradataParametersPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * VPC connection properties.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VpcConnectionPropertiesProperty vpcConnectionPropertiesProperty =
     * VpcConnectionPropertiesProperty.builder()
     * .vpcConnectionArn("vpcConnectionArn")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-vpcconnectionproperties.html)
     */
    public inline fun cfnDataSourceVpcConnectionPropertiesProperty(
        block: CfnDataSourceVpcConnectionPropertiesPropertyDsl.() -> Unit = {}
    ): CfnDataSource.VpcConnectionPropertiesProperty {
        val builder = CfnDataSourceVpcConnectionPropertiesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Creates a refresh schedule for a dataset in Amazon QuickSight .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CfnRefreshSchedule cfnRefreshSchedule = CfnRefreshSchedule.Builder.create(this,
     * "MyCfnRefreshSchedule")
     * .awsAccountId("awsAccountId")
     * .dataSetId("dataSetId")
     * .schedule(RefreshScheduleMapProperty.builder()
     * .refreshType("refreshType")
     * .scheduleFrequency(ScheduleFrequencyProperty.builder()
     * .interval("interval")
     * .refreshOnDay(RefreshOnDayProperty.builder()
     * .dayOfMonth("dayOfMonth")
     * .dayOfWeek("dayOfWeek")
     * .build())
     * .timeOfTheDay("timeOfTheDay")
     * .timeZone("timeZone")
     * .build())
     * .scheduleId("scheduleId")
     * .startAfterDateTime("startAfterDateTime")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-refreshschedule.html)
     */
    public inline fun cfnRefreshSchedule(
        scope: Construct,
        id: String,
        block: CfnRefreshScheduleDsl.() -> Unit = {},
    ): CfnRefreshSchedule {
        val builder = CfnRefreshScheduleDsl(scope, id)
        builder.apply(block)
        return builder.build()
    }

    /**
     * Properties for defining a `CfnRefreshSchedule`.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CfnRefreshScheduleProps cfnRefreshScheduleProps = CfnRefreshScheduleProps.builder()
     * .awsAccountId("awsAccountId")
     * .dataSetId("dataSetId")
     * .schedule(RefreshScheduleMapProperty.builder()
     * .refreshType("refreshType")
     * .scheduleFrequency(ScheduleFrequencyProperty.builder()
     * .interval("interval")
     * .refreshOnDay(RefreshOnDayProperty.builder()
     * .dayOfMonth("dayOfMonth")
     * .dayOfWeek("dayOfWeek")
     * .build())
     * .timeOfTheDay("timeOfTheDay")
     * .timeZone("timeZone")
     * .build())
     * .scheduleId("scheduleId")
     * .startAfterDateTime("startAfterDateTime")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-refreshschedule.html)
     */
    public inline fun cfnRefreshScheduleProps(
        block: CfnRefreshSchedulePropsDsl.() -> Unit = {}
    ): CfnRefreshScheduleProps {
        val builder = CfnRefreshSchedulePropsDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The day that you want yout dataset to refresh.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RefreshOnDayProperty refreshOnDayProperty = RefreshOnDayProperty.builder()
     * .dayOfMonth("dayOfMonth")
     * .dayOfWeek("dayOfWeek")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-refreshonday.html)
     */
    public inline fun cfnRefreshScheduleRefreshOnDayProperty(
        block: CfnRefreshScheduleRefreshOnDayPropertyDsl.() -> Unit = {}
    ): CfnRefreshSchedule.RefreshOnDayProperty {
        val builder = CfnRefreshScheduleRefreshOnDayPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A summary of a configured refresh schedule for a dataset.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RefreshScheduleMapProperty refreshScheduleMapProperty = RefreshScheduleMapProperty.builder()
     * .refreshType("refreshType")
     * .scheduleFrequency(ScheduleFrequencyProperty.builder()
     * .interval("interval")
     * .refreshOnDay(RefreshOnDayProperty.builder()
     * .dayOfMonth("dayOfMonth")
     * .dayOfWeek("dayOfWeek")
     * .build())
     * .timeOfTheDay("timeOfTheDay")
     * .timeZone("timeZone")
     * .build())
     * .scheduleId("scheduleId")
     * .startAfterDateTime("startAfterDateTime")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-refreshschedulemap.html)
     */
    public inline fun cfnRefreshScheduleRefreshScheduleMapProperty(
        block: CfnRefreshScheduleRefreshScheduleMapPropertyDsl.() -> Unit = {}
    ): CfnRefreshSchedule.RefreshScheduleMapProperty {
        val builder = CfnRefreshScheduleRefreshScheduleMapPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The frequency for the refresh schedule.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ScheduleFrequencyProperty scheduleFrequencyProperty = ScheduleFrequencyProperty.builder()
     * .interval("interval")
     * .refreshOnDay(RefreshOnDayProperty.builder()
     * .dayOfMonth("dayOfMonth")
     * .dayOfWeek("dayOfWeek")
     * .build())
     * .timeOfTheDay("timeOfTheDay")
     * .timeZone("timeZone")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-schedulefrequency.html)
     */
    public inline fun cfnRefreshScheduleScheduleFrequencyProperty(
        block: CfnRefreshScheduleScheduleFrequencyPropertyDsl.() -> Unit = {}
    ): CfnRefreshSchedule.ScheduleFrequencyProperty {
        val builder = CfnRefreshScheduleScheduleFrequencyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Creates a template from an existing Amazon QuickSight analysis or template.
     *
     * You can use the resulting template to create a dashboard.
     *
     * A *template* is an entity in Amazon QuickSight that encapsulates the metadata required to
     * create an analysis and that you can use to create s dashboard. A template adds a layer of
     * abstraction by using placeholders to replace the dataset associated with the analysis. You
     * can use templates to create dashboards by replacing dataset placeholders with datasets that
     * follow the same schema that was used to create the source analysis and template.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-template.html)
     */
    public inline fun cfnTemplate(
        scope: Construct,
        id: String,
        block: CfnTemplateDsl.() -> Unit = {},
    ): CfnTemplate {
        val builder = CfnTemplateDsl(scope, id)
        builder.apply(block)
        return builder.build()
    }

    /**
     * An aggregation function aggregates values from a dimension or measure.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AggregationFunctionProperty aggregationFunctionProperty = AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-aggregationfunction.html)
     */
    public inline fun cfnTemplateAggregationFunctionProperty(
        block: CfnTemplateAggregationFunctionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.AggregationFunctionProperty {
        val builder = CfnTemplateAggregationFunctionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration options to sort aggregated values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AggregationSortConfigurationProperty aggregationSortConfigurationProperty =
     * AggregationSortConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sortDirection("sortDirection")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-aggregationsortconfiguration.html)
     */
    public inline fun cfnTemplateAggregationSortConfigurationProperty(
        block: CfnTemplateAggregationSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.AggregationSortConfigurationProperty {
        val builder = CfnTemplateAggregationSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for default analysis settings.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AnalysisDefaultsProperty analysisDefaultsProperty = AnalysisDefaultsProperty.builder()
     * .defaultNewSheetConfiguration(DefaultNewSheetConfigurationProperty.builder()
     * .interactiveLayoutConfiguration(DefaultInteractiveLayoutConfigurationProperty.builder()
     * .freeForm(DefaultFreeFormLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .grid(DefaultGridLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build())
     * .paginatedLayoutConfiguration(DefaultPaginatedLayoutConfigurationProperty.builder()
     * .sectionBased(DefaultSectionBasedLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .build())
     * .build())
     * .sheetContentType("sheetContentType")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-analysisdefaults.html)
     */
    public inline fun cfnTemplateAnalysisDefaultsProperty(
        block: CfnTemplateAnalysisDefaultsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.AnalysisDefaultsProperty {
        val builder = CfnTemplateAnalysisDefaultsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The date configuration of the filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AnchorDateConfigurationProperty anchorDateConfigurationProperty =
     * AnchorDateConfigurationProperty.builder()
     * .anchorOption("anchorOption")
     * .parameterName("parameterName")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-anchordateconfiguration.html)
     */
    public inline fun cfnTemplateAnchorDateConfigurationProperty(
        block: CfnTemplateAnchorDateConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.AnchorDateConfigurationProperty {
        val builder = CfnTemplateAnchorDateConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The arc axis configuration of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ArcAxisConfigurationProperty arcAxisConfigurationProperty =
     * ArcAxisConfigurationProperty.builder()
     * .range(ArcAxisDisplayRangeProperty.builder()
     * .max(123)
     * .min(123)
     * .build())
     * .reserveRange(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcaxisconfiguration.html)
     */
    public inline fun cfnTemplateArcAxisConfigurationProperty(
        block: CfnTemplateArcAxisConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ArcAxisConfigurationProperty {
        val builder = CfnTemplateArcAxisConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The arc axis range of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ArcAxisDisplayRangeProperty arcAxisDisplayRangeProperty = ArcAxisDisplayRangeProperty.builder()
     * .max(123)
     * .min(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcaxisdisplayrange.html)
     */
    public inline fun cfnTemplateArcAxisDisplayRangeProperty(
        block: CfnTemplateArcAxisDisplayRangePropertyDsl.() -> Unit = {}
    ): CfnTemplate.ArcAxisDisplayRangeProperty {
        val builder = CfnTemplateArcAxisDisplayRangePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The arc configuration of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ArcConfigurationProperty arcConfigurationProperty = ArcConfigurationProperty.builder()
     * .arcAngle(123)
     * .arcThickness("arcThickness")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcconfiguration.html)
     */
    public inline fun cfnTemplateArcConfigurationProperty(
        block: CfnTemplateArcConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ArcConfigurationProperty {
        val builder = CfnTemplateArcConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the arc thickness of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ArcOptionsProperty arcOptionsProperty = ArcOptionsProperty.builder()
     * .arcThickness("arcThickness")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcoptions.html)
     */
    public inline fun cfnTemplateArcOptionsProperty(
        block: CfnTemplateArcOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ArcOptionsProperty {
        val builder = CfnTemplateArcOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data options for an axis.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * AxisDataOptionsProperty axisDataOptionsProperty = AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdataoptions.html)
     */
    public inline fun cfnTemplateAxisDataOptionsProperty(
        block: CfnTemplateAxisDataOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.AxisDataOptionsProperty {
        val builder = CfnTemplateAxisDataOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The minimum and maximum setup for an axis display range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisDisplayMinMaxRangeProperty axisDisplayMinMaxRangeProperty =
     * AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayminmaxrange.html)
     */
    public inline fun cfnTemplateAxisDisplayMinMaxRangeProperty(
        block: CfnTemplateAxisDisplayMinMaxRangePropertyDsl.() -> Unit = {}
    ): CfnTemplate.AxisDisplayMinMaxRangeProperty {
        val builder = CfnTemplateAxisDisplayMinMaxRangePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options for the axis label.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * AxisDisplayOptionsProperty axisDisplayOptionsProperty = AxisDisplayOptionsProperty.builder()
     * .axisLineVisibility("axisLineVisibility")
     * .axisOffset("axisOffset")
     * .dataOptions(AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build())
     * .gridLineVisibility("gridLineVisibility")
     * .scrollbarOptions(ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build())
     * .tickLabelOptions(AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayoptions.html)
     */
    public inline fun cfnTemplateAxisDisplayOptionsProperty(
        block: CfnTemplateAxisDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.AxisDisplayOptionsProperty {
        val builder = CfnTemplateAxisDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The range setup of a numeric axis display range.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * AxisDisplayRangeProperty axisDisplayRangeProperty = AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayrange.html)
     */
    public inline fun cfnTemplateAxisDisplayRangeProperty(
        block: CfnTemplateAxisDisplayRangePropertyDsl.() -> Unit = {}
    ): CfnTemplate.AxisDisplayRangeProperty {
        val builder = CfnTemplateAxisDisplayRangePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The label options for a chart axis.
     *
     * You must specify the field that the label is targeted to.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisLabelOptionsProperty axisLabelOptionsProperty = AxisLabelOptionsProperty.builder()
     * .applyTo(AxisLabelReferenceOptionsProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * .build())
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislabeloptions.html)
     */
    public inline fun cfnTemplateAxisLabelOptionsProperty(
        block: CfnTemplateAxisLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.AxisLabelOptionsProperty {
        val builder = CfnTemplateAxisLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The reference that specifies where the axis label is applied to.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisLabelReferenceOptionsProperty axisLabelReferenceOptionsProperty =
     * AxisLabelReferenceOptionsProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislabelreferenceoptions.html)
     */
    public inline fun cfnTemplateAxisLabelReferenceOptionsProperty(
        block: CfnTemplateAxisLabelReferenceOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.AxisLabelReferenceOptionsProperty {
        val builder = CfnTemplateAxisLabelReferenceOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The liner axis scale setup.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisLinearScaleProperty axisLinearScaleProperty = AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislinearscale.html)
     */
    public inline fun cfnTemplateAxisLinearScaleProperty(
        block: CfnTemplateAxisLinearScalePropertyDsl.() -> Unit = {}
    ): CfnTemplate.AxisLinearScaleProperty {
        val builder = CfnTemplateAxisLinearScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The logarithmic axis scale setup.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisLogarithmicScaleProperty axisLogarithmicScaleProperty =
     * AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislogarithmicscale.html)
     */
    public inline fun cfnTemplateAxisLogarithmicScaleProperty(
        block: CfnTemplateAxisLogarithmicScalePropertyDsl.() -> Unit = {}
    ): CfnTemplate.AxisLogarithmicScaleProperty {
        val builder = CfnTemplateAxisLogarithmicScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The scale setup options for a numeric axis display.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisScaleProperty axisScaleProperty = AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisscale.html)
     */
    public inline fun cfnTemplateAxisScaleProperty(
        block: CfnTemplateAxisScalePropertyDsl.() -> Unit = {}
    ): CfnTemplate.AxisScaleProperty {
        val builder = CfnTemplateAxisScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The tick label options of an axis.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * AxisTickLabelOptionsProperty axisTickLabelOptionsProperty =
     * AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisticklabeloptions.html)
     */
    public inline fun cfnTemplateAxisTickLabelOptionsProperty(
        block: CfnTemplateAxisTickLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.AxisTickLabelOptionsProperty {
        val builder = CfnTemplateAxisTickLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells of a bar chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateBarChartAggregatedFieldWellsProperty(
        block: CfnTemplateBarChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BarChartAggregatedFieldWellsProperty {
        val builder = CfnTemplateBarChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `BarChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html)
     */
    public inline fun cfnTemplateBarChartConfigurationProperty(
        block: CfnTemplateBarChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BarChartConfigurationProperty {
        val builder = CfnTemplateBarChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a `BarChartVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartfieldwells.html)
     */
    public inline fun cfnTemplateBarChartFieldWellsProperty(
        block: CfnTemplateBarChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BarChartFieldWellsProperty {
        val builder = CfnTemplateBarChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * sort-configuration-description.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BarChartSortConfigurationProperty barChartSortConfigurationProperty =
     * BarChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .colorItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .colorSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .smallMultiplesSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartsortconfiguration.html)
     */
    public inline fun cfnTemplateBarChartSortConfigurationProperty(
        block: CfnTemplateBarChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BarChartSortConfigurationProperty {
        val builder = CfnTemplateBarChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A bar chart.
     *
     * The `BarChartVisual` structure describes a visual that is a member of the bar chart family.
     * The following charts can be described using this structure:
     * * Horizontal bar chart
     * * Vertical bar chart
     * * Horizontal stacked bar chart
     * * Vertical stacked bar chart
     * * Horizontal stacked 100% bar chart
     * * Vertical stacked 100% bar chart
     *
     * For more information, see
     * [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartvisual.html)
     */
    public inline fun cfnTemplateBarChartVisualProperty(
        block: CfnTemplateBarChartVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BarChartVisualProperty {
        val builder = CfnTemplateBarChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the bin count of a histogram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BinCountOptionsProperty binCountOptionsProperty = BinCountOptionsProperty.builder()
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-bincountoptions.html)
     */
    public inline fun cfnTemplateBinCountOptionsProperty(
        block: CfnTemplateBinCountOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BinCountOptionsProperty {
        val builder = CfnTemplateBinCountOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the bin width of a histogram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BinWidthOptionsProperty binWidthOptionsProperty = BinWidthOptionsProperty.builder()
     * .binCountLimit(123)
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-binwidthoptions.html)
     */
    public inline fun cfnTemplateBinWidthOptionsProperty(
        block: CfnTemplateBinWidthOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BinWidthOptionsProperty {
        val builder = CfnTemplateBinWidthOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a body section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BodySectionConfigurationProperty bodySectionConfigurationProperty =
     * BodySectionConfigurationProperty.builder()
     * .content(BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .pageBreakConfiguration(SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build())
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-bodysectionconfiguration.html)
     */
    public inline fun cfnTemplateBodySectionConfigurationProperty(
        block: CfnTemplateBodySectionConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BodySectionConfigurationProperty {
        val builder = CfnTemplateBodySectionConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of content in a body section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BodySectionContentProperty bodySectionContentProperty = BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-bodysectioncontent.html)
     */
    public inline fun cfnTemplateBodySectionContentProperty(
        block: CfnTemplateBodySectionContentPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BodySectionContentProperty {
        val builder = CfnTemplateBodySectionContentPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well for a box plot.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotAggregatedFieldWellsProperty boxPlotAggregatedFieldWellsProperty =
     * BoxPlotAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateBoxPlotAggregatedFieldWellsProperty(
        block: CfnTemplateBoxPlotAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BoxPlotAggregatedFieldWellsProperty {
        val builder = CfnTemplateBoxPlotAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `BoxPlotVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html)
     */
    public inline fun cfnTemplateBoxPlotChartConfigurationProperty(
        block: CfnTemplateBoxPlotChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BoxPlotChartConfigurationProperty {
        val builder = CfnTemplateBoxPlotChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a `BoxPlotVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotFieldWellsProperty boxPlotFieldWellsProperty = BoxPlotFieldWellsProperty.builder()
     * .boxPlotAggregatedFieldWells(BoxPlotAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotfieldwells.html)
     */
    public inline fun cfnTemplateBoxPlotFieldWellsProperty(
        block: CfnTemplateBoxPlotFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BoxPlotFieldWellsProperty {
        val builder = CfnTemplateBoxPlotFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options of a box plot visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotOptionsProperty boxPlotOptionsProperty = BoxPlotOptionsProperty.builder()
     * .allDataPointsVisibility("allDataPointsVisibility")
     * .outlierVisibility("outlierVisibility")
     * .styleOptions(BoxPlotStyleOptionsProperty.builder()
     * .fillStyle("fillStyle")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotoptions.html)
     */
    public inline fun cfnTemplateBoxPlotOptionsProperty(
        block: CfnTemplateBoxPlotOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BoxPlotOptionsProperty {
        val builder = CfnTemplateBoxPlotOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `BoxPlotVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotSortConfigurationProperty boxPlotSortConfigurationProperty =
     * BoxPlotSortConfigurationProperty.builder()
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .paginationConfiguration(PaginationConfigurationProperty.builder()
     * .pageNumber(123)
     * .pageSize(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotsortconfiguration.html)
     */
    public inline fun cfnTemplateBoxPlotSortConfigurationProperty(
        block: CfnTemplateBoxPlotSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BoxPlotSortConfigurationProperty {
        val builder = CfnTemplateBoxPlotSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The style options of the box plot.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BoxPlotStyleOptionsProperty boxPlotStyleOptionsProperty = BoxPlotStyleOptionsProperty.builder()
     * .fillStyle("fillStyle")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotstyleoptions.html)
     */
    public inline fun cfnTemplateBoxPlotStyleOptionsProperty(
        block: CfnTemplateBoxPlotStyleOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BoxPlotStyleOptionsProperty {
        val builder = CfnTemplateBoxPlotStyleOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A box plot.
     *
     * For more information, see
     * [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotvisual.html)
     */
    public inline fun cfnTemplateBoxPlotVisualProperty(
        block: CfnTemplateBoxPlotVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.BoxPlotVisualProperty {
        val builder = CfnTemplateBoxPlotVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The calculated field of an analysis.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CalculatedFieldProperty calculatedFieldProperty = CalculatedFieldProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .expression("expression")
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-calculatedfield.html)
     */
    public inline fun cfnTemplateCalculatedFieldProperty(
        block: CfnTemplateCalculatedFieldPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CalculatedFieldProperty {
        val builder = CfnTemplateCalculatedFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The table calculation measure field for pivot tables.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CalculatedMeasureFieldProperty calculatedMeasureFieldProperty =
     * CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-calculatedmeasurefield.html)
     */
    public inline fun cfnTemplateCalculatedMeasureFieldProperty(
        block: CfnTemplateCalculatedMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CalculatedMeasureFieldProperty {
        val builder = CfnTemplateCalculatedMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The values that are displayed in a control can be configured to only show values that are
     * valid based on what's selected in other controls.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CascadingControlConfigurationProperty cascadingControlConfigurationProperty =
     * CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-cascadingcontrolconfiguration.html)
     */
    public inline fun cfnTemplateCascadingControlConfigurationProperty(
        block: CfnTemplateCascadingControlConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CascadingControlConfigurationProperty {
        val builder = CfnTemplateCascadingControlConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The source controls that are used in a `CascadingControlConfiguration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CascadingControlSourceProperty cascadingControlSourceProperty =
     * CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-cascadingcontrolsource.html)
     */
    public inline fun cfnTemplateCascadingControlSourceProperty(
        block: CfnTemplateCascadingControlSourcePropertyDsl.() -> Unit = {}
    ): CfnTemplate.CascadingControlSourceProperty {
        val builder = CfnTemplateCascadingControlSourcePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dimension type field with categorical type columns..
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoricalDimensionFieldProperty categoricalDimensionFieldProperty =
     * CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoricaldimensionfield.html)
     */
    public inline fun cfnTemplateCategoricalDimensionFieldProperty(
        block: CfnTemplateCategoricalDimensionFieldPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CategoricalDimensionFieldProperty {
        val builder = CfnTemplateCategoricalDimensionFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The measure type field with categorical type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoricalMeasureFieldProperty categoricalMeasureFieldProperty =
     * CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoricalmeasurefield.html)
     */
    public inline fun cfnTemplateCategoricalMeasureFieldProperty(
        block: CfnTemplateCategoricalMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CategoricalMeasureFieldProperty {
        val builder = CfnTemplateCategoricalMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The numeric equality type drill down filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoryDrillDownFilterProperty categoryDrillDownFilterProperty =
     * CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categorydrilldownfilter.html)
     */
    public inline fun cfnTemplateCategoryDrillDownFilterProperty(
        block: CfnTemplateCategoryDrillDownFilterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CategoryDrillDownFilterProperty {
        val builder = CfnTemplateCategoryDrillDownFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `CategoryFilter` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoryFilterConfigurationProperty categoryFilterConfigurationProperty =
     * CategoryFilterConfigurationProperty.builder()
     * .customFilterConfiguration(CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .customFilterListConfiguration(CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .filterListConfiguration(FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoryfilterconfiguration.html)
     */
    public inline fun cfnTemplateCategoryFilterConfigurationProperty(
        block: CfnTemplateCategoryFilterConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CategoryFilterConfigurationProperty {
        val builder = CfnTemplateCategoryFilterConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `CategoryFilter` filters text values.
     *
     * For more information, see
     * [Adding text filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CategoryFilterProperty categoryFilterProperty = CategoryFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .configuration(CategoryFilterConfigurationProperty.builder()
     * .customFilterConfiguration(CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .customFilterListConfiguration(CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .filterListConfiguration(FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .build())
     * .filterId("filterId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoryfilter.html)
     */
    public inline fun cfnTemplateCategoryFilterProperty(
        block: CfnTemplateCategoryFilterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CategoryFilterProperty {
        val builder = CfnTemplateCategoryFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The label options for an axis on a chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ChartAxisLabelOptionsProperty chartAxisLabelOptionsProperty =
     * ChartAxisLabelOptionsProperty.builder()
     * .axisLabelOptions(List.of(AxisLabelOptionsProperty.builder()
     * .applyTo(AxisLabelReferenceOptionsProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * .build())
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .build()))
     * .sortIconVisibility("sortIconVisibility")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-chartaxislabeloptions.html)
     */
    public inline fun cfnTemplateChartAxisLabelOptionsProperty(
        block: CfnTemplateChartAxisLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ChartAxisLabelOptionsProperty {
        val builder = CfnTemplateChartAxisLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The cluster marker configuration of the geospatial map selected point style.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ClusterMarkerConfigurationProperty clusterMarkerConfigurationProperty =
     * ClusterMarkerConfigurationProperty.builder()
     * .clusterMarker(ClusterMarkerProperty.builder()
     * .simpleClusterMarker(SimpleClusterMarkerProperty.builder()
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-clustermarkerconfiguration.html)
     */
    public inline fun cfnTemplateClusterMarkerConfigurationProperty(
        block: CfnTemplateClusterMarkerConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ClusterMarkerConfigurationProperty {
        val builder = CfnTemplateClusterMarkerConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The cluster marker that is a part of the cluster marker configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ClusterMarkerProperty clusterMarkerProperty = ClusterMarkerProperty.builder()
     * .simpleClusterMarker(SimpleClusterMarkerProperty.builder()
     * .color("color")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-clustermarker.html)
     */
    public inline fun cfnTemplateClusterMarkerProperty(
        block: CfnTemplateClusterMarkerPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ClusterMarkerProperty {
        val builder = CfnTemplateClusterMarkerPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the color scale that is applied to the visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColorScaleProperty colorScaleProperty = ColorScaleProperty.builder()
     * .colorFillType("colorFillType")
     * .colors(List.of(DataColorProperty.builder()
     * .color("color")
     * .dataValue(123)
     * .build()))
     * // the properties below are optional
     * .nullValueColor(DataColorProperty.builder()
     * .color("color")
     * .dataValue(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-colorscale.html)
     */
    public inline fun cfnTemplateColorScaleProperty(
        block: CfnTemplateColorScalePropertyDsl.() -> Unit = {}
    ): CfnTemplate.ColorScaleProperty {
        val builder = CfnTemplateColorScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The general configuration of a column.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnConfigurationProperty columnConfigurationProperty = ColumnConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .formatConfiguration(FormatConfigurationProperty.builder()
     * .dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .numberFormatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .stringFormatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .role("role")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnconfiguration.html)
     */
    public inline fun cfnTemplateColumnConfigurationProperty(
        block: CfnTemplateColumnConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ColumnConfigurationProperty {
        val builder = CfnTemplateColumnConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure describing the name, data type, and geographic role of the columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnGroupColumnSchemaProperty columnGroupColumnSchemaProperty =
     * ColumnGroupColumnSchemaProperty.builder()
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columngroupcolumnschema.html)
     */
    public inline fun cfnTemplateColumnGroupColumnSchemaProperty(
        block: CfnTemplateColumnGroupColumnSchemaPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ColumnGroupColumnSchemaProperty {
        val builder = CfnTemplateColumnGroupColumnSchemaPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The column group schema.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnGroupSchemaProperty columnGroupSchemaProperty = ColumnGroupSchemaProperty.builder()
     * .columnGroupColumnSchemaList(List.of(ColumnGroupColumnSchemaProperty.builder()
     * .name("name")
     * .build()))
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columngroupschema.html)
     */
    public inline fun cfnTemplateColumnGroupSchemaProperty(
        block: CfnTemplateColumnGroupSchemaPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ColumnGroupSchemaProperty {
        val builder = CfnTemplateColumnGroupSchemaPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the hierarchy of the fields for a visual element.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnHierarchyProperty columnHierarchyProperty = ColumnHierarchyProperty.builder()
     * .dateTimeHierarchy(DateTimeHierarchyProperty.builder()
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build())
     * .explicitHierarchy(ExplicitHierarchyProperty.builder()
     * .columns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build())
     * .predefinedHierarchy(PredefinedHierarchyProperty.builder()
     * .columns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnhierarchy.html)
     */
    public inline fun cfnTemplateColumnHierarchyProperty(
        block: CfnTemplateColumnHierarchyPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ColumnHierarchyProperty {
        val builder = CfnTemplateColumnHierarchyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A column of a data set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnIdentifierProperty columnIdentifierProperty = ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnidentifier.html)
     */
    public inline fun cfnTemplateColumnIdentifierProperty(
        block: CfnTemplateColumnIdentifierPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ColumnIdentifierProperty {
        val builder = CfnTemplateColumnIdentifierPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The column schema.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnSchemaProperty columnSchemaProperty = ColumnSchemaProperty.builder()
     * .dataType("dataType")
     * .geographicRole("geographicRole")
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnschema.html)
     */
    public inline fun cfnTemplateColumnSchemaProperty(
        block: CfnTemplateColumnSchemaPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ColumnSchemaProperty {
        val builder = CfnTemplateColumnSchemaPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration for a column that is not used in a field well.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnSortProperty columnSortProperty = ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnsort.html)
     */
    public inline fun cfnTemplateColumnSortProperty(
        block: CfnTemplateColumnSortPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ColumnSortProperty {
        val builder = CfnTemplateColumnSortPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The tooltip item for the columns that are not part of a field well.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ColumnTooltipItemProperty columnTooltipItemProperty = ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columntooltipitem.html)
     */
    public inline fun cfnTemplateColumnTooltipItemProperty(
        block: CfnTemplateColumnTooltipItemPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ColumnTooltipItemProperty {
        val builder = CfnTemplateColumnTooltipItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells of a combo chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateComboChartAggregatedFieldWellsProperty(
        block: CfnTemplateComboChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ComboChartAggregatedFieldWellsProperty {
        val builder = CfnTemplateComboChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `ComboChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html)
     */
    public inline fun cfnTemplateComboChartConfigurationProperty(
        block: CfnTemplateComboChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ComboChartConfigurationProperty {
        val builder = CfnTemplateComboChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of the visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartfieldwells.html)
     */
    public inline fun cfnTemplateComboChartFieldWellsProperty(
        block: CfnTemplateComboChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ComboChartFieldWellsProperty {
        val builder = CfnTemplateComboChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `ComboChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ComboChartSortConfigurationProperty comboChartSortConfigurationProperty =
     * ComboChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .colorItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .colorSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartsortconfiguration.html)
     */
    public inline fun cfnTemplateComboChartSortConfigurationProperty(
        block: CfnTemplateComboChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ComboChartSortConfigurationProperty {
        val builder = CfnTemplateComboChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A combo chart.
     *
     * The `ComboChartVisual` includes stacked bar combo charts and clustered bar combo charts
     *
     * For more information, see
     * [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartvisual.html)
     */
    public inline fun cfnTemplateComboChartVisualProperty(
        block: CfnTemplateComboChartVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ComboChartVisualProperty {
        val builder = CfnTemplateComboChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The comparison display configuration of a KPI or gauge chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ComparisonConfigurationProperty comparisonConfigurationProperty =
     * ComparisonConfigurationProperty.builder()
     * .comparisonFormat(ComparisonFormatConfigurationProperty.builder()
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .comparisonMethod("comparisonMethod")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-comparisonconfiguration.html)
     */
    public inline fun cfnTemplateComparisonConfigurationProperty(
        block: CfnTemplateComparisonConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ComparisonConfigurationProperty {
        val builder = CfnTemplateComparisonConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The format of the comparison.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ComparisonFormatConfigurationProperty comparisonFormatConfigurationProperty =
     * ComparisonFormatConfigurationProperty.builder()
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-comparisonformatconfiguration.html)
     */
    public inline fun cfnTemplateComparisonFormatConfigurationProperty(
        block: CfnTemplateComparisonFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ComparisonFormatConfigurationProperty {
        val builder = CfnTemplateComparisonFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The computation union that is used in an insight visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-computation.html)
     */
    public inline fun cfnTemplateComputationProperty(
        block: CfnTemplateComputationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ComputationProperty {
        val builder = CfnTemplateComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The formatting configuration for the color.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingColorProperty conditionalFormattingColorProperty =
     * ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcolor.html)
     */
    public inline fun cfnTemplateConditionalFormattingColorProperty(
        block: CfnTemplateConditionalFormattingColorPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ConditionalFormattingColorProperty {
        val builder = CfnTemplateConditionalFormattingColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the custom condition for an icon set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingCustomIconConditionProperty
     * conditionalFormattingCustomIconConditionProperty =
     * ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcustomiconcondition.html)
     */
    public inline fun cfnTemplateConditionalFormattingCustomIconConditionProperty(
        block: CfnTemplateConditionalFormattingCustomIconConditionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ConditionalFormattingCustomIconConditionProperty {
        val builder = CfnTemplateConditionalFormattingCustomIconConditionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Custom icon options for an icon set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingCustomIconOptionsProperty conditionalFormattingCustomIconOptionsProperty =
     * ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcustomiconoptions.html)
     */
    public inline fun cfnTemplateConditionalFormattingCustomIconOptionsProperty(
        block: CfnTemplateConditionalFormattingCustomIconOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ConditionalFormattingCustomIconOptionsProperty {
        val builder = CfnTemplateConditionalFormattingCustomIconOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for gradient color.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingGradientColorProperty conditionalFormattingGradientColorProperty =
     * ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattinggradientcolor.html)
     */
    public inline fun cfnTemplateConditionalFormattingGradientColorProperty(
        block: CfnTemplateConditionalFormattingGradientColorPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ConditionalFormattingGradientColorProperty {
        val builder = CfnTemplateConditionalFormattingGradientColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the icon display configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingIconDisplayConfigurationProperty
     * conditionalFormattingIconDisplayConfigurationProperty =
     * ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingicondisplayconfiguration.html)
     */
    public inline fun cfnTemplateConditionalFormattingIconDisplayConfigurationProperty(
        block: CfnTemplateConditionalFormattingIconDisplayConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ConditionalFormattingIconDisplayConfigurationProperty {
        val builder = CfnTemplateConditionalFormattingIconDisplayConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The formatting configuration for the icon.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingIconProperty conditionalFormattingIconProperty =
     * ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingicon.html)
     */
    public inline fun cfnTemplateConditionalFormattingIconProperty(
        block: CfnTemplateConditionalFormattingIconPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ConditionalFormattingIconProperty {
        val builder = CfnTemplateConditionalFormattingIconPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for icon set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingIconSetProperty conditionalFormattingIconSetProperty =
     * ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingiconset.html)
     */
    public inline fun cfnTemplateConditionalFormattingIconSetProperty(
        block: CfnTemplateConditionalFormattingIconSetPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ConditionalFormattingIconSetProperty {
        val builder = CfnTemplateConditionalFormattingIconSetPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for solid color.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ConditionalFormattingSolidColorProperty conditionalFormattingSolidColorProperty =
     * ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingsolidcolor.html)
     */
    public inline fun cfnTemplateConditionalFormattingSolidColorProperty(
        block: CfnTemplateConditionalFormattingSolidColorPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ConditionalFormattingSolidColorProperty {
        val builder = CfnTemplateConditionalFormattingSolidColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The contribution analysis visual display for a line, pie, or bar chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ContributionAnalysisDefaultProperty contributionAnalysisDefaultProperty =
     * ContributionAnalysisDefaultProperty.builder()
     * .contributorDimensions(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .measureFieldId("measureFieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-contributionanalysisdefault.html)
     */
    public inline fun cfnTemplateContributionAnalysisDefaultProperty(
        block: CfnTemplateContributionAnalysisDefaultPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ContributionAnalysisDefaultProperty {
        val builder = CfnTemplateContributionAnalysisDefaultPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the currency display format configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CurrencyDisplayFormatConfigurationProperty currencyDisplayFormatConfigurationProperty =
     * CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-currencydisplayformatconfiguration.html)
     */
    public inline fun cfnTemplateCurrencyDisplayFormatConfigurationProperty(
        block: CfnTemplateCurrencyDisplayFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CurrencyDisplayFormatConfigurationProperty {
        val builder = CfnTemplateCurrencyDisplayFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The filter operation that filters data included in a visual or in an entire sheet.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomActionFilterOperationProperty customActionFilterOperationProperty =
     * CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionfilteroperation.html)
     */
    public inline fun cfnTemplateCustomActionFilterOperationProperty(
        block: CfnTemplateCustomActionFilterOperationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CustomActionFilterOperationProperty {
        val builder = CfnTemplateCustomActionFilterOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The navigation operation that navigates between different sheets in the same analysis.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomActionNavigationOperationProperty customActionNavigationOperationProperty =
     * CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionnavigationoperation.html)
     */
    public inline fun cfnTemplateCustomActionNavigationOperationProperty(
        block: CfnTemplateCustomActionNavigationOperationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CustomActionNavigationOperationProperty {
        val builder = CfnTemplateCustomActionNavigationOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The set parameter operation that sets parameters in custom action.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomActionSetParametersOperationProperty customActionSetParametersOperationProperty =
     * CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionsetparametersoperation.html)
     */
    public inline fun cfnTemplateCustomActionSetParametersOperationProperty(
        block: CfnTemplateCustomActionSetParametersOperationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CustomActionSetParametersOperationProperty {
        val builder = CfnTemplateCustomActionSetParametersOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The URL operation that opens a link to another webpage.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomActionURLOperationProperty customActionURLOperationProperty =
     * CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionurloperation.html)
     */
    public inline fun cfnTemplateCustomActionURLOperationProperty(
        block: CfnTemplateCustomActionURLOperationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CustomActionURLOperationProperty {
        val builder = CfnTemplateCustomActionURLOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `CustomContentVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomContentConfigurationProperty customContentConfigurationProperty =
     * CustomContentConfigurationProperty.builder()
     * .contentType("contentType")
     * .contentUrl("contentUrl")
     * .imageScaling("imageScaling")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentconfiguration.html)
     */
    public inline fun cfnTemplateCustomContentConfigurationProperty(
        block: CfnTemplateCustomContentConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CustomContentConfigurationProperty {
        val builder = CfnTemplateCustomContentConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A visual that contains custom content.
     *
     * For more information, see
     * [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomContentVisualProperty customContentVisualProperty = CustomContentVisualProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .visualId("visualId")
     * // the properties below are optional
     * .actions(List.of(VisualCustomActionProperty.builder()
     * .actionOperations(List.of(VisualCustomActionOperationProperty.builder()
     * .filterOperation(CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build())
     * .navigationOperation(CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build())
     * .setParametersOperation(CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build())
     * .urlOperation(CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build())
     * .build()))
     * .customActionId("customActionId")
     * .name("name")
     * .trigger("trigger")
     * // the properties below are optional
     * .status("status")
     * .build()))
     * .chartConfiguration(CustomContentConfigurationProperty.builder()
     * .contentType("contentType")
     * .contentUrl("contentUrl")
     * .imageScaling("imageScaling")
     * .build())
     * .subtitle(VisualSubtitleLabelOptionsProperty.builder()
     * .formatText(LongFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build())
     * .visibility("visibility")
     * .build())
     * .title(VisualTitleLabelOptionsProperty.builder()
     * .formatText(ShortFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentvisual.html)
     */
    public inline fun cfnTemplateCustomContentVisualProperty(
        block: CfnTemplateCustomContentVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CustomContentVisualProperty {
        val builder = CfnTemplateCustomContentVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A custom filter that filters based on a single value.
     *
     * This filter can be partially matched.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomFilterConfigurationProperty customFilterConfigurationProperty =
     * CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterconfiguration.html)
     */
    public inline fun cfnTemplateCustomFilterConfigurationProperty(
        block: CfnTemplateCustomFilterConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CustomFilterConfigurationProperty {
        val builder = CfnTemplateCustomFilterConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of custom filter values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomFilterListConfigurationProperty customFilterListConfigurationProperty =
     * CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterlistconfiguration.html)
     */
    public inline fun cfnTemplateCustomFilterListConfigurationProperty(
        block: CfnTemplateCustomFilterListConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CustomFilterListConfigurationProperty {
        val builder = CfnTemplateCustomFilterListConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The custom narrative options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomNarrativeOptionsProperty customNarrativeOptionsProperty =
     * CustomNarrativeOptionsProperty.builder()
     * .narrative("narrative")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customnarrativeoptions.html)
     */
    public inline fun cfnTemplateCustomNarrativeOptionsProperty(
        block: CfnTemplateCustomNarrativeOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CustomNarrativeOptionsProperty {
        val builder = CfnTemplateCustomNarrativeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The customized parameter values.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomParameterValuesProperty customParameterValuesProperty =
     * CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customparametervalues.html)
     */
    public inline fun cfnTemplateCustomParameterValuesProperty(
        block: CfnTemplateCustomParameterValuesPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CustomParameterValuesProperty {
        val builder = CfnTemplateCustomParameterValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of custom values for the destination parameter in
     * `DestinationParameterValueConfiguration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CustomValuesConfigurationProperty customValuesConfigurationProperty =
     * CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customvaluesconfiguration.html)
     */
    public inline fun cfnTemplateCustomValuesConfigurationProperty(
        block: CfnTemplateCustomValuesConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.CustomValuesConfigurationProperty {
        val builder = CfnTemplateCustomValuesConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for data bars.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataBarsOptionsProperty dataBarsOptionsProperty = DataBarsOptionsProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .negativeColor("negativeColor")
     * .positiveColor("positiveColor")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-databarsoptions.html)
     */
    public inline fun cfnTemplateDataBarsOptionsProperty(
        block: CfnTemplateDataBarsOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DataBarsOptionsProperty {
        val builder = CfnTemplateDataBarsOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the color that is applied to a particular data value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataColorProperty dataColorProperty = DataColorProperty.builder()
     * .color("color")
     * .dataValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datacolor.html)
     */
    public inline fun cfnTemplateDataColorProperty(
        block: CfnTemplateDataColorPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DataColorProperty {
        val builder = CfnTemplateDataColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data field series item configuration of a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataFieldSeriesItemProperty dataFieldSeriesItemProperty = DataFieldSeriesItemProperty.builder()
     * .axisBinding("axisBinding")
     * .fieldId("fieldId")
     * // the properties below are optional
     * .fieldValue("fieldValue")
     * .settings(LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datafieldseriesitem.html)
     */
    public inline fun cfnTemplateDataFieldSeriesItemProperty(
        block: CfnTemplateDataFieldSeriesItemPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DataFieldSeriesItemProperty {
        val builder = CfnTemplateDataFieldSeriesItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the data labels.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataLabelOptionsProperty dataLabelOptionsProperty = DataLabelOptionsProperty.builder()
     * .categoryLabelVisibility("categoryLabelVisibility")
     * .dataLabelTypes(List.of(DataLabelTypeProperty.builder()
     * .dataPathLabelType(DataPathLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .visibility("visibility")
     * .build())
     * .fieldLabelType(FieldLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .visibility("visibility")
     * .build())
     * .maximumLabelType(MaximumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .minimumLabelType(MinimumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .rangeEndsLabelType(RangeEndsLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build()))
     * .labelColor("labelColor")
     * .labelContent("labelContent")
     * .labelFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .measureLabelVisibility("measureLabelVisibility")
     * .overlap("overlap")
     * .position("position")
     * .totalsVisibility("totalsVisibility")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeloptions.html)
     */
    public inline fun cfnTemplateDataLabelOptionsProperty(
        block: CfnTemplateDataLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DataLabelOptionsProperty {
        val builder = CfnTemplateDataLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the data label type.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataLabelTypeProperty dataLabelTypeProperty = DataLabelTypeProperty.builder()
     * .dataPathLabelType(DataPathLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .visibility("visibility")
     * .build())
     * .fieldLabelType(FieldLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .visibility("visibility")
     * .build())
     * .maximumLabelType(MaximumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .minimumLabelType(MinimumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .rangeEndsLabelType(RangeEndsLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeltype.html)
     */
    public inline fun cfnTemplateDataLabelTypeProperty(
        block: CfnTemplateDataLabelTypePropertyDsl.() -> Unit = {}
    ): CfnTemplate.DataLabelTypeProperty {
        val builder = CfnTemplateDataLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The color map that determines the color options for a particular element.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPathColorProperty dataPathColorProperty = DataPathColorProperty.builder()
     * .color("color")
     * .element(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build())
     * // the properties below are optional
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathcolor.html)
     */
    public inline fun cfnTemplateDataPathColorProperty(
        block: CfnTemplateDataPathColorPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DataPathColorProperty {
        val builder = CfnTemplateDataPathColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that specifies individual data values for labels.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPathLabelTypeProperty dataPathLabelTypeProperty = DataPathLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathlabeltype.html)
     */
    public inline fun cfnTemplateDataPathLabelTypeProperty(
        block: CfnTemplateDataPathLabelTypePropertyDsl.() -> Unit = {}
    ): CfnTemplate.DataPathLabelTypeProperty {
        val builder = CfnTemplateDataPathLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Allows data paths to be sorted by a specific data value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPathSortProperty dataPathSortProperty = DataPathSortProperty.builder()
     * .direction("direction")
     * .sortPaths(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathsort.html)
     */
    public inline fun cfnTemplateDataPathSortProperty(
        block: CfnTemplateDataPathSortPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DataPathSortProperty {
        val builder = CfnTemplateDataPathSortPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data path that needs to be sorted.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataPathValueProperty dataPathValueProperty = DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathvalue.html)
     */
    public inline fun cfnTemplateDataPathValueProperty(
        block: CfnTemplateDataPathValuePropertyDsl.() -> Unit = {}
    ): CfnTemplate.DataPathValueProperty {
        val builder = CfnTemplateDataPathValuePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Dataset configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataSetConfigurationProperty dataSetConfigurationProperty =
     * DataSetConfigurationProperty.builder()
     * .columnGroupSchemaList(List.of(ColumnGroupSchemaProperty.builder()
     * .columnGroupColumnSchemaList(List.of(ColumnGroupColumnSchemaProperty.builder()
     * .name("name")
     * .build()))
     * .name("name")
     * .build()))
     * .dataSetSchema(DataSetSchemaProperty.builder()
     * .columnSchemaList(List.of(ColumnSchemaProperty.builder()
     * .dataType("dataType")
     * .geographicRole("geographicRole")
     * .name("name")
     * .build()))
     * .build())
     * .placeholder("placeholder")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datasetconfiguration.html)
     */
    public inline fun cfnTemplateDataSetConfigurationProperty(
        block: CfnTemplateDataSetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DataSetConfigurationProperty {
        val builder = CfnTemplateDataSetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Dataset reference.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataSetReferenceProperty dataSetReferenceProperty = DataSetReferenceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .dataSetPlaceholder("dataSetPlaceholder")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datasetreference.html)
     */
    public inline fun cfnTemplateDataSetReferenceProperty(
        block: CfnTemplateDataSetReferencePropertyDsl.() -> Unit = {}
    ): CfnTemplate.DataSetReferenceProperty {
        val builder = CfnTemplateDataSetReferencePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Dataset schema.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataSetSchemaProperty dataSetSchemaProperty = DataSetSchemaProperty.builder()
     * .columnSchemaList(List.of(ColumnSchemaProperty.builder()
     * .dataType("dataType")
     * .geographicRole("geographicRole")
     * .name("name")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datasetschema.html)
     */
    public inline fun cfnTemplateDataSetSchemaProperty(
        block: CfnTemplateDataSetSchemaPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DataSetSchemaProperty {
        val builder = CfnTemplateDataSetSchemaPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine how a date axis is displayed.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateAxisOptionsProperty dateAxisOptionsProperty = DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dateaxisoptions.html)
     */
    public inline fun cfnTemplateDateAxisOptionsProperty(
        block: CfnTemplateDateAxisOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DateAxisOptionsProperty {
        val builder = CfnTemplateDateAxisOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dimension type field with date type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateDimensionFieldProperty dateDimensionFieldProperty = DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datedimensionfield.html)
     */
    public inline fun cfnTemplateDateDimensionFieldProperty(
        block: CfnTemplateDateDimensionFieldPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DateDimensionFieldProperty {
        val builder = CfnTemplateDateDimensionFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The measure type field with date type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateMeasureFieldProperty dateMeasureFieldProperty = DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datemeasurefield.html)
     */
    public inline fun cfnTemplateDateMeasureFieldProperty(
        block: CfnTemplateDateMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DateMeasureFieldProperty {
        val builder = CfnTemplateDateMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The default values of the `DateTimeParameterDeclaration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeDefaultValuesProperty dateTimeDefaultValuesProperty =
     * DateTimeDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimedefaultvalues.html)
     */
    public inline fun cfnTemplateDateTimeDefaultValuesProperty(
        block: CfnTemplateDateTimeDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DateTimeDefaultValuesProperty {
        val builder = CfnTemplateDateTimeDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for `DateTime` fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeFormatConfigurationProperty dateTimeFormatConfigurationProperty =
     * DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimeformatconfiguration.html)
     */
    public inline fun cfnTemplateDateTimeFormatConfigurationProperty(
        block: CfnTemplateDateTimeFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DateTimeFormatConfigurationProperty {
        val builder = CfnTemplateDateTimeFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the hierarchy of any `DateTime` fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeHierarchyProperty dateTimeHierarchyProperty = DateTimeHierarchyProperty.builder()
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimehierarchy.html)
     */
    public inline fun cfnTemplateDateTimeHierarchyProperty(
        block: CfnTemplateDateTimeHierarchyPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DateTimeHierarchyProperty {
        val builder = CfnTemplateDateTimeHierarchyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `DateTime` data type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeParameterDeclarationProperty dateTimeParameterDeclarationProperty =
     * DateTimeParameterDeclarationProperty.builder()
     * .name("name")
     * // the properties below are optional
     * .defaultValues(DateTimeDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .timeGranularity("timeGranularity")
     * .valueWhenUnset(DateTimeValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimeparameterdeclaration.html)
     */
    public inline fun cfnTemplateDateTimeParameterDeclarationProperty(
        block: CfnTemplateDateTimeParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DateTimeParameterDeclarationProperty {
        val builder = CfnTemplateDateTimeParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimePickerControlDisplayOptionsProperty dateTimePickerControlDisplayOptionsProperty =
     * DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimepickercontroldisplayoptions.html)
     */
    public inline fun cfnTemplateDateTimePickerControlDisplayOptionsProperty(
        block: CfnTemplateDateTimePickerControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DateTimePickerControlDisplayOptionsProperty {
        val builder = CfnTemplateDateTimePickerControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that defines the default value of a `DateTime` parameter when a value has
     * not been set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DateTimeValueWhenUnsetConfigurationProperty dateTimeValueWhenUnsetConfigurationProperty =
     * DateTimeValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimevaluewhenunsetconfiguration.html)
     */
    public inline fun cfnTemplateDateTimeValueWhenUnsetConfigurationProperty(
        block: CfnTemplateDateTimeValueWhenUnsetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DateTimeValueWhenUnsetConfigurationProperty {
        val builder = CfnTemplateDateTimeValueWhenUnsetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The default values of the `DecimalParameterDeclaration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalDefaultValuesProperty decimalDefaultValuesProperty =
     * DecimalDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimaldefaultvalues.html)
     */
    public inline fun cfnTemplateDecimalDefaultValuesProperty(
        block: CfnTemplateDecimalDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DecimalDefaultValuesProperty {
        val builder = CfnTemplateDecimalDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `Decimal` data type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalParameterDeclarationProperty decimalParameterDeclarationProperty =
     * DecimalParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(DecimalDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(DecimalValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalparameterdeclaration.html)
     */
    public inline fun cfnTemplateDecimalParameterDeclarationProperty(
        block: CfnTemplateDecimalParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DecimalParameterDeclarationProperty {
        val builder = CfnTemplateDecimalParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the decimal places configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalPlacesConfigurationProperty decimalPlacesConfigurationProperty =
     * DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalplacesconfiguration.html)
     */
    public inline fun cfnTemplateDecimalPlacesConfigurationProperty(
        block: CfnTemplateDecimalPlacesConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DecimalPlacesConfigurationProperty {
        val builder = CfnTemplateDecimalPlacesConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that defines the default value of a `Decimal` parameter when a value has
     * not been set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DecimalValueWhenUnsetConfigurationProperty decimalValueWhenUnsetConfigurationProperty =
     * DecimalValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalvaluewhenunsetconfiguration.html)
     */
    public inline fun cfnTemplateDecimalValueWhenUnsetConfigurationProperty(
        block: CfnTemplateDecimalValueWhenUnsetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DecimalValueWhenUnsetConfigurationProperty {
        val builder = CfnTemplateDecimalValueWhenUnsetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings of a free-form layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultFreeFormLayoutConfigurationProperty defaultFreeFormLayoutConfigurationProperty =
     * DefaultFreeFormLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultfreeformlayoutconfiguration.html)
     */
    public inline fun cfnTemplateDefaultFreeFormLayoutConfigurationProperty(
        block: CfnTemplateDefaultFreeFormLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DefaultFreeFormLayoutConfigurationProperty {
        val builder = CfnTemplateDefaultFreeFormLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings for a grid layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultGridLayoutConfigurationProperty defaultGridLayoutConfigurationProperty =
     * DefaultGridLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultgridlayoutconfiguration.html)
     */
    public inline fun cfnTemplateDefaultGridLayoutConfigurationProperty(
        block: CfnTemplateDefaultGridLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DefaultGridLayoutConfigurationProperty {
        val builder = CfnTemplateDefaultGridLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings for interactive layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultInteractiveLayoutConfigurationProperty defaultInteractiveLayoutConfigurationProperty =
     * DefaultInteractiveLayoutConfigurationProperty.builder()
     * .freeForm(DefaultFreeFormLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .grid(DefaultGridLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultinteractivelayoutconfiguration.html)
     */
    public inline fun cfnTemplateDefaultInteractiveLayoutConfigurationProperty(
        block: CfnTemplateDefaultInteractiveLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DefaultInteractiveLayoutConfigurationProperty {
        val builder = CfnTemplateDefaultInteractiveLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for default new sheet settings.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultNewSheetConfigurationProperty defaultNewSheetConfigurationProperty =
     * DefaultNewSheetConfigurationProperty.builder()
     * .interactiveLayoutConfiguration(DefaultInteractiveLayoutConfigurationProperty.builder()
     * .freeForm(DefaultFreeFormLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .grid(DefaultGridLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build())
     * .paginatedLayoutConfiguration(DefaultPaginatedLayoutConfigurationProperty.builder()
     * .sectionBased(DefaultSectionBasedLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .build())
     * .build())
     * .sheetContentType("sheetContentType")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultnewsheetconfiguration.html)
     */
    public inline fun cfnTemplateDefaultNewSheetConfigurationProperty(
        block: CfnTemplateDefaultNewSheetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DefaultNewSheetConfigurationProperty {
        val builder = CfnTemplateDefaultNewSheetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings for a paginated layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultPaginatedLayoutConfigurationProperty defaultPaginatedLayoutConfigurationProperty =
     * DefaultPaginatedLayoutConfigurationProperty.builder()
     * .sectionBased(DefaultSectionBasedLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultpaginatedlayoutconfiguration.html)
     */
    public inline fun cfnTemplateDefaultPaginatedLayoutConfigurationProperty(
        block: CfnTemplateDefaultPaginatedLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DefaultPaginatedLayoutConfigurationProperty {
        val builder = CfnTemplateDefaultPaginatedLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default settings for a section-based layout configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultSectionBasedLayoutConfigurationProperty defaultSectionBasedLayoutConfigurationProperty =
     * DefaultSectionBasedLayoutConfigurationProperty.builder()
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultsectionbasedlayoutconfiguration.html)
     */
    public inline fun cfnTemplateDefaultSectionBasedLayoutConfigurationProperty(
        block: CfnTemplateDefaultSectionBasedLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DefaultSectionBasedLayoutConfigurationProperty {
        val builder = CfnTemplateDefaultSectionBasedLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of destination parameter values.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DestinationParameterValueConfigurationProperty destinationParameterValueConfigurationProperty =
     * DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-destinationparametervalueconfiguration.html)
     */
    public inline fun cfnTemplateDestinationParameterValueConfigurationProperty(
        block: CfnTemplateDestinationParameterValueConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DestinationParameterValueConfigurationProperty {
        val builder = CfnTemplateDestinationParameterValueConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dimension type field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DimensionFieldProperty dimensionFieldProperty = DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dimensionfield.html)
     */
    public inline fun cfnTemplateDimensionFieldProperty(
        block: CfnTemplateDimensionFieldPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DimensionFieldProperty {
        val builder = CfnTemplateDimensionFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The label options of the label that is displayed in the center of a donut chart.
     *
     * This option isn't available for pie charts.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DonutCenterOptionsProperty donutCenterOptionsProperty = DonutCenterOptionsProperty.builder()
     * .labelVisibility("labelVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-donutcenteroptions.html)
     */
    public inline fun cfnTemplateDonutCenterOptionsProperty(
        block: CfnTemplateDonutCenterOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DonutCenterOptionsProperty {
        val builder = CfnTemplateDonutCenterOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for configuring a donut chart or pie chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DonutOptionsProperty donutOptionsProperty = DonutOptionsProperty.builder()
     * .arcOptions(ArcOptionsProperty.builder()
     * .arcThickness("arcThickness")
     * .build())
     * .donutCenterOptions(DonutCenterOptionsProperty.builder()
     * .labelVisibility("labelVisibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-donutoptions.html)
     */
    public inline fun cfnTemplateDonutOptionsProperty(
        block: CfnTemplateDonutOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DonutOptionsProperty {
        val builder = CfnTemplateDonutOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The drill down filter for the column hierarchies.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DrillDownFilterProperty drillDownFilterProperty = DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-drilldownfilter.html)
     */
    public inline fun cfnTemplateDrillDownFilterProperty(
        block: CfnTemplateDrillDownFilterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DrillDownFilterProperty {
        val builder = CfnTemplateDrillDownFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DropDownControlDisplayOptionsProperty dropDownControlDisplayOptionsProperty =
     * DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dropdowncontroldisplayoptions.html)
     */
    public inline fun cfnTemplateDropDownControlDisplayOptionsProperty(
        block: CfnTemplateDropDownControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.DropDownControlDisplayOptionsProperty {
        val builder = CfnTemplateDropDownControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Defines different defaults to the users or groups based on mapping.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DynamicDefaultValueProperty dynamicDefaultValueProperty = DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dynamicdefaultvalue.html)
     */
    public inline fun cfnTemplateDynamicDefaultValueProperty(
        block: CfnTemplateDynamicDefaultValuePropertyDsl.() -> Unit = {}
    ): CfnTemplate.DynamicDefaultValueProperty {
        val builder = CfnTemplateDynamicDefaultValuePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An empty visual.
     *
     * Empty visuals are used in layouts but have not been configured to show any data. A new visual
     * created in the Amazon QuickSight console is considered an `EmptyVisual` until a visual type
     * is selected.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * EmptyVisualProperty emptyVisualProperty = EmptyVisualProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .visualId("visualId")
     * // the properties below are optional
     * .actions(List.of(VisualCustomActionProperty.builder()
     * .actionOperations(List.of(VisualCustomActionOperationProperty.builder()
     * .filterOperation(CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build())
     * .navigationOperation(CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build())
     * .setParametersOperation(CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build())
     * .urlOperation(CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build())
     * .build()))
     * .customActionId("customActionId")
     * .name("name")
     * .trigger("trigger")
     * // the properties below are optional
     * .status("status")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-emptyvisual.html)
     */
    public inline fun cfnTemplateEmptyVisualProperty(
        block: CfnTemplateEmptyVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.EmptyVisualProperty {
        val builder = CfnTemplateEmptyVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An object, structure, or sub-structure of an analysis, template, or dashboard.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * EntityProperty entityProperty = EntityProperty.builder()
     * .path("path")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-entity.html)
     */
    public inline fun cfnTemplateEntityProperty(
        block: CfnTemplateEntityPropertyDsl.() -> Unit = {}
    ): CfnTemplate.EntityProperty {
        val builder = CfnTemplateEntityPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The exclude period of `TimeRangeFilter` or `RelativeDatesFilter` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ExcludePeriodConfigurationProperty excludePeriodConfigurationProperty =
     * ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-excludeperiodconfiguration.html)
     */
    public inline fun cfnTemplateExcludePeriodConfigurationProperty(
        block: CfnTemplateExcludePeriodConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ExcludePeriodConfigurationProperty {
        val builder = CfnTemplateExcludePeriodConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the hierarchy of the fields that are built within a visual's field
     * wells.
     *
     * These fields can't be duplicated to other visuals.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ExplicitHierarchyProperty explicitHierarchyProperty = ExplicitHierarchyProperty.builder()
     * .columns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-explicithierarchy.html)
     */
    public inline fun cfnTemplateExplicitHierarchyProperty(
        block: CfnTemplateExplicitHierarchyPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ExplicitHierarchyProperty {
        val builder = CfnTemplateExplicitHierarchyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The setup for the detailed tooltip.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldBasedTooltipProperty fieldBasedTooltipProperty = FieldBasedTooltipProperty.builder()
     * .aggregationVisibility("aggregationVisibility")
     * .tooltipFields(List.of(TooltipItemProperty.builder()
     * .columnTooltipItem(ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .fieldTooltipItem(FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .build()))
     * .tooltipTitleType("tooltipTitleType")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldbasedtooltip.html)
     */
    public inline fun cfnTemplateFieldBasedTooltipProperty(
        block: CfnTemplateFieldBasedTooltipPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FieldBasedTooltipProperty {
        val builder = CfnTemplateFieldBasedTooltipPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field label type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldLabelTypeProperty fieldLabelTypeProperty = FieldLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldlabeltype.html)
     */
    public inline fun cfnTemplateFieldLabelTypeProperty(
        block: CfnTemplateFieldLabelTypePropertyDsl.() -> Unit = {}
    ): CfnTemplate.FieldLabelTypeProperty {
        val builder = CfnTemplateFieldLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field series item configuration of a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldSeriesItemProperty fieldSeriesItemProperty = FieldSeriesItemProperty.builder()
     * .axisBinding("axisBinding")
     * .fieldId("fieldId")
     * // the properties below are optional
     * .settings(LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldseriesitem.html)
     */
    public inline fun cfnTemplateFieldSeriesItemProperty(
        block: CfnTemplateFieldSeriesItemPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FieldSeriesItemProperty {
        val builder = CfnTemplateFieldSeriesItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field sort options in a chart configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldSortOptionsProperty fieldSortOptionsProperty = FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldsortoptions.html)
     */
    public inline fun cfnTemplateFieldSortOptionsProperty(
        block: CfnTemplateFieldSortOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FieldSortOptionsProperty {
        val builder = CfnTemplateFieldSortOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration for a field in a field well.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldSortProperty fieldSortProperty = FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldsort.html)
     */
    public inline fun cfnTemplateFieldSortProperty(
        block: CfnTemplateFieldSortPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FieldSortProperty {
        val builder = CfnTemplateFieldSortPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The tooltip item for the fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FieldTooltipItemProperty fieldTooltipItemProperty = FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldtooltipitem.html)
     */
    public inline fun cfnTemplateFieldTooltipItemProperty(
        block: CfnTemplateFieldTooltipItemPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FieldTooltipItemProperty {
        val builder = CfnTemplateFieldTooltipItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well of the filled map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapAggregatedFieldWellsProperty filledMapAggregatedFieldWellsProperty =
     * FilledMapAggregatedFieldWellsProperty.builder()
     * .geospatial(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateFilledMapAggregatedFieldWellsProperty(
        block: CfnTemplateFilledMapAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilledMapAggregatedFieldWellsProperty {
        val builder = CfnTemplateFilledMapAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Conditional formatting options of a `FilledMapVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapConditionalFormattingOptionProperty filledMapConditionalFormattingOptionProperty =
     * FilledMapConditionalFormattingOptionProperty.builder()
     * .shape(FilledMapShapeConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .format(ShapeConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconditionalformattingoption.html)
     */
    public inline fun cfnTemplateFilledMapConditionalFormattingOptionProperty(
        block: CfnTemplateFilledMapConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilledMapConditionalFormattingOptionProperty {
        val builder = CfnTemplateFilledMapConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting of a `FilledMapVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapConditionalFormattingProperty filledMapConditionalFormattingProperty =
     * FilledMapConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(FilledMapConditionalFormattingOptionProperty.builder()
     * .shape(FilledMapShapeConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .format(ShapeConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconditionalformatting.html)
     */
    public inline fun cfnTemplateFilledMapConditionalFormattingProperty(
        block: CfnTemplateFilledMapConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilledMapConditionalFormattingProperty {
        val builder = CfnTemplateFilledMapConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `FilledMapVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconfiguration.html)
     */
    public inline fun cfnTemplateFilledMapConfigurationProperty(
        block: CfnTemplateFilledMapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilledMapConfigurationProperty {
        val builder = CfnTemplateFilledMapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a `FilledMapVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapFieldWellsProperty filledMapFieldWellsProperty = FilledMapFieldWellsProperty.builder()
     * .filledMapAggregatedFieldWells(FilledMapAggregatedFieldWellsProperty.builder()
     * .geospatial(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapfieldwells.html)
     */
    public inline fun cfnTemplateFilledMapFieldWellsProperty(
        block: CfnTemplateFilledMapFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilledMapFieldWellsProperty {
        val builder = CfnTemplateFilledMapFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting that determines the shape of the filled map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapShapeConditionalFormattingProperty filledMapShapeConditionalFormattingProperty =
     * FilledMapShapeConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .format(ShapeConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapshapeconditionalformatting.html)
     */
    public inline fun cfnTemplateFilledMapShapeConditionalFormattingProperty(
        block: CfnTemplateFilledMapShapeConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilledMapShapeConditionalFormattingProperty {
        val builder = CfnTemplateFilledMapShapeConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `FilledMapVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilledMapSortConfigurationProperty filledMapSortConfigurationProperty =
     * FilledMapSortConfigurationProperty.builder()
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapsortconfiguration.html)
     */
    public inline fun cfnTemplateFilledMapSortConfigurationProperty(
        block: CfnTemplateFilledMapSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilledMapSortConfigurationProperty {
        val builder = CfnTemplateFilledMapSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A filled map.
     *
     * For more information, see
     * [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapvisual.html)
     */
    public inline fun cfnTemplateFilledMapVisualProperty(
        block: CfnTemplateFilledMapVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilledMapVisualProperty {
        val builder = CfnTemplateFilledMapVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The control of a filter that is used to interact with a dashboard or an analysis.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterControlProperty filterControlProperty = FilterControlProperty.builder()
     * .dateTimePicker(FilterDateTimePickerControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .type("type")
     * .build())
     * .dropdown(FilterDropDownControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build())
     * .list(FilterListControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build())
     * .relativeDateTime(FilterRelativeDateTimeControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(RelativeDateTimeControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .slider(FilterSliderControlProperty.builder()
     * .filterControlId("filterControlId")
     * .maximumValue(123)
     * .minimumValue(123)
     * .sourceFilterId("sourceFilterId")
     * .stepSize(123)
     * .title("title")
     * // the properties below are optional
     * .displayOptions(SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .type("type")
     * .build())
     * .textArea(FilterTextAreaControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .delimiter("delimiter")
     * .displayOptions(TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .textField(FilterTextFieldControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtercontrol.html)
     */
    public inline fun cfnTemplateFilterControlProperty(
        block: CfnTemplateFilterControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterControlProperty {
        val builder = CfnTemplateFilterControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control from a date filter that is used to specify date and time.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterDateTimePickerControlProperty filterDateTimePickerControlProperty =
     * FilterDateTimePickerControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdatetimepickercontrol.html)
     */
    public inline fun cfnTemplateFilterDateTimePickerControlProperty(
        block: CfnTemplateFilterDateTimePickerControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterDateTimePickerControlProperty {
        val builder = CfnTemplateFilterDateTimePickerControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a dropdown list with buttons that are used to select a single value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterDropDownControlProperty filterDropDownControlProperty =
     * FilterDropDownControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdropdowncontrol.html)
     */
    public inline fun cfnTemplateFilterDropDownControlProperty(
        block: CfnTemplateFilterDropDownControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterDropDownControlProperty {
        val builder = CfnTemplateFilterDropDownControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A grouping of individual filters. Filter groups are applied to the same group of visuals.
     *
     * For more information, see
     * [Adding filter conditions (group filters) with AND and OR operators](https://docs.aws.amazon.com/quicksight/latest/user/add-a-compound-filter.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterGroupProperty filterGroupProperty = FilterGroupProperty.builder()
     * .crossDataset("crossDataset")
     * .filterGroupId("filterGroupId")
     * .filters(List.of(FilterProperty.builder()
     * .categoryFilter(CategoryFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .configuration(CategoryFilterConfigurationProperty.builder()
     * .customFilterConfiguration(CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .customFilterListConfiguration(CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .filterListConfiguration(FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .build())
     * .filterId("filterId")
     * .build())
     * .numericEqualityFilter(NumericEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .value(123)
     * .build())
     * .numericRangeFilter(NumericRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .rangeMinimum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .relativeDatesFilter(RelativeDatesFilterProperty.builder()
     * .anchorDateConfiguration(AnchorDateConfigurationProperty.builder()
     * .anchorOption("anchorOption")
     * .parameterName("parameterName")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * .relativeDateType("relativeDateType")
     * .timeGranularity("timeGranularity")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .minimumGranularity("minimumGranularity")
     * .parameterName("parameterName")
     * .relativeDateValue(123)
     * .build())
     * .timeEqualityFilter(TimeEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .value("value")
     * .build())
     * .timeRangeFilter(TimeRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .rangeMinimumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .timeGranularity("timeGranularity")
     * .build())
     * .topBottomFilter(TopBottomFilterProperty.builder()
     * .aggregationSortConfigurations(List.of(AggregationSortConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sortDirection("sortDirection")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build()))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .limit(123)
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .scopeConfiguration(FilterScopeConfigurationProperty.builder()
     * .selectedSheets(SelectedSheetsFilterScopeConfigurationProperty.builder()
     * .sheetVisualScopingConfigurations(List.of(SheetVisualScopingConfigurationProperty.builder()
     * .scope("scope")
     * .sheetId("sheetId")
     * // the properties below are optional
     * .visualIds(List.of("visualIds"))
     * .build()))
     * .build())
     * .build())
     * // the properties below are optional
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtergroup.html)
     */
    public inline fun cfnTemplateFilterGroupProperty(
        block: CfnTemplateFilterGroupPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterGroupProperty {
        val builder = CfnTemplateFilterGroupPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of filter configurations.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterListConfigurationProperty filterListConfigurationProperty =
     * FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistconfiguration.html)
     */
    public inline fun cfnTemplateFilterListConfigurationProperty(
        block: CfnTemplateFilterListConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterListConfigurationProperty {
        val builder = CfnTemplateFilterListConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a list of buttons or boxes.
     *
     * This is used to select either a single value or multiple values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterListControlProperty filterListControlProperty = FilterListControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistcontrol.html)
     */
    public inline fun cfnTemplateFilterListControlProperty(
        block: CfnTemplateFilterListControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterListControlProperty {
        val builder = CfnTemplateFilterListControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of selected fields in the `CustomActionFilterOperation` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterOperationSelectedFieldsConfigurationProperty
     * filterOperationSelectedFieldsConfigurationProperty =
     * FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filteroperationselectedfieldsconfiguration.html)
     */
    public inline fun cfnTemplateFilterOperationSelectedFieldsConfigurationProperty(
        block: CfnTemplateFilterOperationSelectedFieldsConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterOperationSelectedFieldsConfigurationProperty {
        val builder = CfnTemplateFilterOperationSelectedFieldsConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of target visuals that you want to be filtered.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterOperationTargetVisualsConfigurationProperty
     * filterOperationTargetVisualsConfigurationProperty =
     * FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filteroperationtargetvisualsconfiguration.html)
     */
    public inline fun cfnTemplateFilterOperationTargetVisualsConfigurationProperty(
        block: CfnTemplateFilterOperationTargetVisualsConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterOperationTargetVisualsConfigurationProperty {
        val builder = CfnTemplateFilterOperationTargetVisualsConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * With a `Filter` , you can remove portions of data from a particular visual or view.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterProperty filterProperty = FilterProperty.builder()
     * .categoryFilter(CategoryFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .configuration(CategoryFilterConfigurationProperty.builder()
     * .customFilterConfiguration(CustomFilterConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValue("categoryValue")
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .customFilterListConfiguration(CustomFilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .filterListConfiguration(FilterListConfigurationProperty.builder()
     * .matchOperator("matchOperator")
     * // the properties below are optional
     * .categoryValues(List.of("categoryValues"))
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .build())
     * .filterId("filterId")
     * .build())
     * .numericEqualityFilter(NumericEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .value(123)
     * .build())
     * .numericRangeFilter(NumericRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .rangeMinimum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .selectAllOptions("selectAllOptions")
     * .build())
     * .relativeDatesFilter(RelativeDatesFilterProperty.builder()
     * .anchorDateConfiguration(AnchorDateConfigurationProperty.builder()
     * .anchorOption("anchorOption")
     * .parameterName("parameterName")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * .relativeDateType("relativeDateType")
     * .timeGranularity("timeGranularity")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .minimumGranularity("minimumGranularity")
     * .parameterName("parameterName")
     * .relativeDateValue(123)
     * .build())
     * .timeEqualityFilter(TimeEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .value("value")
     * .build())
     * .timeRangeFilter(TimeRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .rangeMinimumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .timeGranularity("timeGranularity")
     * .build())
     * .topBottomFilter(TopBottomFilterProperty.builder()
     * .aggregationSortConfigurations(List.of(AggregationSortConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sortDirection("sortDirection")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build()))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .limit(123)
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filter.html)
     */
    public inline fun cfnTemplateFilterProperty(
        block: CfnTemplateFilterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterProperty {
        val builder = CfnTemplateFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control from a date filter that is used to specify the relative date.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterRelativeDateTimeControlProperty filterRelativeDateTimeControlProperty =
     * FilterRelativeDateTimeControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(RelativeDateTimeControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterrelativedatetimecontrol.html)
     */
    public inline fun cfnTemplateFilterRelativeDateTimeControlProperty(
        block: CfnTemplateFilterRelativeDateTimeControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterRelativeDateTimeControlProperty {
        val builder = CfnTemplateFilterRelativeDateTimeControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The scope configuration for a `FilterGroup` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterScopeConfigurationProperty filterScopeConfigurationProperty =
     * FilterScopeConfigurationProperty.builder()
     * .selectedSheets(SelectedSheetsFilterScopeConfigurationProperty.builder()
     * .sheetVisualScopingConfigurations(List.of(SheetVisualScopingConfigurationProperty.builder()
     * .scope("scope")
     * .sheetId("sheetId")
     * // the properties below are optional
     * .visualIds(List.of("visualIds"))
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterscopeconfiguration.html)
     */
    public inline fun cfnTemplateFilterScopeConfigurationProperty(
        block: CfnTemplateFilterScopeConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterScopeConfigurationProperty {
        val builder = CfnTemplateFilterScopeConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of selectable values that are used in a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterSelectableValuesProperty filterSelectableValuesProperty =
     * FilterSelectableValuesProperty.builder()
     * .values(List.of("values"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterselectablevalues.html)
     */
    public inline fun cfnTemplateFilterSelectableValuesProperty(
        block: CfnTemplateFilterSelectableValuesPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterSelectableValuesProperty {
        val builder = CfnTemplateFilterSelectableValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a horizontal toggle bar.
     *
     * This is used to change a value by sliding the toggle.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterSliderControlProperty filterSliderControlProperty = FilterSliderControlProperty.builder()
     * .filterControlId("filterControlId")
     * .maximumValue(123)
     * .minimumValue(123)
     * .sourceFilterId("sourceFilterId")
     * .stepSize(123)
     * .title("title")
     * // the properties below are optional
     * .displayOptions(SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterslidercontrol.html)
     */
    public inline fun cfnTemplateFilterSliderControlProperty(
        block: CfnTemplateFilterSliderControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterSliderControlProperty {
        val builder = CfnTemplateFilterSliderControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a text box that is used to enter multiple entries.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterTextAreaControlProperty filterTextAreaControlProperty =
     * FilterTextAreaControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .delimiter("delimiter")
     * .displayOptions(TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextareacontrol.html)
     */
    public inline fun cfnTemplateFilterTextAreaControlProperty(
        block: CfnTemplateFilterTextAreaControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterTextAreaControlProperty {
        val builder = CfnTemplateFilterTextAreaControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a text box that is used to enter a single entry.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FilterTextFieldControlProperty filterTextFieldControlProperty =
     * FilterTextFieldControlProperty.builder()
     * .filterControlId("filterControlId")
     * .sourceFilterId("sourceFilterId")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextfieldcontrol.html)
     */
    public inline fun cfnTemplateFilterTextFieldControlProperty(
        block: CfnTemplateFilterTextFieldControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FilterTextFieldControlProperty {
        val builder = CfnTemplateFilterTextFieldControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Configures the display properties of the given text.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FontConfigurationProperty fontConfigurationProperty = FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontconfiguration.html)
     */
    public inline fun cfnTemplateFontConfigurationProperty(
        block: CfnTemplateFontConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FontConfigurationProperty {
        val builder = CfnTemplateFontConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the text display size.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FontSizeProperty fontSizeProperty = FontSizeProperty.builder()
     * .relative("relative")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontsize.html)
     */
    public inline fun cfnTemplateFontSizeProperty(
        block: CfnTemplateFontSizePropertyDsl.() -> Unit = {}
    ): CfnTemplate.FontSizeProperty {
        val builder = CfnTemplateFontSizePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the text display weight, or boldness.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FontWeightProperty fontWeightProperty = FontWeightProperty.builder()
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontweight.html)
     */
    public inline fun cfnTemplateFontWeightProperty(
        block: CfnTemplateFontWeightPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FontWeightProperty {
        val builder = CfnTemplateFontWeightPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The forecast computation configuration.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html)
     */
    public inline fun cfnTemplateForecastComputationProperty(
        block: CfnTemplateForecastComputationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ForecastComputationProperty {
        val builder = CfnTemplateForecastComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The forecast configuration that is used in a line chart's display properties.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ForecastConfigurationProperty forecastConfigurationProperty =
     * ForecastConfigurationProperty.builder()
     * .forecastProperties(TimeBasedForecastPropertiesProperty.builder()
     * .lowerBoundary(123)
     * .periodsBackward(123)
     * .periodsForward(123)
     * .predictionInterval(123)
     * .seasonality(123)
     * .upperBoundary(123)
     * .build())
     * .scenario(ForecastScenarioProperty.builder()
     * .whatIfPointScenario(WhatIfPointScenarioProperty.builder()
     * .date("date")
     * .value(123)
     * .build())
     * .whatIfRangeScenario(WhatIfRangeScenarioProperty.builder()
     * .endDate("endDate")
     * .startDate("startDate")
     * .value(123)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastconfiguration.html)
     */
    public inline fun cfnTemplateForecastConfigurationProperty(
        block: CfnTemplateForecastConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ForecastConfigurationProperty {
        val builder = CfnTemplateForecastConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The forecast scenario of a forecast in the line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ForecastScenarioProperty forecastScenarioProperty = ForecastScenarioProperty.builder()
     * .whatIfPointScenario(WhatIfPointScenarioProperty.builder()
     * .date("date")
     * .value(123)
     * .build())
     * .whatIfRangeScenario(WhatIfRangeScenarioProperty.builder()
     * .endDate("endDate")
     * .startDate("startDate")
     * .value(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastscenario.html)
     */
    public inline fun cfnTemplateForecastScenarioProperty(
        block: CfnTemplateForecastScenarioPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ForecastScenarioProperty {
        val builder = CfnTemplateForecastScenarioPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The formatting configuration for all types of field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FormatConfigurationProperty formatConfigurationProperty = FormatConfigurationProperty.builder()
     * .dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .numberFormatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .stringFormatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-formatconfiguration.html)
     */
    public inline fun cfnTemplateFormatConfigurationProperty(
        block: CfnTemplateFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FormatConfigurationProperty {
        val builder = CfnTemplateFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Configuration options for the canvas of a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutCanvasSizeOptionsProperty freeFormLayoutCanvasSizeOptionsProperty =
     * FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutcanvassizeoptions.html)
     */
    public inline fun cfnTemplateFreeFormLayoutCanvasSizeOptionsProperty(
        block: CfnTemplateFreeFormLayoutCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FreeFormLayoutCanvasSizeOptionsProperty {
        val builder = CfnTemplateFreeFormLayoutCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutConfigurationProperty freeFormLayoutConfigurationProperty =
     * FreeFormLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutconfiguration.html)
     */
    public inline fun cfnTemplateFreeFormLayoutConfigurationProperty(
        block: CfnTemplateFreeFormLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FreeFormLayoutConfigurationProperty {
        val builder = CfnTemplateFreeFormLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The background style configuration of a free-form layout element.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutElementBackgroundStyleProperty freeFormLayoutElementBackgroundStyleProperty =
     * FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelementbackgroundstyle.html)
     */
    public inline fun cfnTemplateFreeFormLayoutElementBackgroundStyleProperty(
        block: CfnTemplateFreeFormLayoutElementBackgroundStylePropertyDsl.() -> Unit = {}
    ): CfnTemplate.FreeFormLayoutElementBackgroundStyleProperty {
        val builder = CfnTemplateFreeFormLayoutElementBackgroundStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The background style configuration of a free-form layout element.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutElementBorderStyleProperty freeFormLayoutElementBorderStyleProperty =
     * FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelementborderstyle.html)
     */
    public inline fun cfnTemplateFreeFormLayoutElementBorderStyleProperty(
        block: CfnTemplateFreeFormLayoutElementBorderStylePropertyDsl.() -> Unit = {}
    ): CfnTemplate.FreeFormLayoutElementBorderStyleProperty {
        val builder = CfnTemplateFreeFormLayoutElementBorderStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An element within a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutElementProperty freeFormLayoutElementProperty =
     * FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html)
     */
    public inline fun cfnTemplateFreeFormLayoutElementProperty(
        block: CfnTemplateFreeFormLayoutElementPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FreeFormLayoutElementProperty {
        val builder = CfnTemplateFreeFormLayoutElementPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the sizing of the canvas used in a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormLayoutScreenCanvasSizeOptionsProperty freeFormLayoutScreenCanvasSizeOptionsProperty =
     * FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutscreencanvassizeoptions.html)
     */
    public inline fun cfnTemplateFreeFormLayoutScreenCanvasSizeOptionsProperty(
        block: CfnTemplateFreeFormLayoutScreenCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FreeFormLayoutScreenCanvasSizeOptionsProperty {
        val builder = CfnTemplateFreeFormLayoutScreenCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The free-form layout configuration of a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FreeFormSectionLayoutConfigurationProperty freeFormSectionLayoutConfigurationProperty =
     * FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformsectionlayoutconfiguration.html)
     */
    public inline fun cfnTemplateFreeFormSectionLayoutConfigurationProperty(
        block: CfnTemplateFreeFormSectionLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FreeFormSectionLayoutConfigurationProperty {
        val builder = CfnTemplateFreeFormSectionLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a `FunnelChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FunnelChartAggregatedFieldWellsProperty funnelChartAggregatedFieldWellsProperty =
     * FunnelChartAggregatedFieldWellsProperty.builder()
     * .category(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateFunnelChartAggregatedFieldWellsProperty(
        block: CfnTemplateFunnelChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FunnelChartAggregatedFieldWellsProperty {
        val builder = CfnTemplateFunnelChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `FunnelChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartconfiguration.html)
     */
    public inline fun cfnTemplateFunnelChartConfigurationProperty(
        block: CfnTemplateFunnelChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FunnelChartConfigurationProperty {
        val builder = CfnTemplateFunnelChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the data labels.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FunnelChartDataLabelOptionsProperty funnelChartDataLabelOptionsProperty =
     * FunnelChartDataLabelOptionsProperty.builder()
     * .categoryLabelVisibility("categoryLabelVisibility")
     * .labelColor("labelColor")
     * .labelFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .measureDataLabelStyle("measureDataLabelStyle")
     * .measureLabelVisibility("measureLabelVisibility")
     * .position("position")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartdatalabeloptions.html)
     */
    public inline fun cfnTemplateFunnelChartDataLabelOptionsProperty(
        block: CfnTemplateFunnelChartDataLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FunnelChartDataLabelOptionsProperty {
        val builder = CfnTemplateFunnelChartDataLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a `FunnelChartVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FunnelChartFieldWellsProperty funnelChartFieldWellsProperty =
     * FunnelChartFieldWellsProperty.builder()
     * .funnelChartAggregatedFieldWells(FunnelChartAggregatedFieldWellsProperty.builder()
     * .category(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartfieldwells.html)
     */
    public inline fun cfnTemplateFunnelChartFieldWellsProperty(
        block: CfnTemplateFunnelChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FunnelChartFieldWellsProperty {
        val builder = CfnTemplateFunnelChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `FunnelChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FunnelChartSortConfigurationProperty funnelChartSortConfigurationProperty =
     * FunnelChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartsortconfiguration.html)
     */
    public inline fun cfnTemplateFunnelChartSortConfigurationProperty(
        block: CfnTemplateFunnelChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FunnelChartSortConfigurationProperty {
        val builder = CfnTemplateFunnelChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A funnel chart.
     *
     * For more information, see
     * [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartvisual.html)
     */
    public inline fun cfnTemplateFunnelChartVisualProperty(
        block: CfnTemplateFunnelChartVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.FunnelChartVisualProperty {
        val builder = CfnTemplateFunnelChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the arc of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartArcConditionalFormattingProperty gaugeChartArcConditionalFormattingProperty =
     * GaugeChartArcConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartarcconditionalformatting.html)
     */
    public inline fun cfnTemplateGaugeChartArcConditionalFormattingProperty(
        block: CfnTemplateGaugeChartArcConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GaugeChartArcConditionalFormattingProperty {
        val builder = CfnTemplateGaugeChartArcConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Conditional formatting options of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartConditionalFormattingOptionProperty gaugeChartConditionalFormattingOptionProperty =
     * GaugeChartConditionalFormattingOptionProperty.builder()
     * .arc(GaugeChartArcConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .primaryValue(GaugeChartPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconditionalformattingoption.html)
     */
    public inline fun cfnTemplateGaugeChartConditionalFormattingOptionProperty(
        block: CfnTemplateGaugeChartConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GaugeChartConditionalFormattingOptionProperty {
        val builder = CfnTemplateGaugeChartConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartConditionalFormattingProperty gaugeChartConditionalFormattingProperty =
     * GaugeChartConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(GaugeChartConditionalFormattingOptionProperty.builder()
     * .arc(GaugeChartArcConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .primaryValue(GaugeChartPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconditionalformatting.html)
     */
    public inline fun cfnTemplateGaugeChartConditionalFormattingProperty(
        block: CfnTemplateGaugeChartConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GaugeChartConditionalFormattingProperty {
        val builder = CfnTemplateGaugeChartConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconfiguration.html)
     */
    public inline fun cfnTemplateGaugeChartConfigurationProperty(
        block: CfnTemplateGaugeChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GaugeChartConfigurationProperty {
        val builder = CfnTemplateGaugeChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartfieldwells.html)
     */
    public inline fun cfnTemplateGaugeChartFieldWellsProperty(
        block: CfnTemplateGaugeChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GaugeChartFieldWellsProperty {
        val builder = CfnTemplateGaugeChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartOptionsProperty gaugeChartOptionsProperty = GaugeChartOptionsProperty.builder()
     * .arc(ArcConfigurationProperty.builder()
     * .arcAngle(123)
     * .arcThickness("arcThickness")
     * .build())
     * .arcAxis(ArcAxisConfigurationProperty.builder()
     * .range(ArcAxisDisplayRangeProperty.builder()
     * .max(123)
     * .min(123)
     * .build())
     * .reserveRange(123)
     * .build())
     * .comparison(ComparisonConfigurationProperty.builder()
     * .comparisonFormat(ComparisonFormatConfigurationProperty.builder()
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .comparisonMethod("comparisonMethod")
     * .build())
     * .primaryValueDisplayType("primaryValueDisplayType")
     * .primaryValueFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartoptions.html)
     */
    public inline fun cfnTemplateGaugeChartOptionsProperty(
        block: CfnTemplateGaugeChartOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GaugeChartOptionsProperty {
        val builder = CfnTemplateGaugeChartOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for the primary value of a `GaugeChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GaugeChartPrimaryValueConditionalFormattingProperty
     * gaugeChartPrimaryValueConditionalFormattingProperty =
     * GaugeChartPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartprimaryvalueconditionalformatting.html)
     */
    public inline fun cfnTemplateGaugeChartPrimaryValueConditionalFormattingProperty(
        block: CfnTemplateGaugeChartPrimaryValueConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GaugeChartPrimaryValueConditionalFormattingProperty {
        val builder = CfnTemplateGaugeChartPrimaryValueConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A gauge chart.
     *
     * For more information, see
     * [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartvisual.html)
     */
    public inline fun cfnTemplateGaugeChartVisualProperty(
        block: CfnTemplateGaugeChartVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GaugeChartVisualProperty {
        val builder = CfnTemplateGaugeChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The bound options (north, south, west, east) of the geospatial window options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialCoordinateBoundsProperty geospatialCoordinateBoundsProperty =
     * GeospatialCoordinateBoundsProperty.builder()
     * .east(123)
     * .north(123)
     * .south(123)
     * .west(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialcoordinatebounds.html)
     */
    public inline fun cfnTemplateGeospatialCoordinateBoundsProperty(
        block: CfnTemplateGeospatialCoordinateBoundsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GeospatialCoordinateBoundsProperty {
        val builder = CfnTemplateGeospatialCoordinateBoundsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The color scale specification for the heatmap point style.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialHeatmapColorScaleProperty geospatialHeatmapColorScaleProperty =
     * GeospatialHeatmapColorScaleProperty.builder()
     * .colors(List.of(GeospatialHeatmapDataColorProperty.builder()
     * .color("color")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialheatmapcolorscale.html)
     */
    public inline fun cfnTemplateGeospatialHeatmapColorScaleProperty(
        block: CfnTemplateGeospatialHeatmapColorScalePropertyDsl.() -> Unit = {}
    ): CfnTemplate.GeospatialHeatmapColorScaleProperty {
        val builder = CfnTemplateGeospatialHeatmapColorScalePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The heatmap configuration of the geospatial point style.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialHeatmapConfigurationProperty geospatialHeatmapConfigurationProperty =
     * GeospatialHeatmapConfigurationProperty.builder()
     * .heatmapColor(GeospatialHeatmapColorScaleProperty.builder()
     * .colors(List.of(GeospatialHeatmapDataColorProperty.builder()
     * .color("color")
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialheatmapconfiguration.html)
     */
    public inline fun cfnTemplateGeospatialHeatmapConfigurationProperty(
        block: CfnTemplateGeospatialHeatmapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GeospatialHeatmapConfigurationProperty {
        val builder = CfnTemplateGeospatialHeatmapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The color to be used in the heatmap point style.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialHeatmapDataColorProperty geospatialHeatmapDataColorProperty =
     * GeospatialHeatmapDataColorProperty.builder()
     * .color("color")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialheatmapdatacolor.html)
     */
    public inline fun cfnTemplateGeospatialHeatmapDataColorProperty(
        block: CfnTemplateGeospatialHeatmapDataColorPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GeospatialHeatmapDataColorProperty {
        val builder = CfnTemplateGeospatialHeatmapDataColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells for a geospatial map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateGeospatialMapAggregatedFieldWellsProperty(
        block: CfnTemplateGeospatialMapAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GeospatialMapAggregatedFieldWellsProperty {
        val builder = CfnTemplateGeospatialMapAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `GeospatialMapVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapconfiguration.html)
     */
    public inline fun cfnTemplateGeospatialMapConfigurationProperty(
        block: CfnTemplateGeospatialMapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GeospatialMapConfigurationProperty {
        val builder = CfnTemplateGeospatialMapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a `GeospatialMapVisual` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapfieldwells.html)
     */
    public inline fun cfnTemplateGeospatialMapFieldWellsProperty(
        block: CfnTemplateGeospatialMapFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GeospatialMapFieldWellsProperty {
        val builder = CfnTemplateGeospatialMapFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The map style options of the geospatial map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialMapStyleOptionsProperty geospatialMapStyleOptionsProperty =
     * GeospatialMapStyleOptionsProperty.builder()
     * .baseMapStyle("baseMapStyle")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapstyleoptions.html)
     */
    public inline fun cfnTemplateGeospatialMapStyleOptionsProperty(
        block: CfnTemplateGeospatialMapStyleOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GeospatialMapStyleOptionsProperty {
        val builder = CfnTemplateGeospatialMapStyleOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A geospatial map or a points on map visual.
     *
     * For more information, see
     * [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapvisual.html)
     */
    public inline fun cfnTemplateGeospatialMapVisualProperty(
        block: CfnTemplateGeospatialMapVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GeospatialMapVisualProperty {
        val builder = CfnTemplateGeospatialMapVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The point style of the geospatial map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialPointStyleOptionsProperty geospatialPointStyleOptionsProperty =
     * GeospatialPointStyleOptionsProperty.builder()
     * .clusterMarkerConfiguration(ClusterMarkerConfigurationProperty.builder()
     * .clusterMarker(ClusterMarkerProperty.builder()
     * .simpleClusterMarker(SimpleClusterMarkerProperty.builder()
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .heatmapConfiguration(GeospatialHeatmapConfigurationProperty.builder()
     * .heatmapColor(GeospatialHeatmapColorScaleProperty.builder()
     * .colors(List.of(GeospatialHeatmapDataColorProperty.builder()
     * .color("color")
     * .build()))
     * .build())
     * .build())
     * .selectedPointStyle("selectedPointStyle")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialpointstyleoptions.html)
     */
    public inline fun cfnTemplateGeospatialPointStyleOptionsProperty(
        block: CfnTemplateGeospatialPointStyleOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GeospatialPointStyleOptionsProperty {
        val builder = CfnTemplateGeospatialPointStyleOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The window options of the geospatial map visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GeospatialWindowOptionsProperty geospatialWindowOptionsProperty =
     * GeospatialWindowOptionsProperty.builder()
     * .bounds(GeospatialCoordinateBoundsProperty.builder()
     * .east(123)
     * .north(123)
     * .south(123)
     * .west(123)
     * .build())
     * .mapZoomMode("mapZoomMode")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialwindowoptions.html)
     */
    public inline fun cfnTemplateGeospatialWindowOptionsProperty(
        block: CfnTemplateGeospatialWindowOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GeospatialWindowOptionsProperty {
        val builder = CfnTemplateGeospatialWindowOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the border options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GlobalTableBorderOptionsProperty globalTableBorderOptionsProperty =
     * GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-globaltableborderoptions.html)
     */
    public inline fun cfnTemplateGlobalTableBorderOptionsProperty(
        block: CfnTemplateGlobalTableBorderOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GlobalTableBorderOptionsProperty {
        val builder = CfnTemplateGlobalTableBorderOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the gradient color settings.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GradientColorProperty gradientColorProperty = GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gradientcolor.html)
     */
    public inline fun cfnTemplateGradientColorProperty(
        block: CfnTemplateGradientColorPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GradientColorProperty {
        val builder = CfnTemplateGradientColorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the gradient stop configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GradientStopProperty gradientStopProperty = GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gradientstop.html)
     */
    public inline fun cfnTemplateGradientStopProperty(
        block: CfnTemplateGradientStopPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GradientStopProperty {
        val builder = CfnTemplateGradientStopPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Configuration options for the canvas of a grid layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GridLayoutCanvasSizeOptionsProperty gridLayoutCanvasSizeOptionsProperty =
     * GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutcanvassizeoptions.html)
     */
    public inline fun cfnTemplateGridLayoutCanvasSizeOptionsProperty(
        block: CfnTemplateGridLayoutCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GridLayoutCanvasSizeOptionsProperty {
        val builder = CfnTemplateGridLayoutCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a grid layout. Also called a tiled layout.
     *
     * Visuals snap to a grid with standard spacing and alignment. Dashboards are displayed as
     * designed, with options to fit to screen or view at actual size.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GridLayoutConfigurationProperty gridLayoutConfigurationProperty =
     * GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutconfiguration.html)
     */
    public inline fun cfnTemplateGridLayoutConfigurationProperty(
        block: CfnTemplateGridLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GridLayoutConfigurationProperty {
        val builder = CfnTemplateGridLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An element within a grid layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GridLayoutElementProperty gridLayoutElementProperty = GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutelement.html)
     */
    public inline fun cfnTemplateGridLayoutElementProperty(
        block: CfnTemplateGridLayoutElementPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GridLayoutElementProperty {
        val builder = CfnTemplateGridLayoutElementPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the sizing of the canvas used in a grid layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GridLayoutScreenCanvasSizeOptionsProperty gridLayoutScreenCanvasSizeOptionsProperty =
     * GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutscreencanvassizeoptions.html)
     */
    public inline fun cfnTemplateGridLayoutScreenCanvasSizeOptionsProperty(
        block: CfnTemplateGridLayoutScreenCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GridLayoutScreenCanvasSizeOptionsProperty {
        val builder = CfnTemplateGridLayoutScreenCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The growth rate computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GrowthRateComputationProperty growthRateComputationProperty =
     * GrowthRateComputationProperty.builder()
     * .computationId("computationId")
     * .time(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * // the properties below are optional
     * .name("name")
     * .periodSize(123)
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-growthratecomputation.html)
     */
    public inline fun cfnTemplateGrowthRateComputationProperty(
        block: CfnTemplateGrowthRateComputationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.GrowthRateComputationProperty {
        val builder = CfnTemplateGrowthRateComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a header or footer section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HeaderFooterSectionConfigurationProperty headerFooterSectionConfigurationProperty =
     * HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-headerfootersectionconfiguration.html)
     */
    public inline fun cfnTemplateHeaderFooterSectionConfigurationProperty(
        block: CfnTemplateHeaderFooterSectionConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.HeaderFooterSectionConfigurationProperty {
        val builder = CfnTemplateHeaderFooterSectionConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells of a heat map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateHeatMapAggregatedFieldWellsProperty(
        block: CfnTemplateHeatMapAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.HeatMapAggregatedFieldWellsProperty {
        val builder = CfnTemplateHeatMapAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a heat map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapconfiguration.html)
     */
    public inline fun cfnTemplateHeatMapConfigurationProperty(
        block: CfnTemplateHeatMapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.HeatMapConfigurationProperty {
        val builder = CfnTemplateHeatMapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a heat map.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapfieldwells.html)
     */
    public inline fun cfnTemplateHeatMapFieldWellsProperty(
        block: CfnTemplateHeatMapFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.HeatMapFieldWellsProperty {
        val builder = CfnTemplateHeatMapFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a heat map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HeatMapSortConfigurationProperty heatMapSortConfigurationProperty =
     * HeatMapSortConfigurationProperty.builder()
     * .heatMapColumnItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .heatMapColumnSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .heatMapRowItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .heatMapRowSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapsortconfiguration.html)
     */
    public inline fun cfnTemplateHeatMapSortConfigurationProperty(
        block: CfnTemplateHeatMapSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.HeatMapSortConfigurationProperty {
        val builder = CfnTemplateHeatMapSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A heat map.
     *
     * For more information, see
     * [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapvisual.html)
     */
    public inline fun cfnTemplateHeatMapVisualProperty(
        block: CfnTemplateHeatMapVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.HeatMapVisualProperty {
        val builder = CfnTemplateHeatMapVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a histogram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HistogramAggregatedFieldWellsProperty histogramAggregatedFieldWellsProperty =
     * HistogramAggregatedFieldWellsProperty.builder()
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateHistogramAggregatedFieldWellsProperty(
        block: CfnTemplateHistogramAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.HistogramAggregatedFieldWellsProperty {
        val builder = CfnTemplateHistogramAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of histogram bins.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HistogramBinOptionsProperty histogramBinOptionsProperty = HistogramBinOptionsProperty.builder()
     * .binCount(BinCountOptionsProperty.builder()
     * .value(123)
     * .build())
     * .binWidth(BinWidthOptionsProperty.builder()
     * .binCountLimit(123)
     * .value(123)
     * .build())
     * .selectedBinType("selectedBinType")
     * .startValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogrambinoptions.html)
     */
    public inline fun cfnTemplateHistogramBinOptionsProperty(
        block: CfnTemplateHistogramBinOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.HistogramBinOptionsProperty {
        val builder = CfnTemplateHistogramBinOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `HistogramVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * HistogramConfigurationProperty histogramConfigurationProperty =
     * HistogramConfigurationProperty.builder()
     * .binOptions(HistogramBinOptionsProperty.builder()
     * .binCount(BinCountOptionsProperty.builder()
     * .value(123)
     * .build())
     * .binWidth(BinWidthOptionsProperty.builder()
     * .binCountLimit(123)
     * .value(123)
     * .build())
     * .selectedBinType("selectedBinType")
     * .startValue(123)
     * .build())
     * .dataLabels(DataLabelOptionsProperty.builder()
     * .categoryLabelVisibility("categoryLabelVisibility")
     * .dataLabelTypes(List.of(DataLabelTypeProperty.builder()
     * .dataPathLabelType(DataPathLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .visibility("visibility")
     * .build())
     * .fieldLabelType(FieldLabelTypeProperty.builder()
     * .fieldId("fieldId")
     * .visibility("visibility")
     * .build())
     * .maximumLabelType(MaximumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .minimumLabelType(MinimumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .rangeEndsLabelType(RangeEndsLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build()))
     * .labelColor("labelColor")
     * .labelContent("labelContent")
     * .labelFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .measureLabelVisibility("measureLabelVisibility")
     * .overlap("overlap")
     * .position("position")
     * .totalsVisibility("totalsVisibility")
     * .visibility("visibility")
     * .build())
     * .fieldWells(HistogramFieldWellsProperty.builder()
     * .histogramAggregatedFieldWells(HistogramAggregatedFieldWellsProperty.builder()
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build())
     * .tooltip(TooltipOptionsProperty.builder()
     * .fieldBasedTooltip(FieldBasedTooltipProperty.builder()
     * .aggregationVisibility("aggregationVisibility")
     * .tooltipFields(List.of(TooltipItemProperty.builder()
     * .columnTooltipItem(ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .fieldTooltipItem(FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .build()))
     * .tooltipTitleType("tooltipTitleType")
     * .build())
     * .selectedTooltipType("selectedTooltipType")
     * .tooltipVisibility("tooltipVisibility")
     * .build())
     * .visualPalette(VisualPaletteProperty.builder()
     * .chartColor("chartColor")
     * .colorMap(List.of(DataPathColorProperty.builder()
     * .color("color")
     * .element(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build())
     * // the properties below are optional
     * .timeGranularity("timeGranularity")
     * .build()))
     * .build())
     * .xAxisDisplayOptions(AxisDisplayOptionsProperty.builder()
     * .axisLineVisibility("axisLineVisibility")
     * .axisOffset("axisOffset")
     * .dataOptions(AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build())
     * .gridLineVisibility("gridLineVisibility")
     * .scrollbarOptions(ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build())
     * .tickLabelOptions(AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build())
     * .build())
     * .xAxisLabelOptions(ChartAxisLabelOptionsProperty.builder()
     * .axisLabelOptions(List.of(AxisLabelOptionsProperty.builder()
     * .applyTo(AxisLabelReferenceOptionsProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * .build())
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .build()))
     * .sortIconVisibility("sortIconVisibility")
     * .visibility("visibility")
     * .build())
     * .yAxisDisplayOptions(AxisDisplayOptionsProperty.builder()
     * .axisLineVisibility("axisLineVisibility")
     * .axisOffset("axisOffset")
     * .dataOptions(AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build())
     * .gridLineVisibility("gridLineVisibility")
     * .scrollbarOptions(ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build())
     * .tickLabelOptions(AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramconfiguration.html)
     */
    public inline fun cfnTemplateHistogramConfigurationProperty(
        block: CfnTemplateHistogramConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.HistogramConfigurationProperty {
        val builder = CfnTemplateHistogramConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a histogram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * HistogramFieldWellsProperty histogramFieldWellsProperty = HistogramFieldWellsProperty.builder()
     * .histogramAggregatedFieldWells(HistogramAggregatedFieldWellsProperty.builder()
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramfieldwells.html)
     */
    public inline fun cfnTemplateHistogramFieldWellsProperty(
        block: CfnTemplateHistogramFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.HistogramFieldWellsProperty {
        val builder = CfnTemplateHistogramFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A histogram.
     *
     * For more information, see
     * [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramvisual.html)
     */
    public inline fun cfnTemplateHistogramVisualProperty(
        block: CfnTemplateHistogramVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.HistogramVisualProperty {
        val builder = CfnTemplateHistogramVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of an insight visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-insightconfiguration.html)
     */
    public inline fun cfnTemplateInsightConfigurationProperty(
        block: CfnTemplateInsightConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.InsightConfigurationProperty {
        val builder = CfnTemplateInsightConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An insight visual.
     *
     * For more information, see
     * [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-insightvisual.html)
     */
    public inline fun cfnTemplateInsightVisualProperty(
        block: CfnTemplateInsightVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.InsightVisualProperty {
        val builder = CfnTemplateInsightVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The default values of the `IntegerParameterDeclaration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerDefaultValuesProperty integerDefaultValuesProperty =
     * IntegerDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integerdefaultvalues.html)
     */
    public inline fun cfnTemplateIntegerDefaultValuesProperty(
        block: CfnTemplateIntegerDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnTemplate.IntegerDefaultValuesProperty {
        val builder = CfnTemplateIntegerDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `Integer` data type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerParameterDeclarationProperty integerParameterDeclarationProperty =
     * IntegerParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(IntegerDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(IntegerValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integerparameterdeclaration.html)
     */
    public inline fun cfnTemplateIntegerParameterDeclarationProperty(
        block: CfnTemplateIntegerParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.IntegerParameterDeclarationProperty {
        val builder = CfnTemplateIntegerParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `Integer` data type.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * IntegerValueWhenUnsetConfigurationProperty integerValueWhenUnsetConfigurationProperty =
     * IntegerValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integervaluewhenunsetconfiguration.html)
     */
    public inline fun cfnTemplateIntegerValueWhenUnsetConfigurationProperty(
        block: CfnTemplateIntegerValueWhenUnsetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.IntegerValueWhenUnsetConfigurationProperty {
        val builder = CfnTemplateIntegerValueWhenUnsetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The limit configuration of the visual display for an axis.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ItemsLimitConfigurationProperty itemsLimitConfigurationProperty =
     * ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-itemslimitconfiguration.html)
     */
    public inline fun cfnTemplateItemsLimitConfigurationProperty(
        block: CfnTemplateItemsLimitConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ItemsLimitConfigurationProperty {
        val builder = CfnTemplateItemsLimitConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting options of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIConditionalFormattingOptionProperty kPIConditionalFormattingOptionProperty =
     * KPIConditionalFormattingOptionProperty.builder()
     * .primaryValue(KPIPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .progressBar(KPIProgressBarConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconditionalformattingoption.html)
     */
    public inline fun cfnTemplateKPIConditionalFormattingOptionProperty(
        block: CfnTemplateKPIConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.KPIConditionalFormattingOptionProperty {
        val builder = CfnTemplateKPIConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIConditionalFormattingProperty kPIConditionalFormattingProperty =
     * KPIConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(KPIConditionalFormattingOptionProperty.builder()
     * .primaryValue(KPIPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .progressBar(KPIProgressBarConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconditionalformatting.html)
     */
    public inline fun cfnTemplateKPIConditionalFormattingProperty(
        block: CfnTemplateKPIConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.KPIConditionalFormattingProperty {
        val builder = CfnTemplateKPIConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a KPI visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconfiguration.html)
     */
    public inline fun cfnTemplateKPIConfigurationProperty(
        block: CfnTemplateKPIConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.KPIConfigurationProperty {
        val builder = CfnTemplateKPIConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a KPI visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpifieldwells.html)
     */
    public inline fun cfnTemplateKPIFieldWellsProperty(
        block: CfnTemplateKPIFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.KPIFieldWellsProperty {
        val builder = CfnTemplateKPIFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIOptionsProperty kPIOptionsProperty = KPIOptionsProperty.builder()
     * .comparison(ComparisonConfigurationProperty.builder()
     * .comparisonFormat(ComparisonFormatConfigurationProperty.builder()
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .comparisonMethod("comparisonMethod")
     * .build())
     * .primaryValueDisplayType("primaryValueDisplayType")
     * .primaryValueFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .progressBar(ProgressBarOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .secondaryValue(SecondaryValueOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .secondaryValueFontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .trendArrows(TrendArrowOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpioptions.html)
     */
    public inline fun cfnTemplateKPIOptionsProperty(
        block: CfnTemplateKPIOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.KPIOptionsProperty {
        val builder = CfnTemplateKPIOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for the primary value of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIPrimaryValueConditionalFormattingProperty kPIPrimaryValueConditionalFormattingProperty =
     * KPIPrimaryValueConditionalFormattingProperty.builder()
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiprimaryvalueconditionalformatting.html)
     */
    public inline fun cfnTemplateKPIPrimaryValueConditionalFormattingProperty(
        block: CfnTemplateKPIPrimaryValueConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.KPIPrimaryValueConditionalFormattingProperty {
        val builder = CfnTemplateKPIPrimaryValueConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for the progress bar of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPIProgressBarConditionalFormattingProperty kPIProgressBarConditionalFormattingProperty =
     * KPIProgressBarConditionalFormattingProperty.builder()
     * .foregroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiprogressbarconditionalformatting.html)
     */
    public inline fun cfnTemplateKPIProgressBarConditionalFormattingProperty(
        block: CfnTemplateKPIProgressBarConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.KPIProgressBarConditionalFormattingProperty {
        val builder = CfnTemplateKPIProgressBarConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * KPISortConfigurationProperty kPISortConfigurationProperty =
     * KPISortConfigurationProperty.builder()
     * .trendGroupSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpisortconfiguration.html)
     */
    public inline fun cfnTemplateKPISortConfigurationProperty(
        block: CfnTemplateKPISortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.KPISortConfigurationProperty {
        val builder = CfnTemplateKPISortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A key performance indicator (KPI).
     *
     * For more information, see
     * [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisual.html)
     */
    public inline fun cfnTemplateKPIVisualProperty(
        block: CfnTemplateKPIVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.KPIVisualProperty {
        val builder = CfnTemplateKPIVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The share label options for the labels.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LabelOptionsProperty labelOptionsProperty = LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-labeloptions.html)
     */
    public inline fun cfnTemplateLabelOptionsProperty(
        block: CfnTemplateLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LabelOptionsProperty {
        val builder = CfnTemplateLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that determines what the type of layout will be used on a sheet.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LayoutConfigurationProperty layoutConfigurationProperty = LayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .gridLayout(GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .sectionBasedLayout(SectionBasedLayoutConfigurationProperty.builder()
     * .bodySections(List.of(BodySectionConfigurationProperty.builder()
     * .content(BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .pageBreakConfiguration(SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build())
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .footerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .headerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-layoutconfiguration.html)
     */
    public inline fun cfnTemplateLayoutConfigurationProperty(
        block: CfnTemplateLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LayoutConfigurationProperty {
        val builder = CfnTemplateLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `Layout` defines the placement of elements within a sheet.
     *
     * For more information, see
     * [Types of layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LayoutProperty layoutProperty = LayoutProperty.builder()
     * .configuration(LayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .gridLayout(GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .sectionBasedLayout(SectionBasedLayoutConfigurationProperty.builder()
     * .bodySections(List.of(BodySectionConfigurationProperty.builder()
     * .content(BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .pageBreakConfiguration(SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build())
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .footerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .headerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-layout.html)
     */
    public inline fun cfnTemplateLayoutProperty(
        block: CfnTemplateLayoutPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LayoutProperty {
        val builder = CfnTemplateLayoutPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for the legend setup of a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LegendOptionsProperty legendOptionsProperty = LegendOptionsProperty.builder()
     * .height("height")
     * .position("position")
     * .title(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .width("width")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-legendoptions.html)
     */
    public inline fun cfnTemplateLegendOptionsProperty(
        block: CfnTemplateLegendOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LegendOptionsProperty {
        val builder = CfnTemplateLegendOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a line chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateLineChartAggregatedFieldWellsProperty(
        block: CfnTemplateLineChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LineChartAggregatedFieldWellsProperty {
        val builder = CfnTemplateLineChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a line chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html)
     */
    public inline fun cfnTemplateLineChartConfigurationProperty(
        block: CfnTemplateLineChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LineChartConfigurationProperty {
        val builder = CfnTemplateLineChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the default presentation of all line series in `LineChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartDefaultSeriesSettingsProperty lineChartDefaultSeriesSettingsProperty =
     * LineChartDefaultSeriesSettingsProperty.builder()
     * .axisBinding("axisBinding")
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartdefaultseriessettings.html)
     */
    public inline fun cfnTemplateLineChartDefaultSeriesSettingsProperty(
        block: CfnTemplateLineChartDefaultSeriesSettingsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LineChartDefaultSeriesSettingsProperty {
        val builder = CfnTemplateLineChartDefaultSeriesSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a line chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartfieldwells.html)
     */
    public inline fun cfnTemplateLineChartFieldWellsProperty(
        block: CfnTemplateLineChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LineChartFieldWellsProperty {
        val builder = CfnTemplateLineChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Line styles options for a line series in `LineChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartLineStyleSettingsProperty lineChartLineStyleSettingsProperty =
     * LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartlinestylesettings.html)
     */
    public inline fun cfnTemplateLineChartLineStyleSettingsProperty(
        block: CfnTemplateLineChartLineStyleSettingsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LineChartLineStyleSettingsProperty {
        val builder = CfnTemplateLineChartLineStyleSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Marker styles options for a line series in `LineChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartMarkerStyleSettingsProperty lineChartMarkerStyleSettingsProperty =
     * LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartmarkerstylesettings.html)
     */
    public inline fun cfnTemplateLineChartMarkerStyleSettingsProperty(
        block: CfnTemplateLineChartMarkerStyleSettingsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LineChartMarkerStyleSettingsProperty {
        val builder = CfnTemplateLineChartMarkerStyleSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of a line series in the visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartSeriesSettingsProperty lineChartSeriesSettingsProperty =
     * LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartseriessettings.html)
     */
    public inline fun cfnTemplateLineChartSeriesSettingsProperty(
        block: CfnTemplateLineChartSeriesSettingsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LineChartSeriesSettingsProperty {
        val builder = CfnTemplateLineChartSeriesSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LineChartSortConfigurationProperty lineChartSortConfigurationProperty =
     * LineChartSortConfigurationProperty.builder()
     * .categoryItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .colorItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .smallMultiplesSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartsortconfiguration.html)
     */
    public inline fun cfnTemplateLineChartSortConfigurationProperty(
        block: CfnTemplateLineChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LineChartSortConfigurationProperty {
        val builder = CfnTemplateLineChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A line chart.
     *
     * For more information, see
     * [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartvisual.html)
     */
    public inline fun cfnTemplateLineChartVisualProperty(
        block: CfnTemplateLineChartVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LineChartVisualProperty {
        val builder = CfnTemplateLineChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The series axis configuration of a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * LineSeriesAxisDisplayOptionsProperty lineSeriesAxisDisplayOptionsProperty =
     * LineSeriesAxisDisplayOptionsProperty.builder()
     * .axisOptions(AxisDisplayOptionsProperty.builder()
     * .axisLineVisibility("axisLineVisibility")
     * .axisOffset("axisOffset")
     * .dataOptions(AxisDataOptionsProperty.builder()
     * .dateAxisOptions(DateAxisOptionsProperty.builder()
     * .missingDateVisibility("missingDateVisibility")
     * .build())
     * .numericAxisOptions(NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build())
     * .build())
     * .gridLineVisibility("gridLineVisibility")
     * .scrollbarOptions(ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build())
     * .tickLabelOptions(AxisTickLabelOptionsProperty.builder()
     * .labelOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .rotationAngle(123)
     * .build())
     * .build())
     * .missingDataConfigurations(List.of(MissingDataConfigurationProperty.builder()
     * .treatmentOption("treatmentOption")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-lineseriesaxisdisplayoptions.html)
     */
    public inline fun cfnTemplateLineSeriesAxisDisplayOptionsProperty(
        block: CfnTemplateLineSeriesAxisDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LineSeriesAxisDisplayOptionsProperty {
        val builder = CfnTemplateLineSeriesAxisDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ListControlDisplayOptionsProperty listControlDisplayOptionsProperty =
     * ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-listcontroldisplayoptions.html)
     */
    public inline fun cfnTemplateListControlDisplayOptionsProperty(
        block: CfnTemplateListControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ListControlDisplayOptionsProperty {
        val builder = CfnTemplateListControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of the search options in a list control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ListControlSearchOptionsProperty listControlSearchOptionsProperty =
     * ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-listcontrolsearchoptions.html)
     */
    public inline fun cfnTemplateListControlSearchOptionsProperty(
        block: CfnTemplateListControlSearchOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ListControlSearchOptionsProperty {
        val builder = CfnTemplateListControlSearchOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of the `Select all` options in a list control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ListControlSelectAllOptionsProperty listControlSelectAllOptionsProperty =
     * ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-listcontrolselectalloptions.html)
     */
    public inline fun cfnTemplateListControlSelectAllOptionsProperty(
        block: CfnTemplateListControlSelectAllOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ListControlSelectAllOptionsProperty {
        val builder = CfnTemplateListControlSelectAllOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of loading animation in free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LoadingAnimationProperty loadingAnimationProperty = LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-loadinganimation.html)
     */
    public inline fun cfnTemplateLoadingAnimationProperty(
        block: CfnTemplateLoadingAnimationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LoadingAnimationProperty {
        val builder = CfnTemplateLoadingAnimationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The navigation configuration for `CustomActionNavigationOperation` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LocalNavigationConfigurationProperty localNavigationConfigurationProperty =
     * LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-localnavigationconfiguration.html)
     */
    public inline fun cfnTemplateLocalNavigationConfigurationProperty(
        block: CfnTemplateLocalNavigationConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LocalNavigationConfigurationProperty {
        val builder = CfnTemplateLocalNavigationConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The text format for a subtitle.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * LongFormatTextProperty longFormatTextProperty = LongFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-longformattext.html)
     */
    public inline fun cfnTemplateLongFormatTextProperty(
        block: CfnTemplateLongFormatTextPropertyDsl.() -> Unit = {}
    ): CfnTemplate.LongFormatTextProperty {
        val builder = CfnTemplateLongFormatTextPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A dataset parameter that is mapped to an analysis parameter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MappedDataSetParameterProperty mappedDataSetParameterProperty =
     * MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-mappeddatasetparameter.html)
     */
    public inline fun cfnTemplateMappedDataSetParameterProperty(
        block: CfnTemplateMappedDataSetParameterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.MappedDataSetParameterProperty {
        val builder = CfnTemplateMappedDataSetParameterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The maximum label of a data path label.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MaximumLabelTypeProperty maximumLabelTypeProperty = MaximumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-maximumlabeltype.html)
     */
    public inline fun cfnTemplateMaximumLabelTypeProperty(
        block: CfnTemplateMaximumLabelTypePropertyDsl.() -> Unit = {}
    ): CfnTemplate.MaximumLabelTypeProperty {
        val builder = CfnTemplateMaximumLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The maximum and minimum computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MaximumMinimumComputationProperty maximumMinimumComputationProperty =
     * MaximumMinimumComputationProperty.builder()
     * .computationId("computationId")
     * .time(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * .type("type")
     * // the properties below are optional
     * .name("name")
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-maximumminimumcomputation.html)
     */
    public inline fun cfnTemplateMaximumMinimumComputationProperty(
        block: CfnTemplateMaximumMinimumComputationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.MaximumMinimumComputationProperty {
        val builder = CfnTemplateMaximumMinimumComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The measure (metric) type field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MeasureFieldProperty measureFieldProperty = MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-measurefield.html)
     */
    public inline fun cfnTemplateMeasureFieldProperty(
        block: CfnTemplateMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnTemplate.MeasureFieldProperty {
        val builder = CfnTemplateMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The metric comparison computation configuration.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-metriccomparisoncomputation.html)
     */
    public inline fun cfnTemplateMetricComparisonComputationProperty(
        block: CfnTemplateMetricComparisonComputationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.MetricComparisonComputationProperty {
        val builder = CfnTemplateMetricComparisonComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The minimum label of a data path label.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MinimumLabelTypeProperty minimumLabelTypeProperty = MinimumLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-minimumlabeltype.html)
     */
    public inline fun cfnTemplateMinimumLabelTypeProperty(
        block: CfnTemplateMinimumLabelTypePropertyDsl.() -> Unit = {}
    ): CfnTemplate.MinimumLabelTypeProperty {
        val builder = CfnTemplateMinimumLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration options that determine how missing data is treated during the rendering of
     * a line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MissingDataConfigurationProperty missingDataConfigurationProperty =
     * MissingDataConfigurationProperty.builder()
     * .treatmentOption("treatmentOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-missingdataconfiguration.html)
     */
    public inline fun cfnTemplateMissingDataConfigurationProperty(
        block: CfnTemplateMissingDataConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.MissingDataConfigurationProperty {
        val builder = CfnTemplateMissingDataConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the negative value configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NegativeValueConfigurationProperty negativeValueConfigurationProperty =
     * NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-negativevalueconfiguration.html)
     */
    public inline fun cfnTemplateNegativeValueConfigurationProperty(
        block: CfnTemplateNegativeValueConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NegativeValueConfigurationProperty {
        val builder = CfnTemplateNegativeValueConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the null value format configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NullValueFormatConfigurationProperty nullValueFormatConfigurationProperty =
     * NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-nullvalueformatconfiguration.html)
     */
    public inline fun cfnTemplateNullValueFormatConfigurationProperty(
        block: CfnTemplateNullValueFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NullValueFormatConfigurationProperty {
        val builder = CfnTemplateNullValueFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the number display format configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumberDisplayFormatConfigurationProperty numberDisplayFormatConfigurationProperty =
     * NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numberdisplayformatconfiguration.html)
     */
    public inline fun cfnTemplateNumberDisplayFormatConfigurationProperty(
        block: CfnTemplateNumberDisplayFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NumberDisplayFormatConfigurationProperty {
        val builder = CfnTemplateNumberDisplayFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for number fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumberFormatConfigurationProperty numberFormatConfigurationProperty =
     * NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numberformatconfiguration.html)
     */
    public inline fun cfnTemplateNumberFormatConfigurationProperty(
        block: CfnTemplateNumberFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NumberFormatConfigurationProperty {
        val builder = CfnTemplateNumberFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for an axis with a numeric field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * Object dataDriven;
     * NumericAxisOptionsProperty numericAxisOptionsProperty = NumericAxisOptionsProperty.builder()
     * .range(AxisDisplayRangeProperty.builder()
     * .dataDriven(dataDriven)
     * .minMax(AxisDisplayMinMaxRangeProperty.builder()
     * .maximum(123)
     * .minimum(123)
     * .build())
     * .build())
     * .scale(AxisScaleProperty.builder()
     * .linear(AxisLinearScaleProperty.builder()
     * .stepCount(123)
     * .stepSize(123)
     * .build())
     * .logarithmic(AxisLogarithmicScaleProperty.builder()
     * .base(123)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericaxisoptions.html)
     */
    public inline fun cfnTemplateNumericAxisOptionsProperty(
        block: CfnTemplateNumericAxisOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NumericAxisOptionsProperty {
        val builder = CfnTemplateNumericAxisOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The category drill down filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericEqualityDrillDownFilterProperty numericEqualityDrillDownFilterProperty =
     * NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalitydrilldownfilter.html)
     */
    public inline fun cfnTemplateNumericEqualityDrillDownFilterProperty(
        block: CfnTemplateNumericEqualityDrillDownFilterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NumericEqualityDrillDownFilterProperty {
        val builder = CfnTemplateNumericEqualityDrillDownFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `NumericEqualityFilter` filters values that are equal to the specified value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericEqualityFilterProperty numericEqualityFilterProperty =
     * NumericEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .matchOperator("matchOperator")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .parameterName("parameterName")
     * .selectAllOptions("selectAllOptions")
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalityfilter.html)
     */
    public inline fun cfnTemplateNumericEqualityFilterProperty(
        block: CfnTemplateNumericEqualityFilterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NumericEqualityFilterProperty {
        val builder = CfnTemplateNumericEqualityFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the numeric format configuration.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericFormatConfigurationProperty numericFormatConfigurationProperty =
     * NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericformatconfiguration.html)
     */
    public inline fun cfnTemplateNumericFormatConfigurationProperty(
        block: CfnTemplateNumericFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NumericFormatConfigurationProperty {
        val builder = CfnTemplateNumericFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `NumericRangeFilter` filters values that are within the value range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericRangeFilterProperty numericRangeFilterProperty = NumericRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .rangeMinimum(NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build())
     * .selectAllOptions("selectAllOptions")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefilter.html)
     */
    public inline fun cfnTemplateNumericRangeFilterProperty(
        block: CfnTemplateNumericRangeFilterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NumericRangeFilterProperty {
        val builder = CfnTemplateNumericRangeFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The value input pf the numeric range filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericRangeFilterValueProperty numericRangeFilterValueProperty =
     * NumericRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .staticValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefiltervalue.html)
     */
    public inline fun cfnTemplateNumericRangeFilterValueProperty(
        block: CfnTemplateNumericRangeFilterValuePropertyDsl.() -> Unit = {}
    ): CfnTemplate.NumericRangeFilterValueProperty {
        val builder = CfnTemplateNumericRangeFilterValuePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the numeric separator configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericSeparatorConfigurationProperty numericSeparatorConfigurationProperty =
     * NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericseparatorconfiguration.html)
     */
    public inline fun cfnTemplateNumericSeparatorConfigurationProperty(
        block: CfnTemplateNumericSeparatorConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NumericSeparatorConfigurationProperty {
        val builder = CfnTemplateNumericSeparatorConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Aggregation for numerical values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericalAggregationFunctionProperty numericalAggregationFunctionProperty =
     * NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericalaggregationfunction.html)
     */
    public inline fun cfnTemplateNumericalAggregationFunctionProperty(
        block: CfnTemplateNumericalAggregationFunctionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NumericalAggregationFunctionProperty {
        val builder = CfnTemplateNumericalAggregationFunctionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dimension type field with numerical type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericalDimensionFieldProperty numericalDimensionFieldProperty =
     * NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericaldimensionfield.html)
     */
    public inline fun cfnTemplateNumericalDimensionFieldProperty(
        block: CfnTemplateNumericalDimensionFieldPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NumericalDimensionFieldProperty {
        val builder = CfnTemplateNumericalDimensionFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The measure type field with numerical type columns.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NumericalMeasureFieldProperty numericalMeasureFieldProperty =
     * NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericalmeasurefield.html)
     */
    public inline fun cfnTemplateNumericalMeasureFieldProperty(
        block: CfnTemplateNumericalMeasureFieldPropertyDsl.() -> Unit = {}
    ): CfnTemplate.NumericalMeasureFieldProperty {
        val builder = CfnTemplateNumericalMeasureFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The pagination configuration for a table visual or boxplot.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PaginationConfigurationProperty paginationConfigurationProperty =
     * PaginationConfigurationProperty.builder()
     * .pageNumber(123)
     * .pageSize(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-paginationconfiguration.html)
     */
    public inline fun cfnTemplatePaginationConfigurationProperty(
        block: CfnTemplatePaginationConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PaginationConfigurationProperty {
        val builder = CfnTemplatePaginationConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A collection of options that configure how each panel displays in a small multiples chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PanelConfigurationProperty panelConfigurationProperty = PanelConfigurationProperty.builder()
     * .backgroundColor("backgroundColor")
     * .backgroundVisibility("backgroundVisibility")
     * .borderColor("borderColor")
     * .borderStyle("borderStyle")
     * .borderThickness("borderThickness")
     * .borderVisibility("borderVisibility")
     * .gutterSpacing("gutterSpacing")
     * .gutterVisibility("gutterVisibility")
     * .title(PanelTitleOptionsProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-panelconfiguration.html)
     */
    public inline fun cfnTemplatePanelConfigurationProperty(
        block: CfnTemplatePanelConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PanelConfigurationProperty {
        val builder = CfnTemplatePanelConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the title styles for each small multiples panel.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PanelTitleOptionsProperty panelTitleOptionsProperty = PanelTitleOptionsProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-paneltitleoptions.html)
     */
    public inline fun cfnTemplatePanelTitleOptionsProperty(
        block: CfnTemplatePanelTitleOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PanelTitleOptionsProperty {
        val builder = CfnTemplatePanelTitleOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The control of a parameter that users can interact with in a dashboard or an analysis.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterControlProperty parameterControlProperty = ParameterControlProperty.builder()
     * .dateTimePicker(ParameterDateTimePickerControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .dropdown(ParameterDropDownControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build())
     * .list(ParameterListControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build())
     * .slider(ParameterSliderControlProperty.builder()
     * .maximumValue(123)
     * .minimumValue(123)
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .stepSize(123)
     * .title("title")
     * // the properties below are optional
     * .displayOptions(SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .textArea(ParameterTextAreaControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .delimiter("delimiter")
     * .displayOptions(TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .textField(ParameterTextFieldControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametercontrol.html)
     */
    public inline fun cfnTemplateParameterControlProperty(
        block: CfnTemplateParameterControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ParameterControlProperty {
        val builder = CfnTemplateParameterControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control from a date parameter that specifies date and time.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterDateTimePickerControlProperty parameterDateTimePickerControlProperty =
     * ParameterDateTimePickerControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(DateTimePickerControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdatetimepickercontrol.html)
     */
    public inline fun cfnTemplateParameterDateTimePickerControlProperty(
        block: CfnTemplateParameterDateTimePickerControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ParameterDateTimePickerControlProperty {
        val builder = CfnTemplateParameterDateTimePickerControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The declaration definition of a parameter.
     *
     * For more information, see
     * [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterDeclarationProperty parameterDeclarationProperty =
     * ParameterDeclarationProperty.builder()
     * .dateTimeParameterDeclaration(DateTimeParameterDeclarationProperty.builder()
     * .name("name")
     * // the properties below are optional
     * .defaultValues(DateTimeDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .timeGranularity("timeGranularity")
     * .valueWhenUnset(DateTimeValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build())
     * .decimalParameterDeclaration(DecimalParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(DecimalDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(DecimalValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build())
     * .integerParameterDeclaration(IntegerParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(IntegerDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of(123))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(IntegerValueWhenUnsetConfigurationProperty.builder()
     * .customValue(123)
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build())
     * .stringParameterDeclaration(StringParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(StringDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(StringValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdeclaration.html)
     */
    public inline fun cfnTemplateParameterDeclarationProperty(
        block: CfnTemplateParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ParameterDeclarationProperty {
        val builder = CfnTemplateParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a dropdown list with buttons that are used to select a single value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterDropDownControlProperty parameterDropDownControlProperty =
     * ParameterDropDownControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(DropDownControlDisplayOptionsProperty.builder()
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdropdowncontrol.html)
     */
    public inline fun cfnTemplateParameterDropDownControlProperty(
        block: CfnTemplateParameterDropDownControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ParameterDropDownControlProperty {
        val builder = CfnTemplateParameterDropDownControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a list with buttons or boxes that are used to select either a single
     * value or multiple values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterListControlProperty parameterListControlProperty =
     * ParameterListControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .cascadingControlConfiguration(CascadingControlConfigurationProperty.builder()
     * .sourceControls(List.of(CascadingControlSourceProperty.builder()
     * .columnToMatch(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceSheetControlId("sourceSheetControlId")
     * .build()))
     * .build())
     * .displayOptions(ListControlDisplayOptionsProperty.builder()
     * .searchOptions(ListControlSearchOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .selectAllOptions(ListControlSelectAllOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .selectableValues(ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build())
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterlistcontrol.html)
     */
    public inline fun cfnTemplateParameterListControlProperty(
        block: CfnTemplateParameterListControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ParameterListControlProperty {
        val builder = CfnTemplateParameterListControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A list of selectable values that are used in a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterSelectableValuesProperty parameterSelectableValuesProperty =
     * ParameterSelectableValuesProperty.builder()
     * .linkToDataSetColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .values(List.of("values"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterselectablevalues.html)
     */
    public inline fun cfnTemplateParameterSelectableValuesProperty(
        block: CfnTemplateParameterSelectableValuesPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ParameterSelectableValuesProperty {
        val builder = CfnTemplateParameterSelectableValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a horizontal toggle bar.
     *
     * This is used to change a value by sliding the toggle.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterSliderControlProperty parameterSliderControlProperty =
     * ParameterSliderControlProperty.builder()
     * .maximumValue(123)
     * .minimumValue(123)
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .stepSize(123)
     * .title("title")
     * // the properties below are optional
     * .displayOptions(SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterslidercontrol.html)
     */
    public inline fun cfnTemplateParameterSliderControlProperty(
        block: CfnTemplateParameterSliderControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ParameterSliderControlProperty {
        val builder = CfnTemplateParameterSliderControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a text box that is used to enter multiple entries.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterTextAreaControlProperty parameterTextAreaControlProperty =
     * ParameterTextAreaControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .delimiter("delimiter")
     * .displayOptions(TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextareacontrol.html)
     */
    public inline fun cfnTemplateParameterTextAreaControlProperty(
        block: CfnTemplateParameterTextAreaControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ParameterTextAreaControlProperty {
        val builder = CfnTemplateParameterTextAreaControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A control to display a text box that is used to enter a single entry.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ParameterTextFieldControlProperty parameterTextFieldControlProperty =
     * ParameterTextFieldControlProperty.builder()
     * .parameterControlId("parameterControlId")
     * .sourceParameterName("sourceParameterName")
     * .title("title")
     * // the properties below are optional
     * .displayOptions(TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextfieldcontrol.html)
     */
    public inline fun cfnTemplateParameterTextFieldControlProperty(
        block: CfnTemplateParameterTextFieldControlPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ParameterTextFieldControlProperty {
        val builder = CfnTemplateParameterTextFieldControlPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The percent range in the visible range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PercentVisibleRangeProperty percentVisibleRangeProperty = PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentvisiblerange.html)
     */
    public inline fun cfnTemplatePercentVisibleRangeProperty(
        block: CfnTemplatePercentVisibleRangePropertyDsl.() -> Unit = {}
    ): CfnTemplate.PercentVisibleRangeProperty {
        val builder = CfnTemplatePercentVisibleRangePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the percentage display format configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PercentageDisplayFormatConfigurationProperty percentageDisplayFormatConfigurationProperty =
     * PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentagedisplayformatconfiguration.html)
     */
    public inline fun cfnTemplatePercentageDisplayFormatConfigurationProperty(
        block: CfnTemplatePercentageDisplayFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PercentageDisplayFormatConfigurationProperty {
        val builder = CfnTemplatePercentageDisplayFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * An aggregation based on the percentile of values in a dimension or measure.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PercentileAggregationProperty percentileAggregationProperty =
     * PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentileaggregation.html)
     */
    public inline fun cfnTemplatePercentileAggregationProperty(
        block: CfnTemplatePercentileAggregationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PercentileAggregationProperty {
        val builder = CfnTemplatePercentileAggregationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The period over period computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PeriodOverPeriodComputationProperty periodOverPeriodComputationProperty =
     * PeriodOverPeriodComputationProperty.builder()
     * .computationId("computationId")
     * .time(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * // the properties below are optional
     * .name("name")
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodoverperiodcomputation.html)
     */
    public inline fun cfnTemplatePeriodOverPeriodComputationProperty(
        block: CfnTemplatePeriodOverPeriodComputationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PeriodOverPeriodComputationProperty {
        val builder = CfnTemplatePeriodOverPeriodComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The period to date computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PeriodToDateComputationProperty periodToDateComputationProperty =
     * PeriodToDateComputationProperty.builder()
     * .computationId("computationId")
     * .time(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * // the properties below are optional
     * .name("name")
     * .periodTimeGranularity("periodTimeGranularity")
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodtodatecomputation.html)
     */
    public inline fun cfnTemplatePeriodToDateComputationProperty(
        block: CfnTemplatePeriodToDateComputationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PeriodToDateComputationProperty {
        val builder = CfnTemplatePeriodToDateComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a pie chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartaggregatedfieldwells.html)
     */
    public inline fun cfnTemplatePieChartAggregatedFieldWellsProperty(
        block: CfnTemplatePieChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PieChartAggregatedFieldWellsProperty {
        val builder = CfnTemplatePieChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a pie chart.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html)
     */
    public inline fun cfnTemplatePieChartConfigurationProperty(
        block: CfnTemplatePieChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PieChartConfigurationProperty {
        val builder = CfnTemplatePieChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a pie chart.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartfieldwells.html)
     */
    public inline fun cfnTemplatePieChartFieldWellsProperty(
        block: CfnTemplatePieChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PieChartFieldWellsProperty {
        val builder = CfnTemplatePieChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a pie chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PieChartSortConfigurationProperty pieChartSortConfigurationProperty =
     * PieChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .smallMultiplesSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartsortconfiguration.html)
     */
    public inline fun cfnTemplatePieChartSortConfigurationProperty(
        block: CfnTemplatePieChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PieChartSortConfigurationProperty {
        val builder = CfnTemplatePieChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A pie or donut chart.
     *
     * The `PieChartVisual` structure describes a visual that is a member of the pie chart family.
     *
     * The following charts can be described by using this structure:
     * * Pie charts
     * * Donut charts
     *
     * For more information, see
     * [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * For more information, see
     * [Using donut charts](https://docs.aws.amazon.com/quicksight/latest/user/donut-chart.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartvisual.html)
     */
    public inline fun cfnTemplatePieChartVisualProperty(
        block: CfnTemplatePieChartVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PieChartVisualProperty {
        val builder = CfnTemplatePieChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field sort options for a pivot table sort configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotFieldSortOptionsProperty pivotFieldSortOptionsProperty =
     * PivotFieldSortOptionsProperty.builder()
     * .fieldId("fieldId")
     * .sortBy(PivotTableSortByProperty.builder()
     * .column(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .dataPath(DataPathSortProperty.builder()
     * .direction("direction")
     * .sortPaths(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .build())
     * .field(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivotfieldsortoptions.html)
     */
    public inline fun cfnTemplatePivotFieldSortOptionsProperty(
        block: CfnTemplatePivotFieldSortOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotFieldSortOptionsProperty {
        val builder = CfnTemplatePivotFieldSortOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well for the pivot table.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableaggregatedfieldwells.html)
     */
    public inline fun cfnTemplatePivotTableAggregatedFieldWellsProperty(
        block: CfnTemplatePivotTableAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableAggregatedFieldWellsProperty {
        val builder = CfnTemplatePivotTableAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The cell conditional formatting option for a pivot table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableCellConditionalFormattingProperty pivotTableCellConditionalFormattingProperty =
     * PivotTableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .scope(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build())
     * .scopes(List.of(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build()))
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablecellconditionalformatting.html)
     */
    public inline fun cfnTemplatePivotTableCellConditionalFormattingProperty(
        block: CfnTemplatePivotTableCellConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableCellConditionalFormattingProperty {
        val builder = CfnTemplatePivotTableCellConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Conditional formatting options for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableConditionalFormattingOptionProperty pivotTableConditionalFormattingOptionProperty =
     * PivotTableConditionalFormattingOptionProperty.builder()
     * .cell(PivotTableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .scope(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build())
     * .scopes(List.of(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build()))
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconditionalformattingoption.html)
     */
    public inline fun cfnTemplatePivotTableConditionalFormattingOptionProperty(
        block: CfnTemplatePivotTableConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableConditionalFormattingOptionProperty {
        val builder = CfnTemplatePivotTableConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableConditionalFormattingProperty pivotTableConditionalFormattingProperty =
     * PivotTableConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(PivotTableConditionalFormattingOptionProperty.builder()
     * .cell(PivotTableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .scope(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build())
     * .scopes(List.of(PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build()))
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconditionalformatting.html)
     */
    public inline fun cfnTemplatePivotTableConditionalFormattingProperty(
        block: CfnTemplatePivotTableConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableConditionalFormattingProperty {
        val builder = CfnTemplatePivotTableConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The scope of the cell for conditional formatting.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableConditionalFormattingScopeProperty pivotTableConditionalFormattingScopeProperty =
     * PivotTableConditionalFormattingScopeProperty.builder()
     * .role("role")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconditionalformattingscope.html)
     */
    public inline fun cfnTemplatePivotTableConditionalFormattingScopeProperty(
        block: CfnTemplatePivotTableConditionalFormattingScopePropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableConditionalFormattingScopeProperty {
        val builder = CfnTemplatePivotTableConditionalFormattingScopePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconfiguration.html)
     */
    public inline fun cfnTemplatePivotTableConfigurationProperty(
        block: CfnTemplatePivotTableConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableConfigurationProperty {
        val builder = CfnTemplatePivotTableConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data path options for the pivot table field options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableDataPathOptionProperty pivotTableDataPathOptionProperty =
     * PivotTableDataPathOptionProperty.builder()
     * .dataPathList(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * // the properties below are optional
     * .width("width")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottabledatapathoption.html)
     */
    public inline fun cfnTemplatePivotTableDataPathOptionProperty(
        block: CfnTemplatePivotTableDataPathOptionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableDataPathOptionProperty {
        val builder = CfnTemplatePivotTableDataPathOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The collapse state options for the pivot table field options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldCollapseStateOptionProperty pivotTableFieldCollapseStateOptionProperty =
     * PivotTableFieldCollapseStateOptionProperty.builder()
     * .target(PivotTableFieldCollapseStateTargetProperty.builder()
     * .fieldDataPathValues(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .fieldId("fieldId")
     * .build())
     * // the properties below are optional
     * .state("state")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldcollapsestateoption.html)
     */
    public inline fun cfnTemplatePivotTableFieldCollapseStateOptionProperty(
        block: CfnTemplatePivotTableFieldCollapseStateOptionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableFieldCollapseStateOptionProperty {
        val builder = CfnTemplatePivotTableFieldCollapseStateOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The target of a pivot table field collapse state.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldCollapseStateTargetProperty pivotTableFieldCollapseStateTargetProperty =
     * PivotTableFieldCollapseStateTargetProperty.builder()
     * .fieldDataPathValues(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldcollapsestatetarget.html)
     */
    public inline fun cfnTemplatePivotTableFieldCollapseStateTargetProperty(
        block: CfnTemplatePivotTableFieldCollapseStateTargetPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableFieldCollapseStateTargetProperty {
        val builder = CfnTemplatePivotTableFieldCollapseStateTargetPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The selected field options for the pivot table field options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldOptionProperty pivotTableFieldOptionProperty =
     * PivotTableFieldOptionProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .customLabel("customLabel")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldoption.html)
     */
    public inline fun cfnTemplatePivotTableFieldOptionProperty(
        block: CfnTemplatePivotTableFieldOptionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableFieldOptionProperty {
        val builder = CfnTemplatePivotTableFieldOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field options for a pivot table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldOptionsProperty pivotTableFieldOptionsProperty =
     * PivotTableFieldOptionsProperty.builder()
     * .collapseStateOptions(List.of(PivotTableFieldCollapseStateOptionProperty.builder()
     * .target(PivotTableFieldCollapseStateTargetProperty.builder()
     * .fieldDataPathValues(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .fieldId("fieldId")
     * .build())
     * // the properties below are optional
     * .state("state")
     * .build()))
     * .dataPathOptions(List.of(PivotTableDataPathOptionProperty.builder()
     * .dataPathList(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * // the properties below are optional
     * .width("width")
     * .build()))
     * .selectedFieldOptions(List.of(PivotTableFieldOptionProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .customLabel("customLabel")
     * .visibility("visibility")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldoptions.html)
     */
    public inline fun cfnTemplatePivotTableFieldOptionsProperty(
        block: CfnTemplatePivotTableFieldOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableFieldOptionsProperty {
        val builder = CfnTemplatePivotTableFieldOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The optional configuration of subtotals cells.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableFieldSubtotalOptionsProperty pivotTableFieldSubtotalOptionsProperty =
     * PivotTableFieldSubtotalOptionsProperty.builder()
     * .fieldId("fieldId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldsubtotaloptions.html)
     */
    public inline fun cfnTemplatePivotTableFieldSubtotalOptionsProperty(
        block: CfnTemplatePivotTableFieldSubtotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableFieldSubtotalOptionsProperty {
        val builder = CfnTemplatePivotTableFieldSubtotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells for a pivot table visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldwells.html)
     */
    public inline fun cfnTemplatePivotTableFieldWellsProperty(
        block: CfnTemplatePivotTableFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableFieldWellsProperty {
        val builder = CfnTemplatePivotTableFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The table options for a pivot table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableOptionsProperty pivotTableOptionsProperty = PivotTableOptionsProperty.builder()
     * .cellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .collapsedRowDimensionsVisibility("collapsedRowDimensionsVisibility")
     * .columnHeaderStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .columnNamesVisibility("columnNamesVisibility")
     * .metricPlacement("metricPlacement")
     * .rowAlternateColorOptions(RowAlternateColorOptionsProperty.builder()
     * .rowAlternateColors(List.of("rowAlternateColors"))
     * .status("status")
     * .build())
     * .rowFieldNamesStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .rowHeaderStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .singleMetricVisibility("singleMetricVisibility")
     * .toggleButtonsVisibility("toggleButtonsVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html)
     */
    public inline fun cfnTemplatePivotTableOptionsProperty(
        block: CfnTemplatePivotTableOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableOptionsProperty {
        val builder = CfnTemplatePivotTableOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The paginated report options for a pivot table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTablePaginatedReportOptionsProperty pivotTablePaginatedReportOptionsProperty =
     * PivotTablePaginatedReportOptionsProperty.builder()
     * .overflowColumnHeaderVisibility("overflowColumnHeaderVisibility")
     * .verticalOverflowVisibility("verticalOverflowVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablepaginatedreportoptions.html)
     */
    public inline fun cfnTemplatePivotTablePaginatedReportOptionsProperty(
        block: CfnTemplatePivotTablePaginatedReportOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTablePaginatedReportOptionsProperty {
        val builder = CfnTemplatePivotTablePaginatedReportOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort by field for the field sort options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableSortByProperty pivotTableSortByProperty = PivotTableSortByProperty.builder()
     * .column(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .dataPath(DataPathSortProperty.builder()
     * .direction("direction")
     * .sortPaths(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .build())
     * .field(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablesortby.html)
     */
    public inline fun cfnTemplatePivotTableSortByProperty(
        block: CfnTemplatePivotTableSortByPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableSortByProperty {
        val builder = CfnTemplatePivotTableSortByPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTableSortConfigurationProperty pivotTableSortConfigurationProperty =
     * PivotTableSortConfigurationProperty.builder()
     * .fieldSortOptions(List.of(PivotFieldSortOptionsProperty.builder()
     * .fieldId("fieldId")
     * .sortBy(PivotTableSortByProperty.builder()
     * .column(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .dataPath(DataPathSortProperty.builder()
     * .direction("direction")
     * .sortPaths(List.of(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build()))
     * .build())
     * .field(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablesortconfiguration.html)
     */
    public inline fun cfnTemplatePivotTableSortConfigurationProperty(
        block: CfnTemplatePivotTableSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableSortConfigurationProperty {
        val builder = CfnTemplatePivotTableSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The total options for a pivot table visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottabletotaloptions.html)
     */
    public inline fun cfnTemplatePivotTableTotalOptionsProperty(
        block: CfnTemplatePivotTableTotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableTotalOptionsProperty {
        val builder = CfnTemplatePivotTableTotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A pivot table.
     *
     * For more information, see
     * [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablevisual.html)
     */
    public inline fun cfnTemplatePivotTableVisualProperty(
        block: CfnTemplatePivotTableVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTableVisualProperty {
        val builder = CfnTemplatePivotTableVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The optional configuration of totals cells in a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PivotTotalOptionsProperty pivotTotalOptionsProperty = PivotTotalOptionsProperty.builder()
     * .customLabel("customLabel")
     * .metricHeaderCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .placement("placement")
     * .scrollStatus("scrollStatus")
     * .totalCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .totalsVisibility("totalsVisibility")
     * .valueCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottotaloptions.html)
     */
    public inline fun cfnTemplatePivotTotalOptionsProperty(
        block: CfnTemplatePivotTotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PivotTotalOptionsProperty {
        val builder = CfnTemplatePivotTotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The option that determines the hierarchy of the fields that are defined during data
     * preparation.
     *
     * These fields are available to use in any analysis that uses the data source.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * PredefinedHierarchyProperty predefinedHierarchyProperty = PredefinedHierarchyProperty.builder()
     * .columns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .hierarchyId("hierarchyId")
     * // the properties below are optional
     * .drillDownFilters(List.of(DrillDownFilterProperty.builder()
     * .categoryFilter(CategoryDrillDownFilterProperty.builder()
     * .categoryValues(List.of("categoryValues"))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .numericEqualityFilter(NumericEqualityDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .value(123)
     * .build())
     * .timeRangeFilter(TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-predefinedhierarchy.html)
     */
    public inline fun cfnTemplatePredefinedHierarchyProperty(
        block: CfnTemplatePredefinedHierarchyPropertyDsl.() -> Unit = {}
    ): CfnTemplate.PredefinedHierarchyProperty {
        val builder = CfnTemplatePredefinedHierarchyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the progress bar of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ProgressBarOptionsProperty progressBarOptionsProperty = ProgressBarOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-progressbaroptions.html)
     */
    public inline fun cfnTemplateProgressBarOptionsProperty(
        block: CfnTemplateProgressBarOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ProgressBarOptionsProperty {
        val builder = CfnTemplateProgressBarOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Properties for defining a `CfnTemplate`.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-template.html)
     */
    public inline fun cfnTemplateProps(
        block: CfnTemplatePropsDsl.() -> Unit = {}
    ): CfnTemplateProps {
        val builder = CfnTemplatePropsDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well configuration of a `RadarChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateRadarChartAggregatedFieldWellsProperty(
        block: CfnTemplateRadarChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.RadarChartAggregatedFieldWellsProperty {
        val builder = CfnTemplateRadarChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configured style settings of a radar chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RadarChartAreaStyleSettingsProperty radarChartAreaStyleSettingsProperty =
     * RadarChartAreaStyleSettingsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartareastylesettings.html)
     */
    public inline fun cfnTemplateRadarChartAreaStyleSettingsProperty(
        block: CfnTemplateRadarChartAreaStyleSettingsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.RadarChartAreaStyleSettingsProperty {
        val builder = CfnTemplateRadarChartAreaStyleSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a `RadarChartVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html)
     */
    public inline fun cfnTemplateRadarChartConfigurationProperty(
        block: CfnTemplateRadarChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.RadarChartConfigurationProperty {
        val builder = CfnTemplateRadarChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a radar chart visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartfieldwells.html)
     */
    public inline fun cfnTemplateRadarChartFieldWellsProperty(
        block: CfnTemplateRadarChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.RadarChartFieldWellsProperty {
        val builder = CfnTemplateRadarChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The series settings of a radar chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RadarChartSeriesSettingsProperty radarChartSeriesSettingsProperty =
     * RadarChartSeriesSettingsProperty.builder()
     * .areaStyleSettings(RadarChartAreaStyleSettingsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartseriessettings.html)
     */
    public inline fun cfnTemplateRadarChartSeriesSettingsProperty(
        block: CfnTemplateRadarChartSeriesSettingsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.RadarChartSeriesSettingsProperty {
        val builder = CfnTemplateRadarChartSeriesSettingsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a `RadarChartVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RadarChartSortConfigurationProperty radarChartSortConfigurationProperty =
     * RadarChartSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .colorItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .colorSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartsortconfiguration.html)
     */
    public inline fun cfnTemplateRadarChartSortConfigurationProperty(
        block: CfnTemplateRadarChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.RadarChartSortConfigurationProperty {
        val builder = CfnTemplateRadarChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A radar chart visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartvisual.html)
     */
    public inline fun cfnTemplateRadarChartVisualProperty(
        block: CfnTemplateRadarChartVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.RadarChartVisualProperty {
        val builder = CfnTemplateRadarChartVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The range ends label type of a data path label.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RangeEndsLabelTypeProperty rangeEndsLabelTypeProperty = RangeEndsLabelTypeProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-rangeendslabeltype.html)
     */
    public inline fun cfnTemplateRangeEndsLabelTypeProperty(
        block: CfnTemplateRangeEndsLabelTypePropertyDsl.() -> Unit = {}
    ): CfnTemplate.RangeEndsLabelTypeProperty {
        val builder = CfnTemplateRangeEndsLabelTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a custom label on a `ReferenceLine` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineCustomLabelConfigurationProperty referenceLineCustomLabelConfigurationProperty =
     * ReferenceLineCustomLabelConfigurationProperty.builder()
     * .customLabel("customLabel")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinecustomlabelconfiguration.html)
     */
    public inline fun cfnTemplateReferenceLineCustomLabelConfigurationProperty(
        block: CfnTemplateReferenceLineCustomLabelConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ReferenceLineCustomLabelConfigurationProperty {
        val builder = CfnTemplateReferenceLineCustomLabelConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The data configuration of the reference line.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineDataConfigurationProperty referenceLineDataConfigurationProperty =
     * ReferenceLineDataConfigurationProperty.builder()
     * .axisBinding("axisBinding")
     * .dynamicConfiguration(ReferenceLineDynamicDataConfigurationProperty.builder()
     * .calculation(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .measureAggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .staticConfiguration(ReferenceLineStaticDataConfigurationProperty.builder()
     * .value(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinedataconfiguration.html)
     */
    public inline fun cfnTemplateReferenceLineDataConfigurationProperty(
        block: CfnTemplateReferenceLineDataConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ReferenceLineDataConfigurationProperty {
        val builder = CfnTemplateReferenceLineDataConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The dynamic configuration of the reference line data configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineDynamicDataConfigurationProperty referenceLineDynamicDataConfigurationProperty =
     * ReferenceLineDynamicDataConfigurationProperty.builder()
     * .calculation(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .measureAggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinedynamicdataconfiguration.html)
     */
    public inline fun cfnTemplateReferenceLineDynamicDataConfigurationProperty(
        block: CfnTemplateReferenceLineDynamicDataConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ReferenceLineDynamicDataConfigurationProperty {
        val builder = CfnTemplateReferenceLineDynamicDataConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The label configuration of a reference line.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineLabelConfigurationProperty referenceLineLabelConfigurationProperty =
     * ReferenceLineLabelConfigurationProperty.builder()
     * .customLabelConfiguration(ReferenceLineCustomLabelConfigurationProperty.builder()
     * .customLabel("customLabel")
     * .build())
     * .fontColor("fontColor")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalPosition("horizontalPosition")
     * .valueLabelConfiguration(ReferenceLineValueLabelConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .relativePosition("relativePosition")
     * .build())
     * .verticalPosition("verticalPosition")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinelabelconfiguration.html)
     */
    public inline fun cfnTemplateReferenceLineLabelConfigurationProperty(
        block: CfnTemplateReferenceLineLabelConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ReferenceLineLabelConfigurationProperty {
        val builder = CfnTemplateReferenceLineLabelConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The reference line visual display options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineProperty referenceLineProperty = ReferenceLineProperty.builder()
     * .dataConfiguration(ReferenceLineDataConfigurationProperty.builder()
     * .axisBinding("axisBinding")
     * .dynamicConfiguration(ReferenceLineDynamicDataConfigurationProperty.builder()
     * .calculation(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .measureAggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .staticConfiguration(ReferenceLineStaticDataConfigurationProperty.builder()
     * .value(123)
     * .build())
     * .build())
     * // the properties below are optional
     * .labelConfiguration(ReferenceLineLabelConfigurationProperty.builder()
     * .customLabelConfiguration(ReferenceLineCustomLabelConfigurationProperty.builder()
     * .customLabel("customLabel")
     * .build())
     * .fontColor("fontColor")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalPosition("horizontalPosition")
     * .valueLabelConfiguration(ReferenceLineValueLabelConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .relativePosition("relativePosition")
     * .build())
     * .verticalPosition("verticalPosition")
     * .build())
     * .status("status")
     * .styleConfiguration(ReferenceLineStyleConfigurationProperty.builder()
     * .color("color")
     * .pattern("pattern")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referenceline.html)
     */
    public inline fun cfnTemplateReferenceLineProperty(
        block: CfnTemplateReferenceLinePropertyDsl.() -> Unit = {}
    ): CfnTemplate.ReferenceLineProperty {
        val builder = CfnTemplateReferenceLinePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The static data configuration of the reference line data configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineStaticDataConfigurationProperty referenceLineStaticDataConfigurationProperty =
     * ReferenceLineStaticDataConfigurationProperty.builder()
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinestaticdataconfiguration.html)
     */
    public inline fun cfnTemplateReferenceLineStaticDataConfigurationProperty(
        block: CfnTemplateReferenceLineStaticDataConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ReferenceLineStaticDataConfigurationProperty {
        val builder = CfnTemplateReferenceLineStaticDataConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The style configuration of the reference line.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineStyleConfigurationProperty referenceLineStyleConfigurationProperty =
     * ReferenceLineStyleConfigurationProperty.builder()
     * .color("color")
     * .pattern("pattern")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinestyleconfiguration.html)
     */
    public inline fun cfnTemplateReferenceLineStyleConfigurationProperty(
        block: CfnTemplateReferenceLineStyleConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ReferenceLineStyleConfigurationProperty {
        val builder = CfnTemplateReferenceLineStyleConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The value label configuration of the label in a reference line.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ReferenceLineValueLabelConfigurationProperty referenceLineValueLabelConfigurationProperty =
     * ReferenceLineValueLabelConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .relativePosition("relativePosition")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinevaluelabelconfiguration.html)
     */
    public inline fun cfnTemplateReferenceLineValueLabelConfigurationProperty(
        block: CfnTemplateReferenceLineValueLabelConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ReferenceLineValueLabelConfigurationProperty {
        val builder = CfnTemplateReferenceLineValueLabelConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RelativeDateTimeControlDisplayOptionsProperty relativeDateTimeControlDisplayOptionsProperty =
     * RelativeDateTimeControlDisplayOptionsProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatetimecontroldisplayoptions.html)
     */
    public inline fun cfnTemplateRelativeDateTimeControlDisplayOptionsProperty(
        block: CfnTemplateRelativeDateTimeControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.RelativeDateTimeControlDisplayOptionsProperty {
        val builder = CfnTemplateRelativeDateTimeControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `RelativeDatesFilter` filters relative dates values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RelativeDatesFilterProperty relativeDatesFilterProperty = RelativeDatesFilterProperty.builder()
     * .anchorDateConfiguration(AnchorDateConfigurationProperty.builder()
     * .anchorOption("anchorOption")
     * .parameterName("parameterName")
     * .build())
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * .relativeDateType("relativeDateType")
     * .timeGranularity("timeGranularity")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .minimumGranularity("minimumGranularity")
     * .parameterName("parameterName")
     * .relativeDateValue(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatesfilter.html)
     */
    public inline fun cfnTemplateRelativeDatesFilterProperty(
        block: CfnTemplateRelativeDatesFilterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.RelativeDatesFilterProperty {
        val builder = CfnTemplateRelativeDatesFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Permission for the resource.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ResourcePermissionProperty resourcePermissionProperty = ResourcePermissionProperty.builder()
     * .actions(List.of("actions"))
     * .principal("principal")
     * // the properties below are optional
     * .resource("resource")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-resourcepermission.html)
     */
    public inline fun cfnTemplateResourcePermissionProperty(
        block: CfnTemplateResourcePermissionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ResourcePermissionProperty {
        val builder = CfnTemplateResourcePermissionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The rolling date configuration of a date time filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RollingDateConfigurationProperty rollingDateConfigurationProperty =
     * RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-rollingdateconfiguration.html)
     */
    public inline fun cfnTemplateRollingDateConfigurationProperty(
        block: CfnTemplateRollingDateConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.RollingDateConfigurationProperty {
        val builder = CfnTemplateRollingDateConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Determines the row alternate color options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RowAlternateColorOptionsProperty rowAlternateColorOptionsProperty =
     * RowAlternateColorOptionsProperty.builder()
     * .rowAlternateColors(List.of("rowAlternateColors"))
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-rowalternatecoloroptions.html)
     */
    public inline fun cfnTemplateRowAlternateColorOptionsProperty(
        block: CfnTemplateRowAlternateColorOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.RowAlternateColorOptionsProperty {
        val builder = CfnTemplateRowAlternateColorOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of the same-sheet target visuals that you want to be filtered.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SameSheetTargetVisualConfigurationProperty sameSheetTargetVisualConfigurationProperty =
     * SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-samesheettargetvisualconfiguration.html)
     */
    public inline fun cfnTemplateSameSheetTargetVisualConfigurationProperty(
        block: CfnTemplateSameSheetTargetVisualConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SameSheetTargetVisualConfigurationProperty {
        val builder = CfnTemplateSameSheetTargetVisualConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a sankey diagram.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateSankeyDiagramAggregatedFieldWellsProperty(
        block: CfnTemplateSankeyDiagramAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SankeyDiagramAggregatedFieldWellsProperty {
        val builder = CfnTemplateSankeyDiagramAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a sankey diagram.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramchartconfiguration.html)
     */
    public inline fun cfnTemplateSankeyDiagramChartConfigurationProperty(
        block: CfnTemplateSankeyDiagramChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SankeyDiagramChartConfigurationProperty {
        val builder = CfnTemplateSankeyDiagramChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a sankey diagram.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramfieldwells.html)
     */
    public inline fun cfnTemplateSankeyDiagramFieldWellsProperty(
        block: CfnTemplateSankeyDiagramFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SankeyDiagramFieldWellsProperty {
        val builder = CfnTemplateSankeyDiagramFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a sankey diagram.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SankeyDiagramSortConfigurationProperty sankeyDiagramSortConfigurationProperty =
     * SankeyDiagramSortConfigurationProperty.builder()
     * .destinationItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .sourceItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .weightSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramsortconfiguration.html)
     */
    public inline fun cfnTemplateSankeyDiagramSortConfigurationProperty(
        block: CfnTemplateSankeyDiagramSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SankeyDiagramSortConfigurationProperty {
        val builder = CfnTemplateSankeyDiagramSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A sankey diagram.
     *
     * For more information, see
     * [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramvisual.html)
     */
    public inline fun cfnTemplateSankeyDiagramVisualProperty(
        block: CfnTemplateSankeyDiagramVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SankeyDiagramVisualProperty {
        val builder = CfnTemplateSankeyDiagramVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well of a scatter plot.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotcategoricallyaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateScatterPlotCategoricallyAggregatedFieldWellsProperty(
        block: CfnTemplateScatterPlotCategoricallyAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ScatterPlotCategoricallyAggregatedFieldWellsProperty {
        val builder = CfnTemplateScatterPlotCategoricallyAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a scatter plot.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotconfiguration.html)
     */
    public inline fun cfnTemplateScatterPlotConfigurationProperty(
        block: CfnTemplateScatterPlotConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ScatterPlotConfigurationProperty {
        val builder = CfnTemplateScatterPlotConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a scatter plot.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotfieldwells.html)
     */
    public inline fun cfnTemplateScatterPlotFieldWellsProperty(
        block: CfnTemplateScatterPlotFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ScatterPlotFieldWellsProperty {
        val builder = CfnTemplateScatterPlotFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The unaggregated field wells of a scatter plot.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotunaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateScatterPlotUnaggregatedFieldWellsProperty(
        block: CfnTemplateScatterPlotUnaggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ScatterPlotUnaggregatedFieldWellsProperty {
        val builder = CfnTemplateScatterPlotUnaggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A scatter plot.
     *
     * For more information, see
     * [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotvisual.html)
     */
    public inline fun cfnTemplateScatterPlotVisualProperty(
        block: CfnTemplateScatterPlotVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ScatterPlotVisualProperty {
        val builder = CfnTemplateScatterPlotVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The visual display options for a data zoom scroll bar.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ScrollBarOptionsProperty scrollBarOptionsProperty = ScrollBarOptionsProperty.builder()
     * .visibility("visibility")
     * .visibleRange(VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scrollbaroptions.html)
     */
    public inline fun cfnTemplateScrollBarOptionsProperty(
        block: CfnTemplateScrollBarOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ScrollBarOptionsProperty {
        val builder = CfnTemplateScrollBarOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of the secondary value of a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SecondaryValueOptionsProperty secondaryValueOptionsProperty =
     * SecondaryValueOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-secondaryvalueoptions.html)
     */
    public inline fun cfnTemplateSecondaryValueOptionsProperty(
        block: CfnTemplateSecondaryValueOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SecondaryValueOptionsProperty {
        val builder = CfnTemplateSecondaryValueOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a page break after a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionAfterPageBreakProperty sectionAfterPageBreakProperty =
     * SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionafterpagebreak.html)
     */
    public inline fun cfnTemplateSectionAfterPageBreakProperty(
        block: CfnTemplateSectionAfterPageBreakPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SectionAfterPageBreakProperty {
        val builder = CfnTemplateSectionAfterPageBreakPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for the canvas of a section-based layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionBasedLayoutCanvasSizeOptionsProperty sectionBasedLayoutCanvasSizeOptionsProperty =
     * SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutcanvassizeoptions.html)
     */
    public inline fun cfnTemplateSectionBasedLayoutCanvasSizeOptionsProperty(
        block: CfnTemplateSectionBasedLayoutCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SectionBasedLayoutCanvasSizeOptionsProperty {
        val builder = CfnTemplateSectionBasedLayoutCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a section-based layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionBasedLayoutConfigurationProperty sectionBasedLayoutConfigurationProperty =
     * SectionBasedLayoutConfigurationProperty.builder()
     * .bodySections(List.of(BodySectionConfigurationProperty.builder()
     * .content(BodySectionContentProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .pageBreakConfiguration(SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build())
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty.builder()
     * .paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build())
     * .build())
     * .footerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .headerSections(List.of(HeaderFooterSectionConfigurationProperty.builder()
     * .layout(SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build())
     * .sectionId("sectionId")
     * // the properties below are optional
     * .style(SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutconfiguration.html)
     */
    public inline fun cfnTemplateSectionBasedLayoutConfigurationProperty(
        block: CfnTemplateSectionBasedLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SectionBasedLayoutConfigurationProperty {
        val builder = CfnTemplateSectionBasedLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for a paper canvas of a section-based layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionBasedLayoutPaperCanvasSizeOptionsProperty
     * sectionBasedLayoutPaperCanvasSizeOptionsProperty =
     * SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()
     * .paperMargin(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .paperOrientation("paperOrientation")
     * .paperSize("paperSize")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutpapercanvassizeoptions.html)
     */
    public inline fun cfnTemplateSectionBasedLayoutPaperCanvasSizeOptionsProperty(
        block: CfnTemplateSectionBasedLayoutPaperCanvasSizeOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SectionBasedLayoutPaperCanvasSizeOptionsProperty {
        val builder = CfnTemplateSectionBasedLayoutPaperCanvasSizeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The layout configuration of a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionLayoutConfigurationProperty sectionLayoutConfigurationProperty =
     * SectionLayoutConfigurationProperty.builder()
     * .freeFormLayout(FreeFormSectionLayoutConfigurationProperty.builder()
     * .elements(List.of(FreeFormLayoutElementProperty.builder()
     * .elementId("elementId")
     * .elementType("elementType")
     * .height("height")
     * .width("width")
     * .xAxisLocation("xAxisLocation")
     * .yAxisLocation("yAxisLocation")
     * // the properties below are optional
     * .backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .borderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .loadingAnimation(LoadingAnimationProperty.builder()
     * .visibility("visibility")
     * .build())
     * .renderingRules(List.of(SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build()))
     * .selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty.builder()
     * .color("color")
     * .visibility("visibility")
     * .build())
     * .visibility("visibility")
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionlayoutconfiguration.html)
     */
    public inline fun cfnTemplateSectionLayoutConfigurationProperty(
        block: CfnTemplateSectionLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SectionLayoutConfigurationProperty {
        val builder = CfnTemplateSectionLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a page break for a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionPageBreakConfigurationProperty sectionPageBreakConfigurationProperty =
     * SectionPageBreakConfigurationProperty.builder()
     * .after(SectionAfterPageBreakProperty.builder()
     * .status("status")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionpagebreakconfiguration.html)
     */
    public inline fun cfnTemplateSectionPageBreakConfigurationProperty(
        block: CfnTemplateSectionPageBreakConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SectionPageBreakConfigurationProperty {
        val builder = CfnTemplateSectionPageBreakConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that style a section.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SectionStyleProperty sectionStyleProperty = SectionStyleProperty.builder()
     * .height("height")
     * .padding(SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionstyle.html)
     */
    public inline fun cfnTemplateSectionStyleProperty(
        block: CfnTemplateSectionStylePropertyDsl.() -> Unit = {}
    ): CfnTemplate.SectionStyleProperty {
        val builder = CfnTemplateSectionStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for applying a filter to specific sheets or visuals.
     *
     * You can apply this filter to multiple visuals that are on one sheet or to all visuals on a
     * sheet.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SelectedSheetsFilterScopeConfigurationProperty selectedSheetsFilterScopeConfigurationProperty =
     * SelectedSheetsFilterScopeConfigurationProperty.builder()
     * .sheetVisualScopingConfigurations(List.of(SheetVisualScopingConfigurationProperty.builder()
     * .scope("scope")
     * .sheetId("sheetId")
     * // the properties below are optional
     * .visualIds(List.of("visualIds"))
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-selectedsheetsfilterscopeconfiguration.html)
     */
    public inline fun cfnTemplateSelectedSheetsFilterScopeConfigurationProperty(
        block: CfnTemplateSelectedSheetsFilterScopeConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SelectedSheetsFilterScopeConfigurationProperty {
        val builder = CfnTemplateSelectedSheetsFilterScopeConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The series item configuration of a line chart.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SeriesItemProperty seriesItemProperty = SeriesItemProperty.builder()
     * .dataFieldSeriesItem(DataFieldSeriesItemProperty.builder()
     * .axisBinding("axisBinding")
     * .fieldId("fieldId")
     * // the properties below are optional
     * .fieldValue("fieldValue")
     * .settings(LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build())
     * .build())
     * .fieldSeriesItem(FieldSeriesItemProperty.builder()
     * .axisBinding("axisBinding")
     * .fieldId("fieldId")
     * // the properties below are optional
     * .settings(LineChartSeriesSettingsProperty.builder()
     * .lineStyleSettings(LineChartLineStyleSettingsProperty.builder()
     * .lineInterpolation("lineInterpolation")
     * .lineStyle("lineStyle")
     * .lineVisibility("lineVisibility")
     * .lineWidth("lineWidth")
     * .build())
     * .markerStyleSettings(LineChartMarkerStyleSettingsProperty.builder()
     * .markerColor("markerColor")
     * .markerShape("markerShape")
     * .markerSize("markerSize")
     * .markerVisibility("markerVisibility")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-seriesitem.html)
     */
    public inline fun cfnTemplateSeriesItemProperty(
        block: CfnTemplateSeriesItemPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SeriesItemProperty {
        val builder = CfnTemplateSeriesItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of adding parameters in action.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SetParameterValueConfigurationProperty setParameterValueConfigurationProperty =
     * SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-setparametervalueconfiguration.html)
     */
    public inline fun cfnTemplateSetParameterValueConfigurationProperty(
        block: CfnTemplateSetParameterValueConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SetParameterValueConfigurationProperty {
        val builder = CfnTemplateSetParameterValueConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The shape conditional formatting of a filled map visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ShapeConditionalFormatProperty shapeConditionalFormatProperty =
     * ShapeConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-shapeconditionalformat.html)
     */
    public inline fun cfnTemplateShapeConditionalFormatProperty(
        block: CfnTemplateShapeConditionalFormatPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ShapeConditionalFormatProperty {
        val builder = CfnTemplateShapeConditionalFormatPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that determines the elements and canvas size options of sheet control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetControlLayoutConfigurationProperty sheetControlLayoutConfigurationProperty =
     * SheetControlLayoutConfigurationProperty.builder()
     * .gridLayout(GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetcontrollayoutconfiguration.html)
     */
    public inline fun cfnTemplateSheetControlLayoutConfigurationProperty(
        block: CfnTemplateSheetControlLayoutConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SheetControlLayoutConfigurationProperty {
        val builder = CfnTemplateSheetControlLayoutConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A grid layout to define the placement of sheet control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetControlLayoutProperty sheetControlLayoutProperty = SheetControlLayoutProperty.builder()
     * .configuration(SheetControlLayoutConfigurationProperty.builder()
     * .gridLayout(GridLayoutConfigurationProperty.builder()
     * .elements(List.of(GridLayoutElementProperty.builder()
     * .columnSpan(123)
     * .elementId("elementId")
     * .elementType("elementType")
     * .rowSpan(123)
     * // the properties below are optional
     * .columnIndex(123)
     * .rowIndex(123)
     * .build()))
     * // the properties below are optional
     * .canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty.builder()
     * .screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty.builder()
     * .resizeOption("resizeOption")
     * // the properties below are optional
     * .optimizedViewPortWidth("optimizedViewPortWidth")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetcontrollayout.html)
     */
    public inline fun cfnTemplateSheetControlLayoutProperty(
        block: CfnTemplateSheetControlLayoutPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SheetControlLayoutProperty {
        val builder = CfnTemplateSheetControlLayoutPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A sheet is an object that contains a set of visuals that are viewed together on one page in a
     * paginated report.
     *
     * Every analysis and dashboard must contain at least one sheet.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html)
     */
    public inline fun cfnTemplateSheetDefinitionProperty(
        block: CfnTemplateSheetDefinitionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SheetDefinitionProperty {
        val builder = CfnTemplateSheetDefinitionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The override configuration of the rendering rules of a sheet.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetElementConfigurationOverridesProperty sheetElementConfigurationOverridesProperty =
     * SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetelementconfigurationoverrides.html)
     */
    public inline fun cfnTemplateSheetElementConfigurationOverridesProperty(
        block: CfnTemplateSheetElementConfigurationOverridesPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SheetElementConfigurationOverridesProperty {
        val builder = CfnTemplateSheetElementConfigurationOverridesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The rendering rules of a sheet that uses a free-form layout.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetElementRenderingRuleProperty sheetElementRenderingRuleProperty =
     * SheetElementRenderingRuleProperty.builder()
     * .configurationOverrides(SheetElementConfigurationOverridesProperty.builder()
     * .visibility("visibility")
     * .build())
     * .expression("expression")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetelementrenderingrule.html)
     */
    public inline fun cfnTemplateSheetElementRenderingRuleProperty(
        block: CfnTemplateSheetElementRenderingRulePropertyDsl.() -> Unit = {}
    ): CfnTemplate.SheetElementRenderingRuleProperty {
        val builder = CfnTemplateSheetElementRenderingRulePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A *sheet* , which is an object that contains a set of visuals that are viewed together on one
     * page in Amazon QuickSight.
     *
     * Every analysis and dashboard contains at least one sheet. Each sheet contains at least one
     * visualization widget, for example a chart, pivot table, or narrative insight. Sheets can be
     * associated with other components, such as controls, filters, and so on.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetProperty sheetProperty = SheetProperty.builder()
     * .name("name")
     * .sheetId("sheetId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheet.html)
     */
    public inline fun cfnTemplateSheetProperty(
        block: CfnTemplateSheetPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SheetProperty {
        val builder = CfnTemplateSheetPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A text box.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetTextBoxProperty sheetTextBoxProperty = SheetTextBoxProperty.builder()
     * .sheetTextBoxId("sheetTextBoxId")
     * // the properties below are optional
     * .content("content")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheettextbox.html)
     */
    public inline fun cfnTemplateSheetTextBoxProperty(
        block: CfnTemplateSheetTextBoxPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SheetTextBoxProperty {
        val builder = CfnTemplateSheetTextBoxPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The filter that is applied to the options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetVisualScopingConfigurationProperty sheetVisualScopingConfigurationProperty =
     * SheetVisualScopingConfigurationProperty.builder()
     * .scope("scope")
     * .sheetId("sheetId")
     * // the properties below are optional
     * .visualIds(List.of("visualIds"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetvisualscopingconfiguration.html)
     */
    public inline fun cfnTemplateSheetVisualScopingConfigurationProperty(
        block: CfnTemplateSheetVisualScopingConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SheetVisualScopingConfigurationProperty {
        val builder = CfnTemplateSheetVisualScopingConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The text format for the title.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ShortFormatTextProperty shortFormatTextProperty = ShortFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-shortformattext.html)
     */
    public inline fun cfnTemplateShortFormatTextProperty(
        block: CfnTemplateShortFormatTextPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ShortFormatTextProperty {
        val builder = CfnTemplateShortFormatTextPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The simple cluster marker of the cluster marker.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SimpleClusterMarkerProperty simpleClusterMarkerProperty = SimpleClusterMarkerProperty.builder()
     * .color("color")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-simpleclustermarker.html)
     */
    public inline fun cfnTemplateSimpleClusterMarkerProperty(
        block: CfnTemplateSimpleClusterMarkerPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SimpleClusterMarkerProperty {
        val builder = CfnTemplateSimpleClusterMarkerPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SliderControlDisplayOptionsProperty sliderControlDisplayOptionsProperty =
     * SliderControlDisplayOptionsProperty.builder()
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-slidercontroldisplayoptions.html)
     */
    public inline fun cfnTemplateSliderControlDisplayOptionsProperty(
        block: CfnTemplateSliderControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SliderControlDisplayOptionsProperty {
        val builder = CfnTemplateSliderControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Options that determine the layout and display options of a chart's small multiples.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SmallMultiplesOptionsProperty smallMultiplesOptionsProperty =
     * SmallMultiplesOptionsProperty.builder()
     * .maxVisibleColumns(123)
     * .maxVisibleRows(123)
     * .panelConfiguration(PanelConfigurationProperty.builder()
     * .backgroundColor("backgroundColor")
     * .backgroundVisibility("backgroundVisibility")
     * .borderColor("borderColor")
     * .borderStyle("borderStyle")
     * .borderThickness("borderThickness")
     * .borderVisibility("borderVisibility")
     * .gutterSpacing("gutterSpacing")
     * .gutterVisibility("gutterVisibility")
     * .title(PanelTitleOptionsProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-smallmultiplesoptions.html)
     */
    public inline fun cfnTemplateSmallMultiplesOptionsProperty(
        block: CfnTemplateSmallMultiplesOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SmallMultiplesOptionsProperty {
        val builder = CfnTemplateSmallMultiplesOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of spacing (often a margin or padding).
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SpacingProperty spacingProperty = SpacingProperty.builder()
     * .bottom("bottom")
     * .left("left")
     * .right("right")
     * .top("top")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-spacing.html)
     */
    public inline fun cfnTemplateSpacingProperty(
        block: CfnTemplateSpacingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SpacingProperty {
        val builder = CfnTemplateSpacingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The default values of the `StringParameterDeclaration` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringDefaultValuesProperty stringDefaultValuesProperty = StringDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringdefaultvalues.html)
     */
    public inline fun cfnTemplateStringDefaultValuesProperty(
        block: CfnTemplateStringDefaultValuesPropertyDsl.() -> Unit = {}
    ): CfnTemplate.StringDefaultValuesProperty {
        val builder = CfnTemplateStringDefaultValuesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Formatting configuration for string fields.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringFormatConfigurationProperty stringFormatConfigurationProperty =
     * StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringformatconfiguration.html)
     */
    public inline fun cfnTemplateStringFormatConfigurationProperty(
        block: CfnTemplateStringFormatConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.StringFormatConfigurationProperty {
        val builder = CfnTemplateStringFormatConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A parameter declaration for the `String` data type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringParameterDeclarationProperty stringParameterDeclarationProperty =
     * StringParameterDeclarationProperty.builder()
     * .name("name")
     * .parameterValueType("parameterValueType")
     * // the properties below are optional
     * .defaultValues(StringDefaultValuesProperty.builder()
     * .dynamicValue(DynamicDefaultValueProperty.builder()
     * .defaultValueColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .groupNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .userNameColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .build())
     * .staticValues(List.of("staticValues"))
     * .build())
     * .mappedDataSetParameters(List.of(MappedDataSetParameterProperty.builder()
     * .dataSetIdentifier("dataSetIdentifier")
     * .dataSetParameterName("dataSetParameterName")
     * .build()))
     * .valueWhenUnset(StringValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringparameterdeclaration.html)
     */
    public inline fun cfnTemplateStringParameterDeclarationProperty(
        block: CfnTemplateStringParameterDeclarationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.StringParameterDeclarationProperty {
        val builder = CfnTemplateStringParameterDeclarationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration that defines the default value of a `String` parameter when a value has not
     * been set.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * StringValueWhenUnsetConfigurationProperty stringValueWhenUnsetConfigurationProperty =
     * StringValueWhenUnsetConfigurationProperty.builder()
     * .customValue("customValue")
     * .valueWhenUnsetOption("valueWhenUnsetOption")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringvaluewhenunsetconfiguration.html)
     */
    public inline fun cfnTemplateStringValueWhenUnsetConfigurationProperty(
        block: CfnTemplateStringValueWhenUnsetConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.StringValueWhenUnsetConfigurationProperty {
        val builder = CfnTemplateStringValueWhenUnsetConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The subtotal options.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SubtotalOptionsProperty subtotalOptionsProperty = SubtotalOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fieldLevel("fieldLevel")
     * .fieldLevelOptions(List.of(PivotTableFieldSubtotalOptionsProperty.builder()
     * .fieldId("fieldId")
     * .build()))
     * .metricHeaderCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .totalCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .totalsVisibility("totalsVisibility")
     * .valueCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-subtotaloptions.html)
     */
    public inline fun cfnTemplateSubtotalOptionsProperty(
        block: CfnTemplateSubtotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.SubtotalOptionsProperty {
        val builder = CfnTemplateSubtotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field well for the table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableAggregatedFieldWellsProperty tableAggregatedFieldWellsProperty =
     * TableAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .values(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateTableAggregatedFieldWellsProperty(
        block: CfnTemplateTableAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableAggregatedFieldWellsProperty {
        val builder = CfnTemplateTableAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The border options for a table border.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableBorderOptionsProperty tableBorderOptionsProperty = TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableborderoptions.html)
     */
    public inline fun cfnTemplateTableBorderOptionsProperty(
        block: CfnTemplateTableBorderOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableBorderOptionsProperty {
        val builder = CfnTemplateTableBorderOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The cell conditional formatting option for a table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableCellConditionalFormattingProperty tableCellConditionalFormattingProperty =
     * TableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellconditionalformatting.html)
     */
    public inline fun cfnTemplateTableCellConditionalFormattingProperty(
        block: CfnTemplateTableCellConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableCellConditionalFormattingProperty {
        val builder = CfnTemplateTableCellConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sizing options for the table image configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableCellImageSizingConfigurationProperty tableCellImageSizingConfigurationProperty =
     * TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellimagesizingconfiguration.html)
     */
    public inline fun cfnTemplateTableCellImageSizingConfigurationProperty(
        block: CfnTemplateTableCellImageSizingConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableCellImageSizingConfigurationProperty {
        val builder = CfnTemplateTableCellImageSizingConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The table cell style for a cell in pivot table or table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableCellStyleProperty tableCellStyleProperty = TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellstyle.html)
     */
    public inline fun cfnTemplateTableCellStyleProperty(
        block: CfnTemplateTableCellStylePropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableCellStyleProperty {
        val builder = CfnTemplateTableCellStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Conditional formatting options for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableConditionalFormattingOptionProperty tableConditionalFormattingOptionProperty =
     * TableConditionalFormattingOptionProperty.builder()
     * .cell(TableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .row(TableRowConditionalFormattingProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconditionalformattingoption.html)
     */
    public inline fun cfnTemplateTableConditionalFormattingOptionProperty(
        block: CfnTemplateTableConditionalFormattingOptionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableConditionalFormattingOptionProperty {
        val builder = CfnTemplateTableConditionalFormattingOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for a `PivotTableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableConditionalFormattingProperty tableConditionalFormattingProperty =
     * TableConditionalFormattingProperty.builder()
     * .conditionalFormattingOptions(List.of(TableConditionalFormattingOptionProperty.builder()
     * .cell(TableCellConditionalFormattingProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .textFormat(TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build())
     * .row(TableRowConditionalFormattingProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconditionalformatting.html)
     */
    public inline fun cfnTemplateTableConditionalFormattingProperty(
        block: CfnTemplateTableConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableConditionalFormattingProperty {
        val builder = CfnTemplateTableConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a `TableVisual` .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconfiguration.html)
     */
    public inline fun cfnTemplateTableConfigurationProperty(
        block: CfnTemplateTableConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableConfigurationProperty {
        val builder = CfnTemplateTableConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The custom icon content for the table link content configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldCustomIconContentProperty tableFieldCustomIconContentProperty =
     * TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldcustomiconcontent.html)
     */
    public inline fun cfnTemplateTableFieldCustomIconContentProperty(
        block: CfnTemplateTableFieldCustomIconContentPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableFieldCustomIconContentProperty {
        val builder = CfnTemplateTableFieldCustomIconContentPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The custom text content (value, font configuration) for the table link content configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldCustomTextContentProperty tableFieldCustomTextContentProperty =
     * TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldcustomtextcontent.html)
     */
    public inline fun cfnTemplateTableFieldCustomTextContentProperty(
        block: CfnTemplateTableFieldCustomTextContentPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableFieldCustomTextContentProperty {
        val builder = CfnTemplateTableFieldCustomTextContentPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The image configuration of a table field URL.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldImageConfigurationProperty tableFieldImageConfigurationProperty =
     * TableFieldImageConfigurationProperty.builder()
     * .sizingOptions(TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldimageconfiguration.html)
     */
    public inline fun cfnTemplateTableFieldImageConfigurationProperty(
        block: CfnTemplateTableFieldImageConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableFieldImageConfigurationProperty {
        val builder = CfnTemplateTableFieldImageConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The link configuration of a table field URL.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldLinkConfigurationProperty tableFieldLinkConfigurationProperty =
     * TableFieldLinkConfigurationProperty.builder()
     * .content(TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build())
     * .target("target")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldlinkconfiguration.html)
     */
    public inline fun cfnTemplateTableFieldLinkConfigurationProperty(
        block: CfnTemplateTableFieldLinkConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableFieldLinkConfigurationProperty {
        val builder = CfnTemplateTableFieldLinkConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The URL content (text, icon) for the table link configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldLinkContentConfigurationProperty tableFieldLinkContentConfigurationProperty =
     * TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldlinkcontentconfiguration.html)
     */
    public inline fun cfnTemplateTableFieldLinkContentConfigurationProperty(
        block: CfnTemplateTableFieldLinkContentConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableFieldLinkContentConfigurationProperty {
        val builder = CfnTemplateTableFieldLinkContentConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options for a table field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldOptionProperty tableFieldOptionProperty = TableFieldOptionProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .customLabel("customLabel")
     * .urlStyling(TableFieldURLConfigurationProperty.builder()
     * .imageConfiguration(TableFieldImageConfigurationProperty.builder()
     * .sizingOptions(TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build())
     * .build())
     * .linkConfiguration(TableFieldLinkConfigurationProperty.builder()
     * .content(TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build())
     * .target("target")
     * .build())
     * .build())
     * .visibility("visibility")
     * .width("width")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldoption.html)
     */
    public inline fun cfnTemplateTableFieldOptionProperty(
        block: CfnTemplateTableFieldOptionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableFieldOptionProperty {
        val builder = CfnTemplateTableFieldOptionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldOptionsProperty tableFieldOptionsProperty = TableFieldOptionsProperty.builder()
     * .order(List.of("order"))
     * .selectedFieldOptions(List.of(TableFieldOptionProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .customLabel("customLabel")
     * .urlStyling(TableFieldURLConfigurationProperty.builder()
     * .imageConfiguration(TableFieldImageConfigurationProperty.builder()
     * .sizingOptions(TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build())
     * .build())
     * .linkConfiguration(TableFieldLinkConfigurationProperty.builder()
     * .content(TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build())
     * .target("target")
     * .build())
     * .build())
     * .visibility("visibility")
     * .width("width")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldoptions.html)
     */
    public inline fun cfnTemplateTableFieldOptionsProperty(
        block: CfnTemplateTableFieldOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableFieldOptionsProperty {
        val builder = CfnTemplateTableFieldOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The URL configuration for a table field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableFieldURLConfigurationProperty tableFieldURLConfigurationProperty =
     * TableFieldURLConfigurationProperty.builder()
     * .imageConfiguration(TableFieldImageConfigurationProperty.builder()
     * .sizingOptions(TableCellImageSizingConfigurationProperty.builder()
     * .tableCellImageScalingConfiguration("tableCellImageScalingConfiguration")
     * .build())
     * .build())
     * .linkConfiguration(TableFieldLinkConfigurationProperty.builder()
     * .content(TableFieldLinkContentConfigurationProperty.builder()
     * .customIconContent(TableFieldCustomIconContentProperty.builder()
     * .icon("icon")
     * .build())
     * .customTextContent(TableFieldCustomTextContentProperty.builder()
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * // the properties below are optional
     * .value("value")
     * .build())
     * .build())
     * .target("target")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldurlconfiguration.html)
     */
    public inline fun cfnTemplateTableFieldURLConfigurationProperty(
        block: CfnTemplateTableFieldURLConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableFieldURLConfigurationProperty {
        val builder = CfnTemplateTableFieldURLConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells for a table visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldwells.html)
     */
    public inline fun cfnTemplateTableFieldWellsProperty(
        block: CfnTemplateTableFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableFieldWellsProperty {
        val builder = CfnTemplateTableFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The inline visualization of a specific type to display within a chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableInlineVisualizationProperty tableInlineVisualizationProperty =
     * TableInlineVisualizationProperty.builder()
     * .dataBars(DataBarsOptionsProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .negativeColor("negativeColor")
     * .positiveColor("positiveColor")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableinlinevisualization.html)
     */
    public inline fun cfnTemplateTableInlineVisualizationProperty(
        block: CfnTemplateTableInlineVisualizationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableInlineVisualizationProperty {
        val builder = CfnTemplateTableInlineVisualizationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The table options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableOptionsProperty tableOptionsProperty = TableOptionsProperty.builder()
     * .cellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .headerStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .orientation("orientation")
     * .rowAlternateColorOptions(RowAlternateColorOptionsProperty.builder()
     * .rowAlternateColors(List.of("rowAlternateColors"))
     * .status("status")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableoptions.html)
     */
    public inline fun cfnTemplateTableOptionsProperty(
        block: CfnTemplateTableOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableOptionsProperty {
        val builder = CfnTemplateTableOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The paginated report options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TablePaginatedReportOptionsProperty tablePaginatedReportOptionsProperty =
     * TablePaginatedReportOptionsProperty.builder()
     * .overflowColumnHeaderVisibility("overflowColumnHeaderVisibility")
     * .verticalOverflowVisibility("verticalOverflowVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablepaginatedreportoptions.html)
     */
    public inline fun cfnTemplateTablePaginatedReportOptionsProperty(
        block: CfnTemplateTablePaginatedReportOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TablePaginatedReportOptionsProperty {
        val builder = CfnTemplateTablePaginatedReportOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting of a table row.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableRowConditionalFormattingProperty tableRowConditionalFormattingProperty =
     * TableRowConditionalFormattingProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablerowconditionalformatting.html)
     */
    public inline fun cfnTemplateTableRowConditionalFormattingProperty(
        block: CfnTemplateTableRowConditionalFormattingPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableRowConditionalFormattingProperty {
        val builder = CfnTemplateTableRowConditionalFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The side border options for a table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableSideBorderOptionsProperty tableSideBorderOptionsProperty =
     * TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablesideborderoptions.html)
     */
    public inline fun cfnTemplateTableSideBorderOptionsProperty(
        block: CfnTemplateTableSideBorderOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableSideBorderOptionsProperty {
        val builder = CfnTemplateTableSideBorderOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration for a `TableVisual` .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableSortConfigurationProperty tableSortConfigurationProperty =
     * TableSortConfigurationProperty.builder()
     * .paginationConfiguration(PaginationConfigurationProperty.builder()
     * .pageNumber(123)
     * .pageSize(123)
     * .build())
     * .rowSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablesortconfiguration.html)
     */
    public inline fun cfnTemplateTableSortConfigurationProperty(
        block: CfnTemplateTableSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableSortConfigurationProperty {
        val builder = CfnTemplateTableSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The unaggregated field well for the table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TableUnaggregatedFieldWellsProperty tableUnaggregatedFieldWellsProperty =
     * TableUnaggregatedFieldWellsProperty.builder()
     * .values(List.of(UnaggregatedFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(FormatConfigurationProperty.builder()
     * .dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .numberFormatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .stringFormatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableunaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateTableUnaggregatedFieldWellsProperty(
        block: CfnTemplateTableUnaggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableUnaggregatedFieldWellsProperty {
        val builder = CfnTemplateTableUnaggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A table visual.
     *
     * For more information, see
     * [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablevisual.html)
     */
    public inline fun cfnTemplateTableVisualProperty(
        block: CfnTemplateTableVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TableVisualProperty {
        val builder = CfnTemplateTableVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * List of errors that occurred when the template version creation failed.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TemplateErrorProperty templateErrorProperty = TemplateErrorProperty.builder()
     * .message("message")
     * .type("type")
     * .violatedEntities(List.of(EntityProperty.builder()
     * .path("path")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateerror.html)
     */
    public inline fun cfnTemplateTemplateErrorProperty(
        block: CfnTemplateTemplateErrorPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TemplateErrorProperty {
        val builder = CfnTemplateTemplateErrorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The source analysis of the template.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TemplateSourceAnalysisProperty templateSourceAnalysisProperty =
     * TemplateSourceAnalysisProperty.builder()
     * .arn("arn")
     * .dataSetReferences(List.of(DataSetReferenceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .dataSetPlaceholder("dataSetPlaceholder")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templatesourceanalysis.html)
     */
    public inline fun cfnTemplateTemplateSourceAnalysisProperty(
        block: CfnTemplateTemplateSourceAnalysisPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TemplateSourceAnalysisProperty {
        val builder = CfnTemplateTemplateSourceAnalysisPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The source entity of the template.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TemplateSourceEntityProperty templateSourceEntityProperty =
     * TemplateSourceEntityProperty.builder()
     * .sourceAnalysis(TemplateSourceAnalysisProperty.builder()
     * .arn("arn")
     * .dataSetReferences(List.of(DataSetReferenceProperty.builder()
     * .dataSetArn("dataSetArn")
     * .dataSetPlaceholder("dataSetPlaceholder")
     * .build()))
     * .build())
     * .sourceTemplate(TemplateSourceTemplateProperty.builder()
     * .arn("arn")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templatesourceentity.html)
     */
    public inline fun cfnTemplateTemplateSourceEntityProperty(
        block: CfnTemplateTemplateSourceEntityPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TemplateSourceEntityProperty {
        val builder = CfnTemplateTemplateSourceEntityPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The source template of the template.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TemplateSourceTemplateProperty templateSourceTemplateProperty =
     * TemplateSourceTemplateProperty.builder()
     * .arn("arn")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templatesourcetemplate.html)
     */
    public inline fun cfnTemplateTemplateSourceTemplateProperty(
        block: CfnTemplateTemplateSourceTemplatePropertyDsl.() -> Unit = {}
    ): CfnTemplate.TemplateSourceTemplateProperty {
        val builder = CfnTemplateTemplateSourceTemplatePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The detailed definition of a template.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversiondefinition.html)
     */
    public inline fun cfnTemplateTemplateVersionDefinitionProperty(
        block: CfnTemplateTemplateVersionDefinitionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TemplateVersionDefinitionProperty {
        val builder = CfnTemplateTemplateVersionDefinitionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A version of a template.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TemplateVersionProperty templateVersionProperty = TemplateVersionProperty.builder()
     * .createdTime("createdTime")
     * .dataSetConfigurations(List.of(DataSetConfigurationProperty.builder()
     * .columnGroupSchemaList(List.of(ColumnGroupSchemaProperty.builder()
     * .columnGroupColumnSchemaList(List.of(ColumnGroupColumnSchemaProperty.builder()
     * .name("name")
     * .build()))
     * .name("name")
     * .build()))
     * .dataSetSchema(DataSetSchemaProperty.builder()
     * .columnSchemaList(List.of(ColumnSchemaProperty.builder()
     * .dataType("dataType")
     * .geographicRole("geographicRole")
     * .name("name")
     * .build()))
     * .build())
     * .placeholder("placeholder")
     * .build()))
     * .description("description")
     * .errors(List.of(TemplateErrorProperty.builder()
     * .message("message")
     * .type("type")
     * .violatedEntities(List.of(EntityProperty.builder()
     * .path("path")
     * .build()))
     * .build()))
     * .sheets(List.of(SheetProperty.builder()
     * .name("name")
     * .sheetId("sheetId")
     * .build()))
     * .sourceEntityArn("sourceEntityArn")
     * .status("status")
     * .themeArn("themeArn")
     * .versionNumber(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversion.html)
     */
    public inline fun cfnTemplateTemplateVersionProperty(
        block: CfnTemplateTemplateVersionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TemplateVersionProperty {
        val builder = CfnTemplateTemplateVersionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TextAreaControlDisplayOptionsProperty textAreaControlDisplayOptionsProperty =
     * TextAreaControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textareacontroldisplayoptions.html)
     */
    public inline fun cfnTemplateTextAreaControlDisplayOptionsProperty(
        block: CfnTemplateTextAreaControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TextAreaControlDisplayOptionsProperty {
        val builder = CfnTemplateTextAreaControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The conditional formatting for the text.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TextConditionalFormatProperty textConditionalFormatProperty =
     * TextConditionalFormatProperty.builder()
     * .backgroundColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .icon(ConditionalFormattingIconProperty.builder()
     * .customCondition(ConditionalFormattingCustomIconConditionProperty.builder()
     * .expression("expression")
     * .iconOptions(ConditionalFormattingCustomIconOptionsProperty.builder()
     * .icon("icon")
     * .unicodeIcon("unicodeIcon")
     * .build())
     * // the properties below are optional
     * .color("color")
     * .displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty.builder()
     * .iconDisplayOption("iconDisplayOption")
     * .build())
     * .build())
     * .iconSet(ConditionalFormattingIconSetProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .iconSetType("iconSetType")
     * .build())
     * .build())
     * .textColor(ConditionalFormattingColorProperty.builder()
     * .gradient(ConditionalFormattingGradientColorProperty.builder()
     * .color(GradientColorProperty.builder()
     * .stops(List.of(GradientStopProperty.builder()
     * .gradientOffset(123)
     * // the properties below are optional
     * .color("color")
     * .dataValue(123)
     * .build()))
     * .build())
     * .expression("expression")
     * .build())
     * .solid(ConditionalFormattingSolidColorProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .color("color")
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textconditionalformat.html)
     */
    public inline fun cfnTemplateTextConditionalFormatProperty(
        block: CfnTemplateTextConditionalFormatPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TextConditionalFormatProperty {
        val builder = CfnTemplateTextConditionalFormatPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of the placeholder options in a text control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TextControlPlaceholderOptionsProperty textControlPlaceholderOptionsProperty =
     * TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textcontrolplaceholderoptions.html)
     */
    public inline fun cfnTemplateTextControlPlaceholderOptionsProperty(
        block: CfnTemplateTextControlPlaceholderOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TextControlPlaceholderOptionsProperty {
        val builder = CfnTemplateTextControlPlaceholderOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options of a control.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TextFieldControlDisplayOptionsProperty textFieldControlDisplayOptionsProperty =
     * TextFieldControlDisplayOptionsProperty.builder()
     * .placeholderOptions(TextControlPlaceholderOptionsProperty.builder()
     * .visibility("visibility")
     * .build())
     * .titleOptions(LabelOptionsProperty.builder()
     * .customLabel("customLabel")
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textfieldcontroldisplayoptions.html)
     */
    public inline fun cfnTemplateTextFieldControlDisplayOptionsProperty(
        block: CfnTemplateTextFieldControlDisplayOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TextFieldControlDisplayOptionsProperty {
        val builder = CfnTemplateTextFieldControlDisplayOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the thousands separator configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ThousandSeparatorOptionsProperty thousandSeparatorOptionsProperty =
     * ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-thousandseparatoroptions.html)
     */
    public inline fun cfnTemplateThousandSeparatorOptionsProperty(
        block: CfnTemplateThousandSeparatorOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.ThousandSeparatorOptionsProperty {
        val builder = CfnTemplateThousandSeparatorOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The forecast properties setup of a forecast in the line chart.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeBasedForecastPropertiesProperty timeBasedForecastPropertiesProperty =
     * TimeBasedForecastPropertiesProperty.builder()
     * .lowerBoundary(123)
     * .periodsBackward(123)
     * .periodsForward(123)
     * .predictionInterval(123)
     * .seasonality(123)
     * .upperBoundary(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timebasedforecastproperties.html)
     */
    public inline fun cfnTemplateTimeBasedForecastPropertiesProperty(
        block: CfnTemplateTimeBasedForecastPropertiesPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TimeBasedForecastPropertiesProperty {
        val builder = CfnTemplateTimeBasedForecastPropertiesPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `TimeEqualityFilter` filters values that are equal to a given value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeEqualityFilterProperty timeEqualityFilterProperty = TimeEqualityFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .value("value")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timeequalityfilter.html)
     */
    public inline fun cfnTemplateTimeEqualityFilterProperty(
        block: CfnTemplateTimeEqualityFilterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TimeEqualityFilterProperty {
        val builder = CfnTemplateTimeEqualityFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The time range drill down filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeRangeDrillDownFilterProperty timeRangeDrillDownFilterProperty =
     * TimeRangeDrillDownFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .rangeMaximum("rangeMaximum")
     * .rangeMinimum("rangeMinimum")
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangedrilldownfilter.html)
     */
    public inline fun cfnTemplateTimeRangeDrillDownFilterProperty(
        block: CfnTemplateTimeRangeDrillDownFilterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TimeRangeDrillDownFilterProperty {
        val builder = CfnTemplateTimeRangeDrillDownFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `TimeRangeFilter` filters values that are between two specified values.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeRangeFilterProperty timeRangeFilterProperty = TimeRangeFilterProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * .nullOption("nullOption")
     * // the properties below are optional
     * .excludePeriodConfiguration(ExcludePeriodConfigurationProperty.builder()
     * .amount(123)
     * .granularity("granularity")
     * // the properties below are optional
     * .status("status")
     * .build())
     * .includeMaximum(false)
     * .includeMinimum(false)
     * .rangeMaximumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .rangeMinimumValue(TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build())
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefilter.html)
     */
    public inline fun cfnTemplateTimeRangeFilterProperty(
        block: CfnTemplateTimeRangeFilterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TimeRangeFilterProperty {
        val builder = CfnTemplateTimeRangeFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The value of a time range filter.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TimeRangeFilterValueProperty timeRangeFilterValueProperty =
     * TimeRangeFilterValueProperty.builder()
     * .parameter("parameter")
     * .rollingDate(RollingDateConfigurationProperty.builder()
     * .expression("expression")
     * // the properties below are optional
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .staticValue("staticValue")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefiltervalue.html)
     */
    public inline fun cfnTemplateTimeRangeFilterValueProperty(
        block: CfnTemplateTimeRangeFilterValuePropertyDsl.() -> Unit = {}
    ): CfnTemplate.TimeRangeFilterValueProperty {
        val builder = CfnTemplateTimeRangeFilterValuePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The tooltip.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TooltipItemProperty tooltipItemProperty = TooltipItemProperty.builder()
     * .columnTooltipItem(ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .fieldTooltipItem(FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tooltipitem.html)
     */
    public inline fun cfnTemplateTooltipItemProperty(
        block: CfnTemplateTooltipItemPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TooltipItemProperty {
        val builder = CfnTemplateTooltipItemPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options for the visual tooltip.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TooltipOptionsProperty tooltipOptionsProperty = TooltipOptionsProperty.builder()
     * .fieldBasedTooltip(FieldBasedTooltipProperty.builder()
     * .aggregationVisibility("aggregationVisibility")
     * .tooltipFields(List.of(TooltipItemProperty.builder()
     * .columnTooltipItem(ColumnTooltipItemProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregation(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .fieldTooltipItem(FieldTooltipItemProperty.builder()
     * .fieldId("fieldId")
     * // the properties below are optional
     * .label("label")
     * .visibility("visibility")
     * .build())
     * .build()))
     * .tooltipTitleType("tooltipTitleType")
     * .build())
     * .selectedTooltipType("selectedTooltipType")
     * .tooltipVisibility("tooltipVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tooltipoptions.html)
     */
    public inline fun cfnTemplateTooltipOptionsProperty(
        block: CfnTemplateTooltipOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TooltipOptionsProperty {
        val builder = CfnTemplateTooltipOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A `TopBottomFilter` filters values that are at the top or the bottom.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopBottomFilterProperty topBottomFilterProperty = TopBottomFilterProperty.builder()
     * .aggregationSortConfigurations(List.of(AggregationSortConfigurationProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sortDirection("sortDirection")
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build()))
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .filterId("filterId")
     * // the properties below are optional
     * .limit(123)
     * .parameterName("parameterName")
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomfilter.html)
     */
    public inline fun cfnTemplateTopBottomFilterProperty(
        block: CfnTemplateTopBottomFilterPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TopBottomFilterProperty {
        val builder = CfnTemplateTopBottomFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The top movers and bottom movers computation setup.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottommoverscomputation.html)
     */
    public inline fun cfnTemplateTopBottomMoversComputationProperty(
        block: CfnTemplateTopBottomMoversComputationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TopBottomMoversComputationProperty {
        val builder = CfnTemplateTopBottomMoversComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The top ranked and bottom ranked computation configuration.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomrankedcomputation.html)
     */
    public inline fun cfnTemplateTopBottomRankedComputationProperty(
        block: CfnTemplateTopBottomRankedComputationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TopBottomRankedComputationProperty {
        val builder = CfnTemplateTopBottomRankedComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The total aggregation computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TotalAggregationComputationProperty totalAggregationComputationProperty =
     * TotalAggregationComputationProperty.builder()
     * .computationId("computationId")
     * .value(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build())
     * // the properties below are optional
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totalaggregationcomputation.html)
     */
    public inline fun cfnTemplateTotalAggregationComputationProperty(
        block: CfnTemplateTotalAggregationComputationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TotalAggregationComputationProperty {
        val builder = CfnTemplateTotalAggregationComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The total options for a table visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TotalOptionsProperty totalOptionsProperty = TotalOptionsProperty.builder()
     * .customLabel("customLabel")
     * .placement("placement")
     * .scrollStatus("scrollStatus")
     * .totalCellStyle(TableCellStyleProperty.builder()
     * .backgroundColor("backgroundColor")
     * .border(GlobalTableBorderOptionsProperty.builder()
     * .sideSpecificBorder(TableSideBorderOptionsProperty.builder()
     * .bottom(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerHorizontal(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .innerVertical(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .left(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .right(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .top(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .uniformBorder(TableBorderOptionsProperty.builder()
     * .color("color")
     * .style("style")
     * .thickness(123)
     * .build())
     * .build())
     * .fontConfiguration(FontConfigurationProperty.builder()
     * .fontColor("fontColor")
     * .fontDecoration("fontDecoration")
     * .fontSize(FontSizeProperty.builder()
     * .relative("relative")
     * .build())
     * .fontStyle("fontStyle")
     * .fontWeight(FontWeightProperty.builder()
     * .name("name")
     * .build())
     * .build())
     * .height(123)
     * .horizontalTextAlignment("horizontalTextAlignment")
     * .textWrap("textWrap")
     * .verticalTextAlignment("verticalTextAlignment")
     * .visibility("visibility")
     * .build())
     * .totalsVisibility("totalsVisibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totaloptions.html)
     */
    public inline fun cfnTemplateTotalOptionsProperty(
        block: CfnTemplateTotalOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TotalOptionsProperty {
        val builder = CfnTemplateTotalOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Aggregated field wells of a tree map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateTreeMapAggregatedFieldWellsProperty(
        block: CfnTemplateTreeMapAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TreeMapAggregatedFieldWellsProperty {
        val builder = CfnTemplateTreeMapAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a tree map.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapconfiguration.html)
     */
    public inline fun cfnTemplateTreeMapConfigurationProperty(
        block: CfnTemplateTreeMapConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TreeMapConfigurationProperty {
        val builder = CfnTemplateTreeMapConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a tree map.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapfieldwells.html)
     */
    public inline fun cfnTemplateTreeMapFieldWellsProperty(
        block: CfnTemplateTreeMapFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TreeMapFieldWellsProperty {
        val builder = CfnTemplateTreeMapFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a tree map.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TreeMapSortConfigurationProperty treeMapSortConfigurationProperty =
     * TreeMapSortConfigurationProperty.builder()
     * .treeMapGroupItemsLimitConfiguration(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .treeMapSort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapsortconfiguration.html)
     */
    public inline fun cfnTemplateTreeMapSortConfigurationProperty(
        block: CfnTemplateTreeMapSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TreeMapSortConfigurationProperty {
        val builder = CfnTemplateTreeMapSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A tree map.
     *
     * For more information, see
     * [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapvisual.html)
     */
    public inline fun cfnTemplateTreeMapVisualProperty(
        block: CfnTemplateTreeMapVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TreeMapVisualProperty {
        val builder = CfnTemplateTreeMapVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of trend arrows in a KPI visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TrendArrowOptionsProperty trendArrowOptionsProperty = TrendArrowOptionsProperty.builder()
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-trendarrowoptions.html)
     */
    public inline fun cfnTemplateTrendArrowOptionsProperty(
        block: CfnTemplateTrendArrowOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.TrendArrowOptionsProperty {
        val builder = CfnTemplateTrendArrowOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The unaggregated field for a table.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * UnaggregatedFieldProperty unaggregatedFieldProperty = UnaggregatedFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(FormatConfigurationProperty.builder()
     * .dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .numberFormatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .stringFormatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-unaggregatedfield.html)
     */
    public inline fun cfnTemplateUnaggregatedFieldProperty(
        block: CfnTemplateUnaggregatedFieldPropertyDsl.() -> Unit = {}
    ): CfnTemplate.UnaggregatedFieldProperty {
        val builder = CfnTemplateUnaggregatedFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The unique values computation configuration.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * UniqueValuesComputationProperty uniqueValuesComputationProperty =
     * UniqueValuesComputationProperty.builder()
     * .category(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build())
     * .computationId("computationId")
     * // the properties below are optional
     * .name("name")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-uniquevaluescomputation.html)
     */
    public inline fun cfnTemplateUniqueValuesComputationProperty(
        block: CfnTemplateUniqueValuesComputationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.UniqueValuesComputationProperty {
        val builder = CfnTemplateUniqueValuesComputationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The range options for the data zoom scroll bar.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisibleRangeOptionsProperty visibleRangeOptionsProperty = VisibleRangeOptionsProperty.builder()
     * .percentRange(PercentVisibleRangeProperty.builder()
     * .from(123)
     * .to(123)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visiblerangeoptions.html)
     */
    public inline fun cfnTemplateVisibleRangeOptionsProperty(
        block: CfnTemplateVisibleRangeOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.VisibleRangeOptionsProperty {
        val builder = CfnTemplateVisibleRangeOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The operation that is defined by the custom action.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualCustomActionOperationProperty visualCustomActionOperationProperty =
     * VisualCustomActionOperationProperty.builder()
     * .filterOperation(CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build())
     * .navigationOperation(CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build())
     * .setParametersOperation(CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build())
     * .urlOperation(CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomactionoperation.html)
     */
    public inline fun cfnTemplateVisualCustomActionOperationProperty(
        block: CfnTemplateVisualCustomActionOperationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.VisualCustomActionOperationProperty {
        val builder = CfnTemplateVisualCustomActionOperationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A custom action defined on a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualCustomActionProperty visualCustomActionProperty = VisualCustomActionProperty.builder()
     * .actionOperations(List.of(VisualCustomActionOperationProperty.builder()
     * .filterOperation(CustomActionFilterOperationProperty.builder()
     * .selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty.builder()
     * .selectedColumns(List.of(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build()))
     * .selectedFieldOptions("selectedFieldOptions")
     * .selectedFields(List.of("selectedFields"))
     * .build())
     * .targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty.builder()
     * .sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty.builder()
     * .targetVisualOptions("targetVisualOptions")
     * .targetVisuals(List.of("targetVisuals"))
     * .build())
     * .build())
     * .build())
     * .navigationOperation(CustomActionNavigationOperationProperty.builder()
     * .localNavigationConfiguration(LocalNavigationConfigurationProperty.builder()
     * .targetSheetId("targetSheetId")
     * .build())
     * .build())
     * .setParametersOperation(CustomActionSetParametersOperationProperty.builder()
     * .parameterValueConfigurations(List.of(SetParameterValueConfigurationProperty.builder()
     * .destinationParameterName("destinationParameterName")
     * .value(DestinationParameterValueConfigurationProperty.builder()
     * .customValuesConfiguration(CustomValuesConfigurationProperty.builder()
     * .customValues(CustomParameterValuesProperty.builder()
     * .dateTimeValues(List.of("dateTimeValues"))
     * .decimalValues(List.of(123))
     * .integerValues(List.of(123))
     * .stringValues(List.of("stringValues"))
     * .build())
     * // the properties below are optional
     * .includeNullValue(false)
     * .build())
     * .selectAllValueOptions("selectAllValueOptions")
     * .sourceColumn(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .sourceField("sourceField")
     * .sourceParameterName("sourceParameterName")
     * .build())
     * .build()))
     * .build())
     * .urlOperation(CustomActionURLOperationProperty.builder()
     * .urlTarget("urlTarget")
     * .urlTemplate("urlTemplate")
     * .build())
     * .build()))
     * .customActionId("customActionId")
     * .name("name")
     * .trigger("trigger")
     * // the properties below are optional
     * .status("status")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomaction.html)
     */
    public inline fun cfnTemplateVisualCustomActionProperty(
        block: CfnTemplateVisualCustomActionPropertyDsl.() -> Unit = {}
    ): CfnTemplate.VisualCustomActionProperty {
        val builder = CfnTemplateVisualCustomActionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The visual display options for the visual palette.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualPaletteProperty visualPaletteProperty = VisualPaletteProperty.builder()
     * .chartColor("chartColor")
     * .colorMap(List.of(DataPathColorProperty.builder()
     * .color("color")
     * .element(DataPathValueProperty.builder()
     * .fieldId("fieldId")
     * .fieldValue("fieldValue")
     * .build())
     * // the properties below are optional
     * .timeGranularity("timeGranularity")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualpalette.html)
     */
    public inline fun cfnTemplateVisualPaletteProperty(
        block: CfnTemplateVisualPalettePropertyDsl.() -> Unit = {}
    ): CfnTemplate.VisualPaletteProperty {
        val builder = CfnTemplateVisualPalettePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A visual displayed on a sheet in an analysis, dashboard, or template.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html)
     */
    public inline fun cfnTemplateVisualProperty(
        block: CfnTemplateVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.VisualProperty {
        val builder = CfnTemplateVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The subtitle label options for a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualSubtitleLabelOptionsProperty visualSubtitleLabelOptionsProperty =
     * VisualSubtitleLabelOptionsProperty.builder()
     * .formatText(LongFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build())
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualsubtitlelabeloptions.html)
     */
    public inline fun cfnTemplateVisualSubtitleLabelOptionsProperty(
        block: CfnTemplateVisualSubtitleLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.VisualSubtitleLabelOptionsProperty {
        val builder = CfnTemplateVisualSubtitleLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The title label options for a visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * VisualTitleLabelOptionsProperty visualTitleLabelOptionsProperty =
     * VisualTitleLabelOptionsProperty.builder()
     * .formatText(ShortFormatTextProperty.builder()
     * .plainText("plainText")
     * .richText("richText")
     * .build())
     * .visibility("visibility")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualtitlelabeloptions.html)
     */
    public inline fun cfnTemplateVisualTitleLabelOptionsProperty(
        block: CfnTemplateVisualTitleLabelOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.VisualTitleLabelOptionsProperty {
        val builder = CfnTemplateVisualTitleLabelOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a waterfall visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateWaterfallChartAggregatedFieldWellsProperty(
        block: CfnTemplateWaterfallChartAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WaterfallChartAggregatedFieldWellsProperty {
        val builder = CfnTemplateWaterfallChartAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration for a waterfall visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartconfiguration.html)
     */
    public inline fun cfnTemplateWaterfallChartConfigurationProperty(
        block: CfnTemplateWaterfallChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WaterfallChartConfigurationProperty {
        val builder = CfnTemplateWaterfallChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field well configuration of a waterfall visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartfieldwells.html)
     */
    public inline fun cfnTemplateWaterfallChartFieldWellsProperty(
        block: CfnTemplateWaterfallChartFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WaterfallChartFieldWellsProperty {
        val builder = CfnTemplateWaterfallChartFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The options that determine the presentation of a waterfall visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WaterfallChartOptionsProperty waterfallChartOptionsProperty =
     * WaterfallChartOptionsProperty.builder()
     * .totalBarLabel("totalBarLabel")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartoptions.html)
     */
    public inline fun cfnTemplateWaterfallChartOptionsProperty(
        block: CfnTemplateWaterfallChartOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WaterfallChartOptionsProperty {
        val builder = CfnTemplateWaterfallChartOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a waterfall visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WaterfallChartSortConfigurationProperty waterfallChartSortConfigurationProperty =
     * WaterfallChartSortConfigurationProperty.builder()
     * .breakdownItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartsortconfiguration.html)
     */
    public inline fun cfnTemplateWaterfallChartSortConfigurationProperty(
        block: CfnTemplateWaterfallChartSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WaterfallChartSortConfigurationProperty {
        val builder = CfnTemplateWaterfallChartSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A waterfall chart.
     *
     * For more information, see
     * [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallvisual.html)
     */
    public inline fun cfnTemplateWaterfallVisualProperty(
        block: CfnTemplateWaterfallVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WaterfallVisualProperty {
        val builder = CfnTemplateWaterfallVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Provides the forecast to meet the target for a particular date.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WhatIfPointScenarioProperty whatIfPointScenarioProperty = WhatIfPointScenarioProperty.builder()
     * .date("date")
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-whatifpointscenario.html)
     */
    public inline fun cfnTemplateWhatIfPointScenarioProperty(
        block: CfnTemplateWhatIfPointScenarioPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WhatIfPointScenarioProperty {
        val builder = CfnTemplateWhatIfPointScenarioPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Provides the forecast to meet the target for a particular date range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WhatIfRangeScenarioProperty whatIfRangeScenarioProperty = WhatIfRangeScenarioProperty.builder()
     * .endDate("endDate")
     * .startDate("startDate")
     * .value(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-whatifrangescenario.html)
     */
    public inline fun cfnTemplateWhatIfRangeScenarioProperty(
        block: CfnTemplateWhatIfRangeScenarioPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WhatIfRangeScenarioProperty {
        val builder = CfnTemplateWhatIfRangeScenarioPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The aggregated field wells of a word cloud.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WordCloudAggregatedFieldWellsProperty wordCloudAggregatedFieldWellsProperty =
     * WordCloudAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .size(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudaggregatedfieldwells.html)
     */
    public inline fun cfnTemplateWordCloudAggregatedFieldWellsProperty(
        block: CfnTemplateWordCloudAggregatedFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WordCloudAggregatedFieldWellsProperty {
        val builder = CfnTemplateWordCloudAggregatedFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The configuration of a word cloud visual.
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudchartconfiguration.html)
     */
    public inline fun cfnTemplateWordCloudChartConfigurationProperty(
        block: CfnTemplateWordCloudChartConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WordCloudChartConfigurationProperty {
        val builder = CfnTemplateWordCloudChartConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The field wells of a word cloud visual.
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WordCloudFieldWellsProperty wordCloudFieldWellsProperty = WordCloudFieldWellsProperty.builder()
     * .wordCloudAggregatedFieldWells(WordCloudAggregatedFieldWellsProperty.builder()
     * .groupBy(List.of(DimensionFieldProperty.builder()
     * .categoricalDimensionField(CategoricalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .dateDimensionField(DateDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .dateGranularity("dateGranularity")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .numericalDimensionField(NumericalDimensionFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .hierarchyId("hierarchyId")
     * .build())
     * .build()))
     * .size(List.of(MeasureFieldProperty.builder()
     * .calculatedMeasureField(CalculatedMeasureFieldProperty.builder()
     * .expression("expression")
     * .fieldId("fieldId")
     * .build())
     * .categoricalMeasureField(CategoricalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(StringFormatConfigurationProperty.builder()
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .dateMeasureField(DateMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction("aggregationFunction")
     * .formatConfiguration(DateTimeFormatConfigurationProperty.builder()
     * .dateTimeFormat("dateTimeFormat")
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numericFormatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .numericalMeasureField(NumericalMeasureFieldProperty.builder()
     * .column(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * .fieldId("fieldId")
     * // the properties below are optional
     * .aggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .formatConfiguration(NumberFormatConfigurationProperty.builder()
     * .formatConfiguration(NumericFormatConfigurationProperty.builder()
     * .currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .symbol("symbol")
     * .build())
     * .numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .numberScale("numberScale")
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty.builder()
     * .decimalPlacesConfiguration(DecimalPlacesConfigurationProperty.builder()
     * .decimalPlaces(123)
     * .build())
     * .negativeValueConfiguration(NegativeValueConfigurationProperty.builder()
     * .displayMode("displayMode")
     * .build())
     * .nullValueFormatConfiguration(NullValueFormatConfigurationProperty.builder()
     * .nullString("nullString")
     * .build())
     * .prefix("prefix")
     * .separatorConfiguration(NumericSeparatorConfigurationProperty.builder()
     * .decimalSeparator("decimalSeparator")
     * .thousandsSeparator(ThousandSeparatorOptionsProperty.builder()
     * .symbol("symbol")
     * .visibility("visibility")
     * .build())
     * .build())
     * .suffix("suffix")
     * .build())
     * .build())
     * .build())
     * .build())
     * .build()))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudfieldwells.html)
     */
    public inline fun cfnTemplateWordCloudFieldWellsProperty(
        block: CfnTemplateWordCloudFieldWellsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WordCloudFieldWellsProperty {
        val builder = CfnTemplateWordCloudFieldWellsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The word cloud options for a word cloud visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WordCloudOptionsProperty wordCloudOptionsProperty = WordCloudOptionsProperty.builder()
     * .cloudLayout("cloudLayout")
     * .maximumStringLength(123)
     * .wordCasing("wordCasing")
     * .wordOrientation("wordOrientation")
     * .wordPadding("wordPadding")
     * .wordScaling("wordScaling")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudoptions.html)
     */
    public inline fun cfnTemplateWordCloudOptionsProperty(
        block: CfnTemplateWordCloudOptionsPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WordCloudOptionsProperty {
        val builder = CfnTemplateWordCloudOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The sort configuration of a word cloud visual.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * WordCloudSortConfigurationProperty wordCloudSortConfigurationProperty =
     * WordCloudSortConfigurationProperty.builder()
     * .categoryItemsLimit(ItemsLimitConfigurationProperty.builder()
     * .itemsLimit(123)
     * .otherCategories("otherCategories")
     * .build())
     * .categorySort(List.of(FieldSortOptionsProperty.builder()
     * .columnSort(ColumnSortProperty.builder()
     * .direction("direction")
     * .sortBy(ColumnIdentifierProperty.builder()
     * .columnName("columnName")
     * .dataSetIdentifier("dataSetIdentifier")
     * .build())
     * // the properties below are optional
     * .aggregationFunction(AggregationFunctionProperty.builder()
     * .categoricalAggregationFunction("categoricalAggregationFunction")
     * .dateAggregationFunction("dateAggregationFunction")
     * .numericalAggregationFunction(NumericalAggregationFunctionProperty.builder()
     * .percentileAggregation(PercentileAggregationProperty.builder()
     * .percentileValue(123)
     * .build())
     * .simpleNumericalAggregation("simpleNumericalAggregation")
     * .build())
     * .build())
     * .build())
     * .fieldSort(FieldSortProperty.builder()
     * .direction("direction")
     * .fieldId("fieldId")
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudsortconfiguration.html)
     */
    public inline fun cfnTemplateWordCloudSortConfigurationProperty(
        block: CfnTemplateWordCloudSortConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WordCloudSortConfigurationProperty {
        val builder = CfnTemplateWordCloudSortConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A word cloud.
     *
     * For more information, see
     * [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudvisual.html)
     */
    public inline fun cfnTemplateWordCloudVisualProperty(
        block: CfnTemplateWordCloudVisualPropertyDsl.() -> Unit = {}
    ): CfnTemplate.WordCloudVisualProperty {
        val builder = CfnTemplateWordCloudVisualPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Creates a theme.
     *
     * A *theme* is set of configuration options for color and layout. Themes apply to analyses and
     * dashboards. For more information, see
     * [Using Themes in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html)
     * in the *Amazon QuickSight User Guide* .
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CfnTheme cfnTheme = CfnTheme.Builder.create(this, "MyCfnTheme")
     * .awsAccountId("awsAccountId")
     * .baseThemeId("baseThemeId")
     * .configuration(ThemeConfigurationProperty.builder()
     * .dataColorPalette(DataColorPaletteProperty.builder()
     * .colors(List.of("colors"))
     * .emptyFillColor("emptyFillColor")
     * .minMaxGradient(List.of("minMaxGradient"))
     * .build())
     * .sheet(SheetStyleProperty.builder()
     * .tile(TileStyleProperty.builder()
     * .border(BorderStyleProperty.builder()
     * .show(false)
     * .build())
     * .build())
     * .tileLayout(TileLayoutStyleProperty.builder()
     * .gutter(GutterStyleProperty.builder()
     * .show(false)
     * .build())
     * .margin(MarginStyleProperty.builder()
     * .show(false)
     * .build())
     * .build())
     * .build())
     * .typography(TypographyProperty.builder()
     * .fontFamilies(List.of(FontProperty.builder()
     * .fontFamily("fontFamily")
     * .build()))
     * .build())
     * .uiColorPalette(UIColorPaletteProperty.builder()
     * .accent("accent")
     * .accentForeground("accentForeground")
     * .danger("danger")
     * .dangerForeground("dangerForeground")
     * .dimension("dimension")
     * .dimensionForeground("dimensionForeground")
     * .measure("measure")
     * .measureForeground("measureForeground")
     * .primaryBackground("primaryBackground")
     * .primaryForeground("primaryForeground")
     * .secondaryBackground("secondaryBackground")
     * .secondaryForeground("secondaryForeground")
     * .success("success")
     * .successForeground("successForeground")
     * .warning("warning")
     * .warningForeground("warningForeground")
     * .build())
     * .build())
     * .name("name")
     * .themeId("themeId")
     * // the properties below are optional
     * .permissions(List.of(ResourcePermissionProperty.builder()
     * .actions(List.of("actions"))
     * .principal("principal")
     * // the properties below are optional
     * .resource("resource")
     * .build()))
     * .tags(List.of(CfnTag.builder()
     * .key("key")
     * .value("value")
     * .build()))
     * .versionDescription("versionDescription")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html)
     */
    public inline fun cfnTheme(
        scope: Construct,
        id: String,
        block: CfnThemeDsl.() -> Unit = {},
    ): CfnTheme {
        val builder = CfnThemeDsl(scope, id)
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options for tile borders for visuals.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * BorderStyleProperty borderStyleProperty = BorderStyleProperty.builder()
     * .show(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-borderstyle.html)
     */
    public inline fun cfnThemeBorderStyleProperty(
        block: CfnThemeBorderStylePropertyDsl.() -> Unit = {}
    ): CfnTheme.BorderStyleProperty {
        val builder = CfnThemeBorderStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The theme colors that are used for data colors in charts.
     *
     * The colors description is a hexadecimal color code that consists of six alphanumerical
     * characters, prefixed with `#` , for example #37BFF5.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataColorPaletteProperty dataColorPaletteProperty = DataColorPaletteProperty.builder()
     * .colors(List.of("colors"))
     * .emptyFillColor("emptyFillColor")
     * .minMaxGradient(List.of("minMaxGradient"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-datacolorpalette.html)
     */
    public inline fun cfnThemeDataColorPaletteProperty(
        block: CfnThemeDataColorPalettePropertyDsl.() -> Unit = {}
    ): CfnTheme.DataColorPaletteProperty {
        val builder = CfnThemeDataColorPalettePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * FontProperty fontProperty = FontProperty.builder()
     * .fontFamily("fontFamily")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-font.html)
     */
    public inline fun cfnThemeFontProperty(
        block: CfnThemeFontPropertyDsl.() -> Unit = {}
    ): CfnTheme.FontProperty {
        val builder = CfnThemeFontPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options for gutter spacing between tiles on a sheet.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * GutterStyleProperty gutterStyleProperty = GutterStyleProperty.builder()
     * .show(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-gutterstyle.html)
     */
    public inline fun cfnThemeGutterStyleProperty(
        block: CfnThemeGutterStylePropertyDsl.() -> Unit = {}
    ): CfnTheme.GutterStyleProperty {
        val builder = CfnThemeGutterStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options for margins around the outside edge of sheets.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * MarginStyleProperty marginStyleProperty = MarginStyleProperty.builder()
     * .show(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-marginstyle.html)
     */
    public inline fun cfnThemeMarginStyleProperty(
        block: CfnThemeMarginStylePropertyDsl.() -> Unit = {}
    ): CfnTheme.MarginStyleProperty {
        val builder = CfnThemeMarginStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Properties for defining a `CfnTheme`.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CfnThemeProps cfnThemeProps = CfnThemeProps.builder()
     * .awsAccountId("awsAccountId")
     * .baseThemeId("baseThemeId")
     * .configuration(ThemeConfigurationProperty.builder()
     * .dataColorPalette(DataColorPaletteProperty.builder()
     * .colors(List.of("colors"))
     * .emptyFillColor("emptyFillColor")
     * .minMaxGradient(List.of("minMaxGradient"))
     * .build())
     * .sheet(SheetStyleProperty.builder()
     * .tile(TileStyleProperty.builder()
     * .border(BorderStyleProperty.builder()
     * .show(false)
     * .build())
     * .build())
     * .tileLayout(TileLayoutStyleProperty.builder()
     * .gutter(GutterStyleProperty.builder()
     * .show(false)
     * .build())
     * .margin(MarginStyleProperty.builder()
     * .show(false)
     * .build())
     * .build())
     * .build())
     * .typography(TypographyProperty.builder()
     * .fontFamilies(List.of(FontProperty.builder()
     * .fontFamily("fontFamily")
     * .build()))
     * .build())
     * .uiColorPalette(UIColorPaletteProperty.builder()
     * .accent("accent")
     * .accentForeground("accentForeground")
     * .danger("danger")
     * .dangerForeground("dangerForeground")
     * .dimension("dimension")
     * .dimensionForeground("dimensionForeground")
     * .measure("measure")
     * .measureForeground("measureForeground")
     * .primaryBackground("primaryBackground")
     * .primaryForeground("primaryForeground")
     * .secondaryBackground("secondaryBackground")
     * .secondaryForeground("secondaryForeground")
     * .success("success")
     * .successForeground("successForeground")
     * .warning("warning")
     * .warningForeground("warningForeground")
     * .build())
     * .build())
     * .name("name")
     * .themeId("themeId")
     * // the properties below are optional
     * .permissions(List.of(ResourcePermissionProperty.builder()
     * .actions(List.of("actions"))
     * .principal("principal")
     * // the properties below are optional
     * .resource("resource")
     * .build()))
     * .tags(List.of(CfnTag.builder()
     * .key("key")
     * .value("value")
     * .build()))
     * .versionDescription("versionDescription")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html)
     */
    public inline fun cfnThemeProps(block: CfnThemePropsDsl.() -> Unit = {}): CfnThemeProps {
        val builder = CfnThemePropsDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Permission for the resource.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ResourcePermissionProperty resourcePermissionProperty = ResourcePermissionProperty.builder()
     * .actions(List.of("actions"))
     * .principal("principal")
     * // the properties below are optional
     * .resource("resource")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-resourcepermission.html)
     */
    public inline fun cfnThemeResourcePermissionProperty(
        block: CfnThemeResourcePermissionPropertyDsl.() -> Unit = {}
    ): CfnTheme.ResourcePermissionProperty {
        val builder = CfnThemeResourcePermissionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The theme display options for sheets.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SheetStyleProperty sheetStyleProperty = SheetStyleProperty.builder()
     * .tile(TileStyleProperty.builder()
     * .border(BorderStyleProperty.builder()
     * .show(false)
     * .build())
     * .build())
     * .tileLayout(TileLayoutStyleProperty.builder()
     * .gutter(GutterStyleProperty.builder()
     * .show(false)
     * .build())
     * .margin(MarginStyleProperty.builder()
     * .show(false)
     * .build())
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-sheetstyle.html)
     */
    public inline fun cfnThemeSheetStyleProperty(
        block: CfnThemeSheetStylePropertyDsl.() -> Unit = {}
    ): CfnTheme.SheetStyleProperty {
        val builder = CfnThemeSheetStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The theme configuration.
     *
     * This configuration contains all of the display properties for a theme.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ThemeConfigurationProperty themeConfigurationProperty = ThemeConfigurationProperty.builder()
     * .dataColorPalette(DataColorPaletteProperty.builder()
     * .colors(List.of("colors"))
     * .emptyFillColor("emptyFillColor")
     * .minMaxGradient(List.of("minMaxGradient"))
     * .build())
     * .sheet(SheetStyleProperty.builder()
     * .tile(TileStyleProperty.builder()
     * .border(BorderStyleProperty.builder()
     * .show(false)
     * .build())
     * .build())
     * .tileLayout(TileLayoutStyleProperty.builder()
     * .gutter(GutterStyleProperty.builder()
     * .show(false)
     * .build())
     * .margin(MarginStyleProperty.builder()
     * .show(false)
     * .build())
     * .build())
     * .build())
     * .typography(TypographyProperty.builder()
     * .fontFamilies(List.of(FontProperty.builder()
     * .fontFamily("fontFamily")
     * .build()))
     * .build())
     * .uiColorPalette(UIColorPaletteProperty.builder()
     * .accent("accent")
     * .accentForeground("accentForeground")
     * .danger("danger")
     * .dangerForeground("dangerForeground")
     * .dimension("dimension")
     * .dimensionForeground("dimensionForeground")
     * .measure("measure")
     * .measureForeground("measureForeground")
     * .primaryBackground("primaryBackground")
     * .primaryForeground("primaryForeground")
     * .secondaryBackground("secondaryBackground")
     * .secondaryForeground("secondaryForeground")
     * .success("success")
     * .successForeground("successForeground")
     * .warning("warning")
     * .warningForeground("warningForeground")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeconfiguration.html)
     */
    public inline fun cfnThemeThemeConfigurationProperty(
        block: CfnThemeThemeConfigurationPropertyDsl.() -> Unit = {}
    ): CfnTheme.ThemeConfigurationProperty {
        val builder = CfnThemeThemeConfigurationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Theme error.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ThemeErrorProperty themeErrorProperty = ThemeErrorProperty.builder()
     * .message("message")
     * .type("type")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeerror.html)
     */
    public inline fun cfnThemeThemeErrorProperty(
        block: CfnThemeThemeErrorPropertyDsl.() -> Unit = {}
    ): CfnTheme.ThemeErrorProperty {
        val builder = CfnThemeThemeErrorPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A version of a theme.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ThemeVersionProperty themeVersionProperty = ThemeVersionProperty.builder()
     * .arn("arn")
     * .baseThemeId("baseThemeId")
     * .configuration(ThemeConfigurationProperty.builder()
     * .dataColorPalette(DataColorPaletteProperty.builder()
     * .colors(List.of("colors"))
     * .emptyFillColor("emptyFillColor")
     * .minMaxGradient(List.of("minMaxGradient"))
     * .build())
     * .sheet(SheetStyleProperty.builder()
     * .tile(TileStyleProperty.builder()
     * .border(BorderStyleProperty.builder()
     * .show(false)
     * .build())
     * .build())
     * .tileLayout(TileLayoutStyleProperty.builder()
     * .gutter(GutterStyleProperty.builder()
     * .show(false)
     * .build())
     * .margin(MarginStyleProperty.builder()
     * .show(false)
     * .build())
     * .build())
     * .build())
     * .typography(TypographyProperty.builder()
     * .fontFamilies(List.of(FontProperty.builder()
     * .fontFamily("fontFamily")
     * .build()))
     * .build())
     * .uiColorPalette(UIColorPaletteProperty.builder()
     * .accent("accent")
     * .accentForeground("accentForeground")
     * .danger("danger")
     * .dangerForeground("dangerForeground")
     * .dimension("dimension")
     * .dimensionForeground("dimensionForeground")
     * .measure("measure")
     * .measureForeground("measureForeground")
     * .primaryBackground("primaryBackground")
     * .primaryForeground("primaryForeground")
     * .secondaryBackground("secondaryBackground")
     * .secondaryForeground("secondaryForeground")
     * .success("success")
     * .successForeground("successForeground")
     * .warning("warning")
     * .warningForeground("warningForeground")
     * .build())
     * .build())
     * .createdTime("createdTime")
     * .description("description")
     * .errors(List.of(ThemeErrorProperty.builder()
     * .message("message")
     * .type("type")
     * .build()))
     * .status("status")
     * .versionNumber(123)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeversion.html)
     */
    public inline fun cfnThemeThemeVersionProperty(
        block: CfnThemeThemeVersionPropertyDsl.() -> Unit = {}
    ): CfnTheme.ThemeVersionProperty {
        val builder = CfnThemeThemeVersionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The display options for the layout of tiles on a sheet.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TileLayoutStyleProperty tileLayoutStyleProperty = TileLayoutStyleProperty.builder()
     * .gutter(GutterStyleProperty.builder()
     * .show(false)
     * .build())
     * .margin(MarginStyleProperty.builder()
     * .show(false)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-tilelayoutstyle.html)
     */
    public inline fun cfnThemeTileLayoutStyleProperty(
        block: CfnThemeTileLayoutStylePropertyDsl.() -> Unit = {}
    ): CfnTheme.TileLayoutStyleProperty {
        val builder = CfnThemeTileLayoutStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Display options related to tiles on a sheet.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TileStyleProperty tileStyleProperty = TileStyleProperty.builder()
     * .border(BorderStyleProperty.builder()
     * .show(false)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-tilestyle.html)
     */
    public inline fun cfnThemeTileStyleProperty(
        block: CfnThemeTileStylePropertyDsl.() -> Unit = {}
    ): CfnTheme.TileStyleProperty {
        val builder = CfnThemeTileStylePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TypographyProperty typographyProperty = TypographyProperty.builder()
     * .fontFamilies(List.of(FontProperty.builder()
     * .fontFamily("fontFamily")
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-typography.html)
     */
    public inline fun cfnThemeTypographyProperty(
        block: CfnThemeTypographyPropertyDsl.() -> Unit = {}
    ): CfnTheme.TypographyProperty {
        val builder = CfnThemeTypographyPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The theme colors that apply to UI and to charts, excluding data colors.
     *
     * The colors description is a hexadecimal color code that consists of six alphanumerical
     * characters, prefixed with `#` , for example #37BFF5. For more information, see
     * [Using Themes in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html)
     * in the *Amazon QuickSight User Guide.*
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * UIColorPaletteProperty uIColorPaletteProperty = UIColorPaletteProperty.builder()
     * .accent("accent")
     * .accentForeground("accentForeground")
     * .danger("danger")
     * .dangerForeground("dangerForeground")
     * .dimension("dimension")
     * .dimensionForeground("dimensionForeground")
     * .measure("measure")
     * .measureForeground("measureForeground")
     * .primaryBackground("primaryBackground")
     * .primaryForeground("primaryForeground")
     * .secondaryBackground("secondaryBackground")
     * .secondaryForeground("secondaryForeground")
     * .success("success")
     * .successForeground("successForeground")
     * .warning("warning")
     * .warningForeground("warningForeground")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html)
     */
    public inline fun cfnThemeUIColorPaletteProperty(
        block: CfnThemeUIColorPalettePropertyDsl.() -> Unit = {}
    ): CfnTheme.UIColorPaletteProperty {
        val builder = CfnThemeUIColorPalettePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Creates a new Q topic.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CfnTopic cfnTopic = CfnTopic.Builder.create(this, "MyCfnTopic")
     * .awsAccountId("awsAccountId")
     * .dataSets(List.of(DatasetMetadataProperty.builder()
     * .datasetArn("datasetArn")
     * // the properties below are optional
     * .calculatedFields(List.of(TopicCalculatedFieldProperty.builder()
     * .calculatedFieldName("calculatedFieldName")
     * .expression("expression")
     * // the properties below are optional
     * .aggregation("aggregation")
     * .allowedAggregations(List.of("allowedAggregations"))
     * .calculatedFieldDescription("calculatedFieldDescription")
     * .calculatedFieldSynonyms(List.of("calculatedFieldSynonyms"))
     * .cellValueSynonyms(List.of(CellValueSynonymProperty.builder()
     * .cellValue("cellValue")
     * .synonyms(List.of("synonyms"))
     * .build()))
     * .columnDataRole("columnDataRole")
     * .comparativeOrder(ComparativeOrderProperty.builder()
     * .specifedOrder(List.of("specifedOrder"))
     * .treatUndefinedSpecifiedValues("treatUndefinedSpecifiedValues")
     * .useOrdering("useOrdering")
     * .build())
     * .defaultFormatting(DefaultFormattingProperty.builder()
     * .displayFormat("displayFormat")
     * .displayFormatOptions(DisplayFormatOptionsProperty.builder()
     * .blankCellFormat("blankCellFormat")
     * .currencySymbol("currencySymbol")
     * .dateFormat("dateFormat")
     * .decimalSeparator("decimalSeparator")
     * .fractionDigits(123)
     * .groupingSeparator("groupingSeparator")
     * .negativeFormat(NegativeFormatProperty.builder()
     * .prefix("prefix")
     * .suffix("suffix")
     * .build())
     * .prefix("prefix")
     * .suffix("suffix")
     * .unitScaler("unitScaler")
     * .useBlankCellFormat(false)
     * .useGrouping(false)
     * .build())
     * .build())
     * .isIncludedInTopic(false)
     * .neverAggregateInFilter(false)
     * .notAllowedAggregations(List.of("notAllowedAggregations"))
     * .semanticType(SemanticTypeProperty.builder()
     * .falseyCellValue("falseyCellValue")
     * .falseyCellValueSynonyms(List.of("falseyCellValueSynonyms"))
     * .subTypeName("subTypeName")
     * .truthyCellValue("truthyCellValue")
     * .truthyCellValueSynonyms(List.of("truthyCellValueSynonyms"))
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build())
     * .timeGranularity("timeGranularity")
     * .build()))
     * .columns(List.of(TopicColumnProperty.builder()
     * .columnName("columnName")
     * // the properties below are optional
     * .aggregation("aggregation")
     * .allowedAggregations(List.of("allowedAggregations"))
     * .cellValueSynonyms(List.of(CellValueSynonymProperty.builder()
     * .cellValue("cellValue")
     * .synonyms(List.of("synonyms"))
     * .build()))
     * .columnDataRole("columnDataRole")
     * .columnDescription("columnDescription")
     * .columnFriendlyName("columnFriendlyName")
     * .columnSynonyms(List.of("columnSynonyms"))
     * .comparativeOrder(ComparativeOrderProperty.builder()
     * .specifedOrder(List.of("specifedOrder"))
     * .treatUndefinedSpecifiedValues("treatUndefinedSpecifiedValues")
     * .useOrdering("useOrdering")
     * .build())
     * .defaultFormatting(DefaultFormattingProperty.builder()
     * .displayFormat("displayFormat")
     * .displayFormatOptions(DisplayFormatOptionsProperty.builder()
     * .blankCellFormat("blankCellFormat")
     * .currencySymbol("currencySymbol")
     * .dateFormat("dateFormat")
     * .decimalSeparator("decimalSeparator")
     * .fractionDigits(123)
     * .groupingSeparator("groupingSeparator")
     * .negativeFormat(NegativeFormatProperty.builder()
     * .prefix("prefix")
     * .suffix("suffix")
     * .build())
     * .prefix("prefix")
     * .suffix("suffix")
     * .unitScaler("unitScaler")
     * .useBlankCellFormat(false)
     * .useGrouping(false)
     * .build())
     * .build())
     * .isIncludedInTopic(false)
     * .neverAggregateInFilter(false)
     * .notAllowedAggregations(List.of("notAllowedAggregations"))
     * .semanticType(SemanticTypeProperty.builder()
     * .falseyCellValue("falseyCellValue")
     * .falseyCellValueSynonyms(List.of("falseyCellValueSynonyms"))
     * .subTypeName("subTypeName")
     * .truthyCellValue("truthyCellValue")
     * .truthyCellValueSynonyms(List.of("truthyCellValueSynonyms"))
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build())
     * .timeGranularity("timeGranularity")
     * .build()))
     * .dataAggregation(DataAggregationProperty.builder()
     * .datasetRowDateGranularity("datasetRowDateGranularity")
     * .defaultDateColumnName("defaultDateColumnName")
     * .build())
     * .datasetDescription("datasetDescription")
     * .datasetName("datasetName")
     * .filters(List.of(TopicFilterProperty.builder()
     * .filterName("filterName")
     * .operandFieldName("operandFieldName")
     * // the properties below are optional
     * .categoryFilter(TopicCategoryFilterProperty.builder()
     * .categoryFilterFunction("categoryFilterFunction")
     * .categoryFilterType("categoryFilterType")
     * .constant(TopicCategoryFilterConstantProperty.builder()
     * .collectiveConstant(CollectiveConstantProperty.builder()
     * .valueList(List.of("valueList"))
     * .build())
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .inverse(false)
     * .build())
     * .dateRangeFilter(TopicDateRangeFilterProperty.builder()
     * .constant(TopicRangeFilterConstantProperty.builder()
     * .constantType("constantType")
     * .rangeConstant(RangeConstantProperty.builder()
     * .maximum("maximum")
     * .minimum("minimum")
     * .build())
     * .build())
     * .inclusive(false)
     * .build())
     * .filterClass("filterClass")
     * .filterDescription("filterDescription")
     * .filterSynonyms(List.of("filterSynonyms"))
     * .filterType("filterType")
     * .numericEqualityFilter(TopicNumericEqualityFilterProperty.builder()
     * .aggregation("aggregation")
     * .constant(TopicSingularFilterConstantProperty.builder()
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .build())
     * .numericRangeFilter(TopicNumericRangeFilterProperty.builder()
     * .aggregation("aggregation")
     * .constant(TopicRangeFilterConstantProperty.builder()
     * .constantType("constantType")
     * .rangeConstant(RangeConstantProperty.builder()
     * .maximum("maximum")
     * .minimum("minimum")
     * .build())
     * .build())
     * .inclusive(false)
     * .build())
     * .relativeDateFilter(TopicRelativeDateFilterProperty.builder()
     * .constant(TopicSingularFilterConstantProperty.builder()
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .relativeDateFilterFunction("relativeDateFilterFunction")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .namedEntities(List.of(TopicNamedEntityProperty.builder()
     * .entityName("entityName")
     * // the properties below are optional
     * .definition(List.of(NamedEntityDefinitionProperty.builder()
     * .fieldName("fieldName")
     * .metric(NamedEntityDefinitionMetricProperty.builder()
     * .aggregation("aggregation")
     * .aggregationFunctionParameters(Map.of(
     * "aggregationFunctionParametersKey", "aggregationFunctionParameters"))
     * .build())
     * .propertyName("propertyName")
     * .propertyRole("propertyRole")
     * .propertyUsage("propertyUsage")
     * .build()))
     * .entityDescription("entityDescription")
     * .entitySynonyms(List.of("entitySynonyms"))
     * .semanticEntityType(SemanticEntityTypeProperty.builder()
     * .subTypeName("subTypeName")
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build())
     * .build()))
     * .build()))
     * .description("description")
     * .name("name")
     * .topicId("topicId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-topic.html)
     */
    public inline fun cfnTopic(
        scope: Construct,
        id: String,
        block: CfnTopicDsl.() -> Unit = {},
    ): CfnTopic {
        val builder = CfnTopicDsl(scope, id)
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents the cell value synonym.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CellValueSynonymProperty cellValueSynonymProperty = CellValueSynonymProperty.builder()
     * .cellValue("cellValue")
     * .synonyms(List.of("synonyms"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-cellvaluesynonym.html)
     */
    public inline fun cfnTopicCellValueSynonymProperty(
        block: CfnTopicCellValueSynonymPropertyDsl.() -> Unit = {}
    ): CfnTopic.CellValueSynonymProperty {
        val builder = CfnTopicCellValueSynonymPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a collective constant.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CollectiveConstantProperty collectiveConstantProperty = CollectiveConstantProperty.builder()
     * .valueList(List.of("valueList"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-collectiveconstant.html)
     */
    public inline fun cfnTopicCollectiveConstantProperty(
        block: CfnTopicCollectiveConstantPropertyDsl.() -> Unit = {}
    ): CfnTopic.CollectiveConstantProperty {
        val builder = CfnTopicCollectiveConstantPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The order in which data is displayed for the column when it's used in a comparative context.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * ComparativeOrderProperty comparativeOrderProperty = ComparativeOrderProperty.builder()
     * .specifedOrder(List.of("specifedOrder"))
     * .treatUndefinedSpecifiedValues("treatUndefinedSpecifiedValues")
     * .useOrdering("useOrdering")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-comparativeorder.html)
     */
    public inline fun cfnTopicComparativeOrderProperty(
        block: CfnTopicComparativeOrderPropertyDsl.() -> Unit = {}
    ): CfnTopic.ComparativeOrderProperty {
        val builder = CfnTopicComparativeOrderPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The definition of a data aggregation.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DataAggregationProperty dataAggregationProperty = DataAggregationProperty.builder()
     * .datasetRowDateGranularity("datasetRowDateGranularity")
     * .defaultDateColumnName("defaultDateColumnName")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-dataaggregation.html)
     */
    public inline fun cfnTopicDataAggregationProperty(
        block: CfnTopicDataAggregationPropertyDsl.() -> Unit = {}
    ): CfnTopic.DataAggregationProperty {
        val builder = CfnTopicDataAggregationPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a dataset.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DatasetMetadataProperty datasetMetadataProperty = DatasetMetadataProperty.builder()
     * .datasetArn("datasetArn")
     * // the properties below are optional
     * .calculatedFields(List.of(TopicCalculatedFieldProperty.builder()
     * .calculatedFieldName("calculatedFieldName")
     * .expression("expression")
     * // the properties below are optional
     * .aggregation("aggregation")
     * .allowedAggregations(List.of("allowedAggregations"))
     * .calculatedFieldDescription("calculatedFieldDescription")
     * .calculatedFieldSynonyms(List.of("calculatedFieldSynonyms"))
     * .cellValueSynonyms(List.of(CellValueSynonymProperty.builder()
     * .cellValue("cellValue")
     * .synonyms(List.of("synonyms"))
     * .build()))
     * .columnDataRole("columnDataRole")
     * .comparativeOrder(ComparativeOrderProperty.builder()
     * .specifedOrder(List.of("specifedOrder"))
     * .treatUndefinedSpecifiedValues("treatUndefinedSpecifiedValues")
     * .useOrdering("useOrdering")
     * .build())
     * .defaultFormatting(DefaultFormattingProperty.builder()
     * .displayFormat("displayFormat")
     * .displayFormatOptions(DisplayFormatOptionsProperty.builder()
     * .blankCellFormat("blankCellFormat")
     * .currencySymbol("currencySymbol")
     * .dateFormat("dateFormat")
     * .decimalSeparator("decimalSeparator")
     * .fractionDigits(123)
     * .groupingSeparator("groupingSeparator")
     * .negativeFormat(NegativeFormatProperty.builder()
     * .prefix("prefix")
     * .suffix("suffix")
     * .build())
     * .prefix("prefix")
     * .suffix("suffix")
     * .unitScaler("unitScaler")
     * .useBlankCellFormat(false)
     * .useGrouping(false)
     * .build())
     * .build())
     * .isIncludedInTopic(false)
     * .neverAggregateInFilter(false)
     * .notAllowedAggregations(List.of("notAllowedAggregations"))
     * .semanticType(SemanticTypeProperty.builder()
     * .falseyCellValue("falseyCellValue")
     * .falseyCellValueSynonyms(List.of("falseyCellValueSynonyms"))
     * .subTypeName("subTypeName")
     * .truthyCellValue("truthyCellValue")
     * .truthyCellValueSynonyms(List.of("truthyCellValueSynonyms"))
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build())
     * .timeGranularity("timeGranularity")
     * .build()))
     * .columns(List.of(TopicColumnProperty.builder()
     * .columnName("columnName")
     * // the properties below are optional
     * .aggregation("aggregation")
     * .allowedAggregations(List.of("allowedAggregations"))
     * .cellValueSynonyms(List.of(CellValueSynonymProperty.builder()
     * .cellValue("cellValue")
     * .synonyms(List.of("synonyms"))
     * .build()))
     * .columnDataRole("columnDataRole")
     * .columnDescription("columnDescription")
     * .columnFriendlyName("columnFriendlyName")
     * .columnSynonyms(List.of("columnSynonyms"))
     * .comparativeOrder(ComparativeOrderProperty.builder()
     * .specifedOrder(List.of("specifedOrder"))
     * .treatUndefinedSpecifiedValues("treatUndefinedSpecifiedValues")
     * .useOrdering("useOrdering")
     * .build())
     * .defaultFormatting(DefaultFormattingProperty.builder()
     * .displayFormat("displayFormat")
     * .displayFormatOptions(DisplayFormatOptionsProperty.builder()
     * .blankCellFormat("blankCellFormat")
     * .currencySymbol("currencySymbol")
     * .dateFormat("dateFormat")
     * .decimalSeparator("decimalSeparator")
     * .fractionDigits(123)
     * .groupingSeparator("groupingSeparator")
     * .negativeFormat(NegativeFormatProperty.builder()
     * .prefix("prefix")
     * .suffix("suffix")
     * .build())
     * .prefix("prefix")
     * .suffix("suffix")
     * .unitScaler("unitScaler")
     * .useBlankCellFormat(false)
     * .useGrouping(false)
     * .build())
     * .build())
     * .isIncludedInTopic(false)
     * .neverAggregateInFilter(false)
     * .notAllowedAggregations(List.of("notAllowedAggregations"))
     * .semanticType(SemanticTypeProperty.builder()
     * .falseyCellValue("falseyCellValue")
     * .falseyCellValueSynonyms(List.of("falseyCellValueSynonyms"))
     * .subTypeName("subTypeName")
     * .truthyCellValue("truthyCellValue")
     * .truthyCellValueSynonyms(List.of("truthyCellValueSynonyms"))
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build())
     * .timeGranularity("timeGranularity")
     * .build()))
     * .dataAggregation(DataAggregationProperty.builder()
     * .datasetRowDateGranularity("datasetRowDateGranularity")
     * .defaultDateColumnName("defaultDateColumnName")
     * .build())
     * .datasetDescription("datasetDescription")
     * .datasetName("datasetName")
     * .filters(List.of(TopicFilterProperty.builder()
     * .filterName("filterName")
     * .operandFieldName("operandFieldName")
     * // the properties below are optional
     * .categoryFilter(TopicCategoryFilterProperty.builder()
     * .categoryFilterFunction("categoryFilterFunction")
     * .categoryFilterType("categoryFilterType")
     * .constant(TopicCategoryFilterConstantProperty.builder()
     * .collectiveConstant(CollectiveConstantProperty.builder()
     * .valueList(List.of("valueList"))
     * .build())
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .inverse(false)
     * .build())
     * .dateRangeFilter(TopicDateRangeFilterProperty.builder()
     * .constant(TopicRangeFilterConstantProperty.builder()
     * .constantType("constantType")
     * .rangeConstant(RangeConstantProperty.builder()
     * .maximum("maximum")
     * .minimum("minimum")
     * .build())
     * .build())
     * .inclusive(false)
     * .build())
     * .filterClass("filterClass")
     * .filterDescription("filterDescription")
     * .filterSynonyms(List.of("filterSynonyms"))
     * .filterType("filterType")
     * .numericEqualityFilter(TopicNumericEqualityFilterProperty.builder()
     * .aggregation("aggregation")
     * .constant(TopicSingularFilterConstantProperty.builder()
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .build())
     * .numericRangeFilter(TopicNumericRangeFilterProperty.builder()
     * .aggregation("aggregation")
     * .constant(TopicRangeFilterConstantProperty.builder()
     * .constantType("constantType")
     * .rangeConstant(RangeConstantProperty.builder()
     * .maximum("maximum")
     * .minimum("minimum")
     * .build())
     * .build())
     * .inclusive(false)
     * .build())
     * .relativeDateFilter(TopicRelativeDateFilterProperty.builder()
     * .constant(TopicSingularFilterConstantProperty.builder()
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .relativeDateFilterFunction("relativeDateFilterFunction")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .namedEntities(List.of(TopicNamedEntityProperty.builder()
     * .entityName("entityName")
     * // the properties below are optional
     * .definition(List.of(NamedEntityDefinitionProperty.builder()
     * .fieldName("fieldName")
     * .metric(NamedEntityDefinitionMetricProperty.builder()
     * .aggregation("aggregation")
     * .aggregationFunctionParameters(Map.of(
     * "aggregationFunctionParametersKey", "aggregationFunctionParameters"))
     * .build())
     * .propertyName("propertyName")
     * .propertyRole("propertyRole")
     * .propertyUsage("propertyUsage")
     * .build()))
     * .entityDescription("entityDescription")
     * .entitySynonyms(List.of("entitySynonyms"))
     * .semanticEntityType(SemanticEntityTypeProperty.builder()
     * .subTypeName("subTypeName")
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build())
     * .build()))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-datasetmetadata.html)
     */
    public inline fun cfnTopicDatasetMetadataProperty(
        block: CfnTopicDatasetMetadataPropertyDsl.() -> Unit = {}
    ): CfnTopic.DatasetMetadataProperty {
        val builder = CfnTopicDatasetMetadataPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a default formatting definition.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DefaultFormattingProperty defaultFormattingProperty = DefaultFormattingProperty.builder()
     * .displayFormat("displayFormat")
     * .displayFormatOptions(DisplayFormatOptionsProperty.builder()
     * .blankCellFormat("blankCellFormat")
     * .currencySymbol("currencySymbol")
     * .dateFormat("dateFormat")
     * .decimalSeparator("decimalSeparator")
     * .fractionDigits(123)
     * .groupingSeparator("groupingSeparator")
     * .negativeFormat(NegativeFormatProperty.builder()
     * .prefix("prefix")
     * .suffix("suffix")
     * .build())
     * .prefix("prefix")
     * .suffix("suffix")
     * .unitScaler("unitScaler")
     * .useBlankCellFormat(false)
     * .useGrouping(false)
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-defaultformatting.html)
     */
    public inline fun cfnTopicDefaultFormattingProperty(
        block: CfnTopicDefaultFormattingPropertyDsl.() -> Unit = {}
    ): CfnTopic.DefaultFormattingProperty {
        val builder = CfnTopicDefaultFormattingPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents additional options for display formatting.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * DisplayFormatOptionsProperty displayFormatOptionsProperty =
     * DisplayFormatOptionsProperty.builder()
     * .blankCellFormat("blankCellFormat")
     * .currencySymbol("currencySymbol")
     * .dateFormat("dateFormat")
     * .decimalSeparator("decimalSeparator")
     * .fractionDigits(123)
     * .groupingSeparator("groupingSeparator")
     * .negativeFormat(NegativeFormatProperty.builder()
     * .prefix("prefix")
     * .suffix("suffix")
     * .build())
     * .prefix("prefix")
     * .suffix("suffix")
     * .unitScaler("unitScaler")
     * .useBlankCellFormat(false)
     * .useGrouping(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html)
     */
    public inline fun cfnTopicDisplayFormatOptionsProperty(
        block: CfnTopicDisplayFormatOptionsPropertyDsl.() -> Unit = {}
    ): CfnTopic.DisplayFormatOptionsProperty {
        val builder = CfnTopicDisplayFormatOptionsPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a metric.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NamedEntityDefinitionMetricProperty namedEntityDefinitionMetricProperty =
     * NamedEntityDefinitionMetricProperty.builder()
     * .aggregation("aggregation")
     * .aggregationFunctionParameters(Map.of(
     * "aggregationFunctionParametersKey", "aggregationFunctionParameters"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-namedentitydefinitionmetric.html)
     */
    public inline fun cfnTopicNamedEntityDefinitionMetricProperty(
        block: CfnTopicNamedEntityDefinitionMetricPropertyDsl.() -> Unit = {}
    ): CfnTopic.NamedEntityDefinitionMetricProperty {
        val builder = CfnTopicNamedEntityDefinitionMetricPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a named entity.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NamedEntityDefinitionProperty namedEntityDefinitionProperty =
     * NamedEntityDefinitionProperty.builder()
     * .fieldName("fieldName")
     * .metric(NamedEntityDefinitionMetricProperty.builder()
     * .aggregation("aggregation")
     * .aggregationFunctionParameters(Map.of(
     * "aggregationFunctionParametersKey", "aggregationFunctionParameters"))
     * .build())
     * .propertyName("propertyName")
     * .propertyRole("propertyRole")
     * .propertyUsage("propertyUsage")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-namedentitydefinition.html)
     */
    public inline fun cfnTopicNamedEntityDefinitionProperty(
        block: CfnTopicNamedEntityDefinitionPropertyDsl.() -> Unit = {}
    ): CfnTopic.NamedEntityDefinitionProperty {
        val builder = CfnTopicNamedEntityDefinitionPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a negative format.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NegativeFormatProperty negativeFormatProperty = NegativeFormatProperty.builder()
     * .prefix("prefix")
     * .suffix("suffix")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-negativeformat.html)
     */
    public inline fun cfnTopicNegativeFormatProperty(
        block: CfnTopicNegativeFormatPropertyDsl.() -> Unit = {}
    ): CfnTopic.NegativeFormatProperty {
        val builder = CfnTopicNegativeFormatPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Properties for defining a `CfnTopic`.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CfnTopicProps cfnTopicProps = CfnTopicProps.builder()
     * .awsAccountId("awsAccountId")
     * .dataSets(List.of(DatasetMetadataProperty.builder()
     * .datasetArn("datasetArn")
     * // the properties below are optional
     * .calculatedFields(List.of(TopicCalculatedFieldProperty.builder()
     * .calculatedFieldName("calculatedFieldName")
     * .expression("expression")
     * // the properties below are optional
     * .aggregation("aggregation")
     * .allowedAggregations(List.of("allowedAggregations"))
     * .calculatedFieldDescription("calculatedFieldDescription")
     * .calculatedFieldSynonyms(List.of("calculatedFieldSynonyms"))
     * .cellValueSynonyms(List.of(CellValueSynonymProperty.builder()
     * .cellValue("cellValue")
     * .synonyms(List.of("synonyms"))
     * .build()))
     * .columnDataRole("columnDataRole")
     * .comparativeOrder(ComparativeOrderProperty.builder()
     * .specifedOrder(List.of("specifedOrder"))
     * .treatUndefinedSpecifiedValues("treatUndefinedSpecifiedValues")
     * .useOrdering("useOrdering")
     * .build())
     * .defaultFormatting(DefaultFormattingProperty.builder()
     * .displayFormat("displayFormat")
     * .displayFormatOptions(DisplayFormatOptionsProperty.builder()
     * .blankCellFormat("blankCellFormat")
     * .currencySymbol("currencySymbol")
     * .dateFormat("dateFormat")
     * .decimalSeparator("decimalSeparator")
     * .fractionDigits(123)
     * .groupingSeparator("groupingSeparator")
     * .negativeFormat(NegativeFormatProperty.builder()
     * .prefix("prefix")
     * .suffix("suffix")
     * .build())
     * .prefix("prefix")
     * .suffix("suffix")
     * .unitScaler("unitScaler")
     * .useBlankCellFormat(false)
     * .useGrouping(false)
     * .build())
     * .build())
     * .isIncludedInTopic(false)
     * .neverAggregateInFilter(false)
     * .notAllowedAggregations(List.of("notAllowedAggregations"))
     * .semanticType(SemanticTypeProperty.builder()
     * .falseyCellValue("falseyCellValue")
     * .falseyCellValueSynonyms(List.of("falseyCellValueSynonyms"))
     * .subTypeName("subTypeName")
     * .truthyCellValue("truthyCellValue")
     * .truthyCellValueSynonyms(List.of("truthyCellValueSynonyms"))
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build())
     * .timeGranularity("timeGranularity")
     * .build()))
     * .columns(List.of(TopicColumnProperty.builder()
     * .columnName("columnName")
     * // the properties below are optional
     * .aggregation("aggregation")
     * .allowedAggregations(List.of("allowedAggregations"))
     * .cellValueSynonyms(List.of(CellValueSynonymProperty.builder()
     * .cellValue("cellValue")
     * .synonyms(List.of("synonyms"))
     * .build()))
     * .columnDataRole("columnDataRole")
     * .columnDescription("columnDescription")
     * .columnFriendlyName("columnFriendlyName")
     * .columnSynonyms(List.of("columnSynonyms"))
     * .comparativeOrder(ComparativeOrderProperty.builder()
     * .specifedOrder(List.of("specifedOrder"))
     * .treatUndefinedSpecifiedValues("treatUndefinedSpecifiedValues")
     * .useOrdering("useOrdering")
     * .build())
     * .defaultFormatting(DefaultFormattingProperty.builder()
     * .displayFormat("displayFormat")
     * .displayFormatOptions(DisplayFormatOptionsProperty.builder()
     * .blankCellFormat("blankCellFormat")
     * .currencySymbol("currencySymbol")
     * .dateFormat("dateFormat")
     * .decimalSeparator("decimalSeparator")
     * .fractionDigits(123)
     * .groupingSeparator("groupingSeparator")
     * .negativeFormat(NegativeFormatProperty.builder()
     * .prefix("prefix")
     * .suffix("suffix")
     * .build())
     * .prefix("prefix")
     * .suffix("suffix")
     * .unitScaler("unitScaler")
     * .useBlankCellFormat(false)
     * .useGrouping(false)
     * .build())
     * .build())
     * .isIncludedInTopic(false)
     * .neverAggregateInFilter(false)
     * .notAllowedAggregations(List.of("notAllowedAggregations"))
     * .semanticType(SemanticTypeProperty.builder()
     * .falseyCellValue("falseyCellValue")
     * .falseyCellValueSynonyms(List.of("falseyCellValueSynonyms"))
     * .subTypeName("subTypeName")
     * .truthyCellValue("truthyCellValue")
     * .truthyCellValueSynonyms(List.of("truthyCellValueSynonyms"))
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build())
     * .timeGranularity("timeGranularity")
     * .build()))
     * .dataAggregation(DataAggregationProperty.builder()
     * .datasetRowDateGranularity("datasetRowDateGranularity")
     * .defaultDateColumnName("defaultDateColumnName")
     * .build())
     * .datasetDescription("datasetDescription")
     * .datasetName("datasetName")
     * .filters(List.of(TopicFilterProperty.builder()
     * .filterName("filterName")
     * .operandFieldName("operandFieldName")
     * // the properties below are optional
     * .categoryFilter(TopicCategoryFilterProperty.builder()
     * .categoryFilterFunction("categoryFilterFunction")
     * .categoryFilterType("categoryFilterType")
     * .constant(TopicCategoryFilterConstantProperty.builder()
     * .collectiveConstant(CollectiveConstantProperty.builder()
     * .valueList(List.of("valueList"))
     * .build())
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .inverse(false)
     * .build())
     * .dateRangeFilter(TopicDateRangeFilterProperty.builder()
     * .constant(TopicRangeFilterConstantProperty.builder()
     * .constantType("constantType")
     * .rangeConstant(RangeConstantProperty.builder()
     * .maximum("maximum")
     * .minimum("minimum")
     * .build())
     * .build())
     * .inclusive(false)
     * .build())
     * .filterClass("filterClass")
     * .filterDescription("filterDescription")
     * .filterSynonyms(List.of("filterSynonyms"))
     * .filterType("filterType")
     * .numericEqualityFilter(TopicNumericEqualityFilterProperty.builder()
     * .aggregation("aggregation")
     * .constant(TopicSingularFilterConstantProperty.builder()
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .build())
     * .numericRangeFilter(TopicNumericRangeFilterProperty.builder()
     * .aggregation("aggregation")
     * .constant(TopicRangeFilterConstantProperty.builder()
     * .constantType("constantType")
     * .rangeConstant(RangeConstantProperty.builder()
     * .maximum("maximum")
     * .minimum("minimum")
     * .build())
     * .build())
     * .inclusive(false)
     * .build())
     * .relativeDateFilter(TopicRelativeDateFilterProperty.builder()
     * .constant(TopicSingularFilterConstantProperty.builder()
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .relativeDateFilterFunction("relativeDateFilterFunction")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build()))
     * .namedEntities(List.of(TopicNamedEntityProperty.builder()
     * .entityName("entityName")
     * // the properties below are optional
     * .definition(List.of(NamedEntityDefinitionProperty.builder()
     * .fieldName("fieldName")
     * .metric(NamedEntityDefinitionMetricProperty.builder()
     * .aggregation("aggregation")
     * .aggregationFunctionParameters(Map.of(
     * "aggregationFunctionParametersKey", "aggregationFunctionParameters"))
     * .build())
     * .propertyName("propertyName")
     * .propertyRole("propertyRole")
     * .propertyUsage("propertyUsage")
     * .build()))
     * .entityDescription("entityDescription")
     * .entitySynonyms(List.of("entitySynonyms"))
     * .semanticEntityType(SemanticEntityTypeProperty.builder()
     * .subTypeName("subTypeName")
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build())
     * .build()))
     * .build()))
     * .description("description")
     * .name("name")
     * .topicId("topicId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-topic.html)
     */
    public inline fun cfnTopicProps(block: CfnTopicPropsDsl.() -> Unit = {}): CfnTopicProps {
        val builder = CfnTopicPropsDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * The value of the constant that is used to specify the endpoints of a range filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * RangeConstantProperty rangeConstantProperty = RangeConstantProperty.builder()
     * .maximum("maximum")
     * .minimum("minimum")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-rangeconstant.html)
     */
    public inline fun cfnTopicRangeConstantProperty(
        block: CfnTopicRangeConstantPropertyDsl.() -> Unit = {}
    ): CfnTopic.RangeConstantProperty {
        val builder = CfnTopicRangeConstantPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a semantic entity type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SemanticEntityTypeProperty semanticEntityTypeProperty = SemanticEntityTypeProperty.builder()
     * .subTypeName("subTypeName")
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semanticentitytype.html)
     */
    public inline fun cfnTopicSemanticEntityTypeProperty(
        block: CfnTopicSemanticEntityTypePropertyDsl.() -> Unit = {}
    ): CfnTopic.SemanticEntityTypeProperty {
        val builder = CfnTopicSemanticEntityTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a semantic type.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * SemanticTypeProperty semanticTypeProperty = SemanticTypeProperty.builder()
     * .falseyCellValue("falseyCellValue")
     * .falseyCellValueSynonyms(List.of("falseyCellValueSynonyms"))
     * .subTypeName("subTypeName")
     * .truthyCellValue("truthyCellValue")
     * .truthyCellValueSynonyms(List.of("truthyCellValueSynonyms"))
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semantictype.html)
     */
    public inline fun cfnTopicSemanticTypeProperty(
        block: CfnTopicSemanticTypePropertyDsl.() -> Unit = {}
    ): CfnTopic.SemanticTypeProperty {
        val builder = CfnTopicSemanticTypePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a calculated field.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopicCalculatedFieldProperty topicCalculatedFieldProperty =
     * TopicCalculatedFieldProperty.builder()
     * .calculatedFieldName("calculatedFieldName")
     * .expression("expression")
     * // the properties below are optional
     * .aggregation("aggregation")
     * .allowedAggregations(List.of("allowedAggregations"))
     * .calculatedFieldDescription("calculatedFieldDescription")
     * .calculatedFieldSynonyms(List.of("calculatedFieldSynonyms"))
     * .cellValueSynonyms(List.of(CellValueSynonymProperty.builder()
     * .cellValue("cellValue")
     * .synonyms(List.of("synonyms"))
     * .build()))
     * .columnDataRole("columnDataRole")
     * .comparativeOrder(ComparativeOrderProperty.builder()
     * .specifedOrder(List.of("specifedOrder"))
     * .treatUndefinedSpecifiedValues("treatUndefinedSpecifiedValues")
     * .useOrdering("useOrdering")
     * .build())
     * .defaultFormatting(DefaultFormattingProperty.builder()
     * .displayFormat("displayFormat")
     * .displayFormatOptions(DisplayFormatOptionsProperty.builder()
     * .blankCellFormat("blankCellFormat")
     * .currencySymbol("currencySymbol")
     * .dateFormat("dateFormat")
     * .decimalSeparator("decimalSeparator")
     * .fractionDigits(123)
     * .groupingSeparator("groupingSeparator")
     * .negativeFormat(NegativeFormatProperty.builder()
     * .prefix("prefix")
     * .suffix("suffix")
     * .build())
     * .prefix("prefix")
     * .suffix("suffix")
     * .unitScaler("unitScaler")
     * .useBlankCellFormat(false)
     * .useGrouping(false)
     * .build())
     * .build())
     * .isIncludedInTopic(false)
     * .neverAggregateInFilter(false)
     * .notAllowedAggregations(List.of("notAllowedAggregations"))
     * .semanticType(SemanticTypeProperty.builder()
     * .falseyCellValue("falseyCellValue")
     * .falseyCellValueSynonyms(List.of("falseyCellValueSynonyms"))
     * .subTypeName("subTypeName")
     * .truthyCellValue("truthyCellValue")
     * .truthyCellValueSynonyms(List.of("truthyCellValueSynonyms"))
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build())
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html)
     */
    public inline fun cfnTopicTopicCalculatedFieldProperty(
        block: CfnTopicTopicCalculatedFieldPropertyDsl.() -> Unit = {}
    ): CfnTopic.TopicCalculatedFieldProperty {
        val builder = CfnTopicTopicCalculatedFieldPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A constant used in a category filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopicCategoryFilterConstantProperty topicCategoryFilterConstantProperty =
     * TopicCategoryFilterConstantProperty.builder()
     * .collectiveConstant(CollectiveConstantProperty.builder()
     * .valueList(List.of("valueList"))
     * .build())
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccategoryfilterconstant.html)
     */
    public inline fun cfnTopicTopicCategoryFilterConstantProperty(
        block: CfnTopicTopicCategoryFilterConstantPropertyDsl.() -> Unit = {}
    ): CfnTopic.TopicCategoryFilterConstantProperty {
        val builder = CfnTopicTopicCategoryFilterConstantPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a category filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopicCategoryFilterProperty topicCategoryFilterProperty = TopicCategoryFilterProperty.builder()
     * .categoryFilterFunction("categoryFilterFunction")
     * .categoryFilterType("categoryFilterType")
     * .constant(TopicCategoryFilterConstantProperty.builder()
     * .collectiveConstant(CollectiveConstantProperty.builder()
     * .valueList(List.of("valueList"))
     * .build())
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .inverse(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccategoryfilter.html)
     */
    public inline fun cfnTopicTopicCategoryFilterProperty(
        block: CfnTopicTopicCategoryFilterPropertyDsl.() -> Unit = {}
    ): CfnTopic.TopicCategoryFilterProperty {
        val builder = CfnTopicTopicCategoryFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Represents a column in a dataset.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopicColumnProperty topicColumnProperty = TopicColumnProperty.builder()
     * .columnName("columnName")
     * // the properties below are optional
     * .aggregation("aggregation")
     * .allowedAggregations(List.of("allowedAggregations"))
     * .cellValueSynonyms(List.of(CellValueSynonymProperty.builder()
     * .cellValue("cellValue")
     * .synonyms(List.of("synonyms"))
     * .build()))
     * .columnDataRole("columnDataRole")
     * .columnDescription("columnDescription")
     * .columnFriendlyName("columnFriendlyName")
     * .columnSynonyms(List.of("columnSynonyms"))
     * .comparativeOrder(ComparativeOrderProperty.builder()
     * .specifedOrder(List.of("specifedOrder"))
     * .treatUndefinedSpecifiedValues("treatUndefinedSpecifiedValues")
     * .useOrdering("useOrdering")
     * .build())
     * .defaultFormatting(DefaultFormattingProperty.builder()
     * .displayFormat("displayFormat")
     * .displayFormatOptions(DisplayFormatOptionsProperty.builder()
     * .blankCellFormat("blankCellFormat")
     * .currencySymbol("currencySymbol")
     * .dateFormat("dateFormat")
     * .decimalSeparator("decimalSeparator")
     * .fractionDigits(123)
     * .groupingSeparator("groupingSeparator")
     * .negativeFormat(NegativeFormatProperty.builder()
     * .prefix("prefix")
     * .suffix("suffix")
     * .build())
     * .prefix("prefix")
     * .suffix("suffix")
     * .unitScaler("unitScaler")
     * .useBlankCellFormat(false)
     * .useGrouping(false)
     * .build())
     * .build())
     * .isIncludedInTopic(false)
     * .neverAggregateInFilter(false)
     * .notAllowedAggregations(List.of("notAllowedAggregations"))
     * .semanticType(SemanticTypeProperty.builder()
     * .falseyCellValue("falseyCellValue")
     * .falseyCellValueSynonyms(List.of("falseyCellValueSynonyms"))
     * .subTypeName("subTypeName")
     * .truthyCellValue("truthyCellValue")
     * .truthyCellValueSynonyms(List.of("truthyCellValueSynonyms"))
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build())
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html)
     */
    public inline fun cfnTopicTopicColumnProperty(
        block: CfnTopicTopicColumnPropertyDsl.() -> Unit = {}
    ): CfnTopic.TopicColumnProperty {
        val builder = CfnTopicTopicColumnPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A filter used to restrict data based on a range of dates or times.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopicDateRangeFilterProperty topicDateRangeFilterProperty =
     * TopicDateRangeFilterProperty.builder()
     * .constant(TopicRangeFilterConstantProperty.builder()
     * .constantType("constantType")
     * .rangeConstant(RangeConstantProperty.builder()
     * .maximum("maximum")
     * .minimum("minimum")
     * .build())
     * .build())
     * .inclusive(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicdaterangefilter.html)
     */
    public inline fun cfnTopicTopicDateRangeFilterProperty(
        block: CfnTopicTopicDateRangeFilterPropertyDsl.() -> Unit = {}
    ): CfnTopic.TopicDateRangeFilterProperty {
        val builder = CfnTopicTopicDateRangeFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a filter used to select items for a topic.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopicFilterProperty topicFilterProperty = TopicFilterProperty.builder()
     * .filterName("filterName")
     * .operandFieldName("operandFieldName")
     * // the properties below are optional
     * .categoryFilter(TopicCategoryFilterProperty.builder()
     * .categoryFilterFunction("categoryFilterFunction")
     * .categoryFilterType("categoryFilterType")
     * .constant(TopicCategoryFilterConstantProperty.builder()
     * .collectiveConstant(CollectiveConstantProperty.builder()
     * .valueList(List.of("valueList"))
     * .build())
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .inverse(false)
     * .build())
     * .dateRangeFilter(TopicDateRangeFilterProperty.builder()
     * .constant(TopicRangeFilterConstantProperty.builder()
     * .constantType("constantType")
     * .rangeConstant(RangeConstantProperty.builder()
     * .maximum("maximum")
     * .minimum("minimum")
     * .build())
     * .build())
     * .inclusive(false)
     * .build())
     * .filterClass("filterClass")
     * .filterDescription("filterDescription")
     * .filterSynonyms(List.of("filterSynonyms"))
     * .filterType("filterType")
     * .numericEqualityFilter(TopicNumericEqualityFilterProperty.builder()
     * .aggregation("aggregation")
     * .constant(TopicSingularFilterConstantProperty.builder()
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .build())
     * .numericRangeFilter(TopicNumericRangeFilterProperty.builder()
     * .aggregation("aggregation")
     * .constant(TopicRangeFilterConstantProperty.builder()
     * .constantType("constantType")
     * .rangeConstant(RangeConstantProperty.builder()
     * .maximum("maximum")
     * .minimum("minimum")
     * .build())
     * .build())
     * .inclusive(false)
     * .build())
     * .relativeDateFilter(TopicRelativeDateFilterProperty.builder()
     * .constant(TopicSingularFilterConstantProperty.builder()
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .relativeDateFilterFunction("relativeDateFilterFunction")
     * .timeGranularity("timeGranularity")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html)
     */
    public inline fun cfnTopicTopicFilterProperty(
        block: CfnTopicTopicFilterPropertyDsl.() -> Unit = {}
    ): CfnTopic.TopicFilterProperty {
        val builder = CfnTopicTopicFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a named entity.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopicNamedEntityProperty topicNamedEntityProperty = TopicNamedEntityProperty.builder()
     * .entityName("entityName")
     * // the properties below are optional
     * .definition(List.of(NamedEntityDefinitionProperty.builder()
     * .fieldName("fieldName")
     * .metric(NamedEntityDefinitionMetricProperty.builder()
     * .aggregation("aggregation")
     * .aggregationFunctionParameters(Map.of(
     * "aggregationFunctionParametersKey", "aggregationFunctionParameters"))
     * .build())
     * .propertyName("propertyName")
     * .propertyRole("propertyRole")
     * .propertyUsage("propertyUsage")
     * .build()))
     * .entityDescription("entityDescription")
     * .entitySynonyms(List.of("entitySynonyms"))
     * .semanticEntityType(SemanticEntityTypeProperty.builder()
     * .subTypeName("subTypeName")
     * .typeName("typeName")
     * .typeParameters(Map.of(
     * "typeParametersKey", "typeParameters"))
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnamedentity.html)
     */
    public inline fun cfnTopicTopicNamedEntityProperty(
        block: CfnTopicTopicNamedEntityPropertyDsl.() -> Unit = {}
    ): CfnTopic.TopicNamedEntityProperty {
        val builder = CfnTopicTopicNamedEntityPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A filter that filters topics based on the value of a numeric field.
     *
     * The filter includes only topics whose numeric field value matches the specified value.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopicNumericEqualityFilterProperty topicNumericEqualityFilterProperty =
     * TopicNumericEqualityFilterProperty.builder()
     * .aggregation("aggregation")
     * .constant(TopicSingularFilterConstantProperty.builder()
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnumericequalityfilter.html)
     */
    public inline fun cfnTopicTopicNumericEqualityFilterProperty(
        block: CfnTopicTopicNumericEqualityFilterPropertyDsl.() -> Unit = {}
    ): CfnTopic.TopicNumericEqualityFilterProperty {
        val builder = CfnTopicTopicNumericEqualityFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A filter that filters topics based on the value of a numeric field.
     *
     * The filter includes only topics whose numeric field value falls within the specified range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopicNumericRangeFilterProperty topicNumericRangeFilterProperty =
     * TopicNumericRangeFilterProperty.builder()
     * .aggregation("aggregation")
     * .constant(TopicRangeFilterConstantProperty.builder()
     * .constantType("constantType")
     * .rangeConstant(RangeConstantProperty.builder()
     * .maximum("maximum")
     * .minimum("minimum")
     * .build())
     * .build())
     * .inclusive(false)
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnumericrangefilter.html)
     */
    public inline fun cfnTopicTopicNumericRangeFilterProperty(
        block: CfnTopicTopicNumericRangeFilterPropertyDsl.() -> Unit = {}
    ): CfnTopic.TopicNumericRangeFilterProperty {
        val builder = CfnTopicTopicNumericRangeFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A constant value that is used in a range filter to specify the endpoints of the range.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopicRangeFilterConstantProperty topicRangeFilterConstantProperty =
     * TopicRangeFilterConstantProperty.builder()
     * .constantType("constantType")
     * .rangeConstant(RangeConstantProperty.builder()
     * .maximum("maximum")
     * .minimum("minimum")
     * .build())
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicrangefilterconstant.html)
     */
    public inline fun cfnTopicTopicRangeFilterConstantProperty(
        block: CfnTopicTopicRangeFilterConstantPropertyDsl.() -> Unit = {}
    ): CfnTopic.TopicRangeFilterConstantProperty {
        val builder = CfnTopicTopicRangeFilterConstantPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a relative date filter.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopicRelativeDateFilterProperty topicRelativeDateFilterProperty =
     * TopicRelativeDateFilterProperty.builder()
     * .constant(TopicSingularFilterConstantProperty.builder()
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build())
     * .relativeDateFilterFunction("relativeDateFilterFunction")
     * .timeGranularity("timeGranularity")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicrelativedatefilter.html)
     */
    public inline fun cfnTopicTopicRelativeDateFilterProperty(
        block: CfnTopicTopicRelativeDateFilterPropertyDsl.() -> Unit = {}
    ): CfnTopic.TopicRelativeDateFilterProperty {
        val builder = CfnTopicTopicRelativeDateFilterPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * A structure that represents a singular filter constant, used in filters to specify a single
     * value to match against.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * TopicSingularFilterConstantProperty topicSingularFilterConstantProperty =
     * TopicSingularFilterConstantProperty.builder()
     * .constantType("constantType")
     * .singularConstant("singularConstant")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicsingularfilterconstant.html)
     */
    public inline fun cfnTopicTopicSingularFilterConstantProperty(
        block: CfnTopicTopicSingularFilterConstantPropertyDsl.() -> Unit = {}
    ): CfnTopic.TopicSingularFilterConstantProperty {
        val builder = CfnTopicTopicSingularFilterConstantPropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Creates a new VPC connection.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CfnVPCConnection cfnVPCConnection = CfnVPCConnection.Builder.create(this, "MyCfnVPCConnection")
     * .availabilityStatus("availabilityStatus")
     * .awsAccountId("awsAccountId")
     * .dnsResolvers(List.of("dnsResolvers"))
     * .name("name")
     * .roleArn("roleArn")
     * .securityGroupIds(List.of("securityGroupIds"))
     * .subnetIds(List.of("subnetIds"))
     * .tags(List.of(CfnTag.builder()
     * .key("key")
     * .value("value")
     * .build()))
     * .vpcConnectionId("vpcConnectionId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-vpcconnection.html)
     */
    public inline fun cfnVPCConnection(
        scope: Construct,
        id: String,
        block: CfnVPCConnectionDsl.() -> Unit = {},
    ): CfnVPCConnection {
        val builder = CfnVPCConnectionDsl(scope, id)
        builder.apply(block)
        return builder.build()
    }

    /**
     * The structure that contains information about a network interface.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * NetworkInterfaceProperty networkInterfaceProperty = NetworkInterfaceProperty.builder()
     * .availabilityZone("availabilityZone")
     * .errorMessage("errorMessage")
     * .networkInterfaceId("networkInterfaceId")
     * .status("status")
     * .subnetId("subnetId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-vpcconnection-networkinterface.html)
     */
    public inline fun cfnVPCConnectionNetworkInterfaceProperty(
        block: CfnVPCConnectionNetworkInterfacePropertyDsl.() -> Unit = {}
    ): CfnVPCConnection.NetworkInterfaceProperty {
        val builder = CfnVPCConnectionNetworkInterfacePropertyDsl()
        builder.apply(block)
        return builder.build()
    }

    /**
     * Properties for defining a `CfnVPCConnection`.
     *
     * Example:
     * ```
     * // The code below shows an example of how to instantiate this type.
     * // The values are placeholders you should change.
     * import software.amazon.awscdk.services.quicksight.*;
     * CfnVPCConnectionProps cfnVPCConnectionProps = CfnVPCConnectionProps.builder()
     * .availabilityStatus("availabilityStatus")
     * .awsAccountId("awsAccountId")
     * .dnsResolvers(List.of("dnsResolvers"))
     * .name("name")
     * .roleArn("roleArn")
     * .securityGroupIds(List.of("securityGroupIds"))
     * .subnetIds(List.of("subnetIds"))
     * .tags(List.of(CfnTag.builder()
     * .key("key")
     * .value("value")
     * .build()))
     * .vpcConnectionId("vpcConnectionId")
     * .build();
     * ```
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-vpcconnection.html)
     */
    public inline fun cfnVPCConnectionProps(
        block: CfnVPCConnectionPropsDsl.() -> Unit = {}
    ): CfnVPCConnectionProps {
        val builder = CfnVPCConnectionPropsDsl()
        builder.apply(block)
        return builder.build()
    }
}
