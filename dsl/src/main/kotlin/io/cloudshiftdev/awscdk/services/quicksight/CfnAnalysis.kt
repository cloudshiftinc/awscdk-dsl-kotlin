package io.cloudshiftdev.awscdk.services.quicksight

import io.cloudshiftdev.awscdk.CfnResource
import io.cloudshiftdev.awscdk.CfnTag
import io.cloudshiftdev.awscdk.IInspectable
import io.cloudshiftdev.awscdk.IResolvable
import io.cloudshiftdev.awscdk.ITaggable
import io.cloudshiftdev.awscdk.TagManager
import io.cloudshiftdev.awscdk.TreeInspector
import io.cloudshiftdev.awscdk.common.CdkDslMarker
import kotlin.Any
import kotlin.Boolean
import kotlin.Number
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmName
import io.cloudshiftdev.constructs.Construct as CloudshiftdevConstructsConstruct
import software.constructs.Construct as SoftwareConstructsConstruct

public open class CfnAnalysis internal constructor(
  private val cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis,
) : CfnResource(cdkObject), IInspectable, ITaggable {
  /**
   * The ID for the analysis that you're creating.
   */
  public open fun analysisId(): String = unwrap(this).getAnalysisId()

  /**
   * The ID for the analysis that you're creating.
   */
  public open fun analysisId(`value`: String) {
    unwrap(this).setAnalysisId(`value`)
  }

  /**
   * The Amazon Resource Name (ARN) of the analysis.
   */
  public open fun attrArn(): String = unwrap(this).getAttrArn()

  /**
   * The time that the analysis was created.
   */
  public open fun attrCreatedTime(): String = unwrap(this).getAttrCreatedTime()

  /**
   * The ARNs of the datasets of the analysis.
   */
  public open fun attrDataSetArns(): List<String> = unwrap(this).getAttrDataSetArns()

  /**
   *
   */
  public open fun attrErrors(): IResolvable = unwrap(this).getAttrErrors().let(IResolvable::wrap)

  /**
   * The time that the analysis was last updated.
   */
  public open fun attrLastUpdatedTime(): String = unwrap(this).getAttrLastUpdatedTime()

  /**
   *
   */
  public open fun attrSheets(): IResolvable = unwrap(this).getAttrSheets().let(IResolvable::wrap)

  /**
   * The ID of the AWS account where you are creating an analysis.
   */
  public open fun awsAccountId(): String = unwrap(this).getAwsAccountId()

  /**
   * The ID of the AWS account where you are creating an analysis.
   */
  public open fun awsAccountId(`value`: String) {
    unwrap(this).setAwsAccountId(`value`)
  }

  /**
   *
   */
  public open fun definition(): Any? = unwrap(this).getDefinition()

  /**
   *
   */
  public open fun definition(`value`: IResolvable) {
    unwrap(this).setDefinition(`value`.let(IResolvable::unwrap))
  }

  /**
   *
   */
  public open fun definition(`value`: AnalysisDefinitionProperty) {
    unwrap(this).setDefinition(`value`.let(AnalysisDefinitionProperty::unwrap))
  }

  /**
   *
   */
  @Suppress("INAPPLICABLE_JVM_NAME")
  @JvmName("251ccdf552ab29a7354812742f684967ffd43c36241ce18136cb1d0a54af3fbb")
  public open fun definition(`value`: AnalysisDefinitionProperty.Builder.() -> Unit): Unit =
      definition(AnalysisDefinitionProperty(`value`))

  /**
   * Errors associated with the analysis.
   */
  public open fun errors(): Any? = unwrap(this).getErrors()

  /**
   * Errors associated with the analysis.
   */
  public open fun errors(`value`: IResolvable) {
    unwrap(this).setErrors(`value`.let(IResolvable::unwrap))
  }

  /**
   * Errors associated with the analysis.
   */
  public open fun errors(__idx_ac66f0: List<Any>) {
    unwrap(this).setErrors(__idx_ac66f0)
  }

  /**
   * Errors associated with the analysis.
   */
  public open fun errors(vararg __idx_ac66f0: Any): Unit = errors(__idx_ac66f0.toList())

  /**
   * Examines the CloudFormation resource and discloses attributes.
   *
   * @param inspector tree inspector to collect and process attributes. 
   */
  public override fun inspect(inspector: TreeInspector) {
    unwrap(this).inspect(inspector.let(TreeInspector::unwrap))
  }

  /**
   * A descriptive name for the analysis that you're creating.
   */
  public open fun name(): String = unwrap(this).getName()

  /**
   * A descriptive name for the analysis that you're creating.
   */
  public open fun name(`value`: String) {
    unwrap(this).setName(`value`)
  }

  /**
   * The parameter names and override values that you want to use.
   */
  public open fun parameters(): Any? = unwrap(this).getParameters()

  /**
   * The parameter names and override values that you want to use.
   */
  public open fun parameters(`value`: IResolvable) {
    unwrap(this).setParameters(`value`.let(IResolvable::unwrap))
  }

  /**
   * The parameter names and override values that you want to use.
   */
  public open fun parameters(`value`: ParametersProperty) {
    unwrap(this).setParameters(`value`.let(ParametersProperty::unwrap))
  }

  /**
   * The parameter names and override values that you want to use.
   */
  @Suppress("INAPPLICABLE_JVM_NAME")
  @JvmName("e2b5e3d58a69a576c9539f0cda74bb8b69bd43a689295b37052620da544119fd")
  public open fun parameters(`value`: ParametersProperty.Builder.() -> Unit): Unit =
      parameters(ParametersProperty(`value`))

  /**
   * A structure that describes the principals and the resource-level permissions on an analysis.
   */
  public open fun permissions(): Any? = unwrap(this).getPermissions()

  /**
   * A structure that describes the principals and the resource-level permissions on an analysis.
   */
  public open fun permissions(`value`: IResolvable) {
    unwrap(this).setPermissions(`value`.let(IResolvable::unwrap))
  }

  /**
   * A structure that describes the principals and the resource-level permissions on an analysis.
   */
  public open fun permissions(__idx_ac66f0: List<Any>) {
    unwrap(this).setPermissions(__idx_ac66f0)
  }

  /**
   * A structure that describes the principals and the resource-level permissions on an analysis.
   */
  public open fun permissions(vararg __idx_ac66f0: Any): Unit = permissions(__idx_ac66f0.toList())

  /**
   * A list of the associated sheets with the unique identifier and name of each sheet.
   */
  public open fun sheets(): Any? = unwrap(this).getSheets()

  /**
   * A list of the associated sheets with the unique identifier and name of each sheet.
   */
  public open fun sheets(`value`: IResolvable) {
    unwrap(this).setSheets(`value`.let(IResolvable::unwrap))
  }

  /**
   * A list of the associated sheets with the unique identifier and name of each sheet.
   */
  public open fun sheets(__idx_ac66f0: List<Any>) {
    unwrap(this).setSheets(__idx_ac66f0)
  }

  /**
   * A list of the associated sheets with the unique identifier and name of each sheet.
   */
  public open fun sheets(vararg __idx_ac66f0: Any): Unit = sheets(__idx_ac66f0.toList())

  /**
   * A source entity to use for the analysis that you're creating.
   */
  public open fun sourceEntity(): Any? = unwrap(this).getSourceEntity()

  /**
   * A source entity to use for the analysis that you're creating.
   */
  public open fun sourceEntity(`value`: IResolvable) {
    unwrap(this).setSourceEntity(`value`.let(IResolvable::unwrap))
  }

  /**
   * A source entity to use for the analysis that you're creating.
   */
  public open fun sourceEntity(`value`: AnalysisSourceEntityProperty) {
    unwrap(this).setSourceEntity(`value`.let(AnalysisSourceEntityProperty::unwrap))
  }

  /**
   * A source entity to use for the analysis that you're creating.
   */
  @Suppress("INAPPLICABLE_JVM_NAME")
  @JvmName("961752df355747cf4f6ba8639ac827b05f7cd426644551f5454adfea5d1c45be")
  public open fun sourceEntity(`value`: AnalysisSourceEntityProperty.Builder.() -> Unit): Unit =
      sourceEntity(AnalysisSourceEntityProperty(`value`))

  /**
   * Status associated with the analysis.
   */
  public open fun status(): String? = unwrap(this).getStatus()

  /**
   * Status associated with the analysis.
   */
  public open fun status(`value`: String) {
    unwrap(this).setStatus(`value`)
  }

  /**
   * Tag Manager which manages the tags for this resource.
   */
  public override fun tags(): TagManager = unwrap(this).getTags().let(TagManager::wrap)

  /**
   * Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
   */
  public open fun tagsRaw(): List<CfnTag> = unwrap(this).getTagsRaw()?.map(CfnTag::wrap) ?:
      emptyList()

  /**
   * Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
   */
  public open fun tagsRaw(`value`: List<CfnTag>) {
    unwrap(this).setTagsRaw(`value`.map(CfnTag::unwrap))
  }

  /**
   * Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
   */
  public open fun tagsRaw(vararg `value`: CfnTag): Unit = tagsRaw(`value`.toList())

  /**
   * The ARN for the theme to apply to the analysis that you're creating.
   */
  public open fun themeArn(): String? = unwrap(this).getThemeArn()

  /**
   * The ARN for the theme to apply to the analysis that you're creating.
   */
  public open fun themeArn(`value`: String) {
    unwrap(this).setThemeArn(`value`)
  }

  /**
   * The option to relax the validation that is required to create and update analyses, dashboards,
   * and templates with definition objects.
   */
  public open fun validationStrategy(): Any? = unwrap(this).getValidationStrategy()

  /**
   * The option to relax the validation that is required to create and update analyses, dashboards,
   * and templates with definition objects.
   */
  public open fun validationStrategy(`value`: IResolvable) {
    unwrap(this).setValidationStrategy(`value`.let(IResolvable::unwrap))
  }

  /**
   * The option to relax the validation that is required to create and update analyses, dashboards,
   * and templates with definition objects.
   */
  public open fun validationStrategy(`value`: ValidationStrategyProperty) {
    unwrap(this).setValidationStrategy(`value`.let(ValidationStrategyProperty::unwrap))
  }

  /**
   * The option to relax the validation that is required to create and update analyses, dashboards,
   * and templates with definition objects.
   */
  @Suppress("INAPPLICABLE_JVM_NAME")
  @JvmName("63a8c54679a4e2cf31aea69277ec0a715deb4fbbe9fa7bc8ffb40cea7df1fbb1")
  public open fun validationStrategy(`value`: ValidationStrategyProperty.Builder.() -> Unit): Unit =
      validationStrategy(ValidationStrategyProperty(`value`))

  /**
   * A fluent builder for [io.cloudshiftdev.awscdk.services.quicksight.CfnAnalysis].
   */
  @CdkDslMarker
  public interface Builder {
    /**
     * The ID for the analysis that you're creating.
     *
     * This ID displays in the URL of the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-analysisid)
     * @param analysisId The ID for the analysis that you're creating. 
     */
    public fun analysisId(analysisId: String)

    /**
     * The ID of the AWS account where you are creating an analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-awsaccountid)
     * @param awsAccountId The ID of the AWS account where you are creating an analysis. 
     */
    public fun awsAccountId(awsAccountId: String)

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-definition)
     * @param definition 
     */
    public fun definition(definition: IResolvable)

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-definition)
     * @param definition 
     */
    public fun definition(definition: AnalysisDefinitionProperty)

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-definition)
     * @param definition 
     */
    @Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("ed734d5735a51afabea11df7fed916658cfde3744237378cf1906d73161ce61f")
    public fun definition(definition: AnalysisDefinitionProperty.Builder.() -> Unit)

    /**
     * Errors associated with the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-errors)
     * @param errors Errors associated with the analysis. 
     */
    public fun errors(errors: IResolvable)

    /**
     * Errors associated with the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-errors)
     * @param errors Errors associated with the analysis. 
     */
    public fun errors(errors: List<Any>)

    /**
     * Errors associated with the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-errors)
     * @param errors Errors associated with the analysis. 
     */
    public fun errors(vararg errors: Any)

    /**
     * A descriptive name for the analysis that you're creating.
     *
     * This name displays for the analysis in the Amazon QuickSight console.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-name)
     * @param name A descriptive name for the analysis that you're creating. 
     */
    public fun name(name: String)

    /**
     * The parameter names and override values that you want to use.
     *
     * An analysis can have any parameter type, and some parameters might accept multiple values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-parameters)
     * @param parameters The parameter names and override values that you want to use. 
     */
    public fun parameters(parameters: IResolvable)

    /**
     * The parameter names and override values that you want to use.
     *
     * An analysis can have any parameter type, and some parameters might accept multiple values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-parameters)
     * @param parameters The parameter names and override values that you want to use. 
     */
    public fun parameters(parameters: ParametersProperty)

    /**
     * The parameter names and override values that you want to use.
     *
     * An analysis can have any parameter type, and some parameters might accept multiple values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-parameters)
     * @param parameters The parameter names and override values that you want to use. 
     */
    @Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("e3f368a5b81aafd1646573fbe123278e35a75e787c1b6b130ef6be59c83290e6")
    public fun parameters(parameters: ParametersProperty.Builder.() -> Unit)

    /**
     * A structure that describes the principals and the resource-level permissions on an analysis.
     *
     * You can use the `Permissions` structure to grant permissions by providing a list of AWS
     * Identity and Access Management (IAM) action information for each principal listed by Amazon
     * Resource Name (ARN).
     *
     * To specify no permissions, omit `Permissions` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-permissions)
     * @param permissions A structure that describes the principals and the resource-level
     * permissions on an analysis. 
     */
    public fun permissions(permissions: IResolvable)

    /**
     * A structure that describes the principals and the resource-level permissions on an analysis.
     *
     * You can use the `Permissions` structure to grant permissions by providing a list of AWS
     * Identity and Access Management (IAM) action information for each principal listed by Amazon
     * Resource Name (ARN).
     *
     * To specify no permissions, omit `Permissions` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-permissions)
     * @param permissions A structure that describes the principals and the resource-level
     * permissions on an analysis. 
     */
    public fun permissions(permissions: List<Any>)

    /**
     * A structure that describes the principals and the resource-level permissions on an analysis.
     *
     * You can use the `Permissions` structure to grant permissions by providing a list of AWS
     * Identity and Access Management (IAM) action information for each principal listed by Amazon
     * Resource Name (ARN).
     *
     * To specify no permissions, omit `Permissions` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-permissions)
     * @param permissions A structure that describes the principals and the resource-level
     * permissions on an analysis. 
     */
    public fun permissions(vararg permissions: Any)

    /**
     * A list of the associated sheets with the unique identifier and name of each sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sheets)
     * @param sheets A list of the associated sheets with the unique identifier and name of each
     * sheet. 
     */
    public fun sheets(sheets: IResolvable)

    /**
     * A list of the associated sheets with the unique identifier and name of each sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sheets)
     * @param sheets A list of the associated sheets with the unique identifier and name of each
     * sheet. 
     */
    public fun sheets(sheets: List<Any>)

    /**
     * A list of the associated sheets with the unique identifier and name of each sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sheets)
     * @param sheets A list of the associated sheets with the unique identifier and name of each
     * sheet. 
     */
    public fun sheets(vararg sheets: Any)

    /**
     * A source entity to use for the analysis that you're creating.
     *
     * This metadata structure contains details that describe a source template and one or more
     * datasets.
     *
     * Either a `SourceEntity` or a `Definition` must be provided in order for the request to be
     * valid.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sourceentity)
     * @param sourceEntity A source entity to use for the analysis that you're creating. 
     */
    public fun sourceEntity(sourceEntity: IResolvable)

    /**
     * A source entity to use for the analysis that you're creating.
     *
     * This metadata structure contains details that describe a source template and one or more
     * datasets.
     *
     * Either a `SourceEntity` or a `Definition` must be provided in order for the request to be
     * valid.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sourceentity)
     * @param sourceEntity A source entity to use for the analysis that you're creating. 
     */
    public fun sourceEntity(sourceEntity: AnalysisSourceEntityProperty)

    /**
     * A source entity to use for the analysis that you're creating.
     *
     * This metadata structure contains details that describe a source template and one or more
     * datasets.
     *
     * Either a `SourceEntity` or a `Definition` must be provided in order for the request to be
     * valid.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sourceentity)
     * @param sourceEntity A source entity to use for the analysis that you're creating. 
     */
    @Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("b625adea3a7b6f43c9203b8b8111ee02693a4b6952d18d9f9473a8bad2b188d6")
    public fun sourceEntity(sourceEntity: AnalysisSourceEntityProperty.Builder.() -> Unit)

    /**
     * Status associated with the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-status)
     * @param status Status associated with the analysis. 
     */
    public fun status(status: String)

    /**
     * Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-tags)
     * @param tags Contains a map of the key-value pairs for the resource tag or tags assigned to
     * the analysis. 
     */
    public fun tags(tags: List<CfnTag>)

    /**
     * Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-tags)
     * @param tags Contains a map of the key-value pairs for the resource tag or tags assigned to
     * the analysis. 
     */
    public fun tags(vararg tags: CfnTag)

    /**
     * The ARN for the theme to apply to the analysis that you're creating.
     *
     * To see the theme in the Amazon QuickSight console, make sure that you have access to it.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-themearn)
     * @param themeArn The ARN for the theme to apply to the analysis that you're creating. 
     */
    public fun themeArn(themeArn: String)

    /**
     * The option to relax the validation that is required to create and update analyses,
     * dashboards, and templates with definition objects.
     *
     * When you set this value to `LENIENT` , validation is skipped for specific errors.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-validationstrategy)
     * @param validationStrategy The option to relax the validation that is required to create and
     * update analyses, dashboards, and templates with definition objects. 
     */
    public fun validationStrategy(validationStrategy: IResolvable)

    /**
     * The option to relax the validation that is required to create and update analyses,
     * dashboards, and templates with definition objects.
     *
     * When you set this value to `LENIENT` , validation is skipped for specific errors.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-validationstrategy)
     * @param validationStrategy The option to relax the validation that is required to create and
     * update analyses, dashboards, and templates with definition objects. 
     */
    public fun validationStrategy(validationStrategy: ValidationStrategyProperty)

    /**
     * The option to relax the validation that is required to create and update analyses,
     * dashboards, and templates with definition objects.
     *
     * When you set this value to `LENIENT` , validation is skipped for specific errors.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-validationstrategy)
     * @param validationStrategy The option to relax the validation that is required to create and
     * update analyses, dashboards, and templates with definition objects. 
     */
    @Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("328ca8aefc99924623a47baf1a808ff4f78e51a4b2f312ecbc61d2228ed7109f")
    public fun validationStrategy(validationStrategy: ValidationStrategyProperty.Builder.() -> Unit)
  }

  private class BuilderImpl(
    scope: SoftwareConstructsConstruct,
    id: String,
  ) : Builder {
    private val cdkBuilder: software.amazon.awscdk.services.quicksight.CfnAnalysis.Builder =
        software.amazon.awscdk.services.quicksight.CfnAnalysis.Builder.create(scope, id)

    /**
     * The ID for the analysis that you're creating.
     *
     * This ID displays in the URL of the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-analysisid)
     * @param analysisId The ID for the analysis that you're creating. 
     */
    override fun analysisId(analysisId: String) {
      cdkBuilder.analysisId(analysisId)
    }

    /**
     * The ID of the AWS account where you are creating an analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-awsaccountid)
     * @param awsAccountId The ID of the AWS account where you are creating an analysis. 
     */
    override fun awsAccountId(awsAccountId: String) {
      cdkBuilder.awsAccountId(awsAccountId)
    }

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-definition)
     * @param definition 
     */
    override fun definition(definition: IResolvable) {
      cdkBuilder.definition(definition.let(IResolvable::unwrap))
    }

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-definition)
     * @param definition 
     */
    override fun definition(definition: AnalysisDefinitionProperty) {
      cdkBuilder.definition(definition.let(AnalysisDefinitionProperty::unwrap))
    }

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-definition)
     * @param definition 
     */
    @Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("ed734d5735a51afabea11df7fed916658cfde3744237378cf1906d73161ce61f")
    override fun definition(definition: AnalysisDefinitionProperty.Builder.() -> Unit): Unit =
        definition(AnalysisDefinitionProperty(definition))

    /**
     * Errors associated with the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-errors)
     * @param errors Errors associated with the analysis. 
     */
    override fun errors(errors: IResolvable) {
      cdkBuilder.errors(errors.let(IResolvable::unwrap))
    }

    /**
     * Errors associated with the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-errors)
     * @param errors Errors associated with the analysis. 
     */
    override fun errors(errors: List<Any>) {
      cdkBuilder.errors(errors)
    }

    /**
     * Errors associated with the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-errors)
     * @param errors Errors associated with the analysis. 
     */
    override fun errors(vararg errors: Any): Unit = errors(errors.toList())

    /**
     * A descriptive name for the analysis that you're creating.
     *
     * This name displays for the analysis in the Amazon QuickSight console.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-name)
     * @param name A descriptive name for the analysis that you're creating. 
     */
    override fun name(name: String) {
      cdkBuilder.name(name)
    }

    /**
     * The parameter names and override values that you want to use.
     *
     * An analysis can have any parameter type, and some parameters might accept multiple values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-parameters)
     * @param parameters The parameter names and override values that you want to use. 
     */
    override fun parameters(parameters: IResolvable) {
      cdkBuilder.parameters(parameters.let(IResolvable::unwrap))
    }

    /**
     * The parameter names and override values that you want to use.
     *
     * An analysis can have any parameter type, and some parameters might accept multiple values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-parameters)
     * @param parameters The parameter names and override values that you want to use. 
     */
    override fun parameters(parameters: ParametersProperty) {
      cdkBuilder.parameters(parameters.let(ParametersProperty::unwrap))
    }

    /**
     * The parameter names and override values that you want to use.
     *
     * An analysis can have any parameter type, and some parameters might accept multiple values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-parameters)
     * @param parameters The parameter names and override values that you want to use. 
     */
    @Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("e3f368a5b81aafd1646573fbe123278e35a75e787c1b6b130ef6be59c83290e6")
    override fun parameters(parameters: ParametersProperty.Builder.() -> Unit): Unit =
        parameters(ParametersProperty(parameters))

    /**
     * A structure that describes the principals and the resource-level permissions on an analysis.
     *
     * You can use the `Permissions` structure to grant permissions by providing a list of AWS
     * Identity and Access Management (IAM) action information for each principal listed by Amazon
     * Resource Name (ARN).
     *
     * To specify no permissions, omit `Permissions` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-permissions)
     * @param permissions A structure that describes the principals and the resource-level
     * permissions on an analysis. 
     */
    override fun permissions(permissions: IResolvable) {
      cdkBuilder.permissions(permissions.let(IResolvable::unwrap))
    }

    /**
     * A structure that describes the principals and the resource-level permissions on an analysis.
     *
     * You can use the `Permissions` structure to grant permissions by providing a list of AWS
     * Identity and Access Management (IAM) action information for each principal listed by Amazon
     * Resource Name (ARN).
     *
     * To specify no permissions, omit `Permissions` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-permissions)
     * @param permissions A structure that describes the principals and the resource-level
     * permissions on an analysis. 
     */
    override fun permissions(permissions: List<Any>) {
      cdkBuilder.permissions(permissions)
    }

    /**
     * A structure that describes the principals and the resource-level permissions on an analysis.
     *
     * You can use the `Permissions` structure to grant permissions by providing a list of AWS
     * Identity and Access Management (IAM) action information for each principal listed by Amazon
     * Resource Name (ARN).
     *
     * To specify no permissions, omit `Permissions` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-permissions)
     * @param permissions A structure that describes the principals and the resource-level
     * permissions on an analysis. 
     */
    override fun permissions(vararg permissions: Any): Unit = permissions(permissions.toList())

    /**
     * A list of the associated sheets with the unique identifier and name of each sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sheets)
     * @param sheets A list of the associated sheets with the unique identifier and name of each
     * sheet. 
     */
    override fun sheets(sheets: IResolvable) {
      cdkBuilder.sheets(sheets.let(IResolvable::unwrap))
    }

    /**
     * A list of the associated sheets with the unique identifier and name of each sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sheets)
     * @param sheets A list of the associated sheets with the unique identifier and name of each
     * sheet. 
     */
    override fun sheets(sheets: List<Any>) {
      cdkBuilder.sheets(sheets)
    }

    /**
     * A list of the associated sheets with the unique identifier and name of each sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sheets)
     * @param sheets A list of the associated sheets with the unique identifier and name of each
     * sheet. 
     */
    override fun sheets(vararg sheets: Any): Unit = sheets(sheets.toList())

    /**
     * A source entity to use for the analysis that you're creating.
     *
     * This metadata structure contains details that describe a source template and one or more
     * datasets.
     *
     * Either a `SourceEntity` or a `Definition` must be provided in order for the request to be
     * valid.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sourceentity)
     * @param sourceEntity A source entity to use for the analysis that you're creating. 
     */
    override fun sourceEntity(sourceEntity: IResolvable) {
      cdkBuilder.sourceEntity(sourceEntity.let(IResolvable::unwrap))
    }

    /**
     * A source entity to use for the analysis that you're creating.
     *
     * This metadata structure contains details that describe a source template and one or more
     * datasets.
     *
     * Either a `SourceEntity` or a `Definition` must be provided in order for the request to be
     * valid.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sourceentity)
     * @param sourceEntity A source entity to use for the analysis that you're creating. 
     */
    override fun sourceEntity(sourceEntity: AnalysisSourceEntityProperty) {
      cdkBuilder.sourceEntity(sourceEntity.let(AnalysisSourceEntityProperty::unwrap))
    }

    /**
     * A source entity to use for the analysis that you're creating.
     *
     * This metadata structure contains details that describe a source template and one or more
     * datasets.
     *
     * Either a `SourceEntity` or a `Definition` must be provided in order for the request to be
     * valid.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sourceentity)
     * @param sourceEntity A source entity to use for the analysis that you're creating. 
     */
    @Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("b625adea3a7b6f43c9203b8b8111ee02693a4b6952d18d9f9473a8bad2b188d6")
    override fun sourceEntity(sourceEntity: AnalysisSourceEntityProperty.Builder.() -> Unit): Unit =
        sourceEntity(AnalysisSourceEntityProperty(sourceEntity))

    /**
     * Status associated with the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-status)
     * @param status Status associated with the analysis. 
     */
    override fun status(status: String) {
      cdkBuilder.status(status)
    }

    /**
     * Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-tags)
     * @param tags Contains a map of the key-value pairs for the resource tag or tags assigned to
     * the analysis. 
     */
    override fun tags(tags: List<CfnTag>) {
      cdkBuilder.tags(tags.map(CfnTag::unwrap))
    }

    /**
     * Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-tags)
     * @param tags Contains a map of the key-value pairs for the resource tag or tags assigned to
     * the analysis. 
     */
    override fun tags(vararg tags: CfnTag): Unit = tags(tags.toList())

    /**
     * The ARN for the theme to apply to the analysis that you're creating.
     *
     * To see the theme in the Amazon QuickSight console, make sure that you have access to it.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-themearn)
     * @param themeArn The ARN for the theme to apply to the analysis that you're creating. 
     */
    override fun themeArn(themeArn: String) {
      cdkBuilder.themeArn(themeArn)
    }

    /**
     * The option to relax the validation that is required to create and update analyses,
     * dashboards, and templates with definition objects.
     *
     * When you set this value to `LENIENT` , validation is skipped for specific errors.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-validationstrategy)
     * @param validationStrategy The option to relax the validation that is required to create and
     * update analyses, dashboards, and templates with definition objects. 
     */
    override fun validationStrategy(validationStrategy: IResolvable) {
      cdkBuilder.validationStrategy(validationStrategy.let(IResolvable::unwrap))
    }

    /**
     * The option to relax the validation that is required to create and update analyses,
     * dashboards, and templates with definition objects.
     *
     * When you set this value to `LENIENT` , validation is skipped for specific errors.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-validationstrategy)
     * @param validationStrategy The option to relax the validation that is required to create and
     * update analyses, dashboards, and templates with definition objects. 
     */
    override fun validationStrategy(validationStrategy: ValidationStrategyProperty) {
      cdkBuilder.validationStrategy(validationStrategy.let(ValidationStrategyProperty::unwrap))
    }

    /**
     * The option to relax the validation that is required to create and update analyses,
     * dashboards, and templates with definition objects.
     *
     * When you set this value to `LENIENT` , validation is skipped for specific errors.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-validationstrategy)
     * @param validationStrategy The option to relax the validation that is required to create and
     * update analyses, dashboards, and templates with definition objects. 
     */
    @Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("328ca8aefc99924623a47baf1a808ff4f78e51a4b2f312ecbc61d2228ed7109f")
    override
        fun validationStrategy(validationStrategy: ValidationStrategyProperty.Builder.() -> Unit):
        Unit = validationStrategy(ValidationStrategyProperty(validationStrategy))

    public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis = cdkBuilder.build()
  }

  public companion object {
    init {

    }

    public operator fun invoke(
      scope: CloudshiftdevConstructsConstruct,
      id: String,
      block: Builder.() -> Unit = {},
    ): CfnAnalysis {
      val builderImpl = BuilderImpl(CloudshiftdevConstructsConstruct.unwrap(scope), id)
      return CfnAnalysis(builderImpl.apply(block).build())
    }

    internal fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis):
        CfnAnalysis = CfnAnalysis(cdkObject)

    internal fun unwrap(wrapped: CfnAnalysis):
        software.amazon.awscdk.services.quicksight.CfnAnalysis = wrapped.cdkObject
  }

  public interface PivotTableRowsLabelOptionsProperty {
    /**
     * The custom label string for the rows label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablerowslabeloptions.html#cfn-quicksight-analysis-pivottablerowslabeloptions-customlabel)
     */
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    /**
     * The visibility of the rows label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablerowslabeloptions.html#cfn-quicksight-analysis-pivottablerowslabeloptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [PivotTableRowsLabelOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customLabel The custom label string for the rows label.
       */
      public fun customLabel(customLabel: String)

      /**
       * @param visibility The visibility of the rows label.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableRowsLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableRowsLabelOptionsProperty.builder()

      /**
       * @param customLabel The custom label string for the rows label.
       */
      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      /**
       * @param visibility The visibility of the rows label.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableRowsLabelOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableRowsLabelOptionsProperty,
    ) : PivotTableRowsLabelOptionsProperty {
      /**
       * The custom label string for the rows label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablerowslabeloptions.html#cfn-quicksight-analysis-pivottablerowslabeloptions-customlabel)
       */
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      /**
       * The visibility of the rows label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablerowslabeloptions.html#cfn-quicksight-analysis-pivottablerowslabeloptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableRowsLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableRowsLabelOptionsProperty):
          PivotTableRowsLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableRowsLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableRowsLabelOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface BinCountOptionsProperty {
    /**
     * The options that determine the bin count value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bincountoptions.html#cfn-quicksight-analysis-bincountoptions-value)
     */
    public fun `value`(): Number? = unwrap(this).getValue()

    /**
     * A builder for [BinCountOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param value The options that determine the bin count value.
       */
      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BinCountOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BinCountOptionsProperty.builder()

      /**
       * @param value The options that determine the bin count value.
       */
      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BinCountOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BinCountOptionsProperty,
    ) : BinCountOptionsProperty {
      /**
       * The options that determine the bin count value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bincountoptions.html#cfn-quicksight-analysis-bincountoptions-value)
       */
      override fun `value`(): Number? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): BinCountOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BinCountOptionsProperty):
          BinCountOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BinCountOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BinCountOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface GeospatialCoordinateBoundsProperty {
    /**
     * The longitude of the east bound of the geospatial coordinate bounds.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html#cfn-quicksight-analysis-geospatialcoordinatebounds-east)
     */
    public fun east(): Number

    /**
     * The latitude of the north bound of the geospatial coordinate bounds.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html#cfn-quicksight-analysis-geospatialcoordinatebounds-north)
     */
    public fun north(): Number

    /**
     * The latitude of the south bound of the geospatial coordinate bounds.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html#cfn-quicksight-analysis-geospatialcoordinatebounds-south)
     */
    public fun south(): Number

    /**
     * The longitude of the west bound of the geospatial coordinate bounds.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html#cfn-quicksight-analysis-geospatialcoordinatebounds-west)
     */
    public fun west(): Number

    /**
     * A builder for [GeospatialCoordinateBoundsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param east The longitude of the east bound of the geospatial coordinate bounds. 
       */
      public fun east(east: Number)

      /**
       * @param north The latitude of the north bound of the geospatial coordinate bounds. 
       */
      public fun north(north: Number)

      /**
       * @param south The latitude of the south bound of the geospatial coordinate bounds. 
       */
      public fun south(south: Number)

      /**
       * @param west The longitude of the west bound of the geospatial coordinate bounds. 
       */
      public fun west(west: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialCoordinateBoundsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialCoordinateBoundsProperty.builder()

      /**
       * @param east The longitude of the east bound of the geospatial coordinate bounds. 
       */
      override fun east(east: Number) {
        cdkBuilder.east(east)
      }

      /**
       * @param north The latitude of the north bound of the geospatial coordinate bounds. 
       */
      override fun north(north: Number) {
        cdkBuilder.north(north)
      }

      /**
       * @param south The latitude of the south bound of the geospatial coordinate bounds. 
       */
      override fun south(south: Number) {
        cdkBuilder.south(south)
      }

      /**
       * @param west The longitude of the west bound of the geospatial coordinate bounds. 
       */
      override fun west(west: Number) {
        cdkBuilder.west(west)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialCoordinateBoundsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialCoordinateBoundsProperty,
    ) : GeospatialCoordinateBoundsProperty {
      /**
       * The longitude of the east bound of the geospatial coordinate bounds.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html#cfn-quicksight-analysis-geospatialcoordinatebounds-east)
       */
      override fun east(): Number = unwrap(this).getEast()

      /**
       * The latitude of the north bound of the geospatial coordinate bounds.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html#cfn-quicksight-analysis-geospatialcoordinatebounds-north)
       */
      override fun north(): Number = unwrap(this).getNorth()

      /**
       * The latitude of the south bound of the geospatial coordinate bounds.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html#cfn-quicksight-analysis-geospatialcoordinatebounds-south)
       */
      override fun south(): Number = unwrap(this).getSouth()

      /**
       * The longitude of the west bound of the geospatial coordinate bounds.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html#cfn-quicksight-analysis-geospatialcoordinatebounds-west)
       */
      override fun west(): Number = unwrap(this).getWest()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialCoordinateBoundsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialCoordinateBoundsProperty):
          GeospatialCoordinateBoundsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialCoordinateBoundsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialCoordinateBoundsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ComboChartSortConfigurationProperty {
    /**
     * The item limit configuration for the category field well of a combo chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html#cfn-quicksight-analysis-combochartsortconfiguration-categoryitemslimit)
     */
    public fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

    /**
     * The sort configuration of the category field well in a combo chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html#cfn-quicksight-analysis-combochartsortconfiguration-categorysort)
     */
    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    /**
     * The item limit configuration of the color field well in a combo chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html#cfn-quicksight-analysis-combochartsortconfiguration-coloritemslimit)
     */
    public fun colorItemsLimit(): Any? = unwrap(this).getColorItemsLimit()

    /**
     * The sort configuration of the color field well in a combo chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html#cfn-quicksight-analysis-combochartsortconfiguration-colorsort)
     */
    public fun colorSort(): Any? = unwrap(this).getColorSort()

    /**
     * A builder for [ComboChartSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryItemsLimit The item limit configuration for the category field well of a
       * combo chart.
       */
      public fun categoryItemsLimit(categoryItemsLimit: IResolvable)

      /**
       * @param categoryItemsLimit The item limit configuration for the category field well of a
       * combo chart.
       */
      public fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty)

      /**
       * @param categoryItemsLimit The item limit configuration for the category field well of a
       * combo chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d0bab10aa15779ed08f2e8963eacd8f2867959e272adf3234c6a7ef4127e7fea")
      public
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param categorySort The sort configuration of the category field well in a combo chart.
       */
      public fun categorySort(categorySort: IResolvable)

      /**
       * @param categorySort The sort configuration of the category field well in a combo chart.
       */
      public fun categorySort(categorySort: List<Any>)

      /**
       * @param categorySort The sort configuration of the category field well in a combo chart.
       */
      public fun categorySort(vararg categorySort: Any)

      /**
       * @param colorItemsLimit The item limit configuration of the color field well in a combo
       * chart.
       */
      public fun colorItemsLimit(colorItemsLimit: IResolvable)

      /**
       * @param colorItemsLimit The item limit configuration of the color field well in a combo
       * chart.
       */
      public fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty)

      /**
       * @param colorItemsLimit The item limit configuration of the color field well in a combo
       * chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ba9eb902848fd4d94482d0f73b057a0f6dd2d55c490d1b1bf0159e2b4f350f7")
      public
          fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param colorSort The sort configuration of the color field well in a combo chart.
       */
      public fun colorSort(colorSort: IResolvable)

      /**
       * @param colorSort The sort configuration of the color field well in a combo chart.
       */
      public fun colorSort(colorSort: List<Any>)

      /**
       * @param colorSort The sort configuration of the color field well in a combo chart.
       */
      public fun colorSort(vararg colorSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartSortConfigurationProperty.builder()

      /**
       * @param categoryItemsLimit The item limit configuration for the category field well of a
       * combo chart.
       */
      override fun categoryItemsLimit(categoryItemsLimit: IResolvable) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(IResolvable::unwrap))
      }

      /**
       * @param categoryItemsLimit The item limit configuration for the category field well of a
       * combo chart.
       */
      override fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param categoryItemsLimit The item limit configuration for the category field well of a
       * combo chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d0bab10aa15779ed08f2e8963eacd8f2867959e272adf3234c6a7ef4127e7fea")
      override
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = categoryItemsLimit(ItemsLimitConfigurationProperty(categoryItemsLimit))

      /**
       * @param categorySort The sort configuration of the category field well in a combo chart.
       */
      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      /**
       * @param categorySort The sort configuration of the category field well in a combo chart.
       */
      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      /**
       * @param categorySort The sort configuration of the category field well in a combo chart.
       */
      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      /**
       * @param colorItemsLimit The item limit configuration of the color field well in a combo
       * chart.
       */
      override fun colorItemsLimit(colorItemsLimit: IResolvable) {
        cdkBuilder.colorItemsLimit(colorItemsLimit.let(IResolvable::unwrap))
      }

      /**
       * @param colorItemsLimit The item limit configuration of the color field well in a combo
       * chart.
       */
      override fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.colorItemsLimit(colorItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param colorItemsLimit The item limit configuration of the color field well in a combo
       * chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ba9eb902848fd4d94482d0f73b057a0f6dd2d55c490d1b1bf0159e2b4f350f7")
      override
          fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = colorItemsLimit(ItemsLimitConfigurationProperty(colorItemsLimit))

      /**
       * @param colorSort The sort configuration of the color field well in a combo chart.
       */
      override fun colorSort(colorSort: IResolvable) {
        cdkBuilder.colorSort(colorSort.let(IResolvable::unwrap))
      }

      /**
       * @param colorSort The sort configuration of the color field well in a combo chart.
       */
      override fun colorSort(colorSort: List<Any>) {
        cdkBuilder.colorSort(colorSort)
      }

      /**
       * @param colorSort The sort configuration of the color field well in a combo chart.
       */
      override fun colorSort(vararg colorSort: Any): Unit = colorSort(colorSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartSortConfigurationProperty,
    ) : ComboChartSortConfigurationProperty {
      /**
       * The item limit configuration for the category field well of a combo chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html#cfn-quicksight-analysis-combochartsortconfiguration-categoryitemslimit)
       */
      override fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

      /**
       * The sort configuration of the category field well in a combo chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html#cfn-quicksight-analysis-combochartsortconfiguration-categorysort)
       */
      override fun categorySort(): Any? = unwrap(this).getCategorySort()

      /**
       * The item limit configuration of the color field well in a combo chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html#cfn-quicksight-analysis-combochartsortconfiguration-coloritemslimit)
       */
      override fun colorItemsLimit(): Any? = unwrap(this).getColorItemsLimit()

      /**
       * The sort configuration of the color field well in a combo chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html#cfn-quicksight-analysis-combochartsortconfiguration-colorsort)
       */
      override fun colorSort(): Any? = unwrap(this).getColorSort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ComboChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartSortConfigurationProperty):
          ComboChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComboChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartSortConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface KPIVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The conditional formatting of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-conditionalformatting)
     */
    public fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [KPIVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration of a KPI visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration of a KPI visual.
       */
      public fun chartConfiguration(chartConfiguration: KPIConfigurationProperty)

      /**
       * @param chartConfiguration The configuration of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f7acb59cc558b54e136793201930bd65d9cf4928ea92b236bb93cb68e62f1182")
      public fun chartConfiguration(chartConfiguration: KPIConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param conditionalFormatting The conditional formatting of a KPI visual.
       */
      public fun conditionalFormatting(conditionalFormatting: IResolvable)

      /**
       * @param conditionalFormatting The conditional formatting of a KPI visual.
       */
      public fun conditionalFormatting(conditionalFormatting: KPIConditionalFormattingProperty)

      /**
       * @param conditionalFormatting The conditional formatting of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f0b1f35e7f754dc9daa26ade5cb86838fde555f22d9b7dc971e7d82d9cb880d8")
      public
          fun conditionalFormatting(conditionalFormatting: KPIConditionalFormattingProperty.Builder.() -> Unit)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("43954168b845070476106986f03eec02dd0a2946e619dd73133e789ceae214aa")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1a5901e4d250b41c581e0e8bd69cfbe7522920994a08d22939af43476cdd9db9")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration of a KPI visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a KPI visual.
       */
      override fun chartConfiguration(chartConfiguration: KPIConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(KPIConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f7acb59cc558b54e136793201930bd65d9cf4928ea92b236bb93cb68e62f1182")
      override
          fun chartConfiguration(chartConfiguration: KPIConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(KPIConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param conditionalFormatting The conditional formatting of a KPI visual.
       */
      override fun conditionalFormatting(conditionalFormatting: IResolvable) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(IResolvable::unwrap))
      }

      /**
       * @param conditionalFormatting The conditional formatting of a KPI visual.
       */
      override fun conditionalFormatting(conditionalFormatting: KPIConditionalFormattingProperty) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(KPIConditionalFormattingProperty::unwrap))
      }

      /**
       * @param conditionalFormatting The conditional formatting of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f0b1f35e7f754dc9daa26ade5cb86838fde555f22d9b7dc971e7d82d9cb880d8")
      override
          fun conditionalFormatting(conditionalFormatting: KPIConditionalFormattingProperty.Builder.() -> Unit):
          Unit = conditionalFormatting(KPIConditionalFormattingProperty(conditionalFormatting))

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("43954168b845070476106986f03eec02dd0a2946e619dd73133e789ceae214aa")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1a5901e4d250b41c581e0e8bd69cfbe7522920994a08d22939af43476cdd9db9")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualProperty,
    ) : KPIVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The conditional formatting of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-conditionalformatting)
       */
      override fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): KPIVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualProperty):
          KPIVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface NumericEqualityFilterProperty {
    /**
     * The aggregation function of the filter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-aggregationfunction)
     */
    public fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

    /**
     * The column that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-column)
     */
    public fun column(): Any

    /**
     * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-filterid)
     */
    public fun filterId(): String

    /**
     * The match operator that is used to determine if a filter should be applied.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-matchoperator)
     */
    public fun matchOperator(): String

    /**
     * This option determines how null values should be treated when filtering data.
     *
     * * `ALL_VALUES` : Include null values in filtered results.
     * * `NULLS_ONLY` : Only include null values in filtered results.
     * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-nulloption)
     */
    public fun nullOption(): String

    /**
     * The parameter whose value should be used for the filter value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-parametername)
     */
    public fun parameterName(): String? = unwrap(this).getParameterName()

    /**
     * Select all of the values. Null is not the assigned value of select all.
     *
     * * `FILTER_ALL_VALUES`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-selectalloptions)
     */
    public fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()

    /**
     * The input value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-value)
     */
    public fun `value`(): Number? = unwrap(this).getValue()

    /**
     * A builder for [NumericEqualityFilterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param aggregationFunction The aggregation function of the filter.
       */
      public fun aggregationFunction(aggregationFunction: IResolvable)

      /**
       * @param aggregationFunction The aggregation function of the filter.
       */
      public fun aggregationFunction(aggregationFunction: AggregationFunctionProperty)

      /**
       * @param aggregationFunction The aggregation function of the filter.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3e3665ad6d03760a43451e6435be7ed1fe8633ac3b293ae065d1d00bf1b24e68")
      public
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4977146a136ed27b2d1bd6c248966f5d07f503263e1543955a463cd74afe5448")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      public fun filterId(filterId: String)

      /**
       * @param matchOperator The match operator that is used to determine if a filter should be
       * applied. 
       */
      public fun matchOperator(matchOperator: String)

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data. 
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      public fun nullOption(nullOption: String)

      /**
       * @param parameterName The parameter whose value should be used for the filter value.
       */
      public fun parameterName(parameterName: String)

      /**
       * @param selectAllOptions Select all of the values. Null is not the assigned value of select
       * all.
       * * `FILTER_ALL_VALUES`
       */
      public fun selectAllOptions(selectAllOptions: String)

      /**
       * @param value The input value.
       */
      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericEqualityFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericEqualityFilterProperty.builder()

      /**
       * @param aggregationFunction The aggregation function of the filter.
       */
      override fun aggregationFunction(aggregationFunction: IResolvable) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(IResolvable::unwrap))
      }

      /**
       * @param aggregationFunction The aggregation function of the filter.
       */
      override fun aggregationFunction(aggregationFunction: AggregationFunctionProperty) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(AggregationFunctionProperty::unwrap))
      }

      /**
       * @param aggregationFunction The aggregation function of the filter.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3e3665ad6d03760a43451e6435be7ed1fe8633ac3b293ae065d1d00bf1b24e68")
      override
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit):
          Unit = aggregationFunction(AggregationFunctionProperty(aggregationFunction))

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4977146a136ed27b2d1bd6c248966f5d07f503263e1543955a463cd74afe5448")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      /**
       * @param matchOperator The match operator that is used to determine if a filter should be
       * applied. 
       */
      override fun matchOperator(matchOperator: String) {
        cdkBuilder.matchOperator(matchOperator)
      }

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data. 
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      /**
       * @param parameterName The parameter whose value should be used for the filter value.
       */
      override fun parameterName(parameterName: String) {
        cdkBuilder.parameterName(parameterName)
      }

      /**
       * @param selectAllOptions Select all of the values. Null is not the assigned value of select
       * all.
       * * `FILTER_ALL_VALUES`
       */
      override fun selectAllOptions(selectAllOptions: String) {
        cdkBuilder.selectAllOptions(selectAllOptions)
      }

      /**
       * @param value The input value.
       */
      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericEqualityFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericEqualityFilterProperty,
    ) : NumericEqualityFilterProperty {
      /**
       * The aggregation function of the filter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-aggregationfunction)
       */
      override fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

      /**
       * The column that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-filterid)
       */
      override fun filterId(): String = unwrap(this).getFilterId()

      /**
       * The match operator that is used to determine if a filter should be applied.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-matchoperator)
       */
      override fun matchOperator(): String = unwrap(this).getMatchOperator()

      /**
       * This option determines how null values should be treated when filtering data.
       *
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-nulloption)
       */
      override fun nullOption(): String = unwrap(this).getNullOption()

      /**
       * The parameter whose value should be used for the filter value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-parametername)
       */
      override fun parameterName(): String? = unwrap(this).getParameterName()

      /**
       * Select all of the values. Null is not the assigned value of select all.
       *
       * * `FILTER_ALL_VALUES`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-selectalloptions)
       */
      override fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()

      /**
       * The input value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-value)
       */
      override fun `value`(): Number? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): NumericEqualityFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericEqualityFilterProperty):
          NumericEqualityFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericEqualityFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericEqualityFilterProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ExcludePeriodConfigurationProperty {
    /**
     * The amount or number of the exclude period.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-excludeperiodconfiguration.html#cfn-quicksight-analysis-excludeperiodconfiguration-amount)
     */
    public fun amount(): Number

    /**
     * The granularity or unit (day, month, year) of the exclude period.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-excludeperiodconfiguration.html#cfn-quicksight-analysis-excludeperiodconfiguration-granularity)
     */
    public fun granularity(): String

    /**
     * The status of the exclude period. Choose from the following options:.
     *
     * * `ENABLED`
     * * `DISABLED`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-excludeperiodconfiguration.html#cfn-quicksight-analysis-excludeperiodconfiguration-status)
     */
    public fun status(): String? = unwrap(this).getStatus()

    /**
     * A builder for [ExcludePeriodConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param amount The amount or number of the exclude period. 
       */
      public fun amount(amount: Number)

      /**
       * @param granularity The granularity or unit (day, month, year) of the exclude period. 
       */
      public fun granularity(granularity: String)

      /**
       * @param status The status of the exclude period. Choose from the following options:.
       * * `ENABLED`
       * * `DISABLED`
       */
      public fun status(status: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ExcludePeriodConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ExcludePeriodConfigurationProperty.builder()

      /**
       * @param amount The amount or number of the exclude period. 
       */
      override fun amount(amount: Number) {
        cdkBuilder.amount(amount)
      }

      /**
       * @param granularity The granularity or unit (day, month, year) of the exclude period. 
       */
      override fun granularity(granularity: String) {
        cdkBuilder.granularity(granularity)
      }

      /**
       * @param status The status of the exclude period. Choose from the following options:.
       * * `ENABLED`
       * * `DISABLED`
       */
      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ExcludePeriodConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ExcludePeriodConfigurationProperty,
    ) : ExcludePeriodConfigurationProperty {
      /**
       * The amount or number of the exclude period.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-excludeperiodconfiguration.html#cfn-quicksight-analysis-excludeperiodconfiguration-amount)
       */
      override fun amount(): Number = unwrap(this).getAmount()

      /**
       * The granularity or unit (day, month, year) of the exclude period.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-excludeperiodconfiguration.html#cfn-quicksight-analysis-excludeperiodconfiguration-granularity)
       */
      override fun granularity(): String = unwrap(this).getGranularity()

      /**
       * The status of the exclude period. Choose from the following options:.
       *
       * * `ENABLED`
       * * `DISABLED`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-excludeperiodconfiguration.html#cfn-quicksight-analysis-excludeperiodconfiguration-status)
       */
      override fun status(): String? = unwrap(this).getStatus()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ExcludePeriodConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ExcludePeriodConfigurationProperty):
          ExcludePeriodConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ExcludePeriodConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ExcludePeriodConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface AxisDisplayRangeProperty {
    /**
     * The data-driven setup of an axis display range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayrange.html#cfn-quicksight-analysis-axisdisplayrange-datadriven)
     */
    public fun dataDriven(): Any? = unwrap(this).getDataDriven()

    /**
     * The minimum and maximum setup of an axis display range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayrange.html#cfn-quicksight-analysis-axisdisplayrange-minmax)
     */
    public fun minMax(): Any? = unwrap(this).getMinMax()

    /**
     * A builder for [AxisDisplayRangeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataDriven The data-driven setup of an axis display range.
       */
      public fun dataDriven(dataDriven: Any)

      /**
       * @param minMax The minimum and maximum setup of an axis display range.
       */
      public fun minMax(minMax: IResolvable)

      /**
       * @param minMax The minimum and maximum setup of an axis display range.
       */
      public fun minMax(minMax: AxisDisplayMinMaxRangeProperty)

      /**
       * @param minMax The minimum and maximum setup of an axis display range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf613f67a5d82a356d9a5a8bd06f9caad52e6c009a89cbc9806e2089d54b386a")
      public fun minMax(minMax: AxisDisplayMinMaxRangeProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayRangeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayRangeProperty.builder()

      /**
       * @param dataDriven The data-driven setup of an axis display range.
       */
      override fun dataDriven(dataDriven: Any) {
        cdkBuilder.dataDriven(dataDriven)
      }

      /**
       * @param minMax The minimum and maximum setup of an axis display range.
       */
      override fun minMax(minMax: IResolvable) {
        cdkBuilder.minMax(minMax.let(IResolvable::unwrap))
      }

      /**
       * @param minMax The minimum and maximum setup of an axis display range.
       */
      override fun minMax(minMax: AxisDisplayMinMaxRangeProperty) {
        cdkBuilder.minMax(minMax.let(AxisDisplayMinMaxRangeProperty::unwrap))
      }

      /**
       * @param minMax The minimum and maximum setup of an axis display range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf613f67a5d82a356d9a5a8bd06f9caad52e6c009a89cbc9806e2089d54b386a")
      override fun minMax(minMax: AxisDisplayMinMaxRangeProperty.Builder.() -> Unit): Unit =
          minMax(AxisDisplayMinMaxRangeProperty(minMax))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayRangeProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayRangeProperty,
    ) : AxisDisplayRangeProperty {
      /**
       * The data-driven setup of an axis display range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayrange.html#cfn-quicksight-analysis-axisdisplayrange-datadriven)
       */
      override fun dataDriven(): Any? = unwrap(this).getDataDriven()

      /**
       * The minimum and maximum setup of an axis display range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayrange.html#cfn-quicksight-analysis-axisdisplayrange-minmax)
       */
      override fun minMax(): Any? = unwrap(this).getMinMax()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AxisDisplayRangeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayRangeProperty):
          AxisDisplayRangeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisDisplayRangeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayRangeProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface GaugeChartFieldWellsProperty {
    /**
     * The target value field wells of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartfieldwells.html#cfn-quicksight-analysis-gaugechartfieldwells-targetvalues)
     */
    public fun targetValues(): Any? = unwrap(this).getTargetValues()

    /**
     * The value field wells of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartfieldwells.html#cfn-quicksight-analysis-gaugechartfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [GaugeChartFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param targetValues The target value field wells of a `GaugeChartVisual` .
       */
      public fun targetValues(targetValues: IResolvable)

      /**
       * @param targetValues The target value field wells of a `GaugeChartVisual` .
       */
      public fun targetValues(targetValues: List<Any>)

      /**
       * @param targetValues The target value field wells of a `GaugeChartVisual` .
       */
      public fun targetValues(vararg targetValues: Any)

      /**
       * @param values The value field wells of a `GaugeChartVisual` .
       */
      public fun values(values: IResolvable)

      /**
       * @param values The value field wells of a `GaugeChartVisual` .
       */
      public fun values(values: List<Any>)

      /**
       * @param values The value field wells of a `GaugeChartVisual` .
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartFieldWellsProperty.builder()

      /**
       * @param targetValues The target value field wells of a `GaugeChartVisual` .
       */
      override fun targetValues(targetValues: IResolvable) {
        cdkBuilder.targetValues(targetValues.let(IResolvable::unwrap))
      }

      /**
       * @param targetValues The target value field wells of a `GaugeChartVisual` .
       */
      override fun targetValues(targetValues: List<Any>) {
        cdkBuilder.targetValues(targetValues)
      }

      /**
       * @param targetValues The target value field wells of a `GaugeChartVisual` .
       */
      override fun targetValues(vararg targetValues: Any): Unit =
          targetValues(targetValues.toList())

      /**
       * @param values The value field wells of a `GaugeChartVisual` .
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The value field wells of a `GaugeChartVisual` .
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The value field wells of a `GaugeChartVisual` .
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartFieldWellsProperty,
    ) : GaugeChartFieldWellsProperty {
      /**
       * The target value field wells of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartfieldwells.html#cfn-quicksight-analysis-gaugechartfieldwells-targetvalues)
       */
      override fun targetValues(): Any? = unwrap(this).getTargetValues()

      /**
       * The value field wells of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartfieldwells.html#cfn-quicksight-analysis-gaugechartfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GaugeChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartFieldWellsProperty):
          GaugeChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface EmptyVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-emptyvisual.html#cfn-quicksight-analysis-emptyvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The data set that is used in the empty visual.
     *
     * Every visual requires a dataset to render.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-emptyvisual.html#cfn-quicksight-analysis-emptyvisual-datasetidentifier)
     */
    public fun dataSetIdentifier(): String

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-emptyvisual.html#cfn-quicksight-analysis-emptyvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [EmptyVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param dataSetIdentifier The data set that is used in the empty visual. 
       * Every visual requires a dataset to render.
       */
      public fun dataSetIdentifier(dataSetIdentifier: String)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.EmptyVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.EmptyVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param dataSetIdentifier The data set that is used in the empty visual. 
       * Every visual requires a dataset to render.
       */
      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.EmptyVisualProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.EmptyVisualProperty,
    ) : EmptyVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-emptyvisual.html#cfn-quicksight-analysis-emptyvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The data set that is used in the empty visual.
       *
       * Every visual requires a dataset to render.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-emptyvisual.html#cfn-quicksight-analysis-emptyvisual-datasetidentifier)
       */
      override fun dataSetIdentifier(): String = unwrap(this).getDataSetIdentifier()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-emptyvisual.html#cfn-quicksight-analysis-emptyvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): EmptyVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.EmptyVisualProperty):
          EmptyVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: EmptyVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.EmptyVisualProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface InsightConfigurationProperty {
    /**
     * The computations configurations of the insight visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightconfiguration.html#cfn-quicksight-analysis-insightconfiguration-computations)
     */
    public fun computations(): Any? = unwrap(this).getComputations()

    /**
     * The custom narrative of the insight visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightconfiguration.html#cfn-quicksight-analysis-insightconfiguration-customnarrative)
     */
    public fun customNarrative(): Any? = unwrap(this).getCustomNarrative()

    /**
     * A builder for [InsightConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param computations The computations configurations of the insight visual.
       */
      public fun computations(computations: IResolvable)

      /**
       * @param computations The computations configurations of the insight visual.
       */
      public fun computations(computations: List<Any>)

      /**
       * @param computations The computations configurations of the insight visual.
       */
      public fun computations(vararg computations: Any)

      /**
       * @param customNarrative The custom narrative of the insight visual.
       */
      public fun customNarrative(customNarrative: IResolvable)

      /**
       * @param customNarrative The custom narrative of the insight visual.
       */
      public fun customNarrative(customNarrative: CustomNarrativeOptionsProperty)

      /**
       * @param customNarrative The custom narrative of the insight visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("987629984369c869d655358007376b93c8c8c6ab27cf870100fe89e9a98f7754")
      public fun customNarrative(customNarrative: CustomNarrativeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.InsightConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.InsightConfigurationProperty.builder()

      /**
       * @param computations The computations configurations of the insight visual.
       */
      override fun computations(computations: IResolvable) {
        cdkBuilder.computations(computations.let(IResolvable::unwrap))
      }

      /**
       * @param computations The computations configurations of the insight visual.
       */
      override fun computations(computations: List<Any>) {
        cdkBuilder.computations(computations)
      }

      /**
       * @param computations The computations configurations of the insight visual.
       */
      override fun computations(vararg computations: Any): Unit =
          computations(computations.toList())

      /**
       * @param customNarrative The custom narrative of the insight visual.
       */
      override fun customNarrative(customNarrative: IResolvable) {
        cdkBuilder.customNarrative(customNarrative.let(IResolvable::unwrap))
      }

      /**
       * @param customNarrative The custom narrative of the insight visual.
       */
      override fun customNarrative(customNarrative: CustomNarrativeOptionsProperty) {
        cdkBuilder.customNarrative(customNarrative.let(CustomNarrativeOptionsProperty::unwrap))
      }

      /**
       * @param customNarrative The custom narrative of the insight visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("987629984369c869d655358007376b93c8c8c6ab27cf870100fe89e9a98f7754")
      override
          fun customNarrative(customNarrative: CustomNarrativeOptionsProperty.Builder.() -> Unit):
          Unit = customNarrative(CustomNarrativeOptionsProperty(customNarrative))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.InsightConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.InsightConfigurationProperty,
    ) : InsightConfigurationProperty {
      /**
       * The computations configurations of the insight visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightconfiguration.html#cfn-quicksight-analysis-insightconfiguration-computations)
       */
      override fun computations(): Any? = unwrap(this).getComputations()

      /**
       * The custom narrative of the insight visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightconfiguration.html#cfn-quicksight-analysis-insightconfiguration-customnarrative)
       */
      override fun customNarrative(): Any? = unwrap(this).getCustomNarrative()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): InsightConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.InsightConfigurationProperty):
          InsightConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: InsightConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.InsightConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface DateTimeParameterDeclarationProperty {
    /**
     * The default values of a parameter.
     *
     * If the parameter is a single-value parameter, a maximum of one default value can be provided.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-defaultvalues)
     */
    public fun defaultValues(): Any? = unwrap(this).getDefaultValues()

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-mappeddatasetparameters)
     */
    public fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

    /**
     * The name of the parameter that is being declared.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-name)
     */
    public fun name(): String

    /**
     * The level of time precision that is used to aggregate `DateTime` values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-timegranularity)
     */
    public fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

    /**
     * The configuration that defines the default value of a `DateTime` parameter when a value has
     * not been set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-valuewhenunset)
     */
    public fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()

    /**
     * A builder for [DateTimeParameterDeclarationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      public fun defaultValues(defaultValues: IResolvable)

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      public fun defaultValues(defaultValues: DateTimeDefaultValuesProperty)

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d1d606c0729b61de6c455a0746ba61582367e913a017866f493f1da9af72cc4f")
      public fun defaultValues(defaultValues: DateTimeDefaultValuesProperty.Builder.() -> Unit)

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      public fun mappedDataSetParameters(mappedDataSetParameters: IResolvable)

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      public fun mappedDataSetParameters(mappedDataSetParameters: List<Any>)

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      public fun mappedDataSetParameters(vararg mappedDataSetParameters: Any)

      /**
       * @param name The name of the parameter that is being declared. 
       */
      public fun name(name: String)

      /**
       * @param timeGranularity The level of time precision that is used to aggregate `DateTime`
       * values.
       */
      public fun timeGranularity(timeGranularity: String)

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `DateTime`
       * parameter when a value has not been set.
       */
      public fun valueWhenUnset(valueWhenUnset: IResolvable)

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `DateTime`
       * parameter when a value has not been set.
       */
      public fun valueWhenUnset(valueWhenUnset: DateTimeValueWhenUnsetConfigurationProperty)

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `DateTime`
       * parameter when a value has not been set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b8494d8bd2b7072d4fb47f0087959bf292a771f4bfc02fc944e551c1369ce6bd")
      public
          fun valueWhenUnset(valueWhenUnset: DateTimeValueWhenUnsetConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeParameterDeclarationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeParameterDeclarationProperty.builder()

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      override fun defaultValues(defaultValues: IResolvable) {
        cdkBuilder.defaultValues(defaultValues.let(IResolvable::unwrap))
      }

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      override fun defaultValues(defaultValues: DateTimeDefaultValuesProperty) {
        cdkBuilder.defaultValues(defaultValues.let(DateTimeDefaultValuesProperty::unwrap))
      }

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d1d606c0729b61de6c455a0746ba61582367e913a017866f493f1da9af72cc4f")
      override fun defaultValues(defaultValues: DateTimeDefaultValuesProperty.Builder.() -> Unit):
          Unit = defaultValues(DateTimeDefaultValuesProperty(defaultValues))

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      override fun mappedDataSetParameters(mappedDataSetParameters: IResolvable) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters.let(IResolvable::unwrap))
      }

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      override fun mappedDataSetParameters(mappedDataSetParameters: List<Any>) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters)
      }

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      override fun mappedDataSetParameters(vararg mappedDataSetParameters: Any): Unit =
          mappedDataSetParameters(mappedDataSetParameters.toList())

      /**
       * @param name The name of the parameter that is being declared. 
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param timeGranularity The level of time precision that is used to aggregate `DateTime`
       * values.
       */
      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `DateTime`
       * parameter when a value has not been set.
       */
      override fun valueWhenUnset(valueWhenUnset: IResolvable) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(IResolvable::unwrap))
      }

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `DateTime`
       * parameter when a value has not been set.
       */
      override fun valueWhenUnset(valueWhenUnset: DateTimeValueWhenUnsetConfigurationProperty) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(DateTimeValueWhenUnsetConfigurationProperty::unwrap))
      }

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `DateTime`
       * parameter when a value has not been set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b8494d8bd2b7072d4fb47f0087959bf292a771f4bfc02fc944e551c1369ce6bd")
      override
          fun valueWhenUnset(valueWhenUnset: DateTimeValueWhenUnsetConfigurationProperty.Builder.() -> Unit):
          Unit = valueWhenUnset(DateTimeValueWhenUnsetConfigurationProperty(valueWhenUnset))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeParameterDeclarationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeParameterDeclarationProperty,
    ) : DateTimeParameterDeclarationProperty {
      /**
       * The default values of a parameter.
       *
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-defaultvalues)
       */
      override fun defaultValues(): Any? = unwrap(this).getDefaultValues()

      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-mappeddatasetparameters)
       */
      override fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

      /**
       * The name of the parameter that is being declared.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-name)
       */
      override fun name(): String = unwrap(this).getName()

      /**
       * The level of time precision that is used to aggregate `DateTime` values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-timegranularity)
       */
      override fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

      /**
       * The configuration that defines the default value of a `DateTime` parameter when a value has
       * not been set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-valuewhenunset)
       */
      override fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DateTimeParameterDeclarationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeParameterDeclarationProperty):
          DateTimeParameterDeclarationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimeParameterDeclarationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeParameterDeclarationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TopBottomFilterProperty {
    /**
     * The aggregation and sort configuration of the top bottom filter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-aggregationsortconfigurations)
     */
    public fun aggregationSortConfigurations(): Any

    /**
     * The column that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-column)
     */
    public fun column(): Any

    /**
     * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-filterid)
     */
    public fun filterId(): String

    /**
     * The number of items to include in the top bottom filter results.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-limit)
     */
    public fun limit(): Number? = unwrap(this).getLimit()

    /**
     * The parameter whose value should be used for the filter value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-parametername)
     */
    public fun parameterName(): String? = unwrap(this).getParameterName()

    /**
     * The level of time precision that is used to aggregate `DateTime` values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-timegranularity)
     */
    public fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

    /**
     * A builder for [TopBottomFilterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param aggregationSortConfigurations The aggregation and sort configuration of the top
       * bottom filter. 
       */
      public fun aggregationSortConfigurations(aggregationSortConfigurations: IResolvable)

      /**
       * @param aggregationSortConfigurations The aggregation and sort configuration of the top
       * bottom filter. 
       */
      public fun aggregationSortConfigurations(aggregationSortConfigurations: List<Any>)

      /**
       * @param aggregationSortConfigurations The aggregation and sort configuration of the top
       * bottom filter. 
       */
      public fun aggregationSortConfigurations(vararg aggregationSortConfigurations: Any)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d355c246a38b342bc7f5866b5ab73a41b24077d3788f52524d79559d1cf316be")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      public fun filterId(filterId: String)

      /**
       * @param limit The number of items to include in the top bottom filter results.
       */
      public fun limit(limit: Number)

      /**
       * @param parameterName The parameter whose value should be used for the filter value.
       */
      public fun parameterName(parameterName: String)

      /**
       * @param timeGranularity The level of time precision that is used to aggregate `DateTime`
       * values.
       */
      public fun timeGranularity(timeGranularity: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomFilterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomFilterProperty.builder()

      /**
       * @param aggregationSortConfigurations The aggregation and sort configuration of the top
       * bottom filter. 
       */
      override fun aggregationSortConfigurations(aggregationSortConfigurations: IResolvable) {
        cdkBuilder.aggregationSortConfigurations(aggregationSortConfigurations.let(IResolvable::unwrap))
      }

      /**
       * @param aggregationSortConfigurations The aggregation and sort configuration of the top
       * bottom filter. 
       */
      override fun aggregationSortConfigurations(aggregationSortConfigurations: List<Any>) {
        cdkBuilder.aggregationSortConfigurations(aggregationSortConfigurations)
      }

      /**
       * @param aggregationSortConfigurations The aggregation and sort configuration of the top
       * bottom filter. 
       */
      override fun aggregationSortConfigurations(vararg aggregationSortConfigurations: Any): Unit =
          aggregationSortConfigurations(aggregationSortConfigurations.toList())

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d355c246a38b342bc7f5866b5ab73a41b24077d3788f52524d79559d1cf316be")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      /**
       * @param limit The number of items to include in the top bottom filter results.
       */
      override fun limit(limit: Number) {
        cdkBuilder.limit(limit)
      }

      /**
       * @param parameterName The parameter whose value should be used for the filter value.
       */
      override fun parameterName(parameterName: String) {
        cdkBuilder.parameterName(parameterName)
      }

      /**
       * @param timeGranularity The level of time precision that is used to aggregate `DateTime`
       * values.
       */
      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomFilterProperty,
    ) : TopBottomFilterProperty {
      /**
       * The aggregation and sort configuration of the top bottom filter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-aggregationsortconfigurations)
       */
      override fun aggregationSortConfigurations(): Any =
          unwrap(this).getAggregationSortConfigurations()

      /**
       * The column that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-filterid)
       */
      override fun filterId(): String = unwrap(this).getFilterId()

      /**
       * The number of items to include in the top bottom filter results.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-limit)
       */
      override fun limit(): Number? = unwrap(this).getLimit()

      /**
       * The parameter whose value should be used for the filter value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-parametername)
       */
      override fun parameterName(): String? = unwrap(this).getParameterName()

      /**
       * The level of time precision that is used to aggregate `DateTime` values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-timegranularity)
       */
      override fun timeGranularity(): String? = unwrap(this).getTimeGranularity()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TopBottomFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomFilterProperty):
          TopBottomFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TopBottomFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomFilterProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface TableUnaggregatedFieldWellsProperty {
    /**
     * The values field well for a pivot table.
     *
     * Values are unaggregated for an unaggregated table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableunaggregatedfieldwells.html#cfn-quicksight-analysis-tableunaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [TableUnaggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param values The values field well for a pivot table.
       * Values are unaggregated for an unaggregated table.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The values field well for a pivot table.
       * Values are unaggregated for an unaggregated table.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The values field well for a pivot table.
       * Values are unaggregated for an unaggregated table.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableUnaggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableUnaggregatedFieldWellsProperty.builder()

      /**
       * @param values The values field well for a pivot table.
       * Values are unaggregated for an unaggregated table.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The values field well for a pivot table.
       * Values are unaggregated for an unaggregated table.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The values field well for a pivot table.
       * Values are unaggregated for an unaggregated table.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableUnaggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableUnaggregatedFieldWellsProperty,
    ) : TableUnaggregatedFieldWellsProperty {
      /**
       * The values field well for a pivot table.
       *
       * Values are unaggregated for an unaggregated table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableunaggregatedfieldwells.html#cfn-quicksight-analysis-tableunaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableUnaggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableUnaggregatedFieldWellsProperty):
          TableUnaggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableUnaggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableUnaggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SheetTextBoxProperty {
    /**
     * The content that is displayed in the text box.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheettextbox.html#cfn-quicksight-analysis-sheettextbox-content)
     */
    public fun content(): String? = unwrap(this).getContent()

    /**
     * The unique identifier for a text box.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have text boxes that share identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheettextbox.html#cfn-quicksight-analysis-sheettextbox-sheettextboxid)
     */
    public fun sheetTextBoxId(): String

    /**
     * A builder for [SheetTextBoxProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param content The content that is displayed in the text box.
       */
      public fun content(content: String)

      /**
       * @param sheetTextBoxId The unique identifier for a text box. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have text boxes that share identifiers.
       */
      public fun sheetTextBoxId(sheetTextBoxId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetTextBoxProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetTextBoxProperty.builder()

      /**
       * @param content The content that is displayed in the text box.
       */
      override fun content(content: String) {
        cdkBuilder.content(content)
      }

      /**
       * @param sheetTextBoxId The unique identifier for a text box. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have text boxes that share identifiers.
       */
      override fun sheetTextBoxId(sheetTextBoxId: String) {
        cdkBuilder.sheetTextBoxId(sheetTextBoxId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetTextBoxProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetTextBoxProperty,
    ) : SheetTextBoxProperty {
      /**
       * The content that is displayed in the text box.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheettextbox.html#cfn-quicksight-analysis-sheettextbox-content)
       */
      override fun content(): String? = unwrap(this).getContent()

      /**
       * The unique identifier for a text box.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have text boxes that share identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheettextbox.html#cfn-quicksight-analysis-sheettextbox-sheettextboxid)
       */
      override fun sheetTextBoxId(): String = unwrap(this).getSheetTextBoxId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SheetTextBoxProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetTextBoxProperty):
          SheetTextBoxProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetTextBoxProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetTextBoxProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface DecimalPlacesConfigurationProperty {
    /**
     * The values of the decimal places.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalplacesconfiguration.html#cfn-quicksight-analysis-decimalplacesconfiguration-decimalplaces)
     */
    public fun decimalPlaces(): Number

    /**
     * A builder for [DecimalPlacesConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param decimalPlaces The values of the decimal places. 
       */
      public fun decimalPlaces(decimalPlaces: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalPlacesConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalPlacesConfigurationProperty.builder()

      /**
       * @param decimalPlaces The values of the decimal places. 
       */
      override fun decimalPlaces(decimalPlaces: Number) {
        cdkBuilder.decimalPlaces(decimalPlaces)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalPlacesConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalPlacesConfigurationProperty,
    ) : DecimalPlacesConfigurationProperty {
      /**
       * The values of the decimal places.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalplacesconfiguration.html#cfn-quicksight-analysis-decimalplacesconfiguration-decimalplaces)
       */
      override fun decimalPlaces(): Number = unwrap(this).getDecimalPlaces()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DecimalPlacesConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalPlacesConfigurationProperty):
          DecimalPlacesConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DecimalPlacesConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalPlacesConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface NumberFormatConfigurationProperty {
    /**
     * The options that determine the numeric format configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberformatconfiguration.html#cfn-quicksight-analysis-numberformatconfiguration-formatconfiguration)
     */
    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    /**
     * A builder for [NumberFormatConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param formatConfiguration The options that determine the numeric format configuration.
       */
      public fun formatConfiguration(formatConfiguration: IResolvable)

      /**
       * @param formatConfiguration The options that determine the numeric format configuration.
       */
      public fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty)

      /**
       * @param formatConfiguration The options that determine the numeric format configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("32fd814e67b19020efcf90d673789b548943dfe6b42bee92e462ebb5f88807aa")
      public
          fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumberFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumberFormatConfigurationProperty.builder()

      /**
       * @param formatConfiguration The options that determine the numeric format configuration.
       */
      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param formatConfiguration The options that determine the numeric format configuration.
       */
      override fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(NumericFormatConfigurationProperty::unwrap))
      }

      /**
       * @param formatConfiguration The options that determine the numeric format configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("32fd814e67b19020efcf90d673789b548943dfe6b42bee92e462ebb5f88807aa")
      override
          fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(NumericFormatConfigurationProperty(formatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumberFormatConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumberFormatConfigurationProperty,
    ) : NumberFormatConfigurationProperty {
      /**
       * The options that determine the numeric format configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberformatconfiguration.html#cfn-quicksight-analysis-numberformatconfiguration-formatconfiguration)
       */
      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          NumberFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NumberFormatConfigurationProperty):
          NumberFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumberFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumberFormatConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface KPIProgressBarConditionalFormattingProperty {
    /**
     * The conditional formatting of the progress bar's foreground color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprogressbarconditionalformatting.html#cfn-quicksight-analysis-kpiprogressbarconditionalformatting-foregroundcolor)
     */
    public fun foregroundColor(): Any? = unwrap(this).getForegroundColor()

    /**
     * A builder for [KPIProgressBarConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param foregroundColor The conditional formatting of the progress bar's foreground color.
       */
      public fun foregroundColor(foregroundColor: IResolvable)

      /**
       * @param foregroundColor The conditional formatting of the progress bar's foreground color.
       */
      public fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty)

      /**
       * @param foregroundColor The conditional formatting of the progress bar's foreground color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("52a048d7d524807eadd5a5da505f51e8c2ed953091d60bf05c3a5e88bc520817")
      public
          fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIProgressBarConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIProgressBarConditionalFormattingProperty.builder()

      /**
       * @param foregroundColor The conditional formatting of the progress bar's foreground color.
       */
      override fun foregroundColor(foregroundColor: IResolvable) {
        cdkBuilder.foregroundColor(foregroundColor.let(IResolvable::unwrap))
      }

      /**
       * @param foregroundColor The conditional formatting of the progress bar's foreground color.
       */
      override fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty) {
        cdkBuilder.foregroundColor(foregroundColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      /**
       * @param foregroundColor The conditional formatting of the progress bar's foreground color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("52a048d7d524807eadd5a5da505f51e8c2ed953091d60bf05c3a5e88bc520817")
      override
          fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit):
          Unit = foregroundColor(ConditionalFormattingColorProperty(foregroundColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIProgressBarConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIProgressBarConditionalFormattingProperty,
    ) : KPIProgressBarConditionalFormattingProperty {
      /**
       * The conditional formatting of the progress bar's foreground color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprogressbarconditionalformatting.html#cfn-quicksight-analysis-kpiprogressbarconditionalformatting-foregroundcolor)
       */
      override fun foregroundColor(): Any? = unwrap(this).getForegroundColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          KPIProgressBarConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIProgressBarConditionalFormattingProperty):
          KPIProgressBarConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIProgressBarConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIProgressBarConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ConditionalFormattingIconDisplayConfigurationProperty {
    /**
     * Determines the icon display configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicondisplayconfiguration.html#cfn-quicksight-analysis-conditionalformattingicondisplayconfiguration-icondisplayoption)
     */
    public fun iconDisplayOption(): String? = unwrap(this).getIconDisplayOption()

    /**
     * A builder for [ConditionalFormattingIconDisplayConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param iconDisplayOption Determines the icon display configuration.
       */
      public fun iconDisplayOption(iconDisplayOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconDisplayConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconDisplayConfigurationProperty.builder()

      /**
       * @param iconDisplayOption Determines the icon display configuration.
       */
      override fun iconDisplayOption(iconDisplayOption: String) {
        cdkBuilder.iconDisplayOption(iconDisplayOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconDisplayConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconDisplayConfigurationProperty,
    ) : ConditionalFormattingIconDisplayConfigurationProperty {
      /**
       * Determines the icon display configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicondisplayconfiguration.html#cfn-quicksight-analysis-conditionalformattingicondisplayconfiguration-icondisplayoption)
       */
      override fun iconDisplayOption(): String? = unwrap(this).getIconDisplayOption()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingIconDisplayConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconDisplayConfigurationProperty):
          ConditionalFormattingIconDisplayConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingIconDisplayConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconDisplayConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableFieldWellsProperty {
    /**
     * The aggregated field well for the table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldwells.html#cfn-quicksight-analysis-tablefieldwells-tableaggregatedfieldwells)
     */
    public fun tableAggregatedFieldWells(): Any? = unwrap(this).getTableAggregatedFieldWells()

    /**
     * The unaggregated field well for the table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldwells.html#cfn-quicksight-analysis-tablefieldwells-tableunaggregatedfieldwells)
     */
    public fun tableUnaggregatedFieldWells(): Any? = unwrap(this).getTableUnaggregatedFieldWells()

    /**
     * A builder for [TableFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param tableAggregatedFieldWells The aggregated field well for the table.
       */
      public fun tableAggregatedFieldWells(tableAggregatedFieldWells: IResolvable)

      /**
       * @param tableAggregatedFieldWells The aggregated field well for the table.
       */
      public
          fun tableAggregatedFieldWells(tableAggregatedFieldWells: TableAggregatedFieldWellsProperty)

      /**
       * @param tableAggregatedFieldWells The aggregated field well for the table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d5233414e342132100a9fa394ed52f0ddabbd1ce685f9b8b26504526bd1539ba")
      public
          fun tableAggregatedFieldWells(tableAggregatedFieldWells: TableAggregatedFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param tableUnaggregatedFieldWells The unaggregated field well for the table.
       */
      public fun tableUnaggregatedFieldWells(tableUnaggregatedFieldWells: IResolvable)

      /**
       * @param tableUnaggregatedFieldWells The unaggregated field well for the table.
       */
      public
          fun tableUnaggregatedFieldWells(tableUnaggregatedFieldWells: TableUnaggregatedFieldWellsProperty)

      /**
       * @param tableUnaggregatedFieldWells The unaggregated field well for the table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("082de34e4c146bd3bb45b7df356b59c9b73e9a7c58a75d841d369a4ff82212a8")
      public
          fun tableUnaggregatedFieldWells(tableUnaggregatedFieldWells: TableUnaggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldWellsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldWellsProperty.builder()

      /**
       * @param tableAggregatedFieldWells The aggregated field well for the table.
       */
      override fun tableAggregatedFieldWells(tableAggregatedFieldWells: IResolvable) {
        cdkBuilder.tableAggregatedFieldWells(tableAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param tableAggregatedFieldWells The aggregated field well for the table.
       */
      override
          fun tableAggregatedFieldWells(tableAggregatedFieldWells: TableAggregatedFieldWellsProperty) {
        cdkBuilder.tableAggregatedFieldWells(tableAggregatedFieldWells.let(TableAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param tableAggregatedFieldWells The aggregated field well for the table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d5233414e342132100a9fa394ed52f0ddabbd1ce685f9b8b26504526bd1539ba")
      override
          fun tableAggregatedFieldWells(tableAggregatedFieldWells: TableAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          tableAggregatedFieldWells(TableAggregatedFieldWellsProperty(tableAggregatedFieldWells))

      /**
       * @param tableUnaggregatedFieldWells The unaggregated field well for the table.
       */
      override fun tableUnaggregatedFieldWells(tableUnaggregatedFieldWells: IResolvable) {
        cdkBuilder.tableUnaggregatedFieldWells(tableUnaggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param tableUnaggregatedFieldWells The unaggregated field well for the table.
       */
      override
          fun tableUnaggregatedFieldWells(tableUnaggregatedFieldWells: TableUnaggregatedFieldWellsProperty) {
        cdkBuilder.tableUnaggregatedFieldWells(tableUnaggregatedFieldWells.let(TableUnaggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param tableUnaggregatedFieldWells The unaggregated field well for the table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("082de34e4c146bd3bb45b7df356b59c9b73e9a7c58a75d841d369a4ff82212a8")
      override
          fun tableUnaggregatedFieldWells(tableUnaggregatedFieldWells: TableUnaggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          tableUnaggregatedFieldWells(TableUnaggregatedFieldWellsProperty(tableUnaggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldWellsProperty,
    ) : TableFieldWellsProperty {
      /**
       * The aggregated field well for the table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldwells.html#cfn-quicksight-analysis-tablefieldwells-tableaggregatedfieldwells)
       */
      override fun tableAggregatedFieldWells(): Any? = unwrap(this).getTableAggregatedFieldWells()

      /**
       * The unaggregated field well for the table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldwells.html#cfn-quicksight-analysis-tablefieldwells-tableunaggregatedfieldwells)
       */
      override fun tableUnaggregatedFieldWells(): Any? =
          unwrap(this).getTableUnaggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TableFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldWellsProperty):
          TableFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldWellsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface FilledMapConfigurationProperty {
    /**
     * The field wells of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The legend display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-legend)
     */
    public fun legend(): Any? = unwrap(this).getLegend()

    /**
     * The map style options of the filled map visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-mapstyleoptions)
     */
    public fun mapStyleOptions(): Any? = unwrap(this).getMapStyleOptions()

    /**
     * The sort configuration of a `FilledMapVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The tooltip display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-tooltip)
     */
    public fun tooltip(): Any? = unwrap(this).getTooltip()

    /**
     * The window options of the filled map visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-windowoptions)
     */
    public fun windowOptions(): Any? = unwrap(this).getWindowOptions()

    /**
     * A builder for [FilledMapConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: FilledMapFieldWellsProperty)

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e7c712243f6a4dad3b681de310e5712495c919bf40275f2b9efb4a0f40ecc2c1")
      public fun fieldWells(fieldWells: FilledMapFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: IResolvable)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: LegendOptionsProperty)

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("226bb7f4ef7bd18caad0f0c47309e3e7834f103b9ff6ec5e1234d561d6aecb19")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      /**
       * @param mapStyleOptions The map style options of the filled map visual.
       */
      public fun mapStyleOptions(mapStyleOptions: IResolvable)

      /**
       * @param mapStyleOptions The map style options of the filled map visual.
       */
      public fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty)

      /**
       * @param mapStyleOptions The map style options of the filled map visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a60c0ca9c541aa3e367cc7586a89242606726193eb07b3a59b8fccd0282ef992")
      public
          fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration of a `FilledMapVisual` .
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a `FilledMapVisual` .
       */
      public fun sortConfiguration(sortConfiguration: FilledMapSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a `FilledMapVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("542b1f973cd40a48764bae83efd944b2dcd69689c8eab3462346f2de760910ec")
      public
          fun sortConfiguration(sortConfiguration: FilledMapSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: IResolvable)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: TooltipOptionsProperty)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4b30dc5350a9076ba10e15f42ccbe527b305b6c1a64e369b5c31836c93c2233c")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      /**
       * @param windowOptions The window options of the filled map visual.
       */
      public fun windowOptions(windowOptions: IResolvable)

      /**
       * @param windowOptions The window options of the filled map visual.
       */
      public fun windowOptions(windowOptions: GeospatialWindowOptionsProperty)

      /**
       * @param windowOptions The window options of the filled map visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fc46494d5348be87a66b0266c58cca874bdbe8e63dce0b741397c37ffdb447c5")
      public fun windowOptions(windowOptions: GeospatialWindowOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConfigurationProperty.builder()

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: FilledMapFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(FilledMapFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e7c712243f6a4dad3b681de310e5712495c919bf40275f2b9efb4a0f40ecc2c1")
      override fun fieldWells(fieldWells: FilledMapFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(FilledMapFieldWellsProperty(fieldWells))

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("226bb7f4ef7bd18caad0f0c47309e3e7834f103b9ff6ec5e1234d561d6aecb19")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      /**
       * @param mapStyleOptions The map style options of the filled map visual.
       */
      override fun mapStyleOptions(mapStyleOptions: IResolvable) {
        cdkBuilder.mapStyleOptions(mapStyleOptions.let(IResolvable::unwrap))
      }

      /**
       * @param mapStyleOptions The map style options of the filled map visual.
       */
      override fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty) {
        cdkBuilder.mapStyleOptions(mapStyleOptions.let(GeospatialMapStyleOptionsProperty::unwrap))
      }

      /**
       * @param mapStyleOptions The map style options of the filled map visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a60c0ca9c541aa3e367cc7586a89242606726193eb07b3a59b8fccd0282ef992")
      override
          fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty.Builder.() -> Unit):
          Unit = mapStyleOptions(GeospatialMapStyleOptionsProperty(mapStyleOptions))

      /**
       * @param sortConfiguration The sort configuration of a `FilledMapVisual` .
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a `FilledMapVisual` .
       */
      override fun sortConfiguration(sortConfiguration: FilledMapSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(FilledMapSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a `FilledMapVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("542b1f973cd40a48764bae83efd944b2dcd69689c8eab3462346f2de760910ec")
      override
          fun sortConfiguration(sortConfiguration: FilledMapSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(FilledMapSortConfigurationProperty(sortConfiguration))

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4b30dc5350a9076ba10e15f42ccbe527b305b6c1a64e369b5c31836c93c2233c")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      /**
       * @param windowOptions The window options of the filled map visual.
       */
      override fun windowOptions(windowOptions: IResolvable) {
        cdkBuilder.windowOptions(windowOptions.let(IResolvable::unwrap))
      }

      /**
       * @param windowOptions The window options of the filled map visual.
       */
      override fun windowOptions(windowOptions: GeospatialWindowOptionsProperty) {
        cdkBuilder.windowOptions(windowOptions.let(GeospatialWindowOptionsProperty::unwrap))
      }

      /**
       * @param windowOptions The window options of the filled map visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fc46494d5348be87a66b0266c58cca874bdbe8e63dce0b741397c37ffdb447c5")
      override fun windowOptions(windowOptions: GeospatialWindowOptionsProperty.Builder.() -> Unit):
          Unit = windowOptions(GeospatialWindowOptionsProperty(windowOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConfigurationProperty,
    ) : FilledMapConfigurationProperty {
      /**
       * The field wells of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The legend display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-legend)
       */
      override fun legend(): Any? = unwrap(this).getLegend()

      /**
       * The map style options of the filled map visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-mapstyleoptions)
       */
      override fun mapStyleOptions(): Any? = unwrap(this).getMapStyleOptions()

      /**
       * The sort configuration of a `FilledMapVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The tooltip display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-tooltip)
       */
      override fun tooltip(): Any? = unwrap(this).getTooltip()

      /**
       * The window options of the filled map visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-windowoptions)
       */
      override fun windowOptions(): Any? = unwrap(this).getWindowOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilledMapConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConfigurationProperty):
          FilledMapConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface EntityProperty {
    /**
     * The hierarchical path of the entity within the analysis, template, or dashboard definition
     * tree.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-entity.html#cfn-quicksight-analysis-entity-path)
     */
    public fun path(): String? = unwrap(this).getPath()

    /**
     * A builder for [EntityProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param path The hierarchical path of the entity within the analysis, template, or dashboard
       * definition tree.
       */
      public fun path(path: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.EntityProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.EntityProperty.builder()

      /**
       * @param path The hierarchical path of the entity within the analysis, template, or dashboard
       * definition tree.
       */
      override fun path(path: String) {
        cdkBuilder.path(path)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.EntityProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.EntityProperty,
    ) : EntityProperty {
      /**
       * The hierarchical path of the entity within the analysis, template, or dashboard definition
       * tree.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-entity.html#cfn-quicksight-analysis-entity-path)
       */
      override fun path(): String? = unwrap(this).getPath()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): EntityProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.EntityProperty):
          EntityProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: EntityProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.EntityProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface DataPathSortProperty {
    /**
     * Determines the sort direction.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathsort.html#cfn-quicksight-analysis-datapathsort-direction)
     */
    public fun direction(): String

    /**
     * The list of data paths that need to be sorted.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathsort.html#cfn-quicksight-analysis-datapathsort-sortpaths)
     */
    public fun sortPaths(): Any

    /**
     * A builder for [DataPathSortProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param direction Determines the sort direction. 
       */
      public fun direction(direction: String)

      /**
       * @param sortPaths The list of data paths that need to be sorted. 
       */
      public fun sortPaths(sortPaths: IResolvable)

      /**
       * @param sortPaths The list of data paths that need to be sorted. 
       */
      public fun sortPaths(sortPaths: List<Any>)

      /**
       * @param sortPaths The list of data paths that need to be sorted. 
       */
      public fun sortPaths(vararg sortPaths: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathSortProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathSortProperty.builder()

      /**
       * @param direction Determines the sort direction. 
       */
      override fun direction(direction: String) {
        cdkBuilder.direction(direction)
      }

      /**
       * @param sortPaths The list of data paths that need to be sorted. 
       */
      override fun sortPaths(sortPaths: IResolvable) {
        cdkBuilder.sortPaths(sortPaths.let(IResolvable::unwrap))
      }

      /**
       * @param sortPaths The list of data paths that need to be sorted. 
       */
      override fun sortPaths(sortPaths: List<Any>) {
        cdkBuilder.sortPaths(sortPaths)
      }

      /**
       * @param sortPaths The list of data paths that need to be sorted. 
       */
      override fun sortPaths(vararg sortPaths: Any): Unit = sortPaths(sortPaths.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathSortProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathSortProperty,
    ) : DataPathSortProperty {
      /**
       * Determines the sort direction.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathsort.html#cfn-quicksight-analysis-datapathsort-direction)
       */
      override fun direction(): String = unwrap(this).getDirection()

      /**
       * The list of data paths that need to be sorted.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathsort.html#cfn-quicksight-analysis-datapathsort-sortpaths)
       */
      override fun sortPaths(): Any = unwrap(this).getSortPaths()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DataPathSortProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathSortProperty):
          DataPathSortProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataPathSortProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathSortProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface MinimumLabelTypeProperty {
    /**
     * The visibility of the minimum label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-minimumlabeltype.html#cfn-quicksight-analysis-minimumlabeltype-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [MinimumLabelTypeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility The visibility of the minimum label.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MinimumLabelTypeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MinimumLabelTypeProperty.builder()

      /**
       * @param visibility The visibility of the minimum label.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MinimumLabelTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MinimumLabelTypeProperty,
    ) : MinimumLabelTypeProperty {
      /**
       * The visibility of the minimum label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-minimumlabeltype.html#cfn-quicksight-analysis-minimumlabeltype-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): MinimumLabelTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.MinimumLabelTypeProperty):
          MinimumLabelTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MinimumLabelTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MinimumLabelTypeProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface ComparisonFormatConfigurationProperty {
    /**
     * The number display format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonformatconfiguration.html#cfn-quicksight-analysis-comparisonformatconfiguration-numberdisplayformatconfiguration)
     */
    public fun numberDisplayFormatConfiguration(): Any? =
        unwrap(this).getNumberDisplayFormatConfiguration()

    /**
     * The percentage display format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonformatconfiguration.html#cfn-quicksight-analysis-comparisonformatconfiguration-percentagedisplayformatconfiguration)
     */
    public fun percentageDisplayFormatConfiguration(): Any? =
        unwrap(this).getPercentageDisplayFormatConfiguration()

    /**
     * A builder for [ComparisonFormatConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param numberDisplayFormatConfiguration The number display format.
       */
      public fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: IResolvable)

      /**
       * @param numberDisplayFormatConfiguration The number display format.
       */
      public
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty)

      /**
       * @param numberDisplayFormatConfiguration The number display format.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eb466d344c5f78e8022fc2f180295a43297ff19bf699dd845301e4b99aadaf24")
      public
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param percentageDisplayFormatConfiguration The percentage display format.
       */
      public
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: IResolvable)

      /**
       * @param percentageDisplayFormatConfiguration The percentage display format.
       */
      public
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty)

      /**
       * @param percentageDisplayFormatConfiguration The percentage display format.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9b187639d3fc2c48a29127040d8931e0e1c3dc8a669277a6cb7e0840b237607c")
      public
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComparisonFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComparisonFormatConfigurationProperty.builder()

      /**
       * @param numberDisplayFormatConfiguration The number display format.
       */
      override fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: IResolvable) {
        cdkBuilder.numberDisplayFormatConfiguration(numberDisplayFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param numberDisplayFormatConfiguration The number display format.
       */
      override
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty) {
        cdkBuilder.numberDisplayFormatConfiguration(numberDisplayFormatConfiguration.let(NumberDisplayFormatConfigurationProperty::unwrap))
      }

      /**
       * @param numberDisplayFormatConfiguration The number display format.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eb466d344c5f78e8022fc2f180295a43297ff19bf699dd845301e4b99aadaf24")
      override
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty(numberDisplayFormatConfiguration))

      /**
       * @param percentageDisplayFormatConfiguration The percentage display format.
       */
      override
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: IResolvable) {
        cdkBuilder.percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param percentageDisplayFormatConfiguration The percentage display format.
       */
      override
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty) {
        cdkBuilder.percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration.let(PercentageDisplayFormatConfigurationProperty::unwrap))
      }

      /**
       * @param percentageDisplayFormatConfiguration The percentage display format.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9b187639d3fc2c48a29127040d8931e0e1c3dc8a669277a6cb7e0840b237607c")
      override
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty(percentageDisplayFormatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComparisonFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComparisonFormatConfigurationProperty,
    ) : ComparisonFormatConfigurationProperty {
      /**
       * The number display format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonformatconfiguration.html#cfn-quicksight-analysis-comparisonformatconfiguration-numberdisplayformatconfiguration)
       */
      override fun numberDisplayFormatConfiguration(): Any? =
          unwrap(this).getNumberDisplayFormatConfiguration()

      /**
       * The percentage display format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonformatconfiguration.html#cfn-quicksight-analysis-comparisonformatconfiguration-percentagedisplayformatconfiguration)
       */
      override fun percentageDisplayFormatConfiguration(): Any? =
          unwrap(this).getPercentageDisplayFormatConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ComparisonFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ComparisonFormatConfigurationProperty):
          ComparisonFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComparisonFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComparisonFormatConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface BarChartAggregatedFieldWellsProperty {
    /**
     * The category (y-axis) field well of a bar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html#cfn-quicksight-analysis-barchartaggregatedfieldwells-category)
     */
    public fun category(): Any? = unwrap(this).getCategory()

    /**
     * The color (group/color) field well of a bar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html#cfn-quicksight-analysis-barchartaggregatedfieldwells-colors)
     */
    public fun colors(): Any? = unwrap(this).getColors()

    /**
     * The small multiples field well of a bar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html#cfn-quicksight-analysis-barchartaggregatedfieldwells-smallmultiples)
     */
    public fun smallMultiples(): Any? = unwrap(this).getSmallMultiples()

    /**
     * The value field wells of a bar chart.
     *
     * Values are aggregated by category.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html#cfn-quicksight-analysis-barchartaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [BarChartAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param category The category (y-axis) field well of a bar chart.
       */
      public fun category(category: IResolvable)

      /**
       * @param category The category (y-axis) field well of a bar chart.
       */
      public fun category(category: List<Any>)

      /**
       * @param category The category (y-axis) field well of a bar chart.
       */
      public fun category(vararg category: Any)

      /**
       * @param colors The color (group/color) field well of a bar chart.
       */
      public fun colors(colors: IResolvable)

      /**
       * @param colors The color (group/color) field well of a bar chart.
       */
      public fun colors(colors: List<Any>)

      /**
       * @param colors The color (group/color) field well of a bar chart.
       */
      public fun colors(vararg colors: Any)

      /**
       * @param smallMultiples The small multiples field well of a bar chart.
       */
      public fun smallMultiples(smallMultiples: IResolvable)

      /**
       * @param smallMultiples The small multiples field well of a bar chart.
       */
      public fun smallMultiples(smallMultiples: List<Any>)

      /**
       * @param smallMultiples The small multiples field well of a bar chart.
       */
      public fun smallMultiples(vararg smallMultiples: Any)

      /**
       * @param values The value field wells of a bar chart.
       * Values are aggregated by category.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The value field wells of a bar chart.
       * Values are aggregated by category.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The value field wells of a bar chart.
       * Values are aggregated by category.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartAggregatedFieldWellsProperty.builder()

      /**
       * @param category The category (y-axis) field well of a bar chart.
       */
      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      /**
       * @param category The category (y-axis) field well of a bar chart.
       */
      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      /**
       * @param category The category (y-axis) field well of a bar chart.
       */
      override fun category(vararg category: Any): Unit = category(category.toList())

      /**
       * @param colors The color (group/color) field well of a bar chart.
       */
      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      /**
       * @param colors The color (group/color) field well of a bar chart.
       */
      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      /**
       * @param colors The color (group/color) field well of a bar chart.
       */
      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      /**
       * @param smallMultiples The small multiples field well of a bar chart.
       */
      override fun smallMultiples(smallMultiples: IResolvable) {
        cdkBuilder.smallMultiples(smallMultiples.let(IResolvable::unwrap))
      }

      /**
       * @param smallMultiples The small multiples field well of a bar chart.
       */
      override fun smallMultiples(smallMultiples: List<Any>) {
        cdkBuilder.smallMultiples(smallMultiples)
      }

      /**
       * @param smallMultiples The small multiples field well of a bar chart.
       */
      override fun smallMultiples(vararg smallMultiples: Any): Unit =
          smallMultiples(smallMultiples.toList())

      /**
       * @param values The value field wells of a bar chart.
       * Values are aggregated by category.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The value field wells of a bar chart.
       * Values are aggregated by category.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The value field wells of a bar chart.
       * Values are aggregated by category.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartAggregatedFieldWellsProperty,
    ) : BarChartAggregatedFieldWellsProperty {
      /**
       * The category (y-axis) field well of a bar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html#cfn-quicksight-analysis-barchartaggregatedfieldwells-category)
       */
      override fun category(): Any? = unwrap(this).getCategory()

      /**
       * The color (group/color) field well of a bar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html#cfn-quicksight-analysis-barchartaggregatedfieldwells-colors)
       */
      override fun colors(): Any? = unwrap(this).getColors()

      /**
       * The small multiples field well of a bar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html#cfn-quicksight-analysis-barchartaggregatedfieldwells-smallmultiples)
       */
      override fun smallMultiples(): Any? = unwrap(this).getSmallMultiples()

      /**
       * The value field wells of a bar chart.
       *
       * Values are aggregated by category.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html#cfn-quicksight-analysis-barchartaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          BarChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartAggregatedFieldWellsProperty):
          BarChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BarChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface CustomActionNavigationOperationProperty {
    /**
     * The configuration that chooses the navigation target.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionnavigationoperation.html#cfn-quicksight-analysis-customactionnavigationoperation-localnavigationconfiguration)
     */
    public fun localNavigationConfiguration(): Any? = unwrap(this).getLocalNavigationConfiguration()

    /**
     * A builder for [CustomActionNavigationOperationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param localNavigationConfiguration The configuration that chooses the navigation target.
       */
      public fun localNavigationConfiguration(localNavigationConfiguration: IResolvable)

      /**
       * @param localNavigationConfiguration The configuration that chooses the navigation target.
       */
      public
          fun localNavigationConfiguration(localNavigationConfiguration: LocalNavigationConfigurationProperty)

      /**
       * @param localNavigationConfiguration The configuration that chooses the navigation target.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("456aaa8eb688454b8e34dc04caaa4bb98826ce671fed773a8bf32906652eaf46")
      public
          fun localNavigationConfiguration(localNavigationConfiguration: LocalNavigationConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionNavigationOperationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionNavigationOperationProperty.builder()

      /**
       * @param localNavigationConfiguration The configuration that chooses the navigation target.
       */
      override fun localNavigationConfiguration(localNavigationConfiguration: IResolvable) {
        cdkBuilder.localNavigationConfiguration(localNavigationConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param localNavigationConfiguration The configuration that chooses the navigation target.
       */
      override
          fun localNavigationConfiguration(localNavigationConfiguration: LocalNavigationConfigurationProperty) {
        cdkBuilder.localNavigationConfiguration(localNavigationConfiguration.let(LocalNavigationConfigurationProperty::unwrap))
      }

      /**
       * @param localNavigationConfiguration The configuration that chooses the navigation target.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("456aaa8eb688454b8e34dc04caaa4bb98826ce671fed773a8bf32906652eaf46")
      override
          fun localNavigationConfiguration(localNavigationConfiguration: LocalNavigationConfigurationProperty.Builder.() -> Unit):
          Unit =
          localNavigationConfiguration(LocalNavigationConfigurationProperty(localNavigationConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionNavigationOperationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionNavigationOperationProperty,
    ) : CustomActionNavigationOperationProperty {
      /**
       * The configuration that chooses the navigation target.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionnavigationoperation.html#cfn-quicksight-analysis-customactionnavigationoperation-localnavigationconfiguration)
       */
      override fun localNavigationConfiguration(): Any? =
          unwrap(this).getLocalNavigationConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomActionNavigationOperationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionNavigationOperationProperty):
          CustomActionNavigationOperationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomActionNavigationOperationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionNavigationOperationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FreeFormLayoutCanvasSizeOptionsProperty {
    /**
     * The options that determine the sizing of the canvas used in a free-form layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutcanvassizeoptions.html#cfn-quicksight-analysis-freeformlayoutcanvassizeoptions-screencanvassizeoptions)
     */
    public fun screenCanvasSizeOptions(): Any? = unwrap(this).getScreenCanvasSizeOptions()

    /**
     * A builder for [FreeFormLayoutCanvasSizeOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param screenCanvasSizeOptions The options that determine the sizing of the canvas used in
       * a free-form layout.
       */
      public fun screenCanvasSizeOptions(screenCanvasSizeOptions: IResolvable)

      /**
       * @param screenCanvasSizeOptions The options that determine the sizing of the canvas used in
       * a free-form layout.
       */
      public
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: FreeFormLayoutScreenCanvasSizeOptionsProperty)

      /**
       * @param screenCanvasSizeOptions The options that determine the sizing of the canvas used in
       * a free-form layout.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("626f2892590f77ee391a72821abcc724c2ff880e8fa4d9493aa2d8ca59470895")
      public
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: FreeFormLayoutScreenCanvasSizeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutCanvasSizeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutCanvasSizeOptionsProperty.builder()

      /**
       * @param screenCanvasSizeOptions The options that determine the sizing of the canvas used in
       * a free-form layout.
       */
      override fun screenCanvasSizeOptions(screenCanvasSizeOptions: IResolvable) {
        cdkBuilder.screenCanvasSizeOptions(screenCanvasSizeOptions.let(IResolvable::unwrap))
      }

      /**
       * @param screenCanvasSizeOptions The options that determine the sizing of the canvas used in
       * a free-form layout.
       */
      override
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: FreeFormLayoutScreenCanvasSizeOptionsProperty) {
        cdkBuilder.screenCanvasSizeOptions(screenCanvasSizeOptions.let(FreeFormLayoutScreenCanvasSizeOptionsProperty::unwrap))
      }

      /**
       * @param screenCanvasSizeOptions The options that determine the sizing of the canvas used in
       * a free-form layout.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("626f2892590f77ee391a72821abcc724c2ff880e8fa4d9493aa2d8ca59470895")
      override
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: FreeFormLayoutScreenCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit =
          screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty(screenCanvasSizeOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutCanvasSizeOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutCanvasSizeOptionsProperty,
    ) : FreeFormLayoutCanvasSizeOptionsProperty {
      /**
       * The options that determine the sizing of the canvas used in a free-form layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutcanvassizeoptions.html#cfn-quicksight-analysis-freeformlayoutcanvassizeoptions-screencanvassizeoptions)
       */
      override fun screenCanvasSizeOptions(): Any? = unwrap(this).getScreenCanvasSizeOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FreeFormLayoutCanvasSizeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutCanvasSizeOptionsProperty):
          FreeFormLayoutCanvasSizeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormLayoutCanvasSizeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutCanvasSizeOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface LineChartSeriesSettingsProperty {
    /**
     * Line styles options for a line series in `LineChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartseriessettings.html#cfn-quicksight-analysis-linechartseriessettings-linestylesettings)
     */
    public fun lineStyleSettings(): Any? = unwrap(this).getLineStyleSettings()

    /**
     * Marker styles options for a line series in `LineChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartseriessettings.html#cfn-quicksight-analysis-linechartseriessettings-markerstylesettings)
     */
    public fun markerStyleSettings(): Any? = unwrap(this).getMarkerStyleSettings()

    /**
     * A builder for [LineChartSeriesSettingsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param lineStyleSettings Line styles options for a line series in `LineChartVisual` .
       */
      public fun lineStyleSettings(lineStyleSettings: IResolvable)

      /**
       * @param lineStyleSettings Line styles options for a line series in `LineChartVisual` .
       */
      public fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty)

      /**
       * @param lineStyleSettings Line styles options for a line series in `LineChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f0f95ba9a94851f2ddf5ea539f0b0f09be781d7b8f605ea960668a6649b087c7")
      public
          fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty.Builder.() -> Unit)

      /**
       * @param markerStyleSettings Marker styles options for a line series in `LineChartVisual` .
       */
      public fun markerStyleSettings(markerStyleSettings: IResolvable)

      /**
       * @param markerStyleSettings Marker styles options for a line series in `LineChartVisual` .
       */
      public fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty)

      /**
       * @param markerStyleSettings Marker styles options for a line series in `LineChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f05b96eb77367a0997bde9c7b0561e46eb558618d4a3cfba50f84929a1ad46cc")
      public
          fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartSeriesSettingsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartSeriesSettingsProperty.builder()

      /**
       * @param lineStyleSettings Line styles options for a line series in `LineChartVisual` .
       */
      override fun lineStyleSettings(lineStyleSettings: IResolvable) {
        cdkBuilder.lineStyleSettings(lineStyleSettings.let(IResolvable::unwrap))
      }

      /**
       * @param lineStyleSettings Line styles options for a line series in `LineChartVisual` .
       */
      override fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty) {
        cdkBuilder.lineStyleSettings(lineStyleSettings.let(LineChartLineStyleSettingsProperty::unwrap))
      }

      /**
       * @param lineStyleSettings Line styles options for a line series in `LineChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f0f95ba9a94851f2ddf5ea539f0b0f09be781d7b8f605ea960668a6649b087c7")
      override
          fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty.Builder.() -> Unit):
          Unit = lineStyleSettings(LineChartLineStyleSettingsProperty(lineStyleSettings))

      /**
       * @param markerStyleSettings Marker styles options for a line series in `LineChartVisual` .
       */
      override fun markerStyleSettings(markerStyleSettings: IResolvable) {
        cdkBuilder.markerStyleSettings(markerStyleSettings.let(IResolvable::unwrap))
      }

      /**
       * @param markerStyleSettings Marker styles options for a line series in `LineChartVisual` .
       */
      override fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty) {
        cdkBuilder.markerStyleSettings(markerStyleSettings.let(LineChartMarkerStyleSettingsProperty::unwrap))
      }

      /**
       * @param markerStyleSettings Marker styles options for a line series in `LineChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f05b96eb77367a0997bde9c7b0561e46eb558618d4a3cfba50f84929a1ad46cc")
      override
          fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty.Builder.() -> Unit):
          Unit = markerStyleSettings(LineChartMarkerStyleSettingsProperty(markerStyleSettings))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartSeriesSettingsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartSeriesSettingsProperty,
    ) : LineChartSeriesSettingsProperty {
      /**
       * Line styles options for a line series in `LineChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartseriessettings.html#cfn-quicksight-analysis-linechartseriessettings-linestylesettings)
       */
      override fun lineStyleSettings(): Any? = unwrap(this).getLineStyleSettings()

      /**
       * Marker styles options for a line series in `LineChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartseriessettings.html#cfn-quicksight-analysis-linechartseriessettings-markerstylesettings)
       */
      override fun markerStyleSettings(): Any? = unwrap(this).getMarkerStyleSettings()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): LineChartSeriesSettingsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartSeriesSettingsProperty):
          LineChartSeriesSettingsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartSeriesSettingsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartSeriesSettingsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface BoxPlotAggregatedFieldWellsProperty {
    /**
     * The group by field well of a box plot chart.
     *
     * Values are grouped based on group by fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotaggregatedfieldwells.html#cfn-quicksight-analysis-boxplotaggregatedfieldwells-groupby)
     */
    public fun groupBy(): Any? = unwrap(this).getGroupBy()

    /**
     * The value field well of a box plot chart.
     *
     * Values are aggregated based on group by fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotaggregatedfieldwells.html#cfn-quicksight-analysis-boxplotaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [BoxPlotAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param groupBy The group by field well of a box plot chart.
       * Values are grouped based on group by fields.
       */
      public fun groupBy(groupBy: IResolvable)

      /**
       * @param groupBy The group by field well of a box plot chart.
       * Values are grouped based on group by fields.
       */
      public fun groupBy(groupBy: List<Any>)

      /**
       * @param groupBy The group by field well of a box plot chart.
       * Values are grouped based on group by fields.
       */
      public fun groupBy(vararg groupBy: Any)

      /**
       * @param values The value field well of a box plot chart.
       * Values are aggregated based on group by fields.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The value field well of a box plot chart.
       * Values are aggregated based on group by fields.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The value field well of a box plot chart.
       * Values are aggregated based on group by fields.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotAggregatedFieldWellsProperty.builder()

      /**
       * @param groupBy The group by field well of a box plot chart.
       * Values are grouped based on group by fields.
       */
      override fun groupBy(groupBy: IResolvable) {
        cdkBuilder.groupBy(groupBy.let(IResolvable::unwrap))
      }

      /**
       * @param groupBy The group by field well of a box plot chart.
       * Values are grouped based on group by fields.
       */
      override fun groupBy(groupBy: List<Any>) {
        cdkBuilder.groupBy(groupBy)
      }

      /**
       * @param groupBy The group by field well of a box plot chart.
       * Values are grouped based on group by fields.
       */
      override fun groupBy(vararg groupBy: Any): Unit = groupBy(groupBy.toList())

      /**
       * @param values The value field well of a box plot chart.
       * Values are aggregated based on group by fields.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The value field well of a box plot chart.
       * Values are aggregated based on group by fields.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The value field well of a box plot chart.
       * Values are aggregated based on group by fields.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotAggregatedFieldWellsProperty,
    ) : BoxPlotAggregatedFieldWellsProperty {
      /**
       * The group by field well of a box plot chart.
       *
       * Values are grouped based on group by fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotaggregatedfieldwells.html#cfn-quicksight-analysis-boxplotaggregatedfieldwells-groupby)
       */
      override fun groupBy(): Any? = unwrap(this).getGroupBy()

      /**
       * The value field well of a box plot chart.
       *
       * Values are aggregated based on group by fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotaggregatedfieldwells.html#cfn-quicksight-analysis-boxplotaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          BoxPlotAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotAggregatedFieldWellsProperty):
          BoxPlotAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SectionBasedLayoutConfigurationProperty {
    /**
     * A list of body section configurations.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-sectionbasedlayoutconfiguration-bodysections)
     */
    public fun bodySections(): Any

    /**
     * The options for the canvas of a section-based layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-sectionbasedlayoutconfiguration-canvassizeoptions)
     */
    public fun canvasSizeOptions(): Any

    /**
     * A list of footer section configurations.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-sectionbasedlayoutconfiguration-footersections)
     */
    public fun footerSections(): Any

    /**
     * A list of header section configurations.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-sectionbasedlayoutconfiguration-headersections)
     */
    public fun headerSections(): Any

    /**
     * A builder for [SectionBasedLayoutConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param bodySections A list of body section configurations. 
       */
      public fun bodySections(bodySections: IResolvable)

      /**
       * @param bodySections A list of body section configurations. 
       */
      public fun bodySections(bodySections: List<Any>)

      /**
       * @param bodySections A list of body section configurations. 
       */
      public fun bodySections(vararg bodySections: Any)

      /**
       * @param canvasSizeOptions The options for the canvas of a section-based layout. 
       */
      public fun canvasSizeOptions(canvasSizeOptions: IResolvable)

      /**
       * @param canvasSizeOptions The options for the canvas of a section-based layout. 
       */
      public fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty)

      /**
       * @param canvasSizeOptions The options for the canvas of a section-based layout. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b96f2f1ca6e7843c14bec2c9bd2424440cb2fa960d439b9f9e3ece5795bb3a6d")
      public
          fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty.Builder.() -> Unit)

      /**
       * @param footerSections A list of footer section configurations. 
       */
      public fun footerSections(footerSections: IResolvable)

      /**
       * @param footerSections A list of footer section configurations. 
       */
      public fun footerSections(footerSections: List<Any>)

      /**
       * @param footerSections A list of footer section configurations. 
       */
      public fun footerSections(vararg footerSections: Any)

      /**
       * @param headerSections A list of header section configurations. 
       */
      public fun headerSections(headerSections: IResolvable)

      /**
       * @param headerSections A list of header section configurations. 
       */
      public fun headerSections(headerSections: List<Any>)

      /**
       * @param headerSections A list of header section configurations. 
       */
      public fun headerSections(vararg headerSections: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutConfigurationProperty.builder()

      /**
       * @param bodySections A list of body section configurations. 
       */
      override fun bodySections(bodySections: IResolvable) {
        cdkBuilder.bodySections(bodySections.let(IResolvable::unwrap))
      }

      /**
       * @param bodySections A list of body section configurations. 
       */
      override fun bodySections(bodySections: List<Any>) {
        cdkBuilder.bodySections(bodySections)
      }

      /**
       * @param bodySections A list of body section configurations. 
       */
      override fun bodySections(vararg bodySections: Any): Unit =
          bodySections(bodySections.toList())

      /**
       * @param canvasSizeOptions The options for the canvas of a section-based layout. 
       */
      override fun canvasSizeOptions(canvasSizeOptions: IResolvable) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(IResolvable::unwrap))
      }

      /**
       * @param canvasSizeOptions The options for the canvas of a section-based layout. 
       */
      override
          fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(SectionBasedLayoutCanvasSizeOptionsProperty::unwrap))
      }

      /**
       * @param canvasSizeOptions The options for the canvas of a section-based layout. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b96f2f1ca6e7843c14bec2c9bd2424440cb2fa960d439b9f9e3ece5795bb3a6d")
      override
          fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit = canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty(canvasSizeOptions))

      /**
       * @param footerSections A list of footer section configurations. 
       */
      override fun footerSections(footerSections: IResolvable) {
        cdkBuilder.footerSections(footerSections.let(IResolvable::unwrap))
      }

      /**
       * @param footerSections A list of footer section configurations. 
       */
      override fun footerSections(footerSections: List<Any>) {
        cdkBuilder.footerSections(footerSections)
      }

      /**
       * @param footerSections A list of footer section configurations. 
       */
      override fun footerSections(vararg footerSections: Any): Unit =
          footerSections(footerSections.toList())

      /**
       * @param headerSections A list of header section configurations. 
       */
      override fun headerSections(headerSections: IResolvable) {
        cdkBuilder.headerSections(headerSections.let(IResolvable::unwrap))
      }

      /**
       * @param headerSections A list of header section configurations. 
       */
      override fun headerSections(headerSections: List<Any>) {
        cdkBuilder.headerSections(headerSections)
      }

      /**
       * @param headerSections A list of header section configurations. 
       */
      override fun headerSections(vararg headerSections: Any): Unit =
          headerSections(headerSections.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutConfigurationProperty,
    ) : SectionBasedLayoutConfigurationProperty {
      /**
       * A list of body section configurations.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-sectionbasedlayoutconfiguration-bodysections)
       */
      override fun bodySections(): Any = unwrap(this).getBodySections()

      /**
       * The options for the canvas of a section-based layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-sectionbasedlayoutconfiguration-canvassizeoptions)
       */
      override fun canvasSizeOptions(): Any = unwrap(this).getCanvasSizeOptions()

      /**
       * A list of footer section configurations.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-sectionbasedlayoutconfiguration-footersections)
       */
      override fun footerSections(): Any = unwrap(this).getFooterSections()

      /**
       * A list of header section configurations.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-sectionbasedlayoutconfiguration-headersections)
       */
      override fun headerSections(): Any = unwrap(this).getHeaderSections()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SectionBasedLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutConfigurationProperty):
          SectionBasedLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionBasedLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ParameterSelectableValuesProperty {
    /**
     * The column identifier that fetches values from the data set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterselectablevalues.html#cfn-quicksight-analysis-parameterselectablevalues-linktodatasetcolumn)
     */
    public fun linkToDataSetColumn(): Any? = unwrap(this).getLinkToDataSetColumn()

    /**
     * The values that are used in `ParameterSelectableValues` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterselectablevalues.html#cfn-quicksight-analysis-parameterselectablevalues-values)
     */
    public fun values(): List<String> = unwrap(this).getValues() ?: emptyList()

    /**
     * A builder for [ParameterSelectableValuesProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param linkToDataSetColumn The column identifier that fetches values from the data set.
       */
      public fun linkToDataSetColumn(linkToDataSetColumn: IResolvable)

      /**
       * @param linkToDataSetColumn The column identifier that fetches values from the data set.
       */
      public fun linkToDataSetColumn(linkToDataSetColumn: ColumnIdentifierProperty)

      /**
       * @param linkToDataSetColumn The column identifier that fetches values from the data set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7d44843c785ca9812433f2d702d5f1ba207c4f79cc6fe05ff3d11779b8f93b92")
      public
          fun linkToDataSetColumn(linkToDataSetColumn: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param values The values that are used in `ParameterSelectableValues` .
       */
      public fun values(values: List<String>)

      /**
       * @param values The values that are used in `ParameterSelectableValues` .
       */
      public fun values(vararg values: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterSelectableValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterSelectableValuesProperty.builder()

      /**
       * @param linkToDataSetColumn The column identifier that fetches values from the data set.
       */
      override fun linkToDataSetColumn(linkToDataSetColumn: IResolvable) {
        cdkBuilder.linkToDataSetColumn(linkToDataSetColumn.let(IResolvable::unwrap))
      }

      /**
       * @param linkToDataSetColumn The column identifier that fetches values from the data set.
       */
      override fun linkToDataSetColumn(linkToDataSetColumn: ColumnIdentifierProperty) {
        cdkBuilder.linkToDataSetColumn(linkToDataSetColumn.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param linkToDataSetColumn The column identifier that fetches values from the data set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7d44843c785ca9812433f2d702d5f1ba207c4f79cc6fe05ff3d11779b8f93b92")
      override
          fun linkToDataSetColumn(linkToDataSetColumn: ColumnIdentifierProperty.Builder.() -> Unit):
          Unit = linkToDataSetColumn(ColumnIdentifierProperty(linkToDataSetColumn))

      /**
       * @param values The values that are used in `ParameterSelectableValues` .
       */
      override fun values(values: List<String>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The values that are used in `ParameterSelectableValues` .
       */
      override fun values(vararg values: String): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterSelectableValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterSelectableValuesProperty,
    ) : ParameterSelectableValuesProperty {
      /**
       * The column identifier that fetches values from the data set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterselectablevalues.html#cfn-quicksight-analysis-parameterselectablevalues-linktodatasetcolumn)
       */
      override fun linkToDataSetColumn(): Any? = unwrap(this).getLinkToDataSetColumn()

      /**
       * The values that are used in `ParameterSelectableValues` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterselectablevalues.html#cfn-quicksight-analysis-parameterselectablevalues-values)
       */
      override fun values(): List<String> = unwrap(this).getValues() ?: emptyList()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ParameterSelectableValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterSelectableValuesProperty):
          ParameterSelectableValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterSelectableValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterSelectableValuesProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ForecastScenarioProperty {
    /**
     * The what-if analysis forecast setup with the target date.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastscenario.html#cfn-quicksight-analysis-forecastscenario-whatifpointscenario)
     */
    public fun whatIfPointScenario(): Any? = unwrap(this).getWhatIfPointScenario()

    /**
     * The what-if analysis forecast setup with the date range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastscenario.html#cfn-quicksight-analysis-forecastscenario-whatifrangescenario)
     */
    public fun whatIfRangeScenario(): Any? = unwrap(this).getWhatIfRangeScenario()

    /**
     * A builder for [ForecastScenarioProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param whatIfPointScenario The what-if analysis forecast setup with the target date.
       */
      public fun whatIfPointScenario(whatIfPointScenario: IResolvable)

      /**
       * @param whatIfPointScenario The what-if analysis forecast setup with the target date.
       */
      public fun whatIfPointScenario(whatIfPointScenario: WhatIfPointScenarioProperty)

      /**
       * @param whatIfPointScenario The what-if analysis forecast setup with the target date.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("90624bbb050bb02f465bee9f621ff5166526e0078d0839cdf6ffad6dc3b67942")
      public
          fun whatIfPointScenario(whatIfPointScenario: WhatIfPointScenarioProperty.Builder.() -> Unit)

      /**
       * @param whatIfRangeScenario The what-if analysis forecast setup with the date range.
       */
      public fun whatIfRangeScenario(whatIfRangeScenario: IResolvable)

      /**
       * @param whatIfRangeScenario The what-if analysis forecast setup with the date range.
       */
      public fun whatIfRangeScenario(whatIfRangeScenario: WhatIfRangeScenarioProperty)

      /**
       * @param whatIfRangeScenario The what-if analysis forecast setup with the date range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2ba6e08103dc2845e0b6a865e75c3a7cd1dbc9345a5fd5f367e673a28366340f")
      public
          fun whatIfRangeScenario(whatIfRangeScenario: WhatIfRangeScenarioProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastScenarioProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastScenarioProperty.builder()

      /**
       * @param whatIfPointScenario The what-if analysis forecast setup with the target date.
       */
      override fun whatIfPointScenario(whatIfPointScenario: IResolvable) {
        cdkBuilder.whatIfPointScenario(whatIfPointScenario.let(IResolvable::unwrap))
      }

      /**
       * @param whatIfPointScenario The what-if analysis forecast setup with the target date.
       */
      override fun whatIfPointScenario(whatIfPointScenario: WhatIfPointScenarioProperty) {
        cdkBuilder.whatIfPointScenario(whatIfPointScenario.let(WhatIfPointScenarioProperty::unwrap))
      }

      /**
       * @param whatIfPointScenario The what-if analysis forecast setup with the target date.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("90624bbb050bb02f465bee9f621ff5166526e0078d0839cdf6ffad6dc3b67942")
      override
          fun whatIfPointScenario(whatIfPointScenario: WhatIfPointScenarioProperty.Builder.() -> Unit):
          Unit = whatIfPointScenario(WhatIfPointScenarioProperty(whatIfPointScenario))

      /**
       * @param whatIfRangeScenario The what-if analysis forecast setup with the date range.
       */
      override fun whatIfRangeScenario(whatIfRangeScenario: IResolvable) {
        cdkBuilder.whatIfRangeScenario(whatIfRangeScenario.let(IResolvable::unwrap))
      }

      /**
       * @param whatIfRangeScenario The what-if analysis forecast setup with the date range.
       */
      override fun whatIfRangeScenario(whatIfRangeScenario: WhatIfRangeScenarioProperty) {
        cdkBuilder.whatIfRangeScenario(whatIfRangeScenario.let(WhatIfRangeScenarioProperty::unwrap))
      }

      /**
       * @param whatIfRangeScenario The what-if analysis forecast setup with the date range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2ba6e08103dc2845e0b6a865e75c3a7cd1dbc9345a5fd5f367e673a28366340f")
      override
          fun whatIfRangeScenario(whatIfRangeScenario: WhatIfRangeScenarioProperty.Builder.() -> Unit):
          Unit = whatIfRangeScenario(WhatIfRangeScenarioProperty(whatIfRangeScenario))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastScenarioProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastScenarioProperty,
    ) : ForecastScenarioProperty {
      /**
       * The what-if analysis forecast setup with the target date.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastscenario.html#cfn-quicksight-analysis-forecastscenario-whatifpointscenario)
       */
      override fun whatIfPointScenario(): Any? = unwrap(this).getWhatIfPointScenario()

      /**
       * The what-if analysis forecast setup with the date range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastscenario.html#cfn-quicksight-analysis-forecastscenario-whatifrangescenario)
       */
      override fun whatIfRangeScenario(): Any? = unwrap(this).getWhatIfRangeScenario()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ForecastScenarioProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastScenarioProperty):
          ForecastScenarioProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ForecastScenarioProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastScenarioProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface TableInlineVisualizationProperty {
    /**
     * The configuration of the inline visualization of the data bars within a chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableinlinevisualization.html#cfn-quicksight-analysis-tableinlinevisualization-databars)
     */
    public fun dataBars(): Any? = unwrap(this).getDataBars()

    /**
     * A builder for [TableInlineVisualizationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataBars The configuration of the inline visualization of the data bars within a
       * chart.
       */
      public fun dataBars(dataBars: IResolvable)

      /**
       * @param dataBars The configuration of the inline visualization of the data bars within a
       * chart.
       */
      public fun dataBars(dataBars: DataBarsOptionsProperty)

      /**
       * @param dataBars The configuration of the inline visualization of the data bars within a
       * chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("156b033961715ce0fcf027aba78bc808ecbe2960689a23188914e9b455d2881e")
      public fun dataBars(dataBars: DataBarsOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableInlineVisualizationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableInlineVisualizationProperty.builder()

      /**
       * @param dataBars The configuration of the inline visualization of the data bars within a
       * chart.
       */
      override fun dataBars(dataBars: IResolvable) {
        cdkBuilder.dataBars(dataBars.let(IResolvable::unwrap))
      }

      /**
       * @param dataBars The configuration of the inline visualization of the data bars within a
       * chart.
       */
      override fun dataBars(dataBars: DataBarsOptionsProperty) {
        cdkBuilder.dataBars(dataBars.let(DataBarsOptionsProperty::unwrap))
      }

      /**
       * @param dataBars The configuration of the inline visualization of the data bars within a
       * chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("156b033961715ce0fcf027aba78bc808ecbe2960689a23188914e9b455d2881e")
      override fun dataBars(dataBars: DataBarsOptionsProperty.Builder.() -> Unit): Unit =
          dataBars(DataBarsOptionsProperty(dataBars))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableInlineVisualizationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableInlineVisualizationProperty,
    ) : TableInlineVisualizationProperty {
      /**
       * The configuration of the inline visualization of the data bars within a chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableinlinevisualization.html#cfn-quicksight-analysis-tableinlinevisualization-databars)
       */
      override fun dataBars(): Any? = unwrap(this).getDataBars()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TableInlineVisualizationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableInlineVisualizationProperty):
          TableInlineVisualizationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableInlineVisualizationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableInlineVisualizationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GaugeChartConditionalFormattingProperty {
    /**
     * Conditional formatting options of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformatting.html#cfn-quicksight-analysis-gaugechartconditionalformatting-conditionalformattingoptions)
     */
    public fun conditionalFormattingOptions(): Any? = unwrap(this).getConditionalFormattingOptions()

    /**
     * A builder for [GaugeChartConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param conditionalFormattingOptions Conditional formatting options of a `GaugeChartVisual`
       * .
       */
      public fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable)

      /**
       * @param conditionalFormattingOptions Conditional formatting options of a `GaugeChartVisual`
       * .
       */
      public fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>)

      /**
       * @param conditionalFormattingOptions Conditional formatting options of a `GaugeChartVisual`
       * .
       */
      public fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConditionalFormattingProperty.builder()

      /**
       * @param conditionalFormattingOptions Conditional formatting options of a `GaugeChartVisual`
       * .
       */
      override fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions.let(IResolvable::unwrap))
      }

      /**
       * @param conditionalFormattingOptions Conditional formatting options of a `GaugeChartVisual`
       * .
       */
      override fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions)
      }

      /**
       * @param conditionalFormattingOptions Conditional formatting options of a `GaugeChartVisual`
       * .
       */
      override fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any): Unit =
          conditionalFormattingOptions(conditionalFormattingOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConditionalFormattingProperty,
    ) : GaugeChartConditionalFormattingProperty {
      /**
       * Conditional formatting options of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformatting.html#cfn-quicksight-analysis-gaugechartconditionalformatting-conditionalformattingoptions)
       */
      override fun conditionalFormattingOptions(): Any? =
          unwrap(this).getConditionalFormattingOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GaugeChartConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConditionalFormattingProperty):
          GaugeChartConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ExplicitHierarchyProperty {
    /**
     * The list of columns that define the explicit hierarchy.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-explicithierarchy.html#cfn-quicksight-analysis-explicithierarchy-columns)
     */
    public fun columns(): Any

    /**
     * The option that determines the drill down filters for the explicit hierarchy.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-explicithierarchy.html#cfn-quicksight-analysis-explicithierarchy-drilldownfilters)
     */
    public fun drillDownFilters(): Any? = unwrap(this).getDrillDownFilters()

    /**
     * The hierarchy ID of the explicit hierarchy.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-explicithierarchy.html#cfn-quicksight-analysis-explicithierarchy-hierarchyid)
     */
    public fun hierarchyId(): String

    /**
     * A builder for [ExplicitHierarchyProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param columns The list of columns that define the explicit hierarchy. 
       */
      public fun columns(columns: IResolvable)

      /**
       * @param columns The list of columns that define the explicit hierarchy. 
       */
      public fun columns(columns: List<Any>)

      /**
       * @param columns The list of columns that define the explicit hierarchy. 
       */
      public fun columns(vararg columns: Any)

      /**
       * @param drillDownFilters The option that determines the drill down filters for the explicit
       * hierarchy.
       */
      public fun drillDownFilters(drillDownFilters: IResolvable)

      /**
       * @param drillDownFilters The option that determines the drill down filters for the explicit
       * hierarchy.
       */
      public fun drillDownFilters(drillDownFilters: List<Any>)

      /**
       * @param drillDownFilters The option that determines the drill down filters for the explicit
       * hierarchy.
       */
      public fun drillDownFilters(vararg drillDownFilters: Any)

      /**
       * @param hierarchyId The hierarchy ID of the explicit hierarchy. 
       */
      public fun hierarchyId(hierarchyId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ExplicitHierarchyProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ExplicitHierarchyProperty.builder()

      /**
       * @param columns The list of columns that define the explicit hierarchy. 
       */
      override fun columns(columns: IResolvable) {
        cdkBuilder.columns(columns.let(IResolvable::unwrap))
      }

      /**
       * @param columns The list of columns that define the explicit hierarchy. 
       */
      override fun columns(columns: List<Any>) {
        cdkBuilder.columns(columns)
      }

      /**
       * @param columns The list of columns that define the explicit hierarchy. 
       */
      override fun columns(vararg columns: Any): Unit = columns(columns.toList())

      /**
       * @param drillDownFilters The option that determines the drill down filters for the explicit
       * hierarchy.
       */
      override fun drillDownFilters(drillDownFilters: IResolvable) {
        cdkBuilder.drillDownFilters(drillDownFilters.let(IResolvable::unwrap))
      }

      /**
       * @param drillDownFilters The option that determines the drill down filters for the explicit
       * hierarchy.
       */
      override fun drillDownFilters(drillDownFilters: List<Any>) {
        cdkBuilder.drillDownFilters(drillDownFilters)
      }

      /**
       * @param drillDownFilters The option that determines the drill down filters for the explicit
       * hierarchy.
       */
      override fun drillDownFilters(vararg drillDownFilters: Any): Unit =
          drillDownFilters(drillDownFilters.toList())

      /**
       * @param hierarchyId The hierarchy ID of the explicit hierarchy. 
       */
      override fun hierarchyId(hierarchyId: String) {
        cdkBuilder.hierarchyId(hierarchyId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ExplicitHierarchyProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ExplicitHierarchyProperty,
    ) : ExplicitHierarchyProperty {
      /**
       * The list of columns that define the explicit hierarchy.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-explicithierarchy.html#cfn-quicksight-analysis-explicithierarchy-columns)
       */
      override fun columns(): Any = unwrap(this).getColumns()

      /**
       * The option that determines the drill down filters for the explicit hierarchy.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-explicithierarchy.html#cfn-quicksight-analysis-explicithierarchy-drilldownfilters)
       */
      override fun drillDownFilters(): Any? = unwrap(this).getDrillDownFilters()

      /**
       * The hierarchy ID of the explicit hierarchy.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-explicithierarchy.html#cfn-quicksight-analysis-explicithierarchy-hierarchyid)
       */
      override fun hierarchyId(): String = unwrap(this).getHierarchyId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ExplicitHierarchyProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ExplicitHierarchyProperty):
          ExplicitHierarchyProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ExplicitHierarchyProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ExplicitHierarchyProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface SheetProperty {
    /**
     * The name of a sheet.
     *
     * This name is displayed on the sheet's tab in the Amazon QuickSight console.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheet.html#cfn-quicksight-analysis-sheet-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * The unique identifier associated with a sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheet.html#cfn-quicksight-analysis-sheet-sheetid)
     */
    public fun sheetId(): String? = unwrap(this).getSheetId()

    /**
     * A builder for [SheetProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param name The name of a sheet.
       * This name is displayed on the sheet's tab in the Amazon QuickSight console.
       */
      public fun name(name: String)

      /**
       * @param sheetId The unique identifier associated with a sheet.
       */
      public fun sheetId(sheetId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetProperty.builder()

      /**
       * @param name The name of a sheet.
       * This name is displayed on the sheet's tab in the Amazon QuickSight console.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param sheetId The unique identifier associated with a sheet.
       */
      override fun sheetId(sheetId: String) {
        cdkBuilder.sheetId(sheetId)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetProperty,
    ) : SheetProperty {
      /**
       * The name of a sheet.
       *
       * This name is displayed on the sheet's tab in the Amazon QuickSight console.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheet.html#cfn-quicksight-analysis-sheet-name)
       */
      override fun name(): String? = unwrap(this).getName()

      /**
       * The unique identifier associated with a sheet.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheet.html#cfn-quicksight-analysis-sheet-sheetid)
       */
      override fun sheetId(): String? = unwrap(this).getSheetId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SheetProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetProperty):
          SheetProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface SelectedSheetsFilterScopeConfigurationProperty {
    /**
     * The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-selectedsheetsfilterscopeconfiguration.html#cfn-quicksight-analysis-selectedsheetsfilterscopeconfiguration-sheetvisualscopingconfigurations)
     */
    public fun sheetVisualScopingConfigurations(): Any? =
        unwrap(this).getSheetVisualScopingConfigurations()

    /**
     * A builder for [SelectedSheetsFilterScopeConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param sheetVisualScopingConfigurations The sheet ID and visual IDs of the sheet and
       * visuals that the filter is applied to.
       */
      public fun sheetVisualScopingConfigurations(sheetVisualScopingConfigurations: IResolvable)

      /**
       * @param sheetVisualScopingConfigurations The sheet ID and visual IDs of the sheet and
       * visuals that the filter is applied to.
       */
      public fun sheetVisualScopingConfigurations(sheetVisualScopingConfigurations: List<Any>)

      /**
       * @param sheetVisualScopingConfigurations The sheet ID and visual IDs of the sheet and
       * visuals that the filter is applied to.
       */
      public fun sheetVisualScopingConfigurations(vararg sheetVisualScopingConfigurations: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SelectedSheetsFilterScopeConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SelectedSheetsFilterScopeConfigurationProperty.builder()

      /**
       * @param sheetVisualScopingConfigurations The sheet ID and visual IDs of the sheet and
       * visuals that the filter is applied to.
       */
      override fun sheetVisualScopingConfigurations(sheetVisualScopingConfigurations: IResolvable) {
        cdkBuilder.sheetVisualScopingConfigurations(sheetVisualScopingConfigurations.let(IResolvable::unwrap))
      }

      /**
       * @param sheetVisualScopingConfigurations The sheet ID and visual IDs of the sheet and
       * visuals that the filter is applied to.
       */
      override fun sheetVisualScopingConfigurations(sheetVisualScopingConfigurations: List<Any>) {
        cdkBuilder.sheetVisualScopingConfigurations(sheetVisualScopingConfigurations)
      }

      /**
       * @param sheetVisualScopingConfigurations The sheet ID and visual IDs of the sheet and
       * visuals that the filter is applied to.
       */
      override fun sheetVisualScopingConfigurations(vararg sheetVisualScopingConfigurations: Any):
          Unit = sheetVisualScopingConfigurations(sheetVisualScopingConfigurations.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SelectedSheetsFilterScopeConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SelectedSheetsFilterScopeConfigurationProperty,
    ) : SelectedSheetsFilterScopeConfigurationProperty {
      /**
       * The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-selectedsheetsfilterscopeconfiguration.html#cfn-quicksight-analysis-selectedsheetsfilterscopeconfiguration-sheetvisualscopingconfigurations)
       */
      override fun sheetVisualScopingConfigurations(): Any? =
          unwrap(this).getSheetVisualScopingConfigurations()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SelectedSheetsFilterScopeConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SelectedSheetsFilterScopeConfigurationProperty):
          SelectedSheetsFilterScopeConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SelectedSheetsFilterScopeConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SelectedSheetsFilterScopeConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ParameterDropDownControlProperty {
    /**
     * The values that are displayed in a control can be configured to only show values that are
     * valid based on what's selected in other controls.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-cascadingcontrolconfiguration)
     */
    public fun cascadingControlConfiguration(): Any? =
        unwrap(this).getCascadingControlConfiguration()

    /**
     * The display options of a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The ID of the `ParameterDropDownControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-parametercontrolid)
     */
    public fun parameterControlId(): String

    /**
     * A list of selectable values that are used in a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-selectablevalues)
     */
    public fun selectableValues(): Any? = unwrap(this).getSelectableValues()

    /**
     * The source parameter name of the `ParameterDropDownControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-sourceparametername)
     */
    public fun sourceParameterName(): String

    /**
     * The title of the `ParameterDropDownControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-title)
     */
    public fun title(): String

    /**
     * The type parameter name of the `ParameterDropDownControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-type)
     */
    public fun type(): String? = unwrap(this).getType()

    /**
     * A builder for [ParameterDropDownControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      public fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable)

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty)

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4397414a5f2c227db8a48ef91e65ef57c799b9ba5b2700c5994e2633ca061cfd")
      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ba1eaa57961c14d4c524fdd72c8d585a771555e16b14582a2e374051bd006d2a")
      public
          fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param parameterControlId The ID of the `ParameterDropDownControl` . 
       */
      public fun parameterControlId(parameterControlId: String)

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      public fun selectableValues(selectableValues: IResolvable)

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      public fun selectableValues(selectableValues: ParameterSelectableValuesProperty)

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("557d1d941de5268bab40e5b59b55e2a7ce013e5055c1999f5d54a4350b56387e")
      public
          fun selectableValues(selectableValues: ParameterSelectableValuesProperty.Builder.() -> Unit)

      /**
       * @param sourceParameterName The source parameter name of the `ParameterDropDownControl` . 
       */
      public fun sourceParameterName(sourceParameterName: String)

      /**
       * @param title The title of the `ParameterDropDownControl` . 
       */
      public fun title(title: String)

      /**
       * @param type The type parameter name of the `ParameterDropDownControl` .
       */
      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDropDownControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDropDownControlProperty.builder()

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      override fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(CascadingControlConfigurationProperty::unwrap))
      }

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4397414a5f2c227db8a48ef91e65ef57c799b9ba5b2700c5994e2633ca061cfd")
      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit):
          Unit =
          cascadingControlConfiguration(CascadingControlConfigurationProperty(cascadingControlConfiguration))

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(DropDownControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ba1eaa57961c14d4c524fdd72c8d585a771555e16b14582a2e374051bd006d2a")
      override
          fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(DropDownControlDisplayOptionsProperty(displayOptions))

      /**
       * @param parameterControlId The ID of the `ParameterDropDownControl` . 
       */
      override fun parameterControlId(parameterControlId: String) {
        cdkBuilder.parameterControlId(parameterControlId)
      }

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      override fun selectableValues(selectableValues: IResolvable) {
        cdkBuilder.selectableValues(selectableValues.let(IResolvable::unwrap))
      }

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      override fun selectableValues(selectableValues: ParameterSelectableValuesProperty) {
        cdkBuilder.selectableValues(selectableValues.let(ParameterSelectableValuesProperty::unwrap))
      }

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("557d1d941de5268bab40e5b59b55e2a7ce013e5055c1999f5d54a4350b56387e")
      override
          fun selectableValues(selectableValues: ParameterSelectableValuesProperty.Builder.() -> Unit):
          Unit = selectableValues(ParameterSelectableValuesProperty(selectableValues))

      /**
       * @param sourceParameterName The source parameter name of the `ParameterDropDownControl` . 
       */
      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      /**
       * @param title The title of the `ParameterDropDownControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      /**
       * @param type The type parameter name of the `ParameterDropDownControl` .
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDropDownControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDropDownControlProperty,
    ) : ParameterDropDownControlProperty {
      /**
       * The values that are displayed in a control can be configured to only show values that are
       * valid based on what's selected in other controls.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-cascadingcontrolconfiguration)
       */
      override fun cascadingControlConfiguration(): Any? =
          unwrap(this).getCascadingControlConfiguration()

      /**
       * The display options of a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The ID of the `ParameterDropDownControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-parametercontrolid)
       */
      override fun parameterControlId(): String = unwrap(this).getParameterControlId()

      /**
       * A list of selectable values that are used in a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-selectablevalues)
       */
      override fun selectableValues(): Any? = unwrap(this).getSelectableValues()

      /**
       * The source parameter name of the `ParameterDropDownControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-sourceparametername)
       */
      override fun sourceParameterName(): String = unwrap(this).getSourceParameterName()

      /**
       * The title of the `ParameterDropDownControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()

      /**
       * The type parameter name of the `ParameterDropDownControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-type)
       */
      override fun type(): String? = unwrap(this).getType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ParameterDropDownControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDropDownControlProperty):
          ParameterDropDownControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterDropDownControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDropDownControlProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableConfigurationProperty {
    /**
     * The field options for a table visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-fieldoptions)
     */
    public fun fieldOptions(): Any? = unwrap(this).getFieldOptions()

    /**
     * The field wells of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The paginated report options for a table visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-paginatedreportoptions)
     */
    public fun paginatedReportOptions(): Any? = unwrap(this).getPaginatedReportOptions()

    /**
     * The sort configuration for a `TableVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * A collection of inline visualizations to display within a chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-tableinlinevisualizations)
     */
    public fun tableInlineVisualizations(): Any? = unwrap(this).getTableInlineVisualizations()

    /**
     * The table options for a table visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-tableoptions)
     */
    public fun tableOptions(): Any? = unwrap(this).getTableOptions()

    /**
     * The total options for a table visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-totaloptions)
     */
    public fun totalOptions(): Any? = unwrap(this).getTotalOptions()

    /**
     * A builder for [TableConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldOptions The field options for a table visual.
       */
      public fun fieldOptions(fieldOptions: IResolvable)

      /**
       * @param fieldOptions The field options for a table visual.
       */
      public fun fieldOptions(fieldOptions: TableFieldOptionsProperty)

      /**
       * @param fieldOptions The field options for a table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a1b523afd886f67e5c431a286591bcddd62e281015c4ec26fc17000a072cb664")
      public fun fieldOptions(fieldOptions: TableFieldOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: TableFieldWellsProperty)

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("edb0c02ce2d7d040d9f31f763f75e7dde45b2148cdc63eb35ae9ec8d038c6f8c")
      public fun fieldWells(fieldWells: TableFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param paginatedReportOptions The paginated report options for a table visual.
       */
      public fun paginatedReportOptions(paginatedReportOptions: IResolvable)

      /**
       * @param paginatedReportOptions The paginated report options for a table visual.
       */
      public fun paginatedReportOptions(paginatedReportOptions: TablePaginatedReportOptionsProperty)

      /**
       * @param paginatedReportOptions The paginated report options for a table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("51ff20cc7ddd8abc9b252e479be9acc4995a435c7b65f6ad917873653b0f316d")
      public
          fun paginatedReportOptions(paginatedReportOptions: TablePaginatedReportOptionsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration for a `TableVisual` .
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration for a `TableVisual` .
       */
      public fun sortConfiguration(sortConfiguration: TableSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration for a `TableVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d594ea48db93511a58a03512b8b4d9c86098fa3634214a977ec018598550948d")
      public
          fun sortConfiguration(sortConfiguration: TableSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param tableInlineVisualizations A collection of inline visualizations to display within a
       * chart.
       */
      public fun tableInlineVisualizations(tableInlineVisualizations: IResolvable)

      /**
       * @param tableInlineVisualizations A collection of inline visualizations to display within a
       * chart.
       */
      public fun tableInlineVisualizations(tableInlineVisualizations: List<Any>)

      /**
       * @param tableInlineVisualizations A collection of inline visualizations to display within a
       * chart.
       */
      public fun tableInlineVisualizations(vararg tableInlineVisualizations: Any)

      /**
       * @param tableOptions The table options for a table visual.
       */
      public fun tableOptions(tableOptions: IResolvable)

      /**
       * @param tableOptions The table options for a table visual.
       */
      public fun tableOptions(tableOptions: TableOptionsProperty)

      /**
       * @param tableOptions The table options for a table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c5ac05874ef70bfa41a6a358fcf21c4a21a10072a188ce171f79a28a7eb48e3")
      public fun tableOptions(tableOptions: TableOptionsProperty.Builder.() -> Unit)

      /**
       * @param totalOptions The total options for a table visual.
       */
      public fun totalOptions(totalOptions: IResolvable)

      /**
       * @param totalOptions The total options for a table visual.
       */
      public fun totalOptions(totalOptions: TotalOptionsProperty)

      /**
       * @param totalOptions The total options for a table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ef939e182e94ff64bfb64df77687511dfebfb1fe610fb90474b9d018e452fee0")
      public fun totalOptions(totalOptions: TotalOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConfigurationProperty.builder()

      /**
       * @param fieldOptions The field options for a table visual.
       */
      override fun fieldOptions(fieldOptions: IResolvable) {
        cdkBuilder.fieldOptions(fieldOptions.let(IResolvable::unwrap))
      }

      /**
       * @param fieldOptions The field options for a table visual.
       */
      override fun fieldOptions(fieldOptions: TableFieldOptionsProperty) {
        cdkBuilder.fieldOptions(fieldOptions.let(TableFieldOptionsProperty::unwrap))
      }

      /**
       * @param fieldOptions The field options for a table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a1b523afd886f67e5c431a286591bcddd62e281015c4ec26fc17000a072cb664")
      override fun fieldOptions(fieldOptions: TableFieldOptionsProperty.Builder.() -> Unit): Unit =
          fieldOptions(TableFieldOptionsProperty(fieldOptions))

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: TableFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(TableFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("edb0c02ce2d7d040d9f31f763f75e7dde45b2148cdc63eb35ae9ec8d038c6f8c")
      override fun fieldWells(fieldWells: TableFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(TableFieldWellsProperty(fieldWells))

      /**
       * @param paginatedReportOptions The paginated report options for a table visual.
       */
      override fun paginatedReportOptions(paginatedReportOptions: IResolvable) {
        cdkBuilder.paginatedReportOptions(paginatedReportOptions.let(IResolvable::unwrap))
      }

      /**
       * @param paginatedReportOptions The paginated report options for a table visual.
       */
      override
          fun paginatedReportOptions(paginatedReportOptions: TablePaginatedReportOptionsProperty) {
        cdkBuilder.paginatedReportOptions(paginatedReportOptions.let(TablePaginatedReportOptionsProperty::unwrap))
      }

      /**
       * @param paginatedReportOptions The paginated report options for a table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("51ff20cc7ddd8abc9b252e479be9acc4995a435c7b65f6ad917873653b0f316d")
      override
          fun paginatedReportOptions(paginatedReportOptions: TablePaginatedReportOptionsProperty.Builder.() -> Unit):
          Unit = paginatedReportOptions(TablePaginatedReportOptionsProperty(paginatedReportOptions))

      /**
       * @param sortConfiguration The sort configuration for a `TableVisual` .
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration for a `TableVisual` .
       */
      override fun sortConfiguration(sortConfiguration: TableSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(TableSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration for a `TableVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d594ea48db93511a58a03512b8b4d9c86098fa3634214a977ec018598550948d")
      override
          fun sortConfiguration(sortConfiguration: TableSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(TableSortConfigurationProperty(sortConfiguration))

      /**
       * @param tableInlineVisualizations A collection of inline visualizations to display within a
       * chart.
       */
      override fun tableInlineVisualizations(tableInlineVisualizations: IResolvable) {
        cdkBuilder.tableInlineVisualizations(tableInlineVisualizations.let(IResolvable::unwrap))
      }

      /**
       * @param tableInlineVisualizations A collection of inline visualizations to display within a
       * chart.
       */
      override fun tableInlineVisualizations(tableInlineVisualizations: List<Any>) {
        cdkBuilder.tableInlineVisualizations(tableInlineVisualizations)
      }

      /**
       * @param tableInlineVisualizations A collection of inline visualizations to display within a
       * chart.
       */
      override fun tableInlineVisualizations(vararg tableInlineVisualizations: Any): Unit =
          tableInlineVisualizations(tableInlineVisualizations.toList())

      /**
       * @param tableOptions The table options for a table visual.
       */
      override fun tableOptions(tableOptions: IResolvable) {
        cdkBuilder.tableOptions(tableOptions.let(IResolvable::unwrap))
      }

      /**
       * @param tableOptions The table options for a table visual.
       */
      override fun tableOptions(tableOptions: TableOptionsProperty) {
        cdkBuilder.tableOptions(tableOptions.let(TableOptionsProperty::unwrap))
      }

      /**
       * @param tableOptions The table options for a table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c5ac05874ef70bfa41a6a358fcf21c4a21a10072a188ce171f79a28a7eb48e3")
      override fun tableOptions(tableOptions: TableOptionsProperty.Builder.() -> Unit): Unit =
          tableOptions(TableOptionsProperty(tableOptions))

      /**
       * @param totalOptions The total options for a table visual.
       */
      override fun totalOptions(totalOptions: IResolvable) {
        cdkBuilder.totalOptions(totalOptions.let(IResolvable::unwrap))
      }

      /**
       * @param totalOptions The total options for a table visual.
       */
      override fun totalOptions(totalOptions: TotalOptionsProperty) {
        cdkBuilder.totalOptions(totalOptions.let(TotalOptionsProperty::unwrap))
      }

      /**
       * @param totalOptions The total options for a table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ef939e182e94ff64bfb64df77687511dfebfb1fe610fb90474b9d018e452fee0")
      override fun totalOptions(totalOptions: TotalOptionsProperty.Builder.() -> Unit): Unit =
          totalOptions(TotalOptionsProperty(totalOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConfigurationProperty,
    ) : TableConfigurationProperty {
      /**
       * The field options for a table visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-fieldoptions)
       */
      override fun fieldOptions(): Any? = unwrap(this).getFieldOptions()

      /**
       * The field wells of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The paginated report options for a table visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-paginatedreportoptions)
       */
      override fun paginatedReportOptions(): Any? = unwrap(this).getPaginatedReportOptions()

      /**
       * The sort configuration for a `TableVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * A collection of inline visualizations to display within a chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-tableinlinevisualizations)
       */
      override fun tableInlineVisualizations(): Any? = unwrap(this).getTableInlineVisualizations()

      /**
       * The table options for a table visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-tableoptions)
       */
      override fun tableOptions(): Any? = unwrap(this).getTableOptions()

      /**
       * The total options for a table visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-totaloptions)
       */
      override fun totalOptions(): Any? = unwrap(this).getTotalOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TableConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConfigurationProperty):
          TableConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FunnelChartConfigurationProperty {
    /**
     * The label options of the categories that are displayed in a `FunnelChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-categorylabeloptions)
     */
    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    /**
     * The options that determine the presentation of the data labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-datalabeloptions)
     */
    public fun dataLabelOptions(): Any? = unwrap(this).getDataLabelOptions()

    /**
     * The field well configuration of a `FunnelChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The sort configuration of a `FunnelChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The tooltip configuration of a `FunnelChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-tooltip)
     */
    public fun tooltip(): Any? = unwrap(this).getTooltip()

    /**
     * The label options for the values that are displayed in a `FunnelChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-valuelabeloptions)
     */
    public fun valueLabelOptions(): Any? = unwrap(this).getValueLabelOptions()

    /**
     * The visual palette configuration of a `FunnelChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-visualpalette)
     */
    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    /**
     * A builder for [FunnelChartConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryLabelOptions The label options of the categories that are displayed in a
       * `FunnelChartVisual` .
       */
      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      /**
       * @param categoryLabelOptions The label options of the categories that are displayed in a
       * `FunnelChartVisual` .
       */
      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param categoryLabelOptions The label options of the categories that are displayed in a
       * `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4b0c4b2bdbd9cb8518c407a941425da453e77a8ba3ce9dfbba226f114facfe1e")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param dataLabelOptions The options that determine the presentation of the data labels.
       */
      public fun dataLabelOptions(dataLabelOptions: IResolvable)

      /**
       * @param dataLabelOptions The options that determine the presentation of the data labels.
       */
      public fun dataLabelOptions(dataLabelOptions: FunnelChartDataLabelOptionsProperty)

      /**
       * @param dataLabelOptions The options that determine the presentation of the data labels.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3b1cef1c5c317805ec8d3d8021aa57ab99f0dc3dc90fa9000f75635bd2f4cd07")
      public
          fun dataLabelOptions(dataLabelOptions: FunnelChartDataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field well configuration of a `FunnelChartVisual` .
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field well configuration of a `FunnelChartVisual` .
       */
      public fun fieldWells(fieldWells: FunnelChartFieldWellsProperty)

      /**
       * @param fieldWells The field well configuration of a `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a8fcd6e757545a7808bfabb2b05efabc96d204a22d17730b98779d381c89b2e3")
      public fun fieldWells(fieldWells: FunnelChartFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration of a `FunnelChartVisual` .
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a `FunnelChartVisual` .
       */
      public fun sortConfiguration(sortConfiguration: FunnelChartSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fbf5145df10c991193a30514b7ac7367a7b49a0f590086bb57cf31db2489923e")
      public
          fun sortConfiguration(sortConfiguration: FunnelChartSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param tooltip The tooltip configuration of a `FunnelChartVisual` .
       */
      public fun tooltip(tooltip: IResolvable)

      /**
       * @param tooltip The tooltip configuration of a `FunnelChartVisual` .
       */
      public fun tooltip(tooltip: TooltipOptionsProperty)

      /**
       * @param tooltip The tooltip configuration of a `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d4f0777f8e6a1f96e6811aa5736f0ee82acd5a5f0786302c5ccaa5755f46bf4e")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      /**
       * @param valueLabelOptions The label options for the values that are displayed in a
       * `FunnelChartVisual` .
       */
      public fun valueLabelOptions(valueLabelOptions: IResolvable)

      /**
       * @param valueLabelOptions The label options for the values that are displayed in a
       * `FunnelChartVisual` .
       */
      public fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param valueLabelOptions The label options for the values that are displayed in a
       * `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ae7a8477fa3ec9ebd779d0be6a437e66ceee9bb6e12f7a1177017092b64624e")
      public
          fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualPalette The visual palette configuration of a `FunnelChartVisual` .
       */
      public fun visualPalette(visualPalette: IResolvable)

      /**
       * @param visualPalette The visual palette configuration of a `FunnelChartVisual` .
       */
      public fun visualPalette(visualPalette: VisualPaletteProperty)

      /**
       * @param visualPalette The visual palette configuration of a `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6c5443fea65bd861b69a0cbfab650db980cdf1718e6ee4758c5470c41b9b2883")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartConfigurationProperty.builder()

      /**
       * @param categoryLabelOptions The label options of the categories that are displayed in a
       * `FunnelChartVisual` .
       */
      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param categoryLabelOptions The label options of the categories that are displayed in a
       * `FunnelChartVisual` .
       */
      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param categoryLabelOptions The label options of the categories that are displayed in a
       * `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4b0c4b2bdbd9cb8518c407a941425da453e77a8ba3ce9dfbba226f114facfe1e")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      /**
       * @param dataLabelOptions The options that determine the presentation of the data labels.
       */
      override fun dataLabelOptions(dataLabelOptions: IResolvable) {
        cdkBuilder.dataLabelOptions(dataLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param dataLabelOptions The options that determine the presentation of the data labels.
       */
      override fun dataLabelOptions(dataLabelOptions: FunnelChartDataLabelOptionsProperty) {
        cdkBuilder.dataLabelOptions(dataLabelOptions.let(FunnelChartDataLabelOptionsProperty::unwrap))
      }

      /**
       * @param dataLabelOptions The options that determine the presentation of the data labels.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3b1cef1c5c317805ec8d3d8021aa57ab99f0dc3dc90fa9000f75635bd2f4cd07")
      override
          fun dataLabelOptions(dataLabelOptions: FunnelChartDataLabelOptionsProperty.Builder.() -> Unit):
          Unit = dataLabelOptions(FunnelChartDataLabelOptionsProperty(dataLabelOptions))

      /**
       * @param fieldWells The field well configuration of a `FunnelChartVisual` .
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a `FunnelChartVisual` .
       */
      override fun fieldWells(fieldWells: FunnelChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(FunnelChartFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a8fcd6e757545a7808bfabb2b05efabc96d204a22d17730b98779d381c89b2e3")
      override fun fieldWells(fieldWells: FunnelChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(FunnelChartFieldWellsProperty(fieldWells))

      /**
       * @param sortConfiguration The sort configuration of a `FunnelChartVisual` .
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a `FunnelChartVisual` .
       */
      override fun sortConfiguration(sortConfiguration: FunnelChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(FunnelChartSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fbf5145df10c991193a30514b7ac7367a7b49a0f590086bb57cf31db2489923e")
      override
          fun sortConfiguration(sortConfiguration: FunnelChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(FunnelChartSortConfigurationProperty(sortConfiguration))

      /**
       * @param tooltip The tooltip configuration of a `FunnelChartVisual` .
       */
      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      /**
       * @param tooltip The tooltip configuration of a `FunnelChartVisual` .
       */
      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltip The tooltip configuration of a `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d4f0777f8e6a1f96e6811aa5736f0ee82acd5a5f0786302c5ccaa5755f46bf4e")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      /**
       * @param valueLabelOptions The label options for the values that are displayed in a
       * `FunnelChartVisual` .
       */
      override fun valueLabelOptions(valueLabelOptions: IResolvable) {
        cdkBuilder.valueLabelOptions(valueLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param valueLabelOptions The label options for the values that are displayed in a
       * `FunnelChartVisual` .
       */
      override fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.valueLabelOptions(valueLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param valueLabelOptions The label options for the values that are displayed in a
       * `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ae7a8477fa3ec9ebd779d0be6a437e66ceee9bb6e12f7a1177017092b64624e")
      override
          fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = valueLabelOptions(ChartAxisLabelOptionsProperty(valueLabelOptions))

      /**
       * @param visualPalette The visual palette configuration of a `FunnelChartVisual` .
       */
      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      /**
       * @param visualPalette The visual palette configuration of a `FunnelChartVisual` .
       */
      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      /**
       * @param visualPalette The visual palette configuration of a `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6c5443fea65bd861b69a0cbfab650db980cdf1718e6ee4758c5470c41b9b2883")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartConfigurationProperty,
    ) : FunnelChartConfigurationProperty {
      /**
       * The label options of the categories that are displayed in a `FunnelChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-categorylabeloptions)
       */
      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      /**
       * The options that determine the presentation of the data labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-datalabeloptions)
       */
      override fun dataLabelOptions(): Any? = unwrap(this).getDataLabelOptions()

      /**
       * The field well configuration of a `FunnelChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The sort configuration of a `FunnelChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The tooltip configuration of a `FunnelChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-tooltip)
       */
      override fun tooltip(): Any? = unwrap(this).getTooltip()

      /**
       * The label options for the values that are displayed in a `FunnelChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-valuelabeloptions)
       */
      override fun valueLabelOptions(): Any? = unwrap(this).getValueLabelOptions()

      /**
       * The visual palette configuration of a `FunnelChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-visualpalette)
       */
      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FunnelChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartConfigurationProperty):
          FunnelChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FunnelChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface AxisLabelReferenceOptionsProperty {
    /**
     * The column that the axis label is targeted to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabelreferenceoptions.html#cfn-quicksight-analysis-axislabelreferenceoptions-column)
     */
    public fun column(): Any

    /**
     * The field that the axis label is targeted to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabelreferenceoptions.html#cfn-quicksight-analysis-axislabelreferenceoptions-fieldid)
     */
    public fun fieldId(): String

    /**
     * A builder for [AxisLabelReferenceOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param column The column that the axis label is targeted to. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that the axis label is targeted to. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that the axis label is targeted to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3aa0b01e65e3c9a2fafb510b87ad59c89ca1b2c7e6d8eb853588dd56bc28ed89")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param fieldId The field that the axis label is targeted to. 
       */
      public fun fieldId(fieldId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLabelReferenceOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLabelReferenceOptionsProperty.builder()

      /**
       * @param column The column that the axis label is targeted to. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that the axis label is targeted to. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that the axis label is targeted to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3aa0b01e65e3c9a2fafb510b87ad59c89ca1b2c7e6d8eb853588dd56bc28ed89")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param fieldId The field that the axis label is targeted to. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLabelReferenceOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLabelReferenceOptionsProperty,
    ) : AxisLabelReferenceOptionsProperty {
      /**
       * The column that the axis label is targeted to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabelreferenceoptions.html#cfn-quicksight-analysis-axislabelreferenceoptions-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The field that the axis label is targeted to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabelreferenceoptions.html#cfn-quicksight-analysis-axislabelreferenceoptions-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          AxisLabelReferenceOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLabelReferenceOptionsProperty):
          AxisLabelReferenceOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisLabelReferenceOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLabelReferenceOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableConditionalFormattingProperty {
    /**
     * Conditional formatting options for a `PivotTableVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformatting.html#cfn-quicksight-analysis-tableconditionalformatting-conditionalformattingoptions)
     */
    public fun conditionalFormattingOptions(): Any? = unwrap(this).getConditionalFormattingOptions()

    /**
     * A builder for [TableConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param conditionalFormattingOptions Conditional formatting options for a `PivotTableVisual`
       * .
       */
      public fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable)

      /**
       * @param conditionalFormattingOptions Conditional formatting options for a `PivotTableVisual`
       * .
       */
      public fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>)

      /**
       * @param conditionalFormattingOptions Conditional formatting options for a `PivotTableVisual`
       * .
       */
      public fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConditionalFormattingProperty.builder()

      /**
       * @param conditionalFormattingOptions Conditional formatting options for a `PivotTableVisual`
       * .
       */
      override fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions.let(IResolvable::unwrap))
      }

      /**
       * @param conditionalFormattingOptions Conditional formatting options for a `PivotTableVisual`
       * .
       */
      override fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions)
      }

      /**
       * @param conditionalFormattingOptions Conditional formatting options for a `PivotTableVisual`
       * .
       */
      override fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any): Unit =
          conditionalFormattingOptions(conditionalFormattingOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConditionalFormattingProperty,
    ) : TableConditionalFormattingProperty {
      /**
       * Conditional formatting options for a `PivotTableVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformatting.html#cfn-quicksight-analysis-tableconditionalformatting-conditionalformattingoptions)
       */
      override fun conditionalFormattingOptions(): Any? =
          unwrap(this).getConditionalFormattingOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConditionalFormattingProperty):
          TableConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilledMapConditionalFormattingOptionProperty {
    /**
     * The conditional formatting that determines the shape of the filled map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconditionalformattingoption.html#cfn-quicksight-analysis-filledmapconditionalformattingoption-shape)
     */
    public fun shape(): Any

    /**
     * A builder for [FilledMapConditionalFormattingOptionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param shape The conditional formatting that determines the shape of the filled map. 
       */
      public fun shape(shape: IResolvable)

      /**
       * @param shape The conditional formatting that determines the shape of the filled map. 
       */
      public fun shape(shape: FilledMapShapeConditionalFormattingProperty)

      /**
       * @param shape The conditional formatting that determines the shape of the filled map. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("751bc3fd1667894e8c245c0ef8c253729825c49a043262c2126573b2885fed10")
      public fun shape(shape: FilledMapShapeConditionalFormattingProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConditionalFormattingOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConditionalFormattingOptionProperty.builder()

      /**
       * @param shape The conditional formatting that determines the shape of the filled map. 
       */
      override fun shape(shape: IResolvable) {
        cdkBuilder.shape(shape.let(IResolvable::unwrap))
      }

      /**
       * @param shape The conditional formatting that determines the shape of the filled map. 
       */
      override fun shape(shape: FilledMapShapeConditionalFormattingProperty) {
        cdkBuilder.shape(shape.let(FilledMapShapeConditionalFormattingProperty::unwrap))
      }

      /**
       * @param shape The conditional formatting that determines the shape of the filled map. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("751bc3fd1667894e8c245c0ef8c253729825c49a043262c2126573b2885fed10")
      override fun shape(shape: FilledMapShapeConditionalFormattingProperty.Builder.() -> Unit):
          Unit = shape(FilledMapShapeConditionalFormattingProperty(shape))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConditionalFormattingOptionProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConditionalFormattingOptionProperty,
    ) : FilledMapConditionalFormattingOptionProperty {
      /**
       * The conditional formatting that determines the shape of the filled map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconditionalformattingoption.html#cfn-quicksight-analysis-filledmapconditionalformattingoption-shape)
       */
      override fun shape(): Any = unwrap(this).getShape()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilledMapConditionalFormattingOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConditionalFormattingOptionProperty):
          FilledMapConditionalFormattingOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapConditionalFormattingOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConditionalFormattingOptionProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface CategoricalMeasureFieldProperty {
    /**
     * The aggregation function of the measure field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html#cfn-quicksight-analysis-categoricalmeasurefield-aggregationfunction)
     */
    public fun aggregationFunction(): String? = unwrap(this).getAggregationFunction()

    /**
     * The column that is used in the `CategoricalMeasureField` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html#cfn-quicksight-analysis-categoricalmeasurefield-column)
     */
    public fun column(): Any

    /**
     * The custom field ID.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html#cfn-quicksight-analysis-categoricalmeasurefield-fieldid)
     */
    public fun fieldId(): String

    /**
     * The format configuration of the field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html#cfn-quicksight-analysis-categoricalmeasurefield-formatconfiguration)
     */
    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    /**
     * A builder for [CategoricalMeasureFieldProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param aggregationFunction The aggregation function of the measure field.
       */
      public fun aggregationFunction(aggregationFunction: String)

      /**
       * @param column The column that is used in the `CategoricalMeasureField` . 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that is used in the `CategoricalMeasureField` . 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that is used in the `CategoricalMeasureField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c5137c2655bb4202ae07d871280d857619f5b5d637260492998b0bd1de018cb6")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param fieldId The custom field ID. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: IResolvable)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b1f14e8f9d4b2e7293c3a67ead9fceffe2349d6546dfb6e66f585332529deae7")
      public
          fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoricalMeasureFieldProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoricalMeasureFieldProperty.builder()

      /**
       * @param aggregationFunction The aggregation function of the measure field.
       */
      override fun aggregationFunction(aggregationFunction: String) {
        cdkBuilder.aggregationFunction(aggregationFunction)
      }

      /**
       * @param column The column that is used in the `CategoricalMeasureField` . 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that is used in the `CategoricalMeasureField` . 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that is used in the `CategoricalMeasureField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c5137c2655bb4202ae07d871280d857619f5b5d637260492998b0bd1de018cb6")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param fieldId The custom field ID. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(StringFormatConfigurationProperty::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b1f14e8f9d4b2e7293c3a67ead9fceffe2349d6546dfb6e66f585332529deae7")
      override
          fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(StringFormatConfigurationProperty(formatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoricalMeasureFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoricalMeasureFieldProperty,
    ) : CategoricalMeasureFieldProperty {
      /**
       * The aggregation function of the measure field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html#cfn-quicksight-analysis-categoricalmeasurefield-aggregationfunction)
       */
      override fun aggregationFunction(): String? = unwrap(this).getAggregationFunction()

      /**
       * The column that is used in the `CategoricalMeasureField` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html#cfn-quicksight-analysis-categoricalmeasurefield-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The custom field ID.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html#cfn-quicksight-analysis-categoricalmeasurefield-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The format configuration of the field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html#cfn-quicksight-analysis-categoricalmeasurefield-formatconfiguration)
       */
      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): CategoricalMeasureFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoricalMeasureFieldProperty):
          CategoricalMeasureFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CategoricalMeasureFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoricalMeasureFieldProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface HistogramVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration for a `HistogramVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [HistogramVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration for a `HistogramVisual` .
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration for a `HistogramVisual` .
       */
      public fun chartConfiguration(chartConfiguration: HistogramConfigurationProperty)

      /**
       * @param chartConfiguration The configuration for a `HistogramVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9d2bdcc6d0bb6649bdc0df4af04e967450aebc9237258ce9692ac54e61eb68a1")
      public
          fun chartConfiguration(chartConfiguration: HistogramConfigurationProperty.Builder.() -> Unit)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9e4cc9c256cc7471edd9f4d9988d7fa08f2aa3fb161b18c2a17a02abc5a4c6cc")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3cb5044197c9082db203f47536b6f1cef8aa8536ebd776946abdbe9e8b09137d")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration for a `HistogramVisual` .
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration for a `HistogramVisual` .
       */
      override fun chartConfiguration(chartConfiguration: HistogramConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(HistogramConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration for a `HistogramVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9d2bdcc6d0bb6649bdc0df4af04e967450aebc9237258ce9692ac54e61eb68a1")
      override
          fun chartConfiguration(chartConfiguration: HistogramConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(HistogramConfigurationProperty(chartConfiguration))

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9e4cc9c256cc7471edd9f4d9988d7fa08f2aa3fb161b18c2a17a02abc5a4c6cc")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3cb5044197c9082db203f47536b6f1cef8aa8536ebd776946abdbe9e8b09137d")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramVisualProperty,
    ) : HistogramVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration for a `HistogramVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): HistogramVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramVisualProperty):
          HistogramVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HistogramVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramVisualProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface AnalysisSourceTemplateProperty {
    /**
     * The Amazon Resource Name (ARN) of the source template of an analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourcetemplate.html#cfn-quicksight-analysis-analysissourcetemplate-arn)
     */
    public fun arn(): String

    /**
     * The dataset references of the source template of an analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourcetemplate.html#cfn-quicksight-analysis-analysissourcetemplate-datasetreferences)
     */
    public fun dataSetReferences(): Any

    /**
     * A builder for [AnalysisSourceTemplateProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param arn The Amazon Resource Name (ARN) of the source template of an analysis. 
       */
      public fun arn(arn: String)

      /**
       * @param dataSetReferences The dataset references of the source template of an analysis. 
       */
      public fun dataSetReferences(dataSetReferences: IResolvable)

      /**
       * @param dataSetReferences The dataset references of the source template of an analysis. 
       */
      public fun dataSetReferences(dataSetReferences: List<Any>)

      /**
       * @param dataSetReferences The dataset references of the source template of an analysis. 
       */
      public fun dataSetReferences(vararg dataSetReferences: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisSourceTemplateProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisSourceTemplateProperty.builder()

      /**
       * @param arn The Amazon Resource Name (ARN) of the source template of an analysis. 
       */
      override fun arn(arn: String) {
        cdkBuilder.arn(arn)
      }

      /**
       * @param dataSetReferences The dataset references of the source template of an analysis. 
       */
      override fun dataSetReferences(dataSetReferences: IResolvable) {
        cdkBuilder.dataSetReferences(dataSetReferences.let(IResolvable::unwrap))
      }

      /**
       * @param dataSetReferences The dataset references of the source template of an analysis. 
       */
      override fun dataSetReferences(dataSetReferences: List<Any>) {
        cdkBuilder.dataSetReferences(dataSetReferences)
      }

      /**
       * @param dataSetReferences The dataset references of the source template of an analysis. 
       */
      override fun dataSetReferences(vararg dataSetReferences: Any): Unit =
          dataSetReferences(dataSetReferences.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisSourceTemplateProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisSourceTemplateProperty,
    ) : AnalysisSourceTemplateProperty {
      /**
       * The Amazon Resource Name (ARN) of the source template of an analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourcetemplate.html#cfn-quicksight-analysis-analysissourcetemplate-arn)
       */
      override fun arn(): String = unwrap(this).getArn()

      /**
       * The dataset references of the source template of an analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourcetemplate.html#cfn-quicksight-analysis-analysissourcetemplate-datasetreferences)
       */
      override fun dataSetReferences(): Any = unwrap(this).getDataSetReferences()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AnalysisSourceTemplateProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisSourceTemplateProperty):
          AnalysisSourceTemplateProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AnalysisSourceTemplateProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisSourceTemplateProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface VisualPaletteProperty {
    /**
     * The chart color options for the visual palette.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualpalette.html#cfn-quicksight-analysis-visualpalette-chartcolor)
     */
    public fun chartColor(): String? = unwrap(this).getChartColor()

    /**
     * The color map options for the visual palette.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualpalette.html#cfn-quicksight-analysis-visualpalette-colormap)
     */
    public fun colorMap(): Any? = unwrap(this).getColorMap()

    /**
     * A builder for [VisualPaletteProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param chartColor The chart color options for the visual palette.
       */
      public fun chartColor(chartColor: String)

      /**
       * @param colorMap The color map options for the visual palette.
       */
      public fun colorMap(colorMap: IResolvable)

      /**
       * @param colorMap The color map options for the visual palette.
       */
      public fun colorMap(colorMap: List<Any>)

      /**
       * @param colorMap The color map options for the visual palette.
       */
      public fun colorMap(vararg colorMap: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualPaletteProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualPaletteProperty.builder()

      /**
       * @param chartColor The chart color options for the visual palette.
       */
      override fun chartColor(chartColor: String) {
        cdkBuilder.chartColor(chartColor)
      }

      /**
       * @param colorMap The color map options for the visual palette.
       */
      override fun colorMap(colorMap: IResolvable) {
        cdkBuilder.colorMap(colorMap.let(IResolvable::unwrap))
      }

      /**
       * @param colorMap The color map options for the visual palette.
       */
      override fun colorMap(colorMap: List<Any>) {
        cdkBuilder.colorMap(colorMap)
      }

      /**
       * @param colorMap The color map options for the visual palette.
       */
      override fun colorMap(vararg colorMap: Any): Unit = colorMap(colorMap.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualPaletteProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualPaletteProperty,
    ) : VisualPaletteProperty {
      /**
       * The chart color options for the visual palette.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualpalette.html#cfn-quicksight-analysis-visualpalette-chartcolor)
       */
      override fun chartColor(): String? = unwrap(this).getChartColor()

      /**
       * The color map options for the visual palette.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualpalette.html#cfn-quicksight-analysis-visualpalette-colormap)
       */
      override fun colorMap(): Any? = unwrap(this).getColorMap()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): VisualPaletteProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualPaletteProperty):
          VisualPaletteProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisualPaletteProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualPaletteProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface LabelOptionsProperty {
    /**
     * The text for the label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-labeloptions.html#cfn-quicksight-analysis-labeloptions-customlabel)
     */
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    /**
     * The font configuration of the label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-labeloptions.html#cfn-quicksight-analysis-labeloptions-fontconfiguration)
     */
    public fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

    /**
     * Determines whether or not the label is visible.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-labeloptions.html#cfn-quicksight-analysis-labeloptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [LabelOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customLabel The text for the label.
       */
      public fun customLabel(customLabel: String)

      /**
       * @param fontConfiguration The font configuration of the label.
       */
      public fun fontConfiguration(fontConfiguration: IResolvable)

      /**
       * @param fontConfiguration The font configuration of the label.
       */
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty)

      /**
       * @param fontConfiguration The font configuration of the label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aecd888fd373f10fbeb0bfa4d4f801218cb421651e626f4979531ebccc2c1bcc")
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      /**
       * @param visibility Determines whether or not the label is visible.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LabelOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LabelOptionsProperty.builder()

      /**
       * @param customLabel The text for the label.
       */
      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      /**
       * @param fontConfiguration The font configuration of the label.
       */
      override fun fontConfiguration(fontConfiguration: IResolvable) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param fontConfiguration The font configuration of the label.
       */
      override fun fontConfiguration(fontConfiguration: FontConfigurationProperty) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      /**
       * @param fontConfiguration The font configuration of the label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aecd888fd373f10fbeb0bfa4d4f801218cb421651e626f4979531ebccc2c1bcc")
      override
          fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = fontConfiguration(FontConfigurationProperty(fontConfiguration))

      /**
       * @param visibility Determines whether or not the label is visible.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LabelOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LabelOptionsProperty,
    ) : LabelOptionsProperty {
      /**
       * The text for the label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-labeloptions.html#cfn-quicksight-analysis-labeloptions-customlabel)
       */
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      /**
       * The font configuration of the label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-labeloptions.html#cfn-quicksight-analysis-labeloptions-fontconfiguration)
       */
      override fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

      /**
       * Determines whether or not the label is visible.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-labeloptions.html#cfn-quicksight-analysis-labeloptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): LabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LabelOptionsProperty):
          LabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LabelOptionsProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface HeatMapVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration of a heat map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [HeatMapVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration of a heat map.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration of a heat map.
       */
      public fun chartConfiguration(chartConfiguration: HeatMapConfigurationProperty)

      /**
       * @param chartConfiguration The configuration of a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6563ec83cd5ab9dcb2840236f2fb672ba27fca45fff449971909946487280735")
      public
          fun chartConfiguration(chartConfiguration: HeatMapConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2b57088fe3e8f6a40a38b2dffe3a6cddd96728d10076bdfbceffa77b917b4583")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf6d5e72124e0a4843b1f77373f4fa12a329e09f7a0be471557bda1bc4ba4c08")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration of a heat map.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a heat map.
       */
      override fun chartConfiguration(chartConfiguration: HeatMapConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(HeatMapConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6563ec83cd5ab9dcb2840236f2fb672ba27fca45fff449971909946487280735")
      override
          fun chartConfiguration(chartConfiguration: HeatMapConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(HeatMapConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2b57088fe3e8f6a40a38b2dffe3a6cddd96728d10076bdfbceffa77b917b4583")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf6d5e72124e0a4843b1f77373f4fa12a329e09f7a0be471557bda1bc4ba4c08")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapVisualProperty,
    ) : HeatMapVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration of a heat map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): HeatMapVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapVisualProperty):
          HeatMapVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HeatMapVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapVisualProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface SubtotalOptionsProperty {
    /**
     * The custom label string for the subtotal cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-customlabel)
     */
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    /**
     * The field level (all, custom, last) for the subtotal cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-fieldlevel)
     */
    public fun fieldLevel(): String? = unwrap(this).getFieldLevel()

    /**
     * The optional configuration of subtotal cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-fieldleveloptions)
     */
    public fun fieldLevelOptions(): Any? = unwrap(this).getFieldLevelOptions()

    /**
     * The cell styling options for the subtotals of header cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-metricheadercellstyle)
     */
    public fun metricHeaderCellStyle(): Any? = unwrap(this).getMetricHeaderCellStyle()

    /**
     * The style targets options for subtotals.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-styletargets)
     */
    public fun styleTargets(): Any? = unwrap(this).getStyleTargets()

    /**
     * The cell styling options for the subtotal cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-totalcellstyle)
     */
    public fun totalCellStyle(): Any? = unwrap(this).getTotalCellStyle()

    /**
     * The visibility configuration for the subtotal cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-totalsvisibility)
     */
    public fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

    /**
     * The cell styling options for the subtotals of value cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-valuecellstyle)
     */
    public fun valueCellStyle(): Any? = unwrap(this).getValueCellStyle()

    /**
     * A builder for [SubtotalOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customLabel The custom label string for the subtotal cells.
       */
      public fun customLabel(customLabel: String)

      /**
       * @param fieldLevel The field level (all, custom, last) for the subtotal cells.
       */
      public fun fieldLevel(fieldLevel: String)

      /**
       * @param fieldLevelOptions The optional configuration of subtotal cells.
       */
      public fun fieldLevelOptions(fieldLevelOptions: IResolvable)

      /**
       * @param fieldLevelOptions The optional configuration of subtotal cells.
       */
      public fun fieldLevelOptions(fieldLevelOptions: List<Any>)

      /**
       * @param fieldLevelOptions The optional configuration of subtotal cells.
       */
      public fun fieldLevelOptions(vararg fieldLevelOptions: Any)

      /**
       * @param metricHeaderCellStyle The cell styling options for the subtotals of header cells.
       */
      public fun metricHeaderCellStyle(metricHeaderCellStyle: IResolvable)

      /**
       * @param metricHeaderCellStyle The cell styling options for the subtotals of header cells.
       */
      public fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty)

      /**
       * @param metricHeaderCellStyle The cell styling options for the subtotals of header cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("807c046b9b2d18a532f81ec8a465651ae4ffec02fc9b634b49e2c6d45281330a")
      public
          fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty.Builder.() -> Unit)

      /**
       * @param styleTargets The style targets options for subtotals.
       */
      public fun styleTargets(styleTargets: IResolvable)

      /**
       * @param styleTargets The style targets options for subtotals.
       */
      public fun styleTargets(styleTargets: List<Any>)

      /**
       * @param styleTargets The style targets options for subtotals.
       */
      public fun styleTargets(vararg styleTargets: Any)

      /**
       * @param totalCellStyle The cell styling options for the subtotal cells.
       */
      public fun totalCellStyle(totalCellStyle: IResolvable)

      /**
       * @param totalCellStyle The cell styling options for the subtotal cells.
       */
      public fun totalCellStyle(totalCellStyle: TableCellStyleProperty)

      /**
       * @param totalCellStyle The cell styling options for the subtotal cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f77d9766c8fc2f455cf9ec8e9ea658b3e70f73f5ed72bafe0a1bcc727ed002c4")
      public fun totalCellStyle(totalCellStyle: TableCellStyleProperty.Builder.() -> Unit)

      /**
       * @param totalsVisibility The visibility configuration for the subtotal cells.
       */
      public fun totalsVisibility(totalsVisibility: String)

      /**
       * @param valueCellStyle The cell styling options for the subtotals of value cells.
       */
      public fun valueCellStyle(valueCellStyle: IResolvable)

      /**
       * @param valueCellStyle The cell styling options for the subtotals of value cells.
       */
      public fun valueCellStyle(valueCellStyle: TableCellStyleProperty)

      /**
       * @param valueCellStyle The cell styling options for the subtotals of value cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("34c31f91480e3492d99fa479b8bb43193ed0c9845c646d9c604f737f55ee6856")
      public fun valueCellStyle(valueCellStyle: TableCellStyleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SubtotalOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SubtotalOptionsProperty.builder()

      /**
       * @param customLabel The custom label string for the subtotal cells.
       */
      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      /**
       * @param fieldLevel The field level (all, custom, last) for the subtotal cells.
       */
      override fun fieldLevel(fieldLevel: String) {
        cdkBuilder.fieldLevel(fieldLevel)
      }

      /**
       * @param fieldLevelOptions The optional configuration of subtotal cells.
       */
      override fun fieldLevelOptions(fieldLevelOptions: IResolvable) {
        cdkBuilder.fieldLevelOptions(fieldLevelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param fieldLevelOptions The optional configuration of subtotal cells.
       */
      override fun fieldLevelOptions(fieldLevelOptions: List<Any>) {
        cdkBuilder.fieldLevelOptions(fieldLevelOptions)
      }

      /**
       * @param fieldLevelOptions The optional configuration of subtotal cells.
       */
      override fun fieldLevelOptions(vararg fieldLevelOptions: Any): Unit =
          fieldLevelOptions(fieldLevelOptions.toList())

      /**
       * @param metricHeaderCellStyle The cell styling options for the subtotals of header cells.
       */
      override fun metricHeaderCellStyle(metricHeaderCellStyle: IResolvable) {
        cdkBuilder.metricHeaderCellStyle(metricHeaderCellStyle.let(IResolvable::unwrap))
      }

      /**
       * @param metricHeaderCellStyle The cell styling options for the subtotals of header cells.
       */
      override fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty) {
        cdkBuilder.metricHeaderCellStyle(metricHeaderCellStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param metricHeaderCellStyle The cell styling options for the subtotals of header cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("807c046b9b2d18a532f81ec8a465651ae4ffec02fc9b634b49e2c6d45281330a")
      override
          fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty.Builder.() -> Unit):
          Unit = metricHeaderCellStyle(TableCellStyleProperty(metricHeaderCellStyle))

      /**
       * @param styleTargets The style targets options for subtotals.
       */
      override fun styleTargets(styleTargets: IResolvable) {
        cdkBuilder.styleTargets(styleTargets.let(IResolvable::unwrap))
      }

      /**
       * @param styleTargets The style targets options for subtotals.
       */
      override fun styleTargets(styleTargets: List<Any>) {
        cdkBuilder.styleTargets(styleTargets)
      }

      /**
       * @param styleTargets The style targets options for subtotals.
       */
      override fun styleTargets(vararg styleTargets: Any): Unit =
          styleTargets(styleTargets.toList())

      /**
       * @param totalCellStyle The cell styling options for the subtotal cells.
       */
      override fun totalCellStyle(totalCellStyle: IResolvable) {
        cdkBuilder.totalCellStyle(totalCellStyle.let(IResolvable::unwrap))
      }

      /**
       * @param totalCellStyle The cell styling options for the subtotal cells.
       */
      override fun totalCellStyle(totalCellStyle: TableCellStyleProperty) {
        cdkBuilder.totalCellStyle(totalCellStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param totalCellStyle The cell styling options for the subtotal cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f77d9766c8fc2f455cf9ec8e9ea658b3e70f73f5ed72bafe0a1bcc727ed002c4")
      override fun totalCellStyle(totalCellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          totalCellStyle(TableCellStyleProperty(totalCellStyle))

      /**
       * @param totalsVisibility The visibility configuration for the subtotal cells.
       */
      override fun totalsVisibility(totalsVisibility: String) {
        cdkBuilder.totalsVisibility(totalsVisibility)
      }

      /**
       * @param valueCellStyle The cell styling options for the subtotals of value cells.
       */
      override fun valueCellStyle(valueCellStyle: IResolvable) {
        cdkBuilder.valueCellStyle(valueCellStyle.let(IResolvable::unwrap))
      }

      /**
       * @param valueCellStyle The cell styling options for the subtotals of value cells.
       */
      override fun valueCellStyle(valueCellStyle: TableCellStyleProperty) {
        cdkBuilder.valueCellStyle(valueCellStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param valueCellStyle The cell styling options for the subtotals of value cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("34c31f91480e3492d99fa479b8bb43193ed0c9845c646d9c604f737f55ee6856")
      override fun valueCellStyle(valueCellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          valueCellStyle(TableCellStyleProperty(valueCellStyle))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SubtotalOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SubtotalOptionsProperty,
    ) : SubtotalOptionsProperty {
      /**
       * The custom label string for the subtotal cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-customlabel)
       */
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      /**
       * The field level (all, custom, last) for the subtotal cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-fieldlevel)
       */
      override fun fieldLevel(): String? = unwrap(this).getFieldLevel()

      /**
       * The optional configuration of subtotal cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-fieldleveloptions)
       */
      override fun fieldLevelOptions(): Any? = unwrap(this).getFieldLevelOptions()

      /**
       * The cell styling options for the subtotals of header cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-metricheadercellstyle)
       */
      override fun metricHeaderCellStyle(): Any? = unwrap(this).getMetricHeaderCellStyle()

      /**
       * The style targets options for subtotals.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-styletargets)
       */
      override fun styleTargets(): Any? = unwrap(this).getStyleTargets()

      /**
       * The cell styling options for the subtotal cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-totalcellstyle)
       */
      override fun totalCellStyle(): Any? = unwrap(this).getTotalCellStyle()

      /**
       * The visibility configuration for the subtotal cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-totalsvisibility)
       */
      override fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

      /**
       * The cell styling options for the subtotals of value cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-valuecellstyle)
       */
      override fun valueCellStyle(): Any? = unwrap(this).getValueCellStyle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SubtotalOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SubtotalOptionsProperty):
          SubtotalOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SubtotalOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SubtotalOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface InsightVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The dataset that is used in the insight visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-datasetidentifier)
     */
    public fun dataSetIdentifier(): String

    /**
     * The configuration of an insight visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-insightconfiguration)
     */
    public fun insightConfiguration(): Any? = unwrap(this).getInsightConfiguration()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [InsightVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param dataSetIdentifier The dataset that is used in the insight visual. 
       */
      public fun dataSetIdentifier(dataSetIdentifier: String)

      /**
       * @param insightConfiguration The configuration of an insight visual.
       */
      public fun insightConfiguration(insightConfiguration: IResolvable)

      /**
       * @param insightConfiguration The configuration of an insight visual.
       */
      public fun insightConfiguration(insightConfiguration: InsightConfigurationProperty)

      /**
       * @param insightConfiguration The configuration of an insight visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("217b8d67848d17ed502c263ab66bc5470f3a9b9fd038da190c77d70748bbcce6")
      public
          fun insightConfiguration(insightConfiguration: InsightConfigurationProperty.Builder.() -> Unit)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a3999a876fa8077c6b7292f5147815441fe959b8fb48ea12bc44d7d5099ea9ba")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("688ef7f6d4604fd5d88d93f2560ef741ce8846a195420193cecec4c5a8c45805")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.InsightVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.InsightVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param dataSetIdentifier The dataset that is used in the insight visual. 
       */
      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      /**
       * @param insightConfiguration The configuration of an insight visual.
       */
      override fun insightConfiguration(insightConfiguration: IResolvable) {
        cdkBuilder.insightConfiguration(insightConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param insightConfiguration The configuration of an insight visual.
       */
      override fun insightConfiguration(insightConfiguration: InsightConfigurationProperty) {
        cdkBuilder.insightConfiguration(insightConfiguration.let(InsightConfigurationProperty::unwrap))
      }

      /**
       * @param insightConfiguration The configuration of an insight visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("217b8d67848d17ed502c263ab66bc5470f3a9b9fd038da190c77d70748bbcce6")
      override
          fun insightConfiguration(insightConfiguration: InsightConfigurationProperty.Builder.() -> Unit):
          Unit = insightConfiguration(InsightConfigurationProperty(insightConfiguration))

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a3999a876fa8077c6b7292f5147815441fe959b8fb48ea12bc44d7d5099ea9ba")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("688ef7f6d4604fd5d88d93f2560ef741ce8846a195420193cecec4c5a8c45805")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.InsightVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.InsightVisualProperty,
    ) : InsightVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The dataset that is used in the insight visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-datasetidentifier)
       */
      override fun dataSetIdentifier(): String = unwrap(this).getDataSetIdentifier()

      /**
       * The configuration of an insight visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-insightconfiguration)
       */
      override fun insightConfiguration(): Any? = unwrap(this).getInsightConfiguration()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): InsightVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.InsightVisualProperty):
          InsightVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: InsightVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.InsightVisualProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface ClusterMarkerConfigurationProperty {
    /**
     * The cluster marker that is a part of the cluster marker configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-clustermarkerconfiguration.html#cfn-quicksight-analysis-clustermarkerconfiguration-clustermarker)
     */
    public fun clusterMarker(): Any? = unwrap(this).getClusterMarker()

    /**
     * A builder for [ClusterMarkerConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param clusterMarker The cluster marker that is a part of the cluster marker configuration.
       */
      public fun clusterMarker(clusterMarker: IResolvable)

      /**
       * @param clusterMarker The cluster marker that is a part of the cluster marker configuration.
       */
      public fun clusterMarker(clusterMarker: ClusterMarkerProperty)

      /**
       * @param clusterMarker The cluster marker that is a part of the cluster marker configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0f809824ca0440b1a364aed0becec01352c7758ec8b4d8f4e54d479504bef1f2")
      public fun clusterMarker(clusterMarker: ClusterMarkerProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ClusterMarkerConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ClusterMarkerConfigurationProperty.builder()

      /**
       * @param clusterMarker The cluster marker that is a part of the cluster marker configuration.
       */
      override fun clusterMarker(clusterMarker: IResolvable) {
        cdkBuilder.clusterMarker(clusterMarker.let(IResolvable::unwrap))
      }

      /**
       * @param clusterMarker The cluster marker that is a part of the cluster marker configuration.
       */
      override fun clusterMarker(clusterMarker: ClusterMarkerProperty) {
        cdkBuilder.clusterMarker(clusterMarker.let(ClusterMarkerProperty::unwrap))
      }

      /**
       * @param clusterMarker The cluster marker that is a part of the cluster marker configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0f809824ca0440b1a364aed0becec01352c7758ec8b4d8f4e54d479504bef1f2")
      override fun clusterMarker(clusterMarker: ClusterMarkerProperty.Builder.() -> Unit): Unit =
          clusterMarker(ClusterMarkerProperty(clusterMarker))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ClusterMarkerConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ClusterMarkerConfigurationProperty,
    ) : ClusterMarkerConfigurationProperty {
      /**
       * The cluster marker that is a part of the cluster marker configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-clustermarkerconfiguration.html#cfn-quicksight-analysis-clustermarkerconfiguration-clustermarker)
       */
      override fun clusterMarker(): Any? = unwrap(this).getClusterMarker()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ClusterMarkerConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ClusterMarkerConfigurationProperty):
          ClusterMarkerConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ClusterMarkerConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ClusterMarkerConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface KPIComparisonValueConditionalFormattingProperty {
    /**
     * The conditional formatting of the comparison value's icon.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpicomparisonvalueconditionalformatting.html#cfn-quicksight-analysis-kpicomparisonvalueconditionalformatting-icon)
     */
    public fun icon(): Any? = unwrap(this).getIcon()

    /**
     * The conditional formatting of the comparison value's text color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpicomparisonvalueconditionalformatting.html#cfn-quicksight-analysis-kpicomparisonvalueconditionalformatting-textcolor)
     */
    public fun textColor(): Any? = unwrap(this).getTextColor()

    /**
     * A builder for [KPIComparisonValueConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param icon The conditional formatting of the comparison value's icon.
       */
      public fun icon(icon: IResolvable)

      /**
       * @param icon The conditional formatting of the comparison value's icon.
       */
      public fun icon(icon: ConditionalFormattingIconProperty)

      /**
       * @param icon The conditional formatting of the comparison value's icon.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fda6e8cdeb6539115be284ab42e73f9a12ac3348df4a1c4478c6f61999df54f6")
      public fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit)

      /**
       * @param textColor The conditional formatting of the comparison value's text color.
       */
      public fun textColor(textColor: IResolvable)

      /**
       * @param textColor The conditional formatting of the comparison value's text color.
       */
      public fun textColor(textColor: ConditionalFormattingColorProperty)

      /**
       * @param textColor The conditional formatting of the comparison value's text color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a3335f6c665b7579e33169a3c381463b474f9e5b6a19cdd4c33d8fba43d245cf")
      public fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIComparisonValueConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIComparisonValueConditionalFormattingProperty.builder()

      /**
       * @param icon The conditional formatting of the comparison value's icon.
       */
      override fun icon(icon: IResolvable) {
        cdkBuilder.icon(icon.let(IResolvable::unwrap))
      }

      /**
       * @param icon The conditional formatting of the comparison value's icon.
       */
      override fun icon(icon: ConditionalFormattingIconProperty) {
        cdkBuilder.icon(icon.let(ConditionalFormattingIconProperty::unwrap))
      }

      /**
       * @param icon The conditional formatting of the comparison value's icon.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fda6e8cdeb6539115be284ab42e73f9a12ac3348df4a1c4478c6f61999df54f6")
      override fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit): Unit =
          icon(ConditionalFormattingIconProperty(icon))

      /**
       * @param textColor The conditional formatting of the comparison value's text color.
       */
      override fun textColor(textColor: IResolvable) {
        cdkBuilder.textColor(textColor.let(IResolvable::unwrap))
      }

      /**
       * @param textColor The conditional formatting of the comparison value's text color.
       */
      override fun textColor(textColor: ConditionalFormattingColorProperty) {
        cdkBuilder.textColor(textColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      /**
       * @param textColor The conditional formatting of the comparison value's text color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a3335f6c665b7579e33169a3c381463b474f9e5b6a19cdd4c33d8fba43d245cf")
      override fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit): Unit
          = textColor(ConditionalFormattingColorProperty(textColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIComparisonValueConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIComparisonValueConditionalFormattingProperty,
    ) : KPIComparisonValueConditionalFormattingProperty {
      /**
       * The conditional formatting of the comparison value's icon.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpicomparisonvalueconditionalformatting.html#cfn-quicksight-analysis-kpicomparisonvalueconditionalformatting-icon)
       */
      override fun icon(): Any? = unwrap(this).getIcon()

      /**
       * The conditional formatting of the comparison value's text color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpicomparisonvalueconditionalformatting.html#cfn-quicksight-analysis-kpicomparisonvalueconditionalformatting-textcolor)
       */
      override fun textColor(): Any? = unwrap(this).getTextColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          KPIComparisonValueConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIComparisonValueConditionalFormattingProperty):
          KPIComparisonValueConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIComparisonValueConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIComparisonValueConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DateAxisOptionsProperty {
    /**
     * Determines whether or not missing dates are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dateaxisoptions.html#cfn-quicksight-analysis-dateaxisoptions-missingdatevisibility)
     */
    public fun missingDateVisibility(): String? = unwrap(this).getMissingDateVisibility()

    /**
     * A builder for [DateAxisOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param missingDateVisibility Determines whether or not missing dates are displayed.
       */
      public fun missingDateVisibility(missingDateVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateAxisOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateAxisOptionsProperty.builder()

      /**
       * @param missingDateVisibility Determines whether or not missing dates are displayed.
       */
      override fun missingDateVisibility(missingDateVisibility: String) {
        cdkBuilder.missingDateVisibility(missingDateVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateAxisOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateAxisOptionsProperty,
    ) : DateAxisOptionsProperty {
      /**
       * Determines whether or not missing dates are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dateaxisoptions.html#cfn-quicksight-analysis-dateaxisoptions-missingdatevisibility)
       */
      override fun missingDateVisibility(): String? = unwrap(this).getMissingDateVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DateAxisOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DateAxisOptionsProperty):
          DateAxisOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateAxisOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateAxisOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface RadarChartAreaStyleSettingsProperty {
    /**
     * The visibility settings of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartareastylesettings.html#cfn-quicksight-analysis-radarchartareastylesettings-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [RadarChartAreaStyleSettingsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility The visibility settings of a radar chart.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartAreaStyleSettingsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartAreaStyleSettingsProperty.builder()

      /**
       * @param visibility The visibility settings of a radar chart.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartAreaStyleSettingsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartAreaStyleSettingsProperty,
    ) : RadarChartAreaStyleSettingsProperty {
      /**
       * The visibility settings of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartareastylesettings.html#cfn-quicksight-analysis-radarchartareastylesettings-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          RadarChartAreaStyleSettingsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartAreaStyleSettingsProperty):
          RadarChartAreaStyleSettingsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartAreaStyleSettingsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartAreaStyleSettingsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TextControlPlaceholderOptionsProperty {
    /**
     * The visibility configuration of the placeholder options in a text control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textcontrolplaceholderoptions.html#cfn-quicksight-analysis-textcontrolplaceholderoptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [TextControlPlaceholderOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility The visibility configuration of the placeholder options in a text
       * control.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextControlPlaceholderOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextControlPlaceholderOptionsProperty.builder()

      /**
       * @param visibility The visibility configuration of the placeholder options in a text
       * control.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextControlPlaceholderOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextControlPlaceholderOptionsProperty,
    ) : TextControlPlaceholderOptionsProperty {
      /**
       * The visibility configuration of the placeholder options in a text control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textcontrolplaceholderoptions.html#cfn-quicksight-analysis-textcontrolplaceholderoptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TextControlPlaceholderOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TextControlPlaceholderOptionsProperty):
          TextControlPlaceholderOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TextControlPlaceholderOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextControlPlaceholderOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableBorderOptionsProperty {
    /**
     * The color of a table border.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableborderoptions.html#cfn-quicksight-analysis-tableborderoptions-color)
     */
    public fun color(): String? = unwrap(this).getColor()

    /**
     * The style (none, solid) of a table border.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableborderoptions.html#cfn-quicksight-analysis-tableborderoptions-style)
     */
    public fun style(): String? = unwrap(this).getStyle()

    /**
     * The thickness of a table border.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableborderoptions.html#cfn-quicksight-analysis-tableborderoptions-thickness)
     */
    public fun thickness(): Number? = unwrap(this).getThickness()

    /**
     * A builder for [TableBorderOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color The color of a table border.
       */
      public fun color(color: String)

      /**
       * @param style The style (none, solid) of a table border.
       */
      public fun style(style: String)

      /**
       * @param thickness The thickness of a table border.
       */
      public fun thickness(thickness: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableBorderOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableBorderOptionsProperty.builder()

      /**
       * @param color The color of a table border.
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      /**
       * @param style The style (none, solid) of a table border.
       */
      override fun style(style: String) {
        cdkBuilder.style(style)
      }

      /**
       * @param thickness The thickness of a table border.
       */
      override fun thickness(thickness: Number) {
        cdkBuilder.thickness(thickness)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableBorderOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableBorderOptionsProperty,
    ) : TableBorderOptionsProperty {
      /**
       * The color of a table border.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableborderoptions.html#cfn-quicksight-analysis-tableborderoptions-color)
       */
      override fun color(): String? = unwrap(this).getColor()

      /**
       * The style (none, solid) of a table border.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableborderoptions.html#cfn-quicksight-analysis-tableborderoptions-style)
       */
      override fun style(): String? = unwrap(this).getStyle()

      /**
       * The thickness of a table border.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableborderoptions.html#cfn-quicksight-analysis-tableborderoptions-thickness)
       */
      override fun thickness(): Number? = unwrap(this).getThickness()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TableBorderOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableBorderOptionsProperty):
          TableBorderOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableBorderOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableBorderOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GradientStopProperty {
    /**
     * Determines the color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientstop.html#cfn-quicksight-analysis-gradientstop-color)
     */
    public fun color(): String? = unwrap(this).getColor()

    /**
     * Determines the data value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientstop.html#cfn-quicksight-analysis-gradientstop-datavalue)
     */
    public fun dataValue(): Number? = unwrap(this).getDataValue()

    /**
     * Determines gradient offset value.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientstop.html#cfn-quicksight-analysis-gradientstop-gradientoffset)
     */
    public fun gradientOffset(): Number

    /**
     * A builder for [GradientStopProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color Determines the color.
       */
      public fun color(color: String)

      /**
       * @param dataValue Determines the data value.
       */
      public fun dataValue(dataValue: Number)

      /**
       * @param gradientOffset Determines gradient offset value. 
       */
      public fun gradientOffset(gradientOffset: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GradientStopProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GradientStopProperty.builder()

      /**
       * @param color Determines the color.
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      /**
       * @param dataValue Determines the data value.
       */
      override fun dataValue(dataValue: Number) {
        cdkBuilder.dataValue(dataValue)
      }

      /**
       * @param gradientOffset Determines gradient offset value. 
       */
      override fun gradientOffset(gradientOffset: Number) {
        cdkBuilder.gradientOffset(gradientOffset)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GradientStopProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GradientStopProperty,
    ) : GradientStopProperty {
      /**
       * Determines the color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientstop.html#cfn-quicksight-analysis-gradientstop-color)
       */
      override fun color(): String? = unwrap(this).getColor()

      /**
       * Determines the data value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientstop.html#cfn-quicksight-analysis-gradientstop-datavalue)
       */
      override fun dataValue(): Number? = unwrap(this).getDataValue()

      /**
       * Determines gradient offset value.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientstop.html#cfn-quicksight-analysis-gradientstop-gradientoffset)
       */
      override fun gradientOffset(): Number = unwrap(this).getGradientOffset()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GradientStopProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GradientStopProperty):
          GradientStopProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GradientStopProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GradientStopProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface TablePinnedFieldOptionsProperty {
    /**
     * A list of columns to be pinned to the left of a table visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablepinnedfieldoptions.html#cfn-quicksight-analysis-tablepinnedfieldoptions-pinnedleftfields)
     */
    public fun pinnedLeftFields(): List<String> = unwrap(this).getPinnedLeftFields() ?: emptyList()

    /**
     * A builder for [TablePinnedFieldOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param pinnedLeftFields A list of columns to be pinned to the left of a table visual.
       */
      public fun pinnedLeftFields(pinnedLeftFields: List<String>)

      /**
       * @param pinnedLeftFields A list of columns to be pinned to the left of a table visual.
       */
      public fun pinnedLeftFields(vararg pinnedLeftFields: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TablePinnedFieldOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TablePinnedFieldOptionsProperty.builder()

      /**
       * @param pinnedLeftFields A list of columns to be pinned to the left of a table visual.
       */
      override fun pinnedLeftFields(pinnedLeftFields: List<String>) {
        cdkBuilder.pinnedLeftFields(pinnedLeftFields)
      }

      /**
       * @param pinnedLeftFields A list of columns to be pinned to the left of a table visual.
       */
      override fun pinnedLeftFields(vararg pinnedLeftFields: String): Unit =
          pinnedLeftFields(pinnedLeftFields.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TablePinnedFieldOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TablePinnedFieldOptionsProperty,
    ) : TablePinnedFieldOptionsProperty {
      /**
       * A list of columns to be pinned to the left of a table visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablepinnedfieldoptions.html#cfn-quicksight-analysis-tablepinnedfieldoptions-pinnedleftfields)
       */
      override fun pinnedLeftFields(): List<String> = unwrap(this).getPinnedLeftFields() ?:
          emptyList()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TablePinnedFieldOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TablePinnedFieldOptionsProperty):
          TablePinnedFieldOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TablePinnedFieldOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TablePinnedFieldOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ParameterControlProperty {
    /**
     * A control from a date parameter that specifies date and time.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-datetimepicker)
     */
    public fun dateTimePicker(): Any? = unwrap(this).getDateTimePicker()

    /**
     * A control to display a dropdown list with buttons that are used to select a single value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-dropdown)
     */
    public fun dropdown(): Any? = unwrap(this).getDropdown()

    /**
     * A control to display a list with buttons or boxes that are used to select either a single
     * value or multiple values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-list)
     */
    public fun list(): Any? = unwrap(this).getList()

    /**
     * A control to display a horizontal toggle bar.
     *
     * This is used to change a value by sliding the toggle.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-slider)
     */
    public fun slider(): Any? = unwrap(this).getSlider()

    /**
     * A control to display a text box that is used to enter multiple entries.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-textarea)
     */
    public fun textArea(): Any? = unwrap(this).getTextArea()

    /**
     * A control to display a text box that is used to enter a single entry.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-textfield)
     */
    public fun textField(): Any? = unwrap(this).getTextField()

    /**
     * A builder for [ParameterControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dateTimePicker A control from a date parameter that specifies date and time.
       */
      public fun dateTimePicker(dateTimePicker: IResolvable)

      /**
       * @param dateTimePicker A control from a date parameter that specifies date and time.
       */
      public fun dateTimePicker(dateTimePicker: ParameterDateTimePickerControlProperty)

      /**
       * @param dateTimePicker A control from a date parameter that specifies date and time.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b4d02dae8249ea8bac596aabd5cd7260ab8ba900cc123bb2212b40b9a58663b6")
      public
          fun dateTimePicker(dateTimePicker: ParameterDateTimePickerControlProperty.Builder.() -> Unit)

      /**
       * @param dropdown A control to display a dropdown list with buttons that are used to select a
       * single value.
       */
      public fun dropdown(dropdown: IResolvable)

      /**
       * @param dropdown A control to display a dropdown list with buttons that are used to select a
       * single value.
       */
      public fun dropdown(dropdown: ParameterDropDownControlProperty)

      /**
       * @param dropdown A control to display a dropdown list with buttons that are used to select a
       * single value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eba0b678c8b01ae0aa31f609ef4c9729f4b4d53050f1b7bd6f49f59df1d1c672")
      public fun dropdown(dropdown: ParameterDropDownControlProperty.Builder.() -> Unit)

      /**
       * @param list A control to display a list with buttons or boxes that are used to select
       * either a single value or multiple values.
       */
      public fun list(list: IResolvable)

      /**
       * @param list A control to display a list with buttons or boxes that are used to select
       * either a single value or multiple values.
       */
      public fun list(list: ParameterListControlProperty)

      /**
       * @param list A control to display a list with buttons or boxes that are used to select
       * either a single value or multiple values.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1181e88a09990d503d173e4fbb62c9617c6e23d9a19d9976629d3322c81c68e1")
      public fun list(list: ParameterListControlProperty.Builder.() -> Unit)

      /**
       * @param slider A control to display a horizontal toggle bar.
       * This is used to change a value by sliding the toggle.
       */
      public fun slider(slider: IResolvable)

      /**
       * @param slider A control to display a horizontal toggle bar.
       * This is used to change a value by sliding the toggle.
       */
      public fun slider(slider: ParameterSliderControlProperty)

      /**
       * @param slider A control to display a horizontal toggle bar.
       * This is used to change a value by sliding the toggle.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e10493c10b50403aabe28b414c76b5551287706550a9c2c2772ca447295a5da3")
      public fun slider(slider: ParameterSliderControlProperty.Builder.() -> Unit)

      /**
       * @param textArea A control to display a text box that is used to enter multiple entries.
       */
      public fun textArea(textArea: IResolvable)

      /**
       * @param textArea A control to display a text box that is used to enter multiple entries.
       */
      public fun textArea(textArea: ParameterTextAreaControlProperty)

      /**
       * @param textArea A control to display a text box that is used to enter multiple entries.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("91536035293a60057b7a59cf73a861ce486a8e59b2ab93a40e7d2794fc90cc55")
      public fun textArea(textArea: ParameterTextAreaControlProperty.Builder.() -> Unit)

      /**
       * @param textField A control to display a text box that is used to enter a single entry.
       */
      public fun textField(textField: IResolvable)

      /**
       * @param textField A control to display a text box that is used to enter a single entry.
       */
      public fun textField(textField: ParameterTextFieldControlProperty)

      /**
       * @param textField A control to display a text box that is used to enter a single entry.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e568549190aba8405435c0bbc92144a5c2ebac325cd5852c2d4bad24719d81aa")
      public fun textField(textField: ParameterTextFieldControlProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterControlProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterControlProperty.builder()

      /**
       * @param dateTimePicker A control from a date parameter that specifies date and time.
       */
      override fun dateTimePicker(dateTimePicker: IResolvable) {
        cdkBuilder.dateTimePicker(dateTimePicker.let(IResolvable::unwrap))
      }

      /**
       * @param dateTimePicker A control from a date parameter that specifies date and time.
       */
      override fun dateTimePicker(dateTimePicker: ParameterDateTimePickerControlProperty) {
        cdkBuilder.dateTimePicker(dateTimePicker.let(ParameterDateTimePickerControlProperty::unwrap))
      }

      /**
       * @param dateTimePicker A control from a date parameter that specifies date and time.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b4d02dae8249ea8bac596aabd5cd7260ab8ba900cc123bb2212b40b9a58663b6")
      override
          fun dateTimePicker(dateTimePicker: ParameterDateTimePickerControlProperty.Builder.() -> Unit):
          Unit = dateTimePicker(ParameterDateTimePickerControlProperty(dateTimePicker))

      /**
       * @param dropdown A control to display a dropdown list with buttons that are used to select a
       * single value.
       */
      override fun dropdown(dropdown: IResolvable) {
        cdkBuilder.dropdown(dropdown.let(IResolvable::unwrap))
      }

      /**
       * @param dropdown A control to display a dropdown list with buttons that are used to select a
       * single value.
       */
      override fun dropdown(dropdown: ParameterDropDownControlProperty) {
        cdkBuilder.dropdown(dropdown.let(ParameterDropDownControlProperty::unwrap))
      }

      /**
       * @param dropdown A control to display a dropdown list with buttons that are used to select a
       * single value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eba0b678c8b01ae0aa31f609ef4c9729f4b4d53050f1b7bd6f49f59df1d1c672")
      override fun dropdown(dropdown: ParameterDropDownControlProperty.Builder.() -> Unit): Unit =
          dropdown(ParameterDropDownControlProperty(dropdown))

      /**
       * @param list A control to display a list with buttons or boxes that are used to select
       * either a single value or multiple values.
       */
      override fun list(list: IResolvable) {
        cdkBuilder.list(list.let(IResolvable::unwrap))
      }

      /**
       * @param list A control to display a list with buttons or boxes that are used to select
       * either a single value or multiple values.
       */
      override fun list(list: ParameterListControlProperty) {
        cdkBuilder.list(list.let(ParameterListControlProperty::unwrap))
      }

      /**
       * @param list A control to display a list with buttons or boxes that are used to select
       * either a single value or multiple values.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1181e88a09990d503d173e4fbb62c9617c6e23d9a19d9976629d3322c81c68e1")
      override fun list(list: ParameterListControlProperty.Builder.() -> Unit): Unit =
          list(ParameterListControlProperty(list))

      /**
       * @param slider A control to display a horizontal toggle bar.
       * This is used to change a value by sliding the toggle.
       */
      override fun slider(slider: IResolvable) {
        cdkBuilder.slider(slider.let(IResolvable::unwrap))
      }

      /**
       * @param slider A control to display a horizontal toggle bar.
       * This is used to change a value by sliding the toggle.
       */
      override fun slider(slider: ParameterSliderControlProperty) {
        cdkBuilder.slider(slider.let(ParameterSliderControlProperty::unwrap))
      }

      /**
       * @param slider A control to display a horizontal toggle bar.
       * This is used to change a value by sliding the toggle.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e10493c10b50403aabe28b414c76b5551287706550a9c2c2772ca447295a5da3")
      override fun slider(slider: ParameterSliderControlProperty.Builder.() -> Unit): Unit =
          slider(ParameterSliderControlProperty(slider))

      /**
       * @param textArea A control to display a text box that is used to enter multiple entries.
       */
      override fun textArea(textArea: IResolvable) {
        cdkBuilder.textArea(textArea.let(IResolvable::unwrap))
      }

      /**
       * @param textArea A control to display a text box that is used to enter multiple entries.
       */
      override fun textArea(textArea: ParameterTextAreaControlProperty) {
        cdkBuilder.textArea(textArea.let(ParameterTextAreaControlProperty::unwrap))
      }

      /**
       * @param textArea A control to display a text box that is used to enter multiple entries.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("91536035293a60057b7a59cf73a861ce486a8e59b2ab93a40e7d2794fc90cc55")
      override fun textArea(textArea: ParameterTextAreaControlProperty.Builder.() -> Unit): Unit =
          textArea(ParameterTextAreaControlProperty(textArea))

      /**
       * @param textField A control to display a text box that is used to enter a single entry.
       */
      override fun textField(textField: IResolvable) {
        cdkBuilder.textField(textField.let(IResolvable::unwrap))
      }

      /**
       * @param textField A control to display a text box that is used to enter a single entry.
       */
      override fun textField(textField: ParameterTextFieldControlProperty) {
        cdkBuilder.textField(textField.let(ParameterTextFieldControlProperty::unwrap))
      }

      /**
       * @param textField A control to display a text box that is used to enter a single entry.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e568549190aba8405435c0bbc92144a5c2ebac325cd5852c2d4bad24719d81aa")
      override fun textField(textField: ParameterTextFieldControlProperty.Builder.() -> Unit): Unit
          = textField(ParameterTextFieldControlProperty(textField))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterControlProperty,
    ) : ParameterControlProperty {
      /**
       * A control from a date parameter that specifies date and time.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-datetimepicker)
       */
      override fun dateTimePicker(): Any? = unwrap(this).getDateTimePicker()

      /**
       * A control to display a dropdown list with buttons that are used to select a single value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-dropdown)
       */
      override fun dropdown(): Any? = unwrap(this).getDropdown()

      /**
       * A control to display a list with buttons or boxes that are used to select either a single
       * value or multiple values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-list)
       */
      override fun list(): Any? = unwrap(this).getList()

      /**
       * A control to display a horizontal toggle bar.
       *
       * This is used to change a value by sliding the toggle.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-slider)
       */
      override fun slider(): Any? = unwrap(this).getSlider()

      /**
       * A control to display a text box that is used to enter multiple entries.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-textarea)
       */
      override fun textArea(): Any? = unwrap(this).getTextArea()

      /**
       * A control to display a text box that is used to enter a single entry.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-textfield)
       */
      override fun textField(): Any? = unwrap(this).getTextField()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ParameterControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterControlProperty):
          ParameterControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterControlProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface AggregationFunctionProperty {
    /**
     * Aggregation for attributes.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html#cfn-quicksight-analysis-aggregationfunction-attributeaggregationfunction)
     */
    public fun attributeAggregationFunction(): Any? = unwrap(this).getAttributeAggregationFunction()

    /**
     * Aggregation for categorical values.
     *
     * * `COUNT` : Aggregate by the total number of values, including duplicates.
     * * `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html#cfn-quicksight-analysis-aggregationfunction-categoricalaggregationfunction)
     */
    public fun categoricalAggregationFunction(): String? =
        unwrap(this).getCategoricalAggregationFunction()

    /**
     * Aggregation for date values.
     *
     * * `COUNT` : Aggregate by the total number of values, including duplicates.
     * * `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
     * * `MIN` : Select the smallest date value.
     * * `MAX` : Select the largest date value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html#cfn-quicksight-analysis-aggregationfunction-dateaggregationfunction)
     */
    public fun dateAggregationFunction(): String? = unwrap(this).getDateAggregationFunction()

    /**
     * Aggregation for numerical values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html#cfn-quicksight-analysis-aggregationfunction-numericalaggregationfunction)
     */
    public fun numericalAggregationFunction(): Any? = unwrap(this).getNumericalAggregationFunction()

    /**
     * A builder for [AggregationFunctionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param attributeAggregationFunction Aggregation for attributes.
       */
      public fun attributeAggregationFunction(attributeAggregationFunction: IResolvable)

      /**
       * @param attributeAggregationFunction Aggregation for attributes.
       */
      public
          fun attributeAggregationFunction(attributeAggregationFunction: AttributeAggregationFunctionProperty)

      /**
       * @param attributeAggregationFunction Aggregation for attributes.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("33d2d846c1ede6f89b5d1a37fc401c5e6c2c6a6e4cbb5d4ee73b4e03dbca6078")
      public
          fun attributeAggregationFunction(attributeAggregationFunction: AttributeAggregationFunctionProperty.Builder.() -> Unit)

      /**
       * @param categoricalAggregationFunction Aggregation for categorical values.
       * * `COUNT` : Aggregate by the total number of values, including duplicates.
       * * `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
       */
      public fun categoricalAggregationFunction(categoricalAggregationFunction: String)

      /**
       * @param dateAggregationFunction Aggregation for date values.
       * * `COUNT` : Aggregate by the total number of values, including duplicates.
       * * `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
       * * `MIN` : Select the smallest date value.
       * * `MAX` : Select the largest date value.
       */
      public fun dateAggregationFunction(dateAggregationFunction: String)

      /**
       * @param numericalAggregationFunction Aggregation for numerical values.
       */
      public fun numericalAggregationFunction(numericalAggregationFunction: IResolvable)

      /**
       * @param numericalAggregationFunction Aggregation for numerical values.
       */
      public
          fun numericalAggregationFunction(numericalAggregationFunction: NumericalAggregationFunctionProperty)

      /**
       * @param numericalAggregationFunction Aggregation for numerical values.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7774e85e939a8dc138288ab0e2f18da7f657a0ad6995067e17fd8f1ad166b95a")
      public
          fun numericalAggregationFunction(numericalAggregationFunction: NumericalAggregationFunctionProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AggregationFunctionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AggregationFunctionProperty.builder()

      /**
       * @param attributeAggregationFunction Aggregation for attributes.
       */
      override fun attributeAggregationFunction(attributeAggregationFunction: IResolvable) {
        cdkBuilder.attributeAggregationFunction(attributeAggregationFunction.let(IResolvable::unwrap))
      }

      /**
       * @param attributeAggregationFunction Aggregation for attributes.
       */
      override
          fun attributeAggregationFunction(attributeAggregationFunction: AttributeAggregationFunctionProperty) {
        cdkBuilder.attributeAggregationFunction(attributeAggregationFunction.let(AttributeAggregationFunctionProperty::unwrap))
      }

      /**
       * @param attributeAggregationFunction Aggregation for attributes.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("33d2d846c1ede6f89b5d1a37fc401c5e6c2c6a6e4cbb5d4ee73b4e03dbca6078")
      override
          fun attributeAggregationFunction(attributeAggregationFunction: AttributeAggregationFunctionProperty.Builder.() -> Unit):
          Unit =
          attributeAggregationFunction(AttributeAggregationFunctionProperty(attributeAggregationFunction))

      /**
       * @param categoricalAggregationFunction Aggregation for categorical values.
       * * `COUNT` : Aggregate by the total number of values, including duplicates.
       * * `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
       */
      override fun categoricalAggregationFunction(categoricalAggregationFunction: String) {
        cdkBuilder.categoricalAggregationFunction(categoricalAggregationFunction)
      }

      /**
       * @param dateAggregationFunction Aggregation for date values.
       * * `COUNT` : Aggregate by the total number of values, including duplicates.
       * * `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
       * * `MIN` : Select the smallest date value.
       * * `MAX` : Select the largest date value.
       */
      override fun dateAggregationFunction(dateAggregationFunction: String) {
        cdkBuilder.dateAggregationFunction(dateAggregationFunction)
      }

      /**
       * @param numericalAggregationFunction Aggregation for numerical values.
       */
      override fun numericalAggregationFunction(numericalAggregationFunction: IResolvable) {
        cdkBuilder.numericalAggregationFunction(numericalAggregationFunction.let(IResolvable::unwrap))
      }

      /**
       * @param numericalAggregationFunction Aggregation for numerical values.
       */
      override
          fun numericalAggregationFunction(numericalAggregationFunction: NumericalAggregationFunctionProperty) {
        cdkBuilder.numericalAggregationFunction(numericalAggregationFunction.let(NumericalAggregationFunctionProperty::unwrap))
      }

      /**
       * @param numericalAggregationFunction Aggregation for numerical values.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7774e85e939a8dc138288ab0e2f18da7f657a0ad6995067e17fd8f1ad166b95a")
      override
          fun numericalAggregationFunction(numericalAggregationFunction: NumericalAggregationFunctionProperty.Builder.() -> Unit):
          Unit =
          numericalAggregationFunction(NumericalAggregationFunctionProperty(numericalAggregationFunction))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AggregationFunctionProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AggregationFunctionProperty,
    ) : AggregationFunctionProperty {
      /**
       * Aggregation for attributes.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html#cfn-quicksight-analysis-aggregationfunction-attributeaggregationfunction)
       */
      override fun attributeAggregationFunction(): Any? =
          unwrap(this).getAttributeAggregationFunction()

      /**
       * Aggregation for categorical values.
       *
       * * `COUNT` : Aggregate by the total number of values, including duplicates.
       * * `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html#cfn-quicksight-analysis-aggregationfunction-categoricalaggregationfunction)
       */
      override fun categoricalAggregationFunction(): String? =
          unwrap(this).getCategoricalAggregationFunction()

      /**
       * Aggregation for date values.
       *
       * * `COUNT` : Aggregate by the total number of values, including duplicates.
       * * `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
       * * `MIN` : Select the smallest date value.
       * * `MAX` : Select the largest date value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html#cfn-quicksight-analysis-aggregationfunction-dateaggregationfunction)
       */
      override fun dateAggregationFunction(): String? = unwrap(this).getDateAggregationFunction()

      /**
       * Aggregation for numerical values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html#cfn-quicksight-analysis-aggregationfunction-numericalaggregationfunction)
       */
      override fun numericalAggregationFunction(): Any? =
          unwrap(this).getNumericalAggregationFunction()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AggregationFunctionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AggregationFunctionProperty):
          AggregationFunctionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AggregationFunctionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AggregationFunctionProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableStyleTargetProperty {
    /**
     * The cell type of the table style target.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablestyletarget.html#cfn-quicksight-analysis-tablestyletarget-celltype)
     */
    public fun cellType(): String

    /**
     * A builder for [TableStyleTargetProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param cellType The cell type of the table style target. 
       */
      public fun cellType(cellType: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableStyleTargetProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableStyleTargetProperty.builder()

      /**
       * @param cellType The cell type of the table style target. 
       */
      override fun cellType(cellType: String) {
        cdkBuilder.cellType(cellType)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableStyleTargetProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableStyleTargetProperty,
    ) : TableStyleTargetProperty {
      /**
       * The cell type of the table style target.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablestyletarget.html#cfn-quicksight-analysis-tablestyletarget-celltype)
       */
      override fun cellType(): String = unwrap(this).getCellType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TableStyleTargetProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableStyleTargetProperty):
          TableStyleTargetProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableStyleTargetProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableStyleTargetProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface HeatMapFieldWellsProperty {
    /**
     * The aggregated field wells of a heat map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapfieldwells.html#cfn-quicksight-analysis-heatmapfieldwells-heatmapaggregatedfieldwells)
     */
    public fun heatMapAggregatedFieldWells(): Any? = unwrap(this).getHeatMapAggregatedFieldWells()

    /**
     * A builder for [HeatMapFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param heatMapAggregatedFieldWells The aggregated field wells of a heat map.
       */
      public fun heatMapAggregatedFieldWells(heatMapAggregatedFieldWells: IResolvable)

      /**
       * @param heatMapAggregatedFieldWells The aggregated field wells of a heat map.
       */
      public
          fun heatMapAggregatedFieldWells(heatMapAggregatedFieldWells: HeatMapAggregatedFieldWellsProperty)

      /**
       * @param heatMapAggregatedFieldWells The aggregated field wells of a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("26e53b81df1739a2a34c06db32fec5c2c26e862a3e1c97ced8ec806dcd36aaf6")
      public
          fun heatMapAggregatedFieldWells(heatMapAggregatedFieldWells: HeatMapAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapFieldWellsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapFieldWellsProperty.builder()

      /**
       * @param heatMapAggregatedFieldWells The aggregated field wells of a heat map.
       */
      override fun heatMapAggregatedFieldWells(heatMapAggregatedFieldWells: IResolvable) {
        cdkBuilder.heatMapAggregatedFieldWells(heatMapAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param heatMapAggregatedFieldWells The aggregated field wells of a heat map.
       */
      override
          fun heatMapAggregatedFieldWells(heatMapAggregatedFieldWells: HeatMapAggregatedFieldWellsProperty) {
        cdkBuilder.heatMapAggregatedFieldWells(heatMapAggregatedFieldWells.let(HeatMapAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param heatMapAggregatedFieldWells The aggregated field wells of a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("26e53b81df1739a2a34c06db32fec5c2c26e862a3e1c97ced8ec806dcd36aaf6")
      override
          fun heatMapAggregatedFieldWells(heatMapAggregatedFieldWells: HeatMapAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          heatMapAggregatedFieldWells(HeatMapAggregatedFieldWellsProperty(heatMapAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapFieldWellsProperty,
    ) : HeatMapFieldWellsProperty {
      /**
       * The aggregated field wells of a heat map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapfieldwells.html#cfn-quicksight-analysis-heatmapfieldwells-heatmapaggregatedfieldwells)
       */
      override fun heatMapAggregatedFieldWells(): Any? =
          unwrap(this).getHeatMapAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): HeatMapFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapFieldWellsProperty):
          HeatMapFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HeatMapFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface CascadingControlConfigurationProperty {
    /**
     * A list of source controls that determine the values that are used in the current control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolconfiguration.html#cfn-quicksight-analysis-cascadingcontrolconfiguration-sourcecontrols)
     */
    public fun sourceControls(): Any? = unwrap(this).getSourceControls()

    /**
     * A builder for [CascadingControlConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param sourceControls A list of source controls that determine the values that are used in
       * the current control.
       */
      public fun sourceControls(sourceControls: IResolvable)

      /**
       * @param sourceControls A list of source controls that determine the values that are used in
       * the current control.
       */
      public fun sourceControls(sourceControls: List<Any>)

      /**
       * @param sourceControls A list of source controls that determine the values that are used in
       * the current control.
       */
      public fun sourceControls(vararg sourceControls: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CascadingControlConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CascadingControlConfigurationProperty.builder()

      /**
       * @param sourceControls A list of source controls that determine the values that are used in
       * the current control.
       */
      override fun sourceControls(sourceControls: IResolvable) {
        cdkBuilder.sourceControls(sourceControls.let(IResolvable::unwrap))
      }

      /**
       * @param sourceControls A list of source controls that determine the values that are used in
       * the current control.
       */
      override fun sourceControls(sourceControls: List<Any>) {
        cdkBuilder.sourceControls(sourceControls)
      }

      /**
       * @param sourceControls A list of source controls that determine the values that are used in
       * the current control.
       */
      override fun sourceControls(vararg sourceControls: Any): Unit =
          sourceControls(sourceControls.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CascadingControlConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CascadingControlConfigurationProperty,
    ) : CascadingControlConfigurationProperty {
      /**
       * A list of source controls that determine the values that are used in the current control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolconfiguration.html#cfn-quicksight-analysis-cascadingcontrolconfiguration-sourcecontrols)
       */
      override fun sourceControls(): Any? = unwrap(this).getSourceControls()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          CascadingControlConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CascadingControlConfigurationProperty):
          CascadingControlConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CascadingControlConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CascadingControlConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface RollingDateConfigurationProperty {
    /**
     * The data set that is used in the rolling date configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rollingdateconfiguration.html#cfn-quicksight-analysis-rollingdateconfiguration-datasetidentifier)
     */
    public fun dataSetIdentifier(): String? = unwrap(this).getDataSetIdentifier()

    /**
     * The expression of the rolling date configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rollingdateconfiguration.html#cfn-quicksight-analysis-rollingdateconfiguration-expression)
     */
    public fun expression(): String

    /**
     * A builder for [RollingDateConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataSetIdentifier The data set that is used in the rolling date configuration.
       */
      public fun dataSetIdentifier(dataSetIdentifier: String)

      /**
       * @param expression The expression of the rolling date configuration. 
       */
      public fun expression(expression: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RollingDateConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RollingDateConfigurationProperty.builder()

      /**
       * @param dataSetIdentifier The data set that is used in the rolling date configuration.
       */
      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      /**
       * @param expression The expression of the rolling date configuration. 
       */
      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RollingDateConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RollingDateConfigurationProperty,
    ) : RollingDateConfigurationProperty {
      /**
       * The data set that is used in the rolling date configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rollingdateconfiguration.html#cfn-quicksight-analysis-rollingdateconfiguration-datasetidentifier)
       */
      override fun dataSetIdentifier(): String? = unwrap(this).getDataSetIdentifier()

      /**
       * The expression of the rolling date configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rollingdateconfiguration.html#cfn-quicksight-analysis-rollingdateconfiguration-expression)
       */
      override fun expression(): String = unwrap(this).getExpression()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): RollingDateConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.RollingDateConfigurationProperty):
          RollingDateConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RollingDateConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RollingDateConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface RelativeDateTimeControlDisplayOptionsProperty {
    /**
     * Customize how dates are formatted in controls.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatetimecontroldisplayoptions.html#cfn-quicksight-analysis-relativedatetimecontroldisplayoptions-datetimeformat)
     */
    public fun dateTimeFormat(): String? = unwrap(this).getDateTimeFormat()

    /**
     * The configuration of info icon label options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatetimecontroldisplayoptions.html#cfn-quicksight-analysis-relativedatetimecontroldisplayoptions-infoiconlabeloptions)
     */
    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    /**
     * The options to configure the title visibility, name, and font size.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatetimecontroldisplayoptions.html#cfn-quicksight-analysis-relativedatetimecontroldisplayoptions-titleoptions)
     */
    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    /**
     * A builder for [RelativeDateTimeControlDisplayOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dateTimeFormat Customize how dates are formatted in controls.
       */
      public fun dateTimeFormat(dateTimeFormat: String)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("153b878b0bbddeaa355e11c7fc75ee6ef061bcbcdbb02b7f011bb71495979768")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: IResolvable)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: LabelOptionsProperty)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4bf3dd4ea316dff36050464e0dd46058d4605cdf2c308c58053b46051e31bb17")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RelativeDateTimeControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RelativeDateTimeControlDisplayOptionsProperty.builder()

      /**
       * @param dateTimeFormat Customize how dates are formatted in controls.
       */
      override fun dateTimeFormat(dateTimeFormat: String) {
        cdkBuilder.dateTimeFormat(dateTimeFormat)
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("153b878b0bbddeaa355e11c7fc75ee6ef061bcbcdbb02b7f011bb71495979768")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4bf3dd4ea316dff36050464e0dd46058d4605cdf2c308c58053b46051e31bb17")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RelativeDateTimeControlDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RelativeDateTimeControlDisplayOptionsProperty,
    ) : RelativeDateTimeControlDisplayOptionsProperty {
      /**
       * Customize how dates are formatted in controls.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatetimecontroldisplayoptions.html#cfn-quicksight-analysis-relativedatetimecontroldisplayoptions-datetimeformat)
       */
      override fun dateTimeFormat(): String? = unwrap(this).getDateTimeFormat()

      /**
       * The configuration of info icon label options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatetimecontroldisplayoptions.html#cfn-quicksight-analysis-relativedatetimecontroldisplayoptions-infoiconlabeloptions)
       */
      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      /**
       * The options to configure the title visibility, name, and font size.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatetimecontroldisplayoptions.html#cfn-quicksight-analysis-relativedatetimecontroldisplayoptions-titleoptions)
       */
      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          RelativeDateTimeControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.RelativeDateTimeControlDisplayOptionsProperty):
          RelativeDateTimeControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RelativeDateTimeControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RelativeDateTimeControlDisplayOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilterTextFieldControlProperty {
    /**
     * The display options of a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html#cfn-quicksight-analysis-filtertextfieldcontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The ID of the `FilterTextFieldControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html#cfn-quicksight-analysis-filtertextfieldcontrol-filtercontrolid)
     */
    public fun filterControlId(): String

    /**
     * The source filter ID of the `FilterTextFieldControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html#cfn-quicksight-analysis-filtertextfieldcontrol-sourcefilterid)
     */
    public fun sourceFilterId(): String

    /**
     * The title of the `FilterTextFieldControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html#cfn-quicksight-analysis-filtertextfieldcontrol-title)
     */
    public fun title(): String

    /**
     * A builder for [FilterTextFieldControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("021db55e7b79757529ff70ee8a878b235ed84e68e529b70c0a48bda1e3306dda")
      public
          fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param filterControlId The ID of the `FilterTextFieldControl` . 
       */
      public fun filterControlId(filterControlId: String)

      /**
       * @param sourceFilterId The source filter ID of the `FilterTextFieldControl` . 
       */
      public fun sourceFilterId(sourceFilterId: String)

      /**
       * @param title The title of the `FilterTextFieldControl` . 
       */
      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterTextFieldControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterTextFieldControlProperty.builder()

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(TextFieldControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("021db55e7b79757529ff70ee8a878b235ed84e68e529b70c0a48bda1e3306dda")
      override
          fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(TextFieldControlDisplayOptionsProperty(displayOptions))

      /**
       * @param filterControlId The ID of the `FilterTextFieldControl` . 
       */
      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      /**
       * @param sourceFilterId The source filter ID of the `FilterTextFieldControl` . 
       */
      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      /**
       * @param title The title of the `FilterTextFieldControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterTextFieldControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterTextFieldControlProperty,
    ) : FilterTextFieldControlProperty {
      /**
       * The display options of a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html#cfn-quicksight-analysis-filtertextfieldcontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The ID of the `FilterTextFieldControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html#cfn-quicksight-analysis-filtertextfieldcontrol-filtercontrolid)
       */
      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      /**
       * The source filter ID of the `FilterTextFieldControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html#cfn-quicksight-analysis-filtertextfieldcontrol-sourcefilterid)
       */
      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      /**
       * The title of the `FilterTextFieldControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html#cfn-quicksight-analysis-filtertextfieldcontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilterTextFieldControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterTextFieldControlProperty):
          FilterTextFieldControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterTextFieldControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterTextFieldControlProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PercentVisibleRangeProperty {
    /**
     * The lower bound of the range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentvisiblerange.html#cfn-quicksight-analysis-percentvisiblerange-from)
     */
    public fun from(): Number? = unwrap(this).getFrom()

    /**
     * The top bound of the range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentvisiblerange.html#cfn-quicksight-analysis-percentvisiblerange-to)
     */
    public fun to(): Number? = unwrap(this).getTo()

    /**
     * A builder for [PercentVisibleRangeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param from The lower bound of the range.
       */
      public fun from(from: Number)

      /**
       * @param to The top bound of the range.
       */
      public fun to(to: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentVisibleRangeProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentVisibleRangeProperty.builder()

      /**
       * @param from The lower bound of the range.
       */
      override fun from(from: Number) {
        cdkBuilder.from(from)
      }

      /**
       * @param to The top bound of the range.
       */
      override fun to(to: Number) {
        cdkBuilder.to(to)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentVisibleRangeProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentVisibleRangeProperty,
    ) : PercentVisibleRangeProperty {
      /**
       * The lower bound of the range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentvisiblerange.html#cfn-quicksight-analysis-percentvisiblerange-from)
       */
      override fun from(): Number? = unwrap(this).getFrom()

      /**
       * The top bound of the range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentvisiblerange.html#cfn-quicksight-analysis-percentvisiblerange-to)
       */
      override fun to(): Number? = unwrap(this).getTo()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PercentVisibleRangeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentVisibleRangeProperty):
          PercentVisibleRangeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PercentVisibleRangeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentVisibleRangeProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface AttributeAggregationFunctionProperty {
    /**
     * The built-in aggregation functions for attributes.
     *
     * * `UNIQUE_VALUE` : Returns the unique value for a field, aggregated by the dimension fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-attributeaggregationfunction.html#cfn-quicksight-analysis-attributeaggregationfunction-simpleattributeaggregation)
     */
    public fun simpleAttributeAggregation(): String? = unwrap(this).getSimpleAttributeAggregation()

    /**
     * Used by the `UNIQUE_VALUE` aggregation function.
     *
     * If there are multiple values for the field used by the aggregation, the value for this
     * property will be returned instead. Defaults to '*'.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-attributeaggregationfunction.html#cfn-quicksight-analysis-attributeaggregationfunction-valueformultiplevalues)
     */
    public fun valueForMultipleValues(): String? = unwrap(this).getValueForMultipleValues()

    /**
     * A builder for [AttributeAggregationFunctionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param simpleAttributeAggregation The built-in aggregation functions for attributes.
       * * `UNIQUE_VALUE` : Returns the unique value for a field, aggregated by the dimension
       * fields.
       */
      public fun simpleAttributeAggregation(simpleAttributeAggregation: String)

      /**
       * @param valueForMultipleValues Used by the `UNIQUE_VALUE` aggregation function.
       * If there are multiple values for the field used by the aggregation, the value for this
       * property will be returned instead. Defaults to '*'.
       */
      public fun valueForMultipleValues(valueForMultipleValues: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AttributeAggregationFunctionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AttributeAggregationFunctionProperty.builder()

      /**
       * @param simpleAttributeAggregation The built-in aggregation functions for attributes.
       * * `UNIQUE_VALUE` : Returns the unique value for a field, aggregated by the dimension
       * fields.
       */
      override fun simpleAttributeAggregation(simpleAttributeAggregation: String) {
        cdkBuilder.simpleAttributeAggregation(simpleAttributeAggregation)
      }

      /**
       * @param valueForMultipleValues Used by the `UNIQUE_VALUE` aggregation function.
       * If there are multiple values for the field used by the aggregation, the value for this
       * property will be returned instead. Defaults to '*'.
       */
      override fun valueForMultipleValues(valueForMultipleValues: String) {
        cdkBuilder.valueForMultipleValues(valueForMultipleValues)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AttributeAggregationFunctionProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AttributeAggregationFunctionProperty,
    ) : AttributeAggregationFunctionProperty {
      /**
       * The built-in aggregation functions for attributes.
       *
       * * `UNIQUE_VALUE` : Returns the unique value for a field, aggregated by the dimension
       * fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-attributeaggregationfunction.html#cfn-quicksight-analysis-attributeaggregationfunction-simpleattributeaggregation)
       */
      override fun simpleAttributeAggregation(): String? =
          unwrap(this).getSimpleAttributeAggregation()

      /**
       * Used by the `UNIQUE_VALUE` aggregation function.
       *
       * If there are multiple values for the field used by the aggregation, the value for this
       * property will be returned instead. Defaults to '*'.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-attributeaggregationfunction.html#cfn-quicksight-analysis-attributeaggregationfunction-valueformultiplevalues)
       */
      override fun valueForMultipleValues(): String? = unwrap(this).getValueForMultipleValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          AttributeAggregationFunctionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AttributeAggregationFunctionProperty):
          AttributeAggregationFunctionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AttributeAggregationFunctionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AttributeAggregationFunctionProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableCellConditionalFormattingProperty {
    /**
     * The field ID of the cell for conditional formatting.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellconditionalformatting.html#cfn-quicksight-analysis-tablecellconditionalformatting-fieldid)
     */
    public fun fieldId(): String

    /**
     * The text format of the cell for conditional formatting.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellconditionalformatting.html#cfn-quicksight-analysis-tablecellconditionalformatting-textformat)
     */
    public fun textFormat(): Any? = unwrap(this).getTextFormat()

    /**
     * A builder for [TableCellConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldId The field ID of the cell for conditional formatting. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param textFormat The text format of the cell for conditional formatting.
       */
      public fun textFormat(textFormat: IResolvable)

      /**
       * @param textFormat The text format of the cell for conditional formatting.
       */
      public fun textFormat(textFormat: TextConditionalFormatProperty)

      /**
       * @param textFormat The text format of the cell for conditional formatting.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e110fe6854b68ace8cf8d20a2f4a1199aff4eda1d22298dbf2f1193aa3c3b780")
      public fun textFormat(textFormat: TextConditionalFormatProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellConditionalFormattingProperty.builder()

      /**
       * @param fieldId The field ID of the cell for conditional formatting. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param textFormat The text format of the cell for conditional formatting.
       */
      override fun textFormat(textFormat: IResolvable) {
        cdkBuilder.textFormat(textFormat.let(IResolvable::unwrap))
      }

      /**
       * @param textFormat The text format of the cell for conditional formatting.
       */
      override fun textFormat(textFormat: TextConditionalFormatProperty) {
        cdkBuilder.textFormat(textFormat.let(TextConditionalFormatProperty::unwrap))
      }

      /**
       * @param textFormat The text format of the cell for conditional formatting.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e110fe6854b68ace8cf8d20a2f4a1199aff4eda1d22298dbf2f1193aa3c3b780")
      override fun textFormat(textFormat: TextConditionalFormatProperty.Builder.() -> Unit): Unit =
          textFormat(TextConditionalFormatProperty(textFormat))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellConditionalFormattingProperty,
    ) : TableCellConditionalFormattingProperty {
      /**
       * The field ID of the cell for conditional formatting.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellconditionalformatting.html#cfn-quicksight-analysis-tablecellconditionalformatting-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The text format of the cell for conditional formatting.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellconditionalformatting.html#cfn-quicksight-analysis-tablecellconditionalformatting-textformat)
       */
      override fun textFormat(): Any? = unwrap(this).getTextFormat()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableCellConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellConditionalFormattingProperty):
          TableCellConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableCellConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface HeatMapSortConfigurationProperty {
    /**
     * The limit on the number of columns that are displayed in a heat map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html#cfn-quicksight-analysis-heatmapsortconfiguration-heatmapcolumnitemslimitconfiguration)
     */
    public fun heatMapColumnItemsLimitConfiguration(): Any? =
        unwrap(this).getHeatMapColumnItemsLimitConfiguration()

    /**
     * The column sort configuration for heat map for columns that aren't a part of a field well.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html#cfn-quicksight-analysis-heatmapsortconfiguration-heatmapcolumnsort)
     */
    public fun heatMapColumnSort(): Any? = unwrap(this).getHeatMapColumnSort()

    /**
     * The limit on the number of rows that are displayed in a heat map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html#cfn-quicksight-analysis-heatmapsortconfiguration-heatmaprowitemslimitconfiguration)
     */
    public fun heatMapRowItemsLimitConfiguration(): Any? =
        unwrap(this).getHeatMapRowItemsLimitConfiguration()

    /**
     * The field sort configuration of the rows fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html#cfn-quicksight-analysis-heatmapsortconfiguration-heatmaprowsort)
     */
    public fun heatMapRowSort(): Any? = unwrap(this).getHeatMapRowSort()

    /**
     * A builder for [HeatMapSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param heatMapColumnItemsLimitConfiguration The limit on the number of columns that are
       * displayed in a heat map.
       */
      public
          fun heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration: IResolvable)

      /**
       * @param heatMapColumnItemsLimitConfiguration The limit on the number of columns that are
       * displayed in a heat map.
       */
      public
          fun heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration: ItemsLimitConfigurationProperty)

      /**
       * @param heatMapColumnItemsLimitConfiguration The limit on the number of columns that are
       * displayed in a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7cff8e8d30a64039460410e4ec3546128da0312e1c5cd67828b1ab666d3d9a8b")
      public
          fun heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param heatMapColumnSort The column sort configuration for heat map for columns that aren't
       * a part of a field well.
       */
      public fun heatMapColumnSort(heatMapColumnSort: IResolvable)

      /**
       * @param heatMapColumnSort The column sort configuration for heat map for columns that aren't
       * a part of a field well.
       */
      public fun heatMapColumnSort(heatMapColumnSort: List<Any>)

      /**
       * @param heatMapColumnSort The column sort configuration for heat map for columns that aren't
       * a part of a field well.
       */
      public fun heatMapColumnSort(vararg heatMapColumnSort: Any)

      /**
       * @param heatMapRowItemsLimitConfiguration The limit on the number of rows that are displayed
       * in a heat map.
       */
      public fun heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration: IResolvable)

      /**
       * @param heatMapRowItemsLimitConfiguration The limit on the number of rows that are displayed
       * in a heat map.
       */
      public
          fun heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration: ItemsLimitConfigurationProperty)

      /**
       * @param heatMapRowItemsLimitConfiguration The limit on the number of rows that are displayed
       * in a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c9f32b7c1ed0379f5ce49e78f48e5f7b84217f6dab49608a538511cab44e2d11")
      public
          fun heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param heatMapRowSort The field sort configuration of the rows fields.
       */
      public fun heatMapRowSort(heatMapRowSort: IResolvable)

      /**
       * @param heatMapRowSort The field sort configuration of the rows fields.
       */
      public fun heatMapRowSort(heatMapRowSort: List<Any>)

      /**
       * @param heatMapRowSort The field sort configuration of the rows fields.
       */
      public fun heatMapRowSort(vararg heatMapRowSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapSortConfigurationProperty.builder()

      /**
       * @param heatMapColumnItemsLimitConfiguration The limit on the number of columns that are
       * displayed in a heat map.
       */
      override
          fun heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration: IResolvable) {
        cdkBuilder.heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param heatMapColumnItemsLimitConfiguration The limit on the number of columns that are
       * displayed in a heat map.
       */
      override
          fun heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param heatMapColumnItemsLimitConfiguration The limit on the number of columns that are
       * displayed in a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7cff8e8d30a64039460410e4ec3546128da0312e1c5cd67828b1ab666d3d9a8b")
      override
          fun heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          heatMapColumnItemsLimitConfiguration(ItemsLimitConfigurationProperty(heatMapColumnItemsLimitConfiguration))

      /**
       * @param heatMapColumnSort The column sort configuration for heat map for columns that aren't
       * a part of a field well.
       */
      override fun heatMapColumnSort(heatMapColumnSort: IResolvable) {
        cdkBuilder.heatMapColumnSort(heatMapColumnSort.let(IResolvable::unwrap))
      }

      /**
       * @param heatMapColumnSort The column sort configuration for heat map for columns that aren't
       * a part of a field well.
       */
      override fun heatMapColumnSort(heatMapColumnSort: List<Any>) {
        cdkBuilder.heatMapColumnSort(heatMapColumnSort)
      }

      /**
       * @param heatMapColumnSort The column sort configuration for heat map for columns that aren't
       * a part of a field well.
       */
      override fun heatMapColumnSort(vararg heatMapColumnSort: Any): Unit =
          heatMapColumnSort(heatMapColumnSort.toList())

      /**
       * @param heatMapRowItemsLimitConfiguration The limit on the number of rows that are displayed
       * in a heat map.
       */
      override
          fun heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration: IResolvable) {
        cdkBuilder.heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param heatMapRowItemsLimitConfiguration The limit on the number of rows that are displayed
       * in a heat map.
       */
      override
          fun heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param heatMapRowItemsLimitConfiguration The limit on the number of rows that are displayed
       * in a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c9f32b7c1ed0379f5ce49e78f48e5f7b84217f6dab49608a538511cab44e2d11")
      override
          fun heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          heatMapRowItemsLimitConfiguration(ItemsLimitConfigurationProperty(heatMapRowItemsLimitConfiguration))

      /**
       * @param heatMapRowSort The field sort configuration of the rows fields.
       */
      override fun heatMapRowSort(heatMapRowSort: IResolvable) {
        cdkBuilder.heatMapRowSort(heatMapRowSort.let(IResolvable::unwrap))
      }

      /**
       * @param heatMapRowSort The field sort configuration of the rows fields.
       */
      override fun heatMapRowSort(heatMapRowSort: List<Any>) {
        cdkBuilder.heatMapRowSort(heatMapRowSort)
      }

      /**
       * @param heatMapRowSort The field sort configuration of the rows fields.
       */
      override fun heatMapRowSort(vararg heatMapRowSort: Any): Unit =
          heatMapRowSort(heatMapRowSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapSortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapSortConfigurationProperty,
    ) : HeatMapSortConfigurationProperty {
      /**
       * The limit on the number of columns that are displayed in a heat map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html#cfn-quicksight-analysis-heatmapsortconfiguration-heatmapcolumnitemslimitconfiguration)
       */
      override fun heatMapColumnItemsLimitConfiguration(): Any? =
          unwrap(this).getHeatMapColumnItemsLimitConfiguration()

      /**
       * The column sort configuration for heat map for columns that aren't a part of a field well.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html#cfn-quicksight-analysis-heatmapsortconfiguration-heatmapcolumnsort)
       */
      override fun heatMapColumnSort(): Any? = unwrap(this).getHeatMapColumnSort()

      /**
       * The limit on the number of rows that are displayed in a heat map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html#cfn-quicksight-analysis-heatmapsortconfiguration-heatmaprowitemslimitconfiguration)
       */
      override fun heatMapRowItemsLimitConfiguration(): Any? =
          unwrap(this).getHeatMapRowItemsLimitConfiguration()

      /**
       * The field sort configuration of the rows fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html#cfn-quicksight-analysis-heatmapsortconfiguration-heatmaprowsort)
       */
      override fun heatMapRowSort(): Any? = unwrap(this).getHeatMapRowSort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): HeatMapSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapSortConfigurationProperty):
          HeatMapSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HeatMapSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapSortConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface CascadingControlSourceProperty {
    /**
     * The column identifier that determines which column to look up for the source sheet control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolsource.html#cfn-quicksight-analysis-cascadingcontrolsource-columntomatch)
     */
    public fun columnToMatch(): Any? = unwrap(this).getColumnToMatch()

    /**
     * The source sheet control ID of a `CascadingControlSource` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolsource.html#cfn-quicksight-analysis-cascadingcontrolsource-sourcesheetcontrolid)
     */
    public fun sourceSheetControlId(): String? = unwrap(this).getSourceSheetControlId()

    /**
     * A builder for [CascadingControlSourceProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param columnToMatch The column identifier that determines which column to look up for the
       * source sheet control.
       */
      public fun columnToMatch(columnToMatch: IResolvable)

      /**
       * @param columnToMatch The column identifier that determines which column to look up for the
       * source sheet control.
       */
      public fun columnToMatch(columnToMatch: ColumnIdentifierProperty)

      /**
       * @param columnToMatch The column identifier that determines which column to look up for the
       * source sheet control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ea561c7342d894be88ce6f701db8629dd79a70c1228c0224915ea1551276bec8")
      public fun columnToMatch(columnToMatch: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param sourceSheetControlId The source sheet control ID of a `CascadingControlSource` .
       */
      public fun sourceSheetControlId(sourceSheetControlId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CascadingControlSourceProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CascadingControlSourceProperty.builder()

      /**
       * @param columnToMatch The column identifier that determines which column to look up for the
       * source sheet control.
       */
      override fun columnToMatch(columnToMatch: IResolvable) {
        cdkBuilder.columnToMatch(columnToMatch.let(IResolvable::unwrap))
      }

      /**
       * @param columnToMatch The column identifier that determines which column to look up for the
       * source sheet control.
       */
      override fun columnToMatch(columnToMatch: ColumnIdentifierProperty) {
        cdkBuilder.columnToMatch(columnToMatch.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param columnToMatch The column identifier that determines which column to look up for the
       * source sheet control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ea561c7342d894be88ce6f701db8629dd79a70c1228c0224915ea1551276bec8")
      override fun columnToMatch(columnToMatch: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          columnToMatch(ColumnIdentifierProperty(columnToMatch))

      /**
       * @param sourceSheetControlId The source sheet control ID of a `CascadingControlSource` .
       */
      override fun sourceSheetControlId(sourceSheetControlId: String) {
        cdkBuilder.sourceSheetControlId(sourceSheetControlId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CascadingControlSourceProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CascadingControlSourceProperty,
    ) : CascadingControlSourceProperty {
      /**
       * The column identifier that determines which column to look up for the source sheet control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolsource.html#cfn-quicksight-analysis-cascadingcontrolsource-columntomatch)
       */
      override fun columnToMatch(): Any? = unwrap(this).getColumnToMatch()

      /**
       * The source sheet control ID of a `CascadingControlSource` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolsource.html#cfn-quicksight-analysis-cascadingcontrolsource-sourcesheetcontrolid)
       */
      override fun sourceSheetControlId(): String? = unwrap(this).getSourceSheetControlId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): CascadingControlSourceProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CascadingControlSourceProperty):
          CascadingControlSourceProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CascadingControlSourceProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CascadingControlSourceProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ScatterPlotVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration settings of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [ScatterPlotVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: ScatterPlotConfigurationProperty)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e7f367c6fb08414f5e37d5e64d3b6a4cee94a452184a8ac9fb0e8fdd2750a65")
      public
          fun chartConfiguration(chartConfiguration: ScatterPlotConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("252640ec45541fa20047ccc07c761a0782fef7645399e5669535e0d631a31065")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1d54eec9acb570b00ab5f28ae29be9a014c849bca25bd0cd2be5968da3b73247")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: ScatterPlotConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(ScatterPlotConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e7f367c6fb08414f5e37d5e64d3b6a4cee94a452184a8ac9fb0e8fdd2750a65")
      override
          fun chartConfiguration(chartConfiguration: ScatterPlotConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(ScatterPlotConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("252640ec45541fa20047ccc07c761a0782fef7645399e5669535e0d631a31065")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1d54eec9acb570b00ab5f28ae29be9a014c849bca25bd0cd2be5968da3b73247")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotVisualProperty,
    ) : ScatterPlotVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration settings of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ScatterPlotVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotVisualProperty):
          ScatterPlotVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ScatterPlotVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotVisualProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface DateTimeFormatConfigurationProperty {
    /**
     * Determines the `DateTime` format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeformatconfiguration.html#cfn-quicksight-analysis-datetimeformatconfiguration-datetimeformat)
     */
    public fun dateTimeFormat(): String? = unwrap(this).getDateTimeFormat()

    /**
     * The options that determine the null value format configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeformatconfiguration.html#cfn-quicksight-analysis-datetimeformatconfiguration-nullvalueformatconfiguration)
     */
    public fun nullValueFormatConfiguration(): Any? = unwrap(this).getNullValueFormatConfiguration()

    /**
     * The formatting configuration for numeric `DateTime` fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeformatconfiguration.html#cfn-quicksight-analysis-datetimeformatconfiguration-numericformatconfiguration)
     */
    public fun numericFormatConfiguration(): Any? = unwrap(this).getNumericFormatConfiguration()

    /**
     * A builder for [DateTimeFormatConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dateTimeFormat Determines the `DateTime` format.
       */
      public fun dateTimeFormat(dateTimeFormat: String)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      public fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("33416c8169daec222a5c8c2de1ad47b13713f304f2f940d16a3c98cad370798c")
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param numericFormatConfiguration The formatting configuration for numeric `DateTime`
       * fields.
       */
      public fun numericFormatConfiguration(numericFormatConfiguration: IResolvable)

      /**
       * @param numericFormatConfiguration The formatting configuration for numeric `DateTime`
       * fields.
       */
      public
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty)

      /**
       * @param numericFormatConfiguration The formatting configuration for numeric `DateTime`
       * fields.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0ad510f9c61a530a8de63092dd345b4128d8932ac59224a309f0be2161f6b68d")
      public
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeFormatConfigurationProperty.builder()

      /**
       * @param dateTimeFormat Determines the `DateTime` format.
       */
      override fun dateTimeFormat(dateTimeFormat: String) {
        cdkBuilder.dateTimeFormat(dateTimeFormat)
      }

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      override fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(NullValueFormatConfigurationProperty::unwrap))
      }

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("33416c8169daec222a5c8c2de1ad47b13713f304f2f940d16a3c98cad370798c")
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          nullValueFormatConfiguration(NullValueFormatConfigurationProperty(nullValueFormatConfiguration))

      /**
       * @param numericFormatConfiguration The formatting configuration for numeric `DateTime`
       * fields.
       */
      override fun numericFormatConfiguration(numericFormatConfiguration: IResolvable) {
        cdkBuilder.numericFormatConfiguration(numericFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param numericFormatConfiguration The formatting configuration for numeric `DateTime`
       * fields.
       */
      override
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty) {
        cdkBuilder.numericFormatConfiguration(numericFormatConfiguration.let(NumericFormatConfigurationProperty::unwrap))
      }

      /**
       * @param numericFormatConfiguration The formatting configuration for numeric `DateTime`
       * fields.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0ad510f9c61a530a8de63092dd345b4128d8932ac59224a309f0be2161f6b68d")
      override
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          numericFormatConfiguration(NumericFormatConfigurationProperty(numericFormatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeFormatConfigurationProperty,
    ) : DateTimeFormatConfigurationProperty {
      /**
       * Determines the `DateTime` format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeformatconfiguration.html#cfn-quicksight-analysis-datetimeformatconfiguration-datetimeformat)
       */
      override fun dateTimeFormat(): String? = unwrap(this).getDateTimeFormat()

      /**
       * The options that determine the null value format configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeformatconfiguration.html#cfn-quicksight-analysis-datetimeformatconfiguration-nullvalueformatconfiguration)
       */
      override fun nullValueFormatConfiguration(): Any? =
          unwrap(this).getNullValueFormatConfiguration()

      /**
       * The formatting configuration for numeric `DateTime` fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeformatconfiguration.html#cfn-quicksight-analysis-datetimeformatconfiguration-numericformatconfiguration)
       */
      override fun numericFormatConfiguration(): Any? = unwrap(this).getNumericFormatConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DateTimeFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeFormatConfigurationProperty):
          DateTimeFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimeFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeFormatConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SectionStyleProperty {
    /**
     * The height of a section.
     *
     * Heights can only be defined for header and footer sections. The default height margin is 0.5
     * inches.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionstyle.html#cfn-quicksight-analysis-sectionstyle-height)
     */
    public fun height(): String? = unwrap(this).getHeight()

    /**
     * The spacing between section content and its top, bottom, left, and right edges.
     *
     * There is no padding by default.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionstyle.html#cfn-quicksight-analysis-sectionstyle-padding)
     */
    public fun padding(): Any? = unwrap(this).getPadding()

    /**
     * A builder for [SectionStyleProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param height The height of a section.
       * Heights can only be defined for header and footer sections. The default height margin is
       * 0.5 inches.
       */
      public fun height(height: String)

      /**
       * @param padding The spacing between section content and its top, bottom, left, and right
       * edges.
       * There is no padding by default.
       */
      public fun padding(padding: IResolvable)

      /**
       * @param padding The spacing between section content and its top, bottom, left, and right
       * edges.
       * There is no padding by default.
       */
      public fun padding(padding: SpacingProperty)

      /**
       * @param padding The spacing between section content and its top, bottom, left, and right
       * edges.
       * There is no padding by default.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d12b4ddc613837432750cc008cb86de3b2e32f88d232457d0cac9a75babe48da")
      public fun padding(padding: SpacingProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionStyleProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionStyleProperty.builder()

      /**
       * @param height The height of a section.
       * Heights can only be defined for header and footer sections. The default height margin is
       * 0.5 inches.
       */
      override fun height(height: String) {
        cdkBuilder.height(height)
      }

      /**
       * @param padding The spacing between section content and its top, bottom, left, and right
       * edges.
       * There is no padding by default.
       */
      override fun padding(padding: IResolvable) {
        cdkBuilder.padding(padding.let(IResolvable::unwrap))
      }

      /**
       * @param padding The spacing between section content and its top, bottom, left, and right
       * edges.
       * There is no padding by default.
       */
      override fun padding(padding: SpacingProperty) {
        cdkBuilder.padding(padding.let(SpacingProperty::unwrap))
      }

      /**
       * @param padding The spacing between section content and its top, bottom, left, and right
       * edges.
       * There is no padding by default.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d12b4ddc613837432750cc008cb86de3b2e32f88d232457d0cac9a75babe48da")
      override fun padding(padding: SpacingProperty.Builder.() -> Unit): Unit =
          padding(SpacingProperty(padding))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionStyleProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionStyleProperty,
    ) : SectionStyleProperty {
      /**
       * The height of a section.
       *
       * Heights can only be defined for header and footer sections. The default height margin is
       * 0.5 inches.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionstyle.html#cfn-quicksight-analysis-sectionstyle-height)
       */
      override fun height(): String? = unwrap(this).getHeight()

      /**
       * The spacing between section content and its top, bottom, left, and right edges.
       *
       * There is no padding by default.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionstyle.html#cfn-quicksight-analysis-sectionstyle-padding)
       */
      override fun padding(): Any? = unwrap(this).getPadding()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SectionStyleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionStyleProperty):
          SectionStyleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionStyleProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionStyleProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface TextConditionalFormatProperty {
    /**
     * The conditional formatting for the text background color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textconditionalformat.html#cfn-quicksight-analysis-textconditionalformat-backgroundcolor)
     */
    public fun backgroundColor(): Any? = unwrap(this).getBackgroundColor()

    /**
     * The conditional formatting for the icon.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textconditionalformat.html#cfn-quicksight-analysis-textconditionalformat-icon)
     */
    public fun icon(): Any? = unwrap(this).getIcon()

    /**
     * The conditional formatting for the text color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textconditionalformat.html#cfn-quicksight-analysis-textconditionalformat-textcolor)
     */
    public fun textColor(): Any? = unwrap(this).getTextColor()

    /**
     * A builder for [TextConditionalFormatProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param backgroundColor The conditional formatting for the text background color.
       */
      public fun backgroundColor(backgroundColor: IResolvable)

      /**
       * @param backgroundColor The conditional formatting for the text background color.
       */
      public fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty)

      /**
       * @param backgroundColor The conditional formatting for the text background color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("037f1c092c7d01a11dc608be4d7dec21362597e64ff8b8c02c1d628ee138a20e")
      public
          fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit)

      /**
       * @param icon The conditional formatting for the icon.
       */
      public fun icon(icon: IResolvable)

      /**
       * @param icon The conditional formatting for the icon.
       */
      public fun icon(icon: ConditionalFormattingIconProperty)

      /**
       * @param icon The conditional formatting for the icon.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1ec24c16776a7abe7b17c8d85b71441cb074d2103ce918d2842b8e78b7fc210e")
      public fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit)

      /**
       * @param textColor The conditional formatting for the text color.
       */
      public fun textColor(textColor: IResolvable)

      /**
       * @param textColor The conditional formatting for the text color.
       */
      public fun textColor(textColor: ConditionalFormattingColorProperty)

      /**
       * @param textColor The conditional formatting for the text color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fac5c29f6ccaca609110f14c9234ddf0484c9f2884016a3cf377d271de32ef8b")
      public fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextConditionalFormatProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextConditionalFormatProperty.builder()

      /**
       * @param backgroundColor The conditional formatting for the text background color.
       */
      override fun backgroundColor(backgroundColor: IResolvable) {
        cdkBuilder.backgroundColor(backgroundColor.let(IResolvable::unwrap))
      }

      /**
       * @param backgroundColor The conditional formatting for the text background color.
       */
      override fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty) {
        cdkBuilder.backgroundColor(backgroundColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      /**
       * @param backgroundColor The conditional formatting for the text background color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("037f1c092c7d01a11dc608be4d7dec21362597e64ff8b8c02c1d628ee138a20e")
      override
          fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit):
          Unit = backgroundColor(ConditionalFormattingColorProperty(backgroundColor))

      /**
       * @param icon The conditional formatting for the icon.
       */
      override fun icon(icon: IResolvable) {
        cdkBuilder.icon(icon.let(IResolvable::unwrap))
      }

      /**
       * @param icon The conditional formatting for the icon.
       */
      override fun icon(icon: ConditionalFormattingIconProperty) {
        cdkBuilder.icon(icon.let(ConditionalFormattingIconProperty::unwrap))
      }

      /**
       * @param icon The conditional formatting for the icon.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1ec24c16776a7abe7b17c8d85b71441cb074d2103ce918d2842b8e78b7fc210e")
      override fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit): Unit =
          icon(ConditionalFormattingIconProperty(icon))

      /**
       * @param textColor The conditional formatting for the text color.
       */
      override fun textColor(textColor: IResolvable) {
        cdkBuilder.textColor(textColor.let(IResolvable::unwrap))
      }

      /**
       * @param textColor The conditional formatting for the text color.
       */
      override fun textColor(textColor: ConditionalFormattingColorProperty) {
        cdkBuilder.textColor(textColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      /**
       * @param textColor The conditional formatting for the text color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fac5c29f6ccaca609110f14c9234ddf0484c9f2884016a3cf377d271de32ef8b")
      override fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit): Unit
          = textColor(ConditionalFormattingColorProperty(textColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextConditionalFormatProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextConditionalFormatProperty,
    ) : TextConditionalFormatProperty {
      /**
       * The conditional formatting for the text background color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textconditionalformat.html#cfn-quicksight-analysis-textconditionalformat-backgroundcolor)
       */
      override fun backgroundColor(): Any? = unwrap(this).getBackgroundColor()

      /**
       * The conditional formatting for the icon.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textconditionalformat.html#cfn-quicksight-analysis-textconditionalformat-icon)
       */
      override fun icon(): Any? = unwrap(this).getIcon()

      /**
       * The conditional formatting for the text color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textconditionalformat.html#cfn-quicksight-analysis-textconditionalformat-textcolor)
       */
      override fun textColor(): Any? = unwrap(this).getTextColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TextConditionalFormatProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TextConditionalFormatProperty):
          TextConditionalFormatProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TextConditionalFormatProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextConditionalFormatProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableFieldCustomIconContentProperty {
    /**
     * The icon set type (link) of the custom icon content for table URL link content.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomiconcontent.html#cfn-quicksight-analysis-tablefieldcustomiconcontent-icon)
     */
    public fun icon(): String? = unwrap(this).getIcon()

    /**
     * A builder for [TableFieldCustomIconContentProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param icon The icon set type (link) of the custom icon content for table URL link content.
       */
      public fun icon(icon: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldCustomIconContentProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldCustomIconContentProperty.builder()

      /**
       * @param icon The icon set type (link) of the custom icon content for table URL link content.
       */
      override fun icon(icon: String) {
        cdkBuilder.icon(icon)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldCustomIconContentProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldCustomIconContentProperty,
    ) : TableFieldCustomIconContentProperty {
      /**
       * The icon set type (link) of the custom icon content for table URL link content.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomiconcontent.html#cfn-quicksight-analysis-tablefieldcustomiconcontent-icon)
       */
      override fun icon(): String? = unwrap(this).getIcon()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableFieldCustomIconContentProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldCustomIconContentProperty):
          TableFieldCustomIconContentProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldCustomIconContentProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldCustomIconContentProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TextFieldControlDisplayOptionsProperty {
    /**
     * The configuration of info icon label options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textfieldcontroldisplayoptions.html#cfn-quicksight-analysis-textfieldcontroldisplayoptions-infoiconlabeloptions)
     */
    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    /**
     * The configuration of the placeholder options in a text field control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textfieldcontroldisplayoptions.html#cfn-quicksight-analysis-textfieldcontroldisplayoptions-placeholderoptions)
     */
    public fun placeholderOptions(): Any? = unwrap(this).getPlaceholderOptions()

    /**
     * The options to configure the title visibility, name, and font size.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textfieldcontroldisplayoptions.html#cfn-quicksight-analysis-textfieldcontroldisplayoptions-titleoptions)
     */
    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    /**
     * A builder for [TextFieldControlDisplayOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a68640da12077d39bcca62a43159d2494393b1db0b7f1c8f36da06bfd1d11308")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param placeholderOptions The configuration of the placeholder options in a text field
       * control.
       */
      public fun placeholderOptions(placeholderOptions: IResolvable)

      /**
       * @param placeholderOptions The configuration of the placeholder options in a text field
       * control.
       */
      public fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty)

      /**
       * @param placeholderOptions The configuration of the placeholder options in a text field
       * control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("221c28db38da728c9f9f25d4b3ae14d59f202a3589aed8faf6da909a33573705")
      public
          fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty.Builder.() -> Unit)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: IResolvable)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: LabelOptionsProperty)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("92215e68b7af79d50d29f99c05ace1ac4d0a85aabcd0cb17fb4f75b4c89d379b")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextFieldControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextFieldControlDisplayOptionsProperty.builder()

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a68640da12077d39bcca62a43159d2494393b1db0b7f1c8f36da06bfd1d11308")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      /**
       * @param placeholderOptions The configuration of the placeholder options in a text field
       * control.
       */
      override fun placeholderOptions(placeholderOptions: IResolvable) {
        cdkBuilder.placeholderOptions(placeholderOptions.let(IResolvable::unwrap))
      }

      /**
       * @param placeholderOptions The configuration of the placeholder options in a text field
       * control.
       */
      override fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty) {
        cdkBuilder.placeholderOptions(placeholderOptions.let(TextControlPlaceholderOptionsProperty::unwrap))
      }

      /**
       * @param placeholderOptions The configuration of the placeholder options in a text field
       * control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("221c28db38da728c9f9f25d4b3ae14d59f202a3589aed8faf6da909a33573705")
      override
          fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty.Builder.() -> Unit):
          Unit = placeholderOptions(TextControlPlaceholderOptionsProperty(placeholderOptions))

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("92215e68b7af79d50d29f99c05ace1ac4d0a85aabcd0cb17fb4f75b4c89d379b")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextFieldControlDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextFieldControlDisplayOptionsProperty,
    ) : TextFieldControlDisplayOptionsProperty {
      /**
       * The configuration of info icon label options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textfieldcontroldisplayoptions.html#cfn-quicksight-analysis-textfieldcontroldisplayoptions-infoiconlabeloptions)
       */
      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      /**
       * The configuration of the placeholder options in a text field control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textfieldcontroldisplayoptions.html#cfn-quicksight-analysis-textfieldcontroldisplayoptions-placeholderoptions)
       */
      override fun placeholderOptions(): Any? = unwrap(this).getPlaceholderOptions()

      /**
       * The options to configure the title visibility, name, and font size.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textfieldcontroldisplayoptions.html#cfn-quicksight-analysis-textfieldcontroldisplayoptions-titleoptions)
       */
      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TextFieldControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TextFieldControlDisplayOptionsProperty):
          TextFieldControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TextFieldControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextFieldControlDisplayOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface VisualSubtitleLabelOptionsProperty {
    /**
     * The long text format of the subtitle label, such as plain text or rich text.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualsubtitlelabeloptions.html#cfn-quicksight-analysis-visualsubtitlelabeloptions-formattext)
     */
    public fun formatText(): Any? = unwrap(this).getFormatText()

    /**
     * The visibility of the subtitle label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualsubtitlelabeloptions.html#cfn-quicksight-analysis-visualsubtitlelabeloptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [VisualSubtitleLabelOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param formatText The long text format of the subtitle label, such as plain text or rich
       * text.
       */
      public fun formatText(formatText: IResolvable)

      /**
       * @param formatText The long text format of the subtitle label, such as plain text or rich
       * text.
       */
      public fun formatText(formatText: LongFormatTextProperty)

      /**
       * @param formatText The long text format of the subtitle label, such as plain text or rich
       * text.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de2436c42f3acef82bc3acd67e47bde754bc35522a7915b0c7310f26bad3122b")
      public fun formatText(formatText: LongFormatTextProperty.Builder.() -> Unit)

      /**
       * @param visibility The visibility of the subtitle label.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualSubtitleLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualSubtitleLabelOptionsProperty.builder()

      /**
       * @param formatText The long text format of the subtitle label, such as plain text or rich
       * text.
       */
      override fun formatText(formatText: IResolvable) {
        cdkBuilder.formatText(formatText.let(IResolvable::unwrap))
      }

      /**
       * @param formatText The long text format of the subtitle label, such as plain text or rich
       * text.
       */
      override fun formatText(formatText: LongFormatTextProperty) {
        cdkBuilder.formatText(formatText.let(LongFormatTextProperty::unwrap))
      }

      /**
       * @param formatText The long text format of the subtitle label, such as plain text or rich
       * text.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de2436c42f3acef82bc3acd67e47bde754bc35522a7915b0c7310f26bad3122b")
      override fun formatText(formatText: LongFormatTextProperty.Builder.() -> Unit): Unit =
          formatText(LongFormatTextProperty(formatText))

      /**
       * @param visibility The visibility of the subtitle label.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualSubtitleLabelOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualSubtitleLabelOptionsProperty,
    ) : VisualSubtitleLabelOptionsProperty {
      /**
       * The long text format of the subtitle label, such as plain text or rich text.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualsubtitlelabeloptions.html#cfn-quicksight-analysis-visualsubtitlelabeloptions-formattext)
       */
      override fun formatText(): Any? = unwrap(this).getFormatText()

      /**
       * The visibility of the subtitle label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualsubtitlelabeloptions.html#cfn-quicksight-analysis-visualsubtitlelabeloptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          VisualSubtitleLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualSubtitleLabelOptionsProperty):
          VisualSubtitleLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisualSubtitleLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualSubtitleLabelOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SecondaryValueOptionsProperty {
    /**
     * Determines the visibility of the secondary value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-secondaryvalueoptions.html#cfn-quicksight-analysis-secondaryvalueoptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [SecondaryValueOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility Determines the visibility of the secondary value.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SecondaryValueOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SecondaryValueOptionsProperty.builder()

      /**
       * @param visibility Determines the visibility of the secondary value.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SecondaryValueOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SecondaryValueOptionsProperty,
    ) : SecondaryValueOptionsProperty {
      /**
       * Determines the visibility of the secondary value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-secondaryvalueoptions.html#cfn-quicksight-analysis-secondaryvalueoptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SecondaryValueOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SecondaryValueOptionsProperty):
          SecondaryValueOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SecondaryValueOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SecondaryValueOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface NumericFormatConfigurationProperty {
    /**
     * The options that determine the currency display format configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericformatconfiguration.html#cfn-quicksight-analysis-numericformatconfiguration-currencydisplayformatconfiguration)
     */
    public fun currencyDisplayFormatConfiguration(): Any? =
        unwrap(this).getCurrencyDisplayFormatConfiguration()

    /**
     * The options that determine the number display format configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericformatconfiguration.html#cfn-quicksight-analysis-numericformatconfiguration-numberdisplayformatconfiguration)
     */
    public fun numberDisplayFormatConfiguration(): Any? =
        unwrap(this).getNumberDisplayFormatConfiguration()

    /**
     * The options that determine the percentage display format configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericformatconfiguration.html#cfn-quicksight-analysis-numericformatconfiguration-percentagedisplayformatconfiguration)
     */
    public fun percentageDisplayFormatConfiguration(): Any? =
        unwrap(this).getPercentageDisplayFormatConfiguration()

    /**
     * A builder for [NumericFormatConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param currencyDisplayFormatConfiguration The options that determine the currency display
       * format configuration.
       */
      public fun currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration: IResolvable)

      /**
       * @param currencyDisplayFormatConfiguration The options that determine the currency display
       * format configuration.
       */
      public
          fun currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration: CurrencyDisplayFormatConfigurationProperty)

      /**
       * @param currencyDisplayFormatConfiguration The options that determine the currency display
       * format configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("16ce29b3c3d0a3af0f83e2db19aabfff0af950e6fea3fdf1f4189329d49c5d13")
      public
          fun currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration: CurrencyDisplayFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param numberDisplayFormatConfiguration The options that determine the number display
       * format configuration.
       */
      public fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: IResolvable)

      /**
       * @param numberDisplayFormatConfiguration The options that determine the number display
       * format configuration.
       */
      public
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty)

      /**
       * @param numberDisplayFormatConfiguration The options that determine the number display
       * format configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8c936f17bfc35f3f511b2cff20a89aaf26f7d36fb7f28dbdbb11a9d11082f7d1")
      public
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param percentageDisplayFormatConfiguration The options that determine the percentage
       * display format configuration.
       */
      public
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: IResolvable)

      /**
       * @param percentageDisplayFormatConfiguration The options that determine the percentage
       * display format configuration.
       */
      public
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty)

      /**
       * @param percentageDisplayFormatConfiguration The options that determine the percentage
       * display format configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3d83ce43ef3147bfaeb7cf84440051ef45f0adbdcec57da0070089e53d610e3e")
      public
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericFormatConfigurationProperty.builder()

      /**
       * @param currencyDisplayFormatConfiguration The options that determine the currency display
       * format configuration.
       */
      override
          fun currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration: IResolvable) {
        cdkBuilder.currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param currencyDisplayFormatConfiguration The options that determine the currency display
       * format configuration.
       */
      override
          fun currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration: CurrencyDisplayFormatConfigurationProperty) {
        cdkBuilder.currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration.let(CurrencyDisplayFormatConfigurationProperty::unwrap))
      }

      /**
       * @param currencyDisplayFormatConfiguration The options that determine the currency display
       * format configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("16ce29b3c3d0a3af0f83e2db19aabfff0af950e6fea3fdf1f4189329d49c5d13")
      override
          fun currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration: CurrencyDisplayFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty(currencyDisplayFormatConfiguration))

      /**
       * @param numberDisplayFormatConfiguration The options that determine the number display
       * format configuration.
       */
      override fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: IResolvable) {
        cdkBuilder.numberDisplayFormatConfiguration(numberDisplayFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param numberDisplayFormatConfiguration The options that determine the number display
       * format configuration.
       */
      override
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty) {
        cdkBuilder.numberDisplayFormatConfiguration(numberDisplayFormatConfiguration.let(NumberDisplayFormatConfigurationProperty::unwrap))
      }

      /**
       * @param numberDisplayFormatConfiguration The options that determine the number display
       * format configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8c936f17bfc35f3f511b2cff20a89aaf26f7d36fb7f28dbdbb11a9d11082f7d1")
      override
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty(numberDisplayFormatConfiguration))

      /**
       * @param percentageDisplayFormatConfiguration The options that determine the percentage
       * display format configuration.
       */
      override
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: IResolvable) {
        cdkBuilder.percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param percentageDisplayFormatConfiguration The options that determine the percentage
       * display format configuration.
       */
      override
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty) {
        cdkBuilder.percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration.let(PercentageDisplayFormatConfigurationProperty::unwrap))
      }

      /**
       * @param percentageDisplayFormatConfiguration The options that determine the percentage
       * display format configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3d83ce43ef3147bfaeb7cf84440051ef45f0adbdcec57da0070089e53d610e3e")
      override
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty(percentageDisplayFormatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericFormatConfigurationProperty,
    ) : NumericFormatConfigurationProperty {
      /**
       * The options that determine the currency display format configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericformatconfiguration.html#cfn-quicksight-analysis-numericformatconfiguration-currencydisplayformatconfiguration)
       */
      override fun currencyDisplayFormatConfiguration(): Any? =
          unwrap(this).getCurrencyDisplayFormatConfiguration()

      /**
       * The options that determine the number display format configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericformatconfiguration.html#cfn-quicksight-analysis-numericformatconfiguration-numberdisplayformatconfiguration)
       */
      override fun numberDisplayFormatConfiguration(): Any? =
          unwrap(this).getNumberDisplayFormatConfiguration()

      /**
       * The options that determine the percentage display format configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericformatconfiguration.html#cfn-quicksight-analysis-numericformatconfiguration-percentagedisplayformatconfiguration)
       */
      override fun percentageDisplayFormatConfiguration(): Any? =
          unwrap(this).getPercentageDisplayFormatConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          NumericFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericFormatConfigurationProperty):
          NumericFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericFormatConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface CategoryFilterProperty {
    /**
     * The column that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilter.html#cfn-quicksight-analysis-categoryfilter-column)
     */
    public fun column(): Any

    /**
     * The configuration for a `CategoryFilter` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilter.html#cfn-quicksight-analysis-categoryfilter-configuration)
     */
    public fun configuration(): Any

    /**
     * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilter.html#cfn-quicksight-analysis-categoryfilter-filterid)
     */
    public fun filterId(): String

    /**
     * A builder for [CategoryFilterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("67b54fbc97aa1b4ff44e703ad7459fb0f3a6261dd57c01ab958356b88783b255")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param configuration The configuration for a `CategoryFilter` . 
       */
      public fun configuration(configuration: IResolvable)

      /**
       * @param configuration The configuration for a `CategoryFilter` . 
       */
      public fun configuration(configuration: CategoryFilterConfigurationProperty)

      /**
       * @param configuration The configuration for a `CategoryFilter` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d80f598a2dc07700e16a2570975c5e2400dd19d628b697686ff6ee5e035680c6")
      public
          fun configuration(configuration: CategoryFilterConfigurationProperty.Builder.() -> Unit)

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      public fun filterId(filterId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryFilterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryFilterProperty.builder()

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("67b54fbc97aa1b4ff44e703ad7459fb0f3a6261dd57c01ab958356b88783b255")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param configuration The configuration for a `CategoryFilter` . 
       */
      override fun configuration(configuration: IResolvable) {
        cdkBuilder.configuration(configuration.let(IResolvable::unwrap))
      }

      /**
       * @param configuration The configuration for a `CategoryFilter` . 
       */
      override fun configuration(configuration: CategoryFilterConfigurationProperty) {
        cdkBuilder.configuration(configuration.let(CategoryFilterConfigurationProperty::unwrap))
      }

      /**
       * @param configuration The configuration for a `CategoryFilter` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d80f598a2dc07700e16a2570975c5e2400dd19d628b697686ff6ee5e035680c6")
      override
          fun configuration(configuration: CategoryFilterConfigurationProperty.Builder.() -> Unit):
          Unit = configuration(CategoryFilterConfigurationProperty(configuration))

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryFilterProperty,
    ) : CategoryFilterProperty {
      /**
       * The column that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilter.html#cfn-quicksight-analysis-categoryfilter-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The configuration for a `CategoryFilter` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilter.html#cfn-quicksight-analysis-categoryfilter-configuration)
       */
      override fun configuration(): Any = unwrap(this).getConfiguration()

      /**
       * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilter.html#cfn-quicksight-analysis-categoryfilter-filterid)
       */
      override fun filterId(): String = unwrap(this).getFilterId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): CategoryFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryFilterProperty):
          CategoryFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CategoryFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryFilterProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface ScatterPlotUnaggregatedFieldWellsProperty {
    /**
     * The category field well of a scatter plot.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-category)
     */
    public fun category(): Any? = unwrap(this).getCategory()

    /**
     * The label field well of a scatter plot.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-label)
     */
    public fun label(): Any? = unwrap(this).getLabel()

    /**
     * The size field well of a scatter plot.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-size)
     */
    public fun size(): Any? = unwrap(this).getSize()

    /**
     * The x-axis field well of a scatter plot.
     *
     * The x-axis is a dimension field and cannot be aggregated.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-xaxis)
     */
    public fun xAxis(): Any? = unwrap(this).getXAxis()

    /**
     * The y-axis field well of a scatter plot.
     *
     * The y-axis is a dimension field and cannot be aggregated.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-yaxis)
     */
    public fun yAxis(): Any? = unwrap(this).getYAxis()

    /**
     * A builder for [ScatterPlotUnaggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param category The category field well of a scatter plot.
       */
      public fun category(category: IResolvable)

      /**
       * @param category The category field well of a scatter plot.
       */
      public fun category(category: List<Any>)

      /**
       * @param category The category field well of a scatter plot.
       */
      public fun category(vararg category: Any)

      /**
       * @param label The label field well of a scatter plot.
       */
      public fun label(label: IResolvable)

      /**
       * @param label The label field well of a scatter plot.
       */
      public fun label(label: List<Any>)

      /**
       * @param label The label field well of a scatter plot.
       */
      public fun label(vararg label: Any)

      /**
       * @param size The size field well of a scatter plot.
       */
      public fun size(size: IResolvable)

      /**
       * @param size The size field well of a scatter plot.
       */
      public fun size(size: List<Any>)

      /**
       * @param size The size field well of a scatter plot.
       */
      public fun size(vararg size: Any)

      /**
       * @param xAxis The x-axis field well of a scatter plot.
       * The x-axis is a dimension field and cannot be aggregated.
       */
      public fun xAxis(xAxis: IResolvable)

      /**
       * @param xAxis The x-axis field well of a scatter plot.
       * The x-axis is a dimension field and cannot be aggregated.
       */
      public fun xAxis(xAxis: List<Any>)

      /**
       * @param xAxis The x-axis field well of a scatter plot.
       * The x-axis is a dimension field and cannot be aggregated.
       */
      public fun xAxis(vararg xAxis: Any)

      /**
       * @param yAxis The y-axis field well of a scatter plot.
       * The y-axis is a dimension field and cannot be aggregated.
       */
      public fun yAxis(yAxis: IResolvable)

      /**
       * @param yAxis The y-axis field well of a scatter plot.
       * The y-axis is a dimension field and cannot be aggregated.
       */
      public fun yAxis(yAxis: List<Any>)

      /**
       * @param yAxis The y-axis field well of a scatter plot.
       * The y-axis is a dimension field and cannot be aggregated.
       */
      public fun yAxis(vararg yAxis: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotUnaggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotUnaggregatedFieldWellsProperty.builder()

      /**
       * @param category The category field well of a scatter plot.
       */
      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      /**
       * @param category The category field well of a scatter plot.
       */
      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      /**
       * @param category The category field well of a scatter plot.
       */
      override fun category(vararg category: Any): Unit = category(category.toList())

      /**
       * @param label The label field well of a scatter plot.
       */
      override fun label(label: IResolvable) {
        cdkBuilder.label(label.let(IResolvable::unwrap))
      }

      /**
       * @param label The label field well of a scatter plot.
       */
      override fun label(label: List<Any>) {
        cdkBuilder.label(label)
      }

      /**
       * @param label The label field well of a scatter plot.
       */
      override fun label(vararg label: Any): Unit = label(label.toList())

      /**
       * @param size The size field well of a scatter plot.
       */
      override fun size(size: IResolvable) {
        cdkBuilder.size(size.let(IResolvable::unwrap))
      }

      /**
       * @param size The size field well of a scatter plot.
       */
      override fun size(size: List<Any>) {
        cdkBuilder.size(size)
      }

      /**
       * @param size The size field well of a scatter plot.
       */
      override fun size(vararg size: Any): Unit = size(size.toList())

      /**
       * @param xAxis The x-axis field well of a scatter plot.
       * The x-axis is a dimension field and cannot be aggregated.
       */
      override fun xAxis(xAxis: IResolvable) {
        cdkBuilder.xAxis(xAxis.let(IResolvable::unwrap))
      }

      /**
       * @param xAxis The x-axis field well of a scatter plot.
       * The x-axis is a dimension field and cannot be aggregated.
       */
      override fun xAxis(xAxis: List<Any>) {
        cdkBuilder.xAxis(xAxis)
      }

      /**
       * @param xAxis The x-axis field well of a scatter plot.
       * The x-axis is a dimension field and cannot be aggregated.
       */
      override fun xAxis(vararg xAxis: Any): Unit = xAxis(xAxis.toList())

      /**
       * @param yAxis The y-axis field well of a scatter plot.
       * The y-axis is a dimension field and cannot be aggregated.
       */
      override fun yAxis(yAxis: IResolvable) {
        cdkBuilder.yAxis(yAxis.let(IResolvable::unwrap))
      }

      /**
       * @param yAxis The y-axis field well of a scatter plot.
       * The y-axis is a dimension field and cannot be aggregated.
       */
      override fun yAxis(yAxis: List<Any>) {
        cdkBuilder.yAxis(yAxis)
      }

      /**
       * @param yAxis The y-axis field well of a scatter plot.
       * The y-axis is a dimension field and cannot be aggregated.
       */
      override fun yAxis(vararg yAxis: Any): Unit = yAxis(yAxis.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotUnaggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotUnaggregatedFieldWellsProperty,
    ) : ScatterPlotUnaggregatedFieldWellsProperty {
      /**
       * The category field well of a scatter plot.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-category)
       */
      override fun category(): Any? = unwrap(this).getCategory()

      /**
       * The label field well of a scatter plot.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-label)
       */
      override fun label(): Any? = unwrap(this).getLabel()

      /**
       * The size field well of a scatter plot.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-size)
       */
      override fun size(): Any? = unwrap(this).getSize()

      /**
       * The x-axis field well of a scatter plot.
       *
       * The x-axis is a dimension field and cannot be aggregated.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-xaxis)
       */
      override fun xAxis(): Any? = unwrap(this).getXAxis()

      /**
       * The y-axis field well of a scatter plot.
       *
       * The y-axis is a dimension field and cannot be aggregated.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-yaxis)
       */
      override fun yAxis(): Any? = unwrap(this).getYAxis()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ScatterPlotUnaggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotUnaggregatedFieldWellsProperty):
          ScatterPlotUnaggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ScatterPlotUnaggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotUnaggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ColumnSortProperty {
    /**
     * The aggregation function that is defined in the column sort.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnsort.html#cfn-quicksight-analysis-columnsort-aggregationfunction)
     */
    public fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

    /**
     * The sort direction.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnsort.html#cfn-quicksight-analysis-columnsort-direction)
     */
    public fun direction(): String

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnsort.html#cfn-quicksight-analysis-columnsort-sortby)
     */
    public fun sortBy(): Any

    /**
     * A builder for [ColumnSortProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param aggregationFunction The aggregation function that is defined in the column sort.
       */
      public fun aggregationFunction(aggregationFunction: IResolvable)

      /**
       * @param aggregationFunction The aggregation function that is defined in the column sort.
       */
      public fun aggregationFunction(aggregationFunction: AggregationFunctionProperty)

      /**
       * @param aggregationFunction The aggregation function that is defined in the column sort.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e1cc81247bea6dad965dd1f3685f0b50a801bbeb29a800dd09f718acd90c6c08")
      public
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit)

      /**
       * @param direction The sort direction. 
       */
      public fun direction(direction: String)

      /**
       * @param sortBy the value to be set. 
       */
      public fun sortBy(sortBy: IResolvable)

      /**
       * @param sortBy the value to be set. 
       */
      public fun sortBy(sortBy: ColumnIdentifierProperty)

      /**
       * @param sortBy the value to be set. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ecb2b4280d8f0235962c690df5f1501ce7f20fc0172a15f0b2e881a611dc527a")
      public fun sortBy(sortBy: ColumnIdentifierProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnSortProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnSortProperty.builder()

      /**
       * @param aggregationFunction The aggregation function that is defined in the column sort.
       */
      override fun aggregationFunction(aggregationFunction: IResolvable) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(IResolvable::unwrap))
      }

      /**
       * @param aggregationFunction The aggregation function that is defined in the column sort.
       */
      override fun aggregationFunction(aggregationFunction: AggregationFunctionProperty) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(AggregationFunctionProperty::unwrap))
      }

      /**
       * @param aggregationFunction The aggregation function that is defined in the column sort.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e1cc81247bea6dad965dd1f3685f0b50a801bbeb29a800dd09f718acd90c6c08")
      override
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit):
          Unit = aggregationFunction(AggregationFunctionProperty(aggregationFunction))

      /**
       * @param direction The sort direction. 
       */
      override fun direction(direction: String) {
        cdkBuilder.direction(direction)
      }

      /**
       * @param sortBy the value to be set. 
       */
      override fun sortBy(sortBy: IResolvable) {
        cdkBuilder.sortBy(sortBy.let(IResolvable::unwrap))
      }

      /**
       * @param sortBy the value to be set. 
       */
      override fun sortBy(sortBy: ColumnIdentifierProperty) {
        cdkBuilder.sortBy(sortBy.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param sortBy the value to be set. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ecb2b4280d8f0235962c690df5f1501ce7f20fc0172a15f0b2e881a611dc527a")
      override fun sortBy(sortBy: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          sortBy(ColumnIdentifierProperty(sortBy))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnSortProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnSortProperty,
    ) : ColumnSortProperty {
      /**
       * The aggregation function that is defined in the column sort.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnsort.html#cfn-quicksight-analysis-columnsort-aggregationfunction)
       */
      override fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

      /**
       * The sort direction.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnsort.html#cfn-quicksight-analysis-columnsort-direction)
       */
      override fun direction(): String = unwrap(this).getDirection()

      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnsort.html#cfn-quicksight-analysis-columnsort-sortby)
       */
      override fun sortBy(): Any = unwrap(this).getSortBy()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnSortProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnSortProperty):
          ColumnSortProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnSortProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnSortProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface AxisScaleProperty {
    /**
     * The linear axis scale setup.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisscale.html#cfn-quicksight-analysis-axisscale-linear)
     */
    public fun linear(): Any? = unwrap(this).getLinear()

    /**
     * The logarithmic axis scale setup.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisscale.html#cfn-quicksight-analysis-axisscale-logarithmic)
     */
    public fun logarithmic(): Any? = unwrap(this).getLogarithmic()

    /**
     * A builder for [AxisScaleProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param linear The linear axis scale setup.
       */
      public fun linear(linear: IResolvable)

      /**
       * @param linear The linear axis scale setup.
       */
      public fun linear(linear: AxisLinearScaleProperty)

      /**
       * @param linear The linear axis scale setup.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("46243bd33e9ef0ec6dd746dd1eee975c7527cae9f665ca5bae80149db8a019e8")
      public fun linear(linear: AxisLinearScaleProperty.Builder.() -> Unit)

      /**
       * @param logarithmic The logarithmic axis scale setup.
       */
      public fun logarithmic(logarithmic: IResolvable)

      /**
       * @param logarithmic The logarithmic axis scale setup.
       */
      public fun logarithmic(logarithmic: AxisLogarithmicScaleProperty)

      /**
       * @param logarithmic The logarithmic axis scale setup.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ee0145afc338035d9e9e1f0a67e6527070589f65a12e41f20f1db579406faf1d")
      public fun logarithmic(logarithmic: AxisLogarithmicScaleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisScaleProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisScaleProperty.builder()

      /**
       * @param linear The linear axis scale setup.
       */
      override fun linear(linear: IResolvable) {
        cdkBuilder.linear(linear.let(IResolvable::unwrap))
      }

      /**
       * @param linear The linear axis scale setup.
       */
      override fun linear(linear: AxisLinearScaleProperty) {
        cdkBuilder.linear(linear.let(AxisLinearScaleProperty::unwrap))
      }

      /**
       * @param linear The linear axis scale setup.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("46243bd33e9ef0ec6dd746dd1eee975c7527cae9f665ca5bae80149db8a019e8")
      override fun linear(linear: AxisLinearScaleProperty.Builder.() -> Unit): Unit =
          linear(AxisLinearScaleProperty(linear))

      /**
       * @param logarithmic The logarithmic axis scale setup.
       */
      override fun logarithmic(logarithmic: IResolvable) {
        cdkBuilder.logarithmic(logarithmic.let(IResolvable::unwrap))
      }

      /**
       * @param logarithmic The logarithmic axis scale setup.
       */
      override fun logarithmic(logarithmic: AxisLogarithmicScaleProperty) {
        cdkBuilder.logarithmic(logarithmic.let(AxisLogarithmicScaleProperty::unwrap))
      }

      /**
       * @param logarithmic The logarithmic axis scale setup.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ee0145afc338035d9e9e1f0a67e6527070589f65a12e41f20f1db579406faf1d")
      override fun logarithmic(logarithmic: AxisLogarithmicScaleProperty.Builder.() -> Unit): Unit =
          logarithmic(AxisLogarithmicScaleProperty(logarithmic))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisScaleProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisScaleProperty,
    ) : AxisScaleProperty {
      /**
       * The linear axis scale setup.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisscale.html#cfn-quicksight-analysis-axisscale-linear)
       */
      override fun linear(): Any? = unwrap(this).getLinear()

      /**
       * The logarithmic axis scale setup.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisscale.html#cfn-quicksight-analysis-axisscale-logarithmic)
       */
      override fun logarithmic(): Any? = unwrap(this).getLogarithmic()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AxisScaleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisScaleProperty):
          AxisScaleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisScaleProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisScaleProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface BoxPlotChartConfigurationProperty {
    /**
     * The box plot chart options for a box plot visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-boxplotoptions)
     */
    public fun boxPlotOptions(): Any? = unwrap(this).getBoxPlotOptions()

    /**
     * The label display options (grid line, range, scale, axis step) of a box plot category.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-categoryaxis)
     */
    public fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

    /**
     * The label options (label text, label visibility and sort Icon visibility) of a box plot
     * category.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-categorylabeloptions)
     */
    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    /**
     * The field wells of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-legend)
     */
    public fun legend(): Any? = unwrap(this).getLegend()

    /**
     * The label display options (grid line, range, scale, axis step) of a box plot category.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-primaryyaxisdisplayoptions)
     */
    public fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

    /**
     * The label options (label text, label visibility and sort icon visibility) of a box plot
     * value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-primaryyaxislabeloptions)
     */
    public fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

    /**
     * The reference line setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-referencelines)
     */
    public fun referenceLines(): Any? = unwrap(this).getReferenceLines()

    /**
     * The sort configuration of a `BoxPlotVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The tooltip display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-tooltip)
     */
    public fun tooltip(): Any? = unwrap(this).getTooltip()

    /**
     * The palette (chart color) display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-visualpalette)
     */
    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    /**
     * A builder for [BoxPlotChartConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param boxPlotOptions The box plot chart options for a box plot visual.
       */
      public fun boxPlotOptions(boxPlotOptions: IResolvable)

      /**
       * @param boxPlotOptions The box plot chart options for a box plot visual.
       */
      public fun boxPlotOptions(boxPlotOptions: BoxPlotOptionsProperty)

      /**
       * @param boxPlotOptions The box plot chart options for a box plot visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5a21826088671945864fc2ea540c0bc9710d43f38d9db72f707d0b4d0ecb045d")
      public fun boxPlotOptions(boxPlotOptions: BoxPlotOptionsProperty.Builder.() -> Unit)

      /**
       * @param categoryAxis The label display options (grid line, range, scale, axis step) of a box
       * plot category.
       */
      public fun categoryAxis(categoryAxis: IResolvable)

      /**
       * @param categoryAxis The label display options (grid line, range, scale, axis step) of a box
       * plot category.
       */
      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty)

      /**
       * @param categoryAxis The label display options (grid line, range, scale, axis step) of a box
       * plot category.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cee46a6d1836bfd3015aebdc47d9e7cee6a84fb48671a0e437c23c8689d19080")
      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param categoryLabelOptions The label options (label text, label visibility and sort Icon
       * visibility) of a box plot category.
       */
      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      /**
       * @param categoryLabelOptions The label options (label text, label visibility and sort Icon
       * visibility) of a box plot category.
       */
      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param categoryLabelOptions The label options (label text, label visibility and sort Icon
       * visibility) of a box plot category.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("644b2936754b75e0ca24c1d0b971964909d53b4151a38bc6dab0ab457ae2ebdb")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: BoxPlotFieldWellsProperty)

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9dfb0ea01345ffb4d786756d97d4050c08223cd0a9a4810731dc1169c94ef8e6")
      public fun fieldWells(fieldWells: BoxPlotFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param legend the value to be set.
       */
      public fun legend(legend: IResolvable)

      /**
       * @param legend the value to be set.
       */
      public fun legend(legend: LegendOptionsProperty)

      /**
       * @param legend the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7918a84fafaaf027bfa24e7659aeaf18eecd93574b8e51e1807b96c83d47a314")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      /**
       * @param primaryYAxisDisplayOptions The label display options (grid line, range, scale, axis
       * step) of a box plot category.
       */
      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable)

      /**
       * @param primaryYAxisDisplayOptions The label display options (grid line, range, scale, axis
       * step) of a box plot category.
       */
      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty)

      /**
       * @param primaryYAxisDisplayOptions The label display options (grid line, range, scale, axis
       * step) of a box plot category.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f15130502c81be03eb4790de084898c9cca64cd03f4ed72690b45dec3f9b62da")
      public
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param primaryYAxisLabelOptions The label options (label text, label visibility and sort
       * icon visibility) of a box plot value.
       */
      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable)

      /**
       * @param primaryYAxisLabelOptions The label options (label text, label visibility and sort
       * icon visibility) of a box plot value.
       */
      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param primaryYAxisLabelOptions The label options (label text, label visibility and sort
       * icon visibility) of a box plot value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("51ac867b74d21144ab2a5ceb4bdeebe8b8eeabfe5985d8cf7fc61d3224a437da")
      public
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      public fun referenceLines(referenceLines: IResolvable)

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      public fun referenceLines(referenceLines: List<Any>)

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      public fun referenceLines(vararg referenceLines: Any)

      /**
       * @param sortConfiguration The sort configuration of a `BoxPlotVisual` .
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a `BoxPlotVisual` .
       */
      public fun sortConfiguration(sortConfiguration: BoxPlotSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a `BoxPlotVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf84078049649cabd1eba10d317e40e00824f4c35a96aed39467028dd82bcccf")
      public
          fun sortConfiguration(sortConfiguration: BoxPlotSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: IResolvable)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: TooltipOptionsProperty)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cd01da26b93c1c47682cf957b18e5e404d0146c50d53dd5834cce622071992b3")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      public fun visualPalette(visualPalette: IResolvable)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      public fun visualPalette(visualPalette: VisualPaletteProperty)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b3dc1f71185859fd3ab56f15d393d7f36cd1d66f4879c23aff241ab3ace35b4a")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotChartConfigurationProperty.builder()

      /**
       * @param boxPlotOptions The box plot chart options for a box plot visual.
       */
      override fun boxPlotOptions(boxPlotOptions: IResolvable) {
        cdkBuilder.boxPlotOptions(boxPlotOptions.let(IResolvable::unwrap))
      }

      /**
       * @param boxPlotOptions The box plot chart options for a box plot visual.
       */
      override fun boxPlotOptions(boxPlotOptions: BoxPlotOptionsProperty) {
        cdkBuilder.boxPlotOptions(boxPlotOptions.let(BoxPlotOptionsProperty::unwrap))
      }

      /**
       * @param boxPlotOptions The box plot chart options for a box plot visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5a21826088671945864fc2ea540c0bc9710d43f38d9db72f707d0b4d0ecb045d")
      override fun boxPlotOptions(boxPlotOptions: BoxPlotOptionsProperty.Builder.() -> Unit): Unit =
          boxPlotOptions(BoxPlotOptionsProperty(boxPlotOptions))

      /**
       * @param categoryAxis The label display options (grid line, range, scale, axis step) of a box
       * plot category.
       */
      override fun categoryAxis(categoryAxis: IResolvable) {
        cdkBuilder.categoryAxis(categoryAxis.let(IResolvable::unwrap))
      }

      /**
       * @param categoryAxis The label display options (grid line, range, scale, axis step) of a box
       * plot category.
       */
      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty) {
        cdkBuilder.categoryAxis(categoryAxis.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param categoryAxis The label display options (grid line, range, scale, axis step) of a box
       * plot category.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cee46a6d1836bfd3015aebdc47d9e7cee6a84fb48671a0e437c23c8689d19080")
      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          categoryAxis(AxisDisplayOptionsProperty(categoryAxis))

      /**
       * @param categoryLabelOptions The label options (label text, label visibility and sort Icon
       * visibility) of a box plot category.
       */
      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param categoryLabelOptions The label options (label text, label visibility and sort Icon
       * visibility) of a box plot category.
       */
      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param categoryLabelOptions The label options (label text, label visibility and sort Icon
       * visibility) of a box plot category.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("644b2936754b75e0ca24c1d0b971964909d53b4151a38bc6dab0ab457ae2ebdb")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: BoxPlotFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(BoxPlotFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9dfb0ea01345ffb4d786756d97d4050c08223cd0a9a4810731dc1169c94ef8e6")
      override fun fieldWells(fieldWells: BoxPlotFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(BoxPlotFieldWellsProperty(fieldWells))

      /**
       * @param legend the value to be set.
       */
      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      /**
       * @param legend the value to be set.
       */
      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      /**
       * @param legend the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7918a84fafaaf027bfa24e7659aeaf18eecd93574b8e51e1807b96c83d47a314")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      /**
       * @param primaryYAxisDisplayOptions The label display options (grid line, range, scale, axis
       * step) of a box plot category.
       */
      override fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param primaryYAxisDisplayOptions The label display options (grid line, range, scale, axis
       * step) of a box plot category.
       */
      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param primaryYAxisDisplayOptions The label display options (grid line, range, scale, axis
       * step) of a box plot category.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f15130502c81be03eb4790de084898c9cca64cd03f4ed72690b45dec3f9b62da")
      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisDisplayOptions(AxisDisplayOptionsProperty(primaryYAxisDisplayOptions))

      /**
       * @param primaryYAxisLabelOptions The label options (label text, label visibility and sort
       * icon visibility) of a box plot value.
       */
      override fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param primaryYAxisLabelOptions The label options (label text, label visibility and sort
       * icon visibility) of a box plot value.
       */
      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param primaryYAxisLabelOptions The label options (label text, label visibility and sort
       * icon visibility) of a box plot value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("51ac867b74d21144ab2a5ceb4bdeebe8b8eeabfe5985d8cf7fc61d3224a437da")
      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisLabelOptions(ChartAxisLabelOptionsProperty(primaryYAxisLabelOptions))

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      override fun referenceLines(referenceLines: IResolvable) {
        cdkBuilder.referenceLines(referenceLines.let(IResolvable::unwrap))
      }

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      override fun referenceLines(referenceLines: List<Any>) {
        cdkBuilder.referenceLines(referenceLines)
      }

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      override fun referenceLines(vararg referenceLines: Any): Unit =
          referenceLines(referenceLines.toList())

      /**
       * @param sortConfiguration The sort configuration of a `BoxPlotVisual` .
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a `BoxPlotVisual` .
       */
      override fun sortConfiguration(sortConfiguration: BoxPlotSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(BoxPlotSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a `BoxPlotVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf84078049649cabd1eba10d317e40e00824f4c35a96aed39467028dd82bcccf")
      override
          fun sortConfiguration(sortConfiguration: BoxPlotSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(BoxPlotSortConfigurationProperty(sortConfiguration))

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cd01da26b93c1c47682cf957b18e5e404d0146c50d53dd5834cce622071992b3")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b3dc1f71185859fd3ab56f15d393d7f36cd1d66f4879c23aff241ab3ace35b4a")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotChartConfigurationProperty,
    ) : BoxPlotChartConfigurationProperty {
      /**
       * The box plot chart options for a box plot visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-boxplotoptions)
       */
      override fun boxPlotOptions(): Any? = unwrap(this).getBoxPlotOptions()

      /**
       * The label display options (grid line, range, scale, axis step) of a box plot category.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-categoryaxis)
       */
      override fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

      /**
       * The label options (label text, label visibility and sort Icon visibility) of a box plot
       * category.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-categorylabeloptions)
       */
      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      /**
       * The field wells of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-legend)
       */
      override fun legend(): Any? = unwrap(this).getLegend()

      /**
       * The label display options (grid line, range, scale, axis step) of a box plot category.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-primaryyaxisdisplayoptions)
       */
      override fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

      /**
       * The label options (label text, label visibility and sort icon visibility) of a box plot
       * value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-primaryyaxislabeloptions)
       */
      override fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

      /**
       * The reference line setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-referencelines)
       */
      override fun referenceLines(): Any? = unwrap(this).getReferenceLines()

      /**
       * The sort configuration of a `BoxPlotVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The tooltip display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-tooltip)
       */
      override fun tooltip(): Any? = unwrap(this).getTooltip()

      /**
       * The palette (chart color) display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-visualpalette)
       */
      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          BoxPlotChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotChartConfigurationProperty):
          BoxPlotChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotChartConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface BoxPlotVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration settings of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers..
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [BoxPlotVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: BoxPlotChartConfigurationProperty)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d7047b5521b646e6f2d631657083add40060a38246a1b3f3214828533e12a77e")
      public
          fun chartConfiguration(chartConfiguration: BoxPlotChartConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fdbfa6c983f2509bfbcb3744c2584e1a482b6400b77e3f60edda87c99b80c34d")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("16a9a812f747766f98b4e09daa3bd778567d8a6cdc7faec3018ba6e95acf23c0")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: BoxPlotChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(BoxPlotChartConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d7047b5521b646e6f2d631657083add40060a38246a1b3f3214828533e12a77e")
      override
          fun chartConfiguration(chartConfiguration: BoxPlotChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(BoxPlotChartConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fdbfa6c983f2509bfbcb3744c2584e1a482b6400b77e3f60edda87c99b80c34d")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("16a9a812f747766f98b4e09daa3bd778567d8a6cdc7faec3018ba6e95acf23c0")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotVisualProperty,
    ) : BoxPlotVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration settings of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): BoxPlotVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotVisualProperty):
          BoxPlotVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotVisualProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface RadarChartSeriesSettingsProperty {
    /**
     * The area style settings of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartseriessettings.html#cfn-quicksight-analysis-radarchartseriessettings-areastylesettings)
     */
    public fun areaStyleSettings(): Any? = unwrap(this).getAreaStyleSettings()

    /**
     * A builder for [RadarChartSeriesSettingsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param areaStyleSettings The area style settings of a radar chart.
       */
      public fun areaStyleSettings(areaStyleSettings: IResolvable)

      /**
       * @param areaStyleSettings The area style settings of a radar chart.
       */
      public fun areaStyleSettings(areaStyleSettings: RadarChartAreaStyleSettingsProperty)

      /**
       * @param areaStyleSettings The area style settings of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("91f1fd2bd9bc6316a05a36303c9ee96fff9dbd1380bf956772e56f6b4159e7af")
      public
          fun areaStyleSettings(areaStyleSettings: RadarChartAreaStyleSettingsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartSeriesSettingsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartSeriesSettingsProperty.builder()

      /**
       * @param areaStyleSettings The area style settings of a radar chart.
       */
      override fun areaStyleSettings(areaStyleSettings: IResolvable) {
        cdkBuilder.areaStyleSettings(areaStyleSettings.let(IResolvable::unwrap))
      }

      /**
       * @param areaStyleSettings The area style settings of a radar chart.
       */
      override fun areaStyleSettings(areaStyleSettings: RadarChartAreaStyleSettingsProperty) {
        cdkBuilder.areaStyleSettings(areaStyleSettings.let(RadarChartAreaStyleSettingsProperty::unwrap))
      }

      /**
       * @param areaStyleSettings The area style settings of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("91f1fd2bd9bc6316a05a36303c9ee96fff9dbd1380bf956772e56f6b4159e7af")
      override
          fun areaStyleSettings(areaStyleSettings: RadarChartAreaStyleSettingsProperty.Builder.() -> Unit):
          Unit = areaStyleSettings(RadarChartAreaStyleSettingsProperty(areaStyleSettings))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartSeriesSettingsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartSeriesSettingsProperty,
    ) : RadarChartSeriesSettingsProperty {
      /**
       * The area style settings of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartseriessettings.html#cfn-quicksight-analysis-radarchartseriessettings-areastylesettings)
       */
      override fun areaStyleSettings(): Any? = unwrap(this).getAreaStyleSettings()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): RadarChartSeriesSettingsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartSeriesSettingsProperty):
          RadarChartSeriesSettingsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartSeriesSettingsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartSeriesSettingsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface SpacingProperty {
    /**
     * Define the bottom spacing.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html#cfn-quicksight-analysis-spacing-bottom)
     */
    public fun bottom(): String? = unwrap(this).getBottom()

    /**
     * Define the left spacing.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html#cfn-quicksight-analysis-spacing-left)
     */
    public fun left(): String? = unwrap(this).getLeft()

    /**
     * Define the right spacing.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html#cfn-quicksight-analysis-spacing-right)
     */
    public fun right(): String? = unwrap(this).getRight()

    /**
     * Define the top spacing.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html#cfn-quicksight-analysis-spacing-top)
     */
    public fun top(): String? = unwrap(this).getTop()

    /**
     * A builder for [SpacingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param bottom Define the bottom spacing.
       */
      public fun bottom(bottom: String)

      /**
       * @param left Define the left spacing.
       */
      public fun left(left: String)

      /**
       * @param right Define the right spacing.
       */
      public fun right(right: String)

      /**
       * @param top Define the top spacing.
       */
      public fun top(top: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SpacingProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SpacingProperty.builder()

      /**
       * @param bottom Define the bottom spacing.
       */
      override fun bottom(bottom: String) {
        cdkBuilder.bottom(bottom)
      }

      /**
       * @param left Define the left spacing.
       */
      override fun left(left: String) {
        cdkBuilder.left(left)
      }

      /**
       * @param right Define the right spacing.
       */
      override fun right(right: String) {
        cdkBuilder.right(right)
      }

      /**
       * @param top Define the top spacing.
       */
      override fun top(top: String) {
        cdkBuilder.top(top)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.SpacingProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SpacingProperty,
    ) : SpacingProperty {
      /**
       * Define the bottom spacing.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html#cfn-quicksight-analysis-spacing-bottom)
       */
      override fun bottom(): String? = unwrap(this).getBottom()

      /**
       * Define the left spacing.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html#cfn-quicksight-analysis-spacing-left)
       */
      override fun left(): String? = unwrap(this).getLeft()

      /**
       * Define the right spacing.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html#cfn-quicksight-analysis-spacing-right)
       */
      override fun right(): String? = unwrap(this).getRight()

      /**
       * Define the top spacing.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html#cfn-quicksight-analysis-spacing-top)
       */
      override fun top(): String? = unwrap(this).getTop()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SpacingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SpacingProperty):
          SpacingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SpacingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SpacingProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface MappedDataSetParameterProperty {
    /**
     * A unique name that identifies a dataset within the analysis or dashboard.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-mappeddatasetparameter.html#cfn-quicksight-analysis-mappeddatasetparameter-datasetidentifier)
     */
    public fun dataSetIdentifier(): String

    /**
     * The name of the dataset parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-mappeddatasetparameter.html#cfn-quicksight-analysis-mappeddatasetparameter-datasetparametername)
     */
    public fun dataSetParameterName(): String

    /**
     * A builder for [MappedDataSetParameterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataSetIdentifier A unique name that identifies a dataset within the analysis or
       * dashboard. 
       */
      public fun dataSetIdentifier(dataSetIdentifier: String)

      /**
       * @param dataSetParameterName The name of the dataset parameter. 
       */
      public fun dataSetParameterName(dataSetParameterName: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MappedDataSetParameterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MappedDataSetParameterProperty.builder()

      /**
       * @param dataSetIdentifier A unique name that identifies a dataset within the analysis or
       * dashboard. 
       */
      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      /**
       * @param dataSetParameterName The name of the dataset parameter. 
       */
      override fun dataSetParameterName(dataSetParameterName: String) {
        cdkBuilder.dataSetParameterName(dataSetParameterName)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MappedDataSetParameterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MappedDataSetParameterProperty,
    ) : MappedDataSetParameterProperty {
      /**
       * A unique name that identifies a dataset within the analysis or dashboard.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-mappeddatasetparameter.html#cfn-quicksight-analysis-mappeddatasetparameter-datasetidentifier)
       */
      override fun dataSetIdentifier(): String = unwrap(this).getDataSetIdentifier()

      /**
       * The name of the dataset parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-mappeddatasetparameter.html#cfn-quicksight-analysis-mappeddatasetparameter-datasetparametername)
       */
      override fun dataSetParameterName(): String = unwrap(this).getDataSetParameterName()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): MappedDataSetParameterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.MappedDataSetParameterProperty):
          MappedDataSetParameterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MappedDataSetParameterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MappedDataSetParameterProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface HeaderFooterSectionConfigurationProperty {
    /**
     * The layout configuration of the header or footer section.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-headerfootersectionconfiguration.html#cfn-quicksight-analysis-headerfootersectionconfiguration-layout)
     */
    public fun layout(): Any

    /**
     * The unique identifier of the header or footer section.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-headerfootersectionconfiguration.html#cfn-quicksight-analysis-headerfootersectionconfiguration-sectionid)
     */
    public fun sectionId(): String

    /**
     * The style options of a header or footer section.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-headerfootersectionconfiguration.html#cfn-quicksight-analysis-headerfootersectionconfiguration-style)
     */
    public fun style(): Any? = unwrap(this).getStyle()

    /**
     * A builder for [HeaderFooterSectionConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param layout The layout configuration of the header or footer section. 
       */
      public fun layout(layout: IResolvable)

      /**
       * @param layout The layout configuration of the header or footer section. 
       */
      public fun layout(layout: SectionLayoutConfigurationProperty)

      /**
       * @param layout The layout configuration of the header or footer section. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("837cfcb77df37cc8149d97ccf7fc00769fc5781f5276437839700174f242e5f8")
      public fun layout(layout: SectionLayoutConfigurationProperty.Builder.() -> Unit)

      /**
       * @param sectionId The unique identifier of the header or footer section. 
       */
      public fun sectionId(sectionId: String)

      /**
       * @param style The style options of a header or footer section.
       */
      public fun style(style: IResolvable)

      /**
       * @param style The style options of a header or footer section.
       */
      public fun style(style: SectionStyleProperty)

      /**
       * @param style The style options of a header or footer section.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ba3cb4200388dec33878bc825f3d4fb0f4a2b330ea3431034f99aac222cf70f8")
      public fun style(style: SectionStyleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeaderFooterSectionConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeaderFooterSectionConfigurationProperty.builder()

      /**
       * @param layout The layout configuration of the header or footer section. 
       */
      override fun layout(layout: IResolvable) {
        cdkBuilder.layout(layout.let(IResolvable::unwrap))
      }

      /**
       * @param layout The layout configuration of the header or footer section. 
       */
      override fun layout(layout: SectionLayoutConfigurationProperty) {
        cdkBuilder.layout(layout.let(SectionLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param layout The layout configuration of the header or footer section. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("837cfcb77df37cc8149d97ccf7fc00769fc5781f5276437839700174f242e5f8")
      override fun layout(layout: SectionLayoutConfigurationProperty.Builder.() -> Unit): Unit =
          layout(SectionLayoutConfigurationProperty(layout))

      /**
       * @param sectionId The unique identifier of the header or footer section. 
       */
      override fun sectionId(sectionId: String) {
        cdkBuilder.sectionId(sectionId)
      }

      /**
       * @param style The style options of a header or footer section.
       */
      override fun style(style: IResolvable) {
        cdkBuilder.style(style.let(IResolvable::unwrap))
      }

      /**
       * @param style The style options of a header or footer section.
       */
      override fun style(style: SectionStyleProperty) {
        cdkBuilder.style(style.let(SectionStyleProperty::unwrap))
      }

      /**
       * @param style The style options of a header or footer section.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ba3cb4200388dec33878bc825f3d4fb0f4a2b330ea3431034f99aac222cf70f8")
      override fun style(style: SectionStyleProperty.Builder.() -> Unit): Unit =
          style(SectionStyleProperty(style))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeaderFooterSectionConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeaderFooterSectionConfigurationProperty,
    ) : HeaderFooterSectionConfigurationProperty {
      /**
       * The layout configuration of the header or footer section.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-headerfootersectionconfiguration.html#cfn-quicksight-analysis-headerfootersectionconfiguration-layout)
       */
      override fun layout(): Any = unwrap(this).getLayout()

      /**
       * The unique identifier of the header or footer section.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-headerfootersectionconfiguration.html#cfn-quicksight-analysis-headerfootersectionconfiguration-sectionid)
       */
      override fun sectionId(): String = unwrap(this).getSectionId()

      /**
       * The style options of a header or footer section.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-headerfootersectionconfiguration.html#cfn-quicksight-analysis-headerfootersectionconfiguration-style)
       */
      override fun style(): Any? = unwrap(this).getStyle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          HeaderFooterSectionConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.HeaderFooterSectionConfigurationProperty):
          HeaderFooterSectionConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HeaderFooterSectionConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeaderFooterSectionConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ForecastConfigurationProperty {
    /**
     * The forecast properties setup of a forecast in the line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastconfiguration.html#cfn-quicksight-analysis-forecastconfiguration-forecastproperties)
     */
    public fun forecastProperties(): Any? = unwrap(this).getForecastProperties()

    /**
     * The forecast scenario of a forecast in the line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastconfiguration.html#cfn-quicksight-analysis-forecastconfiguration-scenario)
     */
    public fun scenario(): Any? = unwrap(this).getScenario()

    /**
     * A builder for [ForecastConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param forecastProperties The forecast properties setup of a forecast in the line chart.
       */
      public fun forecastProperties(forecastProperties: IResolvable)

      /**
       * @param forecastProperties The forecast properties setup of a forecast in the line chart.
       */
      public fun forecastProperties(forecastProperties: TimeBasedForecastPropertiesProperty)

      /**
       * @param forecastProperties The forecast properties setup of a forecast in the line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ed2747cc3496c1cbf1b025a42320d866970feabb62086d7c91a03013ffa921ce")
      public
          fun forecastProperties(forecastProperties: TimeBasedForecastPropertiesProperty.Builder.() -> Unit)

      /**
       * @param scenario The forecast scenario of a forecast in the line chart.
       */
      public fun scenario(scenario: IResolvable)

      /**
       * @param scenario The forecast scenario of a forecast in the line chart.
       */
      public fun scenario(scenario: ForecastScenarioProperty)

      /**
       * @param scenario The forecast scenario of a forecast in the line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9a6ba206f1befbb820f33a407cf52f31746a6327148dca81cc11e5eaa4f9bbdb")
      public fun scenario(scenario: ForecastScenarioProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastConfigurationProperty.builder()

      /**
       * @param forecastProperties The forecast properties setup of a forecast in the line chart.
       */
      override fun forecastProperties(forecastProperties: IResolvable) {
        cdkBuilder.forecastProperties(forecastProperties.let(IResolvable::unwrap))
      }

      /**
       * @param forecastProperties The forecast properties setup of a forecast in the line chart.
       */
      override fun forecastProperties(forecastProperties: TimeBasedForecastPropertiesProperty) {
        cdkBuilder.forecastProperties(forecastProperties.let(TimeBasedForecastPropertiesProperty::unwrap))
      }

      /**
       * @param forecastProperties The forecast properties setup of a forecast in the line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ed2747cc3496c1cbf1b025a42320d866970feabb62086d7c91a03013ffa921ce")
      override
          fun forecastProperties(forecastProperties: TimeBasedForecastPropertiesProperty.Builder.() -> Unit):
          Unit = forecastProperties(TimeBasedForecastPropertiesProperty(forecastProperties))

      /**
       * @param scenario The forecast scenario of a forecast in the line chart.
       */
      override fun scenario(scenario: IResolvable) {
        cdkBuilder.scenario(scenario.let(IResolvable::unwrap))
      }

      /**
       * @param scenario The forecast scenario of a forecast in the line chart.
       */
      override fun scenario(scenario: ForecastScenarioProperty) {
        cdkBuilder.scenario(scenario.let(ForecastScenarioProperty::unwrap))
      }

      /**
       * @param scenario The forecast scenario of a forecast in the line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9a6ba206f1befbb820f33a407cf52f31746a6327148dca81cc11e5eaa4f9bbdb")
      override fun scenario(scenario: ForecastScenarioProperty.Builder.() -> Unit): Unit =
          scenario(ForecastScenarioProperty(scenario))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastConfigurationProperty,
    ) : ForecastConfigurationProperty {
      /**
       * The forecast properties setup of a forecast in the line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastconfiguration.html#cfn-quicksight-analysis-forecastconfiguration-forecastproperties)
       */
      override fun forecastProperties(): Any? = unwrap(this).getForecastProperties()

      /**
       * The forecast scenario of a forecast in the line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastconfiguration.html#cfn-quicksight-analysis-forecastconfiguration-scenario)
       */
      override fun scenario(): Any? = unwrap(this).getScenario()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ForecastConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastConfigurationProperty):
          ForecastConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ForecastConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TopBottomMoversComputationProperty {
    /**
     * The category field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-category)
     */
    public fun category(): Any? = unwrap(this).getCategory()

    /**
     * The ID for a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-computationid)
     */
    public fun computationId(): String

    /**
     * The mover size setup of the top and bottom movers computation.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-moversize)
     */
    public fun moverSize(): Number? = unwrap(this).getMoverSize()

    /**
     * The name of a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * The sort order setup of the top and bottom movers computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-sortorder)
     */
    public fun sortOrder(): String? = unwrap(this).getSortOrder()

    /**
     * The time field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-time)
     */
    public fun time(): Any? = unwrap(this).getTime()

    /**
     * The computation type. Choose from the following options:.
     *
     * * TOP: Top movers computation.
     * * BOTTOM: Bottom movers computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-type)
     */
    public fun type(): String

    /**
     * The value field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-value)
     */
    public fun `value`(): Any? = unwrap(this).getValue()

    /**
     * A builder for [TopBottomMoversComputationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param category The category field that is used in a computation.
       */
      public fun category(category: IResolvable)

      /**
       * @param category The category field that is used in a computation.
       */
      public fun category(category: DimensionFieldProperty)

      /**
       * @param category The category field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ac29a71b120ae5f01a62e20c4febbb54f6ab7753b54f0a5b856d62a925f0488")
      public fun category(category: DimensionFieldProperty.Builder.() -> Unit)

      /**
       * @param computationId The ID for a computation. 
       */
      public fun computationId(computationId: String)

      /**
       * @param moverSize The mover size setup of the top and bottom movers computation.
       */
      public fun moverSize(moverSize: Number)

      /**
       * @param name The name of a computation.
       */
      public fun name(name: String)

      /**
       * @param sortOrder The sort order setup of the top and bottom movers computation.
       */
      public fun sortOrder(sortOrder: String)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: IResolvable)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: DimensionFieldProperty)

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9636d6cc2f6a49f2e13bb9bef9cb0809210d41b30b324f9a6b1c68eeee4df3dc")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)

      /**
       * @param type The computation type. Choose from the following options:. 
       * * TOP: Top movers computation.
       * * BOTTOM: Bottom movers computation.
       */
      public fun type(type: String)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: IResolvable)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: MeasureFieldProperty)

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0a65fa22206059faecdb2caa38888a22458ec6b6e2ee7d09ab21eb19711b9043")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomMoversComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomMoversComputationProperty.builder()

      /**
       * @param category The category field that is used in a computation.
       */
      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      /**
       * @param category The category field that is used in a computation.
       */
      override fun category(category: DimensionFieldProperty) {
        cdkBuilder.category(category.let(DimensionFieldProperty::unwrap))
      }

      /**
       * @param category The category field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ac29a71b120ae5f01a62e20c4febbb54f6ab7753b54f0a5b856d62a925f0488")
      override fun category(category: DimensionFieldProperty.Builder.() -> Unit): Unit =
          category(DimensionFieldProperty(category))

      /**
       * @param computationId The ID for a computation. 
       */
      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      /**
       * @param moverSize The mover size setup of the top and bottom movers computation.
       */
      override fun moverSize(moverSize: Number) {
        cdkBuilder.moverSize(moverSize)
      }

      /**
       * @param name The name of a computation.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param sortOrder The sort order setup of the top and bottom movers computation.
       */
      override fun sortOrder(sortOrder: String) {
        cdkBuilder.sortOrder(sortOrder)
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9636d6cc2f6a49f2e13bb9bef9cb0809210d41b30b324f9a6b1c68eeee4df3dc")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      /**
       * @param type The computation type. Choose from the following options:. 
       * * TOP: Top movers computation.
       * * BOTTOM: Bottom movers computation.
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0a65fa22206059faecdb2caa38888a22458ec6b6e2ee7d09ab21eb19711b9043")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomMoversComputationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomMoversComputationProperty,
    ) : TopBottomMoversComputationProperty {
      /**
       * The category field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-category)
       */
      override fun category(): Any? = unwrap(this).getCategory()

      /**
       * The ID for a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-computationid)
       */
      override fun computationId(): String = unwrap(this).getComputationId()

      /**
       * The mover size setup of the top and bottom movers computation.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-moversize)
       */
      override fun moverSize(): Number? = unwrap(this).getMoverSize()

      /**
       * The name of a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-name)
       */
      override fun name(): String? = unwrap(this).getName()

      /**
       * The sort order setup of the top and bottom movers computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-sortorder)
       */
      override fun sortOrder(): String? = unwrap(this).getSortOrder()

      /**
       * The time field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-time)
       */
      override fun time(): Any? = unwrap(this).getTime()

      /**
       * The computation type. Choose from the following options:.
       *
       * * TOP: Top movers computation.
       * * BOTTOM: Bottom movers computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-type)
       */
      override fun type(): String = unwrap(this).getType()

      /**
       * The value field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-value)
       */
      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TopBottomMoversComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomMoversComputationProperty):
          TopBottomMoversComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TopBottomMoversComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomMoversComputationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ParameterTextFieldControlProperty {
    /**
     * The display options of a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html#cfn-quicksight-analysis-parametertextfieldcontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The ID of the `ParameterTextFieldControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html#cfn-quicksight-analysis-parametertextfieldcontrol-parametercontrolid)
     */
    public fun parameterControlId(): String

    /**
     * The source parameter name of the `ParameterTextFieldControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html#cfn-quicksight-analysis-parametertextfieldcontrol-sourceparametername)
     */
    public fun sourceParameterName(): String

    /**
     * The title of the `ParameterTextFieldControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html#cfn-quicksight-analysis-parametertextfieldcontrol-title)
     */
    public fun title(): String

    /**
     * A builder for [ParameterTextFieldControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93fb0d15552e31588c9181ccfb7982cc7705f199555bec6869486e45fe9c944a")
      public
          fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param parameterControlId The ID of the `ParameterTextFieldControl` . 
       */
      public fun parameterControlId(parameterControlId: String)

      /**
       * @param sourceParameterName The source parameter name of the `ParameterTextFieldControl` . 
       */
      public fun sourceParameterName(sourceParameterName: String)

      /**
       * @param title The title of the `ParameterTextFieldControl` . 
       */
      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterTextFieldControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterTextFieldControlProperty.builder()

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(TextFieldControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93fb0d15552e31588c9181ccfb7982cc7705f199555bec6869486e45fe9c944a")
      override
          fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(TextFieldControlDisplayOptionsProperty(displayOptions))

      /**
       * @param parameterControlId The ID of the `ParameterTextFieldControl` . 
       */
      override fun parameterControlId(parameterControlId: String) {
        cdkBuilder.parameterControlId(parameterControlId)
      }

      /**
       * @param sourceParameterName The source parameter name of the `ParameterTextFieldControl` . 
       */
      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      /**
       * @param title The title of the `ParameterTextFieldControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterTextFieldControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterTextFieldControlProperty,
    ) : ParameterTextFieldControlProperty {
      /**
       * The display options of a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html#cfn-quicksight-analysis-parametertextfieldcontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The ID of the `ParameterTextFieldControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html#cfn-quicksight-analysis-parametertextfieldcontrol-parametercontrolid)
       */
      override fun parameterControlId(): String = unwrap(this).getParameterControlId()

      /**
       * The source parameter name of the `ParameterTextFieldControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html#cfn-quicksight-analysis-parametertextfieldcontrol-sourceparametername)
       */
      override fun sourceParameterName(): String = unwrap(this).getSourceParameterName()

      /**
       * The title of the `ParameterTextFieldControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html#cfn-quicksight-analysis-parametertextfieldcontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ParameterTextFieldControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterTextFieldControlProperty):
          ParameterTextFieldControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterTextFieldControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterTextFieldControlProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface DataLabelOptionsProperty {
    /**
     * Determines the visibility of the category field labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-categorylabelvisibility)
     */
    public fun categoryLabelVisibility(): String? = unwrap(this).getCategoryLabelVisibility()

    /**
     * The option that determines the data label type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-datalabeltypes)
     */
    public fun dataLabelTypes(): Any? = unwrap(this).getDataLabelTypes()

    /**
     * Determines the color of the data labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-labelcolor)
     */
    public fun labelColor(): String? = unwrap(this).getLabelColor()

    /**
     * Determines the content of the data labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-labelcontent)
     */
    public fun labelContent(): String? = unwrap(this).getLabelContent()

    /**
     * Determines the font configuration of the data labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-labelfontconfiguration)
     */
    public fun labelFontConfiguration(): Any? = unwrap(this).getLabelFontConfiguration()

    /**
     * Determines the visibility of the measure field labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-measurelabelvisibility)
     */
    public fun measureLabelVisibility(): String? = unwrap(this).getMeasureLabelVisibility()

    /**
     * Determines whether overlap is enabled or disabled for the data labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-overlap)
     */
    public fun overlap(): String? = unwrap(this).getOverlap()

    /**
     * Determines the position of the data labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-position)
     */
    public fun position(): String? = unwrap(this).getPosition()

    /**
     * Determines the visibility of the total.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-totalsvisibility)
     */
    public fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

    /**
     * Determines the visibility of the data labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [DataLabelOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryLabelVisibility Determines the visibility of the category field labels.
       */
      public fun categoryLabelVisibility(categoryLabelVisibility: String)

      /**
       * @param dataLabelTypes The option that determines the data label type.
       */
      public fun dataLabelTypes(dataLabelTypes: IResolvable)

      /**
       * @param dataLabelTypes The option that determines the data label type.
       */
      public fun dataLabelTypes(dataLabelTypes: List<Any>)

      /**
       * @param dataLabelTypes The option that determines the data label type.
       */
      public fun dataLabelTypes(vararg dataLabelTypes: Any)

      /**
       * @param labelColor Determines the color of the data labels.
       */
      public fun labelColor(labelColor: String)

      /**
       * @param labelContent Determines the content of the data labels.
       */
      public fun labelContent(labelContent: String)

      /**
       * @param labelFontConfiguration Determines the font configuration of the data labels.
       */
      public fun labelFontConfiguration(labelFontConfiguration: IResolvable)

      /**
       * @param labelFontConfiguration Determines the font configuration of the data labels.
       */
      public fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty)

      /**
       * @param labelFontConfiguration Determines the font configuration of the data labels.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c12ff4a0f488dfad12b88a84d38887e403a6d9e72eff8db01b203635e1f2f84b")
      public
          fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      /**
       * @param measureLabelVisibility Determines the visibility of the measure field labels.
       */
      public fun measureLabelVisibility(measureLabelVisibility: String)

      /**
       * @param overlap Determines whether overlap is enabled or disabled for the data labels.
       */
      public fun overlap(overlap: String)

      /**
       * @param position Determines the position of the data labels.
       */
      public fun position(position: String)

      /**
       * @param totalsVisibility Determines the visibility of the total.
       */
      public fun totalsVisibility(totalsVisibility: String)

      /**
       * @param visibility Determines the visibility of the data labels.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataLabelOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataLabelOptionsProperty.builder()

      /**
       * @param categoryLabelVisibility Determines the visibility of the category field labels.
       */
      override fun categoryLabelVisibility(categoryLabelVisibility: String) {
        cdkBuilder.categoryLabelVisibility(categoryLabelVisibility)
      }

      /**
       * @param dataLabelTypes The option that determines the data label type.
       */
      override fun dataLabelTypes(dataLabelTypes: IResolvable) {
        cdkBuilder.dataLabelTypes(dataLabelTypes.let(IResolvable::unwrap))
      }

      /**
       * @param dataLabelTypes The option that determines the data label type.
       */
      override fun dataLabelTypes(dataLabelTypes: List<Any>) {
        cdkBuilder.dataLabelTypes(dataLabelTypes)
      }

      /**
       * @param dataLabelTypes The option that determines the data label type.
       */
      override fun dataLabelTypes(vararg dataLabelTypes: Any): Unit =
          dataLabelTypes(dataLabelTypes.toList())

      /**
       * @param labelColor Determines the color of the data labels.
       */
      override fun labelColor(labelColor: String) {
        cdkBuilder.labelColor(labelColor)
      }

      /**
       * @param labelContent Determines the content of the data labels.
       */
      override fun labelContent(labelContent: String) {
        cdkBuilder.labelContent(labelContent)
      }

      /**
       * @param labelFontConfiguration Determines the font configuration of the data labels.
       */
      override fun labelFontConfiguration(labelFontConfiguration: IResolvable) {
        cdkBuilder.labelFontConfiguration(labelFontConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param labelFontConfiguration Determines the font configuration of the data labels.
       */
      override fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty) {
        cdkBuilder.labelFontConfiguration(labelFontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      /**
       * @param labelFontConfiguration Determines the font configuration of the data labels.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c12ff4a0f488dfad12b88a84d38887e403a6d9e72eff8db01b203635e1f2f84b")
      override
          fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = labelFontConfiguration(FontConfigurationProperty(labelFontConfiguration))

      /**
       * @param measureLabelVisibility Determines the visibility of the measure field labels.
       */
      override fun measureLabelVisibility(measureLabelVisibility: String) {
        cdkBuilder.measureLabelVisibility(measureLabelVisibility)
      }

      /**
       * @param overlap Determines whether overlap is enabled or disabled for the data labels.
       */
      override fun overlap(overlap: String) {
        cdkBuilder.overlap(overlap)
      }

      /**
       * @param position Determines the position of the data labels.
       */
      override fun position(position: String) {
        cdkBuilder.position(position)
      }

      /**
       * @param totalsVisibility Determines the visibility of the total.
       */
      override fun totalsVisibility(totalsVisibility: String) {
        cdkBuilder.totalsVisibility(totalsVisibility)
      }

      /**
       * @param visibility Determines the visibility of the data labels.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataLabelOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataLabelOptionsProperty,
    ) : DataLabelOptionsProperty {
      /**
       * Determines the visibility of the category field labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-categorylabelvisibility)
       */
      override fun categoryLabelVisibility(): String? = unwrap(this).getCategoryLabelVisibility()

      /**
       * The option that determines the data label type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-datalabeltypes)
       */
      override fun dataLabelTypes(): Any? = unwrap(this).getDataLabelTypes()

      /**
       * Determines the color of the data labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-labelcolor)
       */
      override fun labelColor(): String? = unwrap(this).getLabelColor()

      /**
       * Determines the content of the data labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-labelcontent)
       */
      override fun labelContent(): String? = unwrap(this).getLabelContent()

      /**
       * Determines the font configuration of the data labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-labelfontconfiguration)
       */
      override fun labelFontConfiguration(): Any? = unwrap(this).getLabelFontConfiguration()

      /**
       * Determines the visibility of the measure field labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-measurelabelvisibility)
       */
      override fun measureLabelVisibility(): String? = unwrap(this).getMeasureLabelVisibility()

      /**
       * Determines whether overlap is enabled or disabled for the data labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-overlap)
       */
      override fun overlap(): String? = unwrap(this).getOverlap()

      /**
       * Determines the position of the data labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-position)
       */
      override fun position(): String? = unwrap(this).getPosition()

      /**
       * Determines the visibility of the total.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-totalsvisibility)
       */
      override fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

      /**
       * Determines the visibility of the data labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DataLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DataLabelOptionsProperty):
          DataLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataLabelOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface TableOptionsProperty {
    /**
     * The table cell style of table cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html#cfn-quicksight-analysis-tableoptions-cellstyle)
     */
    public fun cellStyle(): Any? = unwrap(this).getCellStyle()

    /**
     * The table cell style of a table header.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html#cfn-quicksight-analysis-tableoptions-headerstyle)
     */
    public fun headerStyle(): Any? = unwrap(this).getHeaderStyle()

    /**
     * The orientation (vertical, horizontal) for a table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html#cfn-quicksight-analysis-tableoptions-orientation)
     */
    public fun orientation(): String? = unwrap(this).getOrientation()

    /**
     * The row alternate color options (widget status, row alternate colors) for a table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html#cfn-quicksight-analysis-tableoptions-rowalternatecoloroptions)
     */
    public fun rowAlternateColorOptions(): Any? = unwrap(this).getRowAlternateColorOptions()

    /**
     * A builder for [TableOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param cellStyle The table cell style of table cells.
       */
      public fun cellStyle(cellStyle: IResolvable)

      /**
       * @param cellStyle The table cell style of table cells.
       */
      public fun cellStyle(cellStyle: TableCellStyleProperty)

      /**
       * @param cellStyle The table cell style of table cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a455b59f742a0a7637ec2fd5f4dd825b37e663000b01cb88fe9f79df9d672cee")
      public fun cellStyle(cellStyle: TableCellStyleProperty.Builder.() -> Unit)

      /**
       * @param headerStyle The table cell style of a table header.
       */
      public fun headerStyle(headerStyle: IResolvable)

      /**
       * @param headerStyle The table cell style of a table header.
       */
      public fun headerStyle(headerStyle: TableCellStyleProperty)

      /**
       * @param headerStyle The table cell style of a table header.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("22a418090ad0fb8df745fc9db6493d81c285b7cfbd94292976c624520bd0e62e")
      public fun headerStyle(headerStyle: TableCellStyleProperty.Builder.() -> Unit)

      /**
       * @param orientation The orientation (vertical, horizontal) for a table.
       */
      public fun orientation(orientation: String)

      /**
       * @param rowAlternateColorOptions The row alternate color options (widget status, row
       * alternate colors) for a table.
       */
      public fun rowAlternateColorOptions(rowAlternateColorOptions: IResolvable)

      /**
       * @param rowAlternateColorOptions The row alternate color options (widget status, row
       * alternate colors) for a table.
       */
      public
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty)

      /**
       * @param rowAlternateColorOptions The row alternate color options (widget status, row
       * alternate colors) for a table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1fd7fbe6b27b2a328adf39634d9452caa981675345886445a13b8c7cea689ee7")
      public
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableOptionsProperty.builder()

      /**
       * @param cellStyle The table cell style of table cells.
       */
      override fun cellStyle(cellStyle: IResolvable) {
        cdkBuilder.cellStyle(cellStyle.let(IResolvable::unwrap))
      }

      /**
       * @param cellStyle The table cell style of table cells.
       */
      override fun cellStyle(cellStyle: TableCellStyleProperty) {
        cdkBuilder.cellStyle(cellStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param cellStyle The table cell style of table cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a455b59f742a0a7637ec2fd5f4dd825b37e663000b01cb88fe9f79df9d672cee")
      override fun cellStyle(cellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          cellStyle(TableCellStyleProperty(cellStyle))

      /**
       * @param headerStyle The table cell style of a table header.
       */
      override fun headerStyle(headerStyle: IResolvable) {
        cdkBuilder.headerStyle(headerStyle.let(IResolvable::unwrap))
      }

      /**
       * @param headerStyle The table cell style of a table header.
       */
      override fun headerStyle(headerStyle: TableCellStyleProperty) {
        cdkBuilder.headerStyle(headerStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param headerStyle The table cell style of a table header.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("22a418090ad0fb8df745fc9db6493d81c285b7cfbd94292976c624520bd0e62e")
      override fun headerStyle(headerStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          headerStyle(TableCellStyleProperty(headerStyle))

      /**
       * @param orientation The orientation (vertical, horizontal) for a table.
       */
      override fun orientation(orientation: String) {
        cdkBuilder.orientation(orientation)
      }

      /**
       * @param rowAlternateColorOptions The row alternate color options (widget status, row
       * alternate colors) for a table.
       */
      override fun rowAlternateColorOptions(rowAlternateColorOptions: IResolvable) {
        cdkBuilder.rowAlternateColorOptions(rowAlternateColorOptions.let(IResolvable::unwrap))
      }

      /**
       * @param rowAlternateColorOptions The row alternate color options (widget status, row
       * alternate colors) for a table.
       */
      override
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty) {
        cdkBuilder.rowAlternateColorOptions(rowAlternateColorOptions.let(RowAlternateColorOptionsProperty::unwrap))
      }

      /**
       * @param rowAlternateColorOptions The row alternate color options (widget status, row
       * alternate colors) for a table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1fd7fbe6b27b2a328adf39634d9452caa981675345886445a13b8c7cea689ee7")
      override
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty.Builder.() -> Unit):
          Unit =
          rowAlternateColorOptions(RowAlternateColorOptionsProperty(rowAlternateColorOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableOptionsProperty,
    ) : TableOptionsProperty {
      /**
       * The table cell style of table cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html#cfn-quicksight-analysis-tableoptions-cellstyle)
       */
      override fun cellStyle(): Any? = unwrap(this).getCellStyle()

      /**
       * The table cell style of a table header.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html#cfn-quicksight-analysis-tableoptions-headerstyle)
       */
      override fun headerStyle(): Any? = unwrap(this).getHeaderStyle()

      /**
       * The orientation (vertical, horizontal) for a table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html#cfn-quicksight-analysis-tableoptions-orientation)
       */
      override fun orientation(): String? = unwrap(this).getOrientation()

      /**
       * The row alternate color options (widget status, row alternate colors) for a table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html#cfn-quicksight-analysis-tableoptions-rowalternatecoloroptions)
       */
      override fun rowAlternateColorOptions(): Any? = unwrap(this).getRowAlternateColorOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TableOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableOptionsProperty):
          TableOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableOptionsProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface RadarChartConfigurationProperty {
    /**
     * Determines the visibility of the colors of alternatign bands in a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-alternatebandcolorsvisibility)
     */
    public fun alternateBandColorsVisibility(): String? =
        unwrap(this).getAlternateBandColorsVisibility()

    /**
     * The color of the even-numbered alternate bands of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-alternatebandevencolor)
     */
    public fun alternateBandEvenColor(): String? = unwrap(this).getAlternateBandEvenColor()

    /**
     * The color of the odd-numbered alternate bands of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-alternatebandoddcolor)
     */
    public fun alternateBandOddColor(): String? = unwrap(this).getAlternateBandOddColor()

    /**
     * The axis behavior options of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-axesrangescale)
     */
    public fun axesRangeScale(): String? = unwrap(this).getAxesRangeScale()

    /**
     * The base sreies settings of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-baseseriessettings)
     */
    public fun baseSeriesSettings(): Any? = unwrap(this).getBaseSeriesSettings()

    /**
     * The category axis of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-categoryaxis)
     */
    public fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

    /**
     * The category label options of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-categorylabeloptions)
     */
    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    /**
     * The color axis of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-coloraxis)
     */
    public fun colorAxis(): Any? = unwrap(this).getColorAxis()

    /**
     * The color label options of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-colorlabeloptions)
     */
    public fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

    /**
     * The field well configuration of a `RadarChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The legend display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-legend)
     */
    public fun legend(): Any? = unwrap(this).getLegend()

    /**
     * The shape of the radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-shape)
     */
    public fun shape(): String? = unwrap(this).getShape()

    /**
     * The sort configuration of a `RadarChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The start angle of a radar chart's axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-startangle)
     */
    public fun startAngle(): Number? = unwrap(this).getStartAngle()

    /**
     * The palette (chart color) display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-visualpalette)
     */
    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    /**
     * A builder for [RadarChartConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param alternateBandColorsVisibility Determines the visibility of the colors of alternatign
       * bands in a radar chart.
       */
      public fun alternateBandColorsVisibility(alternateBandColorsVisibility: String)

      /**
       * @param alternateBandEvenColor The color of the even-numbered alternate bands of a radar
       * chart.
       */
      public fun alternateBandEvenColor(alternateBandEvenColor: String)

      /**
       * @param alternateBandOddColor The color of the odd-numbered alternate bands of a radar
       * chart.
       */
      public fun alternateBandOddColor(alternateBandOddColor: String)

      /**
       * @param axesRangeScale The axis behavior options of a radar chart.
       */
      public fun axesRangeScale(axesRangeScale: String)

      /**
       * @param baseSeriesSettings The base sreies settings of a radar chart.
       */
      public fun baseSeriesSettings(baseSeriesSettings: IResolvable)

      /**
       * @param baseSeriesSettings The base sreies settings of a radar chart.
       */
      public fun baseSeriesSettings(baseSeriesSettings: RadarChartSeriesSettingsProperty)

      /**
       * @param baseSeriesSettings The base sreies settings of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("593228b34aeaaf113dbf11ed063703add82682e1759f81d19807dbf2f7ad4b5d")
      public
          fun baseSeriesSettings(baseSeriesSettings: RadarChartSeriesSettingsProperty.Builder.() -> Unit)

      /**
       * @param categoryAxis The category axis of a radar chart.
       */
      public fun categoryAxis(categoryAxis: IResolvable)

      /**
       * @param categoryAxis The category axis of a radar chart.
       */
      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty)

      /**
       * @param categoryAxis The category axis of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5581a4fa60224160a5101859f0ae94b008003e37961f11b84e2d51a1e119eb83")
      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param categoryLabelOptions The category label options of a radar chart.
       */
      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      /**
       * @param categoryLabelOptions The category label options of a radar chart.
       */
      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param categoryLabelOptions The category label options of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9fb937e83e69fdd5bf49b8f39d3e93a6741331ab55cbfc1cf6726a9e3ac631e5")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param colorAxis The color axis of a radar chart.
       */
      public fun colorAxis(colorAxis: IResolvable)

      /**
       * @param colorAxis The color axis of a radar chart.
       */
      public fun colorAxis(colorAxis: AxisDisplayOptionsProperty)

      /**
       * @param colorAxis The color axis of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0fdbb981ec145250012b0521eacd970f4a37ff36115e8b66fe62c43d1fb133f8")
      public fun colorAxis(colorAxis: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param colorLabelOptions The color label options of a radar chart.
       */
      public fun colorLabelOptions(colorLabelOptions: IResolvable)

      /**
       * @param colorLabelOptions The color label options of a radar chart.
       */
      public fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param colorLabelOptions The color label options of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ebf9614c323f0e8331311e31c851dc0d25772304b09745bd459ddf3c0919d64f")
      public
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field well configuration of a `RadarChartVisual` .
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field well configuration of a `RadarChartVisual` .
       */
      public fun fieldWells(fieldWells: RadarChartFieldWellsProperty)

      /**
       * @param fieldWells The field well configuration of a `RadarChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4aac11c2a317136c6b8aa6d460482b42ec52fb79c7c68568cdeaa4b097b6c71c")
      public fun fieldWells(fieldWells: RadarChartFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: IResolvable)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: LegendOptionsProperty)

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1ce93056a9db808bb325104d314ff1edab4470391a66c665a428b9e2081135ab")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      /**
       * @param shape The shape of the radar chart.
       */
      public fun shape(shape: String)

      /**
       * @param sortConfiguration The sort configuration of a `RadarChartVisual` .
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a `RadarChartVisual` .
       */
      public fun sortConfiguration(sortConfiguration: RadarChartSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a `RadarChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("71874269fdcf3720ae7a7d653e2d733d3381995825751c9f686f9e03fa22fa9d")
      public
          fun sortConfiguration(sortConfiguration: RadarChartSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param startAngle The start angle of a radar chart's axis.
       */
      public fun startAngle(startAngle: Number)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      public fun visualPalette(visualPalette: IResolvable)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      public fun visualPalette(visualPalette: VisualPaletteProperty)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("99c6d3ef430dafe3b1d1939fde233175ce901bdbd47204dd022e76a82906d81f")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartConfigurationProperty.builder()

      /**
       * @param alternateBandColorsVisibility Determines the visibility of the colors of alternatign
       * bands in a radar chart.
       */
      override fun alternateBandColorsVisibility(alternateBandColorsVisibility: String) {
        cdkBuilder.alternateBandColorsVisibility(alternateBandColorsVisibility)
      }

      /**
       * @param alternateBandEvenColor The color of the even-numbered alternate bands of a radar
       * chart.
       */
      override fun alternateBandEvenColor(alternateBandEvenColor: String) {
        cdkBuilder.alternateBandEvenColor(alternateBandEvenColor)
      }

      /**
       * @param alternateBandOddColor The color of the odd-numbered alternate bands of a radar
       * chart.
       */
      override fun alternateBandOddColor(alternateBandOddColor: String) {
        cdkBuilder.alternateBandOddColor(alternateBandOddColor)
      }

      /**
       * @param axesRangeScale The axis behavior options of a radar chart.
       */
      override fun axesRangeScale(axesRangeScale: String) {
        cdkBuilder.axesRangeScale(axesRangeScale)
      }

      /**
       * @param baseSeriesSettings The base sreies settings of a radar chart.
       */
      override fun baseSeriesSettings(baseSeriesSettings: IResolvable) {
        cdkBuilder.baseSeriesSettings(baseSeriesSettings.let(IResolvable::unwrap))
      }

      /**
       * @param baseSeriesSettings The base sreies settings of a radar chart.
       */
      override fun baseSeriesSettings(baseSeriesSettings: RadarChartSeriesSettingsProperty) {
        cdkBuilder.baseSeriesSettings(baseSeriesSettings.let(RadarChartSeriesSettingsProperty::unwrap))
      }

      /**
       * @param baseSeriesSettings The base sreies settings of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("593228b34aeaaf113dbf11ed063703add82682e1759f81d19807dbf2f7ad4b5d")
      override
          fun baseSeriesSettings(baseSeriesSettings: RadarChartSeriesSettingsProperty.Builder.() -> Unit):
          Unit = baseSeriesSettings(RadarChartSeriesSettingsProperty(baseSeriesSettings))

      /**
       * @param categoryAxis The category axis of a radar chart.
       */
      override fun categoryAxis(categoryAxis: IResolvable) {
        cdkBuilder.categoryAxis(categoryAxis.let(IResolvable::unwrap))
      }

      /**
       * @param categoryAxis The category axis of a radar chart.
       */
      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty) {
        cdkBuilder.categoryAxis(categoryAxis.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param categoryAxis The category axis of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5581a4fa60224160a5101859f0ae94b008003e37961f11b84e2d51a1e119eb83")
      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          categoryAxis(AxisDisplayOptionsProperty(categoryAxis))

      /**
       * @param categoryLabelOptions The category label options of a radar chart.
       */
      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param categoryLabelOptions The category label options of a radar chart.
       */
      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param categoryLabelOptions The category label options of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9fb937e83e69fdd5bf49b8f39d3e93a6741331ab55cbfc1cf6726a9e3ac631e5")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      /**
       * @param colorAxis The color axis of a radar chart.
       */
      override fun colorAxis(colorAxis: IResolvable) {
        cdkBuilder.colorAxis(colorAxis.let(IResolvable::unwrap))
      }

      /**
       * @param colorAxis The color axis of a radar chart.
       */
      override fun colorAxis(colorAxis: AxisDisplayOptionsProperty) {
        cdkBuilder.colorAxis(colorAxis.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param colorAxis The color axis of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0fdbb981ec145250012b0521eacd970f4a37ff36115e8b66fe62c43d1fb133f8")
      override fun colorAxis(colorAxis: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          colorAxis(AxisDisplayOptionsProperty(colorAxis))

      /**
       * @param colorLabelOptions The color label options of a radar chart.
       */
      override fun colorLabelOptions(colorLabelOptions: IResolvable) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param colorLabelOptions The color label options of a radar chart.
       */
      override fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param colorLabelOptions The color label options of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ebf9614c323f0e8331311e31c851dc0d25772304b09745bd459ddf3c0919d64f")
      override
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = colorLabelOptions(ChartAxisLabelOptionsProperty(colorLabelOptions))

      /**
       * @param fieldWells The field well configuration of a `RadarChartVisual` .
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a `RadarChartVisual` .
       */
      override fun fieldWells(fieldWells: RadarChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(RadarChartFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a `RadarChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4aac11c2a317136c6b8aa6d460482b42ec52fb79c7c68568cdeaa4b097b6c71c")
      override fun fieldWells(fieldWells: RadarChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(RadarChartFieldWellsProperty(fieldWells))

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1ce93056a9db808bb325104d314ff1edab4470391a66c665a428b9e2081135ab")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      /**
       * @param shape The shape of the radar chart.
       */
      override fun shape(shape: String) {
        cdkBuilder.shape(shape)
      }

      /**
       * @param sortConfiguration The sort configuration of a `RadarChartVisual` .
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a `RadarChartVisual` .
       */
      override fun sortConfiguration(sortConfiguration: RadarChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(RadarChartSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a `RadarChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("71874269fdcf3720ae7a7d653e2d733d3381995825751c9f686f9e03fa22fa9d")
      override
          fun sortConfiguration(sortConfiguration: RadarChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(RadarChartSortConfigurationProperty(sortConfiguration))

      /**
       * @param startAngle The start angle of a radar chart's axis.
       */
      override fun startAngle(startAngle: Number) {
        cdkBuilder.startAngle(startAngle)
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("99c6d3ef430dafe3b1d1939fde233175ce901bdbd47204dd022e76a82906d81f")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartConfigurationProperty,
    ) : RadarChartConfigurationProperty {
      /**
       * Determines the visibility of the colors of alternatign bands in a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-alternatebandcolorsvisibility)
       */
      override fun alternateBandColorsVisibility(): String? =
          unwrap(this).getAlternateBandColorsVisibility()

      /**
       * The color of the even-numbered alternate bands of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-alternatebandevencolor)
       */
      override fun alternateBandEvenColor(): String? = unwrap(this).getAlternateBandEvenColor()

      /**
       * The color of the odd-numbered alternate bands of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-alternatebandoddcolor)
       */
      override fun alternateBandOddColor(): String? = unwrap(this).getAlternateBandOddColor()

      /**
       * The axis behavior options of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-axesrangescale)
       */
      override fun axesRangeScale(): String? = unwrap(this).getAxesRangeScale()

      /**
       * The base sreies settings of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-baseseriessettings)
       */
      override fun baseSeriesSettings(): Any? = unwrap(this).getBaseSeriesSettings()

      /**
       * The category axis of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-categoryaxis)
       */
      override fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

      /**
       * The category label options of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-categorylabeloptions)
       */
      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      /**
       * The color axis of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-coloraxis)
       */
      override fun colorAxis(): Any? = unwrap(this).getColorAxis()

      /**
       * The color label options of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-colorlabeloptions)
       */
      override fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

      /**
       * The field well configuration of a `RadarChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The legend display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-legend)
       */
      override fun legend(): Any? = unwrap(this).getLegend()

      /**
       * The shape of the radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-shape)
       */
      override fun shape(): String? = unwrap(this).getShape()

      /**
       * The sort configuration of a `RadarChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The start angle of a radar chart's axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-startangle)
       */
      override fun startAngle(): Number? = unwrap(this).getStartAngle()

      /**
       * The palette (chart color) display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-visualpalette)
       */
      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): RadarChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartConfigurationProperty):
          RadarChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface AssetOptionsProperty {
    /**
     * Determines the timezone for the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-assetoptions.html#cfn-quicksight-analysis-assetoptions-timezone)
     */
    public fun timezone(): String? = unwrap(this).getTimezone()

    /**
     * Determines the week start day for an analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-assetoptions.html#cfn-quicksight-analysis-assetoptions-weekstart)
     */
    public fun weekStart(): String? = unwrap(this).getWeekStart()

    /**
     * A builder for [AssetOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param timezone Determines the timezone for the analysis.
       */
      public fun timezone(timezone: String)

      /**
       * @param weekStart Determines the week start day for an analysis.
       */
      public fun weekStart(weekStart: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AssetOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AssetOptionsProperty.builder()

      /**
       * @param timezone Determines the timezone for the analysis.
       */
      override fun timezone(timezone: String) {
        cdkBuilder.timezone(timezone)
      }

      /**
       * @param weekStart Determines the week start day for an analysis.
       */
      override fun weekStart(weekStart: String) {
        cdkBuilder.weekStart(weekStart)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AssetOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AssetOptionsProperty,
    ) : AssetOptionsProperty {
      /**
       * Determines the timezone for the analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-assetoptions.html#cfn-quicksight-analysis-assetoptions-timezone)
       */
      override fun timezone(): String? = unwrap(this).getTimezone()

      /**
       * Determines the week start day for an analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-assetoptions.html#cfn-quicksight-analysis-assetoptions-weekstart)
       */
      override fun weekStart(): String? = unwrap(this).getWeekStart()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AssetOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AssetOptionsProperty):
          AssetOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AssetOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AssetOptionsProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface TimeRangeFilterProperty {
    /**
     * The column that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-column)
     */
    public fun column(): Any

    /**
     * The exclude period of the time range filter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-excludeperiodconfiguration)
     */
    public fun excludePeriodConfiguration(): Any? = unwrap(this).getExcludePeriodConfiguration()

    /**
     * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-filterid)
     */
    public fun filterId(): String

    /**
     * Determines whether the maximum value in the filter value range should be included in the
     * filtered results.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-includemaximum)
     */
    public fun includeMaximum(): Any? = unwrap(this).getIncludeMaximum()

    /**
     * Determines whether the minimum value in the filter value range should be included in the
     * filtered results.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-includeminimum)
     */
    public fun includeMinimum(): Any? = unwrap(this).getIncludeMinimum()

    /**
     * This option determines how null values should be treated when filtering data.
     *
     * * `ALL_VALUES` : Include null values in filtered results.
     * * `NULLS_ONLY` : Only include null values in filtered results.
     * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-nulloption)
     */
    public fun nullOption(): String

    /**
     * The maximum value for the filter value range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-rangemaximumvalue)
     */
    public fun rangeMaximumValue(): Any? = unwrap(this).getRangeMaximumValue()

    /**
     * The minimum value for the filter value range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-rangeminimumvalue)
     */
    public fun rangeMinimumValue(): Any? = unwrap(this).getRangeMinimumValue()

    /**
     * The level of time precision that is used to aggregate `DateTime` values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-timegranularity)
     */
    public fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

    /**
     * A builder for [TimeRangeFilterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2a8be70d044025154d48544b2fb6e528dfdd1d5ea32106d5fc1fb078ff39da9e")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param excludePeriodConfiguration The exclude period of the time range filter.
       */
      public fun excludePeriodConfiguration(excludePeriodConfiguration: IResolvable)

      /**
       * @param excludePeriodConfiguration The exclude period of the time range filter.
       */
      public
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty)

      /**
       * @param excludePeriodConfiguration The exclude period of the time range filter.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d65a2a0a21f642e1819a84969059417d56a19d7c2873ec678a19e9e734e13a1a")
      public
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty.Builder.() -> Unit)

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      public fun filterId(filterId: String)

      /**
       * @param includeMaximum Determines whether the maximum value in the filter value range should
       * be included in the filtered results.
       */
      public fun includeMaximum(includeMaximum: Boolean)

      /**
       * @param includeMaximum Determines whether the maximum value in the filter value range should
       * be included in the filtered results.
       */
      public fun includeMaximum(includeMaximum: IResolvable)

      /**
       * @param includeMinimum Determines whether the minimum value in the filter value range should
       * be included in the filtered results.
       */
      public fun includeMinimum(includeMinimum: Boolean)

      /**
       * @param includeMinimum Determines whether the minimum value in the filter value range should
       * be included in the filtered results.
       */
      public fun includeMinimum(includeMinimum: IResolvable)

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data. 
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      public fun nullOption(nullOption: String)

      /**
       * @param rangeMaximumValue The maximum value for the filter value range.
       */
      public fun rangeMaximumValue(rangeMaximumValue: IResolvable)

      /**
       * @param rangeMaximumValue The maximum value for the filter value range.
       */
      public fun rangeMaximumValue(rangeMaximumValue: TimeRangeFilterValueProperty)

      /**
       * @param rangeMaximumValue The maximum value for the filter value range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c1fe5783537bdadd8352ce61f9d04e0782f5140ebc06f19f25ee502d594b7fd")
      public
          fun rangeMaximumValue(rangeMaximumValue: TimeRangeFilterValueProperty.Builder.() -> Unit)

      /**
       * @param rangeMinimumValue The minimum value for the filter value range.
       */
      public fun rangeMinimumValue(rangeMinimumValue: IResolvable)

      /**
       * @param rangeMinimumValue The minimum value for the filter value range.
       */
      public fun rangeMinimumValue(rangeMinimumValue: TimeRangeFilterValueProperty)

      /**
       * @param rangeMinimumValue The minimum value for the filter value range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0b4d0076ee9627edaa24ed6d2f72750f2e44c5a736d8a2771ea0df472ece9027")
      public
          fun rangeMinimumValue(rangeMinimumValue: TimeRangeFilterValueProperty.Builder.() -> Unit)

      /**
       * @param timeGranularity The level of time precision that is used to aggregate `DateTime`
       * values.
       */
      public fun timeGranularity(timeGranularity: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeFilterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeFilterProperty.builder()

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2a8be70d044025154d48544b2fb6e528dfdd1d5ea32106d5fc1fb078ff39da9e")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param excludePeriodConfiguration The exclude period of the time range filter.
       */
      override fun excludePeriodConfiguration(excludePeriodConfiguration: IResolvable) {
        cdkBuilder.excludePeriodConfiguration(excludePeriodConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param excludePeriodConfiguration The exclude period of the time range filter.
       */
      override
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty) {
        cdkBuilder.excludePeriodConfiguration(excludePeriodConfiguration.let(ExcludePeriodConfigurationProperty::unwrap))
      }

      /**
       * @param excludePeriodConfiguration The exclude period of the time range filter.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d65a2a0a21f642e1819a84969059417d56a19d7c2873ec678a19e9e734e13a1a")
      override
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty.Builder.() -> Unit):
          Unit =
          excludePeriodConfiguration(ExcludePeriodConfigurationProperty(excludePeriodConfiguration))

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      /**
       * @param includeMaximum Determines whether the maximum value in the filter value range should
       * be included in the filtered results.
       */
      override fun includeMaximum(includeMaximum: Boolean) {
        cdkBuilder.includeMaximum(includeMaximum)
      }

      /**
       * @param includeMaximum Determines whether the maximum value in the filter value range should
       * be included in the filtered results.
       */
      override fun includeMaximum(includeMaximum: IResolvable) {
        cdkBuilder.includeMaximum(includeMaximum.let(IResolvable::unwrap))
      }

      /**
       * @param includeMinimum Determines whether the minimum value in the filter value range should
       * be included in the filtered results.
       */
      override fun includeMinimum(includeMinimum: Boolean) {
        cdkBuilder.includeMinimum(includeMinimum)
      }

      /**
       * @param includeMinimum Determines whether the minimum value in the filter value range should
       * be included in the filtered results.
       */
      override fun includeMinimum(includeMinimum: IResolvable) {
        cdkBuilder.includeMinimum(includeMinimum.let(IResolvable::unwrap))
      }

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data. 
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      /**
       * @param rangeMaximumValue The maximum value for the filter value range.
       */
      override fun rangeMaximumValue(rangeMaximumValue: IResolvable) {
        cdkBuilder.rangeMaximumValue(rangeMaximumValue.let(IResolvable::unwrap))
      }

      /**
       * @param rangeMaximumValue The maximum value for the filter value range.
       */
      override fun rangeMaximumValue(rangeMaximumValue: TimeRangeFilterValueProperty) {
        cdkBuilder.rangeMaximumValue(rangeMaximumValue.let(TimeRangeFilterValueProperty::unwrap))
      }

      /**
       * @param rangeMaximumValue The maximum value for the filter value range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c1fe5783537bdadd8352ce61f9d04e0782f5140ebc06f19f25ee502d594b7fd")
      override
          fun rangeMaximumValue(rangeMaximumValue: TimeRangeFilterValueProperty.Builder.() -> Unit):
          Unit = rangeMaximumValue(TimeRangeFilterValueProperty(rangeMaximumValue))

      /**
       * @param rangeMinimumValue The minimum value for the filter value range.
       */
      override fun rangeMinimumValue(rangeMinimumValue: IResolvable) {
        cdkBuilder.rangeMinimumValue(rangeMinimumValue.let(IResolvable::unwrap))
      }

      /**
       * @param rangeMinimumValue The minimum value for the filter value range.
       */
      override fun rangeMinimumValue(rangeMinimumValue: TimeRangeFilterValueProperty) {
        cdkBuilder.rangeMinimumValue(rangeMinimumValue.let(TimeRangeFilterValueProperty::unwrap))
      }

      /**
       * @param rangeMinimumValue The minimum value for the filter value range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0b4d0076ee9627edaa24ed6d2f72750f2e44c5a736d8a2771ea0df472ece9027")
      override
          fun rangeMinimumValue(rangeMinimumValue: TimeRangeFilterValueProperty.Builder.() -> Unit):
          Unit = rangeMinimumValue(TimeRangeFilterValueProperty(rangeMinimumValue))

      /**
       * @param timeGranularity The level of time precision that is used to aggregate `DateTime`
       * values.
       */
      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeFilterProperty,
    ) : TimeRangeFilterProperty {
      /**
       * The column that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The exclude period of the time range filter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-excludeperiodconfiguration)
       */
      override fun excludePeriodConfiguration(): Any? = unwrap(this).getExcludePeriodConfiguration()

      /**
       * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-filterid)
       */
      override fun filterId(): String = unwrap(this).getFilterId()

      /**
       * Determines whether the maximum value in the filter value range should be included in the
       * filtered results.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-includemaximum)
       */
      override fun includeMaximum(): Any? = unwrap(this).getIncludeMaximum()

      /**
       * Determines whether the minimum value in the filter value range should be included in the
       * filtered results.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-includeminimum)
       */
      override fun includeMinimum(): Any? = unwrap(this).getIncludeMinimum()

      /**
       * This option determines how null values should be treated when filtering data.
       *
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-nulloption)
       */
      override fun nullOption(): String = unwrap(this).getNullOption()

      /**
       * The maximum value for the filter value range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-rangemaximumvalue)
       */
      override fun rangeMaximumValue(): Any? = unwrap(this).getRangeMaximumValue()

      /**
       * The minimum value for the filter value range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-rangeminimumvalue)
       */
      override fun rangeMinimumValue(): Any? = unwrap(this).getRangeMinimumValue()

      /**
       * The level of time precision that is used to aggregate `DateTime` values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-timegranularity)
       */
      override fun timeGranularity(): String? = unwrap(this).getTimeGranularity()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TimeRangeFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeFilterProperty):
          TimeRangeFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TimeRangeFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeFilterProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface FilterControlProperty {
    /**
     * A control from a date filter that is used to specify date and time.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-datetimepicker)
     */
    public fun dateTimePicker(): Any? = unwrap(this).getDateTimePicker()

    /**
     * A control to display a dropdown list with buttons that are used to select a single value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-dropdown)
     */
    public fun dropdown(): Any? = unwrap(this).getDropdown()

    /**
     * A control to display a list of buttons or boxes.
     *
     * This is used to select either a single value or multiple values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-list)
     */
    public fun list(): Any? = unwrap(this).getList()

    /**
     * A control from a date filter that is used to specify the relative date.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-relativedatetime)
     */
    public fun relativeDateTime(): Any? = unwrap(this).getRelativeDateTime()

    /**
     * A control to display a horizontal toggle bar.
     *
     * This is used to change a value by sliding the toggle.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-slider)
     */
    public fun slider(): Any? = unwrap(this).getSlider()

    /**
     * A control to display a text box that is used to enter multiple entries.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-textarea)
     */
    public fun textArea(): Any? = unwrap(this).getTextArea()

    /**
     * A control to display a text box that is used to enter a single entry.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-textfield)
     */
    public fun textField(): Any? = unwrap(this).getTextField()

    /**
     * A builder for [FilterControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dateTimePicker A control from a date filter that is used to specify date and time.
       */
      public fun dateTimePicker(dateTimePicker: IResolvable)

      /**
       * @param dateTimePicker A control from a date filter that is used to specify date and time.
       */
      public fun dateTimePicker(dateTimePicker: FilterDateTimePickerControlProperty)

      /**
       * @param dateTimePicker A control from a date filter that is used to specify date and time.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("36eabc1d58b4e24d12182bb20c9212e5f339bc84a8616c4a518e675315b436dc")
      public
          fun dateTimePicker(dateTimePicker: FilterDateTimePickerControlProperty.Builder.() -> Unit)

      /**
       * @param dropdown A control to display a dropdown list with buttons that are used to select a
       * single value.
       */
      public fun dropdown(dropdown: IResolvable)

      /**
       * @param dropdown A control to display a dropdown list with buttons that are used to select a
       * single value.
       */
      public fun dropdown(dropdown: FilterDropDownControlProperty)

      /**
       * @param dropdown A control to display a dropdown list with buttons that are used to select a
       * single value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dbb41c6abd466a0750e99e25e9e6fec6767feb270c1ee25b39888e0afd46fc8d")
      public fun dropdown(dropdown: FilterDropDownControlProperty.Builder.() -> Unit)

      /**
       * @param list A control to display a list of buttons or boxes.
       * This is used to select either a single value or multiple values.
       */
      public fun list(list: IResolvable)

      /**
       * @param list A control to display a list of buttons or boxes.
       * This is used to select either a single value or multiple values.
       */
      public fun list(list: FilterListControlProperty)

      /**
       * @param list A control to display a list of buttons or boxes.
       * This is used to select either a single value or multiple values.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7818b8d00d12d3458d01a677b5df772379bc08997b3cc48ac9d5d75afebffeec")
      public fun list(list: FilterListControlProperty.Builder.() -> Unit)

      /**
       * @param relativeDateTime A control from a date filter that is used to specify the relative
       * date.
       */
      public fun relativeDateTime(relativeDateTime: IResolvable)

      /**
       * @param relativeDateTime A control from a date filter that is used to specify the relative
       * date.
       */
      public fun relativeDateTime(relativeDateTime: FilterRelativeDateTimeControlProperty)

      /**
       * @param relativeDateTime A control from a date filter that is used to specify the relative
       * date.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b01cf29c6ad780492afd40abcc6b7bf3c415841b60c6c06ae5497dab7062d913")
      public
          fun relativeDateTime(relativeDateTime: FilterRelativeDateTimeControlProperty.Builder.() -> Unit)

      /**
       * @param slider A control to display a horizontal toggle bar.
       * This is used to change a value by sliding the toggle.
       */
      public fun slider(slider: IResolvable)

      /**
       * @param slider A control to display a horizontal toggle bar.
       * This is used to change a value by sliding the toggle.
       */
      public fun slider(slider: FilterSliderControlProperty)

      /**
       * @param slider A control to display a horizontal toggle bar.
       * This is used to change a value by sliding the toggle.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0f17573d7ba731ff4cd52fb9ade99e79f2fdda995bfb1945ee62d8296a209dfe")
      public fun slider(slider: FilterSliderControlProperty.Builder.() -> Unit)

      /**
       * @param textArea A control to display a text box that is used to enter multiple entries.
       */
      public fun textArea(textArea: IResolvable)

      /**
       * @param textArea A control to display a text box that is used to enter multiple entries.
       */
      public fun textArea(textArea: FilterTextAreaControlProperty)

      /**
       * @param textArea A control to display a text box that is used to enter multiple entries.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("54127111450b30f0f250087f8d3a04c860e96f72be4f3bb756b8d8f5fbf3dbd8")
      public fun textArea(textArea: FilterTextAreaControlProperty.Builder.() -> Unit)

      /**
       * @param textField A control to display a text box that is used to enter a single entry.
       */
      public fun textField(textField: IResolvable)

      /**
       * @param textField A control to display a text box that is used to enter a single entry.
       */
      public fun textField(textField: FilterTextFieldControlProperty)

      /**
       * @param textField A control to display a text box that is used to enter a single entry.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2d2a538fdbce8928201566e220956502376dd346b0a4176db6d71a8ffed4c64b")
      public fun textField(textField: FilterTextFieldControlProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterControlProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterControlProperty.builder()

      /**
       * @param dateTimePicker A control from a date filter that is used to specify date and time.
       */
      override fun dateTimePicker(dateTimePicker: IResolvable) {
        cdkBuilder.dateTimePicker(dateTimePicker.let(IResolvable::unwrap))
      }

      /**
       * @param dateTimePicker A control from a date filter that is used to specify date and time.
       */
      override fun dateTimePicker(dateTimePicker: FilterDateTimePickerControlProperty) {
        cdkBuilder.dateTimePicker(dateTimePicker.let(FilterDateTimePickerControlProperty::unwrap))
      }

      /**
       * @param dateTimePicker A control from a date filter that is used to specify date and time.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("36eabc1d58b4e24d12182bb20c9212e5f339bc84a8616c4a518e675315b436dc")
      override
          fun dateTimePicker(dateTimePicker: FilterDateTimePickerControlProperty.Builder.() -> Unit):
          Unit = dateTimePicker(FilterDateTimePickerControlProperty(dateTimePicker))

      /**
       * @param dropdown A control to display a dropdown list with buttons that are used to select a
       * single value.
       */
      override fun dropdown(dropdown: IResolvable) {
        cdkBuilder.dropdown(dropdown.let(IResolvable::unwrap))
      }

      /**
       * @param dropdown A control to display a dropdown list with buttons that are used to select a
       * single value.
       */
      override fun dropdown(dropdown: FilterDropDownControlProperty) {
        cdkBuilder.dropdown(dropdown.let(FilterDropDownControlProperty::unwrap))
      }

      /**
       * @param dropdown A control to display a dropdown list with buttons that are used to select a
       * single value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dbb41c6abd466a0750e99e25e9e6fec6767feb270c1ee25b39888e0afd46fc8d")
      override fun dropdown(dropdown: FilterDropDownControlProperty.Builder.() -> Unit): Unit =
          dropdown(FilterDropDownControlProperty(dropdown))

      /**
       * @param list A control to display a list of buttons or boxes.
       * This is used to select either a single value or multiple values.
       */
      override fun list(list: IResolvable) {
        cdkBuilder.list(list.let(IResolvable::unwrap))
      }

      /**
       * @param list A control to display a list of buttons or boxes.
       * This is used to select either a single value or multiple values.
       */
      override fun list(list: FilterListControlProperty) {
        cdkBuilder.list(list.let(FilterListControlProperty::unwrap))
      }

      /**
       * @param list A control to display a list of buttons or boxes.
       * This is used to select either a single value or multiple values.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7818b8d00d12d3458d01a677b5df772379bc08997b3cc48ac9d5d75afebffeec")
      override fun list(list: FilterListControlProperty.Builder.() -> Unit): Unit =
          list(FilterListControlProperty(list))

      /**
       * @param relativeDateTime A control from a date filter that is used to specify the relative
       * date.
       */
      override fun relativeDateTime(relativeDateTime: IResolvable) {
        cdkBuilder.relativeDateTime(relativeDateTime.let(IResolvable::unwrap))
      }

      /**
       * @param relativeDateTime A control from a date filter that is used to specify the relative
       * date.
       */
      override fun relativeDateTime(relativeDateTime: FilterRelativeDateTimeControlProperty) {
        cdkBuilder.relativeDateTime(relativeDateTime.let(FilterRelativeDateTimeControlProperty::unwrap))
      }

      /**
       * @param relativeDateTime A control from a date filter that is used to specify the relative
       * date.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b01cf29c6ad780492afd40abcc6b7bf3c415841b60c6c06ae5497dab7062d913")
      override
          fun relativeDateTime(relativeDateTime: FilterRelativeDateTimeControlProperty.Builder.() -> Unit):
          Unit = relativeDateTime(FilterRelativeDateTimeControlProperty(relativeDateTime))

      /**
       * @param slider A control to display a horizontal toggle bar.
       * This is used to change a value by sliding the toggle.
       */
      override fun slider(slider: IResolvable) {
        cdkBuilder.slider(slider.let(IResolvable::unwrap))
      }

      /**
       * @param slider A control to display a horizontal toggle bar.
       * This is used to change a value by sliding the toggle.
       */
      override fun slider(slider: FilterSliderControlProperty) {
        cdkBuilder.slider(slider.let(FilterSliderControlProperty::unwrap))
      }

      /**
       * @param slider A control to display a horizontal toggle bar.
       * This is used to change a value by sliding the toggle.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0f17573d7ba731ff4cd52fb9ade99e79f2fdda995bfb1945ee62d8296a209dfe")
      override fun slider(slider: FilterSliderControlProperty.Builder.() -> Unit): Unit =
          slider(FilterSliderControlProperty(slider))

      /**
       * @param textArea A control to display a text box that is used to enter multiple entries.
       */
      override fun textArea(textArea: IResolvable) {
        cdkBuilder.textArea(textArea.let(IResolvable::unwrap))
      }

      /**
       * @param textArea A control to display a text box that is used to enter multiple entries.
       */
      override fun textArea(textArea: FilterTextAreaControlProperty) {
        cdkBuilder.textArea(textArea.let(FilterTextAreaControlProperty::unwrap))
      }

      /**
       * @param textArea A control to display a text box that is used to enter multiple entries.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("54127111450b30f0f250087f8d3a04c860e96f72be4f3bb756b8d8f5fbf3dbd8")
      override fun textArea(textArea: FilterTextAreaControlProperty.Builder.() -> Unit): Unit =
          textArea(FilterTextAreaControlProperty(textArea))

      /**
       * @param textField A control to display a text box that is used to enter a single entry.
       */
      override fun textField(textField: IResolvable) {
        cdkBuilder.textField(textField.let(IResolvable::unwrap))
      }

      /**
       * @param textField A control to display a text box that is used to enter a single entry.
       */
      override fun textField(textField: FilterTextFieldControlProperty) {
        cdkBuilder.textField(textField.let(FilterTextFieldControlProperty::unwrap))
      }

      /**
       * @param textField A control to display a text box that is used to enter a single entry.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2d2a538fdbce8928201566e220956502376dd346b0a4176db6d71a8ffed4c64b")
      override fun textField(textField: FilterTextFieldControlProperty.Builder.() -> Unit): Unit =
          textField(FilterTextFieldControlProperty(textField))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterControlProperty,
    ) : FilterControlProperty {
      /**
       * A control from a date filter that is used to specify date and time.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-datetimepicker)
       */
      override fun dateTimePicker(): Any? = unwrap(this).getDateTimePicker()

      /**
       * A control to display a dropdown list with buttons that are used to select a single value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-dropdown)
       */
      override fun dropdown(): Any? = unwrap(this).getDropdown()

      /**
       * A control to display a list of buttons or boxes.
       *
       * This is used to select either a single value or multiple values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-list)
       */
      override fun list(): Any? = unwrap(this).getList()

      /**
       * A control from a date filter that is used to specify the relative date.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-relativedatetime)
       */
      override fun relativeDateTime(): Any? = unwrap(this).getRelativeDateTime()

      /**
       * A control to display a horizontal toggle bar.
       *
       * This is used to change a value by sliding the toggle.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-slider)
       */
      override fun slider(): Any? = unwrap(this).getSlider()

      /**
       * A control to display a text box that is used to enter multiple entries.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-textarea)
       */
      override fun textArea(): Any? = unwrap(this).getTextArea()

      /**
       * A control to display a text box that is used to enter a single entry.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-textfield)
       */
      override fun textField(): Any? = unwrap(this).getTextField()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilterControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterControlProperty):
          FilterControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterControlProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface TotalAggregationOptionProperty {
    /**
     * The field id that's associated with the total aggregation option.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationoption.html#cfn-quicksight-analysis-totalaggregationoption-fieldid)
     */
    public fun fieldId(): String

    /**
     * The total aggregation function that you want to set for a specified field id.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationoption.html#cfn-quicksight-analysis-totalaggregationoption-totalaggregationfunction)
     */
    public fun totalAggregationFunction(): Any

    /**
     * A builder for [TotalAggregationOptionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldId The field id that's associated with the total aggregation option. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param totalAggregationFunction The total aggregation function that you want to set for a
       * specified field id. 
       */
      public fun totalAggregationFunction(totalAggregationFunction: IResolvable)

      /**
       * @param totalAggregationFunction The total aggregation function that you want to set for a
       * specified field id. 
       */
      public
          fun totalAggregationFunction(totalAggregationFunction: TotalAggregationFunctionProperty)

      /**
       * @param totalAggregationFunction The total aggregation function that you want to set for a
       * specified field id. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6a3cbad0e16104a46b8e4334b949989cce70073b8bc6d86b567905b0cb068d3f")
      public
          fun totalAggregationFunction(totalAggregationFunction: TotalAggregationFunctionProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationOptionProperty.builder()

      /**
       * @param fieldId The field id that's associated with the total aggregation option. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param totalAggregationFunction The total aggregation function that you want to set for a
       * specified field id. 
       */
      override fun totalAggregationFunction(totalAggregationFunction: IResolvable) {
        cdkBuilder.totalAggregationFunction(totalAggregationFunction.let(IResolvable::unwrap))
      }

      /**
       * @param totalAggregationFunction The total aggregation function that you want to set for a
       * specified field id. 
       */
      override
          fun totalAggregationFunction(totalAggregationFunction: TotalAggregationFunctionProperty) {
        cdkBuilder.totalAggregationFunction(totalAggregationFunction.let(TotalAggregationFunctionProperty::unwrap))
      }

      /**
       * @param totalAggregationFunction The total aggregation function that you want to set for a
       * specified field id. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6a3cbad0e16104a46b8e4334b949989cce70073b8bc6d86b567905b0cb068d3f")
      override
          fun totalAggregationFunction(totalAggregationFunction: TotalAggregationFunctionProperty.Builder.() -> Unit):
          Unit =
          totalAggregationFunction(TotalAggregationFunctionProperty(totalAggregationFunction))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationOptionProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationOptionProperty,
    ) : TotalAggregationOptionProperty {
      /**
       * The field id that's associated with the total aggregation option.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationoption.html#cfn-quicksight-analysis-totalaggregationoption-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The total aggregation function that you want to set for a specified field id.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationoption.html#cfn-quicksight-analysis-totalaggregationoption-totalaggregationfunction)
       */
      override fun totalAggregationFunction(): Any = unwrap(this).getTotalAggregationFunction()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TotalAggregationOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationOptionProperty):
          TotalAggregationOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TotalAggregationOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationOptionProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FunnelChartFieldWellsProperty {
    /**
     * The field well configuration of a `FunnelChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartfieldwells.html#cfn-quicksight-analysis-funnelchartfieldwells-funnelchartaggregatedfieldwells)
     */
    public fun funnelChartAggregatedFieldWells(): Any? =
        unwrap(this).getFunnelChartAggregatedFieldWells()

    /**
     * A builder for [FunnelChartFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param funnelChartAggregatedFieldWells The field well configuration of a
       * `FunnelChartVisual` .
       */
      public fun funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells: IResolvable)

      /**
       * @param funnelChartAggregatedFieldWells The field well configuration of a
       * `FunnelChartVisual` .
       */
      public
          fun funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells: FunnelChartAggregatedFieldWellsProperty)

      /**
       * @param funnelChartAggregatedFieldWells The field well configuration of a
       * `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5ba82beaedbe469d4632f0fa6c2a41f3e2e823d18b9f600d29cf286bb749a92d")
      public
          fun funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells: FunnelChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartFieldWellsProperty.builder()

      /**
       * @param funnelChartAggregatedFieldWells The field well configuration of a
       * `FunnelChartVisual` .
       */
      override fun funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param funnelChartAggregatedFieldWells The field well configuration of a
       * `FunnelChartVisual` .
       */
      override
          fun funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells: FunnelChartAggregatedFieldWellsProperty) {
        cdkBuilder.funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells.let(FunnelChartAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param funnelChartAggregatedFieldWells The field well configuration of a
       * `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5ba82beaedbe469d4632f0fa6c2a41f3e2e823d18b9f600d29cf286bb749a92d")
      override
          fun funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells: FunnelChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          funnelChartAggregatedFieldWells(FunnelChartAggregatedFieldWellsProperty(funnelChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartFieldWellsProperty,
    ) : FunnelChartFieldWellsProperty {
      /**
       * The field well configuration of a `FunnelChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartfieldwells.html#cfn-quicksight-analysis-funnelchartfieldwells-funnelchartaggregatedfieldwells)
       */
      override fun funnelChartAggregatedFieldWells(): Any? =
          unwrap(this).getFunnelChartAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FunnelChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartFieldWellsProperty):
          FunnelChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FunnelChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ScatterPlotFieldWellsProperty {
    /**
     * The aggregated field wells of a scatter plot.
     *
     * The x and y-axes of scatter plots with aggregated field wells are aggregated by category,
     * label, or both.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotfieldwells.html#cfn-quicksight-analysis-scatterplotfieldwells-scatterplotcategoricallyaggregatedfieldwells)
     */
    public fun scatterPlotCategoricallyAggregatedFieldWells(): Any? =
        unwrap(this).getScatterPlotCategoricallyAggregatedFieldWells()

    /**
     * The unaggregated field wells of a scatter plot.
     *
     * The x and y-axes of these scatter plots are unaggregated.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotfieldwells.html#cfn-quicksight-analysis-scatterplotfieldwells-scatterplotunaggregatedfieldwells)
     */
    public fun scatterPlotUnaggregatedFieldWells(): Any? =
        unwrap(this).getScatterPlotUnaggregatedFieldWells()

    /**
     * A builder for [ScatterPlotFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param scatterPlotCategoricallyAggregatedFieldWells The aggregated field wells of a scatter
       * plot.
       * The x and y-axes of scatter plots with aggregated field wells are aggregated by category,
       * label, or both.
       */
      public
          fun scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells: IResolvable)

      /**
       * @param scatterPlotCategoricallyAggregatedFieldWells The aggregated field wells of a scatter
       * plot.
       * The x and y-axes of scatter plots with aggregated field wells are aggregated by category,
       * label, or both.
       */
      public
          fun scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells: ScatterPlotCategoricallyAggregatedFieldWellsProperty)

      /**
       * @param scatterPlotCategoricallyAggregatedFieldWells The aggregated field wells of a scatter
       * plot.
       * The x and y-axes of scatter plots with aggregated field wells are aggregated by category,
       * label, or both.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2d863f476bc91e20143056df6a60523d532aa8c94d480f88e437ffe9887ae934")
      public
          fun scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells: ScatterPlotCategoricallyAggregatedFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param scatterPlotUnaggregatedFieldWells The unaggregated field wells of a scatter plot.
       * The x and y-axes of these scatter plots are unaggregated.
       */
      public fun scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells: IResolvable)

      /**
       * @param scatterPlotUnaggregatedFieldWells The unaggregated field wells of a scatter plot.
       * The x and y-axes of these scatter plots are unaggregated.
       */
      public
          fun scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells: ScatterPlotUnaggregatedFieldWellsProperty)

      /**
       * @param scatterPlotUnaggregatedFieldWells The unaggregated field wells of a scatter plot.
       * The x and y-axes of these scatter plots are unaggregated.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4fe438e13799b52f534c7b6943cce1e67c05b293c24bcd15068b3555f2fd8406")
      public
          fun scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells: ScatterPlotUnaggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotFieldWellsProperty.builder()

      /**
       * @param scatterPlotCategoricallyAggregatedFieldWells The aggregated field wells of a scatter
       * plot.
       * The x and y-axes of scatter plots with aggregated field wells are aggregated by category,
       * label, or both.
       */
      override
          fun scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells: IResolvable) {
        cdkBuilder.scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param scatterPlotCategoricallyAggregatedFieldWells The aggregated field wells of a scatter
       * plot.
       * The x and y-axes of scatter plots with aggregated field wells are aggregated by category,
       * label, or both.
       */
      override
          fun scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells: ScatterPlotCategoricallyAggregatedFieldWellsProperty) {
        cdkBuilder.scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells.let(ScatterPlotCategoricallyAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param scatterPlotCategoricallyAggregatedFieldWells The aggregated field wells of a scatter
       * plot.
       * The x and y-axes of scatter plots with aggregated field wells are aggregated by category,
       * label, or both.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2d863f476bc91e20143056df6a60523d532aa8c94d480f88e437ffe9887ae934")
      override
          fun scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells: ScatterPlotCategoricallyAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          scatterPlotCategoricallyAggregatedFieldWells(ScatterPlotCategoricallyAggregatedFieldWellsProperty(scatterPlotCategoricallyAggregatedFieldWells))

      /**
       * @param scatterPlotUnaggregatedFieldWells The unaggregated field wells of a scatter plot.
       * The x and y-axes of these scatter plots are unaggregated.
       */
      override
          fun scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells: IResolvable) {
        cdkBuilder.scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param scatterPlotUnaggregatedFieldWells The unaggregated field wells of a scatter plot.
       * The x and y-axes of these scatter plots are unaggregated.
       */
      override
          fun scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells: ScatterPlotUnaggregatedFieldWellsProperty) {
        cdkBuilder.scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells.let(ScatterPlotUnaggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param scatterPlotUnaggregatedFieldWells The unaggregated field wells of a scatter plot.
       * The x and y-axes of these scatter plots are unaggregated.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4fe438e13799b52f534c7b6943cce1e67c05b293c24bcd15068b3555f2fd8406")
      override
          fun scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells: ScatterPlotUnaggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          scatterPlotUnaggregatedFieldWells(ScatterPlotUnaggregatedFieldWellsProperty(scatterPlotUnaggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotFieldWellsProperty,
    ) : ScatterPlotFieldWellsProperty {
      /**
       * The aggregated field wells of a scatter plot.
       *
       * The x and y-axes of scatter plots with aggregated field wells are aggregated by category,
       * label, or both.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotfieldwells.html#cfn-quicksight-analysis-scatterplotfieldwells-scatterplotcategoricallyaggregatedfieldwells)
       */
      override fun scatterPlotCategoricallyAggregatedFieldWells(): Any? =
          unwrap(this).getScatterPlotCategoricallyAggregatedFieldWells()

      /**
       * The unaggregated field wells of a scatter plot.
       *
       * The x and y-axes of these scatter plots are unaggregated.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotfieldwells.html#cfn-quicksight-analysis-scatterplotfieldwells-scatterplotunaggregatedfieldwells)
       */
      override fun scatterPlotUnaggregatedFieldWells(): Any? =
          unwrap(this).getScatterPlotUnaggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ScatterPlotFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotFieldWellsProperty):
          ScatterPlotFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ScatterPlotFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface CategoryDrillDownFilterProperty {
    /**
     * A list of the string inputs that are the values of the category drill down filter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categorydrilldownfilter.html#cfn-quicksight-analysis-categorydrilldownfilter-categoryvalues)
     */
    public fun categoryValues(): List<String>

    /**
     * The column that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categorydrilldownfilter.html#cfn-quicksight-analysis-categorydrilldownfilter-column)
     */
    public fun column(): Any

    /**
     * A builder for [CategoryDrillDownFilterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryValues A list of the string inputs that are the values of the category drill
       * down filter. 
       */
      public fun categoryValues(categoryValues: List<String>)

      /**
       * @param categoryValues A list of the string inputs that are the values of the category drill
       * down filter. 
       */
      public fun categoryValues(vararg categoryValues: String)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf9a1cfd69a8cc434c3895595f32bc19148b6dc0c1de742614ee9d6e613a695f")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryDrillDownFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryDrillDownFilterProperty.builder()

      /**
       * @param categoryValues A list of the string inputs that are the values of the category drill
       * down filter. 
       */
      override fun categoryValues(categoryValues: List<String>) {
        cdkBuilder.categoryValues(categoryValues)
      }

      /**
       * @param categoryValues A list of the string inputs that are the values of the category drill
       * down filter. 
       */
      override fun categoryValues(vararg categoryValues: String): Unit =
          categoryValues(categoryValues.toList())

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf9a1cfd69a8cc434c3895595f32bc19148b6dc0c1de742614ee9d6e613a695f")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryDrillDownFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryDrillDownFilterProperty,
    ) : CategoryDrillDownFilterProperty {
      /**
       * A list of the string inputs that are the values of the category drill down filter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categorydrilldownfilter.html#cfn-quicksight-analysis-categorydrilldownfilter-categoryvalues)
       */
      override fun categoryValues(): List<String> = unwrap(this).getCategoryValues()

      /**
       * The column that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categorydrilldownfilter.html#cfn-quicksight-analysis-categorydrilldownfilter-column)
       */
      override fun column(): Any = unwrap(this).getColumn()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): CategoryDrillDownFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryDrillDownFilterProperty):
          CategoryDrillDownFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CategoryDrillDownFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryDrillDownFilterProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilledMapVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration settings of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The conditional formatting of a `FilledMapVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-conditionalformatting)
     */
    public fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers..
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [FilledMapVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: FilledMapConfigurationProperty)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9d688bdf0d76cf6cfc23408ca70944036e30375164253ab1a989b0bc8058cb2d")
      public
          fun chartConfiguration(chartConfiguration: FilledMapConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param conditionalFormatting The conditional formatting of a `FilledMapVisual` .
       */
      public fun conditionalFormatting(conditionalFormatting: IResolvable)

      /**
       * @param conditionalFormatting The conditional formatting of a `FilledMapVisual` .
       */
      public
          fun conditionalFormatting(conditionalFormatting: FilledMapConditionalFormattingProperty)

      /**
       * @param conditionalFormatting The conditional formatting of a `FilledMapVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("428c6ffcd1855ed052085930c509074ea6ea76699f2d0d0d9e7928aac57b8e18")
      public
          fun conditionalFormatting(conditionalFormatting: FilledMapConditionalFormattingProperty.Builder.() -> Unit)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d4c3feadeab114ead61e9fff11a670cc19c00ac9b2a264963589b085548a0ce9")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b441eceb9e2885f396d36f4aa7ebf2b11ba6970fc62dc2a5dc9bb37fe981a50")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: FilledMapConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(FilledMapConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9d688bdf0d76cf6cfc23408ca70944036e30375164253ab1a989b0bc8058cb2d")
      override
          fun chartConfiguration(chartConfiguration: FilledMapConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(FilledMapConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param conditionalFormatting The conditional formatting of a `FilledMapVisual` .
       */
      override fun conditionalFormatting(conditionalFormatting: IResolvable) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(IResolvable::unwrap))
      }

      /**
       * @param conditionalFormatting The conditional formatting of a `FilledMapVisual` .
       */
      override
          fun conditionalFormatting(conditionalFormatting: FilledMapConditionalFormattingProperty) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(FilledMapConditionalFormattingProperty::unwrap))
      }

      /**
       * @param conditionalFormatting The conditional formatting of a `FilledMapVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("428c6ffcd1855ed052085930c509074ea6ea76699f2d0d0d9e7928aac57b8e18")
      override
          fun conditionalFormatting(conditionalFormatting: FilledMapConditionalFormattingProperty.Builder.() -> Unit):
          Unit =
          conditionalFormatting(FilledMapConditionalFormattingProperty(conditionalFormatting))

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d4c3feadeab114ead61e9fff11a670cc19c00ac9b2a264963589b085548a0ce9")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b441eceb9e2885f396d36f4aa7ebf2b11ba6970fc62dc2a5dc9bb37fe981a50")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapVisualProperty,
    ) : FilledMapVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration settings of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The conditional formatting of a `FilledMapVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-conditionalformatting)
       */
      override fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilledMapVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapVisualProperty):
          FilledMapVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapVisualProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface KPIConfigurationProperty {
    /**
     * The field well configuration of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconfiguration.html#cfn-quicksight-analysis-kpiconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The options that determine the presentation of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconfiguration.html#cfn-quicksight-analysis-kpiconfiguration-kpioptions)
     */
    public fun kpiOptions(): Any? = unwrap(this).getKpiOptions()

    /**
     * The sort configuration of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconfiguration.html#cfn-quicksight-analysis-kpiconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * A builder for [KPIConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldWells The field well configuration of a KPI visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field well configuration of a KPI visual.
       */
      public fun fieldWells(fieldWells: KPIFieldWellsProperty)

      /**
       * @param fieldWells The field well configuration of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6b5930eed5c14161f102bd3e93b7b8d30e90a3d8e7bceab63b534acb643ba5e9")
      public fun fieldWells(fieldWells: KPIFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param kpiOptions The options that determine the presentation of a KPI visual.
       */
      public fun kpiOptions(kpiOptions: IResolvable)

      /**
       * @param kpiOptions The options that determine the presentation of a KPI visual.
       */
      public fun kpiOptions(kpiOptions: KPIOptionsProperty)

      /**
       * @param kpiOptions The options that determine the presentation of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("731e80301857814bfebadd0df1f7a256423f9630fe9f3d1b2766bffe17867af9")
      public fun kpiOptions(kpiOptions: KPIOptionsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration of a KPI visual.
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a KPI visual.
       */
      public fun sortConfiguration(sortConfiguration: KPISortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("77e8264bd604f09a993e4904ec99f7360cc45c7343c708ec99bba4bd9b6998ad")
      public
          fun sortConfiguration(sortConfiguration: KPISortConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConfigurationProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConfigurationProperty.builder()

      /**
       * @param fieldWells The field well configuration of a KPI visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a KPI visual.
       */
      override fun fieldWells(fieldWells: KPIFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(KPIFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6b5930eed5c14161f102bd3e93b7b8d30e90a3d8e7bceab63b534acb643ba5e9")
      override fun fieldWells(fieldWells: KPIFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(KPIFieldWellsProperty(fieldWells))

      /**
       * @param kpiOptions The options that determine the presentation of a KPI visual.
       */
      override fun kpiOptions(kpiOptions: IResolvable) {
        cdkBuilder.kpiOptions(kpiOptions.let(IResolvable::unwrap))
      }

      /**
       * @param kpiOptions The options that determine the presentation of a KPI visual.
       */
      override fun kpiOptions(kpiOptions: KPIOptionsProperty) {
        cdkBuilder.kpiOptions(kpiOptions.let(KPIOptionsProperty::unwrap))
      }

      /**
       * @param kpiOptions The options that determine the presentation of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("731e80301857814bfebadd0df1f7a256423f9630fe9f3d1b2766bffe17867af9")
      override fun kpiOptions(kpiOptions: KPIOptionsProperty.Builder.() -> Unit): Unit =
          kpiOptions(KPIOptionsProperty(kpiOptions))

      /**
       * @param sortConfiguration The sort configuration of a KPI visual.
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a KPI visual.
       */
      override fun sortConfiguration(sortConfiguration: KPISortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(KPISortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("77e8264bd604f09a993e4904ec99f7360cc45c7343c708ec99bba4bd9b6998ad")
      override
          fun sortConfiguration(sortConfiguration: KPISortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(KPISortConfigurationProperty(sortConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConfigurationProperty,
    ) : KPIConfigurationProperty {
      /**
       * The field well configuration of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconfiguration.html#cfn-quicksight-analysis-kpiconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The options that determine the presentation of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconfiguration.html#cfn-quicksight-analysis-kpiconfiguration-kpioptions)
       */
      override fun kpiOptions(): Any? = unwrap(this).getKpiOptions()

      /**
       * The sort configuration of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconfiguration.html#cfn-quicksight-analysis-kpiconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): KPIConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConfigurationProperty):
          KPIConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConfigurationProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface ConditionalFormattingColorProperty {
    /**
     * Formatting configuration for gradient color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcolor.html#cfn-quicksight-analysis-conditionalformattingcolor-gradient)
     */
    public fun gradient(): Any? = unwrap(this).getGradient()

    /**
     * Formatting configuration for solid color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcolor.html#cfn-quicksight-analysis-conditionalformattingcolor-solid)
     */
    public fun solid(): Any? = unwrap(this).getSolid()

    /**
     * A builder for [ConditionalFormattingColorProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param gradient Formatting configuration for gradient color.
       */
      public fun gradient(gradient: IResolvable)

      /**
       * @param gradient Formatting configuration for gradient color.
       */
      public fun gradient(gradient: ConditionalFormattingGradientColorProperty)

      /**
       * @param gradient Formatting configuration for gradient color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3950c79ad612c2dd2665fb72c2d78f696c0fa98a3fdb9cbf86606725ea6ca707")
      public fun gradient(gradient: ConditionalFormattingGradientColorProperty.Builder.() -> Unit)

      /**
       * @param solid Formatting configuration for solid color.
       */
      public fun solid(solid: IResolvable)

      /**
       * @param solid Formatting configuration for solid color.
       */
      public fun solid(solid: ConditionalFormattingSolidColorProperty)

      /**
       * @param solid Formatting configuration for solid color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d9ceaa69a33ecdeba00337e805573fd8e416038390fa96f5c5a17fea1c301a62")
      public fun solid(solid: ConditionalFormattingSolidColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingColorProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingColorProperty.builder()

      /**
       * @param gradient Formatting configuration for gradient color.
       */
      override fun gradient(gradient: IResolvable) {
        cdkBuilder.gradient(gradient.let(IResolvable::unwrap))
      }

      /**
       * @param gradient Formatting configuration for gradient color.
       */
      override fun gradient(gradient: ConditionalFormattingGradientColorProperty) {
        cdkBuilder.gradient(gradient.let(ConditionalFormattingGradientColorProperty::unwrap))
      }

      /**
       * @param gradient Formatting configuration for gradient color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3950c79ad612c2dd2665fb72c2d78f696c0fa98a3fdb9cbf86606725ea6ca707")
      override
          fun gradient(gradient: ConditionalFormattingGradientColorProperty.Builder.() -> Unit):
          Unit = gradient(ConditionalFormattingGradientColorProperty(gradient))

      /**
       * @param solid Formatting configuration for solid color.
       */
      override fun solid(solid: IResolvable) {
        cdkBuilder.solid(solid.let(IResolvable::unwrap))
      }

      /**
       * @param solid Formatting configuration for solid color.
       */
      override fun solid(solid: ConditionalFormattingSolidColorProperty) {
        cdkBuilder.solid(solid.let(ConditionalFormattingSolidColorProperty::unwrap))
      }

      /**
       * @param solid Formatting configuration for solid color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d9ceaa69a33ecdeba00337e805573fd8e416038390fa96f5c5a17fea1c301a62")
      override fun solid(solid: ConditionalFormattingSolidColorProperty.Builder.() -> Unit): Unit =
          solid(ConditionalFormattingSolidColorProperty(solid))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingColorProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingColorProperty,
    ) : ConditionalFormattingColorProperty {
      /**
       * Formatting configuration for gradient color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcolor.html#cfn-quicksight-analysis-conditionalformattingcolor-gradient)
       */
      override fun gradient(): Any? = unwrap(this).getGradient()

      /**
       * Formatting configuration for solid color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcolor.html#cfn-quicksight-analysis-conditionalformattingcolor-solid)
       */
      override fun solid(): Any? = unwrap(this).getSolid()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingColorProperty):
          ConditionalFormattingColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingColorProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingColorProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DateTimeParameterProperty {
    /**
     * A display name for the date-time parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameter.html#cfn-quicksight-analysis-datetimeparameter-name)
     */
    public fun name(): String

    /**
     * The values for the date-time parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameter.html#cfn-quicksight-analysis-datetimeparameter-values)
     */
    public fun values(): List<String>

    /**
     * A builder for [DateTimeParameterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param name A display name for the date-time parameter. 
       */
      public fun name(name: String)

      /**
       * @param values The values for the date-time parameter. 
       */
      public fun values(values: List<String>)

      /**
       * @param values The values for the date-time parameter. 
       */
      public fun values(vararg values: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeParameterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeParameterProperty.builder()

      /**
       * @param name A display name for the date-time parameter. 
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param values The values for the date-time parameter. 
       */
      override fun values(values: List<String>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The values for the date-time parameter. 
       */
      override fun values(vararg values: String): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeParameterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeParameterProperty,
    ) : DateTimeParameterProperty {
      /**
       * A display name for the date-time parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameter.html#cfn-quicksight-analysis-datetimeparameter-name)
       */
      override fun name(): String = unwrap(this).getName()

      /**
       * The values for the date-time parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameter.html#cfn-quicksight-analysis-datetimeparameter-values)
       */
      override fun values(): List<String> = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DateTimeParameterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeParameterProperty):
          DateTimeParameterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimeParameterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeParameterProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GeospatialMapFieldWellsProperty {
    /**
     * The aggregated field well for a geospatial map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapfieldwells.html#cfn-quicksight-analysis-geospatialmapfieldwells-geospatialmapaggregatedfieldwells)
     */
    public fun geospatialMapAggregatedFieldWells(): Any? =
        unwrap(this).getGeospatialMapAggregatedFieldWells()

    /**
     * A builder for [GeospatialMapFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param geospatialMapAggregatedFieldWells The aggregated field well for a geospatial map.
       */
      public fun geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells: IResolvable)

      /**
       * @param geospatialMapAggregatedFieldWells The aggregated field well for a geospatial map.
       */
      public
          fun geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells: GeospatialMapAggregatedFieldWellsProperty)

      /**
       * @param geospatialMapAggregatedFieldWells The aggregated field well for a geospatial map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("984e0eb1789412e46dc1a8c8146e5dbbe927541ada20825203b76af30890665b")
      public
          fun geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells: GeospatialMapAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapFieldWellsProperty.builder()

      /**
       * @param geospatialMapAggregatedFieldWells The aggregated field well for a geospatial map.
       */
      override
          fun geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells: IResolvable) {
        cdkBuilder.geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param geospatialMapAggregatedFieldWells The aggregated field well for a geospatial map.
       */
      override
          fun geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells: GeospatialMapAggregatedFieldWellsProperty) {
        cdkBuilder.geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells.let(GeospatialMapAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param geospatialMapAggregatedFieldWells The aggregated field well for a geospatial map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("984e0eb1789412e46dc1a8c8146e5dbbe927541ada20825203b76af30890665b")
      override
          fun geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells: GeospatialMapAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          geospatialMapAggregatedFieldWells(GeospatialMapAggregatedFieldWellsProperty(geospatialMapAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapFieldWellsProperty,
    ) : GeospatialMapFieldWellsProperty {
      /**
       * The aggregated field well for a geospatial map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapfieldwells.html#cfn-quicksight-analysis-geospatialmapfieldwells-geospatialmapaggregatedfieldwells)
       */
      override fun geospatialMapAggregatedFieldWells(): Any? =
          unwrap(this).getGeospatialMapAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GeospatialMapFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapFieldWellsProperty):
          GeospatialMapFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialMapFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface WaterfallChartFieldWellsProperty {
    /**
     * The field well configuration of a waterfall visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartfieldwells.html#cfn-quicksight-analysis-waterfallchartfieldwells-waterfallchartaggregatedfieldwells)
     */
    public fun waterfallChartAggregatedFieldWells(): Any? =
        unwrap(this).getWaterfallChartAggregatedFieldWells()

    /**
     * A builder for [WaterfallChartFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param waterfallChartAggregatedFieldWells The field well configuration of a waterfall
       * visual.
       */
      public fun waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells: IResolvable)

      /**
       * @param waterfallChartAggregatedFieldWells The field well configuration of a waterfall
       * visual.
       */
      public
          fun waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells: WaterfallChartAggregatedFieldWellsProperty)

      /**
       * @param waterfallChartAggregatedFieldWells The field well configuration of a waterfall
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c8ff581ecdf4cca965867c787eddcb5ced23238413e6a9fec89ee1a755373f66")
      public
          fun waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells: WaterfallChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartFieldWellsProperty.builder()

      /**
       * @param waterfallChartAggregatedFieldWells The field well configuration of a waterfall
       * visual.
       */
      override
          fun waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param waterfallChartAggregatedFieldWells The field well configuration of a waterfall
       * visual.
       */
      override
          fun waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells: WaterfallChartAggregatedFieldWellsProperty) {
        cdkBuilder.waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells.let(WaterfallChartAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param waterfallChartAggregatedFieldWells The field well configuration of a waterfall
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c8ff581ecdf4cca965867c787eddcb5ced23238413e6a9fec89ee1a755373f66")
      override
          fun waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells: WaterfallChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          waterfallChartAggregatedFieldWells(WaterfallChartAggregatedFieldWellsProperty(waterfallChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartFieldWellsProperty,
    ) : WaterfallChartFieldWellsProperty {
      /**
       * The field well configuration of a waterfall visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartfieldwells.html#cfn-quicksight-analysis-waterfallchartfieldwells-waterfallchartaggregatedfieldwells)
       */
      override fun waterfallChartAggregatedFieldWells(): Any? =
          unwrap(this).getWaterfallChartAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): WaterfallChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartFieldWellsProperty):
          WaterfallChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WaterfallChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableFieldOptionProperty {
    /**
     * The custom label of the pivot table field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoption.html#cfn-quicksight-analysis-pivottablefieldoption-customlabel)
     */
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    /**
     * The field ID of the pivot table field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoption.html#cfn-quicksight-analysis-pivottablefieldoption-fieldid)
     */
    public fun fieldId(): String

    /**
     * The visibility of the pivot table field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoption.html#cfn-quicksight-analysis-pivottablefieldoption-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [PivotTableFieldOptionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customLabel The custom label of the pivot table field.
       */
      public fun customLabel(customLabel: String)

      /**
       * @param fieldId The field ID of the pivot table field. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param visibility The visibility of the pivot table field.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldOptionProperty.builder()

      /**
       * @param customLabel The custom label of the pivot table field.
       */
      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      /**
       * @param fieldId The field ID of the pivot table field. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param visibility The visibility of the pivot table field.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldOptionProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldOptionProperty,
    ) : PivotTableFieldOptionProperty {
      /**
       * The custom label of the pivot table field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoption.html#cfn-quicksight-analysis-pivottablefieldoption-customlabel)
       */
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      /**
       * The field ID of the pivot table field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoption.html#cfn-quicksight-analysis-pivottablefieldoption-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The visibility of the pivot table field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoption.html#cfn-quicksight-analysis-pivottablefieldoption-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableFieldOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldOptionProperty):
          PivotTableFieldOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableFieldOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldOptionProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface DrillDownFilterProperty {
    /**
     * The category type drill down filter.
     *
     * This filter is used for string type columns.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-drilldownfilter.html#cfn-quicksight-analysis-drilldownfilter-categoryfilter)
     */
    public fun categoryFilter(): Any? = unwrap(this).getCategoryFilter()

    /**
     * The numeric equality type drill down filter.
     *
     * This filter is used for number type columns.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-drilldownfilter.html#cfn-quicksight-analysis-drilldownfilter-numericequalityfilter)
     */
    public fun numericEqualityFilter(): Any? = unwrap(this).getNumericEqualityFilter()

    /**
     * The time range drill down filter.
     *
     * This filter is used for date time columns.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-drilldownfilter.html#cfn-quicksight-analysis-drilldownfilter-timerangefilter)
     */
    public fun timeRangeFilter(): Any? = unwrap(this).getTimeRangeFilter()

    /**
     * A builder for [DrillDownFilterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryFilter The category type drill down filter.
       * This filter is used for string type columns.
       */
      public fun categoryFilter(categoryFilter: IResolvable)

      /**
       * @param categoryFilter The category type drill down filter.
       * This filter is used for string type columns.
       */
      public fun categoryFilter(categoryFilter: CategoryDrillDownFilterProperty)

      /**
       * @param categoryFilter The category type drill down filter.
       * This filter is used for string type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("af6eb43b01cb069e91d9d5d6702a293d09379a223b148f249b01311dfca677ec")
      public fun categoryFilter(categoryFilter: CategoryDrillDownFilterProperty.Builder.() -> Unit)

      /**
       * @param numericEqualityFilter The numeric equality type drill down filter.
       * This filter is used for number type columns.
       */
      public fun numericEqualityFilter(numericEqualityFilter: IResolvable)

      /**
       * @param numericEqualityFilter The numeric equality type drill down filter.
       * This filter is used for number type columns.
       */
      public
          fun numericEqualityFilter(numericEqualityFilter: NumericEqualityDrillDownFilterProperty)

      /**
       * @param numericEqualityFilter The numeric equality type drill down filter.
       * This filter is used for number type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c32eb7673041f84e84f03e32d565698b7bfe6ab9c53f391a0ff5de3d3d92975")
      public
          fun numericEqualityFilter(numericEqualityFilter: NumericEqualityDrillDownFilterProperty.Builder.() -> Unit)

      /**
       * @param timeRangeFilter The time range drill down filter.
       * This filter is used for date time columns.
       */
      public fun timeRangeFilter(timeRangeFilter: IResolvable)

      /**
       * @param timeRangeFilter The time range drill down filter.
       * This filter is used for date time columns.
       */
      public fun timeRangeFilter(timeRangeFilter: TimeRangeDrillDownFilterProperty)

      /**
       * @param timeRangeFilter The time range drill down filter.
       * This filter is used for date time columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("10e9a985eb531c66d015f23cf8905d8d0252fd7559225790d39d35d687e700b0")
      public
          fun timeRangeFilter(timeRangeFilter: TimeRangeDrillDownFilterProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DrillDownFilterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DrillDownFilterProperty.builder()

      /**
       * @param categoryFilter The category type drill down filter.
       * This filter is used for string type columns.
       */
      override fun categoryFilter(categoryFilter: IResolvable) {
        cdkBuilder.categoryFilter(categoryFilter.let(IResolvable::unwrap))
      }

      /**
       * @param categoryFilter The category type drill down filter.
       * This filter is used for string type columns.
       */
      override fun categoryFilter(categoryFilter: CategoryDrillDownFilterProperty) {
        cdkBuilder.categoryFilter(categoryFilter.let(CategoryDrillDownFilterProperty::unwrap))
      }

      /**
       * @param categoryFilter The category type drill down filter.
       * This filter is used for string type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("af6eb43b01cb069e91d9d5d6702a293d09379a223b148f249b01311dfca677ec")
      override
          fun categoryFilter(categoryFilter: CategoryDrillDownFilterProperty.Builder.() -> Unit):
          Unit = categoryFilter(CategoryDrillDownFilterProperty(categoryFilter))

      /**
       * @param numericEqualityFilter The numeric equality type drill down filter.
       * This filter is used for number type columns.
       */
      override fun numericEqualityFilter(numericEqualityFilter: IResolvable) {
        cdkBuilder.numericEqualityFilter(numericEqualityFilter.let(IResolvable::unwrap))
      }

      /**
       * @param numericEqualityFilter The numeric equality type drill down filter.
       * This filter is used for number type columns.
       */
      override
          fun numericEqualityFilter(numericEqualityFilter: NumericEqualityDrillDownFilterProperty) {
        cdkBuilder.numericEqualityFilter(numericEqualityFilter.let(NumericEqualityDrillDownFilterProperty::unwrap))
      }

      /**
       * @param numericEqualityFilter The numeric equality type drill down filter.
       * This filter is used for number type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c32eb7673041f84e84f03e32d565698b7bfe6ab9c53f391a0ff5de3d3d92975")
      override
          fun numericEqualityFilter(numericEqualityFilter: NumericEqualityDrillDownFilterProperty.Builder.() -> Unit):
          Unit =
          numericEqualityFilter(NumericEqualityDrillDownFilterProperty(numericEqualityFilter))

      /**
       * @param timeRangeFilter The time range drill down filter.
       * This filter is used for date time columns.
       */
      override fun timeRangeFilter(timeRangeFilter: IResolvable) {
        cdkBuilder.timeRangeFilter(timeRangeFilter.let(IResolvable::unwrap))
      }

      /**
       * @param timeRangeFilter The time range drill down filter.
       * This filter is used for date time columns.
       */
      override fun timeRangeFilter(timeRangeFilter: TimeRangeDrillDownFilterProperty) {
        cdkBuilder.timeRangeFilter(timeRangeFilter.let(TimeRangeDrillDownFilterProperty::unwrap))
      }

      /**
       * @param timeRangeFilter The time range drill down filter.
       * This filter is used for date time columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("10e9a985eb531c66d015f23cf8905d8d0252fd7559225790d39d35d687e700b0")
      override
          fun timeRangeFilter(timeRangeFilter: TimeRangeDrillDownFilterProperty.Builder.() -> Unit):
          Unit = timeRangeFilter(TimeRangeDrillDownFilterProperty(timeRangeFilter))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DrillDownFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DrillDownFilterProperty,
    ) : DrillDownFilterProperty {
      /**
       * The category type drill down filter.
       *
       * This filter is used for string type columns.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-drilldownfilter.html#cfn-quicksight-analysis-drilldownfilter-categoryfilter)
       */
      override fun categoryFilter(): Any? = unwrap(this).getCategoryFilter()

      /**
       * The numeric equality type drill down filter.
       *
       * This filter is used for number type columns.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-drilldownfilter.html#cfn-quicksight-analysis-drilldownfilter-numericequalityfilter)
       */
      override fun numericEqualityFilter(): Any? = unwrap(this).getNumericEqualityFilter()

      /**
       * The time range drill down filter.
       *
       * This filter is used for date time columns.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-drilldownfilter.html#cfn-quicksight-analysis-drilldownfilter-timerangefilter)
       */
      override fun timeRangeFilter(): Any? = unwrap(this).getTimeRangeFilter()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DrillDownFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DrillDownFilterProperty):
          DrillDownFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DrillDownFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DrillDownFilterProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface FilledMapConditionalFormattingProperty {
    /**
     * Conditional formatting options of a `FilledMapVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconditionalformatting.html#cfn-quicksight-analysis-filledmapconditionalformatting-conditionalformattingoptions)
     */
    public fun conditionalFormattingOptions(): Any

    /**
     * A builder for [FilledMapConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param conditionalFormattingOptions Conditional formatting options of a `FilledMapVisual` .
       * 
       */
      public fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable)

      /**
       * @param conditionalFormattingOptions Conditional formatting options of a `FilledMapVisual` .
       * 
       */
      public fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>)

      /**
       * @param conditionalFormattingOptions Conditional formatting options of a `FilledMapVisual` .
       * 
       */
      public fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConditionalFormattingProperty.builder()

      /**
       * @param conditionalFormattingOptions Conditional formatting options of a `FilledMapVisual` .
       * 
       */
      override fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions.let(IResolvable::unwrap))
      }

      /**
       * @param conditionalFormattingOptions Conditional formatting options of a `FilledMapVisual` .
       * 
       */
      override fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions)
      }

      /**
       * @param conditionalFormattingOptions Conditional formatting options of a `FilledMapVisual` .
       * 
       */
      override fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any): Unit =
          conditionalFormattingOptions(conditionalFormattingOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConditionalFormattingProperty,
    ) : FilledMapConditionalFormattingProperty {
      /**
       * Conditional formatting options of a `FilledMapVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconditionalformatting.html#cfn-quicksight-analysis-filledmapconditionalformatting-conditionalformattingoptions)
       */
      override fun conditionalFormattingOptions(): Any =
          unwrap(this).getConditionalFormattingOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilledMapConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConditionalFormattingProperty):
          FilledMapConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ReferenceLineCustomLabelConfigurationProperty {
    /**
     * The string text of the custom label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinecustomlabelconfiguration.html#cfn-quicksight-analysis-referencelinecustomlabelconfiguration-customlabel)
     */
    public fun customLabel(): String

    /**
     * A builder for [ReferenceLineCustomLabelConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customLabel The string text of the custom label. 
       */
      public fun customLabel(customLabel: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineCustomLabelConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineCustomLabelConfigurationProperty.builder()

      /**
       * @param customLabel The string text of the custom label. 
       */
      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineCustomLabelConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineCustomLabelConfigurationProperty,
    ) : ReferenceLineCustomLabelConfigurationProperty {
      /**
       * The string text of the custom label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinecustomlabelconfiguration.html#cfn-quicksight-analysis-referencelinecustomlabelconfiguration-customlabel)
       */
      override fun customLabel(): String = unwrap(this).getCustomLabel()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineCustomLabelConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineCustomLabelConfigurationProperty):
          ReferenceLineCustomLabelConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineCustomLabelConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineCustomLabelConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface BarChartFieldWellsProperty {
    /**
     * The aggregated field wells of a bar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartfieldwells.html#cfn-quicksight-analysis-barchartfieldwells-barchartaggregatedfieldwells)
     */
    public fun barChartAggregatedFieldWells(): Any? = unwrap(this).getBarChartAggregatedFieldWells()

    /**
     * A builder for [BarChartFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param barChartAggregatedFieldWells The aggregated field wells of a bar chart.
       */
      public fun barChartAggregatedFieldWells(barChartAggregatedFieldWells: IResolvable)

      /**
       * @param barChartAggregatedFieldWells The aggregated field wells of a bar chart.
       */
      public
          fun barChartAggregatedFieldWells(barChartAggregatedFieldWells: BarChartAggregatedFieldWellsProperty)

      /**
       * @param barChartAggregatedFieldWells The aggregated field wells of a bar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8144521cce7ce25d68e6aefa4fe9b7773f9770728a1a684e26703a3f55ce8ffa")
      public
          fun barChartAggregatedFieldWells(barChartAggregatedFieldWells: BarChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartFieldWellsProperty.builder()

      /**
       * @param barChartAggregatedFieldWells The aggregated field wells of a bar chart.
       */
      override fun barChartAggregatedFieldWells(barChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.barChartAggregatedFieldWells(barChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param barChartAggregatedFieldWells The aggregated field wells of a bar chart.
       */
      override
          fun barChartAggregatedFieldWells(barChartAggregatedFieldWells: BarChartAggregatedFieldWellsProperty) {
        cdkBuilder.barChartAggregatedFieldWells(barChartAggregatedFieldWells.let(BarChartAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param barChartAggregatedFieldWells The aggregated field wells of a bar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8144521cce7ce25d68e6aefa4fe9b7773f9770728a1a684e26703a3f55ce8ffa")
      override
          fun barChartAggregatedFieldWells(barChartAggregatedFieldWells: BarChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          barChartAggregatedFieldWells(BarChartAggregatedFieldWellsProperty(barChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartFieldWellsProperty,
    ) : BarChartFieldWellsProperty {
      /**
       * The aggregated field wells of a bar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartfieldwells.html#cfn-quicksight-analysis-barchartfieldwells-barchartaggregatedfieldwells)
       */
      override fun barChartAggregatedFieldWells(): Any? =
          unwrap(this).getBarChartAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): BarChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartFieldWellsProperty):
          BarChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BarChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface WhatIfPointScenarioProperty {
    /**
     * The date that you need the forecast results for.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifpointscenario.html#cfn-quicksight-analysis-whatifpointscenario-date)
     */
    public fun date(): String

    /**
     * The target value that you want to meet for the provided date.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifpointscenario.html#cfn-quicksight-analysis-whatifpointscenario-value)
     */
    public fun `value`(): Number

    /**
     * A builder for [WhatIfPointScenarioProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param date The date that you need the forecast results for. 
       */
      public fun date(date: String)

      /**
       * @param value The target value that you want to meet for the provided date. 
       */
      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WhatIfPointScenarioProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WhatIfPointScenarioProperty.builder()

      /**
       * @param date The date that you need the forecast results for. 
       */
      override fun date(date: String) {
        cdkBuilder.date(date)
      }

      /**
       * @param value The target value that you want to meet for the provided date. 
       */
      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WhatIfPointScenarioProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WhatIfPointScenarioProperty,
    ) : WhatIfPointScenarioProperty {
      /**
       * The date that you need the forecast results for.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifpointscenario.html#cfn-quicksight-analysis-whatifpointscenario-date)
       */
      override fun date(): String = unwrap(this).getDate()

      /**
       * The target value that you want to meet for the provided date.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifpointscenario.html#cfn-quicksight-analysis-whatifpointscenario-value)
       */
      override fun `value`(): Number = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): WhatIfPointScenarioProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WhatIfPointScenarioProperty):
          WhatIfPointScenarioProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WhatIfPointScenarioProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WhatIfPointScenarioProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GridLayoutScreenCanvasSizeOptionsProperty {
    /**
     * The width that the view port will be optimized for when the layout renders.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutscreencanvassizeoptions.html#cfn-quicksight-analysis-gridlayoutscreencanvassizeoptions-optimizedviewportwidth)
     */
    public fun optimizedViewPortWidth(): String? = unwrap(this).getOptimizedViewPortWidth()

    /**
     * This value determines the layout behavior when the viewport is resized.
     *
     * * `FIXED` : A fixed width will be used when optimizing the layout. In the Amazon QuickSight
     * console, this option is called `Classic` .
     * * `RESPONSIVE` : The width of the canvas will be responsive and optimized to the view port.
     * In the Amazon QuickSight console, this option is called `Tiled` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutscreencanvassizeoptions.html#cfn-quicksight-analysis-gridlayoutscreencanvassizeoptions-resizeoption)
     */
    public fun resizeOption(): String

    /**
     * A builder for [GridLayoutScreenCanvasSizeOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param optimizedViewPortWidth The width that the view port will be optimized for when the
       * layout renders.
       */
      public fun optimizedViewPortWidth(optimizedViewPortWidth: String)

      /**
       * @param resizeOption This value determines the layout behavior when the viewport is resized.
       * 
       * * `FIXED` : A fixed width will be used when optimizing the layout. In the Amazon QuickSight
       * console, this option is called `Classic` .
       * * `RESPONSIVE` : The width of the canvas will be responsive and optimized to the view port.
       * In the Amazon QuickSight console, this option is called `Tiled` .
       */
      public fun resizeOption(resizeOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutScreenCanvasSizeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutScreenCanvasSizeOptionsProperty.builder()

      /**
       * @param optimizedViewPortWidth The width that the view port will be optimized for when the
       * layout renders.
       */
      override fun optimizedViewPortWidth(optimizedViewPortWidth: String) {
        cdkBuilder.optimizedViewPortWidth(optimizedViewPortWidth)
      }

      /**
       * @param resizeOption This value determines the layout behavior when the viewport is resized.
       * 
       * * `FIXED` : A fixed width will be used when optimizing the layout. In the Amazon QuickSight
       * console, this option is called `Classic` .
       * * `RESPONSIVE` : The width of the canvas will be responsive and optimized to the view port.
       * In the Amazon QuickSight console, this option is called `Tiled` .
       */
      override fun resizeOption(resizeOption: String) {
        cdkBuilder.resizeOption(resizeOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutScreenCanvasSizeOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutScreenCanvasSizeOptionsProperty,
    ) : GridLayoutScreenCanvasSizeOptionsProperty {
      /**
       * The width that the view port will be optimized for when the layout renders.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutscreencanvassizeoptions.html#cfn-quicksight-analysis-gridlayoutscreencanvassizeoptions-optimizedviewportwidth)
       */
      override fun optimizedViewPortWidth(): String? = unwrap(this).getOptimizedViewPortWidth()

      /**
       * This value determines the layout behavior when the viewport is resized.
       *
       * * `FIXED` : A fixed width will be used when optimizing the layout. In the Amazon QuickSight
       * console, this option is called `Classic` .
       * * `RESPONSIVE` : The width of the canvas will be responsive and optimized to the view port.
       * In the Amazon QuickSight console, this option is called `Tiled` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutscreencanvassizeoptions.html#cfn-quicksight-analysis-gridlayoutscreencanvassizeoptions-resizeoption)
       */
      override fun resizeOption(): String = unwrap(this).getResizeOption()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GridLayoutScreenCanvasSizeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutScreenCanvasSizeOptionsProperty):
          GridLayoutScreenCanvasSizeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GridLayoutScreenCanvasSizeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutScreenCanvasSizeOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface MeasureFieldProperty {
    /**
     * The calculated measure field only used in pivot tables.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html#cfn-quicksight-analysis-measurefield-calculatedmeasurefield)
     */
    public fun calculatedMeasureField(): Any? = unwrap(this).getCalculatedMeasureField()

    /**
     * The measure type field with categorical type columns.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html#cfn-quicksight-analysis-measurefield-categoricalmeasurefield)
     */
    public fun categoricalMeasureField(): Any? = unwrap(this).getCategoricalMeasureField()

    /**
     * The measure type field with date type columns.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html#cfn-quicksight-analysis-measurefield-datemeasurefield)
     */
    public fun dateMeasureField(): Any? = unwrap(this).getDateMeasureField()

    /**
     * The measure type field with numerical type columns.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html#cfn-quicksight-analysis-measurefield-numericalmeasurefield)
     */
    public fun numericalMeasureField(): Any? = unwrap(this).getNumericalMeasureField()

    /**
     * A builder for [MeasureFieldProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param calculatedMeasureField The calculated measure field only used in pivot tables.
       */
      public fun calculatedMeasureField(calculatedMeasureField: IResolvable)

      /**
       * @param calculatedMeasureField The calculated measure field only used in pivot tables.
       */
      public fun calculatedMeasureField(calculatedMeasureField: CalculatedMeasureFieldProperty)

      /**
       * @param calculatedMeasureField The calculated measure field only used in pivot tables.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("97e8fa7b5b8209d54e666db54a9b961007bdaf1717440840137a597535c15e3f")
      public
          fun calculatedMeasureField(calculatedMeasureField: CalculatedMeasureFieldProperty.Builder.() -> Unit)

      /**
       * @param categoricalMeasureField The measure type field with categorical type columns.
       */
      public fun categoricalMeasureField(categoricalMeasureField: IResolvable)

      /**
       * @param categoricalMeasureField The measure type field with categorical type columns.
       */
      public fun categoricalMeasureField(categoricalMeasureField: CategoricalMeasureFieldProperty)

      /**
       * @param categoricalMeasureField The measure type field with categorical type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dcb6406c6b6c607b1b904d507d8a4ecfea87b65a6c9e1d58c288ce52bf9a8d8d")
      public
          fun categoricalMeasureField(categoricalMeasureField: CategoricalMeasureFieldProperty.Builder.() -> Unit)

      /**
       * @param dateMeasureField The measure type field with date type columns.
       */
      public fun dateMeasureField(dateMeasureField: IResolvable)

      /**
       * @param dateMeasureField The measure type field with date type columns.
       */
      public fun dateMeasureField(dateMeasureField: DateMeasureFieldProperty)

      /**
       * @param dateMeasureField The measure type field with date type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("58180921b248d83569c5ef59af712a7076de8b4f7fcb00dc2df442ae9a98ec32")
      public fun dateMeasureField(dateMeasureField: DateMeasureFieldProperty.Builder.() -> Unit)

      /**
       * @param numericalMeasureField The measure type field with numerical type columns.
       */
      public fun numericalMeasureField(numericalMeasureField: IResolvable)

      /**
       * @param numericalMeasureField The measure type field with numerical type columns.
       */
      public fun numericalMeasureField(numericalMeasureField: NumericalMeasureFieldProperty)

      /**
       * @param numericalMeasureField The measure type field with numerical type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a8195b2db502049eed16f6aec2b33a3bd01f391e364f92daa4b07bf88e3d2c07")
      public
          fun numericalMeasureField(numericalMeasureField: NumericalMeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MeasureFieldProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MeasureFieldProperty.builder()

      /**
       * @param calculatedMeasureField The calculated measure field only used in pivot tables.
       */
      override fun calculatedMeasureField(calculatedMeasureField: IResolvable) {
        cdkBuilder.calculatedMeasureField(calculatedMeasureField.let(IResolvable::unwrap))
      }

      /**
       * @param calculatedMeasureField The calculated measure field only used in pivot tables.
       */
      override fun calculatedMeasureField(calculatedMeasureField: CalculatedMeasureFieldProperty) {
        cdkBuilder.calculatedMeasureField(calculatedMeasureField.let(CalculatedMeasureFieldProperty::unwrap))
      }

      /**
       * @param calculatedMeasureField The calculated measure field only used in pivot tables.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("97e8fa7b5b8209d54e666db54a9b961007bdaf1717440840137a597535c15e3f")
      override
          fun calculatedMeasureField(calculatedMeasureField: CalculatedMeasureFieldProperty.Builder.() -> Unit):
          Unit = calculatedMeasureField(CalculatedMeasureFieldProperty(calculatedMeasureField))

      /**
       * @param categoricalMeasureField The measure type field with categorical type columns.
       */
      override fun categoricalMeasureField(categoricalMeasureField: IResolvable) {
        cdkBuilder.categoricalMeasureField(categoricalMeasureField.let(IResolvable::unwrap))
      }

      /**
       * @param categoricalMeasureField The measure type field with categorical type columns.
       */
      override
          fun categoricalMeasureField(categoricalMeasureField: CategoricalMeasureFieldProperty) {
        cdkBuilder.categoricalMeasureField(categoricalMeasureField.let(CategoricalMeasureFieldProperty::unwrap))
      }

      /**
       * @param categoricalMeasureField The measure type field with categorical type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dcb6406c6b6c607b1b904d507d8a4ecfea87b65a6c9e1d58c288ce52bf9a8d8d")
      override
          fun categoricalMeasureField(categoricalMeasureField: CategoricalMeasureFieldProperty.Builder.() -> Unit):
          Unit = categoricalMeasureField(CategoricalMeasureFieldProperty(categoricalMeasureField))

      /**
       * @param dateMeasureField The measure type field with date type columns.
       */
      override fun dateMeasureField(dateMeasureField: IResolvable) {
        cdkBuilder.dateMeasureField(dateMeasureField.let(IResolvable::unwrap))
      }

      /**
       * @param dateMeasureField The measure type field with date type columns.
       */
      override fun dateMeasureField(dateMeasureField: DateMeasureFieldProperty) {
        cdkBuilder.dateMeasureField(dateMeasureField.let(DateMeasureFieldProperty::unwrap))
      }

      /**
       * @param dateMeasureField The measure type field with date type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("58180921b248d83569c5ef59af712a7076de8b4f7fcb00dc2df442ae9a98ec32")
      override fun dateMeasureField(dateMeasureField: DateMeasureFieldProperty.Builder.() -> Unit):
          Unit = dateMeasureField(DateMeasureFieldProperty(dateMeasureField))

      /**
       * @param numericalMeasureField The measure type field with numerical type columns.
       */
      override fun numericalMeasureField(numericalMeasureField: IResolvable) {
        cdkBuilder.numericalMeasureField(numericalMeasureField.let(IResolvable::unwrap))
      }

      /**
       * @param numericalMeasureField The measure type field with numerical type columns.
       */
      override fun numericalMeasureField(numericalMeasureField: NumericalMeasureFieldProperty) {
        cdkBuilder.numericalMeasureField(numericalMeasureField.let(NumericalMeasureFieldProperty::unwrap))
      }

      /**
       * @param numericalMeasureField The measure type field with numerical type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a8195b2db502049eed16f6aec2b33a3bd01f391e364f92daa4b07bf88e3d2c07")
      override
          fun numericalMeasureField(numericalMeasureField: NumericalMeasureFieldProperty.Builder.() -> Unit):
          Unit = numericalMeasureField(NumericalMeasureFieldProperty(numericalMeasureField))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MeasureFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MeasureFieldProperty,
    ) : MeasureFieldProperty {
      /**
       * The calculated measure field only used in pivot tables.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html#cfn-quicksight-analysis-measurefield-calculatedmeasurefield)
       */
      override fun calculatedMeasureField(): Any? = unwrap(this).getCalculatedMeasureField()

      /**
       * The measure type field with categorical type columns.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html#cfn-quicksight-analysis-measurefield-categoricalmeasurefield)
       */
      override fun categoricalMeasureField(): Any? = unwrap(this).getCategoricalMeasureField()

      /**
       * The measure type field with date type columns.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html#cfn-quicksight-analysis-measurefield-datemeasurefield)
       */
      override fun dateMeasureField(): Any? = unwrap(this).getDateMeasureField()

      /**
       * The measure type field with numerical type columns.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html#cfn-quicksight-analysis-measurefield-numericalmeasurefield)
       */
      override fun numericalMeasureField(): Any? = unwrap(this).getNumericalMeasureField()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): MeasureFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.MeasureFieldProperty):
          MeasureFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MeasureFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MeasureFieldProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface CustomParameterValuesProperty {
    /**
     * A list of datetime-type parameter values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html#cfn-quicksight-analysis-customparametervalues-datetimevalues)
     */
    public fun dateTimeValues(): List<String> = unwrap(this).getDateTimeValues() ?: emptyList()

    /**
     * A list of decimal-type parameter values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html#cfn-quicksight-analysis-customparametervalues-decimalvalues)
     */
    public fun decimalValues(): Any? = unwrap(this).getDecimalValues()

    /**
     * A list of integer-type parameter values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html#cfn-quicksight-analysis-customparametervalues-integervalues)
     */
    public fun integerValues(): Any? = unwrap(this).getIntegerValues()

    /**
     * A list of string-type parameter values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html#cfn-quicksight-analysis-customparametervalues-stringvalues)
     */
    public fun stringValues(): List<String> = unwrap(this).getStringValues() ?: emptyList()

    /**
     * A builder for [CustomParameterValuesProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dateTimeValues A list of datetime-type parameter values.
       */
      public fun dateTimeValues(dateTimeValues: List<String>)

      /**
       * @param dateTimeValues A list of datetime-type parameter values.
       */
      public fun dateTimeValues(vararg dateTimeValues: String)

      /**
       * @param decimalValues A list of decimal-type parameter values.
       */
      public fun decimalValues(decimalValues: IResolvable)

      /**
       * @param decimalValues A list of decimal-type parameter values.
       */
      public fun decimalValues(decimalValues: List<Number>)

      /**
       * @param decimalValues A list of decimal-type parameter values.
       */
      public fun decimalValues(vararg decimalValues: Number)

      /**
       * @param integerValues A list of integer-type parameter values.
       */
      public fun integerValues(integerValues: IResolvable)

      /**
       * @param integerValues A list of integer-type parameter values.
       */
      public fun integerValues(integerValues: List<Number>)

      /**
       * @param integerValues A list of integer-type parameter values.
       */
      public fun integerValues(vararg integerValues: Number)

      /**
       * @param stringValues A list of string-type parameter values.
       */
      public fun stringValues(stringValues: List<String>)

      /**
       * @param stringValues A list of string-type parameter values.
       */
      public fun stringValues(vararg stringValues: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomParameterValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomParameterValuesProperty.builder()

      /**
       * @param dateTimeValues A list of datetime-type parameter values.
       */
      override fun dateTimeValues(dateTimeValues: List<String>) {
        cdkBuilder.dateTimeValues(dateTimeValues)
      }

      /**
       * @param dateTimeValues A list of datetime-type parameter values.
       */
      override fun dateTimeValues(vararg dateTimeValues: String): Unit =
          dateTimeValues(dateTimeValues.toList())

      /**
       * @param decimalValues A list of decimal-type parameter values.
       */
      override fun decimalValues(decimalValues: IResolvable) {
        cdkBuilder.decimalValues(decimalValues.let(IResolvable::unwrap))
      }

      /**
       * @param decimalValues A list of decimal-type parameter values.
       */
      override fun decimalValues(decimalValues: List<Number>) {
        cdkBuilder.decimalValues(decimalValues)
      }

      /**
       * @param decimalValues A list of decimal-type parameter values.
       */
      override fun decimalValues(vararg decimalValues: Number): Unit =
          decimalValues(decimalValues.toList())

      /**
       * @param integerValues A list of integer-type parameter values.
       */
      override fun integerValues(integerValues: IResolvable) {
        cdkBuilder.integerValues(integerValues.let(IResolvable::unwrap))
      }

      /**
       * @param integerValues A list of integer-type parameter values.
       */
      override fun integerValues(integerValues: List<Number>) {
        cdkBuilder.integerValues(integerValues)
      }

      /**
       * @param integerValues A list of integer-type parameter values.
       */
      override fun integerValues(vararg integerValues: Number): Unit =
          integerValues(integerValues.toList())

      /**
       * @param stringValues A list of string-type parameter values.
       */
      override fun stringValues(stringValues: List<String>) {
        cdkBuilder.stringValues(stringValues)
      }

      /**
       * @param stringValues A list of string-type parameter values.
       */
      override fun stringValues(vararg stringValues: String): Unit =
          stringValues(stringValues.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomParameterValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomParameterValuesProperty,
    ) : CustomParameterValuesProperty {
      /**
       * A list of datetime-type parameter values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html#cfn-quicksight-analysis-customparametervalues-datetimevalues)
       */
      override fun dateTimeValues(): List<String> = unwrap(this).getDateTimeValues() ?: emptyList()

      /**
       * A list of decimal-type parameter values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html#cfn-quicksight-analysis-customparametervalues-decimalvalues)
       */
      override fun decimalValues(): Any? = unwrap(this).getDecimalValues()

      /**
       * A list of integer-type parameter values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html#cfn-quicksight-analysis-customparametervalues-integervalues)
       */
      override fun integerValues(): Any? = unwrap(this).getIntegerValues()

      /**
       * A list of string-type parameter values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html#cfn-quicksight-analysis-customparametervalues-stringvalues)
       */
      override fun stringValues(): List<String> = unwrap(this).getStringValues() ?: emptyList()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): CustomParameterValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomParameterValuesProperty):
          CustomParameterValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomParameterValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomParameterValuesProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface RadarChartAggregatedFieldWellsProperty {
    /**
     * The aggregated field well categories of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartaggregatedfieldwells.html#cfn-quicksight-analysis-radarchartaggregatedfieldwells-category)
     */
    public fun category(): Any? = unwrap(this).getCategory()

    /**
     * The color that are assigned to the aggregated field wells of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartaggregatedfieldwells.html#cfn-quicksight-analysis-radarchartaggregatedfieldwells-color)
     */
    public fun color(): Any? = unwrap(this).getColor()

    /**
     * The values that are assigned to the aggregated field wells of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartaggregatedfieldwells.html#cfn-quicksight-analysis-radarchartaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [RadarChartAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param category The aggregated field well categories of a radar chart.
       */
      public fun category(category: IResolvable)

      /**
       * @param category The aggregated field well categories of a radar chart.
       */
      public fun category(category: List<Any>)

      /**
       * @param category The aggregated field well categories of a radar chart.
       */
      public fun category(vararg category: Any)

      /**
       * @param color The color that are assigned to the aggregated field wells of a radar chart.
       */
      public fun color(color: IResolvable)

      /**
       * @param color The color that are assigned to the aggregated field wells of a radar chart.
       */
      public fun color(color: List<Any>)

      /**
       * @param color The color that are assigned to the aggregated field wells of a radar chart.
       */
      public fun color(vararg color: Any)

      /**
       * @param values The values that are assigned to the aggregated field wells of a radar chart.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The values that are assigned to the aggregated field wells of a radar chart.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The values that are assigned to the aggregated field wells of a radar chart.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartAggregatedFieldWellsProperty.builder()

      /**
       * @param category The aggregated field well categories of a radar chart.
       */
      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      /**
       * @param category The aggregated field well categories of a radar chart.
       */
      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      /**
       * @param category The aggregated field well categories of a radar chart.
       */
      override fun category(vararg category: Any): Unit = category(category.toList())

      /**
       * @param color The color that are assigned to the aggregated field wells of a radar chart.
       */
      override fun color(color: IResolvable) {
        cdkBuilder.color(color.let(IResolvable::unwrap))
      }

      /**
       * @param color The color that are assigned to the aggregated field wells of a radar chart.
       */
      override fun color(color: List<Any>) {
        cdkBuilder.color(color)
      }

      /**
       * @param color The color that are assigned to the aggregated field wells of a radar chart.
       */
      override fun color(vararg color: Any): Unit = color(color.toList())

      /**
       * @param values The values that are assigned to the aggregated field wells of a radar chart.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The values that are assigned to the aggregated field wells of a radar chart.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The values that are assigned to the aggregated field wells of a radar chart.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartAggregatedFieldWellsProperty,
    ) : RadarChartAggregatedFieldWellsProperty {
      /**
       * The aggregated field well categories of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartaggregatedfieldwells.html#cfn-quicksight-analysis-radarchartaggregatedfieldwells-category)
       */
      override fun category(): Any? = unwrap(this).getCategory()

      /**
       * The color that are assigned to the aggregated field wells of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartaggregatedfieldwells.html#cfn-quicksight-analysis-radarchartaggregatedfieldwells-color)
       */
      override fun color(): Any? = unwrap(this).getColor()

      /**
       * The values that are assigned to the aggregated field wells of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartaggregatedfieldwells.html#cfn-quicksight-analysis-radarchartaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          RadarChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartAggregatedFieldWellsProperty):
          RadarChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PercentageDisplayFormatConfigurationProperty {
    /**
     * The option that determines the decimal places configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-decimalplacesconfiguration)
     */
    public fun decimalPlacesConfiguration(): Any? = unwrap(this).getDecimalPlacesConfiguration()

    /**
     * The options that determine the negative value configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-negativevalueconfiguration)
     */
    public fun negativeValueConfiguration(): Any? = unwrap(this).getNegativeValueConfiguration()

    /**
     * The options that determine the null value format configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-nullvalueformatconfiguration)
     */
    public fun nullValueFormatConfiguration(): Any? = unwrap(this).getNullValueFormatConfiguration()

    /**
     * Determines the prefix value of the percentage format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-prefix)
     */
    public fun prefix(): String? = unwrap(this).getPrefix()

    /**
     * The options that determine the numeric separator configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-separatorconfiguration)
     */
    public fun separatorConfiguration(): Any? = unwrap(this).getSeparatorConfiguration()

    /**
     * Determines the suffix value of the percentage format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-suffix)
     */
    public fun suffix(): String? = unwrap(this).getSuffix()

    /**
     * A builder for [PercentageDisplayFormatConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      public fun decimalPlacesConfiguration(decimalPlacesConfiguration: IResolvable)

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      public
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty)

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fdf5ccabb02183c252719358bee15e07c68f53c5e3cb09882ec13140b1da2e4f")
      public
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty.Builder.() -> Unit)

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      public fun negativeValueConfiguration(negativeValueConfiguration: IResolvable)

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      public
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty)

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c4cd87c85fc833cdce49bbfe6dea56d297885470177e0f44265e2b64942e2c6d")
      public
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty.Builder.() -> Unit)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      public fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0c86527b75f13d8264b0c9399b2ebc15f60096f41b9ed3eef2482fd207e13f21")
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param prefix Determines the prefix value of the percentage format.
       */
      public fun prefix(prefix: String)

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      public fun separatorConfiguration(separatorConfiguration: IResolvable)

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      public
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty)

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2901b57c67c6fe762cc3341e428bfed88672659f5ac91bbb0853422303182032")
      public
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty.Builder.() -> Unit)

      /**
       * @param suffix Determines the suffix value of the percentage format.
       */
      public fun suffix(suffix: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentageDisplayFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentageDisplayFormatConfigurationProperty.builder()

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      override fun decimalPlacesConfiguration(decimalPlacesConfiguration: IResolvable) {
        cdkBuilder.decimalPlacesConfiguration(decimalPlacesConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      override
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty) {
        cdkBuilder.decimalPlacesConfiguration(decimalPlacesConfiguration.let(DecimalPlacesConfigurationProperty::unwrap))
      }

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fdf5ccabb02183c252719358bee15e07c68f53c5e3cb09882ec13140b1da2e4f")
      override
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty.Builder.() -> Unit):
          Unit =
          decimalPlacesConfiguration(DecimalPlacesConfigurationProperty(decimalPlacesConfiguration))

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      override fun negativeValueConfiguration(negativeValueConfiguration: IResolvable) {
        cdkBuilder.negativeValueConfiguration(negativeValueConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      override
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty) {
        cdkBuilder.negativeValueConfiguration(negativeValueConfiguration.let(NegativeValueConfigurationProperty::unwrap))
      }

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c4cd87c85fc833cdce49bbfe6dea56d297885470177e0f44265e2b64942e2c6d")
      override
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty.Builder.() -> Unit):
          Unit =
          negativeValueConfiguration(NegativeValueConfigurationProperty(negativeValueConfiguration))

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      override fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(NullValueFormatConfigurationProperty::unwrap))
      }

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0c86527b75f13d8264b0c9399b2ebc15f60096f41b9ed3eef2482fd207e13f21")
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          nullValueFormatConfiguration(NullValueFormatConfigurationProperty(nullValueFormatConfiguration))

      /**
       * @param prefix Determines the prefix value of the percentage format.
       */
      override fun prefix(prefix: String) {
        cdkBuilder.prefix(prefix)
      }

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      override fun separatorConfiguration(separatorConfiguration: IResolvable) {
        cdkBuilder.separatorConfiguration(separatorConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      override
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty) {
        cdkBuilder.separatorConfiguration(separatorConfiguration.let(NumericSeparatorConfigurationProperty::unwrap))
      }

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2901b57c67c6fe762cc3341e428bfed88672659f5ac91bbb0853422303182032")
      override
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty.Builder.() -> Unit):
          Unit =
          separatorConfiguration(NumericSeparatorConfigurationProperty(separatorConfiguration))

      /**
       * @param suffix Determines the suffix value of the percentage format.
       */
      override fun suffix(suffix: String) {
        cdkBuilder.suffix(suffix)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentageDisplayFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentageDisplayFormatConfigurationProperty,
    ) : PercentageDisplayFormatConfigurationProperty {
      /**
       * The option that determines the decimal places configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-decimalplacesconfiguration)
       */
      override fun decimalPlacesConfiguration(): Any? = unwrap(this).getDecimalPlacesConfiguration()

      /**
       * The options that determine the negative value configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-negativevalueconfiguration)
       */
      override fun negativeValueConfiguration(): Any? = unwrap(this).getNegativeValueConfiguration()

      /**
       * The options that determine the null value format configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-nullvalueformatconfiguration)
       */
      override fun nullValueFormatConfiguration(): Any? =
          unwrap(this).getNullValueFormatConfiguration()

      /**
       * Determines the prefix value of the percentage format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-prefix)
       */
      override fun prefix(): String? = unwrap(this).getPrefix()

      /**
       * The options that determine the numeric separator configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-separatorconfiguration)
       */
      override fun separatorConfiguration(): Any? = unwrap(this).getSeparatorConfiguration()

      /**
       * Determines the suffix value of the percentage format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-suffix)
       */
      override fun suffix(): String? = unwrap(this).getSuffix()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PercentageDisplayFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentageDisplayFormatConfigurationProperty):
          PercentageDisplayFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PercentageDisplayFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentageDisplayFormatConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ListControlDisplayOptionsProperty {
    /**
     * The configuration of info icon label options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html#cfn-quicksight-analysis-listcontroldisplayoptions-infoiconlabeloptions)
     */
    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    /**
     * The configuration of the search options in a list control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html#cfn-quicksight-analysis-listcontroldisplayoptions-searchoptions)
     */
    public fun searchOptions(): Any? = unwrap(this).getSearchOptions()

    /**
     * The configuration of the `Select all` options in a list control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html#cfn-quicksight-analysis-listcontroldisplayoptions-selectalloptions)
     */
    public fun selectAllOptions(): Any? = unwrap(this).getSelectAllOptions()

    /**
     * The options to configure the title visibility, name, and font size.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html#cfn-quicksight-analysis-listcontroldisplayoptions-titleoptions)
     */
    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    /**
     * A builder for [ListControlDisplayOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7fffc455826b0d7c8ca21512513ef8d8fe611d8be8ef3b2ee902eda57fec7b8c")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param searchOptions The configuration of the search options in a list control.
       */
      public fun searchOptions(searchOptions: IResolvable)

      /**
       * @param searchOptions The configuration of the search options in a list control.
       */
      public fun searchOptions(searchOptions: ListControlSearchOptionsProperty)

      /**
       * @param searchOptions The configuration of the search options in a list control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a73867561347ddb7d69072abe751516d1ceaffc1ae51aa5330cd0a086d7466d5")
      public fun searchOptions(searchOptions: ListControlSearchOptionsProperty.Builder.() -> Unit)

      /**
       * @param selectAllOptions The configuration of the `Select all` options in a list control.
       */
      public fun selectAllOptions(selectAllOptions: IResolvable)

      /**
       * @param selectAllOptions The configuration of the `Select all` options in a list control.
       */
      public fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty)

      /**
       * @param selectAllOptions The configuration of the `Select all` options in a list control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2d3393c0de3de87c5522c40a6b698a0986157fa54d61d007ebfaee33ddacfea")
      public
          fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty.Builder.() -> Unit)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: IResolvable)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: LabelOptionsProperty)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("804703fa1f59d203ee556c0f8acc3cfdf093a57cfd130d1917e4f345280d936b")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlDisplayOptionsProperty.builder()

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7fffc455826b0d7c8ca21512513ef8d8fe611d8be8ef3b2ee902eda57fec7b8c")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      /**
       * @param searchOptions The configuration of the search options in a list control.
       */
      override fun searchOptions(searchOptions: IResolvable) {
        cdkBuilder.searchOptions(searchOptions.let(IResolvable::unwrap))
      }

      /**
       * @param searchOptions The configuration of the search options in a list control.
       */
      override fun searchOptions(searchOptions: ListControlSearchOptionsProperty) {
        cdkBuilder.searchOptions(searchOptions.let(ListControlSearchOptionsProperty::unwrap))
      }

      /**
       * @param searchOptions The configuration of the search options in a list control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a73867561347ddb7d69072abe751516d1ceaffc1ae51aa5330cd0a086d7466d5")
      override
          fun searchOptions(searchOptions: ListControlSearchOptionsProperty.Builder.() -> Unit):
          Unit = searchOptions(ListControlSearchOptionsProperty(searchOptions))

      /**
       * @param selectAllOptions The configuration of the `Select all` options in a list control.
       */
      override fun selectAllOptions(selectAllOptions: IResolvable) {
        cdkBuilder.selectAllOptions(selectAllOptions.let(IResolvable::unwrap))
      }

      /**
       * @param selectAllOptions The configuration of the `Select all` options in a list control.
       */
      override fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty) {
        cdkBuilder.selectAllOptions(selectAllOptions.let(ListControlSelectAllOptionsProperty::unwrap))
      }

      /**
       * @param selectAllOptions The configuration of the `Select all` options in a list control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2d3393c0de3de87c5522c40a6b698a0986157fa54d61d007ebfaee33ddacfea")
      override
          fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty.Builder.() -> Unit):
          Unit = selectAllOptions(ListControlSelectAllOptionsProperty(selectAllOptions))

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("804703fa1f59d203ee556c0f8acc3cfdf093a57cfd130d1917e4f345280d936b")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlDisplayOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlDisplayOptionsProperty,
    ) : ListControlDisplayOptionsProperty {
      /**
       * The configuration of info icon label options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html#cfn-quicksight-analysis-listcontroldisplayoptions-infoiconlabeloptions)
       */
      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      /**
       * The configuration of the search options in a list control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html#cfn-quicksight-analysis-listcontroldisplayoptions-searchoptions)
       */
      override fun searchOptions(): Any? = unwrap(this).getSearchOptions()

      /**
       * The configuration of the `Select all` options in a list control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html#cfn-quicksight-analysis-listcontroldisplayoptions-selectalloptions)
       */
      override fun selectAllOptions(): Any? = unwrap(this).getSelectAllOptions()

      /**
       * The options to configure the title visibility, name, and font size.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html#cfn-quicksight-analysis-listcontroldisplayoptions-titleoptions)
       */
      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ListControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlDisplayOptionsProperty):
          ListControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ListControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlDisplayOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ItemsLimitConfigurationProperty {
    /**
     * The limit on how many items of a field are showed in the chart.
     *
     * For example, the number of slices that are displayed in a pie chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-itemslimitconfiguration.html#cfn-quicksight-analysis-itemslimitconfiguration-itemslimit)
     */
    public fun itemsLimit(): Number? = unwrap(this).getItemsLimit()

    /**
     * The `Show other` of an axis in the chart. Choose one of the following options:.
     *
     * * `INCLUDE`
     * * `EXCLUDE`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-itemslimitconfiguration.html#cfn-quicksight-analysis-itemslimitconfiguration-othercategories)
     */
    public fun otherCategories(): String? = unwrap(this).getOtherCategories()

    /**
     * A builder for [ItemsLimitConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param itemsLimit The limit on how many items of a field are showed in the chart.
       * For example, the number of slices that are displayed in a pie chart.
       */
      public fun itemsLimit(itemsLimit: Number)

      /**
       * @param otherCategories The `Show other` of an axis in the chart. Choose one of the
       * following options:.
       * * `INCLUDE`
       * * `EXCLUDE`
       */
      public fun otherCategories(otherCategories: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ItemsLimitConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ItemsLimitConfigurationProperty.builder()

      /**
       * @param itemsLimit The limit on how many items of a field are showed in the chart.
       * For example, the number of slices that are displayed in a pie chart.
       */
      override fun itemsLimit(itemsLimit: Number) {
        cdkBuilder.itemsLimit(itemsLimit)
      }

      /**
       * @param otherCategories The `Show other` of an axis in the chart. Choose one of the
       * following options:.
       * * `INCLUDE`
       * * `EXCLUDE`
       */
      override fun otherCategories(otherCategories: String) {
        cdkBuilder.otherCategories(otherCategories)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ItemsLimitConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ItemsLimitConfigurationProperty,
    ) : ItemsLimitConfigurationProperty {
      /**
       * The limit on how many items of a field are showed in the chart.
       *
       * For example, the number of slices that are displayed in a pie chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-itemslimitconfiguration.html#cfn-quicksight-analysis-itemslimitconfiguration-itemslimit)
       */
      override fun itemsLimit(): Number? = unwrap(this).getItemsLimit()

      /**
       * The `Show other` of an axis in the chart. Choose one of the following options:.
       *
       * * `INCLUDE`
       * * `EXCLUDE`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-itemslimitconfiguration.html#cfn-quicksight-analysis-itemslimitconfiguration-othercategories)
       */
      override fun otherCategories(): String? = unwrap(this).getOtherCategories()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ItemsLimitConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ItemsLimitConfigurationProperty):
          ItemsLimitConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ItemsLimitConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ItemsLimitConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ConditionalFormattingSolidColorProperty {
    /**
     * Determines the color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingsolidcolor.html#cfn-quicksight-analysis-conditionalformattingsolidcolor-color)
     */
    public fun color(): String? = unwrap(this).getColor()

    /**
     * The expression that determines the formatting configuration for solid color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingsolidcolor.html#cfn-quicksight-analysis-conditionalformattingsolidcolor-expression)
     */
    public fun expression(): String

    /**
     * A builder for [ConditionalFormattingSolidColorProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color Determines the color.
       */
      public fun color(color: String)

      /**
       * @param expression The expression that determines the formatting configuration for solid
       * color. 
       */
      public fun expression(expression: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingSolidColorProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingSolidColorProperty.builder()

      /**
       * @param color Determines the color.
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      /**
       * @param expression The expression that determines the formatting configuration for solid
       * color. 
       */
      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingSolidColorProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingSolidColorProperty,
    ) : ConditionalFormattingSolidColorProperty {
      /**
       * Determines the color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingsolidcolor.html#cfn-quicksight-analysis-conditionalformattingsolidcolor-color)
       */
      override fun color(): String? = unwrap(this).getColor()

      /**
       * The expression that determines the formatting configuration for solid color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingsolidcolor.html#cfn-quicksight-analysis-conditionalformattingsolidcolor-expression)
       */
      override fun expression(): String = unwrap(this).getExpression()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingSolidColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingSolidColorProperty):
          ConditionalFormattingSolidColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingSolidColorProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingSolidColorProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilterOperationSelectedFieldsConfigurationProperty {
    /**
     * The selected columns of a dataset.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-analysis-filteroperationselectedfieldsconfiguration-selectedcolumns)
     */
    public fun selectedColumns(): Any? = unwrap(this).getSelectedColumns()

    /**
     * A structure that contains the options that choose which fields are filtered in the
     * `CustomActionFilterOperation` .
     *
     * Valid values are defined as follows:
     *
     * * `ALL_FIELDS` : Applies the filter operation to all fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-analysis-filteroperationselectedfieldsconfiguration-selectedfieldoptions)
     */
    public fun selectedFieldOptions(): String? = unwrap(this).getSelectedFieldOptions()

    /**
     * Chooses the fields that are filtered in `CustomActionFilterOperation` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-analysis-filteroperationselectedfieldsconfiguration-selectedfields)
     */
    public fun selectedFields(): List<String> = unwrap(this).getSelectedFields() ?: emptyList()

    /**
     * A builder for [FilterOperationSelectedFieldsConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param selectedColumns The selected columns of a dataset.
       */
      public fun selectedColumns(selectedColumns: IResolvable)

      /**
       * @param selectedColumns The selected columns of a dataset.
       */
      public fun selectedColumns(selectedColumns: List<Any>)

      /**
       * @param selectedColumns The selected columns of a dataset.
       */
      public fun selectedColumns(vararg selectedColumns: Any)

      /**
       * @param selectedFieldOptions A structure that contains the options that choose which fields
       * are filtered in the `CustomActionFilterOperation` .
       * Valid values are defined as follows:
       *
       * * `ALL_FIELDS` : Applies the filter operation to all fields.
       */
      public fun selectedFieldOptions(selectedFieldOptions: String)

      /**
       * @param selectedFields Chooses the fields that are filtered in `CustomActionFilterOperation`
       * .
       */
      public fun selectedFields(selectedFields: List<String>)

      /**
       * @param selectedFields Chooses the fields that are filtered in `CustomActionFilterOperation`
       * .
       */
      public fun selectedFields(vararg selectedFields: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterOperationSelectedFieldsConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterOperationSelectedFieldsConfigurationProperty.builder()

      /**
       * @param selectedColumns The selected columns of a dataset.
       */
      override fun selectedColumns(selectedColumns: IResolvable) {
        cdkBuilder.selectedColumns(selectedColumns.let(IResolvable::unwrap))
      }

      /**
       * @param selectedColumns The selected columns of a dataset.
       */
      override fun selectedColumns(selectedColumns: List<Any>) {
        cdkBuilder.selectedColumns(selectedColumns)
      }

      /**
       * @param selectedColumns The selected columns of a dataset.
       */
      override fun selectedColumns(vararg selectedColumns: Any): Unit =
          selectedColumns(selectedColumns.toList())

      /**
       * @param selectedFieldOptions A structure that contains the options that choose which fields
       * are filtered in the `CustomActionFilterOperation` .
       * Valid values are defined as follows:
       *
       * * `ALL_FIELDS` : Applies the filter operation to all fields.
       */
      override fun selectedFieldOptions(selectedFieldOptions: String) {
        cdkBuilder.selectedFieldOptions(selectedFieldOptions)
      }

      /**
       * @param selectedFields Chooses the fields that are filtered in `CustomActionFilterOperation`
       * .
       */
      override fun selectedFields(selectedFields: List<String>) {
        cdkBuilder.selectedFields(selectedFields)
      }

      /**
       * @param selectedFields Chooses the fields that are filtered in `CustomActionFilterOperation`
       * .
       */
      override fun selectedFields(vararg selectedFields: String): Unit =
          selectedFields(selectedFields.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterOperationSelectedFieldsConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterOperationSelectedFieldsConfigurationProperty,
    ) : FilterOperationSelectedFieldsConfigurationProperty {
      /**
       * The selected columns of a dataset.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-analysis-filteroperationselectedfieldsconfiguration-selectedcolumns)
       */
      override fun selectedColumns(): Any? = unwrap(this).getSelectedColumns()

      /**
       * A structure that contains the options that choose which fields are filtered in the
       * `CustomActionFilterOperation` .
       *
       * Valid values are defined as follows:
       *
       * * `ALL_FIELDS` : Applies the filter operation to all fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-analysis-filteroperationselectedfieldsconfiguration-selectedfieldoptions)
       */
      override fun selectedFieldOptions(): String? = unwrap(this).getSelectedFieldOptions()

      /**
       * Chooses the fields that are filtered in `CustomActionFilterOperation` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-analysis-filteroperationselectedfieldsconfiguration-selectedfields)
       */
      override fun selectedFields(): List<String> = unwrap(this).getSelectedFields() ?: emptyList()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilterOperationSelectedFieldsConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterOperationSelectedFieldsConfigurationProperty):
          FilterOperationSelectedFieldsConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterOperationSelectedFieldsConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterOperationSelectedFieldsConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface IntegerParameterProperty {
    /**
     * The name of the integer parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameter.html#cfn-quicksight-analysis-integerparameter-name)
     */
    public fun name(): String

    /**
     * The values for the integer parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameter.html#cfn-quicksight-analysis-integerparameter-values)
     */
    public fun values(): Any

    /**
     * A builder for [IntegerParameterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param name The name of the integer parameter. 
       */
      public fun name(name: String)

      /**
       * @param values The values for the integer parameter. 
       */
      public fun values(values: IResolvable)

      /**
       * @param values The values for the integer parameter. 
       */
      public fun values(values: List<Number>)

      /**
       * @param values The values for the integer parameter. 
       */
      public fun values(vararg values: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerParameterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerParameterProperty.builder()

      /**
       * @param name The name of the integer parameter. 
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param values The values for the integer parameter. 
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The values for the integer parameter. 
       */
      override fun values(values: List<Number>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The values for the integer parameter. 
       */
      override fun values(vararg values: Number): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerParameterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerParameterProperty,
    ) : IntegerParameterProperty {
      /**
       * The name of the integer parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameter.html#cfn-quicksight-analysis-integerparameter-name)
       */
      override fun name(): String = unwrap(this).getName()

      /**
       * The values for the integer parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameter.html#cfn-quicksight-analysis-integerparameter-values)
       */
      override fun values(): Any = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): IntegerParameterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerParameterProperty):
          IntegerParameterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: IntegerParameterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerParameterProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface PieChartFieldWellsProperty {
    /**
     * The field well configuration of a pie chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartfieldwells.html#cfn-quicksight-analysis-piechartfieldwells-piechartaggregatedfieldwells)
     */
    public fun pieChartAggregatedFieldWells(): Any? = unwrap(this).getPieChartAggregatedFieldWells()

    /**
     * A builder for [PieChartFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param pieChartAggregatedFieldWells The field well configuration of a pie chart.
       */
      public fun pieChartAggregatedFieldWells(pieChartAggregatedFieldWells: IResolvable)

      /**
       * @param pieChartAggregatedFieldWells The field well configuration of a pie chart.
       */
      public
          fun pieChartAggregatedFieldWells(pieChartAggregatedFieldWells: PieChartAggregatedFieldWellsProperty)

      /**
       * @param pieChartAggregatedFieldWells The field well configuration of a pie chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a23d04760ec60d1c154d9287f564f401b910307ac55ec806f73c73652638a8f6")
      public
          fun pieChartAggregatedFieldWells(pieChartAggregatedFieldWells: PieChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartFieldWellsProperty.builder()

      /**
       * @param pieChartAggregatedFieldWells The field well configuration of a pie chart.
       */
      override fun pieChartAggregatedFieldWells(pieChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.pieChartAggregatedFieldWells(pieChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param pieChartAggregatedFieldWells The field well configuration of a pie chart.
       */
      override
          fun pieChartAggregatedFieldWells(pieChartAggregatedFieldWells: PieChartAggregatedFieldWellsProperty) {
        cdkBuilder.pieChartAggregatedFieldWells(pieChartAggregatedFieldWells.let(PieChartAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param pieChartAggregatedFieldWells The field well configuration of a pie chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a23d04760ec60d1c154d9287f564f401b910307ac55ec806f73c73652638a8f6")
      override
          fun pieChartAggregatedFieldWells(pieChartAggregatedFieldWells: PieChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          pieChartAggregatedFieldWells(PieChartAggregatedFieldWellsProperty(pieChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartFieldWellsProperty,
    ) : PieChartFieldWellsProperty {
      /**
       * The field well configuration of a pie chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartfieldwells.html#cfn-quicksight-analysis-piechartfieldwells-piechartaggregatedfieldwells)
       */
      override fun pieChartAggregatedFieldWells(): Any? =
          unwrap(this).getPieChartAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PieChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartFieldWellsProperty):
          PieChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PieChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface CalculatedMeasureFieldProperty {
    /**
     * The expression in the table calculation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedmeasurefield.html#cfn-quicksight-analysis-calculatedmeasurefield-expression)
     */
    public fun expression(): String

    /**
     * The custom field ID.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedmeasurefield.html#cfn-quicksight-analysis-calculatedmeasurefield-fieldid)
     */
    public fun fieldId(): String

    /**
     * A builder for [CalculatedMeasureFieldProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param expression The expression in the table calculation. 
       */
      public fun expression(expression: String)

      /**
       * @param fieldId The custom field ID. 
       */
      public fun fieldId(fieldId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CalculatedMeasureFieldProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CalculatedMeasureFieldProperty.builder()

      /**
       * @param expression The expression in the table calculation. 
       */
      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      /**
       * @param fieldId The custom field ID. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CalculatedMeasureFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CalculatedMeasureFieldProperty,
    ) : CalculatedMeasureFieldProperty {
      /**
       * The expression in the table calculation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedmeasurefield.html#cfn-quicksight-analysis-calculatedmeasurefield-expression)
       */
      override fun expression(): String = unwrap(this).getExpression()

      /**
       * The custom field ID.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedmeasurefield.html#cfn-quicksight-analysis-calculatedmeasurefield-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): CalculatedMeasureFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CalculatedMeasureFieldProperty):
          CalculatedMeasureFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CalculatedMeasureFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CalculatedMeasureFieldProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface NullValueFormatConfigurationProperty {
    /**
     * Determines the null string of null values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-nullvalueformatconfiguration.html#cfn-quicksight-analysis-nullvalueformatconfiguration-nullstring)
     */
    public fun nullString(): String

    /**
     * A builder for [NullValueFormatConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param nullString Determines the null string of null values. 
       */
      public fun nullString(nullString: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NullValueFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NullValueFormatConfigurationProperty.builder()

      /**
       * @param nullString Determines the null string of null values. 
       */
      override fun nullString(nullString: String) {
        cdkBuilder.nullString(nullString)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NullValueFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NullValueFormatConfigurationProperty,
    ) : NullValueFormatConfigurationProperty {
      /**
       * Determines the null string of null values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-nullvalueformatconfiguration.html#cfn-quicksight-analysis-nullvalueformatconfiguration-nullstring)
       */
      override fun nullString(): String = unwrap(this).getNullString()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          NullValueFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NullValueFormatConfigurationProperty):
          NullValueFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NullValueFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NullValueFormatConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface NegativeValueConfigurationProperty {
    /**
     * Determines the display mode of the negative value configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-negativevalueconfiguration.html#cfn-quicksight-analysis-negativevalueconfiguration-displaymode)
     */
    public fun displayMode(): String

    /**
     * A builder for [NegativeValueConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param displayMode Determines the display mode of the negative value configuration. 
       */
      public fun displayMode(displayMode: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NegativeValueConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NegativeValueConfigurationProperty.builder()

      /**
       * @param displayMode Determines the display mode of the negative value configuration. 
       */
      override fun displayMode(displayMode: String) {
        cdkBuilder.displayMode(displayMode)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NegativeValueConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NegativeValueConfigurationProperty,
    ) : NegativeValueConfigurationProperty {
      /**
       * Determines the display mode of the negative value configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-negativevalueconfiguration.html#cfn-quicksight-analysis-negativevalueconfiguration-displaymode)
       */
      override fun displayMode(): String = unwrap(this).getDisplayMode()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          NegativeValueConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NegativeValueConfigurationProperty):
          NegativeValueConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NegativeValueConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NegativeValueConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableAggregatedFieldWellsProperty {
    /**
     * The columns field well for a pivot table.
     *
     * Values are grouped by columns fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableaggregatedfieldwells.html#cfn-quicksight-analysis-pivottableaggregatedfieldwells-columns)
     */
    public fun columns(): Any? = unwrap(this).getColumns()

    /**
     * The rows field well for a pivot table.
     *
     * Values are grouped by rows fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableaggregatedfieldwells.html#cfn-quicksight-analysis-pivottableaggregatedfieldwells-rows)
     */
    public fun rows(): Any? = unwrap(this).getRows()

    /**
     * The values field well for a pivot table.
     *
     * Values are aggregated based on rows and columns fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableaggregatedfieldwells.html#cfn-quicksight-analysis-pivottableaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [PivotTableAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param columns The columns field well for a pivot table.
       * Values are grouped by columns fields.
       */
      public fun columns(columns: IResolvable)

      /**
       * @param columns The columns field well for a pivot table.
       * Values are grouped by columns fields.
       */
      public fun columns(columns: List<Any>)

      /**
       * @param columns The columns field well for a pivot table.
       * Values are grouped by columns fields.
       */
      public fun columns(vararg columns: Any)

      /**
       * @param rows The rows field well for a pivot table.
       * Values are grouped by rows fields.
       */
      public fun rows(rows: IResolvable)

      /**
       * @param rows The rows field well for a pivot table.
       * Values are grouped by rows fields.
       */
      public fun rows(rows: List<Any>)

      /**
       * @param rows The rows field well for a pivot table.
       * Values are grouped by rows fields.
       */
      public fun rows(vararg rows: Any)

      /**
       * @param values The values field well for a pivot table.
       * Values are aggregated based on rows and columns fields.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The values field well for a pivot table.
       * Values are aggregated based on rows and columns fields.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The values field well for a pivot table.
       * Values are aggregated based on rows and columns fields.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableAggregatedFieldWellsProperty.builder()

      /**
       * @param columns The columns field well for a pivot table.
       * Values are grouped by columns fields.
       */
      override fun columns(columns: IResolvable) {
        cdkBuilder.columns(columns.let(IResolvable::unwrap))
      }

      /**
       * @param columns The columns field well for a pivot table.
       * Values are grouped by columns fields.
       */
      override fun columns(columns: List<Any>) {
        cdkBuilder.columns(columns)
      }

      /**
       * @param columns The columns field well for a pivot table.
       * Values are grouped by columns fields.
       */
      override fun columns(vararg columns: Any): Unit = columns(columns.toList())

      /**
       * @param rows The rows field well for a pivot table.
       * Values are grouped by rows fields.
       */
      override fun rows(rows: IResolvable) {
        cdkBuilder.rows(rows.let(IResolvable::unwrap))
      }

      /**
       * @param rows The rows field well for a pivot table.
       * Values are grouped by rows fields.
       */
      override fun rows(rows: List<Any>) {
        cdkBuilder.rows(rows)
      }

      /**
       * @param rows The rows field well for a pivot table.
       * Values are grouped by rows fields.
       */
      override fun rows(vararg rows: Any): Unit = rows(rows.toList())

      /**
       * @param values The values field well for a pivot table.
       * Values are aggregated based on rows and columns fields.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The values field well for a pivot table.
       * Values are aggregated based on rows and columns fields.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The values field well for a pivot table.
       * Values are aggregated based on rows and columns fields.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableAggregatedFieldWellsProperty,
    ) : PivotTableAggregatedFieldWellsProperty {
      /**
       * The columns field well for a pivot table.
       *
       * Values are grouped by columns fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableaggregatedfieldwells.html#cfn-quicksight-analysis-pivottableaggregatedfieldwells-columns)
       */
      override fun columns(): Any? = unwrap(this).getColumns()

      /**
       * The rows field well for a pivot table.
       *
       * Values are grouped by rows fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableaggregatedfieldwells.html#cfn-quicksight-analysis-pivottableaggregatedfieldwells-rows)
       */
      override fun rows(): Any? = unwrap(this).getRows()

      /**
       * The values field well for a pivot table.
       *
       * Values are aggregated based on rows and columns fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableaggregatedfieldwells.html#cfn-quicksight-analysis-pivottableaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableAggregatedFieldWellsProperty):
          PivotTableAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface WordCloudChartConfigurationProperty {
    /**
     * The label options (label text, label visibility, and sort icon visibility) for the word cloud
     * category.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html#cfn-quicksight-analysis-wordcloudchartconfiguration-categorylabeloptions)
     */
    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    /**
     * The field wells of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html#cfn-quicksight-analysis-wordcloudchartconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The sort configuration of a word cloud visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html#cfn-quicksight-analysis-wordcloudchartconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The options for a word cloud visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html#cfn-quicksight-analysis-wordcloudchartconfiguration-wordcloudoptions)
     */
    public fun wordCloudOptions(): Any? = unwrap(this).getWordCloudOptions()

    /**
     * A builder for [WordCloudChartConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) for the word cloud category.
       */
      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      /**
       * @param categoryLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) for the word cloud category.
       */
      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param categoryLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) for the word cloud category.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d0f7ee13effa1cdd7110e0b4642061929362f1915084658ab945451e49ec8637")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: WordCloudFieldWellsProperty)

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f0f0f295c97d381cde2ebbbe9ea1bcf922fa08843bb43f2ff9fcd46dc023fba0")
      public fun fieldWells(fieldWells: WordCloudFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration of a word cloud visual.
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a word cloud visual.
       */
      public fun sortConfiguration(sortConfiguration: WordCloudSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a word cloud visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5064d1afcb1ab815e18acaf4fdaaf96797d3dbc0ec5e5154bfbfff92686c8750")
      public
          fun sortConfiguration(sortConfiguration: WordCloudSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param wordCloudOptions The options for a word cloud visual.
       */
      public fun wordCloudOptions(wordCloudOptions: IResolvable)

      /**
       * @param wordCloudOptions The options for a word cloud visual.
       */
      public fun wordCloudOptions(wordCloudOptions: WordCloudOptionsProperty)

      /**
       * @param wordCloudOptions The options for a word cloud visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("181e27c0f6181474a340d330ec0cf3cb909257ff7843bf71cd27c9ba4ea69a4b")
      public fun wordCloudOptions(wordCloudOptions: WordCloudOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudChartConfigurationProperty.builder()

      /**
       * @param categoryLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) for the word cloud category.
       */
      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param categoryLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) for the word cloud category.
       */
      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param categoryLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) for the word cloud category.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d0f7ee13effa1cdd7110e0b4642061929362f1915084658ab945451e49ec8637")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: WordCloudFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(WordCloudFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f0f0f295c97d381cde2ebbbe9ea1bcf922fa08843bb43f2ff9fcd46dc023fba0")
      override fun fieldWells(fieldWells: WordCloudFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(WordCloudFieldWellsProperty(fieldWells))

      /**
       * @param sortConfiguration The sort configuration of a word cloud visual.
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a word cloud visual.
       */
      override fun sortConfiguration(sortConfiguration: WordCloudSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(WordCloudSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a word cloud visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5064d1afcb1ab815e18acaf4fdaaf96797d3dbc0ec5e5154bfbfff92686c8750")
      override
          fun sortConfiguration(sortConfiguration: WordCloudSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(WordCloudSortConfigurationProperty(sortConfiguration))

      /**
       * @param wordCloudOptions The options for a word cloud visual.
       */
      override fun wordCloudOptions(wordCloudOptions: IResolvable) {
        cdkBuilder.wordCloudOptions(wordCloudOptions.let(IResolvable::unwrap))
      }

      /**
       * @param wordCloudOptions The options for a word cloud visual.
       */
      override fun wordCloudOptions(wordCloudOptions: WordCloudOptionsProperty) {
        cdkBuilder.wordCloudOptions(wordCloudOptions.let(WordCloudOptionsProperty::unwrap))
      }

      /**
       * @param wordCloudOptions The options for a word cloud visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("181e27c0f6181474a340d330ec0cf3cb909257ff7843bf71cd27c9ba4ea69a4b")
      override fun wordCloudOptions(wordCloudOptions: WordCloudOptionsProperty.Builder.() -> Unit):
          Unit = wordCloudOptions(WordCloudOptionsProperty(wordCloudOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudChartConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudChartConfigurationProperty,
    ) : WordCloudChartConfigurationProperty {
      /**
       * The label options (label text, label visibility, and sort icon visibility) for the word
       * cloud category.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html#cfn-quicksight-analysis-wordcloudchartconfiguration-categorylabeloptions)
       */
      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      /**
       * The field wells of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html#cfn-quicksight-analysis-wordcloudchartconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The sort configuration of a word cloud visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html#cfn-quicksight-analysis-wordcloudchartconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The options for a word cloud visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html#cfn-quicksight-analysis-wordcloudchartconfiguration-wordcloudoptions)
       */
      override fun wordCloudOptions(): Any? = unwrap(this).getWordCloudOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          WordCloudChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudChartConfigurationProperty):
          WordCloudChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WordCloudChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudChartConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface BarChartConfigurationProperty {
    /**
     * Determines the arrangement of the bars.
     *
     * The orientation and arrangement of bars determine the type of bar that is used in the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-barsarrangement)
     */
    public fun barsArrangement(): String? = unwrap(this).getBarsArrangement()

    /**
     * The label display options (grid line, range, scale, axis step) for bar chart category.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-categoryaxis)
     */
    public fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

    /**
     * The label options (label text, label visibility and sort icon visibility) for a bar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-categorylabeloptions)
     */
    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    /**
     * The label options (label text, label visibility and sort icon visibility) for a color that is
     * used in a bar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-colorlabeloptions)
     */
    public fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

    /**
     * The contribution analysis (anomaly configuration) setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-contributionanalysisdefaults)
     */
    public fun contributionAnalysisDefaults(): Any? = unwrap(this).getContributionAnalysisDefaults()

    /**
     * The options that determine if visual data labels are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-datalabels)
     */
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    /**
     * The field wells of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The legend display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-legend)
     */
    public fun legend(): Any? = unwrap(this).getLegend()

    /**
     * The orientation of the bars in a bar chart visual. There are two valid values in this
     * structure:.
     *
     * * `HORIZONTAL` : Used for charts that have horizontal bars. Visuals that use this value are
     * horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.
     * * `VERTICAL` : Used for charts that have vertical bars. Visuals that use this value are
     * vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-orientation)
     */
    public fun orientation(): String? = unwrap(this).getOrientation()

    /**
     * The reference line setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-referencelines)
     */
    public fun referenceLines(): Any? = unwrap(this).getReferenceLines()

    /**
     * The small multiples setup for the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-smallmultiplesoptions)
     */
    public fun smallMultiplesOptions(): Any? = unwrap(this).getSmallMultiplesOptions()

    /**
     * The sort configuration of a `BarChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The tooltip display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-tooltip)
     */
    public fun tooltip(): Any? = unwrap(this).getTooltip()

    /**
     * The label display options (grid line, range, scale, axis step) for a bar chart value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-valueaxis)
     */
    public fun valueAxis(): Any? = unwrap(this).getValueAxis()

    /**
     * The label options (label text, label visibility and sort icon visibility) for a bar chart
     * value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-valuelabeloptions)
     */
    public fun valueLabelOptions(): Any? = unwrap(this).getValueLabelOptions()

    /**
     * The palette (chart color) display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-visualpalette)
     */
    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    /**
     * A builder for [BarChartConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param barsArrangement Determines the arrangement of the bars.
       * The orientation and arrangement of bars determine the type of bar that is used in the
       * visual.
       */
      public fun barsArrangement(barsArrangement: String)

      /**
       * @param categoryAxis The label display options (grid line, range, scale, axis step) for bar
       * chart category.
       */
      public fun categoryAxis(categoryAxis: IResolvable)

      /**
       * @param categoryAxis The label display options (grid line, range, scale, axis step) for bar
       * chart category.
       */
      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty)

      /**
       * @param categoryAxis The label display options (grid line, range, scale, axis step) for bar
       * chart category.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf56712b2ae0bbcdbc7a4404fa1ee564350b5faedde757a42d3ac64f680e1e89")
      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param categoryLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a bar chart.
       */
      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      /**
       * @param categoryLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a bar chart.
       */
      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param categoryLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a bar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("490beda3566f83a6cf8321717cb8d4618d8a955c91ce2fe24e3c116ef650af51")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param colorLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a color that is used in a bar chart.
       */
      public fun colorLabelOptions(colorLabelOptions: IResolvable)

      /**
       * @param colorLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a color that is used in a bar chart.
       */
      public fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param colorLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a color that is used in a bar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9e9f059f6f75d4c589d0c0abe888caaea2e5c6310277175ba06b730366fd4b8e")
      public
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param contributionAnalysisDefaults The contribution analysis (anomaly configuration) setup
       * of the visual.
       */
      public fun contributionAnalysisDefaults(contributionAnalysisDefaults: IResolvable)

      /**
       * @param contributionAnalysisDefaults The contribution analysis (anomaly configuration) setup
       * of the visual.
       */
      public fun contributionAnalysisDefaults(contributionAnalysisDefaults: List<Any>)

      /**
       * @param contributionAnalysisDefaults The contribution analysis (anomaly configuration) setup
       * of the visual.
       */
      public fun contributionAnalysisDefaults(vararg contributionAnalysisDefaults: Any)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      public fun dataLabels(dataLabels: IResolvable)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b17c8dd64554bd9edafab6beb8021726fb82f96ed5395c0fd48ca9b7d28bdc29")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: BarChartFieldWellsProperty)

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dad406587ec401bac79781bddf9e933075509b1ad2d7beea52e2d2e6d9444f3b")
      public fun fieldWells(fieldWells: BarChartFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: IResolvable)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: LegendOptionsProperty)

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0eace4944f94f22cee4d37454da21504866031f29bfa7478ff2dc29f6b992c5d")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      /**
       * @param orientation The orientation of the bars in a bar chart visual. There are two valid
       * values in this structure:.
       * * `HORIZONTAL` : Used for charts that have horizontal bars. Visuals that use this value are
       * horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.
       * * `VERTICAL` : Used for charts that have vertical bars. Visuals that use this value are
       * vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.
       */
      public fun orientation(orientation: String)

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      public fun referenceLines(referenceLines: IResolvable)

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      public fun referenceLines(referenceLines: List<Any>)

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      public fun referenceLines(vararg referenceLines: Any)

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      public fun smallMultiplesOptions(smallMultiplesOptions: IResolvable)

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      public fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty)

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1575673560c16557f1f1d6f32ae3208c3998bf0db11f69a12b8b51fc09ac6eb0")
      public
          fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration of a `BarChartVisual` .
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a `BarChartVisual` .
       */
      public fun sortConfiguration(sortConfiguration: BarChartSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a `BarChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("83d30d92f050daef4ce342bf8dc2fc614726db23f39e6bbc7a9b21a2cc878b16")
      public
          fun sortConfiguration(sortConfiguration: BarChartSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: IResolvable)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: TooltipOptionsProperty)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("18bafe3886a66067c92ba4661df143615100f7ff7a5c851a6ee47dde0cb2173e")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      /**
       * @param valueAxis The label display options (grid line, range, scale, axis step) for a bar
       * chart value.
       */
      public fun valueAxis(valueAxis: IResolvable)

      /**
       * @param valueAxis The label display options (grid line, range, scale, axis step) for a bar
       * chart value.
       */
      public fun valueAxis(valueAxis: AxisDisplayOptionsProperty)

      /**
       * @param valueAxis The label display options (grid line, range, scale, axis step) for a bar
       * chart value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b5f6fa63fe32b4aff00ed8bce46d6ca8b06978db6e1ec101a6ec509ab7ac9058")
      public fun valueAxis(valueAxis: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param valueLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a bar chart value.
       */
      public fun valueLabelOptions(valueLabelOptions: IResolvable)

      /**
       * @param valueLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a bar chart value.
       */
      public fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param valueLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a bar chart value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ab02f617483361b1bb4d36653d70b5110bd718b260f1c08ccdbbe5d02f3f7e5f")
      public
          fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      public fun visualPalette(visualPalette: IResolvable)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      public fun visualPalette(visualPalette: VisualPaletteProperty)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fce003cf96aa6e2358f8088f8672f4622fa70d21cd02008839887b9798923fb1")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartConfigurationProperty.builder()

      /**
       * @param barsArrangement Determines the arrangement of the bars.
       * The orientation and arrangement of bars determine the type of bar that is used in the
       * visual.
       */
      override fun barsArrangement(barsArrangement: String) {
        cdkBuilder.barsArrangement(barsArrangement)
      }

      /**
       * @param categoryAxis The label display options (grid line, range, scale, axis step) for bar
       * chart category.
       */
      override fun categoryAxis(categoryAxis: IResolvable) {
        cdkBuilder.categoryAxis(categoryAxis.let(IResolvable::unwrap))
      }

      /**
       * @param categoryAxis The label display options (grid line, range, scale, axis step) for bar
       * chart category.
       */
      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty) {
        cdkBuilder.categoryAxis(categoryAxis.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param categoryAxis The label display options (grid line, range, scale, axis step) for bar
       * chart category.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf56712b2ae0bbcdbc7a4404fa1ee564350b5faedde757a42d3ac64f680e1e89")
      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          categoryAxis(AxisDisplayOptionsProperty(categoryAxis))

      /**
       * @param categoryLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a bar chart.
       */
      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param categoryLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a bar chart.
       */
      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param categoryLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a bar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("490beda3566f83a6cf8321717cb8d4618d8a955c91ce2fe24e3c116ef650af51")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      /**
       * @param colorLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a color that is used in a bar chart.
       */
      override fun colorLabelOptions(colorLabelOptions: IResolvable) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param colorLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a color that is used in a bar chart.
       */
      override fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param colorLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a color that is used in a bar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9e9f059f6f75d4c589d0c0abe888caaea2e5c6310277175ba06b730366fd4b8e")
      override
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = colorLabelOptions(ChartAxisLabelOptionsProperty(colorLabelOptions))

      /**
       * @param contributionAnalysisDefaults The contribution analysis (anomaly configuration) setup
       * of the visual.
       */
      override fun contributionAnalysisDefaults(contributionAnalysisDefaults: IResolvable) {
        cdkBuilder.contributionAnalysisDefaults(contributionAnalysisDefaults.let(IResolvable::unwrap))
      }

      /**
       * @param contributionAnalysisDefaults The contribution analysis (anomaly configuration) setup
       * of the visual.
       */
      override fun contributionAnalysisDefaults(contributionAnalysisDefaults: List<Any>) {
        cdkBuilder.contributionAnalysisDefaults(contributionAnalysisDefaults)
      }

      /**
       * @param contributionAnalysisDefaults The contribution analysis (anomaly configuration) setup
       * of the visual.
       */
      override fun contributionAnalysisDefaults(vararg contributionAnalysisDefaults: Any): Unit =
          contributionAnalysisDefaults(contributionAnalysisDefaults.toList())

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b17c8dd64554bd9edafab6beb8021726fb82f96ed5395c0fd48ca9b7d28bdc29")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: BarChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(BarChartFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dad406587ec401bac79781bddf9e933075509b1ad2d7beea52e2d2e6d9444f3b")
      override fun fieldWells(fieldWells: BarChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(BarChartFieldWellsProperty(fieldWells))

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0eace4944f94f22cee4d37454da21504866031f29bfa7478ff2dc29f6b992c5d")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      /**
       * @param orientation The orientation of the bars in a bar chart visual. There are two valid
       * values in this structure:.
       * * `HORIZONTAL` : Used for charts that have horizontal bars. Visuals that use this value are
       * horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.
       * * `VERTICAL` : Used for charts that have vertical bars. Visuals that use this value are
       * vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.
       */
      override fun orientation(orientation: String) {
        cdkBuilder.orientation(orientation)
      }

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      override fun referenceLines(referenceLines: IResolvable) {
        cdkBuilder.referenceLines(referenceLines.let(IResolvable::unwrap))
      }

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      override fun referenceLines(referenceLines: List<Any>) {
        cdkBuilder.referenceLines(referenceLines)
      }

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      override fun referenceLines(vararg referenceLines: Any): Unit =
          referenceLines(referenceLines.toList())

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      override fun smallMultiplesOptions(smallMultiplesOptions: IResolvable) {
        cdkBuilder.smallMultiplesOptions(smallMultiplesOptions.let(IResolvable::unwrap))
      }

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      override fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty) {
        cdkBuilder.smallMultiplesOptions(smallMultiplesOptions.let(SmallMultiplesOptionsProperty::unwrap))
      }

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1575673560c16557f1f1d6f32ae3208c3998bf0db11f69a12b8b51fc09ac6eb0")
      override
          fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty.Builder.() -> Unit):
          Unit = smallMultiplesOptions(SmallMultiplesOptionsProperty(smallMultiplesOptions))

      /**
       * @param sortConfiguration The sort configuration of a `BarChartVisual` .
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a `BarChartVisual` .
       */
      override fun sortConfiguration(sortConfiguration: BarChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(BarChartSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a `BarChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("83d30d92f050daef4ce342bf8dc2fc614726db23f39e6bbc7a9b21a2cc878b16")
      override
          fun sortConfiguration(sortConfiguration: BarChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(BarChartSortConfigurationProperty(sortConfiguration))

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("18bafe3886a66067c92ba4661df143615100f7ff7a5c851a6ee47dde0cb2173e")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      /**
       * @param valueAxis The label display options (grid line, range, scale, axis step) for a bar
       * chart value.
       */
      override fun valueAxis(valueAxis: IResolvable) {
        cdkBuilder.valueAxis(valueAxis.let(IResolvable::unwrap))
      }

      /**
       * @param valueAxis The label display options (grid line, range, scale, axis step) for a bar
       * chart value.
       */
      override fun valueAxis(valueAxis: AxisDisplayOptionsProperty) {
        cdkBuilder.valueAxis(valueAxis.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param valueAxis The label display options (grid line, range, scale, axis step) for a bar
       * chart value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b5f6fa63fe32b4aff00ed8bce46d6ca8b06978db6e1ec101a6ec509ab7ac9058")
      override fun valueAxis(valueAxis: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          valueAxis(AxisDisplayOptionsProperty(valueAxis))

      /**
       * @param valueLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a bar chart value.
       */
      override fun valueLabelOptions(valueLabelOptions: IResolvable) {
        cdkBuilder.valueLabelOptions(valueLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param valueLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a bar chart value.
       */
      override fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.valueLabelOptions(valueLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param valueLabelOptions The label options (label text, label visibility and sort icon
       * visibility) for a bar chart value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ab02f617483361b1bb4d36653d70b5110bd718b260f1c08ccdbbe5d02f3f7e5f")
      override
          fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = valueLabelOptions(ChartAxisLabelOptionsProperty(valueLabelOptions))

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fce003cf96aa6e2358f8088f8672f4622fa70d21cd02008839887b9798923fb1")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartConfigurationProperty,
    ) : BarChartConfigurationProperty {
      /**
       * Determines the arrangement of the bars.
       *
       * The orientation and arrangement of bars determine the type of bar that is used in the
       * visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-barsarrangement)
       */
      override fun barsArrangement(): String? = unwrap(this).getBarsArrangement()

      /**
       * The label display options (grid line, range, scale, axis step) for bar chart category.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-categoryaxis)
       */
      override fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

      /**
       * The label options (label text, label visibility and sort icon visibility) for a bar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-categorylabeloptions)
       */
      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      /**
       * The label options (label text, label visibility and sort icon visibility) for a color that
       * is used in a bar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-colorlabeloptions)
       */
      override fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

      /**
       * The contribution analysis (anomaly configuration) setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-contributionanalysisdefaults)
       */
      override fun contributionAnalysisDefaults(): Any? =
          unwrap(this).getContributionAnalysisDefaults()

      /**
       * The options that determine if visual data labels are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-datalabels)
       */
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      /**
       * The field wells of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The legend display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-legend)
       */
      override fun legend(): Any? = unwrap(this).getLegend()

      /**
       * The orientation of the bars in a bar chart visual. There are two valid values in this
       * structure:.
       *
       * * `HORIZONTAL` : Used for charts that have horizontal bars. Visuals that use this value are
       * horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.
       * * `VERTICAL` : Used for charts that have vertical bars. Visuals that use this value are
       * vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-orientation)
       */
      override fun orientation(): String? = unwrap(this).getOrientation()

      /**
       * The reference line setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-referencelines)
       */
      override fun referenceLines(): Any? = unwrap(this).getReferenceLines()

      /**
       * The small multiples setup for the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-smallmultiplesoptions)
       */
      override fun smallMultiplesOptions(): Any? = unwrap(this).getSmallMultiplesOptions()

      /**
       * The sort configuration of a `BarChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The tooltip display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-tooltip)
       */
      override fun tooltip(): Any? = unwrap(this).getTooltip()

      /**
       * The label display options (grid line, range, scale, axis step) for a bar chart value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-valueaxis)
       */
      override fun valueAxis(): Any? = unwrap(this).getValueAxis()

      /**
       * The label options (label text, label visibility and sort icon visibility) for a bar chart
       * value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-valuelabeloptions)
       */
      override fun valueLabelOptions(): Any? = unwrap(this).getValueLabelOptions()

      /**
       * The palette (chart color) display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-visualpalette)
       */
      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): BarChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartConfigurationProperty):
          BarChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BarChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface LineChartAggregatedFieldWellsProperty {
    /**
     * The category field wells of a line chart.
     *
     * Values are grouped by category fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html#cfn-quicksight-analysis-linechartaggregatedfieldwells-category)
     */
    public fun category(): Any? = unwrap(this).getCategory()

    /**
     * The color field wells of a line chart.
     *
     * Values are grouped by category fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html#cfn-quicksight-analysis-linechartaggregatedfieldwells-colors)
     */
    public fun colors(): Any? = unwrap(this).getColors()

    /**
     * The small multiples field well of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html#cfn-quicksight-analysis-linechartaggregatedfieldwells-smallmultiples)
     */
    public fun smallMultiples(): Any? = unwrap(this).getSmallMultiples()

    /**
     * The value field wells of a line chart.
     *
     * Values are aggregated based on categories.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html#cfn-quicksight-analysis-linechartaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [LineChartAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param category The category field wells of a line chart.
       * Values are grouped by category fields.
       */
      public fun category(category: IResolvable)

      /**
       * @param category The category field wells of a line chart.
       * Values are grouped by category fields.
       */
      public fun category(category: List<Any>)

      /**
       * @param category The category field wells of a line chart.
       * Values are grouped by category fields.
       */
      public fun category(vararg category: Any)

      /**
       * @param colors The color field wells of a line chart.
       * Values are grouped by category fields.
       */
      public fun colors(colors: IResolvable)

      /**
       * @param colors The color field wells of a line chart.
       * Values are grouped by category fields.
       */
      public fun colors(colors: List<Any>)

      /**
       * @param colors The color field wells of a line chart.
       * Values are grouped by category fields.
       */
      public fun colors(vararg colors: Any)

      /**
       * @param smallMultiples The small multiples field well of a line chart.
       */
      public fun smallMultiples(smallMultiples: IResolvable)

      /**
       * @param smallMultiples The small multiples field well of a line chart.
       */
      public fun smallMultiples(smallMultiples: List<Any>)

      /**
       * @param smallMultiples The small multiples field well of a line chart.
       */
      public fun smallMultiples(vararg smallMultiples: Any)

      /**
       * @param values The value field wells of a line chart.
       * Values are aggregated based on categories.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The value field wells of a line chart.
       * Values are aggregated based on categories.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The value field wells of a line chart.
       * Values are aggregated based on categories.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartAggregatedFieldWellsProperty.builder()

      /**
       * @param category The category field wells of a line chart.
       * Values are grouped by category fields.
       */
      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      /**
       * @param category The category field wells of a line chart.
       * Values are grouped by category fields.
       */
      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      /**
       * @param category The category field wells of a line chart.
       * Values are grouped by category fields.
       */
      override fun category(vararg category: Any): Unit = category(category.toList())

      /**
       * @param colors The color field wells of a line chart.
       * Values are grouped by category fields.
       */
      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      /**
       * @param colors The color field wells of a line chart.
       * Values are grouped by category fields.
       */
      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      /**
       * @param colors The color field wells of a line chart.
       * Values are grouped by category fields.
       */
      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      /**
       * @param smallMultiples The small multiples field well of a line chart.
       */
      override fun smallMultiples(smallMultiples: IResolvable) {
        cdkBuilder.smallMultiples(smallMultiples.let(IResolvable::unwrap))
      }

      /**
       * @param smallMultiples The small multiples field well of a line chart.
       */
      override fun smallMultiples(smallMultiples: List<Any>) {
        cdkBuilder.smallMultiples(smallMultiples)
      }

      /**
       * @param smallMultiples The small multiples field well of a line chart.
       */
      override fun smallMultiples(vararg smallMultiples: Any): Unit =
          smallMultiples(smallMultiples.toList())

      /**
       * @param values The value field wells of a line chart.
       * Values are aggregated based on categories.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The value field wells of a line chart.
       * Values are aggregated based on categories.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The value field wells of a line chart.
       * Values are aggregated based on categories.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartAggregatedFieldWellsProperty,
    ) : LineChartAggregatedFieldWellsProperty {
      /**
       * The category field wells of a line chart.
       *
       * Values are grouped by category fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html#cfn-quicksight-analysis-linechartaggregatedfieldwells-category)
       */
      override fun category(): Any? = unwrap(this).getCategory()

      /**
       * The color field wells of a line chart.
       *
       * Values are grouped by category fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html#cfn-quicksight-analysis-linechartaggregatedfieldwells-colors)
       */
      override fun colors(): Any? = unwrap(this).getColors()

      /**
       * The small multiples field well of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html#cfn-quicksight-analysis-linechartaggregatedfieldwells-smallmultiples)
       */
      override fun smallMultiples(): Any? = unwrap(this).getSmallMultiples()

      /**
       * The value field wells of a line chart.
       *
       * Values are aggregated based on categories.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html#cfn-quicksight-analysis-linechartaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          LineChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartAggregatedFieldWellsProperty):
          LineChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DimensionFieldProperty {
    /**
     * The dimension type field with categorical type columns.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dimensionfield.html#cfn-quicksight-analysis-dimensionfield-categoricaldimensionfield)
     */
    public fun categoricalDimensionField(): Any? = unwrap(this).getCategoricalDimensionField()

    /**
     * The dimension type field with date type columns.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dimensionfield.html#cfn-quicksight-analysis-dimensionfield-datedimensionfield)
     */
    public fun dateDimensionField(): Any? = unwrap(this).getDateDimensionField()

    /**
     * The dimension type field with numerical type columns.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dimensionfield.html#cfn-quicksight-analysis-dimensionfield-numericaldimensionfield)
     */
    public fun numericalDimensionField(): Any? = unwrap(this).getNumericalDimensionField()

    /**
     * A builder for [DimensionFieldProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoricalDimensionField The dimension type field with categorical type columns.
       */
      public fun categoricalDimensionField(categoricalDimensionField: IResolvable)

      /**
       * @param categoricalDimensionField The dimension type field with categorical type columns.
       */
      public
          fun categoricalDimensionField(categoricalDimensionField: CategoricalDimensionFieldProperty)

      /**
       * @param categoricalDimensionField The dimension type field with categorical type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d54cb38feb1d698ffcb452aa387d54af6515db7b3a38c2540158d8131c9304c5")
      public
          fun categoricalDimensionField(categoricalDimensionField: CategoricalDimensionFieldProperty.Builder.() -> Unit)

      /**
       * @param dateDimensionField The dimension type field with date type columns.
       */
      public fun dateDimensionField(dateDimensionField: IResolvable)

      /**
       * @param dateDimensionField The dimension type field with date type columns.
       */
      public fun dateDimensionField(dateDimensionField: DateDimensionFieldProperty)

      /**
       * @param dateDimensionField The dimension type field with date type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("08d86fa0f1da4dc4a2cc60eaf23311fda4f87911a61c5bf256259d5245b97e24")
      public
          fun dateDimensionField(dateDimensionField: DateDimensionFieldProperty.Builder.() -> Unit)

      /**
       * @param numericalDimensionField The dimension type field with numerical type columns.
       */
      public fun numericalDimensionField(numericalDimensionField: IResolvable)

      /**
       * @param numericalDimensionField The dimension type field with numerical type columns.
       */
      public fun numericalDimensionField(numericalDimensionField: NumericalDimensionFieldProperty)

      /**
       * @param numericalDimensionField The dimension type field with numerical type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("add44b9a8b9300a31dd368f48cde86f7ee6acb3b94720887eaeb3ca1c41c04ac")
      public
          fun numericalDimensionField(numericalDimensionField: NumericalDimensionFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DimensionFieldProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DimensionFieldProperty.builder()

      /**
       * @param categoricalDimensionField The dimension type field with categorical type columns.
       */
      override fun categoricalDimensionField(categoricalDimensionField: IResolvable) {
        cdkBuilder.categoricalDimensionField(categoricalDimensionField.let(IResolvable::unwrap))
      }

      /**
       * @param categoricalDimensionField The dimension type field with categorical type columns.
       */
      override
          fun categoricalDimensionField(categoricalDimensionField: CategoricalDimensionFieldProperty) {
        cdkBuilder.categoricalDimensionField(categoricalDimensionField.let(CategoricalDimensionFieldProperty::unwrap))
      }

      /**
       * @param categoricalDimensionField The dimension type field with categorical type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d54cb38feb1d698ffcb452aa387d54af6515db7b3a38c2540158d8131c9304c5")
      override
          fun categoricalDimensionField(categoricalDimensionField: CategoricalDimensionFieldProperty.Builder.() -> Unit):
          Unit =
          categoricalDimensionField(CategoricalDimensionFieldProperty(categoricalDimensionField))

      /**
       * @param dateDimensionField The dimension type field with date type columns.
       */
      override fun dateDimensionField(dateDimensionField: IResolvable) {
        cdkBuilder.dateDimensionField(dateDimensionField.let(IResolvable::unwrap))
      }

      /**
       * @param dateDimensionField The dimension type field with date type columns.
       */
      override fun dateDimensionField(dateDimensionField: DateDimensionFieldProperty) {
        cdkBuilder.dateDimensionField(dateDimensionField.let(DateDimensionFieldProperty::unwrap))
      }

      /**
       * @param dateDimensionField The dimension type field with date type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("08d86fa0f1da4dc4a2cc60eaf23311fda4f87911a61c5bf256259d5245b97e24")
      override
          fun dateDimensionField(dateDimensionField: DateDimensionFieldProperty.Builder.() -> Unit):
          Unit = dateDimensionField(DateDimensionFieldProperty(dateDimensionField))

      /**
       * @param numericalDimensionField The dimension type field with numerical type columns.
       */
      override fun numericalDimensionField(numericalDimensionField: IResolvable) {
        cdkBuilder.numericalDimensionField(numericalDimensionField.let(IResolvable::unwrap))
      }

      /**
       * @param numericalDimensionField The dimension type field with numerical type columns.
       */
      override
          fun numericalDimensionField(numericalDimensionField: NumericalDimensionFieldProperty) {
        cdkBuilder.numericalDimensionField(numericalDimensionField.let(NumericalDimensionFieldProperty::unwrap))
      }

      /**
       * @param numericalDimensionField The dimension type field with numerical type columns.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("add44b9a8b9300a31dd368f48cde86f7ee6acb3b94720887eaeb3ca1c41c04ac")
      override
          fun numericalDimensionField(numericalDimensionField: NumericalDimensionFieldProperty.Builder.() -> Unit):
          Unit = numericalDimensionField(NumericalDimensionFieldProperty(numericalDimensionField))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DimensionFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DimensionFieldProperty,
    ) : DimensionFieldProperty {
      /**
       * The dimension type field with categorical type columns.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dimensionfield.html#cfn-quicksight-analysis-dimensionfield-categoricaldimensionfield)
       */
      override fun categoricalDimensionField(): Any? = unwrap(this).getCategoricalDimensionField()

      /**
       * The dimension type field with date type columns.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dimensionfield.html#cfn-quicksight-analysis-dimensionfield-datedimensionfield)
       */
      override fun dateDimensionField(): Any? = unwrap(this).getDateDimensionField()

      /**
       * The dimension type field with numerical type columns.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dimensionfield.html#cfn-quicksight-analysis-dimensionfield-numericaldimensionfield)
       */
      override fun numericalDimensionField(): Any? = unwrap(this).getNumericalDimensionField()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DimensionFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DimensionFieldProperty):
          DimensionFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DimensionFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DimensionFieldProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface SheetVisualScopingConfigurationProperty {
    /**
     * The scope of the applied entities. Choose one of the following options:.
     *
     * * `ALL_VISUALS`
     * * `SELECTED_VISUALS`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetvisualscopingconfiguration.html#cfn-quicksight-analysis-sheetvisualscopingconfiguration-scope)
     */
    public fun scope(): String

    /**
     * The selected sheet that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetvisualscopingconfiguration.html#cfn-quicksight-analysis-sheetvisualscopingconfiguration-sheetid)
     */
    public fun sheetId(): String

    /**
     * The selected visuals that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetvisualscopingconfiguration.html#cfn-quicksight-analysis-sheetvisualscopingconfiguration-visualids)
     */
    public fun visualIds(): List<String> = unwrap(this).getVisualIds() ?: emptyList()

    /**
     * A builder for [SheetVisualScopingConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param scope The scope of the applied entities. Choose one of the following options:. 
       * * `ALL_VISUALS`
       * * `SELECTED_VISUALS`
       */
      public fun scope(scope: String)

      /**
       * @param sheetId The selected sheet that the filter is applied to. 
       */
      public fun sheetId(sheetId: String)

      /**
       * @param visualIds The selected visuals that the filter is applied to.
       */
      public fun visualIds(visualIds: List<String>)

      /**
       * @param visualIds The selected visuals that the filter is applied to.
       */
      public fun visualIds(vararg visualIds: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetVisualScopingConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetVisualScopingConfigurationProperty.builder()

      /**
       * @param scope The scope of the applied entities. Choose one of the following options:. 
       * * `ALL_VISUALS`
       * * `SELECTED_VISUALS`
       */
      override fun scope(scope: String) {
        cdkBuilder.scope(scope)
      }

      /**
       * @param sheetId The selected sheet that the filter is applied to. 
       */
      override fun sheetId(sheetId: String) {
        cdkBuilder.sheetId(sheetId)
      }

      /**
       * @param visualIds The selected visuals that the filter is applied to.
       */
      override fun visualIds(visualIds: List<String>) {
        cdkBuilder.visualIds(visualIds)
      }

      /**
       * @param visualIds The selected visuals that the filter is applied to.
       */
      override fun visualIds(vararg visualIds: String): Unit = visualIds(visualIds.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetVisualScopingConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetVisualScopingConfigurationProperty,
    ) : SheetVisualScopingConfigurationProperty {
      /**
       * The scope of the applied entities. Choose one of the following options:.
       *
       * * `ALL_VISUALS`
       * * `SELECTED_VISUALS`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetvisualscopingconfiguration.html#cfn-quicksight-analysis-sheetvisualscopingconfiguration-scope)
       */
      override fun scope(): String = unwrap(this).getScope()

      /**
       * The selected sheet that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetvisualscopingconfiguration.html#cfn-quicksight-analysis-sheetvisualscopingconfiguration-sheetid)
       */
      override fun sheetId(): String = unwrap(this).getSheetId()

      /**
       * The selected visuals that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetvisualscopingconfiguration.html#cfn-quicksight-analysis-sheetvisualscopingconfiguration-visualids)
       */
      override fun visualIds(): List<String> = unwrap(this).getVisualIds() ?: emptyList()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SheetVisualScopingConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetVisualScopingConfigurationProperty):
          SheetVisualScopingConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetVisualScopingConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetVisualScopingConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableSideBorderOptionsProperty {
    /**
     * The table border options of the bottom border.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-bottom)
     */
    public fun bottom(): Any? = unwrap(this).getBottom()

    /**
     * The table border options of the inner horizontal border.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-innerhorizontal)
     */
    public fun innerHorizontal(): Any? = unwrap(this).getInnerHorizontal()

    /**
     * The table border options of the inner vertical border.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-innervertical)
     */
    public fun innerVertical(): Any? = unwrap(this).getInnerVertical()

    /**
     * The table border options of the left border.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-left)
     */
    public fun left(): Any? = unwrap(this).getLeft()

    /**
     * The table border options of the right border.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-right)
     */
    public fun right(): Any? = unwrap(this).getRight()

    /**
     * The table border options of the top border.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-top)
     */
    public fun top(): Any? = unwrap(this).getTop()

    /**
     * A builder for [TableSideBorderOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param bottom The table border options of the bottom border.
       */
      public fun bottom(bottom: IResolvable)

      /**
       * @param bottom The table border options of the bottom border.
       */
      public fun bottom(bottom: TableBorderOptionsProperty)

      /**
       * @param bottom The table border options of the bottom border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("baa1219772c65c1222b3e001059476f7f107362fd74b80d6783e7c8aa43c9d3b")
      public fun bottom(bottom: TableBorderOptionsProperty.Builder.() -> Unit)

      /**
       * @param innerHorizontal The table border options of the inner horizontal border.
       */
      public fun innerHorizontal(innerHorizontal: IResolvable)

      /**
       * @param innerHorizontal The table border options of the inner horizontal border.
       */
      public fun innerHorizontal(innerHorizontal: TableBorderOptionsProperty)

      /**
       * @param innerHorizontal The table border options of the inner horizontal border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd16a5eb65b3fedb8cff39594077fe8af20994796288f1e0c8e8b47185d9d925")
      public fun innerHorizontal(innerHorizontal: TableBorderOptionsProperty.Builder.() -> Unit)

      /**
       * @param innerVertical The table border options of the inner vertical border.
       */
      public fun innerVertical(innerVertical: IResolvable)

      /**
       * @param innerVertical The table border options of the inner vertical border.
       */
      public fun innerVertical(innerVertical: TableBorderOptionsProperty)

      /**
       * @param innerVertical The table border options of the inner vertical border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f27b64d935e1bcc1123798727c6a2f38474834fb9147ae55444c1e29765d36ee")
      public fun innerVertical(innerVertical: TableBorderOptionsProperty.Builder.() -> Unit)

      /**
       * @param left The table border options of the left border.
       */
      public fun left(left: IResolvable)

      /**
       * @param left The table border options of the left border.
       */
      public fun left(left: TableBorderOptionsProperty)

      /**
       * @param left The table border options of the left border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a2a52778b32d6601620bf0eaafe4365a4f238061110f44cc7d09db0d2fc98463")
      public fun left(left: TableBorderOptionsProperty.Builder.() -> Unit)

      /**
       * @param right The table border options of the right border.
       */
      public fun right(right: IResolvable)

      /**
       * @param right The table border options of the right border.
       */
      public fun right(right: TableBorderOptionsProperty)

      /**
       * @param right The table border options of the right border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ada5968bd88a640b9e980f0b5664867af60c6174d3db7a9a3b6643b3cf8efbaa")
      public fun right(right: TableBorderOptionsProperty.Builder.() -> Unit)

      /**
       * @param top The table border options of the top border.
       */
      public fun top(top: IResolvable)

      /**
       * @param top The table border options of the top border.
       */
      public fun top(top: TableBorderOptionsProperty)

      /**
       * @param top The table border options of the top border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2bf3f41dfb50a6e426a90776ad523499d9fe5cd9db2b0e1a2cf5f5400dcd428c")
      public fun top(top: TableBorderOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableSideBorderOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableSideBorderOptionsProperty.builder()

      /**
       * @param bottom The table border options of the bottom border.
       */
      override fun bottom(bottom: IResolvable) {
        cdkBuilder.bottom(bottom.let(IResolvable::unwrap))
      }

      /**
       * @param bottom The table border options of the bottom border.
       */
      override fun bottom(bottom: TableBorderOptionsProperty) {
        cdkBuilder.bottom(bottom.let(TableBorderOptionsProperty::unwrap))
      }

      /**
       * @param bottom The table border options of the bottom border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("baa1219772c65c1222b3e001059476f7f107362fd74b80d6783e7c8aa43c9d3b")
      override fun bottom(bottom: TableBorderOptionsProperty.Builder.() -> Unit): Unit =
          bottom(TableBorderOptionsProperty(bottom))

      /**
       * @param innerHorizontal The table border options of the inner horizontal border.
       */
      override fun innerHorizontal(innerHorizontal: IResolvable) {
        cdkBuilder.innerHorizontal(innerHorizontal.let(IResolvable::unwrap))
      }

      /**
       * @param innerHorizontal The table border options of the inner horizontal border.
       */
      override fun innerHorizontal(innerHorizontal: TableBorderOptionsProperty) {
        cdkBuilder.innerHorizontal(innerHorizontal.let(TableBorderOptionsProperty::unwrap))
      }

      /**
       * @param innerHorizontal The table border options of the inner horizontal border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd16a5eb65b3fedb8cff39594077fe8af20994796288f1e0c8e8b47185d9d925")
      override fun innerHorizontal(innerHorizontal: TableBorderOptionsProperty.Builder.() -> Unit):
          Unit = innerHorizontal(TableBorderOptionsProperty(innerHorizontal))

      /**
       * @param innerVertical The table border options of the inner vertical border.
       */
      override fun innerVertical(innerVertical: IResolvable) {
        cdkBuilder.innerVertical(innerVertical.let(IResolvable::unwrap))
      }

      /**
       * @param innerVertical The table border options of the inner vertical border.
       */
      override fun innerVertical(innerVertical: TableBorderOptionsProperty) {
        cdkBuilder.innerVertical(innerVertical.let(TableBorderOptionsProperty::unwrap))
      }

      /**
       * @param innerVertical The table border options of the inner vertical border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f27b64d935e1bcc1123798727c6a2f38474834fb9147ae55444c1e29765d36ee")
      override fun innerVertical(innerVertical: TableBorderOptionsProperty.Builder.() -> Unit): Unit
          = innerVertical(TableBorderOptionsProperty(innerVertical))

      /**
       * @param left The table border options of the left border.
       */
      override fun left(left: IResolvable) {
        cdkBuilder.left(left.let(IResolvable::unwrap))
      }

      /**
       * @param left The table border options of the left border.
       */
      override fun left(left: TableBorderOptionsProperty) {
        cdkBuilder.left(left.let(TableBorderOptionsProperty::unwrap))
      }

      /**
       * @param left The table border options of the left border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a2a52778b32d6601620bf0eaafe4365a4f238061110f44cc7d09db0d2fc98463")
      override fun left(left: TableBorderOptionsProperty.Builder.() -> Unit): Unit =
          left(TableBorderOptionsProperty(left))

      /**
       * @param right The table border options of the right border.
       */
      override fun right(right: IResolvable) {
        cdkBuilder.right(right.let(IResolvable::unwrap))
      }

      /**
       * @param right The table border options of the right border.
       */
      override fun right(right: TableBorderOptionsProperty) {
        cdkBuilder.right(right.let(TableBorderOptionsProperty::unwrap))
      }

      /**
       * @param right The table border options of the right border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ada5968bd88a640b9e980f0b5664867af60c6174d3db7a9a3b6643b3cf8efbaa")
      override fun right(right: TableBorderOptionsProperty.Builder.() -> Unit): Unit =
          right(TableBorderOptionsProperty(right))

      /**
       * @param top The table border options of the top border.
       */
      override fun top(top: IResolvable) {
        cdkBuilder.top(top.let(IResolvable::unwrap))
      }

      /**
       * @param top The table border options of the top border.
       */
      override fun top(top: TableBorderOptionsProperty) {
        cdkBuilder.top(top.let(TableBorderOptionsProperty::unwrap))
      }

      /**
       * @param top The table border options of the top border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2bf3f41dfb50a6e426a90776ad523499d9fe5cd9db2b0e1a2cf5f5400dcd428c")
      override fun top(top: TableBorderOptionsProperty.Builder.() -> Unit): Unit =
          top(TableBorderOptionsProperty(top))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableSideBorderOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableSideBorderOptionsProperty,
    ) : TableSideBorderOptionsProperty {
      /**
       * The table border options of the bottom border.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-bottom)
       */
      override fun bottom(): Any? = unwrap(this).getBottom()

      /**
       * The table border options of the inner horizontal border.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-innerhorizontal)
       */
      override fun innerHorizontal(): Any? = unwrap(this).getInnerHorizontal()

      /**
       * The table border options of the inner vertical border.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-innervertical)
       */
      override fun innerVertical(): Any? = unwrap(this).getInnerVertical()

      /**
       * The table border options of the left border.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-left)
       */
      override fun left(): Any? = unwrap(this).getLeft()

      /**
       * The table border options of the right border.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-right)
       */
      override fun right(): Any? = unwrap(this).getRight()

      /**
       * The table border options of the top border.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-top)
       */
      override fun top(): Any? = unwrap(this).getTop()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TableSideBorderOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableSideBorderOptionsProperty):
          TableSideBorderOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableSideBorderOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableSideBorderOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface LineChartFieldWellsProperty {
    /**
     * The field well configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartfieldwells.html#cfn-quicksight-analysis-linechartfieldwells-linechartaggregatedfieldwells)
     */
    public fun lineChartAggregatedFieldWells(): Any? =
        unwrap(this).getLineChartAggregatedFieldWells()

    /**
     * A builder for [LineChartFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param lineChartAggregatedFieldWells The field well configuration of a line chart.
       */
      public fun lineChartAggregatedFieldWells(lineChartAggregatedFieldWells: IResolvable)

      /**
       * @param lineChartAggregatedFieldWells The field well configuration of a line chart.
       */
      public
          fun lineChartAggregatedFieldWells(lineChartAggregatedFieldWells: LineChartAggregatedFieldWellsProperty)

      /**
       * @param lineChartAggregatedFieldWells The field well configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6d5ae491c4f733334322c1a7ae9d28aa046ae57178c57b849c5fff95ff429fbd")
      public
          fun lineChartAggregatedFieldWells(lineChartAggregatedFieldWells: LineChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartFieldWellsProperty.builder()

      /**
       * @param lineChartAggregatedFieldWells The field well configuration of a line chart.
       */
      override fun lineChartAggregatedFieldWells(lineChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.lineChartAggregatedFieldWells(lineChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param lineChartAggregatedFieldWells The field well configuration of a line chart.
       */
      override
          fun lineChartAggregatedFieldWells(lineChartAggregatedFieldWells: LineChartAggregatedFieldWellsProperty) {
        cdkBuilder.lineChartAggregatedFieldWells(lineChartAggregatedFieldWells.let(LineChartAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param lineChartAggregatedFieldWells The field well configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6d5ae491c4f733334322c1a7ae9d28aa046ae57178c57b849c5fff95ff429fbd")
      override
          fun lineChartAggregatedFieldWells(lineChartAggregatedFieldWells: LineChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          lineChartAggregatedFieldWells(LineChartAggregatedFieldWellsProperty(lineChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartFieldWellsProperty,
    ) : LineChartFieldWellsProperty {
      /**
       * The field well configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartfieldwells.html#cfn-quicksight-analysis-linechartfieldwells-linechartaggregatedfieldwells)
       */
      override fun lineChartAggregatedFieldWells(): Any? =
          unwrap(this).getLineChartAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): LineChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartFieldWellsProperty):
          LineChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ComparisonConfigurationProperty {
    /**
     * The format of the comparison.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonconfiguration.html#cfn-quicksight-analysis-comparisonconfiguration-comparisonformat)
     */
    public fun comparisonFormat(): Any? = unwrap(this).getComparisonFormat()

    /**
     * The method of the comparison. Choose from the following options:.
     *
     * * `DIFFERENCE`
     * * `PERCENT_DIFFERENCE`
     * * `PERCENT`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonconfiguration.html#cfn-quicksight-analysis-comparisonconfiguration-comparisonmethod)
     */
    public fun comparisonMethod(): String? = unwrap(this).getComparisonMethod()

    /**
     * A builder for [ComparisonConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param comparisonFormat The format of the comparison.
       */
      public fun comparisonFormat(comparisonFormat: IResolvable)

      /**
       * @param comparisonFormat The format of the comparison.
       */
      public fun comparisonFormat(comparisonFormat: ComparisonFormatConfigurationProperty)

      /**
       * @param comparisonFormat The format of the comparison.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("28e9dfcfb1b25d4eccf0ed1e43ffd86092de2270bb32ab1d16c4f233d78a54ce")
      public
          fun comparisonFormat(comparisonFormat: ComparisonFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param comparisonMethod The method of the comparison. Choose from the following options:.
       * * `DIFFERENCE`
       * * `PERCENT_DIFFERENCE`
       * * `PERCENT`
       */
      public fun comparisonMethod(comparisonMethod: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComparisonConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComparisonConfigurationProperty.builder()

      /**
       * @param comparisonFormat The format of the comparison.
       */
      override fun comparisonFormat(comparisonFormat: IResolvable) {
        cdkBuilder.comparisonFormat(comparisonFormat.let(IResolvable::unwrap))
      }

      /**
       * @param comparisonFormat The format of the comparison.
       */
      override fun comparisonFormat(comparisonFormat: ComparisonFormatConfigurationProperty) {
        cdkBuilder.comparisonFormat(comparisonFormat.let(ComparisonFormatConfigurationProperty::unwrap))
      }

      /**
       * @param comparisonFormat The format of the comparison.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("28e9dfcfb1b25d4eccf0ed1e43ffd86092de2270bb32ab1d16c4f233d78a54ce")
      override
          fun comparisonFormat(comparisonFormat: ComparisonFormatConfigurationProperty.Builder.() -> Unit):
          Unit = comparisonFormat(ComparisonFormatConfigurationProperty(comparisonFormat))

      /**
       * @param comparisonMethod The method of the comparison. Choose from the following options:.
       * * `DIFFERENCE`
       * * `PERCENT_DIFFERENCE`
       * * `PERCENT`
       */
      override fun comparisonMethod(comparisonMethod: String) {
        cdkBuilder.comparisonMethod(comparisonMethod)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComparisonConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComparisonConfigurationProperty,
    ) : ComparisonConfigurationProperty {
      /**
       * The format of the comparison.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonconfiguration.html#cfn-quicksight-analysis-comparisonconfiguration-comparisonformat)
       */
      override fun comparisonFormat(): Any? = unwrap(this).getComparisonFormat()

      /**
       * The method of the comparison. Choose from the following options:.
       *
       * * `DIFFERENCE`
       * * `PERCENT_DIFFERENCE`
       * * `PERCENT`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonconfiguration.html#cfn-quicksight-analysis-comparisonconfiguration-comparisonmethod)
       */
      override fun comparisonMethod(): String? = unwrap(this).getComparisonMethod()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ComparisonConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ComparisonConfigurationProperty):
          ComparisonConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComparisonConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComparisonConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface NumberDisplayFormatConfigurationProperty {
    /**
     * The option that determines the decimal places configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-decimalplacesconfiguration)
     */
    public fun decimalPlacesConfiguration(): Any? = unwrap(this).getDecimalPlacesConfiguration()

    /**
     * The options that determine the negative value configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-negativevalueconfiguration)
     */
    public fun negativeValueConfiguration(): Any? = unwrap(this).getNegativeValueConfiguration()

    /**
     * The options that determine the null value format configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-nullvalueformatconfiguration)
     */
    public fun nullValueFormatConfiguration(): Any? = unwrap(this).getNullValueFormatConfiguration()

    /**
     * Determines the number scale value of the number format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-numberscale)
     */
    public fun numberScale(): String? = unwrap(this).getNumberScale()

    /**
     * Determines the prefix value of the number format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-prefix)
     */
    public fun prefix(): String? = unwrap(this).getPrefix()

    /**
     * The options that determine the numeric separator configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-separatorconfiguration)
     */
    public fun separatorConfiguration(): Any? = unwrap(this).getSeparatorConfiguration()

    /**
     * Determines the suffix value of the number format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-suffix)
     */
    public fun suffix(): String? = unwrap(this).getSuffix()

    /**
     * A builder for [NumberDisplayFormatConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      public fun decimalPlacesConfiguration(decimalPlacesConfiguration: IResolvable)

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      public
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty)

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("68754f5dc82cd6016527d11b88fe5951400de59d4b876512979dfda3570f7e1d")
      public
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty.Builder.() -> Unit)

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      public fun negativeValueConfiguration(negativeValueConfiguration: IResolvable)

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      public
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty)

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("35b223f34cdaee828667f827ddb7bcb9e2742bca0903e84eaec2740c9a5461ba")
      public
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty.Builder.() -> Unit)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      public fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b3bf38ab310de09c528ae68f23a8e6b0513a0901af3de5a818d39dbe113a60c0")
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param numberScale Determines the number scale value of the number format.
       */
      public fun numberScale(numberScale: String)

      /**
       * @param prefix Determines the prefix value of the number format.
       */
      public fun prefix(prefix: String)

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      public fun separatorConfiguration(separatorConfiguration: IResolvable)

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      public
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty)

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2296fc38ef585fc3783f78a17672888857af3f2c48dd1de70570c062dd304f1")
      public
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty.Builder.() -> Unit)

      /**
       * @param suffix Determines the suffix value of the number format.
       */
      public fun suffix(suffix: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumberDisplayFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumberDisplayFormatConfigurationProperty.builder()

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      override fun decimalPlacesConfiguration(decimalPlacesConfiguration: IResolvable) {
        cdkBuilder.decimalPlacesConfiguration(decimalPlacesConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      override
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty) {
        cdkBuilder.decimalPlacesConfiguration(decimalPlacesConfiguration.let(DecimalPlacesConfigurationProperty::unwrap))
      }

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("68754f5dc82cd6016527d11b88fe5951400de59d4b876512979dfda3570f7e1d")
      override
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty.Builder.() -> Unit):
          Unit =
          decimalPlacesConfiguration(DecimalPlacesConfigurationProperty(decimalPlacesConfiguration))

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      override fun negativeValueConfiguration(negativeValueConfiguration: IResolvable) {
        cdkBuilder.negativeValueConfiguration(negativeValueConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      override
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty) {
        cdkBuilder.negativeValueConfiguration(negativeValueConfiguration.let(NegativeValueConfigurationProperty::unwrap))
      }

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("35b223f34cdaee828667f827ddb7bcb9e2742bca0903e84eaec2740c9a5461ba")
      override
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty.Builder.() -> Unit):
          Unit =
          negativeValueConfiguration(NegativeValueConfigurationProperty(negativeValueConfiguration))

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      override fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(NullValueFormatConfigurationProperty::unwrap))
      }

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b3bf38ab310de09c528ae68f23a8e6b0513a0901af3de5a818d39dbe113a60c0")
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          nullValueFormatConfiguration(NullValueFormatConfigurationProperty(nullValueFormatConfiguration))

      /**
       * @param numberScale Determines the number scale value of the number format.
       */
      override fun numberScale(numberScale: String) {
        cdkBuilder.numberScale(numberScale)
      }

      /**
       * @param prefix Determines the prefix value of the number format.
       */
      override fun prefix(prefix: String) {
        cdkBuilder.prefix(prefix)
      }

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      override fun separatorConfiguration(separatorConfiguration: IResolvable) {
        cdkBuilder.separatorConfiguration(separatorConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      override
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty) {
        cdkBuilder.separatorConfiguration(separatorConfiguration.let(NumericSeparatorConfigurationProperty::unwrap))
      }

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2296fc38ef585fc3783f78a17672888857af3f2c48dd1de70570c062dd304f1")
      override
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty.Builder.() -> Unit):
          Unit =
          separatorConfiguration(NumericSeparatorConfigurationProperty(separatorConfiguration))

      /**
       * @param suffix Determines the suffix value of the number format.
       */
      override fun suffix(suffix: String) {
        cdkBuilder.suffix(suffix)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumberDisplayFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumberDisplayFormatConfigurationProperty,
    ) : NumberDisplayFormatConfigurationProperty {
      /**
       * The option that determines the decimal places configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-decimalplacesconfiguration)
       */
      override fun decimalPlacesConfiguration(): Any? = unwrap(this).getDecimalPlacesConfiguration()

      /**
       * The options that determine the negative value configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-negativevalueconfiguration)
       */
      override fun negativeValueConfiguration(): Any? = unwrap(this).getNegativeValueConfiguration()

      /**
       * The options that determine the null value format configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-nullvalueformatconfiguration)
       */
      override fun nullValueFormatConfiguration(): Any? =
          unwrap(this).getNullValueFormatConfiguration()

      /**
       * Determines the number scale value of the number format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-numberscale)
       */
      override fun numberScale(): String? = unwrap(this).getNumberScale()

      /**
       * Determines the prefix value of the number format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-prefix)
       */
      override fun prefix(): String? = unwrap(this).getPrefix()

      /**
       * The options that determine the numeric separator configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-separatorconfiguration)
       */
      override fun separatorConfiguration(): Any? = unwrap(this).getSeparatorConfiguration()

      /**
       * Determines the suffix value of the number format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-suffix)
       */
      override fun suffix(): String? = unwrap(this).getSuffix()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          NumberDisplayFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NumberDisplayFormatConfigurationProperty):
          NumberDisplayFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumberDisplayFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumberDisplayFormatConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface NumericalAggregationFunctionProperty {
    /**
     * An aggregation based on the percentile of values in a dimension or measure.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalaggregationfunction.html#cfn-quicksight-analysis-numericalaggregationfunction-percentileaggregation)
     */
    public fun percentileAggregation(): Any? = unwrap(this).getPercentileAggregation()

    /**
     * Built-in aggregation functions for numerical values.
     *
     * * `SUM` : The sum of a dimension or measure.
     * * `AVERAGE` : The average of a dimension or measure.
     * * `MIN` : The minimum value of a dimension or measure.
     * * `MAX` : The maximum value of a dimension or measure.
     * * `COUNT` : The count of a dimension or measure.
     * * `DISTINCT_COUNT` : The count of distinct values in a dimension or measure.
     * * `VAR` : The variance of a dimension or measure.
     * * `VARP` : The partitioned variance of a dimension or measure.
     * * `STDEV` : The standard deviation of a dimension or measure.
     * * `STDEVP` : The partitioned standard deviation of a dimension or measure.
     * * `MEDIAN` : The median value of a dimension or measure.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalaggregationfunction.html#cfn-quicksight-analysis-numericalaggregationfunction-simplenumericalaggregation)
     */
    public fun simpleNumericalAggregation(): String? = unwrap(this).getSimpleNumericalAggregation()

    /**
     * A builder for [NumericalAggregationFunctionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param percentileAggregation An aggregation based on the percentile of values in a
       * dimension or measure.
       */
      public fun percentileAggregation(percentileAggregation: IResolvable)

      /**
       * @param percentileAggregation An aggregation based on the percentile of values in a
       * dimension or measure.
       */
      public fun percentileAggregation(percentileAggregation: PercentileAggregationProperty)

      /**
       * @param percentileAggregation An aggregation based on the percentile of values in a
       * dimension or measure.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a3b9bcaeb123ca5e670094ad0d555d81492f3bb1013c33364c7f0ca6a19891de")
      public
          fun percentileAggregation(percentileAggregation: PercentileAggregationProperty.Builder.() -> Unit)

      /**
       * @param simpleNumericalAggregation Built-in aggregation functions for numerical values.
       * * `SUM` : The sum of a dimension or measure.
       * * `AVERAGE` : The average of a dimension or measure.
       * * `MIN` : The minimum value of a dimension or measure.
       * * `MAX` : The maximum value of a dimension or measure.
       * * `COUNT` : The count of a dimension or measure.
       * * `DISTINCT_COUNT` : The count of distinct values in a dimension or measure.
       * * `VAR` : The variance of a dimension or measure.
       * * `VARP` : The partitioned variance of a dimension or measure.
       * * `STDEV` : The standard deviation of a dimension or measure.
       * * `STDEVP` : The partitioned standard deviation of a dimension or measure.
       * * `MEDIAN` : The median value of a dimension or measure.
       */
      public fun simpleNumericalAggregation(simpleNumericalAggregation: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalAggregationFunctionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalAggregationFunctionProperty.builder()

      /**
       * @param percentileAggregation An aggregation based on the percentile of values in a
       * dimension or measure.
       */
      override fun percentileAggregation(percentileAggregation: IResolvable) {
        cdkBuilder.percentileAggregation(percentileAggregation.let(IResolvable::unwrap))
      }

      /**
       * @param percentileAggregation An aggregation based on the percentile of values in a
       * dimension or measure.
       */
      override fun percentileAggregation(percentileAggregation: PercentileAggregationProperty) {
        cdkBuilder.percentileAggregation(percentileAggregation.let(PercentileAggregationProperty::unwrap))
      }

      /**
       * @param percentileAggregation An aggregation based on the percentile of values in a
       * dimension or measure.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a3b9bcaeb123ca5e670094ad0d555d81492f3bb1013c33364c7f0ca6a19891de")
      override
          fun percentileAggregation(percentileAggregation: PercentileAggregationProperty.Builder.() -> Unit):
          Unit = percentileAggregation(PercentileAggregationProperty(percentileAggregation))

      /**
       * @param simpleNumericalAggregation Built-in aggregation functions for numerical values.
       * * `SUM` : The sum of a dimension or measure.
       * * `AVERAGE` : The average of a dimension or measure.
       * * `MIN` : The minimum value of a dimension or measure.
       * * `MAX` : The maximum value of a dimension or measure.
       * * `COUNT` : The count of a dimension or measure.
       * * `DISTINCT_COUNT` : The count of distinct values in a dimension or measure.
       * * `VAR` : The variance of a dimension or measure.
       * * `VARP` : The partitioned variance of a dimension or measure.
       * * `STDEV` : The standard deviation of a dimension or measure.
       * * `STDEVP` : The partitioned standard deviation of a dimension or measure.
       * * `MEDIAN` : The median value of a dimension or measure.
       */
      override fun simpleNumericalAggregation(simpleNumericalAggregation: String) {
        cdkBuilder.simpleNumericalAggregation(simpleNumericalAggregation)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalAggregationFunctionProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalAggregationFunctionProperty,
    ) : NumericalAggregationFunctionProperty {
      /**
       * An aggregation based on the percentile of values in a dimension or measure.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalaggregationfunction.html#cfn-quicksight-analysis-numericalaggregationfunction-percentileaggregation)
       */
      override fun percentileAggregation(): Any? = unwrap(this).getPercentileAggregation()

      /**
       * Built-in aggregation functions for numerical values.
       *
       * * `SUM` : The sum of a dimension or measure.
       * * `AVERAGE` : The average of a dimension or measure.
       * * `MIN` : The minimum value of a dimension or measure.
       * * `MAX` : The maximum value of a dimension or measure.
       * * `COUNT` : The count of a dimension or measure.
       * * `DISTINCT_COUNT` : The count of distinct values in a dimension or measure.
       * * `VAR` : The variance of a dimension or measure.
       * * `VARP` : The partitioned variance of a dimension or measure.
       * * `STDEV` : The standard deviation of a dimension or measure.
       * * `STDEVP` : The partitioned standard deviation of a dimension or measure.
       * * `MEDIAN` : The median value of a dimension or measure.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalaggregationfunction.html#cfn-quicksight-analysis-numericalaggregationfunction-simplenumericalaggregation)
       */
      override fun simpleNumericalAggregation(): String? =
          unwrap(this).getSimpleNumericalAggregation()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          NumericalAggregationFunctionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalAggregationFunctionProperty):
          NumericalAggregationFunctionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericalAggregationFunctionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalAggregationFunctionProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DateMeasureFieldProperty {
    /**
     * The aggregation function of the measure field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html#cfn-quicksight-analysis-datemeasurefield-aggregationfunction)
     */
    public fun aggregationFunction(): String? = unwrap(this).getAggregationFunction()

    /**
     * The column that is used in the `DateMeasureField` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html#cfn-quicksight-analysis-datemeasurefield-column)
     */
    public fun column(): Any

    /**
     * The custom field ID.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html#cfn-quicksight-analysis-datemeasurefield-fieldid)
     */
    public fun fieldId(): String

    /**
     * The format configuration of the field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html#cfn-quicksight-analysis-datemeasurefield-formatconfiguration)
     */
    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    /**
     * A builder for [DateMeasureFieldProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param aggregationFunction The aggregation function of the measure field.
       */
      public fun aggregationFunction(aggregationFunction: String)

      /**
       * @param column The column that is used in the `DateMeasureField` . 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that is used in the `DateMeasureField` . 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that is used in the `DateMeasureField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e95adc0b4231928c19a13b93a874f9c448fd88046b87dc9b8c61ef3562f15557")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param fieldId The custom field ID. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: IResolvable)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9961d2d3617d4f2302d83bd000bca4be0fe170570e3104cf04e0a702b391b513")
      public
          fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateMeasureFieldProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateMeasureFieldProperty.builder()

      /**
       * @param aggregationFunction The aggregation function of the measure field.
       */
      override fun aggregationFunction(aggregationFunction: String) {
        cdkBuilder.aggregationFunction(aggregationFunction)
      }

      /**
       * @param column The column that is used in the `DateMeasureField` . 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that is used in the `DateMeasureField` . 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that is used in the `DateMeasureField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e95adc0b4231928c19a13b93a874f9c448fd88046b87dc9b8c61ef3562f15557")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param fieldId The custom field ID. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(DateTimeFormatConfigurationProperty::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9961d2d3617d4f2302d83bd000bca4be0fe170570e3104cf04e0a702b391b513")
      override
          fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(DateTimeFormatConfigurationProperty(formatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateMeasureFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateMeasureFieldProperty,
    ) : DateMeasureFieldProperty {
      /**
       * The aggregation function of the measure field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html#cfn-quicksight-analysis-datemeasurefield-aggregationfunction)
       */
      override fun aggregationFunction(): String? = unwrap(this).getAggregationFunction()

      /**
       * The column that is used in the `DateMeasureField` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html#cfn-quicksight-analysis-datemeasurefield-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The custom field ID.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html#cfn-quicksight-analysis-datemeasurefield-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The format configuration of the field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html#cfn-quicksight-analysis-datemeasurefield-formatconfiguration)
       */
      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DateMeasureFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DateMeasureFieldProperty):
          DateMeasureFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateMeasureFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateMeasureFieldProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface DonutOptionsProperty {
    /**
     * The option for define the arc of the chart shape. Valid values are as follows:.
     *
     * * `WHOLE` - A pie chart
     * * `SMALL` - A small-sized donut chart
     * * `MEDIUM` - A medium-sized donut chart
     * * `LARGE` - A large-sized donut chart
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutoptions.html#cfn-quicksight-analysis-donutoptions-arcoptions)
     */
    public fun arcOptions(): Any? = unwrap(this).getArcOptions()

    /**
     * The label options of the label that is displayed in the center of a donut chart.
     *
     * This option isn't available for pie charts.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutoptions.html#cfn-quicksight-analysis-donutoptions-donutcenteroptions)
     */
    public fun donutCenterOptions(): Any? = unwrap(this).getDonutCenterOptions()

    /**
     * A builder for [DonutOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param arcOptions The option for define the arc of the chart shape. Valid values are as
       * follows:.
       * * `WHOLE` - A pie chart
       * * `SMALL` - A small-sized donut chart
       * * `MEDIUM` - A medium-sized donut chart
       * * `LARGE` - A large-sized donut chart
       */
      public fun arcOptions(arcOptions: IResolvable)

      /**
       * @param arcOptions The option for define the arc of the chart shape. Valid values are as
       * follows:.
       * * `WHOLE` - A pie chart
       * * `SMALL` - A small-sized donut chart
       * * `MEDIUM` - A medium-sized donut chart
       * * `LARGE` - A large-sized donut chart
       */
      public fun arcOptions(arcOptions: ArcOptionsProperty)

      /**
       * @param arcOptions The option for define the arc of the chart shape. Valid values are as
       * follows:.
       * * `WHOLE` - A pie chart
       * * `SMALL` - A small-sized donut chart
       * * `MEDIUM` - A medium-sized donut chart
       * * `LARGE` - A large-sized donut chart
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93b658f1781888a55057ef2d9c8dc2dbd90a88cd44e101baf1bc816decfccf56")
      public fun arcOptions(arcOptions: ArcOptionsProperty.Builder.() -> Unit)

      /**
       * @param donutCenterOptions The label options of the label that is displayed in the center of
       * a donut chart.
       * This option isn't available for pie charts.
       */
      public fun donutCenterOptions(donutCenterOptions: IResolvable)

      /**
       * @param donutCenterOptions The label options of the label that is displayed in the center of
       * a donut chart.
       * This option isn't available for pie charts.
       */
      public fun donutCenterOptions(donutCenterOptions: DonutCenterOptionsProperty)

      /**
       * @param donutCenterOptions The label options of the label that is displayed in the center of
       * a donut chart.
       * This option isn't available for pie charts.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("445500e3fca55a99e2df9a52b5f04c73c215633250ca29aeae1ee8dad6729fe3")
      public
          fun donutCenterOptions(donutCenterOptions: DonutCenterOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DonutOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DonutOptionsProperty.builder()

      /**
       * @param arcOptions The option for define the arc of the chart shape. Valid values are as
       * follows:.
       * * `WHOLE` - A pie chart
       * * `SMALL` - A small-sized donut chart
       * * `MEDIUM` - A medium-sized donut chart
       * * `LARGE` - A large-sized donut chart
       */
      override fun arcOptions(arcOptions: IResolvable) {
        cdkBuilder.arcOptions(arcOptions.let(IResolvable::unwrap))
      }

      /**
       * @param arcOptions The option for define the arc of the chart shape. Valid values are as
       * follows:.
       * * `WHOLE` - A pie chart
       * * `SMALL` - A small-sized donut chart
       * * `MEDIUM` - A medium-sized donut chart
       * * `LARGE` - A large-sized donut chart
       */
      override fun arcOptions(arcOptions: ArcOptionsProperty) {
        cdkBuilder.arcOptions(arcOptions.let(ArcOptionsProperty::unwrap))
      }

      /**
       * @param arcOptions The option for define the arc of the chart shape. Valid values are as
       * follows:.
       * * `WHOLE` - A pie chart
       * * `SMALL` - A small-sized donut chart
       * * `MEDIUM` - A medium-sized donut chart
       * * `LARGE` - A large-sized donut chart
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93b658f1781888a55057ef2d9c8dc2dbd90a88cd44e101baf1bc816decfccf56")
      override fun arcOptions(arcOptions: ArcOptionsProperty.Builder.() -> Unit): Unit =
          arcOptions(ArcOptionsProperty(arcOptions))

      /**
       * @param donutCenterOptions The label options of the label that is displayed in the center of
       * a donut chart.
       * This option isn't available for pie charts.
       */
      override fun donutCenterOptions(donutCenterOptions: IResolvable) {
        cdkBuilder.donutCenterOptions(donutCenterOptions.let(IResolvable::unwrap))
      }

      /**
       * @param donutCenterOptions The label options of the label that is displayed in the center of
       * a donut chart.
       * This option isn't available for pie charts.
       */
      override fun donutCenterOptions(donutCenterOptions: DonutCenterOptionsProperty) {
        cdkBuilder.donutCenterOptions(donutCenterOptions.let(DonutCenterOptionsProperty::unwrap))
      }

      /**
       * @param donutCenterOptions The label options of the label that is displayed in the center of
       * a donut chart.
       * This option isn't available for pie charts.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("445500e3fca55a99e2df9a52b5f04c73c215633250ca29aeae1ee8dad6729fe3")
      override
          fun donutCenterOptions(donutCenterOptions: DonutCenterOptionsProperty.Builder.() -> Unit):
          Unit = donutCenterOptions(DonutCenterOptionsProperty(donutCenterOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DonutOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DonutOptionsProperty,
    ) : DonutOptionsProperty {
      /**
       * The option for define the arc of the chart shape. Valid values are as follows:.
       *
       * * `WHOLE` - A pie chart
       * * `SMALL` - A small-sized donut chart
       * * `MEDIUM` - A medium-sized donut chart
       * * `LARGE` - A large-sized donut chart
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutoptions.html#cfn-quicksight-analysis-donutoptions-arcoptions)
       */
      override fun arcOptions(): Any? = unwrap(this).getArcOptions()

      /**
       * The label options of the label that is displayed in the center of a donut chart.
       *
       * This option isn't available for pie charts.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutoptions.html#cfn-quicksight-analysis-donutoptions-donutcenteroptions)
       */
      override fun donutCenterOptions(): Any? = unwrap(this).getDonutCenterOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DonutOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DonutOptionsProperty):
          DonutOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DonutOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DonutOptionsProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface ShapeConditionalFormatProperty {
    /**
     * The conditional formatting for the shape background color of a filled map visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shapeconditionalformat.html#cfn-quicksight-analysis-shapeconditionalformat-backgroundcolor)
     */
    public fun backgroundColor(): Any

    /**
     * A builder for [ShapeConditionalFormatProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param backgroundColor The conditional formatting for the shape background color of a
       * filled map visual. 
       */
      public fun backgroundColor(backgroundColor: IResolvable)

      /**
       * @param backgroundColor The conditional formatting for the shape background color of a
       * filled map visual. 
       */
      public fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty)

      /**
       * @param backgroundColor The conditional formatting for the shape background color of a
       * filled map visual. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("740d80ddf7d51c1bd9483d621670f03fad6691a5c07b84bb52690d55a1ab660a")
      public
          fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ShapeConditionalFormatProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ShapeConditionalFormatProperty.builder()

      /**
       * @param backgroundColor The conditional formatting for the shape background color of a
       * filled map visual. 
       */
      override fun backgroundColor(backgroundColor: IResolvable) {
        cdkBuilder.backgroundColor(backgroundColor.let(IResolvable::unwrap))
      }

      /**
       * @param backgroundColor The conditional formatting for the shape background color of a
       * filled map visual. 
       */
      override fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty) {
        cdkBuilder.backgroundColor(backgroundColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      /**
       * @param backgroundColor The conditional formatting for the shape background color of a
       * filled map visual. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("740d80ddf7d51c1bd9483d621670f03fad6691a5c07b84bb52690d55a1ab660a")
      override
          fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit):
          Unit = backgroundColor(ConditionalFormattingColorProperty(backgroundColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ShapeConditionalFormatProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ShapeConditionalFormatProperty,
    ) : ShapeConditionalFormatProperty {
      /**
       * The conditional formatting for the shape background color of a filled map visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shapeconditionalformat.html#cfn-quicksight-analysis-shapeconditionalformat-backgroundcolor)
       */
      override fun backgroundColor(): Any = unwrap(this).getBackgroundColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ShapeConditionalFormatProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ShapeConditionalFormatProperty):
          ShapeConditionalFormatProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ShapeConditionalFormatProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ShapeConditionalFormatProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface StringFormatConfigurationProperty {
    /**
     * The options that determine the null value format configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringformatconfiguration.html#cfn-quicksight-analysis-stringformatconfiguration-nullvalueformatconfiguration)
     */
    public fun nullValueFormatConfiguration(): Any? = unwrap(this).getNullValueFormatConfiguration()

    /**
     * The formatting configuration for numeric strings.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringformatconfiguration.html#cfn-quicksight-analysis-stringformatconfiguration-numericformatconfiguration)
     */
    public fun numericFormatConfiguration(): Any? = unwrap(this).getNumericFormatConfiguration()

    /**
     * A builder for [StringFormatConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      public fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3581e0d12ccc50110c73f87b4e49a08d42b4a3a45a2a1fa2cbb6f2e9ae312615")
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param numericFormatConfiguration The formatting configuration for numeric strings.
       */
      public fun numericFormatConfiguration(numericFormatConfiguration: IResolvable)

      /**
       * @param numericFormatConfiguration The formatting configuration for numeric strings.
       */
      public
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty)

      /**
       * @param numericFormatConfiguration The formatting configuration for numeric strings.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a7904b822979f8e3f4318c00892263ca6112ad6ebee297b257d7aeb964ae06ab")
      public
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringFormatConfigurationProperty.builder()

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      override fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(NullValueFormatConfigurationProperty::unwrap))
      }

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3581e0d12ccc50110c73f87b4e49a08d42b4a3a45a2a1fa2cbb6f2e9ae312615")
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          nullValueFormatConfiguration(NullValueFormatConfigurationProperty(nullValueFormatConfiguration))

      /**
       * @param numericFormatConfiguration The formatting configuration for numeric strings.
       */
      override fun numericFormatConfiguration(numericFormatConfiguration: IResolvable) {
        cdkBuilder.numericFormatConfiguration(numericFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param numericFormatConfiguration The formatting configuration for numeric strings.
       */
      override
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty) {
        cdkBuilder.numericFormatConfiguration(numericFormatConfiguration.let(NumericFormatConfigurationProperty::unwrap))
      }

      /**
       * @param numericFormatConfiguration The formatting configuration for numeric strings.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a7904b822979f8e3f4318c00892263ca6112ad6ebee297b257d7aeb964ae06ab")
      override
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          numericFormatConfiguration(NumericFormatConfigurationProperty(numericFormatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringFormatConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringFormatConfigurationProperty,
    ) : StringFormatConfigurationProperty {
      /**
       * The options that determine the null value format configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringformatconfiguration.html#cfn-quicksight-analysis-stringformatconfiguration-nullvalueformatconfiguration)
       */
      override fun nullValueFormatConfiguration(): Any? =
          unwrap(this).getNullValueFormatConfiguration()

      /**
       * The formatting configuration for numeric strings.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringformatconfiguration.html#cfn-quicksight-analysis-stringformatconfiguration-numericformatconfiguration)
       */
      override fun numericFormatConfiguration(): Any? = unwrap(this).getNumericFormatConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          StringFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.StringFormatConfigurationProperty):
          StringFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: StringFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringFormatConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface CalculatedFieldProperty {
    /**
     * The data set that is used in this calculated field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedfield.html#cfn-quicksight-analysis-calculatedfield-datasetidentifier)
     */
    public fun dataSetIdentifier(): String

    /**
     * The expression of the calculated field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedfield.html#cfn-quicksight-analysis-calculatedfield-expression)
     */
    public fun expression(): String

    /**
     * The name of the calculated field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedfield.html#cfn-quicksight-analysis-calculatedfield-name)
     */
    public fun name(): String

    /**
     * A builder for [CalculatedFieldProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataSetIdentifier The data set that is used in this calculated field. 
       */
      public fun dataSetIdentifier(dataSetIdentifier: String)

      /**
       * @param expression The expression of the calculated field. 
       */
      public fun expression(expression: String)

      /**
       * @param name The name of the calculated field. 
       */
      public fun name(name: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CalculatedFieldProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CalculatedFieldProperty.builder()

      /**
       * @param dataSetIdentifier The data set that is used in this calculated field. 
       */
      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      /**
       * @param expression The expression of the calculated field. 
       */
      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      /**
       * @param name The name of the calculated field. 
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CalculatedFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CalculatedFieldProperty,
    ) : CalculatedFieldProperty {
      /**
       * The data set that is used in this calculated field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedfield.html#cfn-quicksight-analysis-calculatedfield-datasetidentifier)
       */
      override fun dataSetIdentifier(): String = unwrap(this).getDataSetIdentifier()

      /**
       * The expression of the calculated field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedfield.html#cfn-quicksight-analysis-calculatedfield-expression)
       */
      override fun expression(): String = unwrap(this).getExpression()

      /**
       * The name of the calculated field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedfield.html#cfn-quicksight-analysis-calculatedfield-name)
       */
      override fun name(): String = unwrap(this).getName()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): CalculatedFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CalculatedFieldProperty):
          CalculatedFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CalculatedFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CalculatedFieldProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface SectionLayoutConfigurationProperty {
    /**
     * The free-form layout configuration of a section.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionlayoutconfiguration.html#cfn-quicksight-analysis-sectionlayoutconfiguration-freeformlayout)
     */
    public fun freeFormLayout(): Any

    /**
     * A builder for [SectionLayoutConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param freeFormLayout The free-form layout configuration of a section. 
       */
      public fun freeFormLayout(freeFormLayout: IResolvable)

      /**
       * @param freeFormLayout The free-form layout configuration of a section. 
       */
      public fun freeFormLayout(freeFormLayout: FreeFormSectionLayoutConfigurationProperty)

      /**
       * @param freeFormLayout The free-form layout configuration of a section. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b2cf6276e2a03096077871510a39b271588da22962f5058c5cba0bbebd2cc623")
      public
          fun freeFormLayout(freeFormLayout: FreeFormSectionLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionLayoutConfigurationProperty.builder()

      /**
       * @param freeFormLayout The free-form layout configuration of a section. 
       */
      override fun freeFormLayout(freeFormLayout: IResolvable) {
        cdkBuilder.freeFormLayout(freeFormLayout.let(IResolvable::unwrap))
      }

      /**
       * @param freeFormLayout The free-form layout configuration of a section. 
       */
      override fun freeFormLayout(freeFormLayout: FreeFormSectionLayoutConfigurationProperty) {
        cdkBuilder.freeFormLayout(freeFormLayout.let(FreeFormSectionLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param freeFormLayout The free-form layout configuration of a section. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b2cf6276e2a03096077871510a39b271588da22962f5058c5cba0bbebd2cc623")
      override
          fun freeFormLayout(freeFormLayout: FreeFormSectionLayoutConfigurationProperty.Builder.() -> Unit):
          Unit = freeFormLayout(FreeFormSectionLayoutConfigurationProperty(freeFormLayout))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionLayoutConfigurationProperty,
    ) : SectionLayoutConfigurationProperty {
      /**
       * The free-form layout configuration of a section.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionlayoutconfiguration.html#cfn-quicksight-analysis-sectionlayoutconfiguration-freeformlayout)
       */
      override fun freeFormLayout(): Any = unwrap(this).getFreeFormLayout()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SectionLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionLayoutConfigurationProperty):
          SectionLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionLayoutConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FieldBasedTooltipProperty {
    /**
     * The visibility of `Show aggregations` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldbasedtooltip.html#cfn-quicksight-analysis-fieldbasedtooltip-aggregationvisibility)
     */
    public fun aggregationVisibility(): String? = unwrap(this).getAggregationVisibility()

    /**
     * The fields configuration in the tooltip.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldbasedtooltip.html#cfn-quicksight-analysis-fieldbasedtooltip-tooltipfields)
     */
    public fun tooltipFields(): Any? = unwrap(this).getTooltipFields()

    /**
     * The type for the &gt;tooltip title. Choose one of the following options:.
     *
     * * `NONE` : Doesn't use the primary value as the title.
     * * `PRIMARY_VALUE` : Uses primary value as the title.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldbasedtooltip.html#cfn-quicksight-analysis-fieldbasedtooltip-tooltiptitletype)
     */
    public fun tooltipTitleType(): String? = unwrap(this).getTooltipTitleType()

    /**
     * A builder for [FieldBasedTooltipProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param aggregationVisibility The visibility of `Show aggregations` .
       */
      public fun aggregationVisibility(aggregationVisibility: String)

      /**
       * @param tooltipFields The fields configuration in the tooltip.
       */
      public fun tooltipFields(tooltipFields: IResolvable)

      /**
       * @param tooltipFields The fields configuration in the tooltip.
       */
      public fun tooltipFields(tooltipFields: List<Any>)

      /**
       * @param tooltipFields The fields configuration in the tooltip.
       */
      public fun tooltipFields(vararg tooltipFields: Any)

      /**
       * @param tooltipTitleType The type for the &gt;tooltip title. Choose one of the following
       * options:.
       * * `NONE` : Doesn't use the primary value as the title.
       * * `PRIMARY_VALUE` : Uses primary value as the title.
       */
      public fun tooltipTitleType(tooltipTitleType: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldBasedTooltipProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldBasedTooltipProperty.builder()

      /**
       * @param aggregationVisibility The visibility of `Show aggregations` .
       */
      override fun aggregationVisibility(aggregationVisibility: String) {
        cdkBuilder.aggregationVisibility(aggregationVisibility)
      }

      /**
       * @param tooltipFields The fields configuration in the tooltip.
       */
      override fun tooltipFields(tooltipFields: IResolvable) {
        cdkBuilder.tooltipFields(tooltipFields.let(IResolvable::unwrap))
      }

      /**
       * @param tooltipFields The fields configuration in the tooltip.
       */
      override fun tooltipFields(tooltipFields: List<Any>) {
        cdkBuilder.tooltipFields(tooltipFields)
      }

      /**
       * @param tooltipFields The fields configuration in the tooltip.
       */
      override fun tooltipFields(vararg tooltipFields: Any): Unit =
          tooltipFields(tooltipFields.toList())

      /**
       * @param tooltipTitleType The type for the &gt;tooltip title. Choose one of the following
       * options:.
       * * `NONE` : Doesn't use the primary value as the title.
       * * `PRIMARY_VALUE` : Uses primary value as the title.
       */
      override fun tooltipTitleType(tooltipTitleType: String) {
        cdkBuilder.tooltipTitleType(tooltipTitleType)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldBasedTooltipProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldBasedTooltipProperty,
    ) : FieldBasedTooltipProperty {
      /**
       * The visibility of `Show aggregations` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldbasedtooltip.html#cfn-quicksight-analysis-fieldbasedtooltip-aggregationvisibility)
       */
      override fun aggregationVisibility(): String? = unwrap(this).getAggregationVisibility()

      /**
       * The fields configuration in the tooltip.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldbasedtooltip.html#cfn-quicksight-analysis-fieldbasedtooltip-tooltipfields)
       */
      override fun tooltipFields(): Any? = unwrap(this).getTooltipFields()

      /**
       * The type for the &gt;tooltip title. Choose one of the following options:.
       *
       * * `NONE` : Doesn't use the primary value as the title.
       * * `PRIMARY_VALUE` : Uses primary value as the title.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldbasedtooltip.html#cfn-quicksight-analysis-fieldbasedtooltip-tooltiptitletype)
       */
      override fun tooltipTitleType(): String? = unwrap(this).getTooltipTitleType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FieldBasedTooltipProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldBasedTooltipProperty):
          FieldBasedTooltipProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FieldBasedTooltipProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldBasedTooltipProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilterDateTimePickerControlProperty {
    /**
     * The display options of a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The ID of the `FilterDateTimePickerControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-filtercontrolid)
     */
    public fun filterControlId(): String

    /**
     * The source filter ID of the `FilterDateTimePickerControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-sourcefilterid)
     */
    public fun sourceFilterId(): String

    /**
     * The title of the `FilterDateTimePickerControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-title)
     */
    public fun title(): String

    /**
     * The date time picker type of a `FilterDateTimePickerControl` . Choose one of the following
     * options:.
     *
     * * `SINGLE_VALUED` : The filter condition is a fixed date.
     * * `DATE_RANGE` : The filter condition is a date time range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-type)
     */
    public fun type(): String? = unwrap(this).getType()

    /**
     * A builder for [FilterDateTimePickerControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2524fe45da1391b5c75638e4731078ad7141e9507a1523105fb2abc8ed6e65ca")
      public
          fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param filterControlId The ID of the `FilterDateTimePickerControl` . 
       */
      public fun filterControlId(filterControlId: String)

      /**
       * @param sourceFilterId The source filter ID of the `FilterDateTimePickerControl` . 
       */
      public fun sourceFilterId(sourceFilterId: String)

      /**
       * @param title The title of the `FilterDateTimePickerControl` . 
       */
      public fun title(title: String)

      /**
       * @param type The date time picker type of a `FilterDateTimePickerControl` . Choose one of
       * the following options:.
       * * `SINGLE_VALUED` : The filter condition is a fixed date.
       * * `DATE_RANGE` : The filter condition is a date time range.
       */
      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterDateTimePickerControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterDateTimePickerControlProperty.builder()

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(DateTimePickerControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2524fe45da1391b5c75638e4731078ad7141e9507a1523105fb2abc8ed6e65ca")
      override
          fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(DateTimePickerControlDisplayOptionsProperty(displayOptions))

      /**
       * @param filterControlId The ID of the `FilterDateTimePickerControl` . 
       */
      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      /**
       * @param sourceFilterId The source filter ID of the `FilterDateTimePickerControl` . 
       */
      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      /**
       * @param title The title of the `FilterDateTimePickerControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      /**
       * @param type The date time picker type of a `FilterDateTimePickerControl` . Choose one of
       * the following options:.
       * * `SINGLE_VALUED` : The filter condition is a fixed date.
       * * `DATE_RANGE` : The filter condition is a date time range.
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterDateTimePickerControlProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterDateTimePickerControlProperty,
    ) : FilterDateTimePickerControlProperty {
      /**
       * The display options of a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The ID of the `FilterDateTimePickerControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-filtercontrolid)
       */
      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      /**
       * The source filter ID of the `FilterDateTimePickerControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-sourcefilterid)
       */
      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      /**
       * The title of the `FilterDateTimePickerControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()

      /**
       * The date time picker type of a `FilterDateTimePickerControl` . Choose one of the following
       * options:.
       *
       * * `SINGLE_VALUED` : The filter condition is a fixed date.
       * * `DATE_RANGE` : The filter condition is a date time range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-type)
       */
      override fun type(): String? = unwrap(this).getType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilterDateTimePickerControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterDateTimePickerControlProperty):
          FilterDateTimePickerControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterDateTimePickerControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterDateTimePickerControlProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface BoxPlotFieldWellsProperty {
    /**
     * The aggregated field wells of a box plot.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotfieldwells.html#cfn-quicksight-analysis-boxplotfieldwells-boxplotaggregatedfieldwells)
     */
    public fun boxPlotAggregatedFieldWells(): Any? = unwrap(this).getBoxPlotAggregatedFieldWells()

    /**
     * A builder for [BoxPlotFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param boxPlotAggregatedFieldWells The aggregated field wells of a box plot.
       */
      public fun boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells: IResolvable)

      /**
       * @param boxPlotAggregatedFieldWells The aggregated field wells of a box plot.
       */
      public
          fun boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells: BoxPlotAggregatedFieldWellsProperty)

      /**
       * @param boxPlotAggregatedFieldWells The aggregated field wells of a box plot.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3dc5da69af1304cc5f7e713b88e9e167a6e58790d585b954420ccbf2ae454b40")
      public
          fun boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells: BoxPlotAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotFieldWellsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotFieldWellsProperty.builder()

      /**
       * @param boxPlotAggregatedFieldWells The aggregated field wells of a box plot.
       */
      override fun boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells: IResolvable) {
        cdkBuilder.boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param boxPlotAggregatedFieldWells The aggregated field wells of a box plot.
       */
      override
          fun boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells: BoxPlotAggregatedFieldWellsProperty) {
        cdkBuilder.boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells.let(BoxPlotAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param boxPlotAggregatedFieldWells The aggregated field wells of a box plot.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3dc5da69af1304cc5f7e713b88e9e167a6e58790d585b954420ccbf2ae454b40")
      override
          fun boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells: BoxPlotAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          boxPlotAggregatedFieldWells(BoxPlotAggregatedFieldWellsProperty(boxPlotAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotFieldWellsProperty,
    ) : BoxPlotFieldWellsProperty {
      /**
       * The aggregated field wells of a box plot.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotfieldwells.html#cfn-quicksight-analysis-boxplotfieldwells-boxplotaggregatedfieldwells)
       */
      override fun boxPlotAggregatedFieldWells(): Any? =
          unwrap(this).getBoxPlotAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): BoxPlotFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotFieldWellsProperty):
          BoxPlotFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface DataSetIdentifierDeclarationProperty {
    /**
     * The Amazon Resource Name (ARN) of the data set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetidentifierdeclaration.html#cfn-quicksight-analysis-datasetidentifierdeclaration-datasetarn)
     */
    public fun dataSetArn(): String

    /**
     * The identifier of the data set, typically the data set's name.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetidentifierdeclaration.html#cfn-quicksight-analysis-datasetidentifierdeclaration-identifier)
     */
    public fun identifier(): String

    /**
     * A builder for [DataSetIdentifierDeclarationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataSetArn The Amazon Resource Name (ARN) of the data set. 
       */
      public fun dataSetArn(dataSetArn: String)

      /**
       * @param identifier The identifier of the data set, typically the data set's name. 
       */
      public fun identifier(identifier: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataSetIdentifierDeclarationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataSetIdentifierDeclarationProperty.builder()

      /**
       * @param dataSetArn The Amazon Resource Name (ARN) of the data set. 
       */
      override fun dataSetArn(dataSetArn: String) {
        cdkBuilder.dataSetArn(dataSetArn)
      }

      /**
       * @param identifier The identifier of the data set, typically the data set's name. 
       */
      override fun identifier(identifier: String) {
        cdkBuilder.identifier(identifier)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataSetIdentifierDeclarationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataSetIdentifierDeclarationProperty,
    ) : DataSetIdentifierDeclarationProperty {
      /**
       * The Amazon Resource Name (ARN) of the data set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetidentifierdeclaration.html#cfn-quicksight-analysis-datasetidentifierdeclaration-datasetarn)
       */
      override fun dataSetArn(): String = unwrap(this).getDataSetArn()

      /**
       * The identifier of the data set, typically the data set's name.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetidentifierdeclaration.html#cfn-quicksight-analysis-datasetidentifierdeclaration-identifier)
       */
      override fun identifier(): String = unwrap(this).getIdentifier()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DataSetIdentifierDeclarationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DataSetIdentifierDeclarationProperty):
          DataSetIdentifierDeclarationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataSetIdentifierDeclarationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataSetIdentifierDeclarationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilterSelectableValuesProperty {
    /**
     * The values that are used in the `FilterSelectableValues` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterselectablevalues.html#cfn-quicksight-analysis-filterselectablevalues-values)
     */
    public fun values(): List<String> = unwrap(this).getValues() ?: emptyList()

    /**
     * A builder for [FilterSelectableValuesProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param values The values that are used in the `FilterSelectableValues` .
       */
      public fun values(values: List<String>)

      /**
       * @param values The values that are used in the `FilterSelectableValues` .
       */
      public fun values(vararg values: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterSelectableValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterSelectableValuesProperty.builder()

      /**
       * @param values The values that are used in the `FilterSelectableValues` .
       */
      override fun values(values: List<String>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The values that are used in the `FilterSelectableValues` .
       */
      override fun values(vararg values: String): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterSelectableValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterSelectableValuesProperty,
    ) : FilterSelectableValuesProperty {
      /**
       * The values that are used in the `FilterSelectableValues` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterselectablevalues.html#cfn-quicksight-analysis-filterselectablevalues-values)
       */
      override fun values(): List<String> = unwrap(this).getValues() ?: emptyList()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilterSelectableValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterSelectableValuesProperty):
          FilterSelectableValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterSelectableValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterSelectableValuesProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TooltipOptionsProperty {
    /**
     * The setup for the detailed tooltip.
     *
     * The tooltip setup is always saved. The display type is decided based on the tooltip type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipoptions.html#cfn-quicksight-analysis-tooltipoptions-fieldbasedtooltip)
     */
    public fun fieldBasedTooltip(): Any? = unwrap(this).getFieldBasedTooltip()

    /**
     * The selected type for the tooltip. Choose one of the following options:.
     *
     * * `BASIC` : A basic tooltip.
     * * `DETAILED` : A detailed tooltip.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipoptions.html#cfn-quicksight-analysis-tooltipoptions-selectedtooltiptype)
     */
    public fun selectedTooltipType(): String? = unwrap(this).getSelectedTooltipType()

    /**
     * Determines whether or not the tooltip is visible.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipoptions.html#cfn-quicksight-analysis-tooltipoptions-tooltipvisibility)
     */
    public fun tooltipVisibility(): String? = unwrap(this).getTooltipVisibility()

    /**
     * A builder for [TooltipOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldBasedTooltip The setup for the detailed tooltip.
       * The tooltip setup is always saved. The display type is decided based on the tooltip type.
       */
      public fun fieldBasedTooltip(fieldBasedTooltip: IResolvable)

      /**
       * @param fieldBasedTooltip The setup for the detailed tooltip.
       * The tooltip setup is always saved. The display type is decided based on the tooltip type.
       */
      public fun fieldBasedTooltip(fieldBasedTooltip: FieldBasedTooltipProperty)

      /**
       * @param fieldBasedTooltip The setup for the detailed tooltip.
       * The tooltip setup is always saved. The display type is decided based on the tooltip type.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e8bb8d140d97ae3c03a548afd64171379675952a8b7c343febe2249c1ed3ade2")
      public fun fieldBasedTooltip(fieldBasedTooltip: FieldBasedTooltipProperty.Builder.() -> Unit)

      /**
       * @param selectedTooltipType The selected type for the tooltip. Choose one of the following
       * options:.
       * * `BASIC` : A basic tooltip.
       * * `DETAILED` : A detailed tooltip.
       */
      public fun selectedTooltipType(selectedTooltipType: String)

      /**
       * @param tooltipVisibility Determines whether or not the tooltip is visible.
       */
      public fun tooltipVisibility(tooltipVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TooltipOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TooltipOptionsProperty.builder()

      /**
       * @param fieldBasedTooltip The setup for the detailed tooltip.
       * The tooltip setup is always saved. The display type is decided based on the tooltip type.
       */
      override fun fieldBasedTooltip(fieldBasedTooltip: IResolvable) {
        cdkBuilder.fieldBasedTooltip(fieldBasedTooltip.let(IResolvable::unwrap))
      }

      /**
       * @param fieldBasedTooltip The setup for the detailed tooltip.
       * The tooltip setup is always saved. The display type is decided based on the tooltip type.
       */
      override fun fieldBasedTooltip(fieldBasedTooltip: FieldBasedTooltipProperty) {
        cdkBuilder.fieldBasedTooltip(fieldBasedTooltip.let(FieldBasedTooltipProperty::unwrap))
      }

      /**
       * @param fieldBasedTooltip The setup for the detailed tooltip.
       * The tooltip setup is always saved. The display type is decided based on the tooltip type.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e8bb8d140d97ae3c03a548afd64171379675952a8b7c343febe2249c1ed3ade2")
      override
          fun fieldBasedTooltip(fieldBasedTooltip: FieldBasedTooltipProperty.Builder.() -> Unit):
          Unit = fieldBasedTooltip(FieldBasedTooltipProperty(fieldBasedTooltip))

      /**
       * @param selectedTooltipType The selected type for the tooltip. Choose one of the following
       * options:.
       * * `BASIC` : A basic tooltip.
       * * `DETAILED` : A detailed tooltip.
       */
      override fun selectedTooltipType(selectedTooltipType: String) {
        cdkBuilder.selectedTooltipType(selectedTooltipType)
      }

      /**
       * @param tooltipVisibility Determines whether or not the tooltip is visible.
       */
      override fun tooltipVisibility(tooltipVisibility: String) {
        cdkBuilder.tooltipVisibility(tooltipVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TooltipOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TooltipOptionsProperty,
    ) : TooltipOptionsProperty {
      /**
       * The setup for the detailed tooltip.
       *
       * The tooltip setup is always saved. The display type is decided based on the tooltip type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipoptions.html#cfn-quicksight-analysis-tooltipoptions-fieldbasedtooltip)
       */
      override fun fieldBasedTooltip(): Any? = unwrap(this).getFieldBasedTooltip()

      /**
       * The selected type for the tooltip. Choose one of the following options:.
       *
       * * `BASIC` : A basic tooltip.
       * * `DETAILED` : A detailed tooltip.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipoptions.html#cfn-quicksight-analysis-tooltipoptions-selectedtooltiptype)
       */
      override fun selectedTooltipType(): String? = unwrap(this).getSelectedTooltipType()

      /**
       * Determines whether or not the tooltip is visible.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipoptions.html#cfn-quicksight-analysis-tooltipoptions-tooltipvisibility)
       */
      override fun tooltipVisibility(): String? = unwrap(this).getTooltipVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TooltipOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TooltipOptionsProperty):
          TooltipOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TooltipOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TooltipOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface FieldSortOptionsProperty {
    /**
     * The sort configuration for a column that is not used in a field well.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsortoptions.html#cfn-quicksight-analysis-fieldsortoptions-columnsort)
     */
    public fun columnSort(): Any? = unwrap(this).getColumnSort()

    /**
     * The sort configuration for a field in a field well.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsortoptions.html#cfn-quicksight-analysis-fieldsortoptions-fieldsort)
     */
    public fun fieldSort(): Any? = unwrap(this).getFieldSort()

    /**
     * A builder for [FieldSortOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param columnSort The sort configuration for a column that is not used in a field well.
       */
      public fun columnSort(columnSort: IResolvable)

      /**
       * @param columnSort The sort configuration for a column that is not used in a field well.
       */
      public fun columnSort(columnSort: ColumnSortProperty)

      /**
       * @param columnSort The sort configuration for a column that is not used in a field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de5be4051a93048721ef6b239e7d35bdfb08bc09b8ba50047ad7a8ec374aa4a5")
      public fun columnSort(columnSort: ColumnSortProperty.Builder.() -> Unit)

      /**
       * @param fieldSort The sort configuration for a field in a field well.
       */
      public fun fieldSort(fieldSort: IResolvable)

      /**
       * @param fieldSort The sort configuration for a field in a field well.
       */
      public fun fieldSort(fieldSort: FieldSortProperty)

      /**
       * @param fieldSort The sort configuration for a field in a field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1256cd7caed5865db5e6da1db3b027e9e1c827c0fb109bedb6691269461656e3")
      public fun fieldSort(fieldSort: FieldSortProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSortOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSortOptionsProperty.builder()

      /**
       * @param columnSort The sort configuration for a column that is not used in a field well.
       */
      override fun columnSort(columnSort: IResolvable) {
        cdkBuilder.columnSort(columnSort.let(IResolvable::unwrap))
      }

      /**
       * @param columnSort The sort configuration for a column that is not used in a field well.
       */
      override fun columnSort(columnSort: ColumnSortProperty) {
        cdkBuilder.columnSort(columnSort.let(ColumnSortProperty::unwrap))
      }

      /**
       * @param columnSort The sort configuration for a column that is not used in a field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de5be4051a93048721ef6b239e7d35bdfb08bc09b8ba50047ad7a8ec374aa4a5")
      override fun columnSort(columnSort: ColumnSortProperty.Builder.() -> Unit): Unit =
          columnSort(ColumnSortProperty(columnSort))

      /**
       * @param fieldSort The sort configuration for a field in a field well.
       */
      override fun fieldSort(fieldSort: IResolvable) {
        cdkBuilder.fieldSort(fieldSort.let(IResolvable::unwrap))
      }

      /**
       * @param fieldSort The sort configuration for a field in a field well.
       */
      override fun fieldSort(fieldSort: FieldSortProperty) {
        cdkBuilder.fieldSort(fieldSort.let(FieldSortProperty::unwrap))
      }

      /**
       * @param fieldSort The sort configuration for a field in a field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1256cd7caed5865db5e6da1db3b027e9e1c827c0fb109bedb6691269461656e3")
      override fun fieldSort(fieldSort: FieldSortProperty.Builder.() -> Unit): Unit =
          fieldSort(FieldSortProperty(fieldSort))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSortOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSortOptionsProperty,
    ) : FieldSortOptionsProperty {
      /**
       * The sort configuration for a column that is not used in a field well.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsortoptions.html#cfn-quicksight-analysis-fieldsortoptions-columnsort)
       */
      override fun columnSort(): Any? = unwrap(this).getColumnSort()

      /**
       * The sort configuration for a field in a field well.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsortoptions.html#cfn-quicksight-analysis-fieldsortoptions-fieldsort)
       */
      override fun fieldSort(): Any? = unwrap(this).getFieldSort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FieldSortOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSortOptionsProperty):
          FieldSortOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FieldSortOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSortOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface CustomNarrativeOptionsProperty {
    /**
     * The string input of custom narrative.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customnarrativeoptions.html#cfn-quicksight-analysis-customnarrativeoptions-narrative)
     */
    public fun narrative(): String

    /**
     * A builder for [CustomNarrativeOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param narrative The string input of custom narrative. 
       */
      public fun narrative(narrative: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomNarrativeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomNarrativeOptionsProperty.builder()

      /**
       * @param narrative The string input of custom narrative. 
       */
      override fun narrative(narrative: String) {
        cdkBuilder.narrative(narrative)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomNarrativeOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomNarrativeOptionsProperty,
    ) : CustomNarrativeOptionsProperty {
      /**
       * The string input of custom narrative.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customnarrativeoptions.html#cfn-quicksight-analysis-customnarrativeoptions-narrative)
       */
      override fun narrative(): String = unwrap(this).getNarrative()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): CustomNarrativeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomNarrativeOptionsProperty):
          CustomNarrativeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomNarrativeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomNarrativeOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTablePaginatedReportOptionsProperty {
    /**
     * The visibility of the repeating header rows on each page.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablepaginatedreportoptions.html#cfn-quicksight-analysis-pivottablepaginatedreportoptions-overflowcolumnheadervisibility)
     */
    public fun overflowColumnHeaderVisibility(): String? =
        unwrap(this).getOverflowColumnHeaderVisibility()

    /**
     * The visibility of the printing table overflow across pages.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablepaginatedreportoptions.html#cfn-quicksight-analysis-pivottablepaginatedreportoptions-verticaloverflowvisibility)
     */
    public fun verticalOverflowVisibility(): String? = unwrap(this).getVerticalOverflowVisibility()

    /**
     * A builder for [PivotTablePaginatedReportOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param overflowColumnHeaderVisibility The visibility of the repeating header rows on each
       * page.
       */
      public fun overflowColumnHeaderVisibility(overflowColumnHeaderVisibility: String)

      /**
       * @param verticalOverflowVisibility The visibility of the printing table overflow across
       * pages.
       */
      public fun verticalOverflowVisibility(verticalOverflowVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTablePaginatedReportOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTablePaginatedReportOptionsProperty.builder()

      /**
       * @param overflowColumnHeaderVisibility The visibility of the repeating header rows on each
       * page.
       */
      override fun overflowColumnHeaderVisibility(overflowColumnHeaderVisibility: String) {
        cdkBuilder.overflowColumnHeaderVisibility(overflowColumnHeaderVisibility)
      }

      /**
       * @param verticalOverflowVisibility The visibility of the printing table overflow across
       * pages.
       */
      override fun verticalOverflowVisibility(verticalOverflowVisibility: String) {
        cdkBuilder.verticalOverflowVisibility(verticalOverflowVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTablePaginatedReportOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTablePaginatedReportOptionsProperty,
    ) : PivotTablePaginatedReportOptionsProperty {
      /**
       * The visibility of the repeating header rows on each page.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablepaginatedreportoptions.html#cfn-quicksight-analysis-pivottablepaginatedreportoptions-overflowcolumnheadervisibility)
       */
      override fun overflowColumnHeaderVisibility(): String? =
          unwrap(this).getOverflowColumnHeaderVisibility()

      /**
       * The visibility of the printing table overflow across pages.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablepaginatedreportoptions.html#cfn-quicksight-analysis-pivottablepaginatedreportoptions-verticaloverflowvisibility)
       */
      override fun verticalOverflowVisibility(): String? =
          unwrap(this).getVerticalOverflowVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTablePaginatedReportOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTablePaginatedReportOptionsProperty):
          PivotTablePaginatedReportOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTablePaginatedReportOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTablePaginatedReportOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilterScopeConfigurationProperty {
    /**
     * The configuration for applying a filter to all sheets.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterscopeconfiguration.html#cfn-quicksight-analysis-filterscopeconfiguration-allsheets)
     */
    public fun allSheets(): Any? = unwrap(this).getAllSheets()

    /**
     * The configuration for applying a filter to specific sheets.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterscopeconfiguration.html#cfn-quicksight-analysis-filterscopeconfiguration-selectedsheets)
     */
    public fun selectedSheets(): Any? = unwrap(this).getSelectedSheets()

    /**
     * A builder for [FilterScopeConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param allSheets The configuration for applying a filter to all sheets.
       */
      public fun allSheets(allSheets: Any)

      /**
       * @param selectedSheets The configuration for applying a filter to specific sheets.
       */
      public fun selectedSheets(selectedSheets: IResolvable)

      /**
       * @param selectedSheets The configuration for applying a filter to specific sheets.
       */
      public fun selectedSheets(selectedSheets: SelectedSheetsFilterScopeConfigurationProperty)

      /**
       * @param selectedSheets The configuration for applying a filter to specific sheets.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("900c41ef2edcc96986878d9c577d4cced8a35a7c14541a70dcf7f3fa1407366d")
      public
          fun selectedSheets(selectedSheets: SelectedSheetsFilterScopeConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterScopeConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterScopeConfigurationProperty.builder()

      /**
       * @param allSheets The configuration for applying a filter to all sheets.
       */
      override fun allSheets(allSheets: Any) {
        cdkBuilder.allSheets(allSheets)
      }

      /**
       * @param selectedSheets The configuration for applying a filter to specific sheets.
       */
      override fun selectedSheets(selectedSheets: IResolvable) {
        cdkBuilder.selectedSheets(selectedSheets.let(IResolvable::unwrap))
      }

      /**
       * @param selectedSheets The configuration for applying a filter to specific sheets.
       */
      override fun selectedSheets(selectedSheets: SelectedSheetsFilterScopeConfigurationProperty) {
        cdkBuilder.selectedSheets(selectedSheets.let(SelectedSheetsFilterScopeConfigurationProperty::unwrap))
      }

      /**
       * @param selectedSheets The configuration for applying a filter to specific sheets.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("900c41ef2edcc96986878d9c577d4cced8a35a7c14541a70dcf7f3fa1407366d")
      override
          fun selectedSheets(selectedSheets: SelectedSheetsFilterScopeConfigurationProperty.Builder.() -> Unit):
          Unit = selectedSheets(SelectedSheetsFilterScopeConfigurationProperty(selectedSheets))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterScopeConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterScopeConfigurationProperty,
    ) : FilterScopeConfigurationProperty {
      /**
       * The configuration for applying a filter to all sheets.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterscopeconfiguration.html#cfn-quicksight-analysis-filterscopeconfiguration-allsheets)
       */
      override fun allSheets(): Any? = unwrap(this).getAllSheets()

      /**
       * The configuration for applying a filter to specific sheets.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterscopeconfiguration.html#cfn-quicksight-analysis-filterscopeconfiguration-selectedsheets)
       */
      override fun selectedSheets(): Any? = unwrap(this).getSelectedSheets()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilterScopeConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterScopeConfigurationProperty):
          FilterScopeConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterScopeConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterScopeConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface LegendOptionsProperty {
    /**
     * The height of the legend.
     *
     * If this value is omitted, a default height is used when rendering.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-height)
     */
    public fun height(): String? = unwrap(this).getHeight()

    /**
     * The positions for the legend. Choose one of the following options:.
     *
     * * `AUTO`
     * * `RIGHT`
     * * `BOTTOM`
     * * `LEFT`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-position)
     */
    public fun position(): String? = unwrap(this).getPosition()

    /**
     * The custom title for the legend.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * Determines whether or not the legend is visible.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * The width of the legend.
     *
     * If this value is omitted, a default width is used when rendering.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-width)
     */
    public fun width(): String? = unwrap(this).getWidth()

    /**
     * A builder for [LegendOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param height The height of the legend.
       * If this value is omitted, a default height is used when rendering.
       */
      public fun height(height: String)

      /**
       * @param position The positions for the legend. Choose one of the following options:.
       * * `AUTO`
       * * `RIGHT`
       * * `BOTTOM`
       * * `LEFT`
       */
      public fun position(position: String)

      /**
       * @param title The custom title for the legend.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The custom title for the legend.
       */
      public fun title(title: LabelOptionsProperty)

      /**
       * @param title The custom title for the legend.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f27899aaeddf347039ad928897a8ef184a3f0abbb53e8e1134bd1c5f50c492ae")
      public fun title(title: LabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visibility Determines whether or not the legend is visible.
       */
      public fun visibility(visibility: String)

      /**
       * @param width The width of the legend.
       * If this value is omitted, a default width is used when rendering.
       */
      public fun width(width: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LegendOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LegendOptionsProperty.builder()

      /**
       * @param height The height of the legend.
       * If this value is omitted, a default height is used when rendering.
       */
      override fun height(height: String) {
        cdkBuilder.height(height)
      }

      /**
       * @param position The positions for the legend. Choose one of the following options:.
       * * `AUTO`
       * * `RIGHT`
       * * `BOTTOM`
       * * `LEFT`
       */
      override fun position(position: String) {
        cdkBuilder.position(position)
      }

      /**
       * @param title The custom title for the legend.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The custom title for the legend.
       */
      override fun title(title: LabelOptionsProperty) {
        cdkBuilder.title(title.let(LabelOptionsProperty::unwrap))
      }

      /**
       * @param title The custom title for the legend.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f27899aaeddf347039ad928897a8ef184a3f0abbb53e8e1134bd1c5f50c492ae")
      override fun title(title: LabelOptionsProperty.Builder.() -> Unit): Unit =
          title(LabelOptionsProperty(title))

      /**
       * @param visibility Determines whether or not the legend is visible.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      /**
       * @param width The width of the legend.
       * If this value is omitted, a default width is used when rendering.
       */
      override fun width(width: String) {
        cdkBuilder.width(width)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LegendOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LegendOptionsProperty,
    ) : LegendOptionsProperty {
      /**
       * The height of the legend.
       *
       * If this value is omitted, a default height is used when rendering.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-height)
       */
      override fun height(): String? = unwrap(this).getHeight()

      /**
       * The positions for the legend. Choose one of the following options:.
       *
       * * `AUTO`
       * * `RIGHT`
       * * `BOTTOM`
       * * `LEFT`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-position)
       */
      override fun position(): String? = unwrap(this).getPosition()

      /**
       * The custom title for the legend.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * Determines whether or not the legend is visible.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()

      /**
       * The width of the legend.
       *
       * If this value is omitted, a default width is used when rendering.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-width)
       */
      override fun width(): String? = unwrap(this).getWidth()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): LegendOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LegendOptionsProperty):
          LegendOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LegendOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LegendOptionsProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface DefaultSectionBasedLayoutConfigurationProperty {
    /**
     * Determines the screen canvas size options for a section-based layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultsectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-defaultsectionbasedlayoutconfiguration-canvassizeoptions)
     */
    public fun canvasSizeOptions(): Any

    /**
     * A builder for [DefaultSectionBasedLayoutConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a section-based
       * layout. 
       */
      public fun canvasSizeOptions(canvasSizeOptions: IResolvable)

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a section-based
       * layout. 
       */
      public fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty)

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a section-based
       * layout. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("af19ea8079705e5100e19785cc3a2b3a214496c8cf8b22deb718deee68bdc08a")
      public
          fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultSectionBasedLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultSectionBasedLayoutConfigurationProperty.builder()

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a section-based
       * layout. 
       */
      override fun canvasSizeOptions(canvasSizeOptions: IResolvable) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(IResolvable::unwrap))
      }

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a section-based
       * layout. 
       */
      override
          fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(SectionBasedLayoutCanvasSizeOptionsProperty::unwrap))
      }

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a section-based
       * layout. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("af19ea8079705e5100e19785cc3a2b3a214496c8cf8b22deb718deee68bdc08a")
      override
          fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit = canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty(canvasSizeOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultSectionBasedLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultSectionBasedLayoutConfigurationProperty,
    ) : DefaultSectionBasedLayoutConfigurationProperty {
      /**
       * Determines the screen canvas size options for a section-based layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultsectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-defaultsectionbasedlayoutconfiguration-canvassizeoptions)
       */
      override fun canvasSizeOptions(): Any = unwrap(this).getCanvasSizeOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DefaultSectionBasedLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultSectionBasedLayoutConfigurationProperty):
          DefaultSectionBasedLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DefaultSectionBasedLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultSectionBasedLayoutConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TimeRangeDrillDownFilterProperty {
    /**
     * The column that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html#cfn-quicksight-analysis-timerangedrilldownfilter-column)
     */
    public fun column(): Any

    /**
     * The maximum value for the filter value range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html#cfn-quicksight-analysis-timerangedrilldownfilter-rangemaximum)
     */
    public fun rangeMaximum(): String

    /**
     * The minimum value for the filter value range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html#cfn-quicksight-analysis-timerangedrilldownfilter-rangeminimum)
     */
    public fun rangeMinimum(): String

    /**
     * The level of time precision that is used to aggregate `DateTime` values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html#cfn-quicksight-analysis-timerangedrilldownfilter-timegranularity)
     */
    public fun timeGranularity(): String

    /**
     * A builder for [TimeRangeDrillDownFilterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5eda1f9fc72896c14e1fcb908c04e32ebb77f01e4951902aa5f48f8f8004eaee")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param rangeMaximum The maximum value for the filter value range. 
       */
      public fun rangeMaximum(rangeMaximum: String)

      /**
       * @param rangeMinimum The minimum value for the filter value range. 
       */
      public fun rangeMinimum(rangeMinimum: String)

      /**
       * @param timeGranularity The level of time precision that is used to aggregate `DateTime`
       * values. 
       */
      public fun timeGranularity(timeGranularity: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeDrillDownFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeDrillDownFilterProperty.builder()

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5eda1f9fc72896c14e1fcb908c04e32ebb77f01e4951902aa5f48f8f8004eaee")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param rangeMaximum The maximum value for the filter value range. 
       */
      override fun rangeMaximum(rangeMaximum: String) {
        cdkBuilder.rangeMaximum(rangeMaximum)
      }

      /**
       * @param rangeMinimum The minimum value for the filter value range. 
       */
      override fun rangeMinimum(rangeMinimum: String) {
        cdkBuilder.rangeMinimum(rangeMinimum)
      }

      /**
       * @param timeGranularity The level of time precision that is used to aggregate `DateTime`
       * values. 
       */
      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeDrillDownFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeDrillDownFilterProperty,
    ) : TimeRangeDrillDownFilterProperty {
      /**
       * The column that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html#cfn-quicksight-analysis-timerangedrilldownfilter-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The maximum value for the filter value range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html#cfn-quicksight-analysis-timerangedrilldownfilter-rangemaximum)
       */
      override fun rangeMaximum(): String = unwrap(this).getRangeMaximum()

      /**
       * The minimum value for the filter value range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html#cfn-quicksight-analysis-timerangedrilldownfilter-rangeminimum)
       */
      override fun rangeMinimum(): String = unwrap(this).getRangeMinimum()

      /**
       * The level of time precision that is used to aggregate `DateTime` values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html#cfn-quicksight-analysis-timerangedrilldownfilter-timegranularity)
       */
      override fun timeGranularity(): String = unwrap(this).getTimeGranularity()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TimeRangeDrillDownFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeDrillDownFilterProperty):
          TimeRangeDrillDownFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TimeRangeDrillDownFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeDrillDownFilterProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GeospatialPointStyleOptionsProperty {
    /**
     * The cluster marker configuration of the geospatial point style.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialpointstyleoptions.html#cfn-quicksight-analysis-geospatialpointstyleoptions-clustermarkerconfiguration)
     */
    public fun clusterMarkerConfiguration(): Any? = unwrap(this).getClusterMarkerConfiguration()

    /**
     * The heatmap configuration of the geospatial point style.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialpointstyleoptions.html#cfn-quicksight-analysis-geospatialpointstyleoptions-heatmapconfiguration)
     */
    public fun heatmapConfiguration(): Any? = unwrap(this).getHeatmapConfiguration()

    /**
     * The selected point styles (point, cluster) of the geospatial map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialpointstyleoptions.html#cfn-quicksight-analysis-geospatialpointstyleoptions-selectedpointstyle)
     */
    public fun selectedPointStyle(): String? = unwrap(this).getSelectedPointStyle()

    /**
     * A builder for [GeospatialPointStyleOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param clusterMarkerConfiguration The cluster marker configuration of the geospatial point
       * style.
       */
      public fun clusterMarkerConfiguration(clusterMarkerConfiguration: IResolvable)

      /**
       * @param clusterMarkerConfiguration The cluster marker configuration of the geospatial point
       * style.
       */
      public
          fun clusterMarkerConfiguration(clusterMarkerConfiguration: ClusterMarkerConfigurationProperty)

      /**
       * @param clusterMarkerConfiguration The cluster marker configuration of the geospatial point
       * style.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("adf89fbf77b0fd1a9a2dccbe2a355e54141aabddbc7efec3de8fa1841128f4e0")
      public
          fun clusterMarkerConfiguration(clusterMarkerConfiguration: ClusterMarkerConfigurationProperty.Builder.() -> Unit)

      /**
       * @param heatmapConfiguration The heatmap configuration of the geospatial point style.
       */
      public fun heatmapConfiguration(heatmapConfiguration: IResolvable)

      /**
       * @param heatmapConfiguration The heatmap configuration of the geospatial point style.
       */
      public fun heatmapConfiguration(heatmapConfiguration: GeospatialHeatmapConfigurationProperty)

      /**
       * @param heatmapConfiguration The heatmap configuration of the geospatial point style.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b48a16f0b2bc6b26227eeb1e81b826b8767799c2f59136d3e6e401a61355923")
      public
          fun heatmapConfiguration(heatmapConfiguration: GeospatialHeatmapConfigurationProperty.Builder.() -> Unit)

      /**
       * @param selectedPointStyle The selected point styles (point, cluster) of the geospatial map.
       */
      public fun selectedPointStyle(selectedPointStyle: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialPointStyleOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialPointStyleOptionsProperty.builder()

      /**
       * @param clusterMarkerConfiguration The cluster marker configuration of the geospatial point
       * style.
       */
      override fun clusterMarkerConfiguration(clusterMarkerConfiguration: IResolvable) {
        cdkBuilder.clusterMarkerConfiguration(clusterMarkerConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param clusterMarkerConfiguration The cluster marker configuration of the geospatial point
       * style.
       */
      override
          fun clusterMarkerConfiguration(clusterMarkerConfiguration: ClusterMarkerConfigurationProperty) {
        cdkBuilder.clusterMarkerConfiguration(clusterMarkerConfiguration.let(ClusterMarkerConfigurationProperty::unwrap))
      }

      /**
       * @param clusterMarkerConfiguration The cluster marker configuration of the geospatial point
       * style.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("adf89fbf77b0fd1a9a2dccbe2a355e54141aabddbc7efec3de8fa1841128f4e0")
      override
          fun clusterMarkerConfiguration(clusterMarkerConfiguration: ClusterMarkerConfigurationProperty.Builder.() -> Unit):
          Unit =
          clusterMarkerConfiguration(ClusterMarkerConfigurationProperty(clusterMarkerConfiguration))

      /**
       * @param heatmapConfiguration The heatmap configuration of the geospatial point style.
       */
      override fun heatmapConfiguration(heatmapConfiguration: IResolvable) {
        cdkBuilder.heatmapConfiguration(heatmapConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param heatmapConfiguration The heatmap configuration of the geospatial point style.
       */
      override
          fun heatmapConfiguration(heatmapConfiguration: GeospatialHeatmapConfigurationProperty) {
        cdkBuilder.heatmapConfiguration(heatmapConfiguration.let(GeospatialHeatmapConfigurationProperty::unwrap))
      }

      /**
       * @param heatmapConfiguration The heatmap configuration of the geospatial point style.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b48a16f0b2bc6b26227eeb1e81b826b8767799c2f59136d3e6e401a61355923")
      override
          fun heatmapConfiguration(heatmapConfiguration: GeospatialHeatmapConfigurationProperty.Builder.() -> Unit):
          Unit = heatmapConfiguration(GeospatialHeatmapConfigurationProperty(heatmapConfiguration))

      /**
       * @param selectedPointStyle The selected point styles (point, cluster) of the geospatial map.
       */
      override fun selectedPointStyle(selectedPointStyle: String) {
        cdkBuilder.selectedPointStyle(selectedPointStyle)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialPointStyleOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialPointStyleOptionsProperty,
    ) : GeospatialPointStyleOptionsProperty {
      /**
       * The cluster marker configuration of the geospatial point style.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialpointstyleoptions.html#cfn-quicksight-analysis-geospatialpointstyleoptions-clustermarkerconfiguration)
       */
      override fun clusterMarkerConfiguration(): Any? = unwrap(this).getClusterMarkerConfiguration()

      /**
       * The heatmap configuration of the geospatial point style.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialpointstyleoptions.html#cfn-quicksight-analysis-geospatialpointstyleoptions-heatmapconfiguration)
       */
      override fun heatmapConfiguration(): Any? = unwrap(this).getHeatmapConfiguration()

      /**
       * The selected point styles (point, cluster) of the geospatial map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialpointstyleoptions.html#cfn-quicksight-analysis-geospatialpointstyleoptions-selectedpointstyle)
       */
      override fun selectedPointStyle(): String? = unwrap(this).getSelectedPointStyle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialPointStyleOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialPointStyleOptionsProperty):
          GeospatialPointStyleOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialPointStyleOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialPointStyleOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DataPathLabelTypeProperty {
    /**
     * The field ID of the field that the data label needs to be applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathlabeltype.html#cfn-quicksight-analysis-datapathlabeltype-fieldid)
     */
    public fun fieldId(): String? = unwrap(this).getFieldId()

    /**
     * The actual value of the field that is labeled.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathlabeltype.html#cfn-quicksight-analysis-datapathlabeltype-fieldvalue)
     */
    public fun fieldValue(): String? = unwrap(this).getFieldValue()

    /**
     * The visibility of the data label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathlabeltype.html#cfn-quicksight-analysis-datapathlabeltype-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [DataPathLabelTypeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldId The field ID of the field that the data label needs to be applied to.
       */
      public fun fieldId(fieldId: String)

      /**
       * @param fieldValue The actual value of the field that is labeled.
       */
      public fun fieldValue(fieldValue: String)

      /**
       * @param visibility The visibility of the data label.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathLabelTypeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathLabelTypeProperty.builder()

      /**
       * @param fieldId The field ID of the field that the data label needs to be applied to.
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param fieldValue The actual value of the field that is labeled.
       */
      override fun fieldValue(fieldValue: String) {
        cdkBuilder.fieldValue(fieldValue)
      }

      /**
       * @param visibility The visibility of the data label.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathLabelTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathLabelTypeProperty,
    ) : DataPathLabelTypeProperty {
      /**
       * The field ID of the field that the data label needs to be applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathlabeltype.html#cfn-quicksight-analysis-datapathlabeltype-fieldid)
       */
      override fun fieldId(): String? = unwrap(this).getFieldId()

      /**
       * The actual value of the field that is labeled.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathlabeltype.html#cfn-quicksight-analysis-datapathlabeltype-fieldvalue)
       */
      override fun fieldValue(): String? = unwrap(this).getFieldValue()

      /**
       * The visibility of the data label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathlabeltype.html#cfn-quicksight-analysis-datapathlabeltype-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DataPathLabelTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathLabelTypeProperty):
          DataPathLabelTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataPathLabelTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathLabelTypeProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TimeBasedForecastPropertiesProperty {
    /**
     * The lower boundary setup of a forecast computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-lowerboundary)
     */
    public fun lowerBoundary(): Number? = unwrap(this).getLowerBoundary()

    /**
     * The periods backward setup of a forecast computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-periodsbackward)
     */
    public fun periodsBackward(): Number? = unwrap(this).getPeriodsBackward()

    /**
     * The periods forward setup of a forecast computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-periodsforward)
     */
    public fun periodsForward(): Number? = unwrap(this).getPeriodsForward()

    /**
     * The prediction interval setup of a forecast computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-predictioninterval)
     */
    public fun predictionInterval(): Number? = unwrap(this).getPredictionInterval()

    /**
     * The seasonality setup of a forecast computation. Choose one of the following options:.
     *
     * * `NULL` : The input is set to `NULL` .
     * * `NON_NULL` : The input is set to a custom value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-seasonality)
     */
    public fun seasonality(): Number? = unwrap(this).getSeasonality()

    /**
     * The upper boundary setup of a forecast computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-upperboundary)
     */
    public fun upperBoundary(): Number? = unwrap(this).getUpperBoundary()

    /**
     * A builder for [TimeBasedForecastPropertiesProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param lowerBoundary The lower boundary setup of a forecast computation.
       */
      public fun lowerBoundary(lowerBoundary: Number)

      /**
       * @param periodsBackward The periods backward setup of a forecast computation.
       */
      public fun periodsBackward(periodsBackward: Number)

      /**
       * @param periodsForward The periods forward setup of a forecast computation.
       */
      public fun periodsForward(periodsForward: Number)

      /**
       * @param predictionInterval The prediction interval setup of a forecast computation.
       */
      public fun predictionInterval(predictionInterval: Number)

      /**
       * @param seasonality The seasonality setup of a forecast computation. Choose one of the
       * following options:.
       * * `NULL` : The input is set to `NULL` .
       * * `NON_NULL` : The input is set to a custom value.
       */
      public fun seasonality(seasonality: Number)

      /**
       * @param upperBoundary The upper boundary setup of a forecast computation.
       */
      public fun upperBoundary(upperBoundary: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeBasedForecastPropertiesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeBasedForecastPropertiesProperty.builder()

      /**
       * @param lowerBoundary The lower boundary setup of a forecast computation.
       */
      override fun lowerBoundary(lowerBoundary: Number) {
        cdkBuilder.lowerBoundary(lowerBoundary)
      }

      /**
       * @param periodsBackward The periods backward setup of a forecast computation.
       */
      override fun periodsBackward(periodsBackward: Number) {
        cdkBuilder.periodsBackward(periodsBackward)
      }

      /**
       * @param periodsForward The periods forward setup of a forecast computation.
       */
      override fun periodsForward(periodsForward: Number) {
        cdkBuilder.periodsForward(periodsForward)
      }

      /**
       * @param predictionInterval The prediction interval setup of a forecast computation.
       */
      override fun predictionInterval(predictionInterval: Number) {
        cdkBuilder.predictionInterval(predictionInterval)
      }

      /**
       * @param seasonality The seasonality setup of a forecast computation. Choose one of the
       * following options:.
       * * `NULL` : The input is set to `NULL` .
       * * `NON_NULL` : The input is set to a custom value.
       */
      override fun seasonality(seasonality: Number) {
        cdkBuilder.seasonality(seasonality)
      }

      /**
       * @param upperBoundary The upper boundary setup of a forecast computation.
       */
      override fun upperBoundary(upperBoundary: Number) {
        cdkBuilder.upperBoundary(upperBoundary)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeBasedForecastPropertiesProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeBasedForecastPropertiesProperty,
    ) : TimeBasedForecastPropertiesProperty {
      /**
       * The lower boundary setup of a forecast computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-lowerboundary)
       */
      override fun lowerBoundary(): Number? = unwrap(this).getLowerBoundary()

      /**
       * The periods backward setup of a forecast computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-periodsbackward)
       */
      override fun periodsBackward(): Number? = unwrap(this).getPeriodsBackward()

      /**
       * The periods forward setup of a forecast computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-periodsforward)
       */
      override fun periodsForward(): Number? = unwrap(this).getPeriodsForward()

      /**
       * The prediction interval setup of a forecast computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-predictioninterval)
       */
      override fun predictionInterval(): Number? = unwrap(this).getPredictionInterval()

      /**
       * The seasonality setup of a forecast computation. Choose one of the following options:.
       *
       * * `NULL` : The input is set to `NULL` .
       * * `NON_NULL` : The input is set to a custom value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-seasonality)
       */
      override fun seasonality(): Number? = unwrap(this).getSeasonality()

      /**
       * The upper boundary setup of a forecast computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-upperboundary)
       */
      override fun upperBoundary(): Number? = unwrap(this).getUpperBoundary()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TimeBasedForecastPropertiesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeBasedForecastPropertiesProperty):
          TimeBasedForecastPropertiesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TimeBasedForecastPropertiesProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeBasedForecastPropertiesProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface CategoryFilterConfigurationProperty {
    /**
     * A custom filter that filters based on a single value.
     *
     * This filter can be partially matched.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilterconfiguration.html#cfn-quicksight-analysis-categoryfilterconfiguration-customfilterconfiguration)
     */
    public fun customFilterConfiguration(): Any? = unwrap(this).getCustomFilterConfiguration()

    /**
     * A list of custom filter values.
     *
     * In the Amazon QuickSight console, this filter type is called a custom filter list.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilterconfiguration.html#cfn-quicksight-analysis-categoryfilterconfiguration-customfilterlistconfiguration)
     */
    public fun customFilterListConfiguration(): Any? =
        unwrap(this).getCustomFilterListConfiguration()

    /**
     * A list of filter configurations.
     *
     * In the Amazon QuickSight console, this filter type is called a filter list.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilterconfiguration.html#cfn-quicksight-analysis-categoryfilterconfiguration-filterlistconfiguration)
     */
    public fun filterListConfiguration(): Any? = unwrap(this).getFilterListConfiguration()

    /**
     * A builder for [CategoryFilterConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customFilterConfiguration A custom filter that filters based on a single value.
       * This filter can be partially matched.
       */
      public fun customFilterConfiguration(customFilterConfiguration: IResolvable)

      /**
       * @param customFilterConfiguration A custom filter that filters based on a single value.
       * This filter can be partially matched.
       */
      public
          fun customFilterConfiguration(customFilterConfiguration: CustomFilterConfigurationProperty)

      /**
       * @param customFilterConfiguration A custom filter that filters based on a single value.
       * This filter can be partially matched.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eaefaff23092ce4ac0ffa9abae0f0466fe70621d6d016cfcd8db96e67a6ef9da")
      public
          fun customFilterConfiguration(customFilterConfiguration: CustomFilterConfigurationProperty.Builder.() -> Unit)

      /**
       * @param customFilterListConfiguration A list of custom filter values.
       * In the Amazon QuickSight console, this filter type is called a custom filter list.
       */
      public fun customFilterListConfiguration(customFilterListConfiguration: IResolvable)

      /**
       * @param customFilterListConfiguration A list of custom filter values.
       * In the Amazon QuickSight console, this filter type is called a custom filter list.
       */
      public
          fun customFilterListConfiguration(customFilterListConfiguration: CustomFilterListConfigurationProperty)

      /**
       * @param customFilterListConfiguration A list of custom filter values.
       * In the Amazon QuickSight console, this filter type is called a custom filter list.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c7dc144c5fc5ae3d82815cb16eeee7225968b6b168075ab914da1d14a637e88c")
      public
          fun customFilterListConfiguration(customFilterListConfiguration: CustomFilterListConfigurationProperty.Builder.() -> Unit)

      /**
       * @param filterListConfiguration A list of filter configurations.
       * In the Amazon QuickSight console, this filter type is called a filter list.
       */
      public fun filterListConfiguration(filterListConfiguration: IResolvable)

      /**
       * @param filterListConfiguration A list of filter configurations.
       * In the Amazon QuickSight console, this filter type is called a filter list.
       */
      public fun filterListConfiguration(filterListConfiguration: FilterListConfigurationProperty)

      /**
       * @param filterListConfiguration A list of filter configurations.
       * In the Amazon QuickSight console, this filter type is called a filter list.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7449adf8c64eeef57dc343630ba429c8b5d687dc0a7eef78fbf05b11a91f5f8b")
      public
          fun filterListConfiguration(filterListConfiguration: FilterListConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryFilterConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryFilterConfigurationProperty.builder()

      /**
       * @param customFilterConfiguration A custom filter that filters based on a single value.
       * This filter can be partially matched.
       */
      override fun customFilterConfiguration(customFilterConfiguration: IResolvable) {
        cdkBuilder.customFilterConfiguration(customFilterConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param customFilterConfiguration A custom filter that filters based on a single value.
       * This filter can be partially matched.
       */
      override
          fun customFilterConfiguration(customFilterConfiguration: CustomFilterConfigurationProperty) {
        cdkBuilder.customFilterConfiguration(customFilterConfiguration.let(CustomFilterConfigurationProperty::unwrap))
      }

      /**
       * @param customFilterConfiguration A custom filter that filters based on a single value.
       * This filter can be partially matched.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eaefaff23092ce4ac0ffa9abae0f0466fe70621d6d016cfcd8db96e67a6ef9da")
      override
          fun customFilterConfiguration(customFilterConfiguration: CustomFilterConfigurationProperty.Builder.() -> Unit):
          Unit =
          customFilterConfiguration(CustomFilterConfigurationProperty(customFilterConfiguration))

      /**
       * @param customFilterListConfiguration A list of custom filter values.
       * In the Amazon QuickSight console, this filter type is called a custom filter list.
       */
      override fun customFilterListConfiguration(customFilterListConfiguration: IResolvable) {
        cdkBuilder.customFilterListConfiguration(customFilterListConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param customFilterListConfiguration A list of custom filter values.
       * In the Amazon QuickSight console, this filter type is called a custom filter list.
       */
      override
          fun customFilterListConfiguration(customFilterListConfiguration: CustomFilterListConfigurationProperty) {
        cdkBuilder.customFilterListConfiguration(customFilterListConfiguration.let(CustomFilterListConfigurationProperty::unwrap))
      }

      /**
       * @param customFilterListConfiguration A list of custom filter values.
       * In the Amazon QuickSight console, this filter type is called a custom filter list.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c7dc144c5fc5ae3d82815cb16eeee7225968b6b168075ab914da1d14a637e88c")
      override
          fun customFilterListConfiguration(customFilterListConfiguration: CustomFilterListConfigurationProperty.Builder.() -> Unit):
          Unit =
          customFilterListConfiguration(CustomFilterListConfigurationProperty(customFilterListConfiguration))

      /**
       * @param filterListConfiguration A list of filter configurations.
       * In the Amazon QuickSight console, this filter type is called a filter list.
       */
      override fun filterListConfiguration(filterListConfiguration: IResolvable) {
        cdkBuilder.filterListConfiguration(filterListConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param filterListConfiguration A list of filter configurations.
       * In the Amazon QuickSight console, this filter type is called a filter list.
       */
      override
          fun filterListConfiguration(filterListConfiguration: FilterListConfigurationProperty) {
        cdkBuilder.filterListConfiguration(filterListConfiguration.let(FilterListConfigurationProperty::unwrap))
      }

      /**
       * @param filterListConfiguration A list of filter configurations.
       * In the Amazon QuickSight console, this filter type is called a filter list.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7449adf8c64eeef57dc343630ba429c8b5d687dc0a7eef78fbf05b11a91f5f8b")
      override
          fun filterListConfiguration(filterListConfiguration: FilterListConfigurationProperty.Builder.() -> Unit):
          Unit = filterListConfiguration(FilterListConfigurationProperty(filterListConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryFilterConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryFilterConfigurationProperty,
    ) : CategoryFilterConfigurationProperty {
      /**
       * A custom filter that filters based on a single value.
       *
       * This filter can be partially matched.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilterconfiguration.html#cfn-quicksight-analysis-categoryfilterconfiguration-customfilterconfiguration)
       */
      override fun customFilterConfiguration(): Any? = unwrap(this).getCustomFilterConfiguration()

      /**
       * A list of custom filter values.
       *
       * In the Amazon QuickSight console, this filter type is called a custom filter list.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilterconfiguration.html#cfn-quicksight-analysis-categoryfilterconfiguration-customfilterlistconfiguration)
       */
      override fun customFilterListConfiguration(): Any? =
          unwrap(this).getCustomFilterListConfiguration()

      /**
       * A list of filter configurations.
       *
       * In the Amazon QuickSight console, this filter type is called a filter list.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilterconfiguration.html#cfn-quicksight-analysis-categoryfilterconfiguration-filterlistconfiguration)
       */
      override fun filterListConfiguration(): Any? = unwrap(this).getFilterListConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          CategoryFilterConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryFilterConfigurationProperty):
          CategoryFilterConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CategoryFilterConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoryFilterConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface WordCloudOptionsProperty {
    /**
     * The cloud layout options (fluid, normal) of a word cloud.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-cloudlayout)
     */
    public fun cloudLayout(): String? = unwrap(this).getCloudLayout()

    /**
     * The length limit of each word from 1-100.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-maximumstringlength)
     */
    public fun maximumStringLength(): Number? = unwrap(this).getMaximumStringLength()

    /**
     * The word casing options (lower_case, existing_case) for the words in a word cloud.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-wordcasing)
     */
    public fun wordCasing(): String? = unwrap(this).getWordCasing()

    /**
     * The word orientation options (horizontal, horizontal_and_vertical) for the words in a word
     * cloud.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-wordorientation)
     */
    public fun wordOrientation(): String? = unwrap(this).getWordOrientation()

    /**
     * The word padding options (none, small, medium, large) for the words in a word cloud.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-wordpadding)
     */
    public fun wordPadding(): String? = unwrap(this).getWordPadding()

    /**
     * The word scaling options (emphasize, normal) for the words in a word cloud.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-wordscaling)
     */
    public fun wordScaling(): String? = unwrap(this).getWordScaling()

    /**
     * A builder for [WordCloudOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param cloudLayout The cloud layout options (fluid, normal) of a word cloud.
       */
      public fun cloudLayout(cloudLayout: String)

      /**
       * @param maximumStringLength The length limit of each word from 1-100.
       */
      public fun maximumStringLength(maximumStringLength: Number)

      /**
       * @param wordCasing The word casing options (lower_case, existing_case) for the words in a
       * word cloud.
       */
      public fun wordCasing(wordCasing: String)

      /**
       * @param wordOrientation The word orientation options (horizontal, horizontal_and_vertical)
       * for the words in a word cloud.
       */
      public fun wordOrientation(wordOrientation: String)

      /**
       * @param wordPadding The word padding options (none, small, medium, large) for the words in a
       * word cloud.
       */
      public fun wordPadding(wordPadding: String)

      /**
       * @param wordScaling The word scaling options (emphasize, normal) for the words in a word
       * cloud.
       */
      public fun wordScaling(wordScaling: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudOptionsProperty.builder()

      /**
       * @param cloudLayout The cloud layout options (fluid, normal) of a word cloud.
       */
      override fun cloudLayout(cloudLayout: String) {
        cdkBuilder.cloudLayout(cloudLayout)
      }

      /**
       * @param maximumStringLength The length limit of each word from 1-100.
       */
      override fun maximumStringLength(maximumStringLength: Number) {
        cdkBuilder.maximumStringLength(maximumStringLength)
      }

      /**
       * @param wordCasing The word casing options (lower_case, existing_case) for the words in a
       * word cloud.
       */
      override fun wordCasing(wordCasing: String) {
        cdkBuilder.wordCasing(wordCasing)
      }

      /**
       * @param wordOrientation The word orientation options (horizontal, horizontal_and_vertical)
       * for the words in a word cloud.
       */
      override fun wordOrientation(wordOrientation: String) {
        cdkBuilder.wordOrientation(wordOrientation)
      }

      /**
       * @param wordPadding The word padding options (none, small, medium, large) for the words in a
       * word cloud.
       */
      override fun wordPadding(wordPadding: String) {
        cdkBuilder.wordPadding(wordPadding)
      }

      /**
       * @param wordScaling The word scaling options (emphasize, normal) for the words in a word
       * cloud.
       */
      override fun wordScaling(wordScaling: String) {
        cdkBuilder.wordScaling(wordScaling)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudOptionsProperty,
    ) : WordCloudOptionsProperty {
      /**
       * The cloud layout options (fluid, normal) of a word cloud.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-cloudlayout)
       */
      override fun cloudLayout(): String? = unwrap(this).getCloudLayout()

      /**
       * The length limit of each word from 1-100.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-maximumstringlength)
       */
      override fun maximumStringLength(): Number? = unwrap(this).getMaximumStringLength()

      /**
       * The word casing options (lower_case, existing_case) for the words in a word cloud.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-wordcasing)
       */
      override fun wordCasing(): String? = unwrap(this).getWordCasing()

      /**
       * The word orientation options (horizontal, horizontal_and_vertical) for the words in a word
       * cloud.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-wordorientation)
       */
      override fun wordOrientation(): String? = unwrap(this).getWordOrientation()

      /**
       * The word padding options (none, small, medium, large) for the words in a word cloud.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-wordpadding)
       */
      override fun wordPadding(): String? = unwrap(this).getWordPadding()

      /**
       * The word scaling options (emphasize, normal) for the words in a word cloud.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-wordscaling)
       */
      override fun wordScaling(): String? = unwrap(this).getWordScaling()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): WordCloudOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudOptionsProperty):
          WordCloudOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WordCloudOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface TextAreaControlDisplayOptionsProperty {
    /**
     * The configuration of info icon label options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textareacontroldisplayoptions.html#cfn-quicksight-analysis-textareacontroldisplayoptions-infoiconlabeloptions)
     */
    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    /**
     * The configuration of the placeholder options in a text area control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textareacontroldisplayoptions.html#cfn-quicksight-analysis-textareacontroldisplayoptions-placeholderoptions)
     */
    public fun placeholderOptions(): Any? = unwrap(this).getPlaceholderOptions()

    /**
     * The options to configure the title visibility, name, and font size.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textareacontroldisplayoptions.html#cfn-quicksight-analysis-textareacontroldisplayoptions-titleoptions)
     */
    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    /**
     * A builder for [TextAreaControlDisplayOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0a8ebbf4b3c2c8c70f2c702553348be9afb1f921052af24900bab91b8797330e")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param placeholderOptions The configuration of the placeholder options in a text area
       * control.
       */
      public fun placeholderOptions(placeholderOptions: IResolvable)

      /**
       * @param placeholderOptions The configuration of the placeholder options in a text area
       * control.
       */
      public fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty)

      /**
       * @param placeholderOptions The configuration of the placeholder options in a text area
       * control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eb0795f973b49a3f7b992f08ee875065cb8be6bff73fa288ee82f812e5a149d2")
      public
          fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty.Builder.() -> Unit)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: IResolvable)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: LabelOptionsProperty)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("94596f0b887f3d727a1a551d2fb6f29ad40115fa3479b283475b7e67bcd11da2")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextAreaControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextAreaControlDisplayOptionsProperty.builder()

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0a8ebbf4b3c2c8c70f2c702553348be9afb1f921052af24900bab91b8797330e")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      /**
       * @param placeholderOptions The configuration of the placeholder options in a text area
       * control.
       */
      override fun placeholderOptions(placeholderOptions: IResolvable) {
        cdkBuilder.placeholderOptions(placeholderOptions.let(IResolvable::unwrap))
      }

      /**
       * @param placeholderOptions The configuration of the placeholder options in a text area
       * control.
       */
      override fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty) {
        cdkBuilder.placeholderOptions(placeholderOptions.let(TextControlPlaceholderOptionsProperty::unwrap))
      }

      /**
       * @param placeholderOptions The configuration of the placeholder options in a text area
       * control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eb0795f973b49a3f7b992f08ee875065cb8be6bff73fa288ee82f812e5a149d2")
      override
          fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty.Builder.() -> Unit):
          Unit = placeholderOptions(TextControlPlaceholderOptionsProperty(placeholderOptions))

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("94596f0b887f3d727a1a551d2fb6f29ad40115fa3479b283475b7e67bcd11da2")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextAreaControlDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextAreaControlDisplayOptionsProperty,
    ) : TextAreaControlDisplayOptionsProperty {
      /**
       * The configuration of info icon label options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textareacontroldisplayoptions.html#cfn-quicksight-analysis-textareacontroldisplayoptions-infoiconlabeloptions)
       */
      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      /**
       * The configuration of the placeholder options in a text area control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textareacontroldisplayoptions.html#cfn-quicksight-analysis-textareacontroldisplayoptions-placeholderoptions)
       */
      override fun placeholderOptions(): Any? = unwrap(this).getPlaceholderOptions()

      /**
       * The options to configure the title visibility, name, and font size.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textareacontroldisplayoptions.html#cfn-quicksight-analysis-textareacontroldisplayoptions-titleoptions)
       */
      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TextAreaControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TextAreaControlDisplayOptionsProperty):
          TextAreaControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TextAreaControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TextAreaControlDisplayOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface LineChartVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [LineChartVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration of a line chart.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration of a line chart.
       */
      public fun chartConfiguration(chartConfiguration: LineChartConfigurationProperty)

      /**
       * @param chartConfiguration The configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a14264f5604f2e3a6b6ce50e7108a801a58c8c2b37c15e852629fe636a8e6c9a")
      public
          fun chartConfiguration(chartConfiguration: LineChartConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8fd558a89ba1eb2e11f5a4926ef7c75638fb0f861e01e58bcc88a592ad2def44")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0f1d5896ff76cfbbd67d0b5090aac2896d7d5fe6c06fbf1562b156ba543fc0dd")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration of a line chart.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a line chart.
       */
      override fun chartConfiguration(chartConfiguration: LineChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(LineChartConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a14264f5604f2e3a6b6ce50e7108a801a58c8c2b37c15e852629fe636a8e6c9a")
      override
          fun chartConfiguration(chartConfiguration: LineChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(LineChartConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8fd558a89ba1eb2e11f5a4926ef7c75638fb0f861e01e58bcc88a592ad2def44")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0f1d5896ff76cfbbd67d0b5090aac2896d7d5fe6c06fbf1562b156ba543fc0dd")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartVisualProperty,
    ) : LineChartVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): LineChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartVisualProperty):
          LineChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartVisualProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface LineChartConfigurationProperty {
    /**
     * The default configuration of a line chart's contribution analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-contributionanalysisdefaults)
     */
    public fun contributionAnalysisDefaults(): Any? = unwrap(this).getContributionAnalysisDefaults()

    /**
     * The data label configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-datalabels)
     */
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    /**
     * The options that determine the default presentation of all line series in `LineChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-defaultseriessettings)
     */
    public fun defaultSeriesSettings(): Any? = unwrap(this).getDefaultSeriesSettings()

    /**
     * The field well configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The forecast configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-forecastconfigurations)
     */
    public fun forecastConfigurations(): Any? = unwrap(this).getForecastConfigurations()

    /**
     * The legend configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-legend)
     */
    public fun legend(): Any? = unwrap(this).getLegend()

    /**
     * The series axis configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-primaryyaxisdisplayoptions)
     */
    public fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

    /**
     * The options that determine the presentation of the y-axis label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-primaryyaxislabeloptions)
     */
    public fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

    /**
     * The reference lines configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-referencelines)
     */
    public fun referenceLines(): Any? = unwrap(this).getReferenceLines()

    /**
     * The series axis configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-secondaryyaxisdisplayoptions)
     */
    public fun secondaryYAxisDisplayOptions(): Any? = unwrap(this).getSecondaryYAxisDisplayOptions()

    /**
     * The options that determine the presentation of the secondary y-axis label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-secondaryyaxislabeloptions)
     */
    public fun secondaryYAxisLabelOptions(): Any? = unwrap(this).getSecondaryYAxisLabelOptions()

    /**
     * The series item configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-series)
     */
    public fun series(): Any? = unwrap(this).getSeries()

    /**
     * The small multiples setup for the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-smallmultiplesoptions)
     */
    public fun smallMultiplesOptions(): Any? = unwrap(this).getSmallMultiplesOptions()

    /**
     * The sort configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The tooltip configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-tooltip)
     */
    public fun tooltip(): Any? = unwrap(this).getTooltip()

    /**
     * Determines the type of the line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-type)
     */
    public fun type(): String? = unwrap(this).getType()

    /**
     * The visual palette configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-visualpalette)
     */
    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    /**
     * The options that determine the presentation of the x-axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-xaxisdisplayoptions)
     */
    public fun xAxisDisplayOptions(): Any? = unwrap(this).getXAxisDisplayOptions()

    /**
     * The options that determine the presentation of the x-axis label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-xaxislabeloptions)
     */
    public fun xAxisLabelOptions(): Any? = unwrap(this).getXAxisLabelOptions()

    /**
     * A builder for [LineChartConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param contributionAnalysisDefaults The default configuration of a line chart's
       * contribution analysis.
       */
      public fun contributionAnalysisDefaults(contributionAnalysisDefaults: IResolvable)

      /**
       * @param contributionAnalysisDefaults The default configuration of a line chart's
       * contribution analysis.
       */
      public fun contributionAnalysisDefaults(contributionAnalysisDefaults: List<Any>)

      /**
       * @param contributionAnalysisDefaults The default configuration of a line chart's
       * contribution analysis.
       */
      public fun contributionAnalysisDefaults(vararg contributionAnalysisDefaults: Any)

      /**
       * @param dataLabels The data label configuration of a line chart.
       */
      public fun dataLabels(dataLabels: IResolvable)

      /**
       * @param dataLabels The data label configuration of a line chart.
       */
      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      /**
       * @param dataLabels The data label configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("30677abe537865f772be1be67c279ec67bd21b5d3ad5ca03726ee6da99cf172a")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param defaultSeriesSettings The options that determine the default presentation of all
       * line series in `LineChartVisual` .
       */
      public fun defaultSeriesSettings(defaultSeriesSettings: IResolvable)

      /**
       * @param defaultSeriesSettings The options that determine the default presentation of all
       * line series in `LineChartVisual` .
       */
      public
          fun defaultSeriesSettings(defaultSeriesSettings: LineChartDefaultSeriesSettingsProperty)

      /**
       * @param defaultSeriesSettings The options that determine the default presentation of all
       * line series in `LineChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3a3ee77a51c80c81c1828148f5bfa9cdea44f3732a2bc1fbb6a300d216bcddbc")
      public
          fun defaultSeriesSettings(defaultSeriesSettings: LineChartDefaultSeriesSettingsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field well configuration of a line chart.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field well configuration of a line chart.
       */
      public fun fieldWells(fieldWells: LineChartFieldWellsProperty)

      /**
       * @param fieldWells The field well configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("584765f94a957222bbe87e5652268359cd1e9fd2d50fbee5fbcc5497568861cd")
      public fun fieldWells(fieldWells: LineChartFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param forecastConfigurations The forecast configuration of a line chart.
       */
      public fun forecastConfigurations(forecastConfigurations: IResolvable)

      /**
       * @param forecastConfigurations The forecast configuration of a line chart.
       */
      public fun forecastConfigurations(forecastConfigurations: List<Any>)

      /**
       * @param forecastConfigurations The forecast configuration of a line chart.
       */
      public fun forecastConfigurations(vararg forecastConfigurations: Any)

      /**
       * @param legend The legend configuration of a line chart.
       */
      public fun legend(legend: IResolvable)

      /**
       * @param legend The legend configuration of a line chart.
       */
      public fun legend(legend: LegendOptionsProperty)

      /**
       * @param legend The legend configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("72e3d1d346cfdc6d6d827733d06cdcbc65a4c3576db329197eeb3d499804053e")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      /**
       * @param primaryYAxisDisplayOptions The series axis configuration of a line chart.
       */
      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable)

      /**
       * @param primaryYAxisDisplayOptions The series axis configuration of a line chart.
       */
      public
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty)

      /**
       * @param primaryYAxisDisplayOptions The series axis configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c0db9b063b68d638c868fdf68137bb3b9953348c90fab3e5b81d1d28f12d6959")
      public
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param primaryYAxisLabelOptions The options that determine the presentation of the y-axis
       * label.
       */
      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable)

      /**
       * @param primaryYAxisLabelOptions The options that determine the presentation of the y-axis
       * label.
       */
      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param primaryYAxisLabelOptions The options that determine the presentation of the y-axis
       * label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b761263804898a239bb9d70b101d8cffa90093eb5c7516d10ac918a43debedf")
      public
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param referenceLines The reference lines configuration of a line chart.
       */
      public fun referenceLines(referenceLines: IResolvable)

      /**
       * @param referenceLines The reference lines configuration of a line chart.
       */
      public fun referenceLines(referenceLines: List<Any>)

      /**
       * @param referenceLines The reference lines configuration of a line chart.
       */
      public fun referenceLines(vararg referenceLines: Any)

      /**
       * @param secondaryYAxisDisplayOptions The series axis configuration of a line chart.
       */
      public fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: IResolvable)

      /**
       * @param secondaryYAxisDisplayOptions The series axis configuration of a line chart.
       */
      public
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty)

      /**
       * @param secondaryYAxisDisplayOptions The series axis configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a4d6e055b6702972c01f045caee66c4f074e3d828ffeffedf6409ea4421261c7")
      public
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param secondaryYAxisLabelOptions The options that determine the presentation of the
       * secondary y-axis label.
       */
      public fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: IResolvable)

      /**
       * @param secondaryYAxisLabelOptions The options that determine the presentation of the
       * secondary y-axis label.
       */
      public
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param secondaryYAxisLabelOptions The options that determine the presentation of the
       * secondary y-axis label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f1cf011f1b63ac3b38d52a5498a88a6eeb25523ff228fae94022aa3a01793d01")
      public
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param series The series item configuration of a line chart.
       */
      public fun series(series: IResolvable)

      /**
       * @param series The series item configuration of a line chart.
       */
      public fun series(series: List<Any>)

      /**
       * @param series The series item configuration of a line chart.
       */
      public fun series(vararg series: Any)

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      public fun smallMultiplesOptions(smallMultiplesOptions: IResolvable)

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      public fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty)

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4fdc256e69ba49a5d33d137f45c377e39ec7a289ea938348a05ebea670aa2959")
      public
          fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration of a line chart.
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a line chart.
       */
      public fun sortConfiguration(sortConfiguration: LineChartSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d7aeb382595ae1cd96e66d74f793e41af4ccc1b9515618812297136edeb58fcc")
      public
          fun sortConfiguration(sortConfiguration: LineChartSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param tooltip The tooltip configuration of a line chart.
       */
      public fun tooltip(tooltip: IResolvable)

      /**
       * @param tooltip The tooltip configuration of a line chart.
       */
      public fun tooltip(tooltip: TooltipOptionsProperty)

      /**
       * @param tooltip The tooltip configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b99f386b3c626d6621d98e61038bb7f4244c728b7bd5bf244479bf3c0bff392d")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      /**
       * @param type Determines the type of the line chart.
       */
      public fun type(type: String)

      /**
       * @param visualPalette The visual palette configuration of a line chart.
       */
      public fun visualPalette(visualPalette: IResolvable)

      /**
       * @param visualPalette The visual palette configuration of a line chart.
       */
      public fun visualPalette(visualPalette: VisualPaletteProperty)

      /**
       * @param visualPalette The visual palette configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ef3436dfbcbaa52af5ef4baef7b17a8d1b88c374b4f3822ed91bf2ded678a07")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)

      /**
       * @param xAxisDisplayOptions The options that determine the presentation of the x-axis.
       */
      public fun xAxisDisplayOptions(xAxisDisplayOptions: IResolvable)

      /**
       * @param xAxisDisplayOptions The options that determine the presentation of the x-axis.
       */
      public fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty)

      /**
       * @param xAxisDisplayOptions The options that determine the presentation of the x-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b3e126fda3cb37be5ca7e92821d55a56889f003d23855532c893526fdefe651a")
      public
          fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param xAxisLabelOptions The options that determine the presentation of the x-axis label.
       */
      public fun xAxisLabelOptions(xAxisLabelOptions: IResolvable)

      /**
       * @param xAxisLabelOptions The options that determine the presentation of the x-axis label.
       */
      public fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param xAxisLabelOptions The options that determine the presentation of the x-axis label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("78534dd4aaa8ea1b2901af758e6df1c4436c4a325e7c2ebde595c2f2748a5df5")
      public
          fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartConfigurationProperty.builder()

      /**
       * @param contributionAnalysisDefaults The default configuration of a line chart's
       * contribution analysis.
       */
      override fun contributionAnalysisDefaults(contributionAnalysisDefaults: IResolvable) {
        cdkBuilder.contributionAnalysisDefaults(contributionAnalysisDefaults.let(IResolvable::unwrap))
      }

      /**
       * @param contributionAnalysisDefaults The default configuration of a line chart's
       * contribution analysis.
       */
      override fun contributionAnalysisDefaults(contributionAnalysisDefaults: List<Any>) {
        cdkBuilder.contributionAnalysisDefaults(contributionAnalysisDefaults)
      }

      /**
       * @param contributionAnalysisDefaults The default configuration of a line chart's
       * contribution analysis.
       */
      override fun contributionAnalysisDefaults(vararg contributionAnalysisDefaults: Any): Unit =
          contributionAnalysisDefaults(contributionAnalysisDefaults.toList())

      /**
       * @param dataLabels The data label configuration of a line chart.
       */
      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      /**
       * @param dataLabels The data label configuration of a line chart.
       */
      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      /**
       * @param dataLabels The data label configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("30677abe537865f772be1be67c279ec67bd21b5d3ad5ca03726ee6da99cf172a")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      /**
       * @param defaultSeriesSettings The options that determine the default presentation of all
       * line series in `LineChartVisual` .
       */
      override fun defaultSeriesSettings(defaultSeriesSettings: IResolvable) {
        cdkBuilder.defaultSeriesSettings(defaultSeriesSettings.let(IResolvable::unwrap))
      }

      /**
       * @param defaultSeriesSettings The options that determine the default presentation of all
       * line series in `LineChartVisual` .
       */
      override
          fun defaultSeriesSettings(defaultSeriesSettings: LineChartDefaultSeriesSettingsProperty) {
        cdkBuilder.defaultSeriesSettings(defaultSeriesSettings.let(LineChartDefaultSeriesSettingsProperty::unwrap))
      }

      /**
       * @param defaultSeriesSettings The options that determine the default presentation of all
       * line series in `LineChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3a3ee77a51c80c81c1828148f5bfa9cdea44f3732a2bc1fbb6a300d216bcddbc")
      override
          fun defaultSeriesSettings(defaultSeriesSettings: LineChartDefaultSeriesSettingsProperty.Builder.() -> Unit):
          Unit =
          defaultSeriesSettings(LineChartDefaultSeriesSettingsProperty(defaultSeriesSettings))

      /**
       * @param fieldWells The field well configuration of a line chart.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a line chart.
       */
      override fun fieldWells(fieldWells: LineChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(LineChartFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("584765f94a957222bbe87e5652268359cd1e9fd2d50fbee5fbcc5497568861cd")
      override fun fieldWells(fieldWells: LineChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(LineChartFieldWellsProperty(fieldWells))

      /**
       * @param forecastConfigurations The forecast configuration of a line chart.
       */
      override fun forecastConfigurations(forecastConfigurations: IResolvable) {
        cdkBuilder.forecastConfigurations(forecastConfigurations.let(IResolvable::unwrap))
      }

      /**
       * @param forecastConfigurations The forecast configuration of a line chart.
       */
      override fun forecastConfigurations(forecastConfigurations: List<Any>) {
        cdkBuilder.forecastConfigurations(forecastConfigurations)
      }

      /**
       * @param forecastConfigurations The forecast configuration of a line chart.
       */
      override fun forecastConfigurations(vararg forecastConfigurations: Any): Unit =
          forecastConfigurations(forecastConfigurations.toList())

      /**
       * @param legend The legend configuration of a line chart.
       */
      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      /**
       * @param legend The legend configuration of a line chart.
       */
      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      /**
       * @param legend The legend configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("72e3d1d346cfdc6d6d827733d06cdcbc65a4c3576db329197eeb3d499804053e")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      /**
       * @param primaryYAxisDisplayOptions The series axis configuration of a line chart.
       */
      override fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param primaryYAxisDisplayOptions The series axis configuration of a line chart.
       */
      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(LineSeriesAxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param primaryYAxisDisplayOptions The series axis configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c0db9b063b68d638c868fdf68137bb3b9953348c90fab3e5b81d1d28f12d6959")
      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit =
          primaryYAxisDisplayOptions(LineSeriesAxisDisplayOptionsProperty(primaryYAxisDisplayOptions))

      /**
       * @param primaryYAxisLabelOptions The options that determine the presentation of the y-axis
       * label.
       */
      override fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param primaryYAxisLabelOptions The options that determine the presentation of the y-axis
       * label.
       */
      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param primaryYAxisLabelOptions The options that determine the presentation of the y-axis
       * label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b761263804898a239bb9d70b101d8cffa90093eb5c7516d10ac918a43debedf")
      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisLabelOptions(ChartAxisLabelOptionsProperty(primaryYAxisLabelOptions))

      /**
       * @param referenceLines The reference lines configuration of a line chart.
       */
      override fun referenceLines(referenceLines: IResolvable) {
        cdkBuilder.referenceLines(referenceLines.let(IResolvable::unwrap))
      }

      /**
       * @param referenceLines The reference lines configuration of a line chart.
       */
      override fun referenceLines(referenceLines: List<Any>) {
        cdkBuilder.referenceLines(referenceLines)
      }

      /**
       * @param referenceLines The reference lines configuration of a line chart.
       */
      override fun referenceLines(vararg referenceLines: Any): Unit =
          referenceLines(referenceLines.toList())

      /**
       * @param secondaryYAxisDisplayOptions The series axis configuration of a line chart.
       */
      override fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: IResolvable) {
        cdkBuilder.secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param secondaryYAxisDisplayOptions The series axis configuration of a line chart.
       */
      override
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty) {
        cdkBuilder.secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions.let(LineSeriesAxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param secondaryYAxisDisplayOptions The series axis configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a4d6e055b6702972c01f045caee66c4f074e3d828ffeffedf6409ea4421261c7")
      override
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit =
          secondaryYAxisDisplayOptions(LineSeriesAxisDisplayOptionsProperty(secondaryYAxisDisplayOptions))

      /**
       * @param secondaryYAxisLabelOptions The options that determine the presentation of the
       * secondary y-axis label.
       */
      override fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: IResolvable) {
        cdkBuilder.secondaryYAxisLabelOptions(secondaryYAxisLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param secondaryYAxisLabelOptions The options that determine the presentation of the
       * secondary y-axis label.
       */
      override
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.secondaryYAxisLabelOptions(secondaryYAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param secondaryYAxisLabelOptions The options that determine the presentation of the
       * secondary y-axis label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f1cf011f1b63ac3b38d52a5498a88a6eeb25523ff228fae94022aa3a01793d01")
      override
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          secondaryYAxisLabelOptions(ChartAxisLabelOptionsProperty(secondaryYAxisLabelOptions))

      /**
       * @param series The series item configuration of a line chart.
       */
      override fun series(series: IResolvable) {
        cdkBuilder.series(series.let(IResolvable::unwrap))
      }

      /**
       * @param series The series item configuration of a line chart.
       */
      override fun series(series: List<Any>) {
        cdkBuilder.series(series)
      }

      /**
       * @param series The series item configuration of a line chart.
       */
      override fun series(vararg series: Any): Unit = series(series.toList())

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      override fun smallMultiplesOptions(smallMultiplesOptions: IResolvable) {
        cdkBuilder.smallMultiplesOptions(smallMultiplesOptions.let(IResolvable::unwrap))
      }

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      override fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty) {
        cdkBuilder.smallMultiplesOptions(smallMultiplesOptions.let(SmallMultiplesOptionsProperty::unwrap))
      }

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4fdc256e69ba49a5d33d137f45c377e39ec7a289ea938348a05ebea670aa2959")
      override
          fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty.Builder.() -> Unit):
          Unit = smallMultiplesOptions(SmallMultiplesOptionsProperty(smallMultiplesOptions))

      /**
       * @param sortConfiguration The sort configuration of a line chart.
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a line chart.
       */
      override fun sortConfiguration(sortConfiguration: LineChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(LineChartSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d7aeb382595ae1cd96e66d74f793e41af4ccc1b9515618812297136edeb58fcc")
      override
          fun sortConfiguration(sortConfiguration: LineChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(LineChartSortConfigurationProperty(sortConfiguration))

      /**
       * @param tooltip The tooltip configuration of a line chart.
       */
      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      /**
       * @param tooltip The tooltip configuration of a line chart.
       */
      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltip The tooltip configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b99f386b3c626d6621d98e61038bb7f4244c728b7bd5bf244479bf3c0bff392d")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      /**
       * @param type Determines the type of the line chart.
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      /**
       * @param visualPalette The visual palette configuration of a line chart.
       */
      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      /**
       * @param visualPalette The visual palette configuration of a line chart.
       */
      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      /**
       * @param visualPalette The visual palette configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ef3436dfbcbaa52af5ef4baef7b17a8d1b88c374b4f3822ed91bf2ded678a07")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      /**
       * @param xAxisDisplayOptions The options that determine the presentation of the x-axis.
       */
      override fun xAxisDisplayOptions(xAxisDisplayOptions: IResolvable) {
        cdkBuilder.xAxisDisplayOptions(xAxisDisplayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param xAxisDisplayOptions The options that determine the presentation of the x-axis.
       */
      override fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.xAxisDisplayOptions(xAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param xAxisDisplayOptions The options that determine the presentation of the x-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b3e126fda3cb37be5ca7e92821d55a56889f003d23855532c893526fdefe651a")
      override
          fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = xAxisDisplayOptions(AxisDisplayOptionsProperty(xAxisDisplayOptions))

      /**
       * @param xAxisLabelOptions The options that determine the presentation of the x-axis label.
       */
      override fun xAxisLabelOptions(xAxisLabelOptions: IResolvable) {
        cdkBuilder.xAxisLabelOptions(xAxisLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param xAxisLabelOptions The options that determine the presentation of the x-axis label.
       */
      override fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.xAxisLabelOptions(xAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param xAxisLabelOptions The options that determine the presentation of the x-axis label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("78534dd4aaa8ea1b2901af758e6df1c4436c4a325e7c2ebde595c2f2748a5df5")
      override
          fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = xAxisLabelOptions(ChartAxisLabelOptionsProperty(xAxisLabelOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartConfigurationProperty,
    ) : LineChartConfigurationProperty {
      /**
       * The default configuration of a line chart's contribution analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-contributionanalysisdefaults)
       */
      override fun contributionAnalysisDefaults(): Any? =
          unwrap(this).getContributionAnalysisDefaults()

      /**
       * The data label configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-datalabels)
       */
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      /**
       * The options that determine the default presentation of all line series in `LineChartVisual`
       * .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-defaultseriessettings)
       */
      override fun defaultSeriesSettings(): Any? = unwrap(this).getDefaultSeriesSettings()

      /**
       * The field well configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The forecast configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-forecastconfigurations)
       */
      override fun forecastConfigurations(): Any? = unwrap(this).getForecastConfigurations()

      /**
       * The legend configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-legend)
       */
      override fun legend(): Any? = unwrap(this).getLegend()

      /**
       * The series axis configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-primaryyaxisdisplayoptions)
       */
      override fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

      /**
       * The options that determine the presentation of the y-axis label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-primaryyaxislabeloptions)
       */
      override fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

      /**
       * The reference lines configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-referencelines)
       */
      override fun referenceLines(): Any? = unwrap(this).getReferenceLines()

      /**
       * The series axis configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-secondaryyaxisdisplayoptions)
       */
      override fun secondaryYAxisDisplayOptions(): Any? =
          unwrap(this).getSecondaryYAxisDisplayOptions()

      /**
       * The options that determine the presentation of the secondary y-axis label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-secondaryyaxislabeloptions)
       */
      override fun secondaryYAxisLabelOptions(): Any? = unwrap(this).getSecondaryYAxisLabelOptions()

      /**
       * The series item configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-series)
       */
      override fun series(): Any? = unwrap(this).getSeries()

      /**
       * The small multiples setup for the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-smallmultiplesoptions)
       */
      override fun smallMultiplesOptions(): Any? = unwrap(this).getSmallMultiplesOptions()

      /**
       * The sort configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The tooltip configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-tooltip)
       */
      override fun tooltip(): Any? = unwrap(this).getTooltip()

      /**
       * Determines the type of the line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-type)
       */
      override fun type(): String? = unwrap(this).getType()

      /**
       * The visual palette configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-visualpalette)
       */
      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()

      /**
       * The options that determine the presentation of the x-axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-xaxisdisplayoptions)
       */
      override fun xAxisDisplayOptions(): Any? = unwrap(this).getXAxisDisplayOptions()

      /**
       * The options that determine the presentation of the x-axis label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-xaxislabeloptions)
       */
      override fun xAxisLabelOptions(): Any? = unwrap(this).getXAxisLabelOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): LineChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartConfigurationProperty):
          LineChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface AxisDataOptionsProperty {
    /**
     * The options for an axis with a date field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdataoptions.html#cfn-quicksight-analysis-axisdataoptions-dateaxisoptions)
     */
    public fun dateAxisOptions(): Any? = unwrap(this).getDateAxisOptions()

    /**
     * The options for an axis with a numeric field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdataoptions.html#cfn-quicksight-analysis-axisdataoptions-numericaxisoptions)
     */
    public fun numericAxisOptions(): Any? = unwrap(this).getNumericAxisOptions()

    /**
     * A builder for [AxisDataOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dateAxisOptions The options for an axis with a date field.
       */
      public fun dateAxisOptions(dateAxisOptions: IResolvable)

      /**
       * @param dateAxisOptions The options for an axis with a date field.
       */
      public fun dateAxisOptions(dateAxisOptions: DateAxisOptionsProperty)

      /**
       * @param dateAxisOptions The options for an axis with a date field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("393c44789d5a658d1b02685d7b7c5221f2c01be10dd2f6135ee843878f48972f")
      public fun dateAxisOptions(dateAxisOptions: DateAxisOptionsProperty.Builder.() -> Unit)

      /**
       * @param numericAxisOptions The options for an axis with a numeric field.
       */
      public fun numericAxisOptions(numericAxisOptions: IResolvable)

      /**
       * @param numericAxisOptions The options for an axis with a numeric field.
       */
      public fun numericAxisOptions(numericAxisOptions: NumericAxisOptionsProperty)

      /**
       * @param numericAxisOptions The options for an axis with a numeric field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c6ffaf918c75efefa487cfae5dc6553a41c5e62058f201943532112d7a13e768")
      public
          fun numericAxisOptions(numericAxisOptions: NumericAxisOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDataOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDataOptionsProperty.builder()

      /**
       * @param dateAxisOptions The options for an axis with a date field.
       */
      override fun dateAxisOptions(dateAxisOptions: IResolvable) {
        cdkBuilder.dateAxisOptions(dateAxisOptions.let(IResolvable::unwrap))
      }

      /**
       * @param dateAxisOptions The options for an axis with a date field.
       */
      override fun dateAxisOptions(dateAxisOptions: DateAxisOptionsProperty) {
        cdkBuilder.dateAxisOptions(dateAxisOptions.let(DateAxisOptionsProperty::unwrap))
      }

      /**
       * @param dateAxisOptions The options for an axis with a date field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("393c44789d5a658d1b02685d7b7c5221f2c01be10dd2f6135ee843878f48972f")
      override fun dateAxisOptions(dateAxisOptions: DateAxisOptionsProperty.Builder.() -> Unit):
          Unit = dateAxisOptions(DateAxisOptionsProperty(dateAxisOptions))

      /**
       * @param numericAxisOptions The options for an axis with a numeric field.
       */
      override fun numericAxisOptions(numericAxisOptions: IResolvable) {
        cdkBuilder.numericAxisOptions(numericAxisOptions.let(IResolvable::unwrap))
      }

      /**
       * @param numericAxisOptions The options for an axis with a numeric field.
       */
      override fun numericAxisOptions(numericAxisOptions: NumericAxisOptionsProperty) {
        cdkBuilder.numericAxisOptions(numericAxisOptions.let(NumericAxisOptionsProperty::unwrap))
      }

      /**
       * @param numericAxisOptions The options for an axis with a numeric field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c6ffaf918c75efefa487cfae5dc6553a41c5e62058f201943532112d7a13e768")
      override
          fun numericAxisOptions(numericAxisOptions: NumericAxisOptionsProperty.Builder.() -> Unit):
          Unit = numericAxisOptions(NumericAxisOptionsProperty(numericAxisOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDataOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDataOptionsProperty,
    ) : AxisDataOptionsProperty {
      /**
       * The options for an axis with a date field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdataoptions.html#cfn-quicksight-analysis-axisdataoptions-dateaxisoptions)
       */
      override fun dateAxisOptions(): Any? = unwrap(this).getDateAxisOptions()

      /**
       * The options for an axis with a numeric field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdataoptions.html#cfn-quicksight-analysis-axisdataoptions-numericaxisoptions)
       */
      override fun numericAxisOptions(): Any? = unwrap(this).getNumericAxisOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AxisDataOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDataOptionsProperty):
          AxisDataOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisDataOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDataOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface ConditionalFormattingIconProperty {
    /**
     * Determines the custom condition for an icon set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicon.html#cfn-quicksight-analysis-conditionalformattingicon-customcondition)
     */
    public fun customCondition(): Any? = unwrap(this).getCustomCondition()

    /**
     * Formatting configuration for icon set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicon.html#cfn-quicksight-analysis-conditionalformattingicon-iconset)
     */
    public fun iconSet(): Any? = unwrap(this).getIconSet()

    /**
     * A builder for [ConditionalFormattingIconProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customCondition Determines the custom condition for an icon set.
       */
      public fun customCondition(customCondition: IResolvable)

      /**
       * @param customCondition Determines the custom condition for an icon set.
       */
      public fun customCondition(customCondition: ConditionalFormattingCustomIconConditionProperty)

      /**
       * @param customCondition Determines the custom condition for an icon set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b6004ecb3c1fe5bdd5a6eecc68639ad2d1247b589a29aee49ebcb57638dcd3ec")
      public
          fun customCondition(customCondition: ConditionalFormattingCustomIconConditionProperty.Builder.() -> Unit)

      /**
       * @param iconSet Formatting configuration for icon set.
       */
      public fun iconSet(iconSet: IResolvable)

      /**
       * @param iconSet Formatting configuration for icon set.
       */
      public fun iconSet(iconSet: ConditionalFormattingIconSetProperty)

      /**
       * @param iconSet Formatting configuration for icon set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("67a280d5de90fc92eb9de4cc809910cc5428125581d347b671be5f22c520aeb2")
      public fun iconSet(iconSet: ConditionalFormattingIconSetProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconProperty.builder()

      /**
       * @param customCondition Determines the custom condition for an icon set.
       */
      override fun customCondition(customCondition: IResolvable) {
        cdkBuilder.customCondition(customCondition.let(IResolvable::unwrap))
      }

      /**
       * @param customCondition Determines the custom condition for an icon set.
       */
      override
          fun customCondition(customCondition: ConditionalFormattingCustomIconConditionProperty) {
        cdkBuilder.customCondition(customCondition.let(ConditionalFormattingCustomIconConditionProperty::unwrap))
      }

      /**
       * @param customCondition Determines the custom condition for an icon set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b6004ecb3c1fe5bdd5a6eecc68639ad2d1247b589a29aee49ebcb57638dcd3ec")
      override
          fun customCondition(customCondition: ConditionalFormattingCustomIconConditionProperty.Builder.() -> Unit):
          Unit = customCondition(ConditionalFormattingCustomIconConditionProperty(customCondition))

      /**
       * @param iconSet Formatting configuration for icon set.
       */
      override fun iconSet(iconSet: IResolvable) {
        cdkBuilder.iconSet(iconSet.let(IResolvable::unwrap))
      }

      /**
       * @param iconSet Formatting configuration for icon set.
       */
      override fun iconSet(iconSet: ConditionalFormattingIconSetProperty) {
        cdkBuilder.iconSet(iconSet.let(ConditionalFormattingIconSetProperty::unwrap))
      }

      /**
       * @param iconSet Formatting configuration for icon set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("67a280d5de90fc92eb9de4cc809910cc5428125581d347b671be5f22c520aeb2")
      override fun iconSet(iconSet: ConditionalFormattingIconSetProperty.Builder.() -> Unit): Unit =
          iconSet(ConditionalFormattingIconSetProperty(iconSet))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconProperty,
    ) : ConditionalFormattingIconProperty {
      /**
       * Determines the custom condition for an icon set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicon.html#cfn-quicksight-analysis-conditionalformattingicon-customcondition)
       */
      override fun customCondition(): Any? = unwrap(this).getCustomCondition()

      /**
       * Formatting configuration for icon set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicon.html#cfn-quicksight-analysis-conditionalformattingicon-iconset)
       */
      override fun iconSet(): Any? = unwrap(this).getIconSet()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingIconProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconProperty):
          ConditionalFormattingIconProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingIconProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface IntegerValueWhenUnsetConfigurationProperty {
    /**
     * A custom value that's used when the value of a parameter isn't set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integervaluewhenunsetconfiguration.html#cfn-quicksight-analysis-integervaluewhenunsetconfiguration-customvalue)
     */
    public fun customValue(): Number? = unwrap(this).getCustomValue()

    /**
     * The built-in options for default values. The value can be one of the following:.
     *
     * * `RECOMMENDED` : The recommended value.
     * * `NULL` : The `NULL` value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integervaluewhenunsetconfiguration.html#cfn-quicksight-analysis-integervaluewhenunsetconfiguration-valuewhenunsetoption)
     */
    public fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()

    /**
     * A builder for [IntegerValueWhenUnsetConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customValue A custom value that's used when the value of a parameter isn't set.
       */
      public fun customValue(customValue: Number)

      /**
       * @param valueWhenUnsetOption The built-in options for default values. The value can be one
       * of the following:.
       * * `RECOMMENDED` : The recommended value.
       * * `NULL` : The `NULL` value.
       */
      public fun valueWhenUnsetOption(valueWhenUnsetOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerValueWhenUnsetConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerValueWhenUnsetConfigurationProperty.builder()

      /**
       * @param customValue A custom value that's used when the value of a parameter isn't set.
       */
      override fun customValue(customValue: Number) {
        cdkBuilder.customValue(customValue)
      }

      /**
       * @param valueWhenUnsetOption The built-in options for default values. The value can be one
       * of the following:.
       * * `RECOMMENDED` : The recommended value.
       * * `NULL` : The `NULL` value.
       */
      override fun valueWhenUnsetOption(valueWhenUnsetOption: String) {
        cdkBuilder.valueWhenUnsetOption(valueWhenUnsetOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerValueWhenUnsetConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerValueWhenUnsetConfigurationProperty,
    ) : IntegerValueWhenUnsetConfigurationProperty {
      /**
       * A custom value that's used when the value of a parameter isn't set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integervaluewhenunsetconfiguration.html#cfn-quicksight-analysis-integervaluewhenunsetconfiguration-customvalue)
       */
      override fun customValue(): Number? = unwrap(this).getCustomValue()

      /**
       * The built-in options for default values. The value can be one of the following:.
       *
       * * `RECOMMENDED` : The recommended value.
       * * `NULL` : The `NULL` value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integervaluewhenunsetconfiguration.html#cfn-quicksight-analysis-integervaluewhenunsetconfiguration-valuewhenunsetoption)
       */
      override fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          IntegerValueWhenUnsetConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerValueWhenUnsetConfigurationProperty):
          IntegerValueWhenUnsetConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: IntegerValueWhenUnsetConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerValueWhenUnsetConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ComboChartVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration settings of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [ComboChartVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: ComboChartConfigurationProperty)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d1d582eeeb9debf45774acc6d4d15c184fb570a8b9083116a89014e7feef0897")
      public
          fun chartConfiguration(chartConfiguration: ComboChartConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a772ae2baa7a35d7f0c09cc6fb8839a6d06b5cbeb6f1c25924dc3ae5a578b3dc")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("462ddcbb706e3bd5309507d483883d3e48ab15316c0d1bdc1e752159bc1115a1")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: ComboChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(ComboChartConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d1d582eeeb9debf45774acc6d4d15c184fb570a8b9083116a89014e7feef0897")
      override
          fun chartConfiguration(chartConfiguration: ComboChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(ComboChartConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a772ae2baa7a35d7f0c09cc6fb8839a6d06b5cbeb6f1c25924dc3ae5a578b3dc")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("462ddcbb706e3bd5309507d483883d3e48ab15316c0d1bdc1e752159bc1115a1")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartVisualProperty,
    ) : ComboChartVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration settings of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ComboChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartVisualProperty):
          ComboChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComboChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartVisualProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface CustomFilterConfigurationProperty {
    /**
     * The category value for the filter.
     *
     * This field is mutually exclusive to `ParameterName` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-categoryvalue)
     */
    public fun categoryValue(): String? = unwrap(this).getCategoryValue()

    /**
     * The match operator that is used to determine if a filter should be applied.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-matchoperator)
     */
    public fun matchOperator(): String

    /**
     * This option determines how null values should be treated when filtering data.
     *
     * * `ALL_VALUES` : Include null values in filtered results.
     * * `NULLS_ONLY` : Only include null values in filtered results.
     * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-nulloption)
     */
    public fun nullOption(): String

    /**
     * The parameter whose value should be used for the filter value.
     *
     * This field is mutually exclusive to `CategoryValue` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-parametername)
     */
    public fun parameterName(): String? = unwrap(this).getParameterName()

    /**
     * Select all of the values. Null is not the assigned value of select all.
     *
     * * `FILTER_ALL_VALUES`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-selectalloptions)
     */
    public fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()

    /**
     * A builder for [CustomFilterConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryValue The category value for the filter.
       * This field is mutually exclusive to `ParameterName` .
       */
      public fun categoryValue(categoryValue: String)

      /**
       * @param matchOperator The match operator that is used to determine if a filter should be
       * applied. 
       */
      public fun matchOperator(matchOperator: String)

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data. 
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      public fun nullOption(nullOption: String)

      /**
       * @param parameterName The parameter whose value should be used for the filter value.
       * This field is mutually exclusive to `CategoryValue` .
       */
      public fun parameterName(parameterName: String)

      /**
       * @param selectAllOptions Select all of the values. Null is not the assigned value of select
       * all.
       * * `FILTER_ALL_VALUES`
       */
      public fun selectAllOptions(selectAllOptions: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomFilterConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomFilterConfigurationProperty.builder()

      /**
       * @param categoryValue The category value for the filter.
       * This field is mutually exclusive to `ParameterName` .
       */
      override fun categoryValue(categoryValue: String) {
        cdkBuilder.categoryValue(categoryValue)
      }

      /**
       * @param matchOperator The match operator that is used to determine if a filter should be
       * applied. 
       */
      override fun matchOperator(matchOperator: String) {
        cdkBuilder.matchOperator(matchOperator)
      }

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data. 
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      /**
       * @param parameterName The parameter whose value should be used for the filter value.
       * This field is mutually exclusive to `CategoryValue` .
       */
      override fun parameterName(parameterName: String) {
        cdkBuilder.parameterName(parameterName)
      }

      /**
       * @param selectAllOptions Select all of the values. Null is not the assigned value of select
       * all.
       * * `FILTER_ALL_VALUES`
       */
      override fun selectAllOptions(selectAllOptions: String) {
        cdkBuilder.selectAllOptions(selectAllOptions)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomFilterConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomFilterConfigurationProperty,
    ) : CustomFilterConfigurationProperty {
      /**
       * The category value for the filter.
       *
       * This field is mutually exclusive to `ParameterName` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-categoryvalue)
       */
      override fun categoryValue(): String? = unwrap(this).getCategoryValue()

      /**
       * The match operator that is used to determine if a filter should be applied.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-matchoperator)
       */
      override fun matchOperator(): String = unwrap(this).getMatchOperator()

      /**
       * This option determines how null values should be treated when filtering data.
       *
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-nulloption)
       */
      override fun nullOption(): String = unwrap(this).getNullOption()

      /**
       * The parameter whose value should be used for the filter value.
       *
       * This field is mutually exclusive to `CategoryValue` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-parametername)
       */
      override fun parameterName(): String? = unwrap(this).getParameterName()

      /**
       * Select all of the values. Null is not the assigned value of select all.
       *
       * * `FILTER_ALL_VALUES`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-selectalloptions)
       */
      override fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomFilterConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomFilterConfigurationProperty):
          CustomFilterConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomFilterConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomFilterConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface SliderControlDisplayOptionsProperty {
    /**
     * The configuration of info icon label options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-slidercontroldisplayoptions.html#cfn-quicksight-analysis-slidercontroldisplayoptions-infoiconlabeloptions)
     */
    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    /**
     * The options to configure the title visibility, name, and font size.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-slidercontroldisplayoptions.html#cfn-quicksight-analysis-slidercontroldisplayoptions-titleoptions)
     */
    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    /**
     * A builder for [SliderControlDisplayOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("195bf9cffd8164ac914288de1abaee277b3526cb2c21e3f596f88ca4c7d89bf6")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: IResolvable)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: LabelOptionsProperty)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("afa6ba22e26ea9fcf5c662020cf85869e0328731f6061adc7524f5d7c0cfdf6e")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SliderControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SliderControlDisplayOptionsProperty.builder()

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("195bf9cffd8164ac914288de1abaee277b3526cb2c21e3f596f88ca4c7d89bf6")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("afa6ba22e26ea9fcf5c662020cf85869e0328731f6061adc7524f5d7c0cfdf6e")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SliderControlDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SliderControlDisplayOptionsProperty,
    ) : SliderControlDisplayOptionsProperty {
      /**
       * The configuration of info icon label options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-slidercontroldisplayoptions.html#cfn-quicksight-analysis-slidercontroldisplayoptions-infoiconlabeloptions)
       */
      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      /**
       * The options to configure the title visibility, name, and font size.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-slidercontroldisplayoptions.html#cfn-quicksight-analysis-slidercontroldisplayoptions-titleoptions)
       */
      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SliderControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SliderControlDisplayOptionsProperty):
          SliderControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SliderControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SliderControlDisplayOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface GlobalTableBorderOptionsProperty {
    /**
     * Determines the options for side specific border.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-globaltableborderoptions.html#cfn-quicksight-analysis-globaltableborderoptions-sidespecificborder)
     */
    public fun sideSpecificBorder(): Any? = unwrap(this).getSideSpecificBorder()

    /**
     * Determines the options for uniform border.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-globaltableborderoptions.html#cfn-quicksight-analysis-globaltableborderoptions-uniformborder)
     */
    public fun uniformBorder(): Any? = unwrap(this).getUniformBorder()

    /**
     * A builder for [GlobalTableBorderOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param sideSpecificBorder Determines the options for side specific border.
       */
      public fun sideSpecificBorder(sideSpecificBorder: IResolvable)

      /**
       * @param sideSpecificBorder Determines the options for side specific border.
       */
      public fun sideSpecificBorder(sideSpecificBorder: TableSideBorderOptionsProperty)

      /**
       * @param sideSpecificBorder Determines the options for side specific border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9849568373d11b11c62136134cd538b64dac1860882d5706d901976cee0d2b95")
      public
          fun sideSpecificBorder(sideSpecificBorder: TableSideBorderOptionsProperty.Builder.() -> Unit)

      /**
       * @param uniformBorder Determines the options for uniform border.
       */
      public fun uniformBorder(uniformBorder: IResolvable)

      /**
       * @param uniformBorder Determines the options for uniform border.
       */
      public fun uniformBorder(uniformBorder: TableBorderOptionsProperty)

      /**
       * @param uniformBorder Determines the options for uniform border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5d4c3a22405eac1f646d4c45f62f0ee94c401f74f8ca7fc298ef91632f8f8c63")
      public fun uniformBorder(uniformBorder: TableBorderOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GlobalTableBorderOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GlobalTableBorderOptionsProperty.builder()

      /**
       * @param sideSpecificBorder Determines the options for side specific border.
       */
      override fun sideSpecificBorder(sideSpecificBorder: IResolvable) {
        cdkBuilder.sideSpecificBorder(sideSpecificBorder.let(IResolvable::unwrap))
      }

      /**
       * @param sideSpecificBorder Determines the options for side specific border.
       */
      override fun sideSpecificBorder(sideSpecificBorder: TableSideBorderOptionsProperty) {
        cdkBuilder.sideSpecificBorder(sideSpecificBorder.let(TableSideBorderOptionsProperty::unwrap))
      }

      /**
       * @param sideSpecificBorder Determines the options for side specific border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9849568373d11b11c62136134cd538b64dac1860882d5706d901976cee0d2b95")
      override
          fun sideSpecificBorder(sideSpecificBorder: TableSideBorderOptionsProperty.Builder.() -> Unit):
          Unit = sideSpecificBorder(TableSideBorderOptionsProperty(sideSpecificBorder))

      /**
       * @param uniformBorder Determines the options for uniform border.
       */
      override fun uniformBorder(uniformBorder: IResolvable) {
        cdkBuilder.uniformBorder(uniformBorder.let(IResolvable::unwrap))
      }

      /**
       * @param uniformBorder Determines the options for uniform border.
       */
      override fun uniformBorder(uniformBorder: TableBorderOptionsProperty) {
        cdkBuilder.uniformBorder(uniformBorder.let(TableBorderOptionsProperty::unwrap))
      }

      /**
       * @param uniformBorder Determines the options for uniform border.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5d4c3a22405eac1f646d4c45f62f0ee94c401f74f8ca7fc298ef91632f8f8c63")
      override fun uniformBorder(uniformBorder: TableBorderOptionsProperty.Builder.() -> Unit): Unit
          = uniformBorder(TableBorderOptionsProperty(uniformBorder))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GlobalTableBorderOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GlobalTableBorderOptionsProperty,
    ) : GlobalTableBorderOptionsProperty {
      /**
       * Determines the options for side specific border.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-globaltableborderoptions.html#cfn-quicksight-analysis-globaltableborderoptions-sidespecificborder)
       */
      override fun sideSpecificBorder(): Any? = unwrap(this).getSideSpecificBorder()

      /**
       * Determines the options for uniform border.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-globaltableborderoptions.html#cfn-quicksight-analysis-globaltableborderoptions-uniformborder)
       */
      override fun uniformBorder(): Any? = unwrap(this).getUniformBorder()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GlobalTableBorderOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GlobalTableBorderOptionsProperty):
          GlobalTableBorderOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GlobalTableBorderOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GlobalTableBorderOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface NumericRangeFilterProperty {
    /**
     * The aggregation function of the filter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-aggregationfunction)
     */
    public fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

    /**
     * The column that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-column)
     */
    public fun column(): Any

    /**
     * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-filterid)
     */
    public fun filterId(): String

    /**
     * Determines whether the maximum value in the filter value range should be included in the
     * filtered results.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-includemaximum)
     */
    public fun includeMaximum(): Any? = unwrap(this).getIncludeMaximum()

    /**
     * Determines whether the minimum value in the filter value range should be included in the
     * filtered results.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-includeminimum)
     */
    public fun includeMinimum(): Any? = unwrap(this).getIncludeMinimum()

    /**
     * This option determines how null values should be treated when filtering data.
     *
     * * `ALL_VALUES` : Include null values in filtered results.
     * * `NULLS_ONLY` : Only include null values in filtered results.
     * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-nulloption)
     */
    public fun nullOption(): String

    /**
     * The maximum value for the filter value range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-rangemaximum)
     */
    public fun rangeMaximum(): Any? = unwrap(this).getRangeMaximum()

    /**
     * The minimum value for the filter value range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-rangeminimum)
     */
    public fun rangeMinimum(): Any? = unwrap(this).getRangeMinimum()

    /**
     * Select all of the values. Null is not the assigned value of select all.
     *
     * * `FILTER_ALL_VALUES`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-selectalloptions)
     */
    public fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()

    /**
     * A builder for [NumericRangeFilterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param aggregationFunction The aggregation function of the filter.
       */
      public fun aggregationFunction(aggregationFunction: IResolvable)

      /**
       * @param aggregationFunction The aggregation function of the filter.
       */
      public fun aggregationFunction(aggregationFunction: AggregationFunctionProperty)

      /**
       * @param aggregationFunction The aggregation function of the filter.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9c5f901a02eb89bd34fbf8678209787bd2e61b6d251335ce1c6771221b13d378")
      public
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0ab7e00200aaeb535d9e2c64fb1a356c94545af58c40ffcfdd3eb8c629dd1ff4")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      public fun filterId(filterId: String)

      /**
       * @param includeMaximum Determines whether the maximum value in the filter value range should
       * be included in the filtered results.
       */
      public fun includeMaximum(includeMaximum: Boolean)

      /**
       * @param includeMaximum Determines whether the maximum value in the filter value range should
       * be included in the filtered results.
       */
      public fun includeMaximum(includeMaximum: IResolvable)

      /**
       * @param includeMinimum Determines whether the minimum value in the filter value range should
       * be included in the filtered results.
       */
      public fun includeMinimum(includeMinimum: Boolean)

      /**
       * @param includeMinimum Determines whether the minimum value in the filter value range should
       * be included in the filtered results.
       */
      public fun includeMinimum(includeMinimum: IResolvable)

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data. 
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      public fun nullOption(nullOption: String)

      /**
       * @param rangeMaximum The maximum value for the filter value range.
       */
      public fun rangeMaximum(rangeMaximum: IResolvable)

      /**
       * @param rangeMaximum The maximum value for the filter value range.
       */
      public fun rangeMaximum(rangeMaximum: NumericRangeFilterValueProperty)

      /**
       * @param rangeMaximum The maximum value for the filter value range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ced55e5b01a9412ab4308cd2cc9e789cd06be31926b868eec2ea817abb62f40e")
      public fun rangeMaximum(rangeMaximum: NumericRangeFilterValueProperty.Builder.() -> Unit)

      /**
       * @param rangeMinimum The minimum value for the filter value range.
       */
      public fun rangeMinimum(rangeMinimum: IResolvable)

      /**
       * @param rangeMinimum The minimum value for the filter value range.
       */
      public fun rangeMinimum(rangeMinimum: NumericRangeFilterValueProperty)

      /**
       * @param rangeMinimum The minimum value for the filter value range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c90accee2524dd9682e21528e34fcb42af35bf5b286250d9f6d90ca0304782ba")
      public fun rangeMinimum(rangeMinimum: NumericRangeFilterValueProperty.Builder.() -> Unit)

      /**
       * @param selectAllOptions Select all of the values. Null is not the assigned value of select
       * all.
       * * `FILTER_ALL_VALUES`
       */
      public fun selectAllOptions(selectAllOptions: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericRangeFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericRangeFilterProperty.builder()

      /**
       * @param aggregationFunction The aggregation function of the filter.
       */
      override fun aggregationFunction(aggregationFunction: IResolvable) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(IResolvable::unwrap))
      }

      /**
       * @param aggregationFunction The aggregation function of the filter.
       */
      override fun aggregationFunction(aggregationFunction: AggregationFunctionProperty) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(AggregationFunctionProperty::unwrap))
      }

      /**
       * @param aggregationFunction The aggregation function of the filter.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9c5f901a02eb89bd34fbf8678209787bd2e61b6d251335ce1c6771221b13d378")
      override
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit):
          Unit = aggregationFunction(AggregationFunctionProperty(aggregationFunction))

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0ab7e00200aaeb535d9e2c64fb1a356c94545af58c40ffcfdd3eb8c629dd1ff4")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      /**
       * @param includeMaximum Determines whether the maximum value in the filter value range should
       * be included in the filtered results.
       */
      override fun includeMaximum(includeMaximum: Boolean) {
        cdkBuilder.includeMaximum(includeMaximum)
      }

      /**
       * @param includeMaximum Determines whether the maximum value in the filter value range should
       * be included in the filtered results.
       */
      override fun includeMaximum(includeMaximum: IResolvable) {
        cdkBuilder.includeMaximum(includeMaximum.let(IResolvable::unwrap))
      }

      /**
       * @param includeMinimum Determines whether the minimum value in the filter value range should
       * be included in the filtered results.
       */
      override fun includeMinimum(includeMinimum: Boolean) {
        cdkBuilder.includeMinimum(includeMinimum)
      }

      /**
       * @param includeMinimum Determines whether the minimum value in the filter value range should
       * be included in the filtered results.
       */
      override fun includeMinimum(includeMinimum: IResolvable) {
        cdkBuilder.includeMinimum(includeMinimum.let(IResolvable::unwrap))
      }

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data. 
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      /**
       * @param rangeMaximum The maximum value for the filter value range.
       */
      override fun rangeMaximum(rangeMaximum: IResolvable) {
        cdkBuilder.rangeMaximum(rangeMaximum.let(IResolvable::unwrap))
      }

      /**
       * @param rangeMaximum The maximum value for the filter value range.
       */
      override fun rangeMaximum(rangeMaximum: NumericRangeFilterValueProperty) {
        cdkBuilder.rangeMaximum(rangeMaximum.let(NumericRangeFilterValueProperty::unwrap))
      }

      /**
       * @param rangeMaximum The maximum value for the filter value range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ced55e5b01a9412ab4308cd2cc9e789cd06be31926b868eec2ea817abb62f40e")
      override fun rangeMaximum(rangeMaximum: NumericRangeFilterValueProperty.Builder.() -> Unit):
          Unit = rangeMaximum(NumericRangeFilterValueProperty(rangeMaximum))

      /**
       * @param rangeMinimum The minimum value for the filter value range.
       */
      override fun rangeMinimum(rangeMinimum: IResolvable) {
        cdkBuilder.rangeMinimum(rangeMinimum.let(IResolvable::unwrap))
      }

      /**
       * @param rangeMinimum The minimum value for the filter value range.
       */
      override fun rangeMinimum(rangeMinimum: NumericRangeFilterValueProperty) {
        cdkBuilder.rangeMinimum(rangeMinimum.let(NumericRangeFilterValueProperty::unwrap))
      }

      /**
       * @param rangeMinimum The minimum value for the filter value range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c90accee2524dd9682e21528e34fcb42af35bf5b286250d9f6d90ca0304782ba")
      override fun rangeMinimum(rangeMinimum: NumericRangeFilterValueProperty.Builder.() -> Unit):
          Unit = rangeMinimum(NumericRangeFilterValueProperty(rangeMinimum))

      /**
       * @param selectAllOptions Select all of the values. Null is not the assigned value of select
       * all.
       * * `FILTER_ALL_VALUES`
       */
      override fun selectAllOptions(selectAllOptions: String) {
        cdkBuilder.selectAllOptions(selectAllOptions)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericRangeFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericRangeFilterProperty,
    ) : NumericRangeFilterProperty {
      /**
       * The aggregation function of the filter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-aggregationfunction)
       */
      override fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

      /**
       * The column that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-filterid)
       */
      override fun filterId(): String = unwrap(this).getFilterId()

      /**
       * Determines whether the maximum value in the filter value range should be included in the
       * filtered results.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-includemaximum)
       */
      override fun includeMaximum(): Any? = unwrap(this).getIncludeMaximum()

      /**
       * Determines whether the minimum value in the filter value range should be included in the
       * filtered results.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-includeminimum)
       */
      override fun includeMinimum(): Any? = unwrap(this).getIncludeMinimum()

      /**
       * This option determines how null values should be treated when filtering data.
       *
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-nulloption)
       */
      override fun nullOption(): String = unwrap(this).getNullOption()

      /**
       * The maximum value for the filter value range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-rangemaximum)
       */
      override fun rangeMaximum(): Any? = unwrap(this).getRangeMaximum()

      /**
       * The minimum value for the filter value range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-rangeminimum)
       */
      override fun rangeMinimum(): Any? = unwrap(this).getRangeMinimum()

      /**
       * Select all of the values. Null is not the assigned value of select all.
       *
       * * `FILTER_ALL_VALUES`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-selectalloptions)
       */
      override fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): NumericRangeFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericRangeFilterProperty):
          NumericRangeFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericRangeFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericRangeFilterProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface KPIOptionsProperty {
    /**
     * The comparison configuration of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-comparison)
     */
    public fun comparison(): Any? = unwrap(this).getComparison()

    /**
     * The options that determine the primary value display type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-primaryvaluedisplaytype)
     */
    public fun primaryValueDisplayType(): String? = unwrap(this).getPrimaryValueDisplayType()

    /**
     * The options that determine the primary value font configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-primaryvaluefontconfiguration)
     */
    public fun primaryValueFontConfiguration(): Any? =
        unwrap(this).getPrimaryValueFontConfiguration()

    /**
     * The options that determine the presentation of the progress bar of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-progressbar)
     */
    public fun progressBar(): Any? = unwrap(this).getProgressBar()

    /**
     * The options that determine the presentation of the secondary value of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-secondaryvalue)
     */
    public fun secondaryValue(): Any? = unwrap(this).getSecondaryValue()

    /**
     * The options that determine the secondary value font configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-secondaryvaluefontconfiguration)
     */
    public fun secondaryValueFontConfiguration(): Any? =
        unwrap(this).getSecondaryValueFontConfiguration()

    /**
     * The options that determine the visibility, color, type, and tooltip visibility of the
     * sparkline of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-sparkline)
     */
    public fun sparkline(): Any? = unwrap(this).getSparkline()

    /**
     * The options that determine the presentation of trend arrows in a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-trendarrows)
     */
    public fun trendArrows(): Any? = unwrap(this).getTrendArrows()

    /**
     * The options that determine the layout a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-visuallayoutoptions)
     */
    public fun visualLayoutOptions(): Any? = unwrap(this).getVisualLayoutOptions()

    /**
     * A builder for [KPIOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param comparison The comparison configuration of a KPI visual.
       */
      public fun comparison(comparison: IResolvable)

      /**
       * @param comparison The comparison configuration of a KPI visual.
       */
      public fun comparison(comparison: ComparisonConfigurationProperty)

      /**
       * @param comparison The comparison configuration of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("70602507a5b43827f41882af73316c18b393c15df28a90ee58fd50c2fdc72999")
      public fun comparison(comparison: ComparisonConfigurationProperty.Builder.() -> Unit)

      /**
       * @param primaryValueDisplayType The options that determine the primary value display type.
       */
      public fun primaryValueDisplayType(primaryValueDisplayType: String)

      /**
       * @param primaryValueFontConfiguration The options that determine the primary value font
       * configuration.
       */
      public fun primaryValueFontConfiguration(primaryValueFontConfiguration: IResolvable)

      /**
       * @param primaryValueFontConfiguration The options that determine the primary value font
       * configuration.
       */
      public
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty)

      /**
       * @param primaryValueFontConfiguration The options that determine the primary value font
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c8c95b23eca534c24071a087aafe3a56b78d4b2fe561add5c57ed466d37c5c2")
      public
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      /**
       * @param progressBar The options that determine the presentation of the progress bar of a KPI
       * visual.
       */
      public fun progressBar(progressBar: IResolvable)

      /**
       * @param progressBar The options that determine the presentation of the progress bar of a KPI
       * visual.
       */
      public fun progressBar(progressBar: ProgressBarOptionsProperty)

      /**
       * @param progressBar The options that determine the presentation of the progress bar of a KPI
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9db45e207ad1ab6e9f6cb9ddf6f83ed6240dfa9b03d70b4309c4c7682800dc12")
      public fun progressBar(progressBar: ProgressBarOptionsProperty.Builder.() -> Unit)

      /**
       * @param secondaryValue The options that determine the presentation of the secondary value of
       * a KPI visual.
       */
      public fun secondaryValue(secondaryValue: IResolvable)

      /**
       * @param secondaryValue The options that determine the presentation of the secondary value of
       * a KPI visual.
       */
      public fun secondaryValue(secondaryValue: SecondaryValueOptionsProperty)

      /**
       * @param secondaryValue The options that determine the presentation of the secondary value of
       * a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("18fc2e1bb2c73a2f350e60afa95bc5b7212f3c6eff66ed844fbe92f4bd329ff3")
      public fun secondaryValue(secondaryValue: SecondaryValueOptionsProperty.Builder.() -> Unit)

      /**
       * @param secondaryValueFontConfiguration The options that determine the secondary value font
       * configuration.
       */
      public fun secondaryValueFontConfiguration(secondaryValueFontConfiguration: IResolvable)

      /**
       * @param secondaryValueFontConfiguration The options that determine the secondary value font
       * configuration.
       */
      public
          fun secondaryValueFontConfiguration(secondaryValueFontConfiguration: FontConfigurationProperty)

      /**
       * @param secondaryValueFontConfiguration The options that determine the secondary value font
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d8ff2d4db5af21bda828a1bff82b74281978b9f3de492306f7d23efd3896dadd")
      public
          fun secondaryValueFontConfiguration(secondaryValueFontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      /**
       * @param sparkline The options that determine the visibility, color, type, and tooltip
       * visibility of the sparkline of a KPI visual.
       */
      public fun sparkline(sparkline: IResolvable)

      /**
       * @param sparkline The options that determine the visibility, color, type, and tooltip
       * visibility of the sparkline of a KPI visual.
       */
      public fun sparkline(sparkline: KPISparklineOptionsProperty)

      /**
       * @param sparkline The options that determine the visibility, color, type, and tooltip
       * visibility of the sparkline of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("371f32e91256eec8536322cf21ea0eb5b01551903667550fd31df54167851428")
      public fun sparkline(sparkline: KPISparklineOptionsProperty.Builder.() -> Unit)

      /**
       * @param trendArrows The options that determine the presentation of trend arrows in a KPI
       * visual.
       */
      public fun trendArrows(trendArrows: IResolvable)

      /**
       * @param trendArrows The options that determine the presentation of trend arrows in a KPI
       * visual.
       */
      public fun trendArrows(trendArrows: TrendArrowOptionsProperty)

      /**
       * @param trendArrows The options that determine the presentation of trend arrows in a KPI
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a5bd4f9a869c54182e49551a8a4e612cb4017df2d0bc26712c662464823e6168")
      public fun trendArrows(trendArrows: TrendArrowOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualLayoutOptions The options that determine the layout a KPI visual.
       */
      public fun visualLayoutOptions(visualLayoutOptions: IResolvable)

      /**
       * @param visualLayoutOptions The options that determine the layout a KPI visual.
       */
      public fun visualLayoutOptions(visualLayoutOptions: KPIVisualLayoutOptionsProperty)

      /**
       * @param visualLayoutOptions The options that determine the layout a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4c73b4e8828ac31ab40793a601ce1f3da2627b185d3cf015ba5c72cd3c5ed27d")
      public
          fun visualLayoutOptions(visualLayoutOptions: KPIVisualLayoutOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIOptionsProperty.builder()

      /**
       * @param comparison The comparison configuration of a KPI visual.
       */
      override fun comparison(comparison: IResolvable) {
        cdkBuilder.comparison(comparison.let(IResolvable::unwrap))
      }

      /**
       * @param comparison The comparison configuration of a KPI visual.
       */
      override fun comparison(comparison: ComparisonConfigurationProperty) {
        cdkBuilder.comparison(comparison.let(ComparisonConfigurationProperty::unwrap))
      }

      /**
       * @param comparison The comparison configuration of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("70602507a5b43827f41882af73316c18b393c15df28a90ee58fd50c2fdc72999")
      override fun comparison(comparison: ComparisonConfigurationProperty.Builder.() -> Unit): Unit
          = comparison(ComparisonConfigurationProperty(comparison))

      /**
       * @param primaryValueDisplayType The options that determine the primary value display type.
       */
      override fun primaryValueDisplayType(primaryValueDisplayType: String) {
        cdkBuilder.primaryValueDisplayType(primaryValueDisplayType)
      }

      /**
       * @param primaryValueFontConfiguration The options that determine the primary value font
       * configuration.
       */
      override fun primaryValueFontConfiguration(primaryValueFontConfiguration: IResolvable) {
        cdkBuilder.primaryValueFontConfiguration(primaryValueFontConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param primaryValueFontConfiguration The options that determine the primary value font
       * configuration.
       */
      override
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty) {
        cdkBuilder.primaryValueFontConfiguration(primaryValueFontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      /**
       * @param primaryValueFontConfiguration The options that determine the primary value font
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c8c95b23eca534c24071a087aafe3a56b78d4b2fe561add5c57ed466d37c5c2")
      override
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit =
          primaryValueFontConfiguration(FontConfigurationProperty(primaryValueFontConfiguration))

      /**
       * @param progressBar The options that determine the presentation of the progress bar of a KPI
       * visual.
       */
      override fun progressBar(progressBar: IResolvable) {
        cdkBuilder.progressBar(progressBar.let(IResolvable::unwrap))
      }

      /**
       * @param progressBar The options that determine the presentation of the progress bar of a KPI
       * visual.
       */
      override fun progressBar(progressBar: ProgressBarOptionsProperty) {
        cdkBuilder.progressBar(progressBar.let(ProgressBarOptionsProperty::unwrap))
      }

      /**
       * @param progressBar The options that determine the presentation of the progress bar of a KPI
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9db45e207ad1ab6e9f6cb9ddf6f83ed6240dfa9b03d70b4309c4c7682800dc12")
      override fun progressBar(progressBar: ProgressBarOptionsProperty.Builder.() -> Unit): Unit =
          progressBar(ProgressBarOptionsProperty(progressBar))

      /**
       * @param secondaryValue The options that determine the presentation of the secondary value of
       * a KPI visual.
       */
      override fun secondaryValue(secondaryValue: IResolvable) {
        cdkBuilder.secondaryValue(secondaryValue.let(IResolvable::unwrap))
      }

      /**
       * @param secondaryValue The options that determine the presentation of the secondary value of
       * a KPI visual.
       */
      override fun secondaryValue(secondaryValue: SecondaryValueOptionsProperty) {
        cdkBuilder.secondaryValue(secondaryValue.let(SecondaryValueOptionsProperty::unwrap))
      }

      /**
       * @param secondaryValue The options that determine the presentation of the secondary value of
       * a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("18fc2e1bb2c73a2f350e60afa95bc5b7212f3c6eff66ed844fbe92f4bd329ff3")
      override fun secondaryValue(secondaryValue: SecondaryValueOptionsProperty.Builder.() -> Unit):
          Unit = secondaryValue(SecondaryValueOptionsProperty(secondaryValue))

      /**
       * @param secondaryValueFontConfiguration The options that determine the secondary value font
       * configuration.
       */
      override fun secondaryValueFontConfiguration(secondaryValueFontConfiguration: IResolvable) {
        cdkBuilder.secondaryValueFontConfiguration(secondaryValueFontConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param secondaryValueFontConfiguration The options that determine the secondary value font
       * configuration.
       */
      override
          fun secondaryValueFontConfiguration(secondaryValueFontConfiguration: FontConfigurationProperty) {
        cdkBuilder.secondaryValueFontConfiguration(secondaryValueFontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      /**
       * @param secondaryValueFontConfiguration The options that determine the secondary value font
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d8ff2d4db5af21bda828a1bff82b74281978b9f3de492306f7d23efd3896dadd")
      override
          fun secondaryValueFontConfiguration(secondaryValueFontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit =
          secondaryValueFontConfiguration(FontConfigurationProperty(secondaryValueFontConfiguration))

      /**
       * @param sparkline The options that determine the visibility, color, type, and tooltip
       * visibility of the sparkline of a KPI visual.
       */
      override fun sparkline(sparkline: IResolvable) {
        cdkBuilder.sparkline(sparkline.let(IResolvable::unwrap))
      }

      /**
       * @param sparkline The options that determine the visibility, color, type, and tooltip
       * visibility of the sparkline of a KPI visual.
       */
      override fun sparkline(sparkline: KPISparklineOptionsProperty) {
        cdkBuilder.sparkline(sparkline.let(KPISparklineOptionsProperty::unwrap))
      }

      /**
       * @param sparkline The options that determine the visibility, color, type, and tooltip
       * visibility of the sparkline of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("371f32e91256eec8536322cf21ea0eb5b01551903667550fd31df54167851428")
      override fun sparkline(sparkline: KPISparklineOptionsProperty.Builder.() -> Unit): Unit =
          sparkline(KPISparklineOptionsProperty(sparkline))

      /**
       * @param trendArrows The options that determine the presentation of trend arrows in a KPI
       * visual.
       */
      override fun trendArrows(trendArrows: IResolvable) {
        cdkBuilder.trendArrows(trendArrows.let(IResolvable::unwrap))
      }

      /**
       * @param trendArrows The options that determine the presentation of trend arrows in a KPI
       * visual.
       */
      override fun trendArrows(trendArrows: TrendArrowOptionsProperty) {
        cdkBuilder.trendArrows(trendArrows.let(TrendArrowOptionsProperty::unwrap))
      }

      /**
       * @param trendArrows The options that determine the presentation of trend arrows in a KPI
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a5bd4f9a869c54182e49551a8a4e612cb4017df2d0bc26712c662464823e6168")
      override fun trendArrows(trendArrows: TrendArrowOptionsProperty.Builder.() -> Unit): Unit =
          trendArrows(TrendArrowOptionsProperty(trendArrows))

      /**
       * @param visualLayoutOptions The options that determine the layout a KPI visual.
       */
      override fun visualLayoutOptions(visualLayoutOptions: IResolvable) {
        cdkBuilder.visualLayoutOptions(visualLayoutOptions.let(IResolvable::unwrap))
      }

      /**
       * @param visualLayoutOptions The options that determine the layout a KPI visual.
       */
      override fun visualLayoutOptions(visualLayoutOptions: KPIVisualLayoutOptionsProperty) {
        cdkBuilder.visualLayoutOptions(visualLayoutOptions.let(KPIVisualLayoutOptionsProperty::unwrap))
      }

      /**
       * @param visualLayoutOptions The options that determine the layout a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4c73b4e8828ac31ab40793a601ce1f3da2627b185d3cf015ba5c72cd3c5ed27d")
      override
          fun visualLayoutOptions(visualLayoutOptions: KPIVisualLayoutOptionsProperty.Builder.() -> Unit):
          Unit = visualLayoutOptions(KPIVisualLayoutOptionsProperty(visualLayoutOptions))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIOptionsProperty,
    ) : KPIOptionsProperty {
      /**
       * The comparison configuration of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-comparison)
       */
      override fun comparison(): Any? = unwrap(this).getComparison()

      /**
       * The options that determine the primary value display type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-primaryvaluedisplaytype)
       */
      override fun primaryValueDisplayType(): String? = unwrap(this).getPrimaryValueDisplayType()

      /**
       * The options that determine the primary value font configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-primaryvaluefontconfiguration)
       */
      override fun primaryValueFontConfiguration(): Any? =
          unwrap(this).getPrimaryValueFontConfiguration()

      /**
       * The options that determine the presentation of the progress bar of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-progressbar)
       */
      override fun progressBar(): Any? = unwrap(this).getProgressBar()

      /**
       * The options that determine the presentation of the secondary value of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-secondaryvalue)
       */
      override fun secondaryValue(): Any? = unwrap(this).getSecondaryValue()

      /**
       * The options that determine the secondary value font configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-secondaryvaluefontconfiguration)
       */
      override fun secondaryValueFontConfiguration(): Any? =
          unwrap(this).getSecondaryValueFontConfiguration()

      /**
       * The options that determine the visibility, color, type, and tooltip visibility of the
       * sparkline of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-sparkline)
       */
      override fun sparkline(): Any? = unwrap(this).getSparkline()

      /**
       * The options that determine the presentation of trend arrows in a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-trendarrows)
       */
      override fun trendArrows(): Any? = unwrap(this).getTrendArrows()

      /**
       * The options that determine the layout a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-visuallayoutoptions)
       */
      override fun visualLayoutOptions(): Any? = unwrap(this).getVisualLayoutOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): KPIOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIOptionsProperty):
          KPIOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIOptionsProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface GridLayoutElementProperty {
    /**
     * The column index for the upper left corner of an element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-columnindex)
     */
    public fun columnIndex(): Number? = unwrap(this).getColumnIndex()

    /**
     * The width of a grid element expressed as a number of grid columns.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-columnspan)
     */
    public fun columnSpan(): Number

    /**
     * A unique identifier for an element within a grid layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-elementid)
     */
    public fun elementId(): String

    /**
     * The type of element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-elementtype)
     */
    public fun elementType(): String

    /**
     * The row index for the upper left corner of an element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-rowindex)
     */
    public fun rowIndex(): Number? = unwrap(this).getRowIndex()

    /**
     * The height of a grid element expressed as a number of grid rows.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-rowspan)
     */
    public fun rowSpan(): Number

    /**
     * A builder for [GridLayoutElementProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param columnIndex The column index for the upper left corner of an element.
       */
      public fun columnIndex(columnIndex: Number)

      /**
       * @param columnSpan The width of a grid element expressed as a number of grid columns. 
       */
      public fun columnSpan(columnSpan: Number)

      /**
       * @param elementId A unique identifier for an element within a grid layout. 
       */
      public fun elementId(elementId: String)

      /**
       * @param elementType The type of element. 
       */
      public fun elementType(elementType: String)

      /**
       * @param rowIndex The row index for the upper left corner of an element.
       */
      public fun rowIndex(rowIndex: Number)

      /**
       * @param rowSpan The height of a grid element expressed as a number of grid rows. 
       */
      public fun rowSpan(rowSpan: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutElementProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutElementProperty.builder()

      /**
       * @param columnIndex The column index for the upper left corner of an element.
       */
      override fun columnIndex(columnIndex: Number) {
        cdkBuilder.columnIndex(columnIndex)
      }

      /**
       * @param columnSpan The width of a grid element expressed as a number of grid columns. 
       */
      override fun columnSpan(columnSpan: Number) {
        cdkBuilder.columnSpan(columnSpan)
      }

      /**
       * @param elementId A unique identifier for an element within a grid layout. 
       */
      override fun elementId(elementId: String) {
        cdkBuilder.elementId(elementId)
      }

      /**
       * @param elementType The type of element. 
       */
      override fun elementType(elementType: String) {
        cdkBuilder.elementType(elementType)
      }

      /**
       * @param rowIndex The row index for the upper left corner of an element.
       */
      override fun rowIndex(rowIndex: Number) {
        cdkBuilder.rowIndex(rowIndex)
      }

      /**
       * @param rowSpan The height of a grid element expressed as a number of grid rows. 
       */
      override fun rowSpan(rowSpan: Number) {
        cdkBuilder.rowSpan(rowSpan)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutElementProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutElementProperty,
    ) : GridLayoutElementProperty {
      /**
       * The column index for the upper left corner of an element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-columnindex)
       */
      override fun columnIndex(): Number? = unwrap(this).getColumnIndex()

      /**
       * The width of a grid element expressed as a number of grid columns.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-columnspan)
       */
      override fun columnSpan(): Number = unwrap(this).getColumnSpan()

      /**
       * A unique identifier for an element within a grid layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-elementid)
       */
      override fun elementId(): String = unwrap(this).getElementId()

      /**
       * The type of element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-elementtype)
       */
      override fun elementType(): String = unwrap(this).getElementType()

      /**
       * The row index for the upper left corner of an element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-rowindex)
       */
      override fun rowIndex(): Number? = unwrap(this).getRowIndex()

      /**
       * The height of a grid element expressed as a number of grid rows.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-rowspan)
       */
      override fun rowSpan(): Number = unwrap(this).getRowSpan()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GridLayoutElementProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutElementProperty):
          GridLayoutElementProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GridLayoutElementProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutElementProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PredefinedHierarchyProperty {
    /**
     * The list of columns that define the predefined hierarchy.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-predefinedhierarchy.html#cfn-quicksight-analysis-predefinedhierarchy-columns)
     */
    public fun columns(): Any

    /**
     * The option that determines the drill down filters for the predefined hierarchy.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-predefinedhierarchy.html#cfn-quicksight-analysis-predefinedhierarchy-drilldownfilters)
     */
    public fun drillDownFilters(): Any? = unwrap(this).getDrillDownFilters()

    /**
     * The hierarchy ID of the predefined hierarchy.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-predefinedhierarchy.html#cfn-quicksight-analysis-predefinedhierarchy-hierarchyid)
     */
    public fun hierarchyId(): String

    /**
     * A builder for [PredefinedHierarchyProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param columns The list of columns that define the predefined hierarchy. 
       */
      public fun columns(columns: IResolvable)

      /**
       * @param columns The list of columns that define the predefined hierarchy. 
       */
      public fun columns(columns: List<Any>)

      /**
       * @param columns The list of columns that define the predefined hierarchy. 
       */
      public fun columns(vararg columns: Any)

      /**
       * @param drillDownFilters The option that determines the drill down filters for the
       * predefined hierarchy.
       */
      public fun drillDownFilters(drillDownFilters: IResolvable)

      /**
       * @param drillDownFilters The option that determines the drill down filters for the
       * predefined hierarchy.
       */
      public fun drillDownFilters(drillDownFilters: List<Any>)

      /**
       * @param drillDownFilters The option that determines the drill down filters for the
       * predefined hierarchy.
       */
      public fun drillDownFilters(vararg drillDownFilters: Any)

      /**
       * @param hierarchyId The hierarchy ID of the predefined hierarchy. 
       */
      public fun hierarchyId(hierarchyId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PredefinedHierarchyProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PredefinedHierarchyProperty.builder()

      /**
       * @param columns The list of columns that define the predefined hierarchy. 
       */
      override fun columns(columns: IResolvable) {
        cdkBuilder.columns(columns.let(IResolvable::unwrap))
      }

      /**
       * @param columns The list of columns that define the predefined hierarchy. 
       */
      override fun columns(columns: List<Any>) {
        cdkBuilder.columns(columns)
      }

      /**
       * @param columns The list of columns that define the predefined hierarchy. 
       */
      override fun columns(vararg columns: Any): Unit = columns(columns.toList())

      /**
       * @param drillDownFilters The option that determines the drill down filters for the
       * predefined hierarchy.
       */
      override fun drillDownFilters(drillDownFilters: IResolvable) {
        cdkBuilder.drillDownFilters(drillDownFilters.let(IResolvable::unwrap))
      }

      /**
       * @param drillDownFilters The option that determines the drill down filters for the
       * predefined hierarchy.
       */
      override fun drillDownFilters(drillDownFilters: List<Any>) {
        cdkBuilder.drillDownFilters(drillDownFilters)
      }

      /**
       * @param drillDownFilters The option that determines the drill down filters for the
       * predefined hierarchy.
       */
      override fun drillDownFilters(vararg drillDownFilters: Any): Unit =
          drillDownFilters(drillDownFilters.toList())

      /**
       * @param hierarchyId The hierarchy ID of the predefined hierarchy. 
       */
      override fun hierarchyId(hierarchyId: String) {
        cdkBuilder.hierarchyId(hierarchyId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PredefinedHierarchyProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PredefinedHierarchyProperty,
    ) : PredefinedHierarchyProperty {
      /**
       * The list of columns that define the predefined hierarchy.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-predefinedhierarchy.html#cfn-quicksight-analysis-predefinedhierarchy-columns)
       */
      override fun columns(): Any = unwrap(this).getColumns()

      /**
       * The option that determines the drill down filters for the predefined hierarchy.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-predefinedhierarchy.html#cfn-quicksight-analysis-predefinedhierarchy-drilldownfilters)
       */
      override fun drillDownFilters(): Any? = unwrap(this).getDrillDownFilters()

      /**
       * The hierarchy ID of the predefined hierarchy.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-predefinedhierarchy.html#cfn-quicksight-analysis-predefinedhierarchy-hierarchyid)
       */
      override fun hierarchyId(): String = unwrap(this).getHierarchyId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PredefinedHierarchyProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PredefinedHierarchyProperty):
          PredefinedHierarchyProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PredefinedHierarchyProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PredefinedHierarchyProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface LineChartSortConfigurationProperty {
    /**
     * The limit on the number of categories that are displayed in a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-categoryitemslimitconfiguration)
     */
    public fun categoryItemsLimitConfiguration(): Any? =
        unwrap(this).getCategoryItemsLimitConfiguration()

    /**
     * The sort configuration of the category fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-categorysort)
     */
    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    /**
     * The limit on the number of lines that are displayed in a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-coloritemslimitconfiguration)
     */
    public fun colorItemsLimitConfiguration(): Any? = unwrap(this).getColorItemsLimitConfiguration()

    /**
     * The limit on the number of small multiples panels that are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-smallmultipleslimitconfiguration)
     */
    public fun smallMultiplesLimitConfiguration(): Any? =
        unwrap(this).getSmallMultiplesLimitConfiguration()

    /**
     * The sort configuration of the small multiples field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-smallmultiplessort)
     */
    public fun smallMultiplesSort(): Any? = unwrap(this).getSmallMultiplesSort()

    /**
     * A builder for [LineChartSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryItemsLimitConfiguration The limit on the number of categories that are
       * displayed in a line chart.
       */
      public fun categoryItemsLimitConfiguration(categoryItemsLimitConfiguration: IResolvable)

      /**
       * @param categoryItemsLimitConfiguration The limit on the number of categories that are
       * displayed in a line chart.
       */
      public
          fun categoryItemsLimitConfiguration(categoryItemsLimitConfiguration: ItemsLimitConfigurationProperty)

      /**
       * @param categoryItemsLimitConfiguration The limit on the number of categories that are
       * displayed in a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e13d2ff39d29ceab0b503e4ee9ee7d83a54bbd142b1211974fe38c7d036ae0a8")
      public
          fun categoryItemsLimitConfiguration(categoryItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      public fun categorySort(categorySort: IResolvable)

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      public fun categorySort(categorySort: List<Any>)

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      public fun categorySort(vararg categorySort: Any)

      /**
       * @param colorItemsLimitConfiguration The limit on the number of lines that are displayed in
       * a line chart.
       */
      public fun colorItemsLimitConfiguration(colorItemsLimitConfiguration: IResolvable)

      /**
       * @param colorItemsLimitConfiguration The limit on the number of lines that are displayed in
       * a line chart.
       */
      public
          fun colorItemsLimitConfiguration(colorItemsLimitConfiguration: ItemsLimitConfigurationProperty)

      /**
       * @param colorItemsLimitConfiguration The limit on the number of lines that are displayed in
       * a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("08ebc43a7d53f96eeb6e8c506c7ce86b36159ec82408bdea81a47cb20bff5ae5")
      public
          fun colorItemsLimitConfiguration(colorItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      public fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: IResolvable)

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      public
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty)

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("784be00314fde02477da71f0e735fb723bdc3e2c8bd2256c15bbbdd05561d7ee")
      public
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      public fun smallMultiplesSort(smallMultiplesSort: IResolvable)

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      public fun smallMultiplesSort(smallMultiplesSort: List<Any>)

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      public fun smallMultiplesSort(vararg smallMultiplesSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartSortConfigurationProperty.builder()

      /**
       * @param categoryItemsLimitConfiguration The limit on the number of categories that are
       * displayed in a line chart.
       */
      override fun categoryItemsLimitConfiguration(categoryItemsLimitConfiguration: IResolvable) {
        cdkBuilder.categoryItemsLimitConfiguration(categoryItemsLimitConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param categoryItemsLimitConfiguration The limit on the number of categories that are
       * displayed in a line chart.
       */
      override
          fun categoryItemsLimitConfiguration(categoryItemsLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimitConfiguration(categoryItemsLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param categoryItemsLimitConfiguration The limit on the number of categories that are
       * displayed in a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e13d2ff39d29ceab0b503e4ee9ee7d83a54bbd142b1211974fe38c7d036ae0a8")
      override
          fun categoryItemsLimitConfiguration(categoryItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          categoryItemsLimitConfiguration(ItemsLimitConfigurationProperty(categoryItemsLimitConfiguration))

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      /**
       * @param colorItemsLimitConfiguration The limit on the number of lines that are displayed in
       * a line chart.
       */
      override fun colorItemsLimitConfiguration(colorItemsLimitConfiguration: IResolvable) {
        cdkBuilder.colorItemsLimitConfiguration(colorItemsLimitConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param colorItemsLimitConfiguration The limit on the number of lines that are displayed in
       * a line chart.
       */
      override
          fun colorItemsLimitConfiguration(colorItemsLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.colorItemsLimitConfiguration(colorItemsLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param colorItemsLimitConfiguration The limit on the number of lines that are displayed in
       * a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("08ebc43a7d53f96eeb6e8c506c7ce86b36159ec82408bdea81a47cb20bff5ae5")
      override
          fun colorItemsLimitConfiguration(colorItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          colorItemsLimitConfiguration(ItemsLimitConfigurationProperty(colorItemsLimitConfiguration))

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      override fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: IResolvable) {
        cdkBuilder.smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      override
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("784be00314fde02477da71f0e735fb723bdc3e2c8bd2256c15bbbdd05561d7ee")
      override
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty(smallMultiplesLimitConfiguration))

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      override fun smallMultiplesSort(smallMultiplesSort: IResolvable) {
        cdkBuilder.smallMultiplesSort(smallMultiplesSort.let(IResolvable::unwrap))
      }

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      override fun smallMultiplesSort(smallMultiplesSort: List<Any>) {
        cdkBuilder.smallMultiplesSort(smallMultiplesSort)
      }

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      override fun smallMultiplesSort(vararg smallMultiplesSort: Any): Unit =
          smallMultiplesSort(smallMultiplesSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartSortConfigurationProperty,
    ) : LineChartSortConfigurationProperty {
      /**
       * The limit on the number of categories that are displayed in a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-categoryitemslimitconfiguration)
       */
      override fun categoryItemsLimitConfiguration(): Any? =
          unwrap(this).getCategoryItemsLimitConfiguration()

      /**
       * The sort configuration of the category fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-categorysort)
       */
      override fun categorySort(): Any? = unwrap(this).getCategorySort()

      /**
       * The limit on the number of lines that are displayed in a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-coloritemslimitconfiguration)
       */
      override fun colorItemsLimitConfiguration(): Any? =
          unwrap(this).getColorItemsLimitConfiguration()

      /**
       * The limit on the number of small multiples panels that are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-smallmultipleslimitconfiguration)
       */
      override fun smallMultiplesLimitConfiguration(): Any? =
          unwrap(this).getSmallMultiplesLimitConfiguration()

      /**
       * The sort configuration of the small multiples field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-smallmultiplessort)
       */
      override fun smallMultiplesSort(): Any? = unwrap(this).getSmallMultiplesSort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          LineChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartSortConfigurationProperty):
          LineChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartSortConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableFieldOptionsProperty {
    /**
     * The order of the field IDs that are configured as field options for a table visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoptions.html#cfn-quicksight-analysis-tablefieldoptions-order)
     */
    public fun order(): List<String> = unwrap(this).getOrder() ?: emptyList()

    /**
     * The settings for the pinned columns of a table visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoptions.html#cfn-quicksight-analysis-tablefieldoptions-pinnedfieldoptions)
     */
    public fun pinnedFieldOptions(): Any? = unwrap(this).getPinnedFieldOptions()

    /**
     * The field options to be configured to a table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoptions.html#cfn-quicksight-analysis-tablefieldoptions-selectedfieldoptions)
     */
    public fun selectedFieldOptions(): Any? = unwrap(this).getSelectedFieldOptions()

    /**
     * A builder for [TableFieldOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param order The order of the field IDs that are configured as field options for a table
       * visual.
       */
      public fun order(order: List<String>)

      /**
       * @param order The order of the field IDs that are configured as field options for a table
       * visual.
       */
      public fun order(vararg order: String)

      /**
       * @param pinnedFieldOptions The settings for the pinned columns of a table visual.
       */
      public fun pinnedFieldOptions(pinnedFieldOptions: IResolvable)

      /**
       * @param pinnedFieldOptions The settings for the pinned columns of a table visual.
       */
      public fun pinnedFieldOptions(pinnedFieldOptions: TablePinnedFieldOptionsProperty)

      /**
       * @param pinnedFieldOptions The settings for the pinned columns of a table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3954a439fc0f1bde5c0d0fbb43f1ebe2ea224c3e45d38b69cd90c397c06b531e")
      public
          fun pinnedFieldOptions(pinnedFieldOptions: TablePinnedFieldOptionsProperty.Builder.() -> Unit)

      /**
       * @param selectedFieldOptions The field options to be configured to a table.
       */
      public fun selectedFieldOptions(selectedFieldOptions: IResolvable)

      /**
       * @param selectedFieldOptions The field options to be configured to a table.
       */
      public fun selectedFieldOptions(selectedFieldOptions: List<Any>)

      /**
       * @param selectedFieldOptions The field options to be configured to a table.
       */
      public fun selectedFieldOptions(vararg selectedFieldOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldOptionsProperty.builder()

      /**
       * @param order The order of the field IDs that are configured as field options for a table
       * visual.
       */
      override fun order(order: List<String>) {
        cdkBuilder.order(order)
      }

      /**
       * @param order The order of the field IDs that are configured as field options for a table
       * visual.
       */
      override fun order(vararg order: String): Unit = order(order.toList())

      /**
       * @param pinnedFieldOptions The settings for the pinned columns of a table visual.
       */
      override fun pinnedFieldOptions(pinnedFieldOptions: IResolvable) {
        cdkBuilder.pinnedFieldOptions(pinnedFieldOptions.let(IResolvable::unwrap))
      }

      /**
       * @param pinnedFieldOptions The settings for the pinned columns of a table visual.
       */
      override fun pinnedFieldOptions(pinnedFieldOptions: TablePinnedFieldOptionsProperty) {
        cdkBuilder.pinnedFieldOptions(pinnedFieldOptions.let(TablePinnedFieldOptionsProperty::unwrap))
      }

      /**
       * @param pinnedFieldOptions The settings for the pinned columns of a table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3954a439fc0f1bde5c0d0fbb43f1ebe2ea224c3e45d38b69cd90c397c06b531e")
      override
          fun pinnedFieldOptions(pinnedFieldOptions: TablePinnedFieldOptionsProperty.Builder.() -> Unit):
          Unit = pinnedFieldOptions(TablePinnedFieldOptionsProperty(pinnedFieldOptions))

      /**
       * @param selectedFieldOptions The field options to be configured to a table.
       */
      override fun selectedFieldOptions(selectedFieldOptions: IResolvable) {
        cdkBuilder.selectedFieldOptions(selectedFieldOptions.let(IResolvable::unwrap))
      }

      /**
       * @param selectedFieldOptions The field options to be configured to a table.
       */
      override fun selectedFieldOptions(selectedFieldOptions: List<Any>) {
        cdkBuilder.selectedFieldOptions(selectedFieldOptions)
      }

      /**
       * @param selectedFieldOptions The field options to be configured to a table.
       */
      override fun selectedFieldOptions(vararg selectedFieldOptions: Any): Unit =
          selectedFieldOptions(selectedFieldOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldOptionsProperty,
    ) : TableFieldOptionsProperty {
      /**
       * The order of the field IDs that are configured as field options for a table visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoptions.html#cfn-quicksight-analysis-tablefieldoptions-order)
       */
      override fun order(): List<String> = unwrap(this).getOrder() ?: emptyList()

      /**
       * The settings for the pinned columns of a table visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoptions.html#cfn-quicksight-analysis-tablefieldoptions-pinnedfieldoptions)
       */
      override fun pinnedFieldOptions(): Any? = unwrap(this).getPinnedFieldOptions()

      /**
       * The field options to be configured to a table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoptions.html#cfn-quicksight-analysis-tablefieldoptions-selectedfieldoptions)
       */
      override fun selectedFieldOptions(): Any? = unwrap(this).getSelectedFieldOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TableFieldOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldOptionsProperty):
          TableFieldOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ParameterDeclarationProperty {
    /**
     * A parameter declaration for the `DateTime` data type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html#cfn-quicksight-analysis-parameterdeclaration-datetimeparameterdeclaration)
     */
    public fun dateTimeParameterDeclaration(): Any? = unwrap(this).getDateTimeParameterDeclaration()

    /**
     * A parameter declaration for the `Decimal` data type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html#cfn-quicksight-analysis-parameterdeclaration-decimalparameterdeclaration)
     */
    public fun decimalParameterDeclaration(): Any? = unwrap(this).getDecimalParameterDeclaration()

    /**
     * A parameter declaration for the `Integer` data type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html#cfn-quicksight-analysis-parameterdeclaration-integerparameterdeclaration)
     */
    public fun integerParameterDeclaration(): Any? = unwrap(this).getIntegerParameterDeclaration()

    /**
     * A parameter declaration for the `String` data type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html#cfn-quicksight-analysis-parameterdeclaration-stringparameterdeclaration)
     */
    public fun stringParameterDeclaration(): Any? = unwrap(this).getStringParameterDeclaration()

    /**
     * A builder for [ParameterDeclarationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dateTimeParameterDeclaration A parameter declaration for the `DateTime` data type.
       */
      public fun dateTimeParameterDeclaration(dateTimeParameterDeclaration: IResolvable)

      /**
       * @param dateTimeParameterDeclaration A parameter declaration for the `DateTime` data type.
       */
      public
          fun dateTimeParameterDeclaration(dateTimeParameterDeclaration: DateTimeParameterDeclarationProperty)

      /**
       * @param dateTimeParameterDeclaration A parameter declaration for the `DateTime` data type.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f6dafbe1cb28b4d1eff6c26b0712b191c8384ec6bb2ea448362447aa9860ff33")
      public
          fun dateTimeParameterDeclaration(dateTimeParameterDeclaration: DateTimeParameterDeclarationProperty.Builder.() -> Unit)

      /**
       * @param decimalParameterDeclaration A parameter declaration for the `Decimal` data type.
       */
      public fun decimalParameterDeclaration(decimalParameterDeclaration: IResolvable)

      /**
       * @param decimalParameterDeclaration A parameter declaration for the `Decimal` data type.
       */
      public
          fun decimalParameterDeclaration(decimalParameterDeclaration: DecimalParameterDeclarationProperty)

      /**
       * @param decimalParameterDeclaration A parameter declaration for the `Decimal` data type.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e702e873321e5a9fb36eaf8a768d10e3fc565a2da84b39e57374fbd303ddaa78")
      public
          fun decimalParameterDeclaration(decimalParameterDeclaration: DecimalParameterDeclarationProperty.Builder.() -> Unit)

      /**
       * @param integerParameterDeclaration A parameter declaration for the `Integer` data type.
       */
      public fun integerParameterDeclaration(integerParameterDeclaration: IResolvable)

      /**
       * @param integerParameterDeclaration A parameter declaration for the `Integer` data type.
       */
      public
          fun integerParameterDeclaration(integerParameterDeclaration: IntegerParameterDeclarationProperty)

      /**
       * @param integerParameterDeclaration A parameter declaration for the `Integer` data type.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de6c2148bd9e751d5bcd486da0de435b84cf72c6e3ece32c23fc61f70372423c")
      public
          fun integerParameterDeclaration(integerParameterDeclaration: IntegerParameterDeclarationProperty.Builder.() -> Unit)

      /**
       * @param stringParameterDeclaration A parameter declaration for the `String` data type.
       */
      public fun stringParameterDeclaration(stringParameterDeclaration: IResolvable)

      /**
       * @param stringParameterDeclaration A parameter declaration for the `String` data type.
       */
      public
          fun stringParameterDeclaration(stringParameterDeclaration: StringParameterDeclarationProperty)

      /**
       * @param stringParameterDeclaration A parameter declaration for the `String` data type.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0a6a6c8ef0cb0ce59ac4dec4a51da6a8af3ade24367a8da9dc9785176e7e1d13")
      public
          fun stringParameterDeclaration(stringParameterDeclaration: StringParameterDeclarationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDeclarationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDeclarationProperty.builder()

      /**
       * @param dateTimeParameterDeclaration A parameter declaration for the `DateTime` data type.
       */
      override fun dateTimeParameterDeclaration(dateTimeParameterDeclaration: IResolvable) {
        cdkBuilder.dateTimeParameterDeclaration(dateTimeParameterDeclaration.let(IResolvable::unwrap))
      }

      /**
       * @param dateTimeParameterDeclaration A parameter declaration for the `DateTime` data type.
       */
      override
          fun dateTimeParameterDeclaration(dateTimeParameterDeclaration: DateTimeParameterDeclarationProperty) {
        cdkBuilder.dateTimeParameterDeclaration(dateTimeParameterDeclaration.let(DateTimeParameterDeclarationProperty::unwrap))
      }

      /**
       * @param dateTimeParameterDeclaration A parameter declaration for the `DateTime` data type.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f6dafbe1cb28b4d1eff6c26b0712b191c8384ec6bb2ea448362447aa9860ff33")
      override
          fun dateTimeParameterDeclaration(dateTimeParameterDeclaration: DateTimeParameterDeclarationProperty.Builder.() -> Unit):
          Unit =
          dateTimeParameterDeclaration(DateTimeParameterDeclarationProperty(dateTimeParameterDeclaration))

      /**
       * @param decimalParameterDeclaration A parameter declaration for the `Decimal` data type.
       */
      override fun decimalParameterDeclaration(decimalParameterDeclaration: IResolvable) {
        cdkBuilder.decimalParameterDeclaration(decimalParameterDeclaration.let(IResolvable::unwrap))
      }

      /**
       * @param decimalParameterDeclaration A parameter declaration for the `Decimal` data type.
       */
      override
          fun decimalParameterDeclaration(decimalParameterDeclaration: DecimalParameterDeclarationProperty) {
        cdkBuilder.decimalParameterDeclaration(decimalParameterDeclaration.let(DecimalParameterDeclarationProperty::unwrap))
      }

      /**
       * @param decimalParameterDeclaration A parameter declaration for the `Decimal` data type.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e702e873321e5a9fb36eaf8a768d10e3fc565a2da84b39e57374fbd303ddaa78")
      override
          fun decimalParameterDeclaration(decimalParameterDeclaration: DecimalParameterDeclarationProperty.Builder.() -> Unit):
          Unit =
          decimalParameterDeclaration(DecimalParameterDeclarationProperty(decimalParameterDeclaration))

      /**
       * @param integerParameterDeclaration A parameter declaration for the `Integer` data type.
       */
      override fun integerParameterDeclaration(integerParameterDeclaration: IResolvable) {
        cdkBuilder.integerParameterDeclaration(integerParameterDeclaration.let(IResolvable::unwrap))
      }

      /**
       * @param integerParameterDeclaration A parameter declaration for the `Integer` data type.
       */
      override
          fun integerParameterDeclaration(integerParameterDeclaration: IntegerParameterDeclarationProperty) {
        cdkBuilder.integerParameterDeclaration(integerParameterDeclaration.let(IntegerParameterDeclarationProperty::unwrap))
      }

      /**
       * @param integerParameterDeclaration A parameter declaration for the `Integer` data type.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de6c2148bd9e751d5bcd486da0de435b84cf72c6e3ece32c23fc61f70372423c")
      override
          fun integerParameterDeclaration(integerParameterDeclaration: IntegerParameterDeclarationProperty.Builder.() -> Unit):
          Unit =
          integerParameterDeclaration(IntegerParameterDeclarationProperty(integerParameterDeclaration))

      /**
       * @param stringParameterDeclaration A parameter declaration for the `String` data type.
       */
      override fun stringParameterDeclaration(stringParameterDeclaration: IResolvable) {
        cdkBuilder.stringParameterDeclaration(stringParameterDeclaration.let(IResolvable::unwrap))
      }

      /**
       * @param stringParameterDeclaration A parameter declaration for the `String` data type.
       */
      override
          fun stringParameterDeclaration(stringParameterDeclaration: StringParameterDeclarationProperty) {
        cdkBuilder.stringParameterDeclaration(stringParameterDeclaration.let(StringParameterDeclarationProperty::unwrap))
      }

      /**
       * @param stringParameterDeclaration A parameter declaration for the `String` data type.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0a6a6c8ef0cb0ce59ac4dec4a51da6a8af3ade24367a8da9dc9785176e7e1d13")
      override
          fun stringParameterDeclaration(stringParameterDeclaration: StringParameterDeclarationProperty.Builder.() -> Unit):
          Unit =
          stringParameterDeclaration(StringParameterDeclarationProperty(stringParameterDeclaration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDeclarationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDeclarationProperty,
    ) : ParameterDeclarationProperty {
      /**
       * A parameter declaration for the `DateTime` data type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html#cfn-quicksight-analysis-parameterdeclaration-datetimeparameterdeclaration)
       */
      override fun dateTimeParameterDeclaration(): Any? =
          unwrap(this).getDateTimeParameterDeclaration()

      /**
       * A parameter declaration for the `Decimal` data type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html#cfn-quicksight-analysis-parameterdeclaration-decimalparameterdeclaration)
       */
      override fun decimalParameterDeclaration(): Any? =
          unwrap(this).getDecimalParameterDeclaration()

      /**
       * A parameter declaration for the `Integer` data type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html#cfn-quicksight-analysis-parameterdeclaration-integerparameterdeclaration)
       */
      override fun integerParameterDeclaration(): Any? =
          unwrap(this).getIntegerParameterDeclaration()

      /**
       * A parameter declaration for the `String` data type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html#cfn-quicksight-analysis-parameterdeclaration-stringparameterdeclaration)
       */
      override fun stringParameterDeclaration(): Any? = unwrap(this).getStringParameterDeclaration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ParameterDeclarationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDeclarationProperty):
          ParameterDeclarationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterDeclarationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDeclarationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GridLayoutConfigurationProperty {
    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutconfiguration.html#cfn-quicksight-analysis-gridlayoutconfiguration-canvassizeoptions)
     */
    public fun canvasSizeOptions(): Any? = unwrap(this).getCanvasSizeOptions()

    /**
     * The elements that are included in a grid layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutconfiguration.html#cfn-quicksight-analysis-gridlayoutconfiguration-elements)
     */
    public fun elements(): Any

    /**
     * A builder for [GridLayoutConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param canvasSizeOptions the value to be set.
       */
      public fun canvasSizeOptions(canvasSizeOptions: IResolvable)

      /**
       * @param canvasSizeOptions the value to be set.
       */
      public fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty)

      /**
       * @param canvasSizeOptions the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3b9d05cee78c4b7d33a8355cce8bb9acb85a05c9ffce9b45b535b981728860d8")
      public
          fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty.Builder.() -> Unit)

      /**
       * @param elements The elements that are included in a grid layout. 
       */
      public fun elements(elements: IResolvable)

      /**
       * @param elements The elements that are included in a grid layout. 
       */
      public fun elements(elements: List<Any>)

      /**
       * @param elements The elements that are included in a grid layout. 
       */
      public fun elements(vararg elements: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutConfigurationProperty.builder()

      /**
       * @param canvasSizeOptions the value to be set.
       */
      override fun canvasSizeOptions(canvasSizeOptions: IResolvable) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(IResolvable::unwrap))
      }

      /**
       * @param canvasSizeOptions the value to be set.
       */
      override fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(GridLayoutCanvasSizeOptionsProperty::unwrap))
      }

      /**
       * @param canvasSizeOptions the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3b9d05cee78c4b7d33a8355cce8bb9acb85a05c9ffce9b45b535b981728860d8")
      override
          fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit = canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty(canvasSizeOptions))

      /**
       * @param elements The elements that are included in a grid layout. 
       */
      override fun elements(elements: IResolvable) {
        cdkBuilder.elements(elements.let(IResolvable::unwrap))
      }

      /**
       * @param elements The elements that are included in a grid layout. 
       */
      override fun elements(elements: List<Any>) {
        cdkBuilder.elements(elements)
      }

      /**
       * @param elements The elements that are included in a grid layout. 
       */
      override fun elements(vararg elements: Any): Unit = elements(elements.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutConfigurationProperty,
    ) : GridLayoutConfigurationProperty {
      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutconfiguration.html#cfn-quicksight-analysis-gridlayoutconfiguration-canvassizeoptions)
       */
      override fun canvasSizeOptions(): Any? = unwrap(this).getCanvasSizeOptions()

      /**
       * The elements that are included in a grid layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutconfiguration.html#cfn-quicksight-analysis-gridlayoutconfiguration-elements)
       */
      override fun elements(): Any = unwrap(this).getElements()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GridLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutConfigurationProperty):
          GridLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GridLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableFieldWellsProperty {
    /**
     * The aggregated field well for the pivot table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldwells.html#cfn-quicksight-analysis-pivottablefieldwells-pivottableaggregatedfieldwells)
     */
    public fun pivotTableAggregatedFieldWells(): Any? =
        unwrap(this).getPivotTableAggregatedFieldWells()

    /**
     * A builder for [PivotTableFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param pivotTableAggregatedFieldWells The aggregated field well for the pivot table.
       */
      public fun pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells: IResolvable)

      /**
       * @param pivotTableAggregatedFieldWells The aggregated field well for the pivot table.
       */
      public
          fun pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells: PivotTableAggregatedFieldWellsProperty)

      /**
       * @param pivotTableAggregatedFieldWells The aggregated field well for the pivot table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e44210d357eab01e741da90054f517a50062c4d5df8044e801a9ce99a1c7c82a")
      public
          fun pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells: PivotTableAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldWellsProperty.builder()

      /**
       * @param pivotTableAggregatedFieldWells The aggregated field well for the pivot table.
       */
      override fun pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells: IResolvable) {
        cdkBuilder.pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param pivotTableAggregatedFieldWells The aggregated field well for the pivot table.
       */
      override
          fun pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells: PivotTableAggregatedFieldWellsProperty) {
        cdkBuilder.pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells.let(PivotTableAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param pivotTableAggregatedFieldWells The aggregated field well for the pivot table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e44210d357eab01e741da90054f517a50062c4d5df8044e801a9ce99a1c7c82a")
      override
          fun pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells: PivotTableAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          pivotTableAggregatedFieldWells(PivotTableAggregatedFieldWellsProperty(pivotTableAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldWellsProperty,
    ) : PivotTableFieldWellsProperty {
      /**
       * The aggregated field well for the pivot table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldwells.html#cfn-quicksight-analysis-pivottablefieldwells-pivottableaggregatedfieldwells)
       */
      override fun pivotTableAggregatedFieldWells(): Any? =
          unwrap(this).getPivotTableAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldWellsProperty):
          PivotTableFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface SheetDefinitionProperty {
    /**
     * The layout content type of the sheet. Choose one of the following options:.
     *
     * * `PAGINATED` : Creates a sheet for a paginated report.
     * * `INTERACTIVE` : Creates a sheet for an interactive dashboard.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-contenttype)
     */
    public fun contentType(): String? = unwrap(this).getContentType()

    /**
     * A description of the sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-description)
     */
    public fun description(): String? = unwrap(this).getDescription()

    /**
     * The list of filter controls that are on a sheet.
     *
     * For more information, see [Adding filter controls to analysis
     * sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-filtercontrols)
     */
    public fun filterControls(): Any? = unwrap(this).getFilterControls()

    /**
     * Layouts define how the components of a sheet are arranged.
     *
     * For more information, see [Types of
     * layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-layouts)
     */
    public fun layouts(): Any? = unwrap(this).getLayouts()

    /**
     * The name of the sheet.
     *
     * This name is displayed on the sheet's tab in the Amazon QuickSight console.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * The list of parameter controls that are on a sheet.
     *
     * For more information, see [Using a Control with a Parameter in Amazon
     * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-parametercontrols)
     */
    public fun parameterControls(): Any? = unwrap(this).getParameterControls()

    /**
     * The control layouts of the sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-sheetcontrollayouts)
     */
    public fun sheetControlLayouts(): Any? = unwrap(this).getSheetControlLayouts()

    /**
     * The unique identifier of a sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-sheetid)
     */
    public fun sheetId(): String

    /**
     * The text boxes that are on a sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-textboxes)
     */
    public fun textBoxes(): Any? = unwrap(this).getTextBoxes()

    /**
     * The title of the sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-title)
     */
    public fun title(): String? = unwrap(this).getTitle()

    /**
     * A list of the visuals that are on a sheet.
     *
     * Visual placement is determined by the layout of the sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-visuals)
     */
    public fun visuals(): Any? = unwrap(this).getVisuals()

    /**
     * A builder for [SheetDefinitionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param contentType The layout content type of the sheet. Choose one of the following
       * options:.
       * * `PAGINATED` : Creates a sheet for a paginated report.
       * * `INTERACTIVE` : Creates a sheet for an interactive dashboard.
       */
      public fun contentType(contentType: String)

      /**
       * @param description A description of the sheet.
       */
      public fun description(description: String)

      /**
       * @param filterControls The list of filter controls that are on a sheet.
       * For more information, see [Adding filter controls to analysis
       * sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun filterControls(filterControls: IResolvable)

      /**
       * @param filterControls The list of filter controls that are on a sheet.
       * For more information, see [Adding filter controls to analysis
       * sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun filterControls(filterControls: List<Any>)

      /**
       * @param filterControls The list of filter controls that are on a sheet.
       * For more information, see [Adding filter controls to analysis
       * sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun filterControls(vararg filterControls: Any)

      /**
       * @param layouts Layouts define how the components of a sheet are arranged.
       * For more information, see [Types of
       * layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun layouts(layouts: IResolvable)

      /**
       * @param layouts Layouts define how the components of a sheet are arranged.
       * For more information, see [Types of
       * layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun layouts(layouts: List<Any>)

      /**
       * @param layouts Layouts define how the components of a sheet are arranged.
       * For more information, see [Types of
       * layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun layouts(vararg layouts: Any)

      /**
       * @param name The name of the sheet.
       * This name is displayed on the sheet's tab in the Amazon QuickSight console.
       */
      public fun name(name: String)

      /**
       * @param parameterControls The list of parameter controls that are on a sheet.
       * For more information, see [Using a Control with a Parameter in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in
       * the *Amazon QuickSight User Guide* .
       */
      public fun parameterControls(parameterControls: IResolvable)

      /**
       * @param parameterControls The list of parameter controls that are on a sheet.
       * For more information, see [Using a Control with a Parameter in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in
       * the *Amazon QuickSight User Guide* .
       */
      public fun parameterControls(parameterControls: List<Any>)

      /**
       * @param parameterControls The list of parameter controls that are on a sheet.
       * For more information, see [Using a Control with a Parameter in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in
       * the *Amazon QuickSight User Guide* .
       */
      public fun parameterControls(vararg parameterControls: Any)

      /**
       * @param sheetControlLayouts The control layouts of the sheet.
       */
      public fun sheetControlLayouts(sheetControlLayouts: IResolvable)

      /**
       * @param sheetControlLayouts The control layouts of the sheet.
       */
      public fun sheetControlLayouts(sheetControlLayouts: List<Any>)

      /**
       * @param sheetControlLayouts The control layouts of the sheet.
       */
      public fun sheetControlLayouts(vararg sheetControlLayouts: Any)

      /**
       * @param sheetId The unique identifier of a sheet. 
       */
      public fun sheetId(sheetId: String)

      /**
       * @param textBoxes The text boxes that are on a sheet.
       */
      public fun textBoxes(textBoxes: IResolvable)

      /**
       * @param textBoxes The text boxes that are on a sheet.
       */
      public fun textBoxes(textBoxes: List<Any>)

      /**
       * @param textBoxes The text boxes that are on a sheet.
       */
      public fun textBoxes(vararg textBoxes: Any)

      /**
       * @param title The title of the sheet.
       */
      public fun title(title: String)

      /**
       * @param visuals A list of the visuals that are on a sheet.
       * Visual placement is determined by the layout of the sheet.
       */
      public fun visuals(visuals: IResolvable)

      /**
       * @param visuals A list of the visuals that are on a sheet.
       * Visual placement is determined by the layout of the sheet.
       */
      public fun visuals(visuals: List<Any>)

      /**
       * @param visuals A list of the visuals that are on a sheet.
       * Visual placement is determined by the layout of the sheet.
       */
      public fun visuals(vararg visuals: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetDefinitionProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetDefinitionProperty.builder()

      /**
       * @param contentType The layout content type of the sheet. Choose one of the following
       * options:.
       * * `PAGINATED` : Creates a sheet for a paginated report.
       * * `INTERACTIVE` : Creates a sheet for an interactive dashboard.
       */
      override fun contentType(contentType: String) {
        cdkBuilder.contentType(contentType)
      }

      /**
       * @param description A description of the sheet.
       */
      override fun description(description: String) {
        cdkBuilder.description(description)
      }

      /**
       * @param filterControls The list of filter controls that are on a sheet.
       * For more information, see [Adding filter controls to analysis
       * sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun filterControls(filterControls: IResolvable) {
        cdkBuilder.filterControls(filterControls.let(IResolvable::unwrap))
      }

      /**
       * @param filterControls The list of filter controls that are on a sheet.
       * For more information, see [Adding filter controls to analysis
       * sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun filterControls(filterControls: List<Any>) {
        cdkBuilder.filterControls(filterControls)
      }

      /**
       * @param filterControls The list of filter controls that are on a sheet.
       * For more information, see [Adding filter controls to analysis
       * sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun filterControls(vararg filterControls: Any): Unit =
          filterControls(filterControls.toList())

      /**
       * @param layouts Layouts define how the components of a sheet are arranged.
       * For more information, see [Types of
       * layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun layouts(layouts: IResolvable) {
        cdkBuilder.layouts(layouts.let(IResolvable::unwrap))
      }

      /**
       * @param layouts Layouts define how the components of a sheet are arranged.
       * For more information, see [Types of
       * layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun layouts(layouts: List<Any>) {
        cdkBuilder.layouts(layouts)
      }

      /**
       * @param layouts Layouts define how the components of a sheet are arranged.
       * For more information, see [Types of
       * layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun layouts(vararg layouts: Any): Unit = layouts(layouts.toList())

      /**
       * @param name The name of the sheet.
       * This name is displayed on the sheet's tab in the Amazon QuickSight console.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param parameterControls The list of parameter controls that are on a sheet.
       * For more information, see [Using a Control with a Parameter in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in
       * the *Amazon QuickSight User Guide* .
       */
      override fun parameterControls(parameterControls: IResolvable) {
        cdkBuilder.parameterControls(parameterControls.let(IResolvable::unwrap))
      }

      /**
       * @param parameterControls The list of parameter controls that are on a sheet.
       * For more information, see [Using a Control with a Parameter in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in
       * the *Amazon QuickSight User Guide* .
       */
      override fun parameterControls(parameterControls: List<Any>) {
        cdkBuilder.parameterControls(parameterControls)
      }

      /**
       * @param parameterControls The list of parameter controls that are on a sheet.
       * For more information, see [Using a Control with a Parameter in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in
       * the *Amazon QuickSight User Guide* .
       */
      override fun parameterControls(vararg parameterControls: Any): Unit =
          parameterControls(parameterControls.toList())

      /**
       * @param sheetControlLayouts The control layouts of the sheet.
       */
      override fun sheetControlLayouts(sheetControlLayouts: IResolvable) {
        cdkBuilder.sheetControlLayouts(sheetControlLayouts.let(IResolvable::unwrap))
      }

      /**
       * @param sheetControlLayouts The control layouts of the sheet.
       */
      override fun sheetControlLayouts(sheetControlLayouts: List<Any>) {
        cdkBuilder.sheetControlLayouts(sheetControlLayouts)
      }

      /**
       * @param sheetControlLayouts The control layouts of the sheet.
       */
      override fun sheetControlLayouts(vararg sheetControlLayouts: Any): Unit =
          sheetControlLayouts(sheetControlLayouts.toList())

      /**
       * @param sheetId The unique identifier of a sheet. 
       */
      override fun sheetId(sheetId: String) {
        cdkBuilder.sheetId(sheetId)
      }

      /**
       * @param textBoxes The text boxes that are on a sheet.
       */
      override fun textBoxes(textBoxes: IResolvable) {
        cdkBuilder.textBoxes(textBoxes.let(IResolvable::unwrap))
      }

      /**
       * @param textBoxes The text boxes that are on a sheet.
       */
      override fun textBoxes(textBoxes: List<Any>) {
        cdkBuilder.textBoxes(textBoxes)
      }

      /**
       * @param textBoxes The text boxes that are on a sheet.
       */
      override fun textBoxes(vararg textBoxes: Any): Unit = textBoxes(textBoxes.toList())

      /**
       * @param title The title of the sheet.
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      /**
       * @param visuals A list of the visuals that are on a sheet.
       * Visual placement is determined by the layout of the sheet.
       */
      override fun visuals(visuals: IResolvable) {
        cdkBuilder.visuals(visuals.let(IResolvable::unwrap))
      }

      /**
       * @param visuals A list of the visuals that are on a sheet.
       * Visual placement is determined by the layout of the sheet.
       */
      override fun visuals(visuals: List<Any>) {
        cdkBuilder.visuals(visuals)
      }

      /**
       * @param visuals A list of the visuals that are on a sheet.
       * Visual placement is determined by the layout of the sheet.
       */
      override fun visuals(vararg visuals: Any): Unit = visuals(visuals.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetDefinitionProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetDefinitionProperty,
    ) : SheetDefinitionProperty {
      /**
       * The layout content type of the sheet. Choose one of the following options:.
       *
       * * `PAGINATED` : Creates a sheet for a paginated report.
       * * `INTERACTIVE` : Creates a sheet for an interactive dashboard.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-contenttype)
       */
      override fun contentType(): String? = unwrap(this).getContentType()

      /**
       * A description of the sheet.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-description)
       */
      override fun description(): String? = unwrap(this).getDescription()

      /**
       * The list of filter controls that are on a sheet.
       *
       * For more information, see [Adding filter controls to analysis
       * sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the
       * *Amazon QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-filtercontrols)
       */
      override fun filterControls(): Any? = unwrap(this).getFilterControls()

      /**
       * Layouts define how the components of a sheet are arranged.
       *
       * For more information, see [Types of
       * layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the
       * *Amazon QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-layouts)
       */
      override fun layouts(): Any? = unwrap(this).getLayouts()

      /**
       * The name of the sheet.
       *
       * This name is displayed on the sheet's tab in the Amazon QuickSight console.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-name)
       */
      override fun name(): String? = unwrap(this).getName()

      /**
       * The list of parameter controls that are on a sheet.
       *
       * For more information, see [Using a Control with a Parameter in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in
       * the *Amazon QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-parametercontrols)
       */
      override fun parameterControls(): Any? = unwrap(this).getParameterControls()

      /**
       * The control layouts of the sheet.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-sheetcontrollayouts)
       */
      override fun sheetControlLayouts(): Any? = unwrap(this).getSheetControlLayouts()

      /**
       * The unique identifier of a sheet.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-sheetid)
       */
      override fun sheetId(): String = unwrap(this).getSheetId()

      /**
       * The text boxes that are on a sheet.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-textboxes)
       */
      override fun textBoxes(): Any? = unwrap(this).getTextBoxes()

      /**
       * The title of the sheet.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-title)
       */
      override fun title(): String? = unwrap(this).getTitle()

      /**
       * A list of the visuals that are on a sheet.
       *
       * Visual placement is determined by the layout of the sheet.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-visuals)
       */
      override fun visuals(): Any? = unwrap(this).getVisuals()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SheetDefinitionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetDefinitionProperty):
          SheetDefinitionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetDefinitionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetDefinitionProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface AxisDisplayMinMaxRangeProperty {
    /**
     * The maximum setup for an axis display range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayminmaxrange.html#cfn-quicksight-analysis-axisdisplayminmaxrange-maximum)
     */
    public fun maximum(): Number? = unwrap(this).getMaximum()

    /**
     * The minimum setup for an axis display range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayminmaxrange.html#cfn-quicksight-analysis-axisdisplayminmaxrange-minimum)
     */
    public fun minimum(): Number? = unwrap(this).getMinimum()

    /**
     * A builder for [AxisDisplayMinMaxRangeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param maximum The maximum setup for an axis display range.
       */
      public fun maximum(maximum: Number)

      /**
       * @param minimum The minimum setup for an axis display range.
       */
      public fun minimum(minimum: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayMinMaxRangeProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayMinMaxRangeProperty.builder()

      /**
       * @param maximum The maximum setup for an axis display range.
       */
      override fun maximum(maximum: Number) {
        cdkBuilder.maximum(maximum)
      }

      /**
       * @param minimum The minimum setup for an axis display range.
       */
      override fun minimum(minimum: Number) {
        cdkBuilder.minimum(minimum)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayMinMaxRangeProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayMinMaxRangeProperty,
    ) : AxisDisplayMinMaxRangeProperty {
      /**
       * The maximum setup for an axis display range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayminmaxrange.html#cfn-quicksight-analysis-axisdisplayminmaxrange-maximum)
       */
      override fun maximum(): Number? = unwrap(this).getMaximum()

      /**
       * The minimum setup for an axis display range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayminmaxrange.html#cfn-quicksight-analysis-axisdisplayminmaxrange-minimum)
       */
      override fun minimum(): Number? = unwrap(this).getMinimum()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AxisDisplayMinMaxRangeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayMinMaxRangeProperty):
          AxisDisplayMinMaxRangeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisDisplayMinMaxRangeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayMinMaxRangeProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TotalAggregationFunctionProperty {
    /**
     * A built in aggregation function for total values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationfunction.html#cfn-quicksight-analysis-totalaggregationfunction-simpletotalaggregationfunction)
     */
    public fun simpleTotalAggregationFunction(): String? =
        unwrap(this).getSimpleTotalAggregationFunction()

    /**
     * A builder for [TotalAggregationFunctionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param simpleTotalAggregationFunction A built in aggregation function for total values.
       */
      public fun simpleTotalAggregationFunction(simpleTotalAggregationFunction: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationFunctionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationFunctionProperty.builder()

      /**
       * @param simpleTotalAggregationFunction A built in aggregation function for total values.
       */
      override fun simpleTotalAggregationFunction(simpleTotalAggregationFunction: String) {
        cdkBuilder.simpleTotalAggregationFunction(simpleTotalAggregationFunction)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationFunctionProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationFunctionProperty,
    ) : TotalAggregationFunctionProperty {
      /**
       * A built in aggregation function for total values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationfunction.html#cfn-quicksight-analysis-totalaggregationfunction-simpletotalaggregationfunction)
       */
      override fun simpleTotalAggregationFunction(): String? =
          unwrap(this).getSimpleTotalAggregationFunction()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TotalAggregationFunctionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationFunctionProperty):
          TotalAggregationFunctionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TotalAggregationFunctionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationFunctionProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TreeMapAggregatedFieldWellsProperty {
    /**
     * The color field well of a tree map.
     *
     * Values are grouped by aggregations based on group by fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapaggregatedfieldwells.html#cfn-quicksight-analysis-treemapaggregatedfieldwells-colors)
     */
    public fun colors(): Any? = unwrap(this).getColors()

    /**
     * The group by field well of a tree map.
     *
     * Values are grouped based on group by fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapaggregatedfieldwells.html#cfn-quicksight-analysis-treemapaggregatedfieldwells-groups)
     */
    public fun groups(): Any? = unwrap(this).getGroups()

    /**
     * The size field well of a tree map.
     *
     * Values are aggregated based on group by fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapaggregatedfieldwells.html#cfn-quicksight-analysis-treemapaggregatedfieldwells-sizes)
     */
    public fun sizes(): Any? = unwrap(this).getSizes()

    /**
     * A builder for [TreeMapAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param colors The color field well of a tree map.
       * Values are grouped by aggregations based on group by fields.
       */
      public fun colors(colors: IResolvable)

      /**
       * @param colors The color field well of a tree map.
       * Values are grouped by aggregations based on group by fields.
       */
      public fun colors(colors: List<Any>)

      /**
       * @param colors The color field well of a tree map.
       * Values are grouped by aggregations based on group by fields.
       */
      public fun colors(vararg colors: Any)

      /**
       * @param groups The group by field well of a tree map.
       * Values are grouped based on group by fields.
       */
      public fun groups(groups: IResolvable)

      /**
       * @param groups The group by field well of a tree map.
       * Values are grouped based on group by fields.
       */
      public fun groups(groups: List<Any>)

      /**
       * @param groups The group by field well of a tree map.
       * Values are grouped based on group by fields.
       */
      public fun groups(vararg groups: Any)

      /**
       * @param sizes The size field well of a tree map.
       * Values are aggregated based on group by fields.
       */
      public fun sizes(sizes: IResolvable)

      /**
       * @param sizes The size field well of a tree map.
       * Values are aggregated based on group by fields.
       */
      public fun sizes(sizes: List<Any>)

      /**
       * @param sizes The size field well of a tree map.
       * Values are aggregated based on group by fields.
       */
      public fun sizes(vararg sizes: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapAggregatedFieldWellsProperty.builder()

      /**
       * @param colors The color field well of a tree map.
       * Values are grouped by aggregations based on group by fields.
       */
      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      /**
       * @param colors The color field well of a tree map.
       * Values are grouped by aggregations based on group by fields.
       */
      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      /**
       * @param colors The color field well of a tree map.
       * Values are grouped by aggregations based on group by fields.
       */
      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      /**
       * @param groups The group by field well of a tree map.
       * Values are grouped based on group by fields.
       */
      override fun groups(groups: IResolvable) {
        cdkBuilder.groups(groups.let(IResolvable::unwrap))
      }

      /**
       * @param groups The group by field well of a tree map.
       * Values are grouped based on group by fields.
       */
      override fun groups(groups: List<Any>) {
        cdkBuilder.groups(groups)
      }

      /**
       * @param groups The group by field well of a tree map.
       * Values are grouped based on group by fields.
       */
      override fun groups(vararg groups: Any): Unit = groups(groups.toList())

      /**
       * @param sizes The size field well of a tree map.
       * Values are aggregated based on group by fields.
       */
      override fun sizes(sizes: IResolvable) {
        cdkBuilder.sizes(sizes.let(IResolvable::unwrap))
      }

      /**
       * @param sizes The size field well of a tree map.
       * Values are aggregated based on group by fields.
       */
      override fun sizes(sizes: List<Any>) {
        cdkBuilder.sizes(sizes)
      }

      /**
       * @param sizes The size field well of a tree map.
       * Values are aggregated based on group by fields.
       */
      override fun sizes(vararg sizes: Any): Unit = sizes(sizes.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapAggregatedFieldWellsProperty,
    ) : TreeMapAggregatedFieldWellsProperty {
      /**
       * The color field well of a tree map.
       *
       * Values are grouped by aggregations based on group by fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapaggregatedfieldwells.html#cfn-quicksight-analysis-treemapaggregatedfieldwells-colors)
       */
      override fun colors(): Any? = unwrap(this).getColors()

      /**
       * The group by field well of a tree map.
       *
       * Values are grouped based on group by fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapaggregatedfieldwells.html#cfn-quicksight-analysis-treemapaggregatedfieldwells-groups)
       */
      override fun groups(): Any? = unwrap(this).getGroups()

      /**
       * The size field well of a tree map.
       *
       * Values are aggregated based on group by fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapaggregatedfieldwells.html#cfn-quicksight-analysis-treemapaggregatedfieldwells-sizes)
       */
      override fun sizes(): Any? = unwrap(this).getSizes()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TreeMapAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapAggregatedFieldWellsProperty):
          TreeMapAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TreeMapAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface GaugeChartConditionalFormattingOptionProperty {
    /**
     * The options that determine the presentation of the arc of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformattingoption.html#cfn-quicksight-analysis-gaugechartconditionalformattingoption-arc)
     */
    public fun arc(): Any? = unwrap(this).getArc()

    /**
     * The conditional formatting for the primary value of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformattingoption.html#cfn-quicksight-analysis-gaugechartconditionalformattingoption-primaryvalue)
     */
    public fun primaryValue(): Any? = unwrap(this).getPrimaryValue()

    /**
     * A builder for [GaugeChartConditionalFormattingOptionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param arc The options that determine the presentation of the arc of a `GaugeChartVisual` .
       */
      public fun arc(arc: IResolvable)

      /**
       * @param arc The options that determine the presentation of the arc of a `GaugeChartVisual` .
       */
      public fun arc(arc: GaugeChartArcConditionalFormattingProperty)

      /**
       * @param arc The options that determine the presentation of the arc of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f4db4141a96c61053de8994c9c2dca0c820c3eca8ac6935e09ca82b4af323b22")
      public fun arc(arc: GaugeChartArcConditionalFormattingProperty.Builder.() -> Unit)

      /**
       * @param primaryValue The conditional formatting for the primary value of a
       * `GaugeChartVisual` .
       */
      public fun primaryValue(primaryValue: IResolvable)

      /**
       * @param primaryValue The conditional formatting for the primary value of a
       * `GaugeChartVisual` .
       */
      public fun primaryValue(primaryValue: GaugeChartPrimaryValueConditionalFormattingProperty)

      /**
       * @param primaryValue The conditional formatting for the primary value of a
       * `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5057eecdaef1648a3f0730df14031470e254759cb1e90cf13e15df6899d43e86")
      public
          fun primaryValue(primaryValue: GaugeChartPrimaryValueConditionalFormattingProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConditionalFormattingOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConditionalFormattingOptionProperty.builder()

      /**
       * @param arc The options that determine the presentation of the arc of a `GaugeChartVisual` .
       */
      override fun arc(arc: IResolvable) {
        cdkBuilder.arc(arc.let(IResolvable::unwrap))
      }

      /**
       * @param arc The options that determine the presentation of the arc of a `GaugeChartVisual` .
       */
      override fun arc(arc: GaugeChartArcConditionalFormattingProperty) {
        cdkBuilder.arc(arc.let(GaugeChartArcConditionalFormattingProperty::unwrap))
      }

      /**
       * @param arc The options that determine the presentation of the arc of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f4db4141a96c61053de8994c9c2dca0c820c3eca8ac6935e09ca82b4af323b22")
      override fun arc(arc: GaugeChartArcConditionalFormattingProperty.Builder.() -> Unit): Unit =
          arc(GaugeChartArcConditionalFormattingProperty(arc))

      /**
       * @param primaryValue The conditional formatting for the primary value of a
       * `GaugeChartVisual` .
       */
      override fun primaryValue(primaryValue: IResolvable) {
        cdkBuilder.primaryValue(primaryValue.let(IResolvable::unwrap))
      }

      /**
       * @param primaryValue The conditional formatting for the primary value of a
       * `GaugeChartVisual` .
       */
      override fun primaryValue(primaryValue: GaugeChartPrimaryValueConditionalFormattingProperty) {
        cdkBuilder.primaryValue(primaryValue.let(GaugeChartPrimaryValueConditionalFormattingProperty::unwrap))
      }

      /**
       * @param primaryValue The conditional formatting for the primary value of a
       * `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5057eecdaef1648a3f0730df14031470e254759cb1e90cf13e15df6899d43e86")
      override
          fun primaryValue(primaryValue: GaugeChartPrimaryValueConditionalFormattingProperty.Builder.() -> Unit):
          Unit = primaryValue(GaugeChartPrimaryValueConditionalFormattingProperty(primaryValue))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConditionalFormattingOptionProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConditionalFormattingOptionProperty,
    ) : GaugeChartConditionalFormattingOptionProperty {
      /**
       * The options that determine the presentation of the arc of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformattingoption.html#cfn-quicksight-analysis-gaugechartconditionalformattingoption-arc)
       */
      override fun arc(): Any? = unwrap(this).getArc()

      /**
       * The conditional formatting for the primary value of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformattingoption.html#cfn-quicksight-analysis-gaugechartconditionalformattingoption-primaryvalue)
       */
      override fun primaryValue(): Any? = unwrap(this).getPrimaryValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GaugeChartConditionalFormattingOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConditionalFormattingOptionProperty):
          GaugeChartConditionalFormattingOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartConditionalFormattingOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConditionalFormattingOptionProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ParameterSliderControlProperty {
    /**
     * The display options of a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The smaller value that is displayed at the left of the slider.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-maximumvalue)
     */
    public fun maximumValue(): Number

    /**
     * The larger value that is displayed at the right of the slider.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-minimumvalue)
     */
    public fun minimumValue(): Number

    /**
     * The ID of the `ParameterSliderControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-parametercontrolid)
     */
    public fun parameterControlId(): String

    /**
     * The source parameter name of the `ParameterSliderControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-sourceparametername)
     */
    public fun sourceParameterName(): String

    /**
     * The number of increments that the slider bar is divided into.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-stepsize)
     */
    public fun stepSize(): Number

    /**
     * The title of the `ParameterSliderControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-title)
     */
    public fun title(): String

    /**
     * A builder for [ParameterSliderControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("11c2eccce69922734d3734c00ccfe81e1cb3bfc792290e81f1ace88f5d3171ea")
      public
          fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param maximumValue The smaller value that is displayed at the left of the slider. 
       */
      public fun maximumValue(maximumValue: Number)

      /**
       * @param minimumValue The larger value that is displayed at the right of the slider. 
       */
      public fun minimumValue(minimumValue: Number)

      /**
       * @param parameterControlId The ID of the `ParameterSliderControl` . 
       */
      public fun parameterControlId(parameterControlId: String)

      /**
       * @param sourceParameterName The source parameter name of the `ParameterSliderControl` . 
       */
      public fun sourceParameterName(sourceParameterName: String)

      /**
       * @param stepSize The number of increments that the slider bar is divided into. 
       */
      public fun stepSize(stepSize: Number)

      /**
       * @param title The title of the `ParameterSliderControl` . 
       */
      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterSliderControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterSliderControlProperty.builder()

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(SliderControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("11c2eccce69922734d3734c00ccfe81e1cb3bfc792290e81f1ace88f5d3171ea")
      override
          fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(SliderControlDisplayOptionsProperty(displayOptions))

      /**
       * @param maximumValue The smaller value that is displayed at the left of the slider. 
       */
      override fun maximumValue(maximumValue: Number) {
        cdkBuilder.maximumValue(maximumValue)
      }

      /**
       * @param minimumValue The larger value that is displayed at the right of the slider. 
       */
      override fun minimumValue(minimumValue: Number) {
        cdkBuilder.minimumValue(minimumValue)
      }

      /**
       * @param parameterControlId The ID of the `ParameterSliderControl` . 
       */
      override fun parameterControlId(parameterControlId: String) {
        cdkBuilder.parameterControlId(parameterControlId)
      }

      /**
       * @param sourceParameterName The source parameter name of the `ParameterSliderControl` . 
       */
      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      /**
       * @param stepSize The number of increments that the slider bar is divided into. 
       */
      override fun stepSize(stepSize: Number) {
        cdkBuilder.stepSize(stepSize)
      }

      /**
       * @param title The title of the `ParameterSliderControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterSliderControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterSliderControlProperty,
    ) : ParameterSliderControlProperty {
      /**
       * The display options of a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The smaller value that is displayed at the left of the slider.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-maximumvalue)
       */
      override fun maximumValue(): Number = unwrap(this).getMaximumValue()

      /**
       * The larger value that is displayed at the right of the slider.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-minimumvalue)
       */
      override fun minimumValue(): Number = unwrap(this).getMinimumValue()

      /**
       * The ID of the `ParameterSliderControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-parametercontrolid)
       */
      override fun parameterControlId(): String = unwrap(this).getParameterControlId()

      /**
       * The source parameter name of the `ParameterSliderControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-sourceparametername)
       */
      override fun sourceParameterName(): String = unwrap(this).getSourceParameterName()

      /**
       * The number of increments that the slider bar is divided into.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-stepsize)
       */
      override fun stepSize(): Number = unwrap(this).getStepSize()

      /**
       * The title of the `ParameterSliderControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ParameterSliderControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterSliderControlProperty):
          ParameterSliderControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterSliderControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterSliderControlProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TreeMapConfigurationProperty {
    /**
     * The label options (label text, label visibility) for the colors displayed in a tree map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-colorlabeloptions)
     */
    public fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

    /**
     * The color options (gradient color, point of divergence) of a tree map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-colorscale)
     */
    public fun colorScale(): Any? = unwrap(this).getColorScale()

    /**
     * The options that determine if visual data labels are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-datalabels)
     */
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    /**
     * The field wells of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The label options (label text, label visibility) of the groups that are displayed in a tree
     * map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-grouplabeloptions)
     */
    public fun groupLabelOptions(): Any? = unwrap(this).getGroupLabelOptions()

    /**
     * The legend display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-legend)
     */
    public fun legend(): Any? = unwrap(this).getLegend()

    /**
     * The label options (label text, label visibility) of the sizes that are displayed in a tree
     * map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-sizelabeloptions)
     */
    public fun sizeLabelOptions(): Any? = unwrap(this).getSizeLabelOptions()

    /**
     * The sort configuration of a tree map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The tooltip display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-tooltip)
     */
    public fun tooltip(): Any? = unwrap(this).getTooltip()

    /**
     * A builder for [TreeMapConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param colorLabelOptions The label options (label text, label visibility) for the colors
       * displayed in a tree map.
       */
      public fun colorLabelOptions(colorLabelOptions: IResolvable)

      /**
       * @param colorLabelOptions The label options (label text, label visibility) for the colors
       * displayed in a tree map.
       */
      public fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param colorLabelOptions The label options (label text, label visibility) for the colors
       * displayed in a tree map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9ed886eeaa7dea81850a54b897a1c06d85686240cde58d0507e632fdcb2b71a4")
      public
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param colorScale The color options (gradient color, point of divergence) of a tree map.
       */
      public fun colorScale(colorScale: IResolvable)

      /**
       * @param colorScale The color options (gradient color, point of divergence) of a tree map.
       */
      public fun colorScale(colorScale: ColorScaleProperty)

      /**
       * @param colorScale The color options (gradient color, point of divergence) of a tree map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("247cd9ffe764588033deaf772f7d77a77aef1e83bea68bc708ea042e99993b6d")
      public fun colorScale(colorScale: ColorScaleProperty.Builder.() -> Unit)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      public fun dataLabels(dataLabels: IResolvable)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1bcee84c5897ab525afe3e4085d2eac4a1b21450e2c9fd5f39a9198780c3817e")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: TreeMapFieldWellsProperty)

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8a163adc816d5dc08eaca4d3c3aeb205d70973b9ce82e64cd80c5cc8dfa39933")
      public fun fieldWells(fieldWells: TreeMapFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param groupLabelOptions The label options (label text, label visibility) of the groups
       * that are displayed in a tree map.
       */
      public fun groupLabelOptions(groupLabelOptions: IResolvable)

      /**
       * @param groupLabelOptions The label options (label text, label visibility) of the groups
       * that are displayed in a tree map.
       */
      public fun groupLabelOptions(groupLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param groupLabelOptions The label options (label text, label visibility) of the groups
       * that are displayed in a tree map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c7cc83a72bcd005d0889f4d68f3409a1b97cc496bae809771c18cb47e509c8cd")
      public
          fun groupLabelOptions(groupLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: IResolvable)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: LegendOptionsProperty)

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e24b6ff6865030d96c2bfc2947f4f1a9ddd7102761de84cf5f81c7b1208ba603")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      /**
       * @param sizeLabelOptions The label options (label text, label visibility) of the sizes that
       * are displayed in a tree map.
       */
      public fun sizeLabelOptions(sizeLabelOptions: IResolvable)

      /**
       * @param sizeLabelOptions The label options (label text, label visibility) of the sizes that
       * are displayed in a tree map.
       */
      public fun sizeLabelOptions(sizeLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param sizeLabelOptions The label options (label text, label visibility) of the sizes that
       * are displayed in a tree map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ddcee37e2f3f655cf2a4784f3957db97c136a1871a1acc9e74b1a6107e6e946c")
      public
          fun sizeLabelOptions(sizeLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration of a tree map.
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a tree map.
       */
      public fun sortConfiguration(sortConfiguration: TreeMapSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a tree map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4b5bfa3c71012a14c2c948069818d230f1b3b063bd985caca1cc9d4006c18a9f")
      public
          fun sortConfiguration(sortConfiguration: TreeMapSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: IResolvable)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: TooltipOptionsProperty)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3aec98e8a210b11c7ed6837ecf7c6cf60dabd64d6bc7d68dc969650ca32048ec")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapConfigurationProperty.builder()

      /**
       * @param colorLabelOptions The label options (label text, label visibility) for the colors
       * displayed in a tree map.
       */
      override fun colorLabelOptions(colorLabelOptions: IResolvable) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param colorLabelOptions The label options (label text, label visibility) for the colors
       * displayed in a tree map.
       */
      override fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param colorLabelOptions The label options (label text, label visibility) for the colors
       * displayed in a tree map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9ed886eeaa7dea81850a54b897a1c06d85686240cde58d0507e632fdcb2b71a4")
      override
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = colorLabelOptions(ChartAxisLabelOptionsProperty(colorLabelOptions))

      /**
       * @param colorScale The color options (gradient color, point of divergence) of a tree map.
       */
      override fun colorScale(colorScale: IResolvable) {
        cdkBuilder.colorScale(colorScale.let(IResolvable::unwrap))
      }

      /**
       * @param colorScale The color options (gradient color, point of divergence) of a tree map.
       */
      override fun colorScale(colorScale: ColorScaleProperty) {
        cdkBuilder.colorScale(colorScale.let(ColorScaleProperty::unwrap))
      }

      /**
       * @param colorScale The color options (gradient color, point of divergence) of a tree map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("247cd9ffe764588033deaf772f7d77a77aef1e83bea68bc708ea042e99993b6d")
      override fun colorScale(colorScale: ColorScaleProperty.Builder.() -> Unit): Unit =
          colorScale(ColorScaleProperty(colorScale))

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1bcee84c5897ab525afe3e4085d2eac4a1b21450e2c9fd5f39a9198780c3817e")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: TreeMapFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(TreeMapFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8a163adc816d5dc08eaca4d3c3aeb205d70973b9ce82e64cd80c5cc8dfa39933")
      override fun fieldWells(fieldWells: TreeMapFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(TreeMapFieldWellsProperty(fieldWells))

      /**
       * @param groupLabelOptions The label options (label text, label visibility) of the groups
       * that are displayed in a tree map.
       */
      override fun groupLabelOptions(groupLabelOptions: IResolvable) {
        cdkBuilder.groupLabelOptions(groupLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param groupLabelOptions The label options (label text, label visibility) of the groups
       * that are displayed in a tree map.
       */
      override fun groupLabelOptions(groupLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.groupLabelOptions(groupLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param groupLabelOptions The label options (label text, label visibility) of the groups
       * that are displayed in a tree map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c7cc83a72bcd005d0889f4d68f3409a1b97cc496bae809771c18cb47e509c8cd")
      override
          fun groupLabelOptions(groupLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = groupLabelOptions(ChartAxisLabelOptionsProperty(groupLabelOptions))

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e24b6ff6865030d96c2bfc2947f4f1a9ddd7102761de84cf5f81c7b1208ba603")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      /**
       * @param sizeLabelOptions The label options (label text, label visibility) of the sizes that
       * are displayed in a tree map.
       */
      override fun sizeLabelOptions(sizeLabelOptions: IResolvable) {
        cdkBuilder.sizeLabelOptions(sizeLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param sizeLabelOptions The label options (label text, label visibility) of the sizes that
       * are displayed in a tree map.
       */
      override fun sizeLabelOptions(sizeLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.sizeLabelOptions(sizeLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param sizeLabelOptions The label options (label text, label visibility) of the sizes that
       * are displayed in a tree map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ddcee37e2f3f655cf2a4784f3957db97c136a1871a1acc9e74b1a6107e6e946c")
      override
          fun sizeLabelOptions(sizeLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = sizeLabelOptions(ChartAxisLabelOptionsProperty(sizeLabelOptions))

      /**
       * @param sortConfiguration The sort configuration of a tree map.
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a tree map.
       */
      override fun sortConfiguration(sortConfiguration: TreeMapSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(TreeMapSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a tree map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4b5bfa3c71012a14c2c948069818d230f1b3b063bd985caca1cc9d4006c18a9f")
      override
          fun sortConfiguration(sortConfiguration: TreeMapSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(TreeMapSortConfigurationProperty(sortConfiguration))

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3aec98e8a210b11c7ed6837ecf7c6cf60dabd64d6bc7d68dc969650ca32048ec")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapConfigurationProperty,
    ) : TreeMapConfigurationProperty {
      /**
       * The label options (label text, label visibility) for the colors displayed in a tree map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-colorlabeloptions)
       */
      override fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

      /**
       * The color options (gradient color, point of divergence) of a tree map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-colorscale)
       */
      override fun colorScale(): Any? = unwrap(this).getColorScale()

      /**
       * The options that determine if visual data labels are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-datalabels)
       */
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      /**
       * The field wells of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The label options (label text, label visibility) of the groups that are displayed in a tree
       * map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-grouplabeloptions)
       */
      override fun groupLabelOptions(): Any? = unwrap(this).getGroupLabelOptions()

      /**
       * The legend display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-legend)
       */
      override fun legend(): Any? = unwrap(this).getLegend()

      /**
       * The label options (label text, label visibility) of the sizes that are displayed in a tree
       * map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-sizelabeloptions)
       */
      override fun sizeLabelOptions(): Any? = unwrap(this).getSizeLabelOptions()

      /**
       * The sort configuration of a tree map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The tooltip display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-tooltip)
       */
      override fun tooltip(): Any? = unwrap(this).getTooltip()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TreeMapConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapConfigurationProperty):
          TreeMapConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TreeMapConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ReferenceLineProperty {
    /**
     * The data configuration of the reference line.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html#cfn-quicksight-analysis-referenceline-dataconfiguration)
     */
    public fun dataConfiguration(): Any

    /**
     * The label configuration of the reference line.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html#cfn-quicksight-analysis-referenceline-labelconfiguration)
     */
    public fun labelConfiguration(): Any? = unwrap(this).getLabelConfiguration()

    /**
     * The status of the reference line. Choose one of the following options:.
     *
     * * `ENABLE`
     * * `DISABLE`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html#cfn-quicksight-analysis-referenceline-status)
     */
    public fun status(): String? = unwrap(this).getStatus()

    /**
     * The style configuration of the reference line.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html#cfn-quicksight-analysis-referenceline-styleconfiguration)
     */
    public fun styleConfiguration(): Any? = unwrap(this).getStyleConfiguration()

    /**
     * A builder for [ReferenceLineProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataConfiguration The data configuration of the reference line. 
       */
      public fun dataConfiguration(dataConfiguration: IResolvable)

      /**
       * @param dataConfiguration The data configuration of the reference line. 
       */
      public fun dataConfiguration(dataConfiguration: ReferenceLineDataConfigurationProperty)

      /**
       * @param dataConfiguration The data configuration of the reference line. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ccd240f1ffed99179f40be809675cab75bb3e6fa1037484350ff982c45b52e7")
      public
          fun dataConfiguration(dataConfiguration: ReferenceLineDataConfigurationProperty.Builder.() -> Unit)

      /**
       * @param labelConfiguration The label configuration of the reference line.
       */
      public fun labelConfiguration(labelConfiguration: IResolvable)

      /**
       * @param labelConfiguration The label configuration of the reference line.
       */
      public fun labelConfiguration(labelConfiguration: ReferenceLineLabelConfigurationProperty)

      /**
       * @param labelConfiguration The label configuration of the reference line.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("46c5e2519807ccfc466a71f51dee779c64c529c4006e655a4faae7b162def303")
      public
          fun labelConfiguration(labelConfiguration: ReferenceLineLabelConfigurationProperty.Builder.() -> Unit)

      /**
       * @param status The status of the reference line. Choose one of the following options:.
       * * `ENABLE`
       * * `DISABLE`
       */
      public fun status(status: String)

      /**
       * @param styleConfiguration The style configuration of the reference line.
       */
      public fun styleConfiguration(styleConfiguration: IResolvable)

      /**
       * @param styleConfiguration The style configuration of the reference line.
       */
      public fun styleConfiguration(styleConfiguration: ReferenceLineStyleConfigurationProperty)

      /**
       * @param styleConfiguration The style configuration of the reference line.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3c0b08a7f84ca0cf9344bb83c05e974e118dea2b7bf39276f40d78f37a516b33")
      public
          fun styleConfiguration(styleConfiguration: ReferenceLineStyleConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineProperty.builder()

      /**
       * @param dataConfiguration The data configuration of the reference line. 
       */
      override fun dataConfiguration(dataConfiguration: IResolvable) {
        cdkBuilder.dataConfiguration(dataConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param dataConfiguration The data configuration of the reference line. 
       */
      override fun dataConfiguration(dataConfiguration: ReferenceLineDataConfigurationProperty) {
        cdkBuilder.dataConfiguration(dataConfiguration.let(ReferenceLineDataConfigurationProperty::unwrap))
      }

      /**
       * @param dataConfiguration The data configuration of the reference line. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ccd240f1ffed99179f40be809675cab75bb3e6fa1037484350ff982c45b52e7")
      override
          fun dataConfiguration(dataConfiguration: ReferenceLineDataConfigurationProperty.Builder.() -> Unit):
          Unit = dataConfiguration(ReferenceLineDataConfigurationProperty(dataConfiguration))

      /**
       * @param labelConfiguration The label configuration of the reference line.
       */
      override fun labelConfiguration(labelConfiguration: IResolvable) {
        cdkBuilder.labelConfiguration(labelConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param labelConfiguration The label configuration of the reference line.
       */
      override fun labelConfiguration(labelConfiguration: ReferenceLineLabelConfigurationProperty) {
        cdkBuilder.labelConfiguration(labelConfiguration.let(ReferenceLineLabelConfigurationProperty::unwrap))
      }

      /**
       * @param labelConfiguration The label configuration of the reference line.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("46c5e2519807ccfc466a71f51dee779c64c529c4006e655a4faae7b162def303")
      override
          fun labelConfiguration(labelConfiguration: ReferenceLineLabelConfigurationProperty.Builder.() -> Unit):
          Unit = labelConfiguration(ReferenceLineLabelConfigurationProperty(labelConfiguration))

      /**
       * @param status The status of the reference line. Choose one of the following options:.
       * * `ENABLE`
       * * `DISABLE`
       */
      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      /**
       * @param styleConfiguration The style configuration of the reference line.
       */
      override fun styleConfiguration(styleConfiguration: IResolvable) {
        cdkBuilder.styleConfiguration(styleConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param styleConfiguration The style configuration of the reference line.
       */
      override fun styleConfiguration(styleConfiguration: ReferenceLineStyleConfigurationProperty) {
        cdkBuilder.styleConfiguration(styleConfiguration.let(ReferenceLineStyleConfigurationProperty::unwrap))
      }

      /**
       * @param styleConfiguration The style configuration of the reference line.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3c0b08a7f84ca0cf9344bb83c05e974e118dea2b7bf39276f40d78f37a516b33")
      override
          fun styleConfiguration(styleConfiguration: ReferenceLineStyleConfigurationProperty.Builder.() -> Unit):
          Unit = styleConfiguration(ReferenceLineStyleConfigurationProperty(styleConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineProperty,
    ) : ReferenceLineProperty {
      /**
       * The data configuration of the reference line.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html#cfn-quicksight-analysis-referenceline-dataconfiguration)
       */
      override fun dataConfiguration(): Any = unwrap(this).getDataConfiguration()

      /**
       * The label configuration of the reference line.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html#cfn-quicksight-analysis-referenceline-labelconfiguration)
       */
      override fun labelConfiguration(): Any? = unwrap(this).getLabelConfiguration()

      /**
       * The status of the reference line. Choose one of the following options:.
       *
       * * `ENABLE`
       * * `DISABLE`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html#cfn-quicksight-analysis-referenceline-status)
       */
      override fun status(): String? = unwrap(this).getStatus()

      /**
       * The style configuration of the reference line.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html#cfn-quicksight-analysis-referenceline-styleconfiguration)
       */
      override fun styleConfiguration(): Any? = unwrap(this).getStyleConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ReferenceLineProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineProperty):
          ReferenceLineProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface ComboChartFieldWellsProperty {
    /**
     * The aggregated field wells of a combo chart.
     *
     * Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by
     * category.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartfieldwells.html#cfn-quicksight-analysis-combochartfieldwells-combochartaggregatedfieldwells)
     */
    public fun comboChartAggregatedFieldWells(): Any? =
        unwrap(this).getComboChartAggregatedFieldWells()

    /**
     * A builder for [ComboChartFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param comboChartAggregatedFieldWells The aggregated field wells of a combo chart.
       * Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by
       * category.
       */
      public fun comboChartAggregatedFieldWells(comboChartAggregatedFieldWells: IResolvable)

      /**
       * @param comboChartAggregatedFieldWells The aggregated field wells of a combo chart.
       * Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by
       * category.
       */
      public
          fun comboChartAggregatedFieldWells(comboChartAggregatedFieldWells: ComboChartAggregatedFieldWellsProperty)

      /**
       * @param comboChartAggregatedFieldWells The aggregated field wells of a combo chart.
       * Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by
       * category.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("29409c8daad1ed63a9750595d52f793bf931d5970e9588034f798eefa34253d6")
      public
          fun comboChartAggregatedFieldWells(comboChartAggregatedFieldWells: ComboChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartFieldWellsProperty.builder()

      /**
       * @param comboChartAggregatedFieldWells The aggregated field wells of a combo chart.
       * Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by
       * category.
       */
      override fun comboChartAggregatedFieldWells(comboChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.comboChartAggregatedFieldWells(comboChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param comboChartAggregatedFieldWells The aggregated field wells of a combo chart.
       * Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by
       * category.
       */
      override
          fun comboChartAggregatedFieldWells(comboChartAggregatedFieldWells: ComboChartAggregatedFieldWellsProperty) {
        cdkBuilder.comboChartAggregatedFieldWells(comboChartAggregatedFieldWells.let(ComboChartAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param comboChartAggregatedFieldWells The aggregated field wells of a combo chart.
       * Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by
       * category.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("29409c8daad1ed63a9750595d52f793bf931d5970e9588034f798eefa34253d6")
      override
          fun comboChartAggregatedFieldWells(comboChartAggregatedFieldWells: ComboChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          comboChartAggregatedFieldWells(ComboChartAggregatedFieldWellsProperty(comboChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartFieldWellsProperty,
    ) : ComboChartFieldWellsProperty {
      /**
       * The aggregated field wells of a combo chart.
       *
       * Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by
       * category.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartfieldwells.html#cfn-quicksight-analysis-combochartfieldwells-combochartaggregatedfieldwells)
       */
      override fun comboChartAggregatedFieldWells(): Any? =
          unwrap(this).getComboChartAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ComboChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartFieldWellsProperty):
          ComboChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComboChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface DynamicDefaultValueProperty {
    /**
     * The column that contains the default value of each user or group.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dynamicdefaultvalue.html#cfn-quicksight-analysis-dynamicdefaultvalue-defaultvaluecolumn)
     */
    public fun defaultValueColumn(): Any

    /**
     * The column that contains the group name.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dynamicdefaultvalue.html#cfn-quicksight-analysis-dynamicdefaultvalue-groupnamecolumn)
     */
    public fun groupNameColumn(): Any? = unwrap(this).getGroupNameColumn()

    /**
     * The column that contains the username.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dynamicdefaultvalue.html#cfn-quicksight-analysis-dynamicdefaultvalue-usernamecolumn)
     */
    public fun userNameColumn(): Any? = unwrap(this).getUserNameColumn()

    /**
     * A builder for [DynamicDefaultValueProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param defaultValueColumn The column that contains the default value of each user or group.
       * 
       */
      public fun defaultValueColumn(defaultValueColumn: IResolvable)

      /**
       * @param defaultValueColumn The column that contains the default value of each user or group.
       * 
       */
      public fun defaultValueColumn(defaultValueColumn: ColumnIdentifierProperty)

      /**
       * @param defaultValueColumn The column that contains the default value of each user or group.
       * 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("824132a2a772e11e97897362114624a047659b6c00c4100c5fa2c0adf6a61deb")
      public fun defaultValueColumn(defaultValueColumn: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param groupNameColumn The column that contains the group name.
       */
      public fun groupNameColumn(groupNameColumn: IResolvable)

      /**
       * @param groupNameColumn The column that contains the group name.
       */
      public fun groupNameColumn(groupNameColumn: ColumnIdentifierProperty)

      /**
       * @param groupNameColumn The column that contains the group name.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e2844dedbf3257882ee51019cbc495a18fcfe091f67eec93e4356cbfafc13c36")
      public fun groupNameColumn(groupNameColumn: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param userNameColumn The column that contains the username.
       */
      public fun userNameColumn(userNameColumn: IResolvable)

      /**
       * @param userNameColumn The column that contains the username.
       */
      public fun userNameColumn(userNameColumn: ColumnIdentifierProperty)

      /**
       * @param userNameColumn The column that contains the username.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2ae43a42013fd326eb4fa54b9a8739405c5abc26b0ff476e7920ed25307e883")
      public fun userNameColumn(userNameColumn: ColumnIdentifierProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DynamicDefaultValueProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DynamicDefaultValueProperty.builder()

      /**
       * @param defaultValueColumn The column that contains the default value of each user or group.
       * 
       */
      override fun defaultValueColumn(defaultValueColumn: IResolvable) {
        cdkBuilder.defaultValueColumn(defaultValueColumn.let(IResolvable::unwrap))
      }

      /**
       * @param defaultValueColumn The column that contains the default value of each user or group.
       * 
       */
      override fun defaultValueColumn(defaultValueColumn: ColumnIdentifierProperty) {
        cdkBuilder.defaultValueColumn(defaultValueColumn.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param defaultValueColumn The column that contains the default value of each user or group.
       * 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("824132a2a772e11e97897362114624a047659b6c00c4100c5fa2c0adf6a61deb")
      override
          fun defaultValueColumn(defaultValueColumn: ColumnIdentifierProperty.Builder.() -> Unit):
          Unit = defaultValueColumn(ColumnIdentifierProperty(defaultValueColumn))

      /**
       * @param groupNameColumn The column that contains the group name.
       */
      override fun groupNameColumn(groupNameColumn: IResolvable) {
        cdkBuilder.groupNameColumn(groupNameColumn.let(IResolvable::unwrap))
      }

      /**
       * @param groupNameColumn The column that contains the group name.
       */
      override fun groupNameColumn(groupNameColumn: ColumnIdentifierProperty) {
        cdkBuilder.groupNameColumn(groupNameColumn.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param groupNameColumn The column that contains the group name.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e2844dedbf3257882ee51019cbc495a18fcfe091f67eec93e4356cbfafc13c36")
      override fun groupNameColumn(groupNameColumn: ColumnIdentifierProperty.Builder.() -> Unit):
          Unit = groupNameColumn(ColumnIdentifierProperty(groupNameColumn))

      /**
       * @param userNameColumn The column that contains the username.
       */
      override fun userNameColumn(userNameColumn: IResolvable) {
        cdkBuilder.userNameColumn(userNameColumn.let(IResolvable::unwrap))
      }

      /**
       * @param userNameColumn The column that contains the username.
       */
      override fun userNameColumn(userNameColumn: ColumnIdentifierProperty) {
        cdkBuilder.userNameColumn(userNameColumn.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param userNameColumn The column that contains the username.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2ae43a42013fd326eb4fa54b9a8739405c5abc26b0ff476e7920ed25307e883")
      override fun userNameColumn(userNameColumn: ColumnIdentifierProperty.Builder.() -> Unit): Unit
          = userNameColumn(ColumnIdentifierProperty(userNameColumn))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DynamicDefaultValueProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DynamicDefaultValueProperty,
    ) : DynamicDefaultValueProperty {
      /**
       * The column that contains the default value of each user or group.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dynamicdefaultvalue.html#cfn-quicksight-analysis-dynamicdefaultvalue-defaultvaluecolumn)
       */
      override fun defaultValueColumn(): Any = unwrap(this).getDefaultValueColumn()

      /**
       * The column that contains the group name.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dynamicdefaultvalue.html#cfn-quicksight-analysis-dynamicdefaultvalue-groupnamecolumn)
       */
      override fun groupNameColumn(): Any? = unwrap(this).getGroupNameColumn()

      /**
       * The column that contains the username.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dynamicdefaultvalue.html#cfn-quicksight-analysis-dynamicdefaultvalue-usernamecolumn)
       */
      override fun userNameColumn(): Any? = unwrap(this).getUserNameColumn()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DynamicDefaultValueProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DynamicDefaultValueProperty):
          DynamicDefaultValueProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DynamicDefaultValueProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DynamicDefaultValueProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ContributionAnalysisDefaultProperty {
    /**
     * The dimensions columns that are used in the contribution analysis, usually a list of
     * `ColumnIdentifiers` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-contributionanalysisdefault.html#cfn-quicksight-analysis-contributionanalysisdefault-contributordimensions)
     */
    public fun contributorDimensions(): Any

    /**
     * The measure field that is used in the contribution analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-contributionanalysisdefault.html#cfn-quicksight-analysis-contributionanalysisdefault-measurefieldid)
     */
    public fun measureFieldId(): String

    /**
     * A builder for [ContributionAnalysisDefaultProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param contributorDimensions The dimensions columns that are used in the contribution
       * analysis, usually a list of `ColumnIdentifiers` . 
       */
      public fun contributorDimensions(contributorDimensions: IResolvable)

      /**
       * @param contributorDimensions The dimensions columns that are used in the contribution
       * analysis, usually a list of `ColumnIdentifiers` . 
       */
      public fun contributorDimensions(contributorDimensions: List<Any>)

      /**
       * @param contributorDimensions The dimensions columns that are used in the contribution
       * analysis, usually a list of `ColumnIdentifiers` . 
       */
      public fun contributorDimensions(vararg contributorDimensions: Any)

      /**
       * @param measureFieldId The measure field that is used in the contribution analysis. 
       */
      public fun measureFieldId(measureFieldId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ContributionAnalysisDefaultProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ContributionAnalysisDefaultProperty.builder()

      /**
       * @param contributorDimensions The dimensions columns that are used in the contribution
       * analysis, usually a list of `ColumnIdentifiers` . 
       */
      override fun contributorDimensions(contributorDimensions: IResolvable) {
        cdkBuilder.contributorDimensions(contributorDimensions.let(IResolvable::unwrap))
      }

      /**
       * @param contributorDimensions The dimensions columns that are used in the contribution
       * analysis, usually a list of `ColumnIdentifiers` . 
       */
      override fun contributorDimensions(contributorDimensions: List<Any>) {
        cdkBuilder.contributorDimensions(contributorDimensions)
      }

      /**
       * @param contributorDimensions The dimensions columns that are used in the contribution
       * analysis, usually a list of `ColumnIdentifiers` . 
       */
      override fun contributorDimensions(vararg contributorDimensions: Any): Unit =
          contributorDimensions(contributorDimensions.toList())

      /**
       * @param measureFieldId The measure field that is used in the contribution analysis. 
       */
      override fun measureFieldId(measureFieldId: String) {
        cdkBuilder.measureFieldId(measureFieldId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ContributionAnalysisDefaultProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ContributionAnalysisDefaultProperty,
    ) : ContributionAnalysisDefaultProperty {
      /**
       * The dimensions columns that are used in the contribution analysis, usually a list of
       * `ColumnIdentifiers` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-contributionanalysisdefault.html#cfn-quicksight-analysis-contributionanalysisdefault-contributordimensions)
       */
      override fun contributorDimensions(): Any = unwrap(this).getContributorDimensions()

      /**
       * The measure field that is used in the contribution analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-contributionanalysisdefault.html#cfn-quicksight-analysis-contributionanalysisdefault-measurefieldid)
       */
      override fun measureFieldId(): String = unwrap(this).getMeasureFieldId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ContributionAnalysisDefaultProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ContributionAnalysisDefaultProperty):
          ContributionAnalysisDefaultProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ContributionAnalysisDefaultProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ContributionAnalysisDefaultProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface CustomContentVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration of a `CustomContentVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The dataset that is used to create the custom content visual.
     *
     * You can't create a visual without a dataset.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-datasetidentifier)
     */
    public fun dataSetIdentifier(): String

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [CustomContentVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration of a `CustomContentVisual` .
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration of a `CustomContentVisual` .
       */
      public fun chartConfiguration(chartConfiguration: CustomContentConfigurationProperty)

      /**
       * @param chartConfiguration The configuration of a `CustomContentVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bbbc0ab6356597a37c061b70309f854e82086e4dd7b9dc37d177718bf1412602")
      public
          fun chartConfiguration(chartConfiguration: CustomContentConfigurationProperty.Builder.() -> Unit)

      /**
       * @param dataSetIdentifier The dataset that is used to create the custom content visual. 
       * You can't create a visual without a dataset.
       */
      public fun dataSetIdentifier(dataSetIdentifier: String)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b19ca21812910404bb58c1da839bcb241ac86a90ab006f54b528ba56a36bef3e")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f3e3b37c042b6e49acd71729b33b3ea41608233c5c28ec89612db08b50b278bf")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomContentVisualProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomContentVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration of a `CustomContentVisual` .
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a `CustomContentVisual` .
       */
      override fun chartConfiguration(chartConfiguration: CustomContentConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(CustomContentConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a `CustomContentVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bbbc0ab6356597a37c061b70309f854e82086e4dd7b9dc37d177718bf1412602")
      override
          fun chartConfiguration(chartConfiguration: CustomContentConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(CustomContentConfigurationProperty(chartConfiguration))

      /**
       * @param dataSetIdentifier The dataset that is used to create the custom content visual. 
       * You can't create a visual without a dataset.
       */
      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b19ca21812910404bb58c1da839bcb241ac86a90ab006f54b528ba56a36bef3e")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f3e3b37c042b6e49acd71729b33b3ea41608233c5c28ec89612db08b50b278bf")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomContentVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomContentVisualProperty,
    ) : CustomContentVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration of a `CustomContentVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The dataset that is used to create the custom content visual.
       *
       * You can't create a visual without a dataset.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-datasetidentifier)
       */
      override fun dataSetIdentifier(): String = unwrap(this).getDataSetIdentifier()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): CustomContentVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomContentVisualProperty):
          CustomContentVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomContentVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomContentVisualProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableConditionalFormattingScopeProperty {
    /**
     * The role (field, field total, grand total) of the cell for conditional formatting.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformattingscope.html#cfn-quicksight-analysis-pivottableconditionalformattingscope-role)
     */
    public fun role(): String? = unwrap(this).getRole()

    /**
     * A builder for [PivotTableConditionalFormattingScopeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param role The role (field, field total, grand total) of the cell for conditional
       * formatting.
       */
      public fun role(role: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingScopeProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingScopeProperty.builder()

      /**
       * @param role The role (field, field total, grand total) of the cell for conditional
       * formatting.
       */
      override fun role(role: String) {
        cdkBuilder.role(role)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingScopeProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingScopeProperty,
    ) : PivotTableConditionalFormattingScopeProperty {
      /**
       * The role (field, field total, grand total) of the cell for conditional formatting.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformattingscope.html#cfn-quicksight-analysis-pivottableconditionalformattingscope-role)
       */
      override fun role(): String? = unwrap(this).getRole()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableConditionalFormattingScopeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingScopeProperty):
          PivotTableConditionalFormattingScopeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableConditionalFormattingScopeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingScopeProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableFieldCollapseStateTargetProperty {
    /**
     * The data path of the pivot table's header.
     *
     * Used to set the collapse state.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestatetarget.html#cfn-quicksight-analysis-pivottablefieldcollapsestatetarget-fielddatapathvalues)
     */
    public fun fieldDataPathValues(): Any? = unwrap(this).getFieldDataPathValues()

    /**
     * The field ID of the pivot table that the collapse state needs to be set to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestatetarget.html#cfn-quicksight-analysis-pivottablefieldcollapsestatetarget-fieldid)
     */
    public fun fieldId(): String? = unwrap(this).getFieldId()

    /**
     * A builder for [PivotTableFieldCollapseStateTargetProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldDataPathValues The data path of the pivot table's header.
       * Used to set the collapse state.
       */
      public fun fieldDataPathValues(fieldDataPathValues: IResolvable)

      /**
       * @param fieldDataPathValues The data path of the pivot table's header.
       * Used to set the collapse state.
       */
      public fun fieldDataPathValues(fieldDataPathValues: List<Any>)

      /**
       * @param fieldDataPathValues The data path of the pivot table's header.
       * Used to set the collapse state.
       */
      public fun fieldDataPathValues(vararg fieldDataPathValues: Any)

      /**
       * @param fieldId The field ID of the pivot table that the collapse state needs to be set to.
       */
      public fun fieldId(fieldId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldCollapseStateTargetProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldCollapseStateTargetProperty.builder()

      /**
       * @param fieldDataPathValues The data path of the pivot table's header.
       * Used to set the collapse state.
       */
      override fun fieldDataPathValues(fieldDataPathValues: IResolvable) {
        cdkBuilder.fieldDataPathValues(fieldDataPathValues.let(IResolvable::unwrap))
      }

      /**
       * @param fieldDataPathValues The data path of the pivot table's header.
       * Used to set the collapse state.
       */
      override fun fieldDataPathValues(fieldDataPathValues: List<Any>) {
        cdkBuilder.fieldDataPathValues(fieldDataPathValues)
      }

      /**
       * @param fieldDataPathValues The data path of the pivot table's header.
       * Used to set the collapse state.
       */
      override fun fieldDataPathValues(vararg fieldDataPathValues: Any): Unit =
          fieldDataPathValues(fieldDataPathValues.toList())

      /**
       * @param fieldId The field ID of the pivot table that the collapse state needs to be set to.
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldCollapseStateTargetProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldCollapseStateTargetProperty,
    ) : PivotTableFieldCollapseStateTargetProperty {
      /**
       * The data path of the pivot table's header.
       *
       * Used to set the collapse state.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestatetarget.html#cfn-quicksight-analysis-pivottablefieldcollapsestatetarget-fielddatapathvalues)
       */
      override fun fieldDataPathValues(): Any? = unwrap(this).getFieldDataPathValues()

      /**
       * The field ID of the pivot table that the collapse state needs to be set to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestatetarget.html#cfn-quicksight-analysis-pivottablefieldcollapsestatetarget-fieldid)
       */
      override fun fieldId(): String? = unwrap(this).getFieldId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableFieldCollapseStateTargetProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldCollapseStateTargetProperty):
          PivotTableFieldCollapseStateTargetProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableFieldCollapseStateTargetProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldCollapseStateTargetProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface AnalysisSourceEntityProperty {
    /**
     * The source template for the source entity of the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourceentity.html#cfn-quicksight-analysis-analysissourceentity-sourcetemplate)
     */
    public fun sourceTemplate(): Any? = unwrap(this).getSourceTemplate()

    /**
     * A builder for [AnalysisSourceEntityProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param sourceTemplate The source template for the source entity of the analysis.
       */
      public fun sourceTemplate(sourceTemplate: IResolvable)

      /**
       * @param sourceTemplate The source template for the source entity of the analysis.
       */
      public fun sourceTemplate(sourceTemplate: AnalysisSourceTemplateProperty)

      /**
       * @param sourceTemplate The source template for the source entity of the analysis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("30b2d3f46dc5813a9f10d916f1bb79466a6a8f7a422d4d4a586ece5a3c287181")
      public fun sourceTemplate(sourceTemplate: AnalysisSourceTemplateProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisSourceEntityProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisSourceEntityProperty.builder()

      /**
       * @param sourceTemplate The source template for the source entity of the analysis.
       */
      override fun sourceTemplate(sourceTemplate: IResolvable) {
        cdkBuilder.sourceTemplate(sourceTemplate.let(IResolvable::unwrap))
      }

      /**
       * @param sourceTemplate The source template for the source entity of the analysis.
       */
      override fun sourceTemplate(sourceTemplate: AnalysisSourceTemplateProperty) {
        cdkBuilder.sourceTemplate(sourceTemplate.let(AnalysisSourceTemplateProperty::unwrap))
      }

      /**
       * @param sourceTemplate The source template for the source entity of the analysis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("30b2d3f46dc5813a9f10d916f1bb79466a6a8f7a422d4d4a586ece5a3c287181")
      override
          fun sourceTemplate(sourceTemplate: AnalysisSourceTemplateProperty.Builder.() -> Unit):
          Unit = sourceTemplate(AnalysisSourceTemplateProperty(sourceTemplate))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisSourceEntityProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisSourceEntityProperty,
    ) : AnalysisSourceEntityProperty {
      /**
       * The source template for the source entity of the analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourceentity.html#cfn-quicksight-analysis-analysissourceentity-sourcetemplate)
       */
      override fun sourceTemplate(): Any? = unwrap(this).getSourceTemplate()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AnalysisSourceEntityProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisSourceEntityProperty):
          AnalysisSourceEntityProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AnalysisSourceEntityProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisSourceEntityProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ReferenceLineLabelConfigurationProperty {
    /**
     * The custom label configuration of the label in a reference line.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-customlabelconfiguration)
     */
    public fun customLabelConfiguration(): Any? = unwrap(this).getCustomLabelConfiguration()

    /**
     * The font color configuration of the label in a reference line.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-fontcolor)
     */
    public fun fontColor(): String? = unwrap(this).getFontColor()

    /**
     * The font configuration of the label in a reference line.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-fontconfiguration)
     */
    public fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

    /**
     * The horizontal position configuration of the label in a reference line. Choose one of the
     * following options:.
     *
     * * `LEFT`
     * * `CENTER`
     * * `RIGHT`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-horizontalposition)
     */
    public fun horizontalPosition(): String? = unwrap(this).getHorizontalPosition()

    /**
     * The value label configuration of the label in a reference line.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-valuelabelconfiguration)
     */
    public fun valueLabelConfiguration(): Any? = unwrap(this).getValueLabelConfiguration()

    /**
     * The vertical position configuration of the label in a reference line. Choose one of the
     * following options:.
     *
     * * `ABOVE`
     * * `BELOW`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-verticalposition)
     */
    public fun verticalPosition(): String? = unwrap(this).getVerticalPosition()

    /**
     * A builder for [ReferenceLineLabelConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customLabelConfiguration The custom label configuration of the label in a reference
       * line.
       */
      public fun customLabelConfiguration(customLabelConfiguration: IResolvable)

      /**
       * @param customLabelConfiguration The custom label configuration of the label in a reference
       * line.
       */
      public
          fun customLabelConfiguration(customLabelConfiguration: ReferenceLineCustomLabelConfigurationProperty)

      /**
       * @param customLabelConfiguration The custom label configuration of the label in a reference
       * line.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d98b5fbf8823038a36d750153737657939324c4922096ec96509f23e915d824c")
      public
          fun customLabelConfiguration(customLabelConfiguration: ReferenceLineCustomLabelConfigurationProperty.Builder.() -> Unit)

      /**
       * @param fontColor The font color configuration of the label in a reference line.
       */
      public fun fontColor(fontColor: String)

      /**
       * @param fontConfiguration The font configuration of the label in a reference line.
       */
      public fun fontConfiguration(fontConfiguration: IResolvable)

      /**
       * @param fontConfiguration The font configuration of the label in a reference line.
       */
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty)

      /**
       * @param fontConfiguration The font configuration of the label in a reference line.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4c5d4fb45001448cdd5173d7a4b5341b393203146b411bc5204a9241649239fd")
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      /**
       * @param horizontalPosition The horizontal position configuration of the label in a reference
       * line. Choose one of the following options:.
       * * `LEFT`
       * * `CENTER`
       * * `RIGHT`
       */
      public fun horizontalPosition(horizontalPosition: String)

      /**
       * @param valueLabelConfiguration The value label configuration of the label in a reference
       * line.
       */
      public fun valueLabelConfiguration(valueLabelConfiguration: IResolvable)

      /**
       * @param valueLabelConfiguration The value label configuration of the label in a reference
       * line.
       */
      public
          fun valueLabelConfiguration(valueLabelConfiguration: ReferenceLineValueLabelConfigurationProperty)

      /**
       * @param valueLabelConfiguration The value label configuration of the label in a reference
       * line.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b5730a2b42b7a6003f38d9b71dcc7cc77881fc2bcd6ec47f58f5ddb08d085a9f")
      public
          fun valueLabelConfiguration(valueLabelConfiguration: ReferenceLineValueLabelConfigurationProperty.Builder.() -> Unit)

      /**
       * @param verticalPosition The vertical position configuration of the label in a reference
       * line. Choose one of the following options:.
       * * `ABOVE`
       * * `BELOW`
       */
      public fun verticalPosition(verticalPosition: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineLabelConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineLabelConfigurationProperty.builder()

      /**
       * @param customLabelConfiguration The custom label configuration of the label in a reference
       * line.
       */
      override fun customLabelConfiguration(customLabelConfiguration: IResolvable) {
        cdkBuilder.customLabelConfiguration(customLabelConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param customLabelConfiguration The custom label configuration of the label in a reference
       * line.
       */
      override
          fun customLabelConfiguration(customLabelConfiguration: ReferenceLineCustomLabelConfigurationProperty) {
        cdkBuilder.customLabelConfiguration(customLabelConfiguration.let(ReferenceLineCustomLabelConfigurationProperty::unwrap))
      }

      /**
       * @param customLabelConfiguration The custom label configuration of the label in a reference
       * line.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d98b5fbf8823038a36d750153737657939324c4922096ec96509f23e915d824c")
      override
          fun customLabelConfiguration(customLabelConfiguration: ReferenceLineCustomLabelConfigurationProperty.Builder.() -> Unit):
          Unit =
          customLabelConfiguration(ReferenceLineCustomLabelConfigurationProperty(customLabelConfiguration))

      /**
       * @param fontColor The font color configuration of the label in a reference line.
       */
      override fun fontColor(fontColor: String) {
        cdkBuilder.fontColor(fontColor)
      }

      /**
       * @param fontConfiguration The font configuration of the label in a reference line.
       */
      override fun fontConfiguration(fontConfiguration: IResolvable) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param fontConfiguration The font configuration of the label in a reference line.
       */
      override fun fontConfiguration(fontConfiguration: FontConfigurationProperty) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      /**
       * @param fontConfiguration The font configuration of the label in a reference line.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4c5d4fb45001448cdd5173d7a4b5341b393203146b411bc5204a9241649239fd")
      override
          fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = fontConfiguration(FontConfigurationProperty(fontConfiguration))

      /**
       * @param horizontalPosition The horizontal position configuration of the label in a reference
       * line. Choose one of the following options:.
       * * `LEFT`
       * * `CENTER`
       * * `RIGHT`
       */
      override fun horizontalPosition(horizontalPosition: String) {
        cdkBuilder.horizontalPosition(horizontalPosition)
      }

      /**
       * @param valueLabelConfiguration The value label configuration of the label in a reference
       * line.
       */
      override fun valueLabelConfiguration(valueLabelConfiguration: IResolvable) {
        cdkBuilder.valueLabelConfiguration(valueLabelConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param valueLabelConfiguration The value label configuration of the label in a reference
       * line.
       */
      override
          fun valueLabelConfiguration(valueLabelConfiguration: ReferenceLineValueLabelConfigurationProperty) {
        cdkBuilder.valueLabelConfiguration(valueLabelConfiguration.let(ReferenceLineValueLabelConfigurationProperty::unwrap))
      }

      /**
       * @param valueLabelConfiguration The value label configuration of the label in a reference
       * line.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b5730a2b42b7a6003f38d9b71dcc7cc77881fc2bcd6ec47f58f5ddb08d085a9f")
      override
          fun valueLabelConfiguration(valueLabelConfiguration: ReferenceLineValueLabelConfigurationProperty.Builder.() -> Unit):
          Unit =
          valueLabelConfiguration(ReferenceLineValueLabelConfigurationProperty(valueLabelConfiguration))

      /**
       * @param verticalPosition The vertical position configuration of the label in a reference
       * line. Choose one of the following options:.
       * * `ABOVE`
       * * `BELOW`
       */
      override fun verticalPosition(verticalPosition: String) {
        cdkBuilder.verticalPosition(verticalPosition)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineLabelConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineLabelConfigurationProperty,
    ) : ReferenceLineLabelConfigurationProperty {
      /**
       * The custom label configuration of the label in a reference line.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-customlabelconfiguration)
       */
      override fun customLabelConfiguration(): Any? = unwrap(this).getCustomLabelConfiguration()

      /**
       * The font color configuration of the label in a reference line.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-fontcolor)
       */
      override fun fontColor(): String? = unwrap(this).getFontColor()

      /**
       * The font configuration of the label in a reference line.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-fontconfiguration)
       */
      override fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

      /**
       * The horizontal position configuration of the label in a reference line. Choose one of the
       * following options:.
       *
       * * `LEFT`
       * * `CENTER`
       * * `RIGHT`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-horizontalposition)
       */
      override fun horizontalPosition(): String? = unwrap(this).getHorizontalPosition()

      /**
       * The value label configuration of the label in a reference line.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-valuelabelconfiguration)
       */
      override fun valueLabelConfiguration(): Any? = unwrap(this).getValueLabelConfiguration()

      /**
       * The vertical position configuration of the label in a reference line. Choose one of the
       * following options:.
       *
       * * `ABOVE`
       * * `BELOW`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-verticalposition)
       */
      override fun verticalPosition(): String? = unwrap(this).getVerticalPosition()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineLabelConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineLabelConfigurationProperty):
          ReferenceLineLabelConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineLabelConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineLabelConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FieldTooltipItemProperty {
    /**
     * The unique ID of the field that is targeted by the tooltip.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldtooltipitem.html#cfn-quicksight-analysis-fieldtooltipitem-fieldid)
     */
    public fun fieldId(): String

    /**
     * The label of the tooltip item.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldtooltipitem.html#cfn-quicksight-analysis-fieldtooltipitem-label)
     */
    public fun label(): String? = unwrap(this).getLabel()

    /**
     * The visibility of the tooltip item.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldtooltipitem.html#cfn-quicksight-analysis-fieldtooltipitem-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [FieldTooltipItemProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldId The unique ID of the field that is targeted by the tooltip. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param label The label of the tooltip item.
       */
      public fun label(label: String)

      /**
       * @param visibility The visibility of the tooltip item.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldTooltipItemProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldTooltipItemProperty.builder()

      /**
       * @param fieldId The unique ID of the field that is targeted by the tooltip. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param label The label of the tooltip item.
       */
      override fun label(label: String) {
        cdkBuilder.label(label)
      }

      /**
       * @param visibility The visibility of the tooltip item.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldTooltipItemProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldTooltipItemProperty,
    ) : FieldTooltipItemProperty {
      /**
       * The unique ID of the field that is targeted by the tooltip.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldtooltipitem.html#cfn-quicksight-analysis-fieldtooltipitem-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The label of the tooltip item.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldtooltipitem.html#cfn-quicksight-analysis-fieldtooltipitem-label)
       */
      override fun label(): String? = unwrap(this).getLabel()

      /**
       * The visibility of the tooltip item.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldtooltipitem.html#cfn-quicksight-analysis-fieldtooltipitem-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FieldTooltipItemProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldTooltipItemProperty):
          FieldTooltipItemProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FieldTooltipItemProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldTooltipItemProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface KPIConditionalFormattingProperty {
    /**
     * The conditional formatting options of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformatting.html#cfn-quicksight-analysis-kpiconditionalformatting-conditionalformattingoptions)
     */
    public fun conditionalFormattingOptions(): Any? = unwrap(this).getConditionalFormattingOptions()

    /**
     * A builder for [KPIConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param conditionalFormattingOptions The conditional formatting options of a KPI visual.
       */
      public fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable)

      /**
       * @param conditionalFormattingOptions The conditional formatting options of a KPI visual.
       */
      public fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>)

      /**
       * @param conditionalFormattingOptions The conditional formatting options of a KPI visual.
       */
      public fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConditionalFormattingProperty.builder()

      /**
       * @param conditionalFormattingOptions The conditional formatting options of a KPI visual.
       */
      override fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions.let(IResolvable::unwrap))
      }

      /**
       * @param conditionalFormattingOptions The conditional formatting options of a KPI visual.
       */
      override fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions)
      }

      /**
       * @param conditionalFormattingOptions The conditional formatting options of a KPI visual.
       */
      override fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any): Unit =
          conditionalFormattingOptions(conditionalFormattingOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConditionalFormattingProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConditionalFormattingProperty,
    ) : KPIConditionalFormattingProperty {
      /**
       * The conditional formatting options of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformatting.html#cfn-quicksight-analysis-kpiconditionalformatting-conditionalformattingoptions)
       */
      override fun conditionalFormattingOptions(): Any? =
          unwrap(this).getConditionalFormattingOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): KPIConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConditionalFormattingProperty):
          KPIConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConditionalFormattingProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilterSliderControlProperty {
    /**
     * The display options of a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The ID of the `FilterSliderControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-filtercontrolid)
     */
    public fun filterControlId(): String

    /**
     * The smaller value that is displayed at the left of the slider.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-maximumvalue)
     */
    public fun maximumValue(): Number

    /**
     * The larger value that is displayed at the right of the slider.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-minimumvalue)
     */
    public fun minimumValue(): Number

    /**
     * The source filter ID of the `FilterSliderControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-sourcefilterid)
     */
    public fun sourceFilterId(): String

    /**
     * The number of increments that the slider bar is divided into.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-stepsize)
     */
    public fun stepSize(): Number

    /**
     * The title of the `FilterSliderControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-title)
     */
    public fun title(): String

    /**
     * The type of `FilterSliderControl` . Choose one of the following options:.
     *
     * * `SINGLE_POINT` : Filter against(equals) a single data point.
     * * `RANGE` : Filter data that is in a specified range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-type)
     */
    public fun type(): String? = unwrap(this).getType()

    /**
     * A builder for [FilterSliderControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("995d44dcdf9e01be946186d9babcaab1c64fc60839925ebfea36c5172d3a2956")
      public
          fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param filterControlId The ID of the `FilterSliderControl` . 
       */
      public fun filterControlId(filterControlId: String)

      /**
       * @param maximumValue The smaller value that is displayed at the left of the slider. 
       */
      public fun maximumValue(maximumValue: Number)

      /**
       * @param minimumValue The larger value that is displayed at the right of the slider. 
       */
      public fun minimumValue(minimumValue: Number)

      /**
       * @param sourceFilterId The source filter ID of the `FilterSliderControl` . 
       */
      public fun sourceFilterId(sourceFilterId: String)

      /**
       * @param stepSize The number of increments that the slider bar is divided into. 
       */
      public fun stepSize(stepSize: Number)

      /**
       * @param title The title of the `FilterSliderControl` . 
       */
      public fun title(title: String)

      /**
       * @param type The type of `FilterSliderControl` . Choose one of the following options:.
       * * `SINGLE_POINT` : Filter against(equals) a single data point.
       * * `RANGE` : Filter data that is in a specified range.
       */
      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterSliderControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterSliderControlProperty.builder()

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(SliderControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("995d44dcdf9e01be946186d9babcaab1c64fc60839925ebfea36c5172d3a2956")
      override
          fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(SliderControlDisplayOptionsProperty(displayOptions))

      /**
       * @param filterControlId The ID of the `FilterSliderControl` . 
       */
      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      /**
       * @param maximumValue The smaller value that is displayed at the left of the slider. 
       */
      override fun maximumValue(maximumValue: Number) {
        cdkBuilder.maximumValue(maximumValue)
      }

      /**
       * @param minimumValue The larger value that is displayed at the right of the slider. 
       */
      override fun minimumValue(minimumValue: Number) {
        cdkBuilder.minimumValue(minimumValue)
      }

      /**
       * @param sourceFilterId The source filter ID of the `FilterSliderControl` . 
       */
      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      /**
       * @param stepSize The number of increments that the slider bar is divided into. 
       */
      override fun stepSize(stepSize: Number) {
        cdkBuilder.stepSize(stepSize)
      }

      /**
       * @param title The title of the `FilterSliderControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      /**
       * @param type The type of `FilterSliderControl` . Choose one of the following options:.
       * * `SINGLE_POINT` : Filter against(equals) a single data point.
       * * `RANGE` : Filter data that is in a specified range.
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterSliderControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterSliderControlProperty,
    ) : FilterSliderControlProperty {
      /**
       * The display options of a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The ID of the `FilterSliderControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-filtercontrolid)
       */
      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      /**
       * The smaller value that is displayed at the left of the slider.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-maximumvalue)
       */
      override fun maximumValue(): Number = unwrap(this).getMaximumValue()

      /**
       * The larger value that is displayed at the right of the slider.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-minimumvalue)
       */
      override fun minimumValue(): Number = unwrap(this).getMinimumValue()

      /**
       * The source filter ID of the `FilterSliderControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-sourcefilterid)
       */
      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      /**
       * The number of increments that the slider bar is divided into.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-stepsize)
       */
      override fun stepSize(): Number = unwrap(this).getStepSize()

      /**
       * The title of the `FilterSliderControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()

      /**
       * The type of `FilterSliderControl` . Choose one of the following options:.
       *
       * * `SINGLE_POINT` : Filter against(equals) a single data point.
       * * `RANGE` : Filter data that is in a specified range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-type)
       */
      override fun type(): String? = unwrap(this).getType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilterSliderControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterSliderControlProperty):
          FilterSliderControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterSliderControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterSliderControlProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PieChartConfigurationProperty {
    /**
     * The label options of the group/color that is displayed in a pie chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-categorylabeloptions)
     */
    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    /**
     * The contribution analysis (anomaly configuration) setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-contributionanalysisdefaults)
     */
    public fun contributionAnalysisDefaults(): Any? = unwrap(this).getContributionAnalysisDefaults()

    /**
     * The options that determine if visual data labels are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-datalabels)
     */
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    /**
     * The options that determine the shape of the chart.
     *
     * This option determines whether the chart is a pie chart or a donut chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-donutoptions)
     */
    public fun donutOptions(): Any? = unwrap(this).getDonutOptions()

    /**
     * The field wells of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The legend display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-legend)
     */
    public fun legend(): Any? = unwrap(this).getLegend()

    /**
     * The small multiples setup for the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-smallmultiplesoptions)
     */
    public fun smallMultiplesOptions(): Any? = unwrap(this).getSmallMultiplesOptions()

    /**
     * The sort configuration of a pie chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The tooltip display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-tooltip)
     */
    public fun tooltip(): Any? = unwrap(this).getTooltip()

    /**
     * The label options for the value that is displayed in a pie chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-valuelabeloptions)
     */
    public fun valueLabelOptions(): Any? = unwrap(this).getValueLabelOptions()

    /**
     * The palette (chart color) display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-visualpalette)
     */
    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    /**
     * A builder for [PieChartConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryLabelOptions The label options of the group/color that is displayed in a pie
       * chart.
       */
      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      /**
       * @param categoryLabelOptions The label options of the group/color that is displayed in a pie
       * chart.
       */
      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param categoryLabelOptions The label options of the group/color that is displayed in a pie
       * chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e469cae869146f9a701a7fa59d85025be0e3961fc5d6fc93c916155da9273ae")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param contributionAnalysisDefaults The contribution analysis (anomaly configuration) setup
       * of the visual.
       */
      public fun contributionAnalysisDefaults(contributionAnalysisDefaults: IResolvable)

      /**
       * @param contributionAnalysisDefaults The contribution analysis (anomaly configuration) setup
       * of the visual.
       */
      public fun contributionAnalysisDefaults(contributionAnalysisDefaults: List<Any>)

      /**
       * @param contributionAnalysisDefaults The contribution analysis (anomaly configuration) setup
       * of the visual.
       */
      public fun contributionAnalysisDefaults(vararg contributionAnalysisDefaults: Any)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      public fun dataLabels(dataLabels: IResolvable)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1a93dbc8b16214281eb86f7f5b3576c0adb4a50b82b3977943e9b1edbc1f0516")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param donutOptions The options that determine the shape of the chart.
       * This option determines whether the chart is a pie chart or a donut chart.
       */
      public fun donutOptions(donutOptions: IResolvable)

      /**
       * @param donutOptions The options that determine the shape of the chart.
       * This option determines whether the chart is a pie chart or a donut chart.
       */
      public fun donutOptions(donutOptions: DonutOptionsProperty)

      /**
       * @param donutOptions The options that determine the shape of the chart.
       * This option determines whether the chart is a pie chart or a donut chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("19f764bfdff9210f21a54f21a62dc4d095357abc04f3d4a747a97152161a2348")
      public fun donutOptions(donutOptions: DonutOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: PieChartFieldWellsProperty)

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b2f09516ecfcf21c2ebdbe2330106c4a4621952d8ae3e3b2a58619ce31ce0d5c")
      public fun fieldWells(fieldWells: PieChartFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: IResolvable)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: LegendOptionsProperty)

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d122398adda28f19aa7139a5286dbbdc9e25a8b0180674751d596fd01bd0f555")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      public fun smallMultiplesOptions(smallMultiplesOptions: IResolvable)

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      public fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty)

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e820297f76c676fc0a46c40beb00656a473e2706469e49e8eeaad3fc2d7a3159")
      public
          fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration of a pie chart.
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a pie chart.
       */
      public fun sortConfiguration(sortConfiguration: PieChartSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a pie chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("56089daa42283c39c76aa1f9763de75a320342832b06aab53470cd3e9041e191")
      public
          fun sortConfiguration(sortConfiguration: PieChartSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: IResolvable)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: TooltipOptionsProperty)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0f3f1daf5da5a96efbdbc2cc9f9d8adad95fad104943428081e6283d5f3e4a90")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      /**
       * @param valueLabelOptions The label options for the value that is displayed in a pie chart.
       */
      public fun valueLabelOptions(valueLabelOptions: IResolvable)

      /**
       * @param valueLabelOptions The label options for the value that is displayed in a pie chart.
       */
      public fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param valueLabelOptions The label options for the value that is displayed in a pie chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eef691e41fbe1ef7939ca7caf63a761cb885cc508013daef5cb47cbc34b70b58")
      public
          fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      public fun visualPalette(visualPalette: IResolvable)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      public fun visualPalette(visualPalette: VisualPaletteProperty)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d206c8afea6fed53da5033350cffc781069997db43162bf26f12889077868750")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartConfigurationProperty.builder()

      /**
       * @param categoryLabelOptions The label options of the group/color that is displayed in a pie
       * chart.
       */
      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param categoryLabelOptions The label options of the group/color that is displayed in a pie
       * chart.
       */
      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param categoryLabelOptions The label options of the group/color that is displayed in a pie
       * chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e469cae869146f9a701a7fa59d85025be0e3961fc5d6fc93c916155da9273ae")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      /**
       * @param contributionAnalysisDefaults The contribution analysis (anomaly configuration) setup
       * of the visual.
       */
      override fun contributionAnalysisDefaults(contributionAnalysisDefaults: IResolvable) {
        cdkBuilder.contributionAnalysisDefaults(contributionAnalysisDefaults.let(IResolvable::unwrap))
      }

      /**
       * @param contributionAnalysisDefaults The contribution analysis (anomaly configuration) setup
       * of the visual.
       */
      override fun contributionAnalysisDefaults(contributionAnalysisDefaults: List<Any>) {
        cdkBuilder.contributionAnalysisDefaults(contributionAnalysisDefaults)
      }

      /**
       * @param contributionAnalysisDefaults The contribution analysis (anomaly configuration) setup
       * of the visual.
       */
      override fun contributionAnalysisDefaults(vararg contributionAnalysisDefaults: Any): Unit =
          contributionAnalysisDefaults(contributionAnalysisDefaults.toList())

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1a93dbc8b16214281eb86f7f5b3576c0adb4a50b82b3977943e9b1edbc1f0516")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      /**
       * @param donutOptions The options that determine the shape of the chart.
       * This option determines whether the chart is a pie chart or a donut chart.
       */
      override fun donutOptions(donutOptions: IResolvable) {
        cdkBuilder.donutOptions(donutOptions.let(IResolvable::unwrap))
      }

      /**
       * @param donutOptions The options that determine the shape of the chart.
       * This option determines whether the chart is a pie chart or a donut chart.
       */
      override fun donutOptions(donutOptions: DonutOptionsProperty) {
        cdkBuilder.donutOptions(donutOptions.let(DonutOptionsProperty::unwrap))
      }

      /**
       * @param donutOptions The options that determine the shape of the chart.
       * This option determines whether the chart is a pie chart or a donut chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("19f764bfdff9210f21a54f21a62dc4d095357abc04f3d4a747a97152161a2348")
      override fun donutOptions(donutOptions: DonutOptionsProperty.Builder.() -> Unit): Unit =
          donutOptions(DonutOptionsProperty(donutOptions))

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: PieChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(PieChartFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b2f09516ecfcf21c2ebdbe2330106c4a4621952d8ae3e3b2a58619ce31ce0d5c")
      override fun fieldWells(fieldWells: PieChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(PieChartFieldWellsProperty(fieldWells))

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d122398adda28f19aa7139a5286dbbdc9e25a8b0180674751d596fd01bd0f555")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      override fun smallMultiplesOptions(smallMultiplesOptions: IResolvable) {
        cdkBuilder.smallMultiplesOptions(smallMultiplesOptions.let(IResolvable::unwrap))
      }

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      override fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty) {
        cdkBuilder.smallMultiplesOptions(smallMultiplesOptions.let(SmallMultiplesOptionsProperty::unwrap))
      }

      /**
       * @param smallMultiplesOptions The small multiples setup for the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e820297f76c676fc0a46c40beb00656a473e2706469e49e8eeaad3fc2d7a3159")
      override
          fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty.Builder.() -> Unit):
          Unit = smallMultiplesOptions(SmallMultiplesOptionsProperty(smallMultiplesOptions))

      /**
       * @param sortConfiguration The sort configuration of a pie chart.
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a pie chart.
       */
      override fun sortConfiguration(sortConfiguration: PieChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(PieChartSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a pie chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("56089daa42283c39c76aa1f9763de75a320342832b06aab53470cd3e9041e191")
      override
          fun sortConfiguration(sortConfiguration: PieChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(PieChartSortConfigurationProperty(sortConfiguration))

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0f3f1daf5da5a96efbdbc2cc9f9d8adad95fad104943428081e6283d5f3e4a90")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      /**
       * @param valueLabelOptions The label options for the value that is displayed in a pie chart.
       */
      override fun valueLabelOptions(valueLabelOptions: IResolvable) {
        cdkBuilder.valueLabelOptions(valueLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param valueLabelOptions The label options for the value that is displayed in a pie chart.
       */
      override fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.valueLabelOptions(valueLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param valueLabelOptions The label options for the value that is displayed in a pie chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eef691e41fbe1ef7939ca7caf63a761cb885cc508013daef5cb47cbc34b70b58")
      override
          fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = valueLabelOptions(ChartAxisLabelOptionsProperty(valueLabelOptions))

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d206c8afea6fed53da5033350cffc781069997db43162bf26f12889077868750")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartConfigurationProperty,
    ) : PieChartConfigurationProperty {
      /**
       * The label options of the group/color that is displayed in a pie chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-categorylabeloptions)
       */
      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      /**
       * The contribution analysis (anomaly configuration) setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-contributionanalysisdefaults)
       */
      override fun contributionAnalysisDefaults(): Any? =
          unwrap(this).getContributionAnalysisDefaults()

      /**
       * The options that determine if visual data labels are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-datalabels)
       */
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      /**
       * The options that determine the shape of the chart.
       *
       * This option determines whether the chart is a pie chart or a donut chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-donutoptions)
       */
      override fun donutOptions(): Any? = unwrap(this).getDonutOptions()

      /**
       * The field wells of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The legend display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-legend)
       */
      override fun legend(): Any? = unwrap(this).getLegend()

      /**
       * The small multiples setup for the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-smallmultiplesoptions)
       */
      override fun smallMultiplesOptions(): Any? = unwrap(this).getSmallMultiplesOptions()

      /**
       * The sort configuration of a pie chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The tooltip display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-tooltip)
       */
      override fun tooltip(): Any? = unwrap(this).getTooltip()

      /**
       * The label options for the value that is displayed in a pie chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-valuelabeloptions)
       */
      override fun valueLabelOptions(): Any? = unwrap(this).getValueLabelOptions()

      /**
       * The palette (chart color) display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-visualpalette)
       */
      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PieChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartConfigurationProperty):
          PieChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PieChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PieChartVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration of a pie chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [PieChartVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration of a pie chart.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration of a pie chart.
       */
      public fun chartConfiguration(chartConfiguration: PieChartConfigurationProperty)

      /**
       * @param chartConfiguration The configuration of a pie chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e2381dcbac38ac58a6d35376a6ff2612a0b7b034cbfeba2d4da2916266f12568")
      public
          fun chartConfiguration(chartConfiguration: PieChartConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1358093cf5a2cd2a7dbecfbf7a1ff8ab07537617ec7ba292cf22ecae953a9bfa")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b920418320402db431e363a5f6319d8c073c3d880d7c2aa445774ec52fd18c69")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration of a pie chart.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a pie chart.
       */
      override fun chartConfiguration(chartConfiguration: PieChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(PieChartConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a pie chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e2381dcbac38ac58a6d35376a6ff2612a0b7b034cbfeba2d4da2916266f12568")
      override
          fun chartConfiguration(chartConfiguration: PieChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(PieChartConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1358093cf5a2cd2a7dbecfbf7a1ff8ab07537617ec7ba292cf22ecae953a9bfa")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b920418320402db431e363a5f6319d8c073c3d880d7c2aa445774ec52fd18c69")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartVisualProperty,
    ) : PieChartVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration of a pie chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PieChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartVisualProperty):
          PieChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PieChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartVisualProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface RadarChartVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration settings of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [RadarChartVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: RadarChartConfigurationProperty)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("86e260aed88c3816682cf4ebb6d7919c99ae32f9ba23ba5b55f054382dfe0c41")
      public
          fun chartConfiguration(chartConfiguration: RadarChartConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("26bcab04a6ddeb05a08cafa2963715ebebbe2362a7b341f74f15a2d01ec40ce7")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd314448b249ffa7531e997ff656a30e74a5a4fd70505de8feb882f0bad507c4")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: RadarChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(RadarChartConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("86e260aed88c3816682cf4ebb6d7919c99ae32f9ba23ba5b55f054382dfe0c41")
      override
          fun chartConfiguration(chartConfiguration: RadarChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(RadarChartConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("26bcab04a6ddeb05a08cafa2963715ebebbe2362a7b341f74f15a2d01ec40ce7")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd314448b249ffa7531e997ff656a30e74a5a4fd70505de8feb882f0bad507c4")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartVisualProperty,
    ) : RadarChartVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration settings of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): RadarChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartVisualProperty):
          RadarChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartVisualProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface FilterOperationTargetVisualsConfigurationProperty {
    /**
     * The configuration of the same-sheet target visuals that you want to be filtered.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationtargetvisualsconfiguration.html#cfn-quicksight-analysis-filteroperationtargetvisualsconfiguration-samesheettargetvisualconfiguration)
     */
    public fun sameSheetTargetVisualConfiguration(): Any? =
        unwrap(this).getSameSheetTargetVisualConfiguration()

    /**
     * A builder for [FilterOperationTargetVisualsConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param sameSheetTargetVisualConfiguration The configuration of the same-sheet target
       * visuals that you want to be filtered.
       */
      public fun sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration: IResolvable)

      /**
       * @param sameSheetTargetVisualConfiguration The configuration of the same-sheet target
       * visuals that you want to be filtered.
       */
      public
          fun sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration: SameSheetTargetVisualConfigurationProperty)

      /**
       * @param sameSheetTargetVisualConfiguration The configuration of the same-sheet target
       * visuals that you want to be filtered.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b22615bf46abb556a7a7e7213630282bb38cd0e25ac8461b53d79a8b2d4832ce")
      public
          fun sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration: SameSheetTargetVisualConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterOperationTargetVisualsConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterOperationTargetVisualsConfigurationProperty.builder()

      /**
       * @param sameSheetTargetVisualConfiguration The configuration of the same-sheet target
       * visuals that you want to be filtered.
       */
      override
          fun sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration: IResolvable) {
        cdkBuilder.sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sameSheetTargetVisualConfiguration The configuration of the same-sheet target
       * visuals that you want to be filtered.
       */
      override
          fun sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration: SameSheetTargetVisualConfigurationProperty) {
        cdkBuilder.sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration.let(SameSheetTargetVisualConfigurationProperty::unwrap))
      }

      /**
       * @param sameSheetTargetVisualConfiguration The configuration of the same-sheet target
       * visuals that you want to be filtered.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b22615bf46abb556a7a7e7213630282bb38cd0e25ac8461b53d79a8b2d4832ce")
      override
          fun sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration: SameSheetTargetVisualConfigurationProperty.Builder.() -> Unit):
          Unit =
          sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty(sameSheetTargetVisualConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterOperationTargetVisualsConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterOperationTargetVisualsConfigurationProperty,
    ) : FilterOperationTargetVisualsConfigurationProperty {
      /**
       * The configuration of the same-sheet target visuals that you want to be filtered.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationtargetvisualsconfiguration.html#cfn-quicksight-analysis-filteroperationtargetvisualsconfiguration-samesheettargetvisualconfiguration)
       */
      override fun sameSheetTargetVisualConfiguration(): Any? =
          unwrap(this).getSameSheetTargetVisualConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilterOperationTargetVisualsConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterOperationTargetVisualsConfigurationProperty):
          FilterOperationTargetVisualsConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterOperationTargetVisualsConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterOperationTargetVisualsConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SeriesItemProperty {
    /**
     * The data field series item configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-seriesitem.html#cfn-quicksight-analysis-seriesitem-datafieldseriesitem)
     */
    public fun dataFieldSeriesItem(): Any? = unwrap(this).getDataFieldSeriesItem()

    /**
     * The field series item configuration of a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-seriesitem.html#cfn-quicksight-analysis-seriesitem-fieldseriesitem)
     */
    public fun fieldSeriesItem(): Any? = unwrap(this).getFieldSeriesItem()

    /**
     * A builder for [SeriesItemProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataFieldSeriesItem The data field series item configuration of a line chart.
       */
      public fun dataFieldSeriesItem(dataFieldSeriesItem: IResolvable)

      /**
       * @param dataFieldSeriesItem The data field series item configuration of a line chart.
       */
      public fun dataFieldSeriesItem(dataFieldSeriesItem: DataFieldSeriesItemProperty)

      /**
       * @param dataFieldSeriesItem The data field series item configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("95505785731056f8bc1bb5d56dc0f0ec08fbaf8fef7f89b9ff8a68febb657d7d")
      public
          fun dataFieldSeriesItem(dataFieldSeriesItem: DataFieldSeriesItemProperty.Builder.() -> Unit)

      /**
       * @param fieldSeriesItem The field series item configuration of a line chart.
       */
      public fun fieldSeriesItem(fieldSeriesItem: IResolvable)

      /**
       * @param fieldSeriesItem The field series item configuration of a line chart.
       */
      public fun fieldSeriesItem(fieldSeriesItem: FieldSeriesItemProperty)

      /**
       * @param fieldSeriesItem The field series item configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3210eb8ea9b17c82409e07ebdfc39fbfe56511932d41164b060ef24ca6023635")
      public fun fieldSeriesItem(fieldSeriesItem: FieldSeriesItemProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SeriesItemProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SeriesItemProperty.builder()

      /**
       * @param dataFieldSeriesItem The data field series item configuration of a line chart.
       */
      override fun dataFieldSeriesItem(dataFieldSeriesItem: IResolvable) {
        cdkBuilder.dataFieldSeriesItem(dataFieldSeriesItem.let(IResolvable::unwrap))
      }

      /**
       * @param dataFieldSeriesItem The data field series item configuration of a line chart.
       */
      override fun dataFieldSeriesItem(dataFieldSeriesItem: DataFieldSeriesItemProperty) {
        cdkBuilder.dataFieldSeriesItem(dataFieldSeriesItem.let(DataFieldSeriesItemProperty::unwrap))
      }

      /**
       * @param dataFieldSeriesItem The data field series item configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("95505785731056f8bc1bb5d56dc0f0ec08fbaf8fef7f89b9ff8a68febb657d7d")
      override
          fun dataFieldSeriesItem(dataFieldSeriesItem: DataFieldSeriesItemProperty.Builder.() -> Unit):
          Unit = dataFieldSeriesItem(DataFieldSeriesItemProperty(dataFieldSeriesItem))

      /**
       * @param fieldSeriesItem The field series item configuration of a line chart.
       */
      override fun fieldSeriesItem(fieldSeriesItem: IResolvable) {
        cdkBuilder.fieldSeriesItem(fieldSeriesItem.let(IResolvable::unwrap))
      }

      /**
       * @param fieldSeriesItem The field series item configuration of a line chart.
       */
      override fun fieldSeriesItem(fieldSeriesItem: FieldSeriesItemProperty) {
        cdkBuilder.fieldSeriesItem(fieldSeriesItem.let(FieldSeriesItemProperty::unwrap))
      }

      /**
       * @param fieldSeriesItem The field series item configuration of a line chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3210eb8ea9b17c82409e07ebdfc39fbfe56511932d41164b060ef24ca6023635")
      override fun fieldSeriesItem(fieldSeriesItem: FieldSeriesItemProperty.Builder.() -> Unit):
          Unit = fieldSeriesItem(FieldSeriesItemProperty(fieldSeriesItem))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.SeriesItemProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SeriesItemProperty,
    ) : SeriesItemProperty {
      /**
       * The data field series item configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-seriesitem.html#cfn-quicksight-analysis-seriesitem-datafieldseriesitem)
       */
      override fun dataFieldSeriesItem(): Any? = unwrap(this).getDataFieldSeriesItem()

      /**
       * The field series item configuration of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-seriesitem.html#cfn-quicksight-analysis-seriesitem-fieldseriesitem)
       */
      override fun fieldSeriesItem(): Any? = unwrap(this).getFieldSeriesItem()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SeriesItemProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SeriesItemProperty):
          SeriesItemProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SeriesItemProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SeriesItemProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface BarChartVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration settings of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [BarChartVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: BarChartConfigurationProperty)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5388f408f0b7effb3f353e215b9b09cf0f3f0a81030d4ecbae945d9b09505106")
      public
          fun chartConfiguration(chartConfiguration: BarChartConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f70ffd66a3be42e5c08203bf20939c2f78ea94c38057f2ff2a7abe097a1d5b1d")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("86fbb53c888efcdd92aee7825c05abb854c36ab0ddc828441a8c83311e2ae0bd")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: BarChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(BarChartConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5388f408f0b7effb3f353e215b9b09cf0f3f0a81030d4ecbae945d9b09505106")
      override
          fun chartConfiguration(chartConfiguration: BarChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(BarChartConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f70ffd66a3be42e5c08203bf20939c2f78ea94c38057f2ff2a7abe097a1d5b1d")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("86fbb53c888efcdd92aee7825c05abb854c36ab0ddc828441a8c83311e2ae0bd")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartVisualProperty,
    ) : BarChartVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration settings of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): BarChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartVisualProperty):
          BarChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BarChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartVisualProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface ColumnHierarchyProperty {
    /**
     * The option that determines the hierarchy of any `DateTime` fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnhierarchy.html#cfn-quicksight-analysis-columnhierarchy-datetimehierarchy)
     */
    public fun dateTimeHierarchy(): Any? = unwrap(this).getDateTimeHierarchy()

    /**
     * The option that determines the hierarchy of the fields that are built within a visual's field
     * wells.
     *
     * These fields can't be duplicated to other visuals.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnhierarchy.html#cfn-quicksight-analysis-columnhierarchy-explicithierarchy)
     */
    public fun explicitHierarchy(): Any? = unwrap(this).getExplicitHierarchy()

    /**
     * The option that determines the hierarchy of the fields that are defined during data
     * preparation.
     *
     * These fields are available to use in any analysis that uses the data source.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnhierarchy.html#cfn-quicksight-analysis-columnhierarchy-predefinedhierarchy)
     */
    public fun predefinedHierarchy(): Any? = unwrap(this).getPredefinedHierarchy()

    /**
     * A builder for [ColumnHierarchyProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dateTimeHierarchy The option that determines the hierarchy of any `DateTime` fields.
       */
      public fun dateTimeHierarchy(dateTimeHierarchy: IResolvable)

      /**
       * @param dateTimeHierarchy The option that determines the hierarchy of any `DateTime` fields.
       */
      public fun dateTimeHierarchy(dateTimeHierarchy: DateTimeHierarchyProperty)

      /**
       * @param dateTimeHierarchy The option that determines the hierarchy of any `DateTime` fields.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3fe8bab11b4d8b563e640ccd95aa590f4b3dcaf29d2c3f5273598b8efb18decf")
      public fun dateTimeHierarchy(dateTimeHierarchy: DateTimeHierarchyProperty.Builder.() -> Unit)

      /**
       * @param explicitHierarchy The option that determines the hierarchy of the fields that are
       * built within a visual's field wells.
       * These fields can't be duplicated to other visuals.
       */
      public fun explicitHierarchy(explicitHierarchy: IResolvable)

      /**
       * @param explicitHierarchy The option that determines the hierarchy of the fields that are
       * built within a visual's field wells.
       * These fields can't be duplicated to other visuals.
       */
      public fun explicitHierarchy(explicitHierarchy: ExplicitHierarchyProperty)

      /**
       * @param explicitHierarchy The option that determines the hierarchy of the fields that are
       * built within a visual's field wells.
       * These fields can't be duplicated to other visuals.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("20d244c94b37f3b260eaaf412d031fed32785b8d3d2e37f50e9002df37b7f34d")
      public fun explicitHierarchy(explicitHierarchy: ExplicitHierarchyProperty.Builder.() -> Unit)

      /**
       * @param predefinedHierarchy The option that determines the hierarchy of the fields that are
       * defined during data preparation.
       * These fields are available to use in any analysis that uses the data source.
       */
      public fun predefinedHierarchy(predefinedHierarchy: IResolvable)

      /**
       * @param predefinedHierarchy The option that determines the hierarchy of the fields that are
       * defined during data preparation.
       * These fields are available to use in any analysis that uses the data source.
       */
      public fun predefinedHierarchy(predefinedHierarchy: PredefinedHierarchyProperty)

      /**
       * @param predefinedHierarchy The option that determines the hierarchy of the fields that are
       * defined during data preparation.
       * These fields are available to use in any analysis that uses the data source.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4cc76c10bf19cd05bda7e3925a7e41aba7ddda7cbabf4032a3f45b55582d7334")
      public
          fun predefinedHierarchy(predefinedHierarchy: PredefinedHierarchyProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnHierarchyProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnHierarchyProperty.builder()

      /**
       * @param dateTimeHierarchy The option that determines the hierarchy of any `DateTime` fields.
       */
      override fun dateTimeHierarchy(dateTimeHierarchy: IResolvable) {
        cdkBuilder.dateTimeHierarchy(dateTimeHierarchy.let(IResolvable::unwrap))
      }

      /**
       * @param dateTimeHierarchy The option that determines the hierarchy of any `DateTime` fields.
       */
      override fun dateTimeHierarchy(dateTimeHierarchy: DateTimeHierarchyProperty) {
        cdkBuilder.dateTimeHierarchy(dateTimeHierarchy.let(DateTimeHierarchyProperty::unwrap))
      }

      /**
       * @param dateTimeHierarchy The option that determines the hierarchy of any `DateTime` fields.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3fe8bab11b4d8b563e640ccd95aa590f4b3dcaf29d2c3f5273598b8efb18decf")
      override
          fun dateTimeHierarchy(dateTimeHierarchy: DateTimeHierarchyProperty.Builder.() -> Unit):
          Unit = dateTimeHierarchy(DateTimeHierarchyProperty(dateTimeHierarchy))

      /**
       * @param explicitHierarchy The option that determines the hierarchy of the fields that are
       * built within a visual's field wells.
       * These fields can't be duplicated to other visuals.
       */
      override fun explicitHierarchy(explicitHierarchy: IResolvable) {
        cdkBuilder.explicitHierarchy(explicitHierarchy.let(IResolvable::unwrap))
      }

      /**
       * @param explicitHierarchy The option that determines the hierarchy of the fields that are
       * built within a visual's field wells.
       * These fields can't be duplicated to other visuals.
       */
      override fun explicitHierarchy(explicitHierarchy: ExplicitHierarchyProperty) {
        cdkBuilder.explicitHierarchy(explicitHierarchy.let(ExplicitHierarchyProperty::unwrap))
      }

      /**
       * @param explicitHierarchy The option that determines the hierarchy of the fields that are
       * built within a visual's field wells.
       * These fields can't be duplicated to other visuals.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("20d244c94b37f3b260eaaf412d031fed32785b8d3d2e37f50e9002df37b7f34d")
      override
          fun explicitHierarchy(explicitHierarchy: ExplicitHierarchyProperty.Builder.() -> Unit):
          Unit = explicitHierarchy(ExplicitHierarchyProperty(explicitHierarchy))

      /**
       * @param predefinedHierarchy The option that determines the hierarchy of the fields that are
       * defined during data preparation.
       * These fields are available to use in any analysis that uses the data source.
       */
      override fun predefinedHierarchy(predefinedHierarchy: IResolvable) {
        cdkBuilder.predefinedHierarchy(predefinedHierarchy.let(IResolvable::unwrap))
      }

      /**
       * @param predefinedHierarchy The option that determines the hierarchy of the fields that are
       * defined during data preparation.
       * These fields are available to use in any analysis that uses the data source.
       */
      override fun predefinedHierarchy(predefinedHierarchy: PredefinedHierarchyProperty) {
        cdkBuilder.predefinedHierarchy(predefinedHierarchy.let(PredefinedHierarchyProperty::unwrap))
      }

      /**
       * @param predefinedHierarchy The option that determines the hierarchy of the fields that are
       * defined during data preparation.
       * These fields are available to use in any analysis that uses the data source.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4cc76c10bf19cd05bda7e3925a7e41aba7ddda7cbabf4032a3f45b55582d7334")
      override
          fun predefinedHierarchy(predefinedHierarchy: PredefinedHierarchyProperty.Builder.() -> Unit):
          Unit = predefinedHierarchy(PredefinedHierarchyProperty(predefinedHierarchy))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnHierarchyProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnHierarchyProperty,
    ) : ColumnHierarchyProperty {
      /**
       * The option that determines the hierarchy of any `DateTime` fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnhierarchy.html#cfn-quicksight-analysis-columnhierarchy-datetimehierarchy)
       */
      override fun dateTimeHierarchy(): Any? = unwrap(this).getDateTimeHierarchy()

      /**
       * The option that determines the hierarchy of the fields that are built within a visual's
       * field wells.
       *
       * These fields can't be duplicated to other visuals.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnhierarchy.html#cfn-quicksight-analysis-columnhierarchy-explicithierarchy)
       */
      override fun explicitHierarchy(): Any? = unwrap(this).getExplicitHierarchy()

      /**
       * The option that determines the hierarchy of the fields that are defined during data
       * preparation.
       *
       * These fields are available to use in any analysis that uses the data source.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnhierarchy.html#cfn-quicksight-analysis-columnhierarchy-predefinedhierarchy)
       */
      override fun predefinedHierarchy(): Any? = unwrap(this).getPredefinedHierarchy()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnHierarchyProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnHierarchyProperty):
          ColumnHierarchyProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnHierarchyProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnHierarchyProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface FilledMapShapeConditionalFormattingProperty {
    /**
     * The field ID of the filled map shape.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapshapeconditionalformatting.html#cfn-quicksight-analysis-filledmapshapeconditionalformatting-fieldid)
     */
    public fun fieldId(): String

    /**
     * The conditional formatting that determines the background color of a filled map's shape.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapshapeconditionalformatting.html#cfn-quicksight-analysis-filledmapshapeconditionalformatting-format)
     */
    public fun format(): Any? = unwrap(this).getFormat()

    /**
     * A builder for [FilledMapShapeConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldId The field ID of the filled map shape. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param format The conditional formatting that determines the background color of a filled
       * map's shape.
       */
      public fun format(format: IResolvable)

      /**
       * @param format The conditional formatting that determines the background color of a filled
       * map's shape.
       */
      public fun format(format: ShapeConditionalFormatProperty)

      /**
       * @param format The conditional formatting that determines the background color of a filled
       * map's shape.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2d23d6f557f8c783ce7a9a1f1ca27cc5b3f6e21c6d20594fd6ac4e06068efc85")
      public fun format(format: ShapeConditionalFormatProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapShapeConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapShapeConditionalFormattingProperty.builder()

      /**
       * @param fieldId The field ID of the filled map shape. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param format The conditional formatting that determines the background color of a filled
       * map's shape.
       */
      override fun format(format: IResolvable) {
        cdkBuilder.format(format.let(IResolvable::unwrap))
      }

      /**
       * @param format The conditional formatting that determines the background color of a filled
       * map's shape.
       */
      override fun format(format: ShapeConditionalFormatProperty) {
        cdkBuilder.format(format.let(ShapeConditionalFormatProperty::unwrap))
      }

      /**
       * @param format The conditional formatting that determines the background color of a filled
       * map's shape.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2d23d6f557f8c783ce7a9a1f1ca27cc5b3f6e21c6d20594fd6ac4e06068efc85")
      override fun format(format: ShapeConditionalFormatProperty.Builder.() -> Unit): Unit =
          format(ShapeConditionalFormatProperty(format))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapShapeConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapShapeConditionalFormattingProperty,
    ) : FilledMapShapeConditionalFormattingProperty {
      /**
       * The field ID of the filled map shape.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapshapeconditionalformatting.html#cfn-quicksight-analysis-filledmapshapeconditionalformatting-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The conditional formatting that determines the background color of a filled map's shape.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapshapeconditionalformatting.html#cfn-quicksight-analysis-filledmapshapeconditionalformatting-format)
       */
      override fun format(): Any? = unwrap(this).getFormat()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilledMapShapeConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapShapeConditionalFormattingProperty):
          FilledMapShapeConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapShapeConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapShapeConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SankeyDiagramChartConfigurationProperty {
    /**
     * The data label configuration of a sankey diagram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramchartconfiguration.html#cfn-quicksight-analysis-sankeydiagramchartconfiguration-datalabels)
     */
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    /**
     * The field well configuration of a sankey diagram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramchartconfiguration.html#cfn-quicksight-analysis-sankeydiagramchartconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The sort configuration of a sankey diagram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramchartconfiguration.html#cfn-quicksight-analysis-sankeydiagramchartconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * A builder for [SankeyDiagramChartConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataLabels The data label configuration of a sankey diagram.
       */
      public fun dataLabels(dataLabels: IResolvable)

      /**
       * @param dataLabels The data label configuration of a sankey diagram.
       */
      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      /**
       * @param dataLabels The data label configuration of a sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ed3689271fb68ce91e2f8258e0d649f1e46a8132a7fe2628805693b74d62dab")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field well configuration of a sankey diagram.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field well configuration of a sankey diagram.
       */
      public fun fieldWells(fieldWells: SankeyDiagramFieldWellsProperty)

      /**
       * @param fieldWells The field well configuration of a sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6f62a79fbcc2de46d6c09c2943eed8c9f517f8ab4a1d8f98c0f1283005ee15c0")
      public fun fieldWells(fieldWells: SankeyDiagramFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration of a sankey diagram.
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a sankey diagram.
       */
      public fun sortConfiguration(sortConfiguration: SankeyDiagramSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8a5f23298606cea247cd9d0f3096789f6f26e9c01fd56b3ed1c037989961753f")
      public
          fun sortConfiguration(sortConfiguration: SankeyDiagramSortConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramChartConfigurationProperty.builder()

      /**
       * @param dataLabels The data label configuration of a sankey diagram.
       */
      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      /**
       * @param dataLabels The data label configuration of a sankey diagram.
       */
      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      /**
       * @param dataLabels The data label configuration of a sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ed3689271fb68ce91e2f8258e0d649f1e46a8132a7fe2628805693b74d62dab")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      /**
       * @param fieldWells The field well configuration of a sankey diagram.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a sankey diagram.
       */
      override fun fieldWells(fieldWells: SankeyDiagramFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(SankeyDiagramFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6f62a79fbcc2de46d6c09c2943eed8c9f517f8ab4a1d8f98c0f1283005ee15c0")
      override fun fieldWells(fieldWells: SankeyDiagramFieldWellsProperty.Builder.() -> Unit): Unit
          = fieldWells(SankeyDiagramFieldWellsProperty(fieldWells))

      /**
       * @param sortConfiguration The sort configuration of a sankey diagram.
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a sankey diagram.
       */
      override fun sortConfiguration(sortConfiguration: SankeyDiagramSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(SankeyDiagramSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8a5f23298606cea247cd9d0f3096789f6f26e9c01fd56b3ed1c037989961753f")
      override
          fun sortConfiguration(sortConfiguration: SankeyDiagramSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(SankeyDiagramSortConfigurationProperty(sortConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramChartConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramChartConfigurationProperty,
    ) : SankeyDiagramChartConfigurationProperty {
      /**
       * The data label configuration of a sankey diagram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramchartconfiguration.html#cfn-quicksight-analysis-sankeydiagramchartconfiguration-datalabels)
       */
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      /**
       * The field well configuration of a sankey diagram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramchartconfiguration.html#cfn-quicksight-analysis-sankeydiagramchartconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The sort configuration of a sankey diagram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramchartconfiguration.html#cfn-quicksight-analysis-sankeydiagramchartconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SankeyDiagramChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramChartConfigurationProperty):
          SankeyDiagramChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SankeyDiagramChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramChartConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SheetControlInfoIconLabelOptionsProperty {
    /**
     * The text content of info icon.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrolinfoiconlabeloptions.html#cfn-quicksight-analysis-sheetcontrolinfoiconlabeloptions-infoicontext)
     */
    public fun infoIconText(): String? = unwrap(this).getInfoIconText()

    /**
     * The visibility configuration of info icon label options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrolinfoiconlabeloptions.html#cfn-quicksight-analysis-sheetcontrolinfoiconlabeloptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [SheetControlInfoIconLabelOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param infoIconText The text content of info icon.
       */
      public fun infoIconText(infoIconText: String)

      /**
       * @param visibility The visibility configuration of info icon label options.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlInfoIconLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlInfoIconLabelOptionsProperty.builder()

      /**
       * @param infoIconText The text content of info icon.
       */
      override fun infoIconText(infoIconText: String) {
        cdkBuilder.infoIconText(infoIconText)
      }

      /**
       * @param visibility The visibility configuration of info icon label options.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlInfoIconLabelOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlInfoIconLabelOptionsProperty,
    ) : SheetControlInfoIconLabelOptionsProperty {
      /**
       * The text content of info icon.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrolinfoiconlabeloptions.html#cfn-quicksight-analysis-sheetcontrolinfoiconlabeloptions-infoicontext)
       */
      override fun infoIconText(): String? = unwrap(this).getInfoIconText()

      /**
       * The visibility configuration of info icon label options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrolinfoiconlabeloptions.html#cfn-quicksight-analysis-sheetcontrolinfoiconlabeloptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SheetControlInfoIconLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlInfoIconLabelOptionsProperty):
          SheetControlInfoIconLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetControlInfoIconLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlInfoIconLabelOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DefaultInteractiveLayoutConfigurationProperty {
    /**
     * The options that determine the default settings of a free-form layout configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultinteractivelayoutconfiguration.html#cfn-quicksight-analysis-defaultinteractivelayoutconfiguration-freeform)
     */
    public fun freeForm(): Any? = unwrap(this).getFreeForm()

    /**
     * The options that determine the default settings for a grid layout configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultinteractivelayoutconfiguration.html#cfn-quicksight-analysis-defaultinteractivelayoutconfiguration-grid)
     */
    public fun grid(): Any? = unwrap(this).getGrid()

    /**
     * A builder for [DefaultInteractiveLayoutConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param freeForm The options that determine the default settings of a free-form layout
       * configuration.
       */
      public fun freeForm(freeForm: IResolvable)

      /**
       * @param freeForm The options that determine the default settings of a free-form layout
       * configuration.
       */
      public fun freeForm(freeForm: DefaultFreeFormLayoutConfigurationProperty)

      /**
       * @param freeForm The options that determine the default settings of a free-form layout
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b6142e31502321316ad7d10dbb0b05a7d1470e30bc210e71c1d927d6f70bb27")
      public fun freeForm(freeForm: DefaultFreeFormLayoutConfigurationProperty.Builder.() -> Unit)

      /**
       * @param grid The options that determine the default settings for a grid layout
       * configuration.
       */
      public fun grid(grid: IResolvable)

      /**
       * @param grid The options that determine the default settings for a grid layout
       * configuration.
       */
      public fun grid(grid: DefaultGridLayoutConfigurationProperty)

      /**
       * @param grid The options that determine the default settings for a grid layout
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a317ab08a92ec87e7e62bee324694ab1b7fd7ab4b2a91f6e04daa322f83c9544")
      public fun grid(grid: DefaultGridLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultInteractiveLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultInteractiveLayoutConfigurationProperty.builder()

      /**
       * @param freeForm The options that determine the default settings of a free-form layout
       * configuration.
       */
      override fun freeForm(freeForm: IResolvable) {
        cdkBuilder.freeForm(freeForm.let(IResolvable::unwrap))
      }

      /**
       * @param freeForm The options that determine the default settings of a free-form layout
       * configuration.
       */
      override fun freeForm(freeForm: DefaultFreeFormLayoutConfigurationProperty) {
        cdkBuilder.freeForm(freeForm.let(DefaultFreeFormLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param freeForm The options that determine the default settings of a free-form layout
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b6142e31502321316ad7d10dbb0b05a7d1470e30bc210e71c1d927d6f70bb27")
      override
          fun freeForm(freeForm: DefaultFreeFormLayoutConfigurationProperty.Builder.() -> Unit):
          Unit = freeForm(DefaultFreeFormLayoutConfigurationProperty(freeForm))

      /**
       * @param grid The options that determine the default settings for a grid layout
       * configuration.
       */
      override fun grid(grid: IResolvable) {
        cdkBuilder.grid(grid.let(IResolvable::unwrap))
      }

      /**
       * @param grid The options that determine the default settings for a grid layout
       * configuration.
       */
      override fun grid(grid: DefaultGridLayoutConfigurationProperty) {
        cdkBuilder.grid(grid.let(DefaultGridLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param grid The options that determine the default settings for a grid layout
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a317ab08a92ec87e7e62bee324694ab1b7fd7ab4b2a91f6e04daa322f83c9544")
      override fun grid(grid: DefaultGridLayoutConfigurationProperty.Builder.() -> Unit): Unit =
          grid(DefaultGridLayoutConfigurationProperty(grid))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultInteractiveLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultInteractiveLayoutConfigurationProperty,
    ) : DefaultInteractiveLayoutConfigurationProperty {
      /**
       * The options that determine the default settings of a free-form layout configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultinteractivelayoutconfiguration.html#cfn-quicksight-analysis-defaultinteractivelayoutconfiguration-freeform)
       */
      override fun freeForm(): Any? = unwrap(this).getFreeForm()

      /**
       * The options that determine the default settings for a grid layout configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultinteractivelayoutconfiguration.html#cfn-quicksight-analysis-defaultinteractivelayoutconfiguration-grid)
       */
      override fun grid(): Any? = unwrap(this).getGrid()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DefaultInteractiveLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultInteractiveLayoutConfigurationProperty):
          DefaultInteractiveLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DefaultInteractiveLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultInteractiveLayoutConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ReferenceLineStaticDataConfigurationProperty {
    /**
     * The double input of the static data.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestaticdataconfiguration.html#cfn-quicksight-analysis-referencelinestaticdataconfiguration-value)
     */
    public fun `value`(): Number

    /**
     * A builder for [ReferenceLineStaticDataConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param value The double input of the static data. 
       */
      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineStaticDataConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineStaticDataConfigurationProperty.builder()

      /**
       * @param value The double input of the static data. 
       */
      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineStaticDataConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineStaticDataConfigurationProperty,
    ) : ReferenceLineStaticDataConfigurationProperty {
      /**
       * The double input of the static data.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestaticdataconfiguration.html#cfn-quicksight-analysis-referencelinestaticdataconfiguration-value)
       */
      override fun `value`(): Number = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineStaticDataConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineStaticDataConfigurationProperty):
          ReferenceLineStaticDataConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineStaticDataConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineStaticDataConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface MetricComparisonComputationProperty {
    /**
     * The ID for a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-computationid)
     */
    public fun computationId(): String

    /**
     * The field that is used in a metric comparison from value setup.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-fromvalue)
     */
    public fun fromValue(): Any? = unwrap(this).getFromValue()

    /**
     * The name of a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * The field that is used in a metric comparison to value setup.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-targetvalue)
     */
    public fun targetValue(): Any? = unwrap(this).getTargetValue()

    /**
     * The time field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-time)
     */
    public fun time(): Any? = unwrap(this).getTime()

    /**
     * A builder for [MetricComparisonComputationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param computationId The ID for a computation. 
       */
      public fun computationId(computationId: String)

      /**
       * @param fromValue The field that is used in a metric comparison from value setup.
       */
      public fun fromValue(fromValue: IResolvable)

      /**
       * @param fromValue The field that is used in a metric comparison from value setup.
       */
      public fun fromValue(fromValue: MeasureFieldProperty)

      /**
       * @param fromValue The field that is used in a metric comparison from value setup.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("32a5d0c02cacb1c2889f51c5cc0f88623a496c6ffd1573aefe19175cc22b5a5f")
      public fun fromValue(fromValue: MeasureFieldProperty.Builder.() -> Unit)

      /**
       * @param name The name of a computation.
       */
      public fun name(name: String)

      /**
       * @param targetValue The field that is used in a metric comparison to value setup.
       */
      public fun targetValue(targetValue: IResolvable)

      /**
       * @param targetValue The field that is used in a metric comparison to value setup.
       */
      public fun targetValue(targetValue: MeasureFieldProperty)

      /**
       * @param targetValue The field that is used in a metric comparison to value setup.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b6abcf3ab89d5786452bccdf4f0b1029849359bb8b2f17b49d1f47351e7bb7de")
      public fun targetValue(targetValue: MeasureFieldProperty.Builder.() -> Unit)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: IResolvable)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: DimensionFieldProperty)

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("85c4fe6bf1a2bda1e508ff8d8177ef6db2497801f15f4d6be17c5222fc4d1f4a")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MetricComparisonComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MetricComparisonComputationProperty.builder()

      /**
       * @param computationId The ID for a computation. 
       */
      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      /**
       * @param fromValue The field that is used in a metric comparison from value setup.
       */
      override fun fromValue(fromValue: IResolvable) {
        cdkBuilder.fromValue(fromValue.let(IResolvable::unwrap))
      }

      /**
       * @param fromValue The field that is used in a metric comparison from value setup.
       */
      override fun fromValue(fromValue: MeasureFieldProperty) {
        cdkBuilder.fromValue(fromValue.let(MeasureFieldProperty::unwrap))
      }

      /**
       * @param fromValue The field that is used in a metric comparison from value setup.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("32a5d0c02cacb1c2889f51c5cc0f88623a496c6ffd1573aefe19175cc22b5a5f")
      override fun fromValue(fromValue: MeasureFieldProperty.Builder.() -> Unit): Unit =
          fromValue(MeasureFieldProperty(fromValue))

      /**
       * @param name The name of a computation.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param targetValue The field that is used in a metric comparison to value setup.
       */
      override fun targetValue(targetValue: IResolvable) {
        cdkBuilder.targetValue(targetValue.let(IResolvable::unwrap))
      }

      /**
       * @param targetValue The field that is used in a metric comparison to value setup.
       */
      override fun targetValue(targetValue: MeasureFieldProperty) {
        cdkBuilder.targetValue(targetValue.let(MeasureFieldProperty::unwrap))
      }

      /**
       * @param targetValue The field that is used in a metric comparison to value setup.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b6abcf3ab89d5786452bccdf4f0b1029849359bb8b2f17b49d1f47351e7bb7de")
      override fun targetValue(targetValue: MeasureFieldProperty.Builder.() -> Unit): Unit =
          targetValue(MeasureFieldProperty(targetValue))

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("85c4fe6bf1a2bda1e508ff8d8177ef6db2497801f15f4d6be17c5222fc4d1f4a")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MetricComparisonComputationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MetricComparisonComputationProperty,
    ) : MetricComparisonComputationProperty {
      /**
       * The ID for a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-computationid)
       */
      override fun computationId(): String = unwrap(this).getComputationId()

      /**
       * The field that is used in a metric comparison from value setup.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-fromvalue)
       */
      override fun fromValue(): Any? = unwrap(this).getFromValue()

      /**
       * The name of a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-name)
       */
      override fun name(): String? = unwrap(this).getName()

      /**
       * The field that is used in a metric comparison to value setup.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-targetvalue)
       */
      override fun targetValue(): Any? = unwrap(this).getTargetValue()

      /**
       * The time field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-time)
       */
      override fun time(): Any? = unwrap(this).getTime()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          MetricComparisonComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.MetricComparisonComputationProperty):
          MetricComparisonComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MetricComparisonComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MetricComparisonComputationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableFieldLinkContentConfigurationProperty {
    /**
     * The custom icon content for the table link content configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkcontentconfiguration.html#cfn-quicksight-analysis-tablefieldlinkcontentconfiguration-customiconcontent)
     */
    public fun customIconContent(): Any? = unwrap(this).getCustomIconContent()

    /**
     * The custom text content (value, font configuration) for the table link content configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkcontentconfiguration.html#cfn-quicksight-analysis-tablefieldlinkcontentconfiguration-customtextcontent)
     */
    public fun customTextContent(): Any? = unwrap(this).getCustomTextContent()

    /**
     * A builder for [TableFieldLinkContentConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customIconContent The custom icon content for the table link content configuration.
       */
      public fun customIconContent(customIconContent: IResolvable)

      /**
       * @param customIconContent The custom icon content for the table link content configuration.
       */
      public fun customIconContent(customIconContent: TableFieldCustomIconContentProperty)

      /**
       * @param customIconContent The custom icon content for the table link content configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d759e20cef7a2725f98451e3aa2824ccb4757a1b7dfea4963769a01e525e92a9")
      public
          fun customIconContent(customIconContent: TableFieldCustomIconContentProperty.Builder.() -> Unit)

      /**
       * @param customTextContent The custom text content (value, font configuration) for the table
       * link content configuration.
       */
      public fun customTextContent(customTextContent: IResolvable)

      /**
       * @param customTextContent The custom text content (value, font configuration) for the table
       * link content configuration.
       */
      public fun customTextContent(customTextContent: TableFieldCustomTextContentProperty)

      /**
       * @param customTextContent The custom text content (value, font configuration) for the table
       * link content configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47ca1b277aaedc97f6ce542dc6cd0b1e7d7f2d8d2ce9734884ff865901ab9e4e")
      public
          fun customTextContent(customTextContent: TableFieldCustomTextContentProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldLinkContentConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldLinkContentConfigurationProperty.builder()

      /**
       * @param customIconContent The custom icon content for the table link content configuration.
       */
      override fun customIconContent(customIconContent: IResolvable) {
        cdkBuilder.customIconContent(customIconContent.let(IResolvable::unwrap))
      }

      /**
       * @param customIconContent The custom icon content for the table link content configuration.
       */
      override fun customIconContent(customIconContent: TableFieldCustomIconContentProperty) {
        cdkBuilder.customIconContent(customIconContent.let(TableFieldCustomIconContentProperty::unwrap))
      }

      /**
       * @param customIconContent The custom icon content for the table link content configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d759e20cef7a2725f98451e3aa2824ccb4757a1b7dfea4963769a01e525e92a9")
      override
          fun customIconContent(customIconContent: TableFieldCustomIconContentProperty.Builder.() -> Unit):
          Unit = customIconContent(TableFieldCustomIconContentProperty(customIconContent))

      /**
       * @param customTextContent The custom text content (value, font configuration) for the table
       * link content configuration.
       */
      override fun customTextContent(customTextContent: IResolvable) {
        cdkBuilder.customTextContent(customTextContent.let(IResolvable::unwrap))
      }

      /**
       * @param customTextContent The custom text content (value, font configuration) for the table
       * link content configuration.
       */
      override fun customTextContent(customTextContent: TableFieldCustomTextContentProperty) {
        cdkBuilder.customTextContent(customTextContent.let(TableFieldCustomTextContentProperty::unwrap))
      }

      /**
       * @param customTextContent The custom text content (value, font configuration) for the table
       * link content configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47ca1b277aaedc97f6ce542dc6cd0b1e7d7f2d8d2ce9734884ff865901ab9e4e")
      override
          fun customTextContent(customTextContent: TableFieldCustomTextContentProperty.Builder.() -> Unit):
          Unit = customTextContent(TableFieldCustomTextContentProperty(customTextContent))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldLinkContentConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldLinkContentConfigurationProperty,
    ) : TableFieldLinkContentConfigurationProperty {
      /**
       * The custom icon content for the table link content configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkcontentconfiguration.html#cfn-quicksight-analysis-tablefieldlinkcontentconfiguration-customiconcontent)
       */
      override fun customIconContent(): Any? = unwrap(this).getCustomIconContent()

      /**
       * The custom text content (value, font configuration) for the table link content
       * configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkcontentconfiguration.html#cfn-quicksight-analysis-tablefieldlinkcontentconfiguration-customtextcontent)
       */
      override fun customTextContent(): Any? = unwrap(this).getCustomTextContent()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableFieldLinkContentConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldLinkContentConfigurationProperty):
          TableFieldLinkContentConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldLinkContentConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldLinkContentConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DefaultGridLayoutConfigurationProperty {
    /**
     * Determines the screen canvas size options for a grid layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultgridlayoutconfiguration.html#cfn-quicksight-analysis-defaultgridlayoutconfiguration-canvassizeoptions)
     */
    public fun canvasSizeOptions(): Any

    /**
     * A builder for [DefaultGridLayoutConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a grid layout. 
       */
      public fun canvasSizeOptions(canvasSizeOptions: IResolvable)

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a grid layout. 
       */
      public fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty)

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a grid layout. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("70449428935a7d0bdff5ab1abe73c4e14d02d9a5bf483c3b1e099604d617b981")
      public
          fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultGridLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultGridLayoutConfigurationProperty.builder()

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a grid layout. 
       */
      override fun canvasSizeOptions(canvasSizeOptions: IResolvable) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(IResolvable::unwrap))
      }

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a grid layout. 
       */
      override fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(GridLayoutCanvasSizeOptionsProperty::unwrap))
      }

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a grid layout. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("70449428935a7d0bdff5ab1abe73c4e14d02d9a5bf483c3b1e099604d617b981")
      override
          fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit = canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty(canvasSizeOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultGridLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultGridLayoutConfigurationProperty,
    ) : DefaultGridLayoutConfigurationProperty {
      /**
       * Determines the screen canvas size options for a grid layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultgridlayoutconfiguration.html#cfn-quicksight-analysis-defaultgridlayoutconfiguration-canvassizeoptions)
       */
      override fun canvasSizeOptions(): Any = unwrap(this).getCanvasSizeOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DefaultGridLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultGridLayoutConfigurationProperty):
          DefaultGridLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DefaultGridLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultGridLayoutConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface NumericRangeFilterValueProperty {
    /**
     * The parameter that is used in the numeric range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefiltervalue.html#cfn-quicksight-analysis-numericrangefiltervalue-parameter)
     */
    public fun parameter(): String? = unwrap(this).getParameter()

    /**
     * The static value of the numeric range filter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefiltervalue.html#cfn-quicksight-analysis-numericrangefiltervalue-staticvalue)
     */
    public fun staticValue(): Number? = unwrap(this).getStaticValue()

    /**
     * A builder for [NumericRangeFilterValueProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param parameter The parameter that is used in the numeric range.
       */
      public fun parameter(parameter: String)

      /**
       * @param staticValue The static value of the numeric range filter.
       */
      public fun staticValue(staticValue: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericRangeFilterValueProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericRangeFilterValueProperty.builder()

      /**
       * @param parameter The parameter that is used in the numeric range.
       */
      override fun parameter(parameter: String) {
        cdkBuilder.parameter(parameter)
      }

      /**
       * @param staticValue The static value of the numeric range filter.
       */
      override fun staticValue(staticValue: Number) {
        cdkBuilder.staticValue(staticValue)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericRangeFilterValueProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericRangeFilterValueProperty,
    ) : NumericRangeFilterValueProperty {
      /**
       * The parameter that is used in the numeric range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefiltervalue.html#cfn-quicksight-analysis-numericrangefiltervalue-parameter)
       */
      override fun parameter(): String? = unwrap(this).getParameter()

      /**
       * The static value of the numeric range filter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefiltervalue.html#cfn-quicksight-analysis-numericrangefiltervalue-staticvalue)
       */
      override fun staticValue(): Number? = unwrap(this).getStaticValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): NumericRangeFilterValueProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericRangeFilterValueProperty):
          NumericRangeFilterValueProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericRangeFilterValueProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericRangeFilterValueProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FontSizeProperty {
    /**
     * The lexical name for the text size, proportional to its surrounding context.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontsize.html#cfn-quicksight-analysis-fontsize-relative)
     */
    public fun relative(): String? = unwrap(this).getRelative()

    /**
     * A builder for [FontSizeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param relative The lexical name for the text size, proportional to its surrounding
       * context.
       */
      public fun relative(relative: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontSizeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontSizeProperty.builder()

      /**
       * @param relative The lexical name for the text size, proportional to its surrounding
       * context.
       */
      override fun relative(relative: String) {
        cdkBuilder.relative(relative)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.FontSizeProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontSizeProperty,
    ) : FontSizeProperty {
      /**
       * The lexical name for the text size, proportional to its surrounding context.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontsize.html#cfn-quicksight-analysis-fontsize-relative)
       */
      override fun relative(): String? = unwrap(this).getRelative()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FontSizeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FontSizeProperty):
          FontSizeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FontSizeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontSizeProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface ArcConfigurationProperty {
    /**
     * The option that determines the arc angle of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcconfiguration.html#cfn-quicksight-analysis-arcconfiguration-arcangle)
     */
    public fun arcAngle(): Number? = unwrap(this).getArcAngle()

    /**
     * The options that determine the arc thickness of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcconfiguration.html#cfn-quicksight-analysis-arcconfiguration-arcthickness)
     */
    public fun arcThickness(): String? = unwrap(this).getArcThickness()

    /**
     * A builder for [ArcConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param arcAngle The option that determines the arc angle of a `GaugeChartVisual` .
       */
      public fun arcAngle(arcAngle: Number)

      /**
       * @param arcThickness The options that determine the arc thickness of a `GaugeChartVisual` .
       */
      public fun arcThickness(arcThickness: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcConfigurationProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcConfigurationProperty.builder()

      /**
       * @param arcAngle The option that determines the arc angle of a `GaugeChartVisual` .
       */
      override fun arcAngle(arcAngle: Number) {
        cdkBuilder.arcAngle(arcAngle)
      }

      /**
       * @param arcThickness The options that determine the arc thickness of a `GaugeChartVisual` .
       */
      override fun arcThickness(arcThickness: String) {
        cdkBuilder.arcThickness(arcThickness)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcConfigurationProperty,
    ) : ArcConfigurationProperty {
      /**
       * The option that determines the arc angle of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcconfiguration.html#cfn-quicksight-analysis-arcconfiguration-arcangle)
       */
      override fun arcAngle(): Number? = unwrap(this).getArcAngle()

      /**
       * The options that determine the arc thickness of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcconfiguration.html#cfn-quicksight-analysis-arcconfiguration-arcthickness)
       */
      override fun arcThickness(): String? = unwrap(this).getArcThickness()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ArcConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcConfigurationProperty):
          ArcConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ArcConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcConfigurationProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface IntegerParameterDeclarationProperty {
    /**
     * The default values of a parameter.
     *
     * If the parameter is a single-value parameter, a maximum of one default value can be provided.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-defaultvalues)
     */
    public fun defaultValues(): Any? = unwrap(this).getDefaultValues()

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-mappeddatasetparameters)
     */
    public fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

    /**
     * The name of the parameter that is being declared.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-name)
     */
    public fun name(): String

    /**
     * The value type determines whether the parameter is a single-value or multi-value parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-parametervaluetype)
     */
    public fun parameterValueType(): String

    /**
     * A parameter declaration for the `Integer` data type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-valuewhenunset)
     */
    public fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()

    /**
     * A builder for [IntegerParameterDeclarationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      public fun defaultValues(defaultValues: IResolvable)

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      public fun defaultValues(defaultValues: IntegerDefaultValuesProperty)

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f59da05b4ea30a5af4b42832f425c01eabc112006daadfeb7a4a51aff4a66f75")
      public fun defaultValues(defaultValues: IntegerDefaultValuesProperty.Builder.() -> Unit)

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      public fun mappedDataSetParameters(mappedDataSetParameters: IResolvable)

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      public fun mappedDataSetParameters(mappedDataSetParameters: List<Any>)

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      public fun mappedDataSetParameters(vararg mappedDataSetParameters: Any)

      /**
       * @param name The name of the parameter that is being declared. 
       */
      public fun name(name: String)

      /**
       * @param parameterValueType The value type determines whether the parameter is a single-value
       * or multi-value parameter. 
       */
      public fun parameterValueType(parameterValueType: String)

      /**
       * @param valueWhenUnset A parameter declaration for the `Integer` data type.
       */
      public fun valueWhenUnset(valueWhenUnset: IResolvable)

      /**
       * @param valueWhenUnset A parameter declaration for the `Integer` data type.
       */
      public fun valueWhenUnset(valueWhenUnset: IntegerValueWhenUnsetConfigurationProperty)

      /**
       * @param valueWhenUnset A parameter declaration for the `Integer` data type.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("50c0353c2050416c5c780918e8420c17d9e56d932ae868624c222cb144556914")
      public
          fun valueWhenUnset(valueWhenUnset: IntegerValueWhenUnsetConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerParameterDeclarationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerParameterDeclarationProperty.builder()

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      override fun defaultValues(defaultValues: IResolvable) {
        cdkBuilder.defaultValues(defaultValues.let(IResolvable::unwrap))
      }

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      override fun defaultValues(defaultValues: IntegerDefaultValuesProperty) {
        cdkBuilder.defaultValues(defaultValues.let(IntegerDefaultValuesProperty::unwrap))
      }

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f59da05b4ea30a5af4b42832f425c01eabc112006daadfeb7a4a51aff4a66f75")
      override fun defaultValues(defaultValues: IntegerDefaultValuesProperty.Builder.() -> Unit):
          Unit = defaultValues(IntegerDefaultValuesProperty(defaultValues))

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      override fun mappedDataSetParameters(mappedDataSetParameters: IResolvable) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters.let(IResolvable::unwrap))
      }

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      override fun mappedDataSetParameters(mappedDataSetParameters: List<Any>) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters)
      }

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      override fun mappedDataSetParameters(vararg mappedDataSetParameters: Any): Unit =
          mappedDataSetParameters(mappedDataSetParameters.toList())

      /**
       * @param name The name of the parameter that is being declared. 
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param parameterValueType The value type determines whether the parameter is a single-value
       * or multi-value parameter. 
       */
      override fun parameterValueType(parameterValueType: String) {
        cdkBuilder.parameterValueType(parameterValueType)
      }

      /**
       * @param valueWhenUnset A parameter declaration for the `Integer` data type.
       */
      override fun valueWhenUnset(valueWhenUnset: IResolvable) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(IResolvable::unwrap))
      }

      /**
       * @param valueWhenUnset A parameter declaration for the `Integer` data type.
       */
      override fun valueWhenUnset(valueWhenUnset: IntegerValueWhenUnsetConfigurationProperty) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(IntegerValueWhenUnsetConfigurationProperty::unwrap))
      }

      /**
       * @param valueWhenUnset A parameter declaration for the `Integer` data type.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("50c0353c2050416c5c780918e8420c17d9e56d932ae868624c222cb144556914")
      override
          fun valueWhenUnset(valueWhenUnset: IntegerValueWhenUnsetConfigurationProperty.Builder.() -> Unit):
          Unit = valueWhenUnset(IntegerValueWhenUnsetConfigurationProperty(valueWhenUnset))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerParameterDeclarationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerParameterDeclarationProperty,
    ) : IntegerParameterDeclarationProperty {
      /**
       * The default values of a parameter.
       *
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-defaultvalues)
       */
      override fun defaultValues(): Any? = unwrap(this).getDefaultValues()

      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-mappeddatasetparameters)
       */
      override fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

      /**
       * The name of the parameter that is being declared.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-name)
       */
      override fun name(): String = unwrap(this).getName()

      /**
       * The value type determines whether the parameter is a single-value or multi-value parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-parametervaluetype)
       */
      override fun parameterValueType(): String = unwrap(this).getParameterValueType()

      /**
       * A parameter declaration for the `Integer` data type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-valuewhenunset)
       */
      override fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          IntegerParameterDeclarationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerParameterDeclarationProperty):
          IntegerParameterDeclarationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: IntegerParameterDeclarationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerParameterDeclarationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SameSheetTargetVisualConfigurationProperty {
    /**
     * The options that choose the target visual in the same sheet.
     *
     * Valid values are defined as follows:
     *
     * * `ALL_VISUALS` : Applies the filter operation to all visuals in the same sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-samesheettargetvisualconfiguration.html#cfn-quicksight-analysis-samesheettargetvisualconfiguration-targetvisualoptions)
     */
    public fun targetVisualOptions(): String? = unwrap(this).getTargetVisualOptions()

    /**
     * A list of the target visual IDs that are located in the same sheet of the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-samesheettargetvisualconfiguration.html#cfn-quicksight-analysis-samesheettargetvisualconfiguration-targetvisuals)
     */
    public fun targetVisuals(): List<String> = unwrap(this).getTargetVisuals() ?: emptyList()

    /**
     * A builder for [SameSheetTargetVisualConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param targetVisualOptions The options that choose the target visual in the same sheet.
       * Valid values are defined as follows:
       *
       * * `ALL_VISUALS` : Applies the filter operation to all visuals in the same sheet.
       */
      public fun targetVisualOptions(targetVisualOptions: String)

      /**
       * @param targetVisuals A list of the target visual IDs that are located in the same sheet of
       * the analysis.
       */
      public fun targetVisuals(targetVisuals: List<String>)

      /**
       * @param targetVisuals A list of the target visual IDs that are located in the same sheet of
       * the analysis.
       */
      public fun targetVisuals(vararg targetVisuals: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SameSheetTargetVisualConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SameSheetTargetVisualConfigurationProperty.builder()

      /**
       * @param targetVisualOptions The options that choose the target visual in the same sheet.
       * Valid values are defined as follows:
       *
       * * `ALL_VISUALS` : Applies the filter operation to all visuals in the same sheet.
       */
      override fun targetVisualOptions(targetVisualOptions: String) {
        cdkBuilder.targetVisualOptions(targetVisualOptions)
      }

      /**
       * @param targetVisuals A list of the target visual IDs that are located in the same sheet of
       * the analysis.
       */
      override fun targetVisuals(targetVisuals: List<String>) {
        cdkBuilder.targetVisuals(targetVisuals)
      }

      /**
       * @param targetVisuals A list of the target visual IDs that are located in the same sheet of
       * the analysis.
       */
      override fun targetVisuals(vararg targetVisuals: String): Unit =
          targetVisuals(targetVisuals.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SameSheetTargetVisualConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SameSheetTargetVisualConfigurationProperty,
    ) : SameSheetTargetVisualConfigurationProperty {
      /**
       * The options that choose the target visual in the same sheet.
       *
       * Valid values are defined as follows:
       *
       * * `ALL_VISUALS` : Applies the filter operation to all visuals in the same sheet.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-samesheettargetvisualconfiguration.html#cfn-quicksight-analysis-samesheettargetvisualconfiguration-targetvisualoptions)
       */
      override fun targetVisualOptions(): String? = unwrap(this).getTargetVisualOptions()

      /**
       * A list of the target visual IDs that are located in the same sheet of the analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-samesheettargetvisualconfiguration.html#cfn-quicksight-analysis-samesheettargetvisualconfiguration-targetvisuals)
       */
      override fun targetVisuals(): List<String> = unwrap(this).getTargetVisuals() ?: emptyList()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SameSheetTargetVisualConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SameSheetTargetVisualConfigurationProperty):
          SameSheetTargetVisualConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SameSheetTargetVisualConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SameSheetTargetVisualConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SimpleClusterMarkerProperty {
    /**
     * The color of the simple cluster marker.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-simpleclustermarker.html#cfn-quicksight-analysis-simpleclustermarker-color)
     */
    public fun color(): String? = unwrap(this).getColor()

    /**
     * A builder for [SimpleClusterMarkerProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color The color of the simple cluster marker.
       */
      public fun color(color: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SimpleClusterMarkerProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SimpleClusterMarkerProperty.builder()

      /**
       * @param color The color of the simple cluster marker.
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SimpleClusterMarkerProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SimpleClusterMarkerProperty,
    ) : SimpleClusterMarkerProperty {
      /**
       * The color of the simple cluster marker.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-simpleclustermarker.html#cfn-quicksight-analysis-simpleclustermarker-color)
       */
      override fun color(): String? = unwrap(this).getColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SimpleClusterMarkerProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SimpleClusterMarkerProperty):
          SimpleClusterMarkerProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SimpleClusterMarkerProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SimpleClusterMarkerProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface LayoutConfigurationProperty {
    /**
     * A free-form is optimized for a fixed width and has more control over the exact placement of
     * layout elements.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layoutconfiguration.html#cfn-quicksight-analysis-layoutconfiguration-freeformlayout)
     */
    public fun freeFormLayout(): Any? = unwrap(this).getFreeFormLayout()

    /**
     * A type of layout that can be used on a sheet.
     *
     * In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards are
     * displayed as designed, with options to fit to screen or view at actual size. A grid layout can
     * be configured to behave in one of two ways when the viewport is resized: `FIXED` or `RESPONSIVE`
     * .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layoutconfiguration.html#cfn-quicksight-analysis-layoutconfiguration-gridlayout)
     */
    public fun gridLayout(): Any? = unwrap(this).getGridLayout()

    /**
     * A section based layout organizes visuals into multiple sections and has customized header,
     * footer and page break.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layoutconfiguration.html#cfn-quicksight-analysis-layoutconfiguration-sectionbasedlayout)
     */
    public fun sectionBasedLayout(): Any? = unwrap(this).getSectionBasedLayout()

    /**
     * A builder for [LayoutConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param freeFormLayout A free-form is optimized for a fixed width and has more control over
       * the exact placement of layout elements.
       */
      public fun freeFormLayout(freeFormLayout: IResolvable)

      /**
       * @param freeFormLayout A free-form is optimized for a fixed width and has more control over
       * the exact placement of layout elements.
       */
      public fun freeFormLayout(freeFormLayout: FreeFormLayoutConfigurationProperty)

      /**
       * @param freeFormLayout A free-form is optimized for a fixed width and has more control over
       * the exact placement of layout elements.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aa20b93751f038326d92897482cf2a32159af7e162f0c157e14b3d72cc4a1876")
      public
          fun freeFormLayout(freeFormLayout: FreeFormLayoutConfigurationProperty.Builder.() -> Unit)

      /**
       * @param gridLayout A type of layout that can be used on a sheet.
       * In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards
       * are displayed as designed, with options to fit to screen or view at actual size. A grid layout
       * can be configured to behave in one of two ways when the viewport is resized: `FIXED` or
       * `RESPONSIVE` .
       */
      public fun gridLayout(gridLayout: IResolvable)

      /**
       * @param gridLayout A type of layout that can be used on a sheet.
       * In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards
       * are displayed as designed, with options to fit to screen or view at actual size. A grid layout
       * can be configured to behave in one of two ways when the viewport is resized: `FIXED` or
       * `RESPONSIVE` .
       */
      public fun gridLayout(gridLayout: GridLayoutConfigurationProperty)

      /**
       * @param gridLayout A type of layout that can be used on a sheet.
       * In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards
       * are displayed as designed, with options to fit to screen or view at actual size. A grid layout
       * can be configured to behave in one of two ways when the viewport is resized: `FIXED` or
       * `RESPONSIVE` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f093fa9b6787811b24e2017f7b5bbff6ddbc830c4ed02f8174bab9a6a8be4ce0")
      public fun gridLayout(gridLayout: GridLayoutConfigurationProperty.Builder.() -> Unit)

      /**
       * @param sectionBasedLayout A section based layout organizes visuals into multiple sections
       * and has customized header, footer and page break.
       */
      public fun sectionBasedLayout(sectionBasedLayout: IResolvable)

      /**
       * @param sectionBasedLayout A section based layout organizes visuals into multiple sections
       * and has customized header, footer and page break.
       */
      public fun sectionBasedLayout(sectionBasedLayout: SectionBasedLayoutConfigurationProperty)

      /**
       * @param sectionBasedLayout A section based layout organizes visuals into multiple sections
       * and has customized header, footer and page break.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3efdd3df743b0e1972bc6cde82d75275e2c0318c9c9f52d9527f037b45de7391")
      public
          fun sectionBasedLayout(sectionBasedLayout: SectionBasedLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LayoutConfigurationProperty.builder()

      /**
       * @param freeFormLayout A free-form is optimized for a fixed width and has more control over
       * the exact placement of layout elements.
       */
      override fun freeFormLayout(freeFormLayout: IResolvable) {
        cdkBuilder.freeFormLayout(freeFormLayout.let(IResolvable::unwrap))
      }

      /**
       * @param freeFormLayout A free-form is optimized for a fixed width and has more control over
       * the exact placement of layout elements.
       */
      override fun freeFormLayout(freeFormLayout: FreeFormLayoutConfigurationProperty) {
        cdkBuilder.freeFormLayout(freeFormLayout.let(FreeFormLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param freeFormLayout A free-form is optimized for a fixed width and has more control over
       * the exact placement of layout elements.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aa20b93751f038326d92897482cf2a32159af7e162f0c157e14b3d72cc4a1876")
      override
          fun freeFormLayout(freeFormLayout: FreeFormLayoutConfigurationProperty.Builder.() -> Unit):
          Unit = freeFormLayout(FreeFormLayoutConfigurationProperty(freeFormLayout))

      /**
       * @param gridLayout A type of layout that can be used on a sheet.
       * In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards
       * are displayed as designed, with options to fit to screen or view at actual size. A grid layout
       * can be configured to behave in one of two ways when the viewport is resized: `FIXED` or
       * `RESPONSIVE` .
       */
      override fun gridLayout(gridLayout: IResolvable) {
        cdkBuilder.gridLayout(gridLayout.let(IResolvable::unwrap))
      }

      /**
       * @param gridLayout A type of layout that can be used on a sheet.
       * In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards
       * are displayed as designed, with options to fit to screen or view at actual size. A grid layout
       * can be configured to behave in one of two ways when the viewport is resized: `FIXED` or
       * `RESPONSIVE` .
       */
      override fun gridLayout(gridLayout: GridLayoutConfigurationProperty) {
        cdkBuilder.gridLayout(gridLayout.let(GridLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param gridLayout A type of layout that can be used on a sheet.
       * In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards
       * are displayed as designed, with options to fit to screen or view at actual size. A grid layout
       * can be configured to behave in one of two ways when the viewport is resized: `FIXED` or
       * `RESPONSIVE` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f093fa9b6787811b24e2017f7b5bbff6ddbc830c4ed02f8174bab9a6a8be4ce0")
      override fun gridLayout(gridLayout: GridLayoutConfigurationProperty.Builder.() -> Unit): Unit
          = gridLayout(GridLayoutConfigurationProperty(gridLayout))

      /**
       * @param sectionBasedLayout A section based layout organizes visuals into multiple sections
       * and has customized header, footer and page break.
       */
      override fun sectionBasedLayout(sectionBasedLayout: IResolvable) {
        cdkBuilder.sectionBasedLayout(sectionBasedLayout.let(IResolvable::unwrap))
      }

      /**
       * @param sectionBasedLayout A section based layout organizes visuals into multiple sections
       * and has customized header, footer and page break.
       */
      override fun sectionBasedLayout(sectionBasedLayout: SectionBasedLayoutConfigurationProperty) {
        cdkBuilder.sectionBasedLayout(sectionBasedLayout.let(SectionBasedLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param sectionBasedLayout A section based layout organizes visuals into multiple sections
       * and has customized header, footer and page break.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3efdd3df743b0e1972bc6cde82d75275e2c0318c9c9f52d9527f037b45de7391")
      override
          fun sectionBasedLayout(sectionBasedLayout: SectionBasedLayoutConfigurationProperty.Builder.() -> Unit):
          Unit = sectionBasedLayout(SectionBasedLayoutConfigurationProperty(sectionBasedLayout))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LayoutConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LayoutConfigurationProperty,
    ) : LayoutConfigurationProperty {
      /**
       * A free-form is optimized for a fixed width and has more control over the exact placement of
       * layout elements.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layoutconfiguration.html#cfn-quicksight-analysis-layoutconfiguration-freeformlayout)
       */
      override fun freeFormLayout(): Any? = unwrap(this).getFreeFormLayout()

      /**
       * A type of layout that can be used on a sheet.
       *
       * In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards
       * are displayed as designed, with options to fit to screen or view at actual size. A grid layout
       * can be configured to behave in one of two ways when the viewport is resized: `FIXED` or
       * `RESPONSIVE` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layoutconfiguration.html#cfn-quicksight-analysis-layoutconfiguration-gridlayout)
       */
      override fun gridLayout(): Any? = unwrap(this).getGridLayout()

      /**
       * A section based layout organizes visuals into multiple sections and has customized header,
       * footer and page break.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layoutconfiguration.html#cfn-quicksight-analysis-layoutconfiguration-sectionbasedlayout)
       */
      override fun sectionBasedLayout(): Any? = unwrap(this).getSectionBasedLayout()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): LayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LayoutConfigurationProperty):
          LayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LayoutConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface WaterfallChartSortConfigurationProperty {
    /**
     * The limit on the number of bar groups that are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartsortconfiguration.html#cfn-quicksight-analysis-waterfallchartsortconfiguration-breakdownitemslimit)
     */
    public fun breakdownItemsLimit(): Any? = unwrap(this).getBreakdownItemsLimit()

    /**
     * The sort configuration of the category fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartsortconfiguration.html#cfn-quicksight-analysis-waterfallchartsortconfiguration-categorysort)
     */
    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    /**
     * A builder for [WaterfallChartSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param breakdownItemsLimit The limit on the number of bar groups that are displayed.
       */
      public fun breakdownItemsLimit(breakdownItemsLimit: IResolvable)

      /**
       * @param breakdownItemsLimit The limit on the number of bar groups that are displayed.
       */
      public fun breakdownItemsLimit(breakdownItemsLimit: ItemsLimitConfigurationProperty)

      /**
       * @param breakdownItemsLimit The limit on the number of bar groups that are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f1eb1d4edbdae1c641d6091820b7cd6b006baff467f81460976f5d56288d7e43")
      public
          fun breakdownItemsLimit(breakdownItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      public fun categorySort(categorySort: IResolvable)

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      public fun categorySort(categorySort: List<Any>)

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      public fun categorySort(vararg categorySort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartSortConfigurationProperty.builder()

      /**
       * @param breakdownItemsLimit The limit on the number of bar groups that are displayed.
       */
      override fun breakdownItemsLimit(breakdownItemsLimit: IResolvable) {
        cdkBuilder.breakdownItemsLimit(breakdownItemsLimit.let(IResolvable::unwrap))
      }

      /**
       * @param breakdownItemsLimit The limit on the number of bar groups that are displayed.
       */
      override fun breakdownItemsLimit(breakdownItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.breakdownItemsLimit(breakdownItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param breakdownItemsLimit The limit on the number of bar groups that are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f1eb1d4edbdae1c641d6091820b7cd6b006baff467f81460976f5d56288d7e43")
      override
          fun breakdownItemsLimit(breakdownItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = breakdownItemsLimit(ItemsLimitConfigurationProperty(breakdownItemsLimit))

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartSortConfigurationProperty,
    ) : WaterfallChartSortConfigurationProperty {
      /**
       * The limit on the number of bar groups that are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartsortconfiguration.html#cfn-quicksight-analysis-waterfallchartsortconfiguration-breakdownitemslimit)
       */
      override fun breakdownItemsLimit(): Any? = unwrap(this).getBreakdownItemsLimit()

      /**
       * The sort configuration of the category fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartsortconfiguration.html#cfn-quicksight-analysis-waterfallchartsortconfiguration-categorysort)
       */
      override fun categorySort(): Any? = unwrap(this).getCategorySort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          WaterfallChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartSortConfigurationProperty):
          WaterfallChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WaterfallChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartSortConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface RelativeDatesFilterProperty {
    /**
     * The date configuration of the filter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-anchordateconfiguration)
     */
    public fun anchorDateConfiguration(): Any

    /**
     * The column that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-column)
     */
    public fun column(): Any

    /**
     * The configuration for the exclude period of the filter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-excludeperiodconfiguration)
     */
    public fun excludePeriodConfiguration(): Any? = unwrap(this).getExcludePeriodConfiguration()

    /**
     * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-filterid)
     */
    public fun filterId(): String

    /**
     * The minimum granularity (period granularity) of the relative dates filter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-minimumgranularity)
     */
    public fun minimumGranularity(): String? = unwrap(this).getMinimumGranularity()

    /**
     * This option determines how null values should be treated when filtering data.
     *
     * * `ALL_VALUES` : Include null values in filtered results.
     * * `NULLS_ONLY` : Only include null values in filtered results.
     * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-nulloption)
     */
    public fun nullOption(): String

    /**
     * The parameter whose value should be used for the filter value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-parametername)
     */
    public fun parameterName(): String? = unwrap(this).getParameterName()

    /**
     * The range date type of the filter. Choose one of the options below:.
     *
     * * `PREVIOUS`
     * * `THIS`
     * * `LAST`
     * * `NOW`
     * * `NEXT`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-relativedatetype)
     */
    public fun relativeDateType(): String

    /**
     * The date value of the filter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-relativedatevalue)
     */
    public fun relativeDateValue(): Number? = unwrap(this).getRelativeDateValue()

    /**
     * The level of time precision that is used to aggregate `DateTime` values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-timegranularity)
     */
    public fun timeGranularity(): String

    /**
     * A builder for [RelativeDatesFilterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param anchorDateConfiguration The date configuration of the filter. 
       */
      public fun anchorDateConfiguration(anchorDateConfiguration: IResolvable)

      /**
       * @param anchorDateConfiguration The date configuration of the filter. 
       */
      public fun anchorDateConfiguration(anchorDateConfiguration: AnchorDateConfigurationProperty)

      /**
       * @param anchorDateConfiguration The date configuration of the filter. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("560f39a37996b72524fb855571b3feb3d57d3214d86870b3ff397fbb31dae161")
      public
          fun anchorDateConfiguration(anchorDateConfiguration: AnchorDateConfigurationProperty.Builder.() -> Unit)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("87f894b54692f647b92748b55e99e28b47c8e20e6a611a77db3057772cdef0ef")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param excludePeriodConfiguration The configuration for the exclude period of the filter.
       */
      public fun excludePeriodConfiguration(excludePeriodConfiguration: IResolvable)

      /**
       * @param excludePeriodConfiguration The configuration for the exclude period of the filter.
       */
      public
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty)

      /**
       * @param excludePeriodConfiguration The configuration for the exclude period of the filter.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bd0b28d8a604f47fa4f20afb6e49dbe45d0cce4c9d7d6a8491080fdd7905a555")
      public
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty.Builder.() -> Unit)

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      public fun filterId(filterId: String)

      /**
       * @param minimumGranularity The minimum granularity (period granularity) of the relative
       * dates filter.
       */
      public fun minimumGranularity(minimumGranularity: String)

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data. 
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      public fun nullOption(nullOption: String)

      /**
       * @param parameterName The parameter whose value should be used for the filter value.
       */
      public fun parameterName(parameterName: String)

      /**
       * @param relativeDateType The range date type of the filter. Choose one of the options
       * below:. 
       * * `PREVIOUS`
       * * `THIS`
       * * `LAST`
       * * `NOW`
       * * `NEXT`
       */
      public fun relativeDateType(relativeDateType: String)

      /**
       * @param relativeDateValue The date value of the filter.
       */
      public fun relativeDateValue(relativeDateValue: Number)

      /**
       * @param timeGranularity The level of time precision that is used to aggregate `DateTime`
       * values. 
       */
      public fun timeGranularity(timeGranularity: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RelativeDatesFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RelativeDatesFilterProperty.builder()

      /**
       * @param anchorDateConfiguration The date configuration of the filter. 
       */
      override fun anchorDateConfiguration(anchorDateConfiguration: IResolvable) {
        cdkBuilder.anchorDateConfiguration(anchorDateConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param anchorDateConfiguration The date configuration of the filter. 
       */
      override
          fun anchorDateConfiguration(anchorDateConfiguration: AnchorDateConfigurationProperty) {
        cdkBuilder.anchorDateConfiguration(anchorDateConfiguration.let(AnchorDateConfigurationProperty::unwrap))
      }

      /**
       * @param anchorDateConfiguration The date configuration of the filter. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("560f39a37996b72524fb855571b3feb3d57d3214d86870b3ff397fbb31dae161")
      override
          fun anchorDateConfiguration(anchorDateConfiguration: AnchorDateConfigurationProperty.Builder.() -> Unit):
          Unit = anchorDateConfiguration(AnchorDateConfigurationProperty(anchorDateConfiguration))

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("87f894b54692f647b92748b55e99e28b47c8e20e6a611a77db3057772cdef0ef")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param excludePeriodConfiguration The configuration for the exclude period of the filter.
       */
      override fun excludePeriodConfiguration(excludePeriodConfiguration: IResolvable) {
        cdkBuilder.excludePeriodConfiguration(excludePeriodConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param excludePeriodConfiguration The configuration for the exclude period of the filter.
       */
      override
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty) {
        cdkBuilder.excludePeriodConfiguration(excludePeriodConfiguration.let(ExcludePeriodConfigurationProperty::unwrap))
      }

      /**
       * @param excludePeriodConfiguration The configuration for the exclude period of the filter.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bd0b28d8a604f47fa4f20afb6e49dbe45d0cce4c9d7d6a8491080fdd7905a555")
      override
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty.Builder.() -> Unit):
          Unit =
          excludePeriodConfiguration(ExcludePeriodConfigurationProperty(excludePeriodConfiguration))

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      /**
       * @param minimumGranularity The minimum granularity (period granularity) of the relative
       * dates filter.
       */
      override fun minimumGranularity(minimumGranularity: String) {
        cdkBuilder.minimumGranularity(minimumGranularity)
      }

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data. 
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      /**
       * @param parameterName The parameter whose value should be used for the filter value.
       */
      override fun parameterName(parameterName: String) {
        cdkBuilder.parameterName(parameterName)
      }

      /**
       * @param relativeDateType The range date type of the filter. Choose one of the options
       * below:. 
       * * `PREVIOUS`
       * * `THIS`
       * * `LAST`
       * * `NOW`
       * * `NEXT`
       */
      override fun relativeDateType(relativeDateType: String) {
        cdkBuilder.relativeDateType(relativeDateType)
      }

      /**
       * @param relativeDateValue The date value of the filter.
       */
      override fun relativeDateValue(relativeDateValue: Number) {
        cdkBuilder.relativeDateValue(relativeDateValue)
      }

      /**
       * @param timeGranularity The level of time precision that is used to aggregate `DateTime`
       * values. 
       */
      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RelativeDatesFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RelativeDatesFilterProperty,
    ) : RelativeDatesFilterProperty {
      /**
       * The date configuration of the filter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-anchordateconfiguration)
       */
      override fun anchorDateConfiguration(): Any = unwrap(this).getAnchorDateConfiguration()

      /**
       * The column that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The configuration for the exclude period of the filter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-excludeperiodconfiguration)
       */
      override fun excludePeriodConfiguration(): Any? = unwrap(this).getExcludePeriodConfiguration()

      /**
       * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-filterid)
       */
      override fun filterId(): String = unwrap(this).getFilterId()

      /**
       * The minimum granularity (period granularity) of the relative dates filter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-minimumgranularity)
       */
      override fun minimumGranularity(): String? = unwrap(this).getMinimumGranularity()

      /**
       * This option determines how null values should be treated when filtering data.
       *
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-nulloption)
       */
      override fun nullOption(): String = unwrap(this).getNullOption()

      /**
       * The parameter whose value should be used for the filter value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-parametername)
       */
      override fun parameterName(): String? = unwrap(this).getParameterName()

      /**
       * The range date type of the filter. Choose one of the options below:.
       *
       * * `PREVIOUS`
       * * `THIS`
       * * `LAST`
       * * `NOW`
       * * `NEXT`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-relativedatetype)
       */
      override fun relativeDateType(): String = unwrap(this).getRelativeDateType()

      /**
       * The date value of the filter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-relativedatevalue)
       */
      override fun relativeDateValue(): Number? = unwrap(this).getRelativeDateValue()

      /**
       * The level of time precision that is used to aggregate `DateTime` values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-timegranularity)
       */
      override fun timeGranularity(): String = unwrap(this).getTimeGranularity()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): RelativeDatesFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.RelativeDatesFilterProperty):
          RelativeDatesFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RelativeDatesFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RelativeDatesFilterProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableConfigurationProperty {
    /**
     * The field options for a pivot table visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-fieldoptions)
     */
    public fun fieldOptions(): Any? = unwrap(this).getFieldOptions()

    /**
     * The field wells of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The paginated report options for a pivot table visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-paginatedreportoptions)
     */
    public fun paginatedReportOptions(): Any? = unwrap(this).getPaginatedReportOptions()

    /**
     * The sort configuration for a `PivotTableVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The table options for a pivot table visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-tableoptions)
     */
    public fun tableOptions(): Any? = unwrap(this).getTableOptions()

    /**
     * The total options for a pivot table visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-totaloptions)
     */
    public fun totalOptions(): Any? = unwrap(this).getTotalOptions()

    /**
     * A builder for [PivotTableConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldOptions The field options for a pivot table visual.
       */
      public fun fieldOptions(fieldOptions: IResolvable)

      /**
       * @param fieldOptions The field options for a pivot table visual.
       */
      public fun fieldOptions(fieldOptions: PivotTableFieldOptionsProperty)

      /**
       * @param fieldOptions The field options for a pivot table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1cdb16e39b18021a21bee1f9bd44c7149782566b94832f593a03600187dff08d")
      public fun fieldOptions(fieldOptions: PivotTableFieldOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: PivotTableFieldWellsProperty)

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5d2f6688bd6391f50466b0555907c3ad13802b961ced6b1c0feee440a227d5d5")
      public fun fieldWells(fieldWells: PivotTableFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param paginatedReportOptions The paginated report options for a pivot table visual.
       */
      public fun paginatedReportOptions(paginatedReportOptions: IResolvable)

      /**
       * @param paginatedReportOptions The paginated report options for a pivot table visual.
       */
      public
          fun paginatedReportOptions(paginatedReportOptions: PivotTablePaginatedReportOptionsProperty)

      /**
       * @param paginatedReportOptions The paginated report options for a pivot table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("04be433ea2ff28ec6bb9969c848462c6f9aa06298dd525feaf760bdec335eb7a")
      public
          fun paginatedReportOptions(paginatedReportOptions: PivotTablePaginatedReportOptionsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration for a `PivotTableVisual` .
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration for a `PivotTableVisual` .
       */
      public fun sortConfiguration(sortConfiguration: PivotTableSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration for a `PivotTableVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3f29123e60524c7ea49cb8f8e71ce374db6b3d79f866cc6636cd4e3666f572c8")
      public
          fun sortConfiguration(sortConfiguration: PivotTableSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param tableOptions The table options for a pivot table visual.
       */
      public fun tableOptions(tableOptions: IResolvable)

      /**
       * @param tableOptions The table options for a pivot table visual.
       */
      public fun tableOptions(tableOptions: PivotTableOptionsProperty)

      /**
       * @param tableOptions The table options for a pivot table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4cf7cba1f91f0c63d89b66603d603e8a85e8cc62603c4bb940308580c164ba21")
      public fun tableOptions(tableOptions: PivotTableOptionsProperty.Builder.() -> Unit)

      /**
       * @param totalOptions The total options for a pivot table visual.
       */
      public fun totalOptions(totalOptions: IResolvable)

      /**
       * @param totalOptions The total options for a pivot table visual.
       */
      public fun totalOptions(totalOptions: PivotTableTotalOptionsProperty)

      /**
       * @param totalOptions The total options for a pivot table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5d41f2a5b52e366920767f178e1de7492137a50f6ce569d3100fbbb6385bd8f2")
      public fun totalOptions(totalOptions: PivotTableTotalOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConfigurationProperty.builder()

      /**
       * @param fieldOptions The field options for a pivot table visual.
       */
      override fun fieldOptions(fieldOptions: IResolvable) {
        cdkBuilder.fieldOptions(fieldOptions.let(IResolvable::unwrap))
      }

      /**
       * @param fieldOptions The field options for a pivot table visual.
       */
      override fun fieldOptions(fieldOptions: PivotTableFieldOptionsProperty) {
        cdkBuilder.fieldOptions(fieldOptions.let(PivotTableFieldOptionsProperty::unwrap))
      }

      /**
       * @param fieldOptions The field options for a pivot table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1cdb16e39b18021a21bee1f9bd44c7149782566b94832f593a03600187dff08d")
      override fun fieldOptions(fieldOptions: PivotTableFieldOptionsProperty.Builder.() -> Unit):
          Unit = fieldOptions(PivotTableFieldOptionsProperty(fieldOptions))

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: PivotTableFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(PivotTableFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5d2f6688bd6391f50466b0555907c3ad13802b961ced6b1c0feee440a227d5d5")
      override fun fieldWells(fieldWells: PivotTableFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(PivotTableFieldWellsProperty(fieldWells))

      /**
       * @param paginatedReportOptions The paginated report options for a pivot table visual.
       */
      override fun paginatedReportOptions(paginatedReportOptions: IResolvable) {
        cdkBuilder.paginatedReportOptions(paginatedReportOptions.let(IResolvable::unwrap))
      }

      /**
       * @param paginatedReportOptions The paginated report options for a pivot table visual.
       */
      override
          fun paginatedReportOptions(paginatedReportOptions: PivotTablePaginatedReportOptionsProperty) {
        cdkBuilder.paginatedReportOptions(paginatedReportOptions.let(PivotTablePaginatedReportOptionsProperty::unwrap))
      }

      /**
       * @param paginatedReportOptions The paginated report options for a pivot table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("04be433ea2ff28ec6bb9969c848462c6f9aa06298dd525feaf760bdec335eb7a")
      override
          fun paginatedReportOptions(paginatedReportOptions: PivotTablePaginatedReportOptionsProperty.Builder.() -> Unit):
          Unit =
          paginatedReportOptions(PivotTablePaginatedReportOptionsProperty(paginatedReportOptions))

      /**
       * @param sortConfiguration The sort configuration for a `PivotTableVisual` .
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration for a `PivotTableVisual` .
       */
      override fun sortConfiguration(sortConfiguration: PivotTableSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(PivotTableSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration for a `PivotTableVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3f29123e60524c7ea49cb8f8e71ce374db6b3d79f866cc6636cd4e3666f572c8")
      override
          fun sortConfiguration(sortConfiguration: PivotTableSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(PivotTableSortConfigurationProperty(sortConfiguration))

      /**
       * @param tableOptions The table options for a pivot table visual.
       */
      override fun tableOptions(tableOptions: IResolvable) {
        cdkBuilder.tableOptions(tableOptions.let(IResolvable::unwrap))
      }

      /**
       * @param tableOptions The table options for a pivot table visual.
       */
      override fun tableOptions(tableOptions: PivotTableOptionsProperty) {
        cdkBuilder.tableOptions(tableOptions.let(PivotTableOptionsProperty::unwrap))
      }

      /**
       * @param tableOptions The table options for a pivot table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4cf7cba1f91f0c63d89b66603d603e8a85e8cc62603c4bb940308580c164ba21")
      override fun tableOptions(tableOptions: PivotTableOptionsProperty.Builder.() -> Unit): Unit =
          tableOptions(PivotTableOptionsProperty(tableOptions))

      /**
       * @param totalOptions The total options for a pivot table visual.
       */
      override fun totalOptions(totalOptions: IResolvable) {
        cdkBuilder.totalOptions(totalOptions.let(IResolvable::unwrap))
      }

      /**
       * @param totalOptions The total options for a pivot table visual.
       */
      override fun totalOptions(totalOptions: PivotTableTotalOptionsProperty) {
        cdkBuilder.totalOptions(totalOptions.let(PivotTableTotalOptionsProperty::unwrap))
      }

      /**
       * @param totalOptions The total options for a pivot table visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5d41f2a5b52e366920767f178e1de7492137a50f6ce569d3100fbbb6385bd8f2")
      override fun totalOptions(totalOptions: PivotTableTotalOptionsProperty.Builder.() -> Unit):
          Unit = totalOptions(PivotTableTotalOptionsProperty(totalOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConfigurationProperty,
    ) : PivotTableConfigurationProperty {
      /**
       * The field options for a pivot table visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-fieldoptions)
       */
      override fun fieldOptions(): Any? = unwrap(this).getFieldOptions()

      /**
       * The field wells of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The paginated report options for a pivot table visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-paginatedreportoptions)
       */
      override fun paginatedReportOptions(): Any? = unwrap(this).getPaginatedReportOptions()

      /**
       * The sort configuration for a `PivotTableVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The table options for a pivot table visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-tableoptions)
       */
      override fun tableOptions(): Any? = unwrap(this).getTableOptions()

      /**
       * The total options for a pivot table visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-totaloptions)
       */
      override fun totalOptions(): Any? = unwrap(this).getTotalOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConfigurationProperty):
          PivotTableConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface NumericAxisOptionsProperty {
    /**
     * The range setup of a numeric axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaxisoptions.html#cfn-quicksight-analysis-numericaxisoptions-range)
     */
    public fun range(): Any? = unwrap(this).getRange()

    /**
     * The scale setup of a numeric axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaxisoptions.html#cfn-quicksight-analysis-numericaxisoptions-scale)
     */
    public fun scale(): Any? = unwrap(this).getScale()

    /**
     * A builder for [NumericAxisOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param range The range setup of a numeric axis.
       */
      public fun range(range: IResolvable)

      /**
       * @param range The range setup of a numeric axis.
       */
      public fun range(range: AxisDisplayRangeProperty)

      /**
       * @param range The range setup of a numeric axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b1cec9f2833addfa660c8ad152114f504fc39f0fc3cfb868ccee5d83f697ead8")
      public fun range(range: AxisDisplayRangeProperty.Builder.() -> Unit)

      /**
       * @param scale The scale setup of a numeric axis.
       */
      public fun scale(scale: IResolvable)

      /**
       * @param scale The scale setup of a numeric axis.
       */
      public fun scale(scale: AxisScaleProperty)

      /**
       * @param scale The scale setup of a numeric axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f5b3ba639482089d1a83db4e2739de06b0541257a7f56cb77dae6d7ad9f69f19")
      public fun scale(scale: AxisScaleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericAxisOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericAxisOptionsProperty.builder()

      /**
       * @param range The range setup of a numeric axis.
       */
      override fun range(range: IResolvable) {
        cdkBuilder.range(range.let(IResolvable::unwrap))
      }

      /**
       * @param range The range setup of a numeric axis.
       */
      override fun range(range: AxisDisplayRangeProperty) {
        cdkBuilder.range(range.let(AxisDisplayRangeProperty::unwrap))
      }

      /**
       * @param range The range setup of a numeric axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b1cec9f2833addfa660c8ad152114f504fc39f0fc3cfb868ccee5d83f697ead8")
      override fun range(range: AxisDisplayRangeProperty.Builder.() -> Unit): Unit =
          range(AxisDisplayRangeProperty(range))

      /**
       * @param scale The scale setup of a numeric axis.
       */
      override fun scale(scale: IResolvable) {
        cdkBuilder.scale(scale.let(IResolvable::unwrap))
      }

      /**
       * @param scale The scale setup of a numeric axis.
       */
      override fun scale(scale: AxisScaleProperty) {
        cdkBuilder.scale(scale.let(AxisScaleProperty::unwrap))
      }

      /**
       * @param scale The scale setup of a numeric axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f5b3ba639482089d1a83db4e2739de06b0541257a7f56cb77dae6d7ad9f69f19")
      override fun scale(scale: AxisScaleProperty.Builder.() -> Unit): Unit =
          scale(AxisScaleProperty(scale))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericAxisOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericAxisOptionsProperty,
    ) : NumericAxisOptionsProperty {
      /**
       * The range setup of a numeric axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaxisoptions.html#cfn-quicksight-analysis-numericaxisoptions-range)
       */
      override fun range(): Any? = unwrap(this).getRange()

      /**
       * The scale setup of a numeric axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaxisoptions.html#cfn-quicksight-analysis-numericaxisoptions-scale)
       */
      override fun scale(): Any? = unwrap(this).getScale()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): NumericAxisOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericAxisOptionsProperty):
          NumericAxisOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericAxisOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericAxisOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableSortByProperty {
    /**
     * The column sort (field id, direction) for the pivot table sort by options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortby.html#cfn-quicksight-analysis-pivottablesortby-column)
     */
    public fun column(): Any? = unwrap(this).getColumn()

    /**
     * The data path sort (data path value, direction) for the pivot table sort by options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortby.html#cfn-quicksight-analysis-pivottablesortby-datapath)
     */
    public fun dataPath(): Any? = unwrap(this).getDataPath()

    /**
     * The field sort (field id, direction) for the pivot table sort by options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortby.html#cfn-quicksight-analysis-pivottablesortby-field)
     */
    public fun `field`(): Any? = unwrap(this).getField()

    /**
     * A builder for [PivotTableSortByProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param column The column sort (field id, direction) for the pivot table sort by options.
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column sort (field id, direction) for the pivot table sort by options.
       */
      public fun column(column: ColumnSortProperty)

      /**
       * @param column The column sort (field id, direction) for the pivot table sort by options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4e487f07253aa7b27bcf78d5562a4bd5363d750547eed8235f8a85742d91e66a")
      public fun column(column: ColumnSortProperty.Builder.() -> Unit)

      /**
       * @param dataPath The data path sort (data path value, direction) for the pivot table sort by
       * options.
       */
      public fun dataPath(dataPath: IResolvable)

      /**
       * @param dataPath The data path sort (data path value, direction) for the pivot table sort by
       * options.
       */
      public fun dataPath(dataPath: DataPathSortProperty)

      /**
       * @param dataPath The data path sort (data path value, direction) for the pivot table sort by
       * options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8be1fdded1a637608c04ab513a75911aa483964702d72a3d29cf52936f1af67a")
      public fun dataPath(dataPath: DataPathSortProperty.Builder.() -> Unit)

      /**
       * @param field The field sort (field id, direction) for the pivot table sort by options.
       */
      public fun `field`(`field`: IResolvable)

      /**
       * @param field The field sort (field id, direction) for the pivot table sort by options.
       */
      public fun `field`(`field`: FieldSortProperty)

      /**
       * @param field The field sort (field id, direction) for the pivot table sort by options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("98e8c12300dab4f02e284c5de9e4ae6263674f62d161072251cd7dfd2d493303")
      public fun `field`(`field`: FieldSortProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableSortByProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableSortByProperty.builder()

      /**
       * @param column The column sort (field id, direction) for the pivot table sort by options.
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column sort (field id, direction) for the pivot table sort by options.
       */
      override fun column(column: ColumnSortProperty) {
        cdkBuilder.column(column.let(ColumnSortProperty::unwrap))
      }

      /**
       * @param column The column sort (field id, direction) for the pivot table sort by options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4e487f07253aa7b27bcf78d5562a4bd5363d750547eed8235f8a85742d91e66a")
      override fun column(column: ColumnSortProperty.Builder.() -> Unit): Unit =
          column(ColumnSortProperty(column))

      /**
       * @param dataPath The data path sort (data path value, direction) for the pivot table sort by
       * options.
       */
      override fun dataPath(dataPath: IResolvable) {
        cdkBuilder.dataPath(dataPath.let(IResolvable::unwrap))
      }

      /**
       * @param dataPath The data path sort (data path value, direction) for the pivot table sort by
       * options.
       */
      override fun dataPath(dataPath: DataPathSortProperty) {
        cdkBuilder.dataPath(dataPath.let(DataPathSortProperty::unwrap))
      }

      /**
       * @param dataPath The data path sort (data path value, direction) for the pivot table sort by
       * options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8be1fdded1a637608c04ab513a75911aa483964702d72a3d29cf52936f1af67a")
      override fun dataPath(dataPath: DataPathSortProperty.Builder.() -> Unit): Unit =
          dataPath(DataPathSortProperty(dataPath))

      /**
       * @param field The field sort (field id, direction) for the pivot table sort by options.
       */
      override fun `field`(`field`: IResolvable) {
        cdkBuilder.`field`(`field`.let(IResolvable::unwrap))
      }

      /**
       * @param field The field sort (field id, direction) for the pivot table sort by options.
       */
      override fun `field`(`field`: FieldSortProperty) {
        cdkBuilder.`field`(`field`.let(FieldSortProperty::unwrap))
      }

      /**
       * @param field The field sort (field id, direction) for the pivot table sort by options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("98e8c12300dab4f02e284c5de9e4ae6263674f62d161072251cd7dfd2d493303")
      override fun `field`(`field`: FieldSortProperty.Builder.() -> Unit): Unit =
          `field`(FieldSortProperty(`field`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableSortByProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableSortByProperty,
    ) : PivotTableSortByProperty {
      /**
       * The column sort (field id, direction) for the pivot table sort by options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortby.html#cfn-quicksight-analysis-pivottablesortby-column)
       */
      override fun column(): Any? = unwrap(this).getColumn()

      /**
       * The data path sort (data path value, direction) for the pivot table sort by options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortby.html#cfn-quicksight-analysis-pivottablesortby-datapath)
       */
      override fun dataPath(): Any? = unwrap(this).getDataPath()

      /**
       * The field sort (field id, direction) for the pivot table sort by options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortby.html#cfn-quicksight-analysis-pivottablesortby-field)
       */
      override fun `field`(): Any? = unwrap(this).getField()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableSortByProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableSortByProperty):
          PivotTableSortByProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableSortByProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableSortByProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface GrowthRateComputationProperty {
    /**
     * The ID for a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-computationid)
     */
    public fun computationId(): String

    /**
     * The name of a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * The period size setup of a growth rate computation.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-periodsize)
     */
    public fun periodSize(): Number? = unwrap(this).getPeriodSize()

    /**
     * The time field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-time)
     */
    public fun time(): Any? = unwrap(this).getTime()

    /**
     * The value field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-value)
     */
    public fun `value`(): Any? = unwrap(this).getValue()

    /**
     * A builder for [GrowthRateComputationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param computationId The ID for a computation. 
       */
      public fun computationId(computationId: String)

      /**
       * @param name The name of a computation.
       */
      public fun name(name: String)

      /**
       * @param periodSize The period size setup of a growth rate computation.
       */
      public fun periodSize(periodSize: Number)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: IResolvable)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: DimensionFieldProperty)

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e3cb26d58d28289412014bf937b30e67ea49ea9d07471b5e35659ef47093215")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: IResolvable)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: MeasureFieldProperty)

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("adf94c4d67b3ce2d0796d928c2f5112ff2c30ce0f350c8c1a7b639c72f231d67")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GrowthRateComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GrowthRateComputationProperty.builder()

      /**
       * @param computationId The ID for a computation. 
       */
      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      /**
       * @param name The name of a computation.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param periodSize The period size setup of a growth rate computation.
       */
      override fun periodSize(periodSize: Number) {
        cdkBuilder.periodSize(periodSize)
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e3cb26d58d28289412014bf937b30e67ea49ea9d07471b5e35659ef47093215")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("adf94c4d67b3ce2d0796d928c2f5112ff2c30ce0f350c8c1a7b639c72f231d67")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GrowthRateComputationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GrowthRateComputationProperty,
    ) : GrowthRateComputationProperty {
      /**
       * The ID for a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-computationid)
       */
      override fun computationId(): String = unwrap(this).getComputationId()

      /**
       * The name of a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-name)
       */
      override fun name(): String? = unwrap(this).getName()

      /**
       * The period size setup of a growth rate computation.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-periodsize)
       */
      override fun periodSize(): Number? = unwrap(this).getPeriodSize()

      /**
       * The time field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-time)
       */
      override fun time(): Any? = unwrap(this).getTime()

      /**
       * The value field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-value)
       */
      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GrowthRateComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GrowthRateComputationProperty):
          GrowthRateComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GrowthRateComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GrowthRateComputationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ScatterPlotConfigurationProperty {
    /**
     * The options that determine if visual data labels are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-datalabels)
     */
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    /**
     * The field wells of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The legend display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-legend)
     */
    public fun legend(): Any? = unwrap(this).getLegend()

    /**
     * The legend display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-tooltip)
     */
    public fun tooltip(): Any? = unwrap(this).getTooltip()

    /**
     * The palette (chart color) display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-visualpalette)
     */
    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    /**
     * The label display options (grid line, range, scale, and axis step) of the scatter plot's
     * x-axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-xaxisdisplayoptions)
     */
    public fun xAxisDisplayOptions(): Any? = unwrap(this).getXAxisDisplayOptions()

    /**
     * The label options (label text, label visibility, and sort icon visibility) of the scatter
     * plot's x-axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-xaxislabeloptions)
     */
    public fun xAxisLabelOptions(): Any? = unwrap(this).getXAxisLabelOptions()

    /**
     * The label display options (grid line, range, scale, and axis step) of the scatter plot's
     * y-axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-yaxisdisplayoptions)
     */
    public fun yAxisDisplayOptions(): Any? = unwrap(this).getYAxisDisplayOptions()

    /**
     * The label options (label text, label visibility, and sort icon visibility) of the scatter
     * plot's y-axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-yaxislabeloptions)
     */
    public fun yAxisLabelOptions(): Any? = unwrap(this).getYAxisLabelOptions()

    /**
     * A builder for [ScatterPlotConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      public fun dataLabels(dataLabels: IResolvable)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9642c72364d3aac02787c203bde4fbe92343adf6e246e856b900734296990b62")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: ScatterPlotFieldWellsProperty)

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2c41200b3c2626c51901a2686cd8efb4bec1c32dedfe11a3814dfffd85f23165")
      public fun fieldWells(fieldWells: ScatterPlotFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: IResolvable)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: LegendOptionsProperty)

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("39486a3d86118b6d8cbfa2d932ad1586701266792730f0974e518d1c13176712")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      /**
       * @param tooltip The legend display setup of the visual.
       */
      public fun tooltip(tooltip: IResolvable)

      /**
       * @param tooltip The legend display setup of the visual.
       */
      public fun tooltip(tooltip: TooltipOptionsProperty)

      /**
       * @param tooltip The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("80baa13c4321c05a079f05ff434c0d042ca6eaf01d54222e48d81b8f88e6c8ae")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      public fun visualPalette(visualPalette: IResolvable)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      public fun visualPalette(visualPalette: VisualPaletteProperty)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3242aae792f2c14f1733f51b12b3b86524f4a7ece5b9287a485e8f011b022a5b")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)

      /**
       * @param xAxisDisplayOptions The label display options (grid line, range, scale, and axis
       * step) of the scatter plot's x-axis.
       */
      public fun xAxisDisplayOptions(xAxisDisplayOptions: IResolvable)

      /**
       * @param xAxisDisplayOptions The label display options (grid line, range, scale, and axis
       * step) of the scatter plot's x-axis.
       */
      public fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty)

      /**
       * @param xAxisDisplayOptions The label display options (grid line, range, scale, and axis
       * step) of the scatter plot's x-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5e8e5ad8c02b62f94cd5a79d1c691e39de07607a7948212f35162dc2a28c00e3")
      public
          fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param xAxisLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of the scatter plot's x-axis.
       */
      public fun xAxisLabelOptions(xAxisLabelOptions: IResolvable)

      /**
       * @param xAxisLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of the scatter plot's x-axis.
       */
      public fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param xAxisLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of the scatter plot's x-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4e2944c87d0d2ea067820f59814f8fb74d64e8e6c40946aaccc42cade2a272db")
      public
          fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param yAxisDisplayOptions The label display options (grid line, range, scale, and axis
       * step) of the scatter plot's y-axis.
       */
      public fun yAxisDisplayOptions(yAxisDisplayOptions: IResolvable)

      /**
       * @param yAxisDisplayOptions The label display options (grid line, range, scale, and axis
       * step) of the scatter plot's y-axis.
       */
      public fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty)

      /**
       * @param yAxisDisplayOptions The label display options (grid line, range, scale, and axis
       * step) of the scatter plot's y-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1747fa7db8046df52fc0a2c1ce127d334f05536f555938c62de90164c065c72f")
      public
          fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param yAxisLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of the scatter plot's y-axis.
       */
      public fun yAxisLabelOptions(yAxisLabelOptions: IResolvable)

      /**
       * @param yAxisLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of the scatter plot's y-axis.
       */
      public fun yAxisLabelOptions(yAxisLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param yAxisLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of the scatter plot's y-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c70b6963dd99327ced1b0c1e7b160262763a654cce00f6b9e4217b51ca89efb7")
      public
          fun yAxisLabelOptions(yAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotConfigurationProperty.builder()

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9642c72364d3aac02787c203bde4fbe92343adf6e246e856b900734296990b62")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: ScatterPlotFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(ScatterPlotFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2c41200b3c2626c51901a2686cd8efb4bec1c32dedfe11a3814dfffd85f23165")
      override fun fieldWells(fieldWells: ScatterPlotFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(ScatterPlotFieldWellsProperty(fieldWells))

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("39486a3d86118b6d8cbfa2d932ad1586701266792730f0974e518d1c13176712")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      /**
       * @param tooltip The legend display setup of the visual.
       */
      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      /**
       * @param tooltip The legend display setup of the visual.
       */
      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltip The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("80baa13c4321c05a079f05ff434c0d042ca6eaf01d54222e48d81b8f88e6c8ae")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3242aae792f2c14f1733f51b12b3b86524f4a7ece5b9287a485e8f011b022a5b")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      /**
       * @param xAxisDisplayOptions The label display options (grid line, range, scale, and axis
       * step) of the scatter plot's x-axis.
       */
      override fun xAxisDisplayOptions(xAxisDisplayOptions: IResolvable) {
        cdkBuilder.xAxisDisplayOptions(xAxisDisplayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param xAxisDisplayOptions The label display options (grid line, range, scale, and axis
       * step) of the scatter plot's x-axis.
       */
      override fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.xAxisDisplayOptions(xAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param xAxisDisplayOptions The label display options (grid line, range, scale, and axis
       * step) of the scatter plot's x-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5e8e5ad8c02b62f94cd5a79d1c691e39de07607a7948212f35162dc2a28c00e3")
      override
          fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = xAxisDisplayOptions(AxisDisplayOptionsProperty(xAxisDisplayOptions))

      /**
       * @param xAxisLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of the scatter plot's x-axis.
       */
      override fun xAxisLabelOptions(xAxisLabelOptions: IResolvable) {
        cdkBuilder.xAxisLabelOptions(xAxisLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param xAxisLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of the scatter plot's x-axis.
       */
      override fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.xAxisLabelOptions(xAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param xAxisLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of the scatter plot's x-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4e2944c87d0d2ea067820f59814f8fb74d64e8e6c40946aaccc42cade2a272db")
      override
          fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = xAxisLabelOptions(ChartAxisLabelOptionsProperty(xAxisLabelOptions))

      /**
       * @param yAxisDisplayOptions The label display options (grid line, range, scale, and axis
       * step) of the scatter plot's y-axis.
       */
      override fun yAxisDisplayOptions(yAxisDisplayOptions: IResolvable) {
        cdkBuilder.yAxisDisplayOptions(yAxisDisplayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param yAxisDisplayOptions The label display options (grid line, range, scale, and axis
       * step) of the scatter plot's y-axis.
       */
      override fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.yAxisDisplayOptions(yAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param yAxisDisplayOptions The label display options (grid line, range, scale, and axis
       * step) of the scatter plot's y-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1747fa7db8046df52fc0a2c1ce127d334f05536f555938c62de90164c065c72f")
      override
          fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = yAxisDisplayOptions(AxisDisplayOptionsProperty(yAxisDisplayOptions))

      /**
       * @param yAxisLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of the scatter plot's y-axis.
       */
      override fun yAxisLabelOptions(yAxisLabelOptions: IResolvable) {
        cdkBuilder.yAxisLabelOptions(yAxisLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param yAxisLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of the scatter plot's y-axis.
       */
      override fun yAxisLabelOptions(yAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.yAxisLabelOptions(yAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param yAxisLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of the scatter plot's y-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c70b6963dd99327ced1b0c1e7b160262763a654cce00f6b9e4217b51ca89efb7")
      override
          fun yAxisLabelOptions(yAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = yAxisLabelOptions(ChartAxisLabelOptionsProperty(yAxisLabelOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotConfigurationProperty,
    ) : ScatterPlotConfigurationProperty {
      /**
       * The options that determine if visual data labels are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-datalabels)
       */
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      /**
       * The field wells of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The legend display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-legend)
       */
      override fun legend(): Any? = unwrap(this).getLegend()

      /**
       * The legend display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-tooltip)
       */
      override fun tooltip(): Any? = unwrap(this).getTooltip()

      /**
       * The palette (chart color) display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-visualpalette)
       */
      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()

      /**
       * The label display options (grid line, range, scale, and axis step) of the scatter plot's
       * x-axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-xaxisdisplayoptions)
       */
      override fun xAxisDisplayOptions(): Any? = unwrap(this).getXAxisDisplayOptions()

      /**
       * The label options (label text, label visibility, and sort icon visibility) of the scatter
       * plot's x-axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-xaxislabeloptions)
       */
      override fun xAxisLabelOptions(): Any? = unwrap(this).getXAxisLabelOptions()

      /**
       * The label display options (grid line, range, scale, and axis step) of the scatter plot's
       * y-axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-yaxisdisplayoptions)
       */
      override fun yAxisDisplayOptions(): Any? = unwrap(this).getYAxisDisplayOptions()

      /**
       * The label options (label text, label visibility, and sort icon visibility) of the scatter
       * plot's y-axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-yaxislabeloptions)
       */
      override fun yAxisLabelOptions(): Any? = unwrap(this).getYAxisLabelOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ScatterPlotConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotConfigurationProperty):
          ScatterPlotConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ScatterPlotConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TreeMapSortConfigurationProperty {
    /**
     * The limit on the number of groups that are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapsortconfiguration.html#cfn-quicksight-analysis-treemapsortconfiguration-treemapgroupitemslimitconfiguration)
     */
    public fun treeMapGroupItemsLimitConfiguration(): Any? =
        unwrap(this).getTreeMapGroupItemsLimitConfiguration()

    /**
     * The sort configuration of group by fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapsortconfiguration.html#cfn-quicksight-analysis-treemapsortconfiguration-treemapsort)
     */
    public fun treeMapSort(): Any? = unwrap(this).getTreeMapSort()

    /**
     * A builder for [TreeMapSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param treeMapGroupItemsLimitConfiguration The limit on the number of groups that are
       * displayed.
       */
      public
          fun treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration: IResolvable)

      /**
       * @param treeMapGroupItemsLimitConfiguration The limit on the number of groups that are
       * displayed.
       */
      public
          fun treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration: ItemsLimitConfigurationProperty)

      /**
       * @param treeMapGroupItemsLimitConfiguration The limit on the number of groups that are
       * displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5327267567f679d99665502c79209cd61669f2c511c202f17ee4e7db7cfce578")
      public
          fun treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param treeMapSort The sort configuration of group by fields.
       */
      public fun treeMapSort(treeMapSort: IResolvable)

      /**
       * @param treeMapSort The sort configuration of group by fields.
       */
      public fun treeMapSort(treeMapSort: List<Any>)

      /**
       * @param treeMapSort The sort configuration of group by fields.
       */
      public fun treeMapSort(vararg treeMapSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapSortConfigurationProperty.builder()

      /**
       * @param treeMapGroupItemsLimitConfiguration The limit on the number of groups that are
       * displayed.
       */
      override
          fun treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration: IResolvable) {
        cdkBuilder.treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param treeMapGroupItemsLimitConfiguration The limit on the number of groups that are
       * displayed.
       */
      override
          fun treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param treeMapGroupItemsLimitConfiguration The limit on the number of groups that are
       * displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5327267567f679d99665502c79209cd61669f2c511c202f17ee4e7db7cfce578")
      override
          fun treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          treeMapGroupItemsLimitConfiguration(ItemsLimitConfigurationProperty(treeMapGroupItemsLimitConfiguration))

      /**
       * @param treeMapSort The sort configuration of group by fields.
       */
      override fun treeMapSort(treeMapSort: IResolvable) {
        cdkBuilder.treeMapSort(treeMapSort.let(IResolvable::unwrap))
      }

      /**
       * @param treeMapSort The sort configuration of group by fields.
       */
      override fun treeMapSort(treeMapSort: List<Any>) {
        cdkBuilder.treeMapSort(treeMapSort)
      }

      /**
       * @param treeMapSort The sort configuration of group by fields.
       */
      override fun treeMapSort(vararg treeMapSort: Any): Unit = treeMapSort(treeMapSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapSortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapSortConfigurationProperty,
    ) : TreeMapSortConfigurationProperty {
      /**
       * The limit on the number of groups that are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapsortconfiguration.html#cfn-quicksight-analysis-treemapsortconfiguration-treemapgroupitemslimitconfiguration)
       */
      override fun treeMapGroupItemsLimitConfiguration(): Any? =
          unwrap(this).getTreeMapGroupItemsLimitConfiguration()

      /**
       * The sort configuration of group by fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapsortconfiguration.html#cfn-quicksight-analysis-treemapsortconfiguration-treemapsort)
       */
      override fun treeMapSort(): Any? = unwrap(this).getTreeMapSort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TreeMapSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapSortConfigurationProperty):
          TreeMapSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TreeMapSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapSortConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface DataLabelTypeProperty {
    /**
     * The option that specifies individual data values for labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-datapathlabeltype)
     */
    public fun dataPathLabelType(): Any? = unwrap(this).getDataPathLabelType()

    /**
     * Determines the label configuration for the entire field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-fieldlabeltype)
     */
    public fun fieldLabelType(): Any? = unwrap(this).getFieldLabelType()

    /**
     * Determines the label configuration for the maximum value in a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-maximumlabeltype)
     */
    public fun maximumLabelType(): Any? = unwrap(this).getMaximumLabelType()

    /**
     * Determines the label configuration for the minimum value in a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-minimumlabeltype)
     */
    public fun minimumLabelType(): Any? = unwrap(this).getMinimumLabelType()

    /**
     * Determines the label configuration for range end value in a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-rangeendslabeltype)
     */
    public fun rangeEndsLabelType(): Any? = unwrap(this).getRangeEndsLabelType()

    /**
     * A builder for [DataLabelTypeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataPathLabelType The option that specifies individual data values for labels.
       */
      public fun dataPathLabelType(dataPathLabelType: IResolvable)

      /**
       * @param dataPathLabelType The option that specifies individual data values for labels.
       */
      public fun dataPathLabelType(dataPathLabelType: DataPathLabelTypeProperty)

      /**
       * @param dataPathLabelType The option that specifies individual data values for labels.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b5efe2b5e20b17c124fa467929c0b286fb39b92be20df7c65dac69d23a42d811")
      public fun dataPathLabelType(dataPathLabelType: DataPathLabelTypeProperty.Builder.() -> Unit)

      /**
       * @param fieldLabelType Determines the label configuration for the entire field.
       */
      public fun fieldLabelType(fieldLabelType: IResolvable)

      /**
       * @param fieldLabelType Determines the label configuration for the entire field.
       */
      public fun fieldLabelType(fieldLabelType: FieldLabelTypeProperty)

      /**
       * @param fieldLabelType Determines the label configuration for the entire field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ba1a5c597fcb3bbd1d7d844b3b03075677666c251637c2142d83e2e4aa84d705")
      public fun fieldLabelType(fieldLabelType: FieldLabelTypeProperty.Builder.() -> Unit)

      /**
       * @param maximumLabelType Determines the label configuration for the maximum value in a
       * visual.
       */
      public fun maximumLabelType(maximumLabelType: IResolvable)

      /**
       * @param maximumLabelType Determines the label configuration for the maximum value in a
       * visual.
       */
      public fun maximumLabelType(maximumLabelType: MaximumLabelTypeProperty)

      /**
       * @param maximumLabelType Determines the label configuration for the maximum value in a
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("66cc07e7e0fc8ede0ead32e64393bcc72db22cec81241768c5fe223efc995339")
      public fun maximumLabelType(maximumLabelType: MaximumLabelTypeProperty.Builder.() -> Unit)

      /**
       * @param minimumLabelType Determines the label configuration for the minimum value in a
       * visual.
       */
      public fun minimumLabelType(minimumLabelType: IResolvable)

      /**
       * @param minimumLabelType Determines the label configuration for the minimum value in a
       * visual.
       */
      public fun minimumLabelType(minimumLabelType: MinimumLabelTypeProperty)

      /**
       * @param minimumLabelType Determines the label configuration for the minimum value in a
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5652df6787301c23304e873d64a7690c6b7cd6fc00ec6546e4f6a8fabbd96abe")
      public fun minimumLabelType(minimumLabelType: MinimumLabelTypeProperty.Builder.() -> Unit)

      /**
       * @param rangeEndsLabelType Determines the label configuration for range end value in a
       * visual.
       */
      public fun rangeEndsLabelType(rangeEndsLabelType: IResolvable)

      /**
       * @param rangeEndsLabelType Determines the label configuration for range end value in a
       * visual.
       */
      public fun rangeEndsLabelType(rangeEndsLabelType: RangeEndsLabelTypeProperty)

      /**
       * @param rangeEndsLabelType Determines the label configuration for range end value in a
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c9602fba05ca72e436d02b0648be430ed655f7c159f7136e58696a3df39e439b")
      public
          fun rangeEndsLabelType(rangeEndsLabelType: RangeEndsLabelTypeProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataLabelTypeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataLabelTypeProperty.builder()

      /**
       * @param dataPathLabelType The option that specifies individual data values for labels.
       */
      override fun dataPathLabelType(dataPathLabelType: IResolvable) {
        cdkBuilder.dataPathLabelType(dataPathLabelType.let(IResolvable::unwrap))
      }

      /**
       * @param dataPathLabelType The option that specifies individual data values for labels.
       */
      override fun dataPathLabelType(dataPathLabelType: DataPathLabelTypeProperty) {
        cdkBuilder.dataPathLabelType(dataPathLabelType.let(DataPathLabelTypeProperty::unwrap))
      }

      /**
       * @param dataPathLabelType The option that specifies individual data values for labels.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b5efe2b5e20b17c124fa467929c0b286fb39b92be20df7c65dac69d23a42d811")
      override
          fun dataPathLabelType(dataPathLabelType: DataPathLabelTypeProperty.Builder.() -> Unit):
          Unit = dataPathLabelType(DataPathLabelTypeProperty(dataPathLabelType))

      /**
       * @param fieldLabelType Determines the label configuration for the entire field.
       */
      override fun fieldLabelType(fieldLabelType: IResolvable) {
        cdkBuilder.fieldLabelType(fieldLabelType.let(IResolvable::unwrap))
      }

      /**
       * @param fieldLabelType Determines the label configuration for the entire field.
       */
      override fun fieldLabelType(fieldLabelType: FieldLabelTypeProperty) {
        cdkBuilder.fieldLabelType(fieldLabelType.let(FieldLabelTypeProperty::unwrap))
      }

      /**
       * @param fieldLabelType Determines the label configuration for the entire field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ba1a5c597fcb3bbd1d7d844b3b03075677666c251637c2142d83e2e4aa84d705")
      override fun fieldLabelType(fieldLabelType: FieldLabelTypeProperty.Builder.() -> Unit): Unit =
          fieldLabelType(FieldLabelTypeProperty(fieldLabelType))

      /**
       * @param maximumLabelType Determines the label configuration for the maximum value in a
       * visual.
       */
      override fun maximumLabelType(maximumLabelType: IResolvable) {
        cdkBuilder.maximumLabelType(maximumLabelType.let(IResolvable::unwrap))
      }

      /**
       * @param maximumLabelType Determines the label configuration for the maximum value in a
       * visual.
       */
      override fun maximumLabelType(maximumLabelType: MaximumLabelTypeProperty) {
        cdkBuilder.maximumLabelType(maximumLabelType.let(MaximumLabelTypeProperty::unwrap))
      }

      /**
       * @param maximumLabelType Determines the label configuration for the maximum value in a
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("66cc07e7e0fc8ede0ead32e64393bcc72db22cec81241768c5fe223efc995339")
      override fun maximumLabelType(maximumLabelType: MaximumLabelTypeProperty.Builder.() -> Unit):
          Unit = maximumLabelType(MaximumLabelTypeProperty(maximumLabelType))

      /**
       * @param minimumLabelType Determines the label configuration for the minimum value in a
       * visual.
       */
      override fun minimumLabelType(minimumLabelType: IResolvable) {
        cdkBuilder.minimumLabelType(minimumLabelType.let(IResolvable::unwrap))
      }

      /**
       * @param minimumLabelType Determines the label configuration for the minimum value in a
       * visual.
       */
      override fun minimumLabelType(minimumLabelType: MinimumLabelTypeProperty) {
        cdkBuilder.minimumLabelType(minimumLabelType.let(MinimumLabelTypeProperty::unwrap))
      }

      /**
       * @param minimumLabelType Determines the label configuration for the minimum value in a
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5652df6787301c23304e873d64a7690c6b7cd6fc00ec6546e4f6a8fabbd96abe")
      override fun minimumLabelType(minimumLabelType: MinimumLabelTypeProperty.Builder.() -> Unit):
          Unit = minimumLabelType(MinimumLabelTypeProperty(minimumLabelType))

      /**
       * @param rangeEndsLabelType Determines the label configuration for range end value in a
       * visual.
       */
      override fun rangeEndsLabelType(rangeEndsLabelType: IResolvable) {
        cdkBuilder.rangeEndsLabelType(rangeEndsLabelType.let(IResolvable::unwrap))
      }

      /**
       * @param rangeEndsLabelType Determines the label configuration for range end value in a
       * visual.
       */
      override fun rangeEndsLabelType(rangeEndsLabelType: RangeEndsLabelTypeProperty) {
        cdkBuilder.rangeEndsLabelType(rangeEndsLabelType.let(RangeEndsLabelTypeProperty::unwrap))
      }

      /**
       * @param rangeEndsLabelType Determines the label configuration for range end value in a
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c9602fba05ca72e436d02b0648be430ed655f7c159f7136e58696a3df39e439b")
      override
          fun rangeEndsLabelType(rangeEndsLabelType: RangeEndsLabelTypeProperty.Builder.() -> Unit):
          Unit = rangeEndsLabelType(RangeEndsLabelTypeProperty(rangeEndsLabelType))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataLabelTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataLabelTypeProperty,
    ) : DataLabelTypeProperty {
      /**
       * The option that specifies individual data values for labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-datapathlabeltype)
       */
      override fun dataPathLabelType(): Any? = unwrap(this).getDataPathLabelType()

      /**
       * Determines the label configuration for the entire field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-fieldlabeltype)
       */
      override fun fieldLabelType(): Any? = unwrap(this).getFieldLabelType()

      /**
       * Determines the label configuration for the maximum value in a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-maximumlabeltype)
       */
      override fun maximumLabelType(): Any? = unwrap(this).getMaximumLabelType()

      /**
       * Determines the label configuration for the minimum value in a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-minimumlabeltype)
       */
      override fun minimumLabelType(): Any? = unwrap(this).getMinimumLabelType()

      /**
       * Determines the label configuration for range end value in a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-rangeendslabeltype)
       */
      override fun rangeEndsLabelType(): Any? = unwrap(this).getRangeEndsLabelType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DataLabelTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DataLabelTypeProperty):
          DataLabelTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataLabelTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataLabelTypeProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface CustomValuesConfigurationProperty {
    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customvaluesconfiguration.html#cfn-quicksight-analysis-customvaluesconfiguration-customvalues)
     */
    public fun customValues(): Any

    /**
     * Includes the null value in custom action parameter values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customvaluesconfiguration.html#cfn-quicksight-analysis-customvaluesconfiguration-includenullvalue)
     */
    public fun includeNullValue(): Any? = unwrap(this).getIncludeNullValue()

    /**
     * A builder for [CustomValuesConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customValues the value to be set. 
       */
      public fun customValues(customValues: IResolvable)

      /**
       * @param customValues the value to be set. 
       */
      public fun customValues(customValues: CustomParameterValuesProperty)

      /**
       * @param customValues the value to be set. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("61e3a59dbf5cf6ec6354a91a6cff1372b969c208bab62f54a376b9460b091e88")
      public fun customValues(customValues: CustomParameterValuesProperty.Builder.() -> Unit)

      /**
       * @param includeNullValue Includes the null value in custom action parameter values.
       */
      public fun includeNullValue(includeNullValue: Boolean)

      /**
       * @param includeNullValue Includes the null value in custom action parameter values.
       */
      public fun includeNullValue(includeNullValue: IResolvable)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomValuesConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomValuesConfigurationProperty.builder()

      /**
       * @param customValues the value to be set. 
       */
      override fun customValues(customValues: IResolvable) {
        cdkBuilder.customValues(customValues.let(IResolvable::unwrap))
      }

      /**
       * @param customValues the value to be set. 
       */
      override fun customValues(customValues: CustomParameterValuesProperty) {
        cdkBuilder.customValues(customValues.let(CustomParameterValuesProperty::unwrap))
      }

      /**
       * @param customValues the value to be set. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("61e3a59dbf5cf6ec6354a91a6cff1372b969c208bab62f54a376b9460b091e88")
      override fun customValues(customValues: CustomParameterValuesProperty.Builder.() -> Unit):
          Unit = customValues(CustomParameterValuesProperty(customValues))

      /**
       * @param includeNullValue Includes the null value in custom action parameter values.
       */
      override fun includeNullValue(includeNullValue: Boolean) {
        cdkBuilder.includeNullValue(includeNullValue)
      }

      /**
       * @param includeNullValue Includes the null value in custom action parameter values.
       */
      override fun includeNullValue(includeNullValue: IResolvable) {
        cdkBuilder.includeNullValue(includeNullValue.let(IResolvable::unwrap))
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomValuesConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomValuesConfigurationProperty,
    ) : CustomValuesConfigurationProperty {
      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customvaluesconfiguration.html#cfn-quicksight-analysis-customvaluesconfiguration-customvalues)
       */
      override fun customValues(): Any = unwrap(this).getCustomValues()

      /**
       * Includes the null value in custom action parameter values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customvaluesconfiguration.html#cfn-quicksight-analysis-customvaluesconfiguration-includenullvalue)
       */
      override fun includeNullValue(): Any? = unwrap(this).getIncludeNullValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomValuesConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomValuesConfigurationProperty):
          CustomValuesConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomValuesConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomValuesConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TopBottomRankedComputationProperty {
    /**
     * The category field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-category)
     */
    public fun category(): Any? = unwrap(this).getCategory()

    /**
     * The ID for a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-computationid)
     */
    public fun computationId(): String

    /**
     * The name of a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * The result size of a top and bottom ranked computation.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-resultsize)
     */
    public fun resultSize(): Number? = unwrap(this).getResultSize()

    /**
     * The computation type. Choose one of the following options:.
     *
     * * TOP: A top ranked computation.
     * * BOTTOM: A bottom ranked computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-type)
     */
    public fun type(): String

    /**
     * The value field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-value)
     */
    public fun `value`(): Any? = unwrap(this).getValue()

    /**
     * A builder for [TopBottomRankedComputationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param category The category field that is used in a computation.
       */
      public fun category(category: IResolvable)

      /**
       * @param category The category field that is used in a computation.
       */
      public fun category(category: DimensionFieldProperty)

      /**
       * @param category The category field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("248125baf84e48d501379877759a63f66d1aa3b28fed6bc5130f59ad73a2a68a")
      public fun category(category: DimensionFieldProperty.Builder.() -> Unit)

      /**
       * @param computationId The ID for a computation. 
       */
      public fun computationId(computationId: String)

      /**
       * @param name The name of a computation.
       */
      public fun name(name: String)

      /**
       * @param resultSize The result size of a top and bottom ranked computation.
       */
      public fun resultSize(resultSize: Number)

      /**
       * @param type The computation type. Choose one of the following options:. 
       * * TOP: A top ranked computation.
       * * BOTTOM: A bottom ranked computation.
       */
      public fun type(type: String)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: IResolvable)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: MeasureFieldProperty)

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47f896691a86bc1d6a142250ad6b93f0ebc7f4aca72d1a72bcc636c103c042c4")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomRankedComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomRankedComputationProperty.builder()

      /**
       * @param category The category field that is used in a computation.
       */
      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      /**
       * @param category The category field that is used in a computation.
       */
      override fun category(category: DimensionFieldProperty) {
        cdkBuilder.category(category.let(DimensionFieldProperty::unwrap))
      }

      /**
       * @param category The category field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("248125baf84e48d501379877759a63f66d1aa3b28fed6bc5130f59ad73a2a68a")
      override fun category(category: DimensionFieldProperty.Builder.() -> Unit): Unit =
          category(DimensionFieldProperty(category))

      /**
       * @param computationId The ID for a computation. 
       */
      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      /**
       * @param name The name of a computation.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param resultSize The result size of a top and bottom ranked computation.
       */
      override fun resultSize(resultSize: Number) {
        cdkBuilder.resultSize(resultSize)
      }

      /**
       * @param type The computation type. Choose one of the following options:. 
       * * TOP: A top ranked computation.
       * * BOTTOM: A bottom ranked computation.
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47f896691a86bc1d6a142250ad6b93f0ebc7f4aca72d1a72bcc636c103c042c4")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomRankedComputationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomRankedComputationProperty,
    ) : TopBottomRankedComputationProperty {
      /**
       * The category field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-category)
       */
      override fun category(): Any? = unwrap(this).getCategory()

      /**
       * The ID for a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-computationid)
       */
      override fun computationId(): String = unwrap(this).getComputationId()

      /**
       * The name of a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-name)
       */
      override fun name(): String? = unwrap(this).getName()

      /**
       * The result size of a top and bottom ranked computation.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-resultsize)
       */
      override fun resultSize(): Number? = unwrap(this).getResultSize()

      /**
       * The computation type. Choose one of the following options:.
       *
       * * TOP: A top ranked computation.
       * * BOTTOM: A bottom ranked computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-type)
       */
      override fun type(): String = unwrap(this).getType()

      /**
       * The value field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-value)
       */
      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TopBottomRankedComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomRankedComputationProperty):
          TopBottomRankedComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TopBottomRankedComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TopBottomRankedComputationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface BoxPlotStyleOptionsProperty {
    /**
     * The fill styles (solid, transparent) of the box plot.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotstyleoptions.html#cfn-quicksight-analysis-boxplotstyleoptions-fillstyle)
     */
    public fun fillStyle(): String? = unwrap(this).getFillStyle()

    /**
     * A builder for [BoxPlotStyleOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fillStyle The fill styles (solid, transparent) of the box plot.
       */
      public fun fillStyle(fillStyle: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotStyleOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotStyleOptionsProperty.builder()

      /**
       * @param fillStyle The fill styles (solid, transparent) of the box plot.
       */
      override fun fillStyle(fillStyle: String) {
        cdkBuilder.fillStyle(fillStyle)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotStyleOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotStyleOptionsProperty,
    ) : BoxPlotStyleOptionsProperty {
      /**
       * The fill styles (solid, transparent) of the box plot.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotstyleoptions.html#cfn-quicksight-analysis-boxplotstyleoptions-fillstyle)
       */
      override fun fillStyle(): String? = unwrap(this).getFillStyle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): BoxPlotStyleOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotStyleOptionsProperty):
          BoxPlotStyleOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotStyleOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotStyleOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FieldSortProperty {
    /**
     * The sort direction. Choose one of the following options:.
     *
     * * `ASC` : Ascending
     * * `DESC` : Descending
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsort.html#cfn-quicksight-analysis-fieldsort-direction)
     */
    public fun direction(): String

    /**
     * The sort configuration target field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsort.html#cfn-quicksight-analysis-fieldsort-fieldid)
     */
    public fun fieldId(): String

    /**
     * A builder for [FieldSortProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param direction The sort direction. Choose one of the following options:. 
       * * `ASC` : Ascending
       * * `DESC` : Descending
       */
      public fun direction(direction: String)

      /**
       * @param fieldId The sort configuration target field. 
       */
      public fun fieldId(fieldId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSortProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSortProperty.builder()

      /**
       * @param direction The sort direction. Choose one of the following options:. 
       * * `ASC` : Ascending
       * * `DESC` : Descending
       */
      override fun direction(direction: String) {
        cdkBuilder.direction(direction)
      }

      /**
       * @param fieldId The sort configuration target field. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSortProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSortProperty,
    ) : FieldSortProperty {
      /**
       * The sort direction. Choose one of the following options:.
       *
       * * `ASC` : Ascending
       * * `DESC` : Descending
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsort.html#cfn-quicksight-analysis-fieldsort-direction)
       */
      override fun direction(): String = unwrap(this).getDirection()

      /**
       * The sort configuration target field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsort.html#cfn-quicksight-analysis-fieldsort-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FieldSortProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSortProperty):
          FieldSortProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FieldSortProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSortProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface DataPathValueProperty {
    /**
     * The type configuration of the field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathvalue.html#cfn-quicksight-analysis-datapathvalue-datapathtype)
     */
    public fun dataPathType(): Any? = unwrap(this).getDataPathType()

    /**
     * The field ID of the field that needs to be sorted.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathvalue.html#cfn-quicksight-analysis-datapathvalue-fieldid)
     */
    public fun fieldId(): String? = unwrap(this).getFieldId()

    /**
     * The actual value of the field that needs to be sorted.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathvalue.html#cfn-quicksight-analysis-datapathvalue-fieldvalue)
     */
    public fun fieldValue(): String? = unwrap(this).getFieldValue()

    /**
     * A builder for [DataPathValueProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataPathType The type configuration of the field.
       */
      public fun dataPathType(dataPathType: IResolvable)

      /**
       * @param dataPathType The type configuration of the field.
       */
      public fun dataPathType(dataPathType: DataPathTypeProperty)

      /**
       * @param dataPathType The type configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("069bab938206a8623dcb7ec0bbfb60f78cf066cb1ad6f457ee29566c54a2c4c5")
      public fun dataPathType(dataPathType: DataPathTypeProperty.Builder.() -> Unit)

      /**
       * @param fieldId The field ID of the field that needs to be sorted.
       */
      public fun fieldId(fieldId: String)

      /**
       * @param fieldValue The actual value of the field that needs to be sorted.
       */
      public fun fieldValue(fieldValue: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathValueProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathValueProperty.builder()

      /**
       * @param dataPathType The type configuration of the field.
       */
      override fun dataPathType(dataPathType: IResolvable) {
        cdkBuilder.dataPathType(dataPathType.let(IResolvable::unwrap))
      }

      /**
       * @param dataPathType The type configuration of the field.
       */
      override fun dataPathType(dataPathType: DataPathTypeProperty) {
        cdkBuilder.dataPathType(dataPathType.let(DataPathTypeProperty::unwrap))
      }

      /**
       * @param dataPathType The type configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("069bab938206a8623dcb7ec0bbfb60f78cf066cb1ad6f457ee29566c54a2c4c5")
      override fun dataPathType(dataPathType: DataPathTypeProperty.Builder.() -> Unit): Unit =
          dataPathType(DataPathTypeProperty(dataPathType))

      /**
       * @param fieldId The field ID of the field that needs to be sorted.
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param fieldValue The actual value of the field that needs to be sorted.
       */
      override fun fieldValue(fieldValue: String) {
        cdkBuilder.fieldValue(fieldValue)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathValueProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathValueProperty,
    ) : DataPathValueProperty {
      /**
       * The type configuration of the field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathvalue.html#cfn-quicksight-analysis-datapathvalue-datapathtype)
       */
      override fun dataPathType(): Any? = unwrap(this).getDataPathType()

      /**
       * The field ID of the field that needs to be sorted.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathvalue.html#cfn-quicksight-analysis-datapathvalue-fieldid)
       */
      override fun fieldId(): String? = unwrap(this).getFieldId()

      /**
       * The actual value of the field that needs to be sorted.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathvalue.html#cfn-quicksight-analysis-datapathvalue-fieldvalue)
       */
      override fun fieldValue(): String? = unwrap(this).getFieldValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DataPathValueProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathValueProperty):
          DataPathValueProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataPathValueProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathValueProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface ColumnIdentifierProperty {
    /**
     * The name of the column.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnidentifier.html#cfn-quicksight-analysis-columnidentifier-columnname)
     */
    public fun columnName(): String

    /**
     * The data set that the column belongs to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnidentifier.html#cfn-quicksight-analysis-columnidentifier-datasetidentifier)
     */
    public fun dataSetIdentifier(): String

    /**
     * A builder for [ColumnIdentifierProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param columnName The name of the column. 
       */
      public fun columnName(columnName: String)

      /**
       * @param dataSetIdentifier The data set that the column belongs to. 
       */
      public fun dataSetIdentifier(dataSetIdentifier: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnIdentifierProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnIdentifierProperty.builder()

      /**
       * @param columnName The name of the column. 
       */
      override fun columnName(columnName: String) {
        cdkBuilder.columnName(columnName)
      }

      /**
       * @param dataSetIdentifier The data set that the column belongs to. 
       */
      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnIdentifierProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnIdentifierProperty,
    ) : ColumnIdentifierProperty {
      /**
       * The name of the column.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnidentifier.html#cfn-quicksight-analysis-columnidentifier-columnname)
       */
      override fun columnName(): String = unwrap(this).getColumnName()

      /**
       * The data set that the column belongs to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnidentifier.html#cfn-quicksight-analysis-columnidentifier-datasetidentifier)
       */
      override fun dataSetIdentifier(): String = unwrap(this).getDataSetIdentifier()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnIdentifierProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnIdentifierProperty):
          ColumnIdentifierProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnIdentifierProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnIdentifierProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface DecimalParameterProperty {
    /**
     * A display name for the decimal parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameter.html#cfn-quicksight-analysis-decimalparameter-name)
     */
    public fun name(): String

    /**
     * The values for the decimal parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameter.html#cfn-quicksight-analysis-decimalparameter-values)
     */
    public fun values(): Any

    /**
     * A builder for [DecimalParameterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param name A display name for the decimal parameter. 
       */
      public fun name(name: String)

      /**
       * @param values The values for the decimal parameter. 
       */
      public fun values(values: IResolvable)

      /**
       * @param values The values for the decimal parameter. 
       */
      public fun values(values: List<Number>)

      /**
       * @param values The values for the decimal parameter. 
       */
      public fun values(vararg values: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalParameterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalParameterProperty.builder()

      /**
       * @param name A display name for the decimal parameter. 
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param values The values for the decimal parameter. 
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The values for the decimal parameter. 
       */
      override fun values(values: List<Number>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The values for the decimal parameter. 
       */
      override fun values(vararg values: Number): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalParameterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalParameterProperty,
    ) : DecimalParameterProperty {
      /**
       * A display name for the decimal parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameter.html#cfn-quicksight-analysis-decimalparameter-name)
       */
      override fun name(): String = unwrap(this).getName()

      /**
       * The values for the decimal parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameter.html#cfn-quicksight-analysis-decimalparameter-values)
       */
      override fun values(): Any = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DecimalParameterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalParameterProperty):
          DecimalParameterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DecimalParameterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalParameterProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface ArcAxisDisplayRangeProperty {
    /**
     * The maximum value of the arc axis range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisdisplayrange.html#cfn-quicksight-analysis-arcaxisdisplayrange-max)
     */
    public fun max(): Number? = unwrap(this).getMax()

    /**
     * The minimum value of the arc axis range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisdisplayrange.html#cfn-quicksight-analysis-arcaxisdisplayrange-min)
     */
    public fun min(): Number? = unwrap(this).getMin()

    /**
     * A builder for [ArcAxisDisplayRangeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param max The maximum value of the arc axis range.
       */
      public fun max(max: Number)

      /**
       * @param min The minimum value of the arc axis range.
       */
      public fun min(min: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcAxisDisplayRangeProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcAxisDisplayRangeProperty.builder()

      /**
       * @param max The maximum value of the arc axis range.
       */
      override fun max(max: Number) {
        cdkBuilder.max(max)
      }

      /**
       * @param min The minimum value of the arc axis range.
       */
      override fun min(min: Number) {
        cdkBuilder.min(min)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcAxisDisplayRangeProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcAxisDisplayRangeProperty,
    ) : ArcAxisDisplayRangeProperty {
      /**
       * The maximum value of the arc axis range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisdisplayrange.html#cfn-quicksight-analysis-arcaxisdisplayrange-max)
       */
      override fun max(): Number? = unwrap(this).getMax()

      /**
       * The minimum value of the arc axis range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisdisplayrange.html#cfn-quicksight-analysis-arcaxisdisplayrange-min)
       */
      override fun min(): Number? = unwrap(this).getMin()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ArcAxisDisplayRangeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcAxisDisplayRangeProperty):
          ArcAxisDisplayRangeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ArcAxisDisplayRangeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcAxisDisplayRangeProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableFieldImageConfigurationProperty {
    /**
     * The sizing options for the table image configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldimageconfiguration.html#cfn-quicksight-analysis-tablefieldimageconfiguration-sizingoptions)
     */
    public fun sizingOptions(): Any? = unwrap(this).getSizingOptions()

    /**
     * A builder for [TableFieldImageConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param sizingOptions The sizing options for the table image configuration.
       */
      public fun sizingOptions(sizingOptions: IResolvable)

      /**
       * @param sizingOptions The sizing options for the table image configuration.
       */
      public fun sizingOptions(sizingOptions: TableCellImageSizingConfigurationProperty)

      /**
       * @param sizingOptions The sizing options for the table image configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("90b3c183a7ce57c6cbb68dac90bd19858a7b876741004a680c61f26e6c93d6bd")
      public
          fun sizingOptions(sizingOptions: TableCellImageSizingConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldImageConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldImageConfigurationProperty.builder()

      /**
       * @param sizingOptions The sizing options for the table image configuration.
       */
      override fun sizingOptions(sizingOptions: IResolvable) {
        cdkBuilder.sizingOptions(sizingOptions.let(IResolvable::unwrap))
      }

      /**
       * @param sizingOptions The sizing options for the table image configuration.
       */
      override fun sizingOptions(sizingOptions: TableCellImageSizingConfigurationProperty) {
        cdkBuilder.sizingOptions(sizingOptions.let(TableCellImageSizingConfigurationProperty::unwrap))
      }

      /**
       * @param sizingOptions The sizing options for the table image configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("90b3c183a7ce57c6cbb68dac90bd19858a7b876741004a680c61f26e6c93d6bd")
      override
          fun sizingOptions(sizingOptions: TableCellImageSizingConfigurationProperty.Builder.() -> Unit):
          Unit = sizingOptions(TableCellImageSizingConfigurationProperty(sizingOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldImageConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldImageConfigurationProperty,
    ) : TableFieldImageConfigurationProperty {
      /**
       * The sizing options for the table image configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldimageconfiguration.html#cfn-quicksight-analysis-tablefieldimageconfiguration-sizingoptions)
       */
      override fun sizingOptions(): Any? = unwrap(this).getSizingOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableFieldImageConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldImageConfigurationProperty):
          TableFieldImageConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldImageConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldImageConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SectionBasedLayoutCanvasSizeOptionsProperty {
    /**
     * The options for a paper canvas of a section-based layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutcanvassizeoptions.html#cfn-quicksight-analysis-sectionbasedlayoutcanvassizeoptions-papercanvassizeoptions)
     */
    public fun paperCanvasSizeOptions(): Any? = unwrap(this).getPaperCanvasSizeOptions()

    /**
     * A builder for [SectionBasedLayoutCanvasSizeOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param paperCanvasSizeOptions The options for a paper canvas of a section-based layout.
       */
      public fun paperCanvasSizeOptions(paperCanvasSizeOptions: IResolvable)

      /**
       * @param paperCanvasSizeOptions The options for a paper canvas of a section-based layout.
       */
      public
          fun paperCanvasSizeOptions(paperCanvasSizeOptions: SectionBasedLayoutPaperCanvasSizeOptionsProperty)

      /**
       * @param paperCanvasSizeOptions The options for a paper canvas of a section-based layout.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93e2029754fc04681156bf9511df69cca2630f20814bdba36adf4e908a9d1ede")
      public
          fun paperCanvasSizeOptions(paperCanvasSizeOptions: SectionBasedLayoutPaperCanvasSizeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutCanvasSizeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutCanvasSizeOptionsProperty.builder()

      /**
       * @param paperCanvasSizeOptions The options for a paper canvas of a section-based layout.
       */
      override fun paperCanvasSizeOptions(paperCanvasSizeOptions: IResolvable) {
        cdkBuilder.paperCanvasSizeOptions(paperCanvasSizeOptions.let(IResolvable::unwrap))
      }

      /**
       * @param paperCanvasSizeOptions The options for a paper canvas of a section-based layout.
       */
      override
          fun paperCanvasSizeOptions(paperCanvasSizeOptions: SectionBasedLayoutPaperCanvasSizeOptionsProperty) {
        cdkBuilder.paperCanvasSizeOptions(paperCanvasSizeOptions.let(SectionBasedLayoutPaperCanvasSizeOptionsProperty::unwrap))
      }

      /**
       * @param paperCanvasSizeOptions The options for a paper canvas of a section-based layout.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93e2029754fc04681156bf9511df69cca2630f20814bdba36adf4e908a9d1ede")
      override
          fun paperCanvasSizeOptions(paperCanvasSizeOptions: SectionBasedLayoutPaperCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit =
          paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty(paperCanvasSizeOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutCanvasSizeOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutCanvasSizeOptionsProperty,
    ) : SectionBasedLayoutCanvasSizeOptionsProperty {
      /**
       * The options for a paper canvas of a section-based layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutcanvassizeoptions.html#cfn-quicksight-analysis-sectionbasedlayoutcanvassizeoptions-papercanvassizeoptions)
       */
      override fun paperCanvasSizeOptions(): Any? = unwrap(this).getPaperCanvasSizeOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SectionBasedLayoutCanvasSizeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutCanvasSizeOptionsProperty):
          SectionBasedLayoutCanvasSizeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionBasedLayoutCanvasSizeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutCanvasSizeOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ConditionalFormattingCustomIconOptionsProperty {
    /**
     * Determines the type of icon.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconoptions.html#cfn-quicksight-analysis-conditionalformattingcustomiconoptions-icon)
     */
    public fun icon(): String? = unwrap(this).getIcon()

    /**
     * Determines the Unicode icon type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconoptions.html#cfn-quicksight-analysis-conditionalformattingcustomiconoptions-unicodeicon)
     */
    public fun unicodeIcon(): String? = unwrap(this).getUnicodeIcon()

    /**
     * A builder for [ConditionalFormattingCustomIconOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param icon Determines the type of icon.
       */
      public fun icon(icon: String)

      /**
       * @param unicodeIcon Determines the Unicode icon type.
       */
      public fun unicodeIcon(unicodeIcon: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingCustomIconOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingCustomIconOptionsProperty.builder()

      /**
       * @param icon Determines the type of icon.
       */
      override fun icon(icon: String) {
        cdkBuilder.icon(icon)
      }

      /**
       * @param unicodeIcon Determines the Unicode icon type.
       */
      override fun unicodeIcon(unicodeIcon: String) {
        cdkBuilder.unicodeIcon(unicodeIcon)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingCustomIconOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingCustomIconOptionsProperty,
    ) : ConditionalFormattingCustomIconOptionsProperty {
      /**
       * Determines the type of icon.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconoptions.html#cfn-quicksight-analysis-conditionalformattingcustomiconoptions-icon)
       */
      override fun icon(): String? = unwrap(this).getIcon()

      /**
       * Determines the Unicode icon type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconoptions.html#cfn-quicksight-analysis-conditionalformattingcustomiconoptions-unicodeicon)
       */
      override fun unicodeIcon(): String? = unwrap(this).getUnicodeIcon()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingCustomIconOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingCustomIconOptionsProperty):
          ConditionalFormattingCustomIconOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingCustomIconOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingCustomIconOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ComboChartConfigurationProperty {
    /**
     * The options that determine if visual data labels are displayed.
     *
     * The data label options for a bar in a combo chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-bardatalabels)
     */
    public fun barDataLabels(): Any? = unwrap(this).getBarDataLabels()

    /**
     * Determines the bar arrangement in a combo chart. The following are valid values in this
     * structure:.
     *
     * * `CLUSTERED` : For clustered bar combo charts.
     * * `STACKED` : For stacked bar combo charts.
     * * `STACKED_PERCENT` : Do not use. If you use this value, the operation returns a validation
     * error.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-barsarrangement)
     */
    public fun barsArrangement(): String? = unwrap(this).getBarsArrangement()

    /**
     * The category axis of a combo chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-categoryaxis)
     */
    public fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

    /**
     * The label options (label text, label visibility, and sort icon visibility) of a combo chart
     * category (group/color) field well.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-categorylabeloptions)
     */
    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    /**
     * The label options (label text, label visibility, and sort icon visibility) of a combo chart's
     * color field well.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-colorlabeloptions)
     */
    public fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

    /**
     * The field wells of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The legend display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-legend)
     */
    public fun legend(): Any? = unwrap(this).getLegend()

    /**
     * The options that determine if visual data labels are displayed.
     *
     * The data label options for a line in a combo chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-linedatalabels)
     */
    public fun lineDataLabels(): Any? = unwrap(this).getLineDataLabels()

    /**
     * The label display options (grid line, range, scale, and axis step) of a combo chart's primary
     * y-axis (bar) field well.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-primaryyaxisdisplayoptions)
     */
    public fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

    /**
     * The label options (label text, label visibility, and sort icon visibility) of a combo chart's
     * primary y-axis (bar) field well.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-primaryyaxislabeloptions)
     */
    public fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

    /**
     * The reference line setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-referencelines)
     */
    public fun referenceLines(): Any? = unwrap(this).getReferenceLines()

    /**
     * The label display options (grid line, range, scale, axis step) of a combo chart's secondary
     * y-axis (line) field well.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-secondaryyaxisdisplayoptions)
     */
    public fun secondaryYAxisDisplayOptions(): Any? = unwrap(this).getSecondaryYAxisDisplayOptions()

    /**
     * The label options (label text, label visibility, and sort icon visibility) of a combo chart's
     * secondary y-axis(line) field well.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-secondaryyaxislabeloptions)
     */
    public fun secondaryYAxisLabelOptions(): Any? = unwrap(this).getSecondaryYAxisLabelOptions()

    /**
     * The sort configuration of a `ComboChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The legend display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-tooltip)
     */
    public fun tooltip(): Any? = unwrap(this).getTooltip()

    /**
     * The palette (chart color) display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-visualpalette)
     */
    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    /**
     * A builder for [ComboChartConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param barDataLabels The options that determine if visual data labels are displayed.
       * The data label options for a bar in a combo chart.
       */
      public fun barDataLabels(barDataLabels: IResolvable)

      /**
       * @param barDataLabels The options that determine if visual data labels are displayed.
       * The data label options for a bar in a combo chart.
       */
      public fun barDataLabels(barDataLabels: DataLabelOptionsProperty)

      /**
       * @param barDataLabels The options that determine if visual data labels are displayed.
       * The data label options for a bar in a combo chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b1510be0e238a20a90728595fa62c5b3f424f43f4d969216f436369dd2647bb5")
      public fun barDataLabels(barDataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param barsArrangement Determines the bar arrangement in a combo chart. The following are
       * valid values in this structure:.
       * * `CLUSTERED` : For clustered bar combo charts.
       * * `STACKED` : For stacked bar combo charts.
       * * `STACKED_PERCENT` : Do not use. If you use this value, the operation returns a validation
       * error.
       */
      public fun barsArrangement(barsArrangement: String)

      /**
       * @param categoryAxis The category axis of a combo chart.
       */
      public fun categoryAxis(categoryAxis: IResolvable)

      /**
       * @param categoryAxis The category axis of a combo chart.
       */
      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty)

      /**
       * @param categoryAxis The category axis of a combo chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a0155f4ab773c9c1b7a68646da81bab928106e4c84750209b93d9b02fb7a15a5")
      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param categoryLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of a combo chart category (group/color) field well.
       */
      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      /**
       * @param categoryLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of a combo chart category (group/color) field well.
       */
      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param categoryLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of a combo chart category (group/color) field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("72f1ba35943e7ced0d098970ddb232a3eb90bb07bc387eb532fcbfa72fa63466")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param colorLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of a combo chart's color field well.
       */
      public fun colorLabelOptions(colorLabelOptions: IResolvable)

      /**
       * @param colorLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of a combo chart's color field well.
       */
      public fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param colorLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of a combo chart's color field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0d15a3b96cfb61dbd2f96c041e2a08ca1416d63382b89a2e32cfe7ff01e2c17b")
      public
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: ComboChartFieldWellsProperty)

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("052913de2b68322cc3cf7a5f00167233c813b33fb44ff18834827806032f7a62")
      public fun fieldWells(fieldWells: ComboChartFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: IResolvable)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: LegendOptionsProperty)

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("870722e1a74e21809131f8ab107d0e05fa73e355f75a976a4a838d8c3d9f327f")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      /**
       * @param lineDataLabels The options that determine if visual data labels are displayed.
       * The data label options for a line in a combo chart.
       */
      public fun lineDataLabels(lineDataLabels: IResolvable)

      /**
       * @param lineDataLabels The options that determine if visual data labels are displayed.
       * The data label options for a line in a combo chart.
       */
      public fun lineDataLabels(lineDataLabels: DataLabelOptionsProperty)

      /**
       * @param lineDataLabels The options that determine if visual data labels are displayed.
       * The data label options for a line in a combo chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("64a3b4ede1730f5796a97be33946d78388c53a364bc1513819550739ee1bbfcd")
      public fun lineDataLabels(lineDataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param primaryYAxisDisplayOptions The label display options (grid line, range, scale, and
       * axis step) of a combo chart's primary y-axis (bar) field well.
       */
      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable)

      /**
       * @param primaryYAxisDisplayOptions The label display options (grid line, range, scale, and
       * axis step) of a combo chart's primary y-axis (bar) field well.
       */
      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty)

      /**
       * @param primaryYAxisDisplayOptions The label display options (grid line, range, scale, and
       * axis step) of a combo chart's primary y-axis (bar) field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dab82d02ce3e4bf873db4a49887215feba4768ee7b614395973681f18c12ed7f")
      public
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param primaryYAxisLabelOptions The label options (label text, label visibility, and sort
       * icon visibility) of a combo chart's primary y-axis (bar) field well.
       */
      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable)

      /**
       * @param primaryYAxisLabelOptions The label options (label text, label visibility, and sort
       * icon visibility) of a combo chart's primary y-axis (bar) field well.
       */
      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param primaryYAxisLabelOptions The label options (label text, label visibility, and sort
       * icon visibility) of a combo chart's primary y-axis (bar) field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("04285af03488d48631b8dc5f4fadd63bb07421c5dff803795706df6aa57242d3")
      public
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      public fun referenceLines(referenceLines: IResolvable)

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      public fun referenceLines(referenceLines: List<Any>)

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      public fun referenceLines(vararg referenceLines: Any)

      /**
       * @param secondaryYAxisDisplayOptions The label display options (grid line, range, scale,
       * axis step) of a combo chart's secondary y-axis (line) field well.
       */
      public fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: IResolvable)

      /**
       * @param secondaryYAxisDisplayOptions The label display options (grid line, range, scale,
       * axis step) of a combo chart's secondary y-axis (line) field well.
       */
      public
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: AxisDisplayOptionsProperty)

      /**
       * @param secondaryYAxisDisplayOptions The label display options (grid line, range, scale,
       * axis step) of a combo chart's secondary y-axis (line) field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7f0e364c6994e7ed5a388426bb17244b042f90bc1904717a2815dc2c73f93078")
      public
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param secondaryYAxisLabelOptions The label options (label text, label visibility, and sort
       * icon visibility) of a combo chart's secondary y-axis(line) field well.
       */
      public fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: IResolvable)

      /**
       * @param secondaryYAxisLabelOptions The label options (label text, label visibility, and sort
       * icon visibility) of a combo chart's secondary y-axis(line) field well.
       */
      public
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param secondaryYAxisLabelOptions The label options (label text, label visibility, and sort
       * icon visibility) of a combo chart's secondary y-axis(line) field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("364619fe095808336b6e99783d9a95759d2021403755f3186cbe6e1b02eec650")
      public
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration of a `ComboChartVisual` .
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a `ComboChartVisual` .
       */
      public fun sortConfiguration(sortConfiguration: ComboChartSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a `ComboChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("923164ed894ed0b44f4f2f12c522ba283a9d1cdc008ab4f6c36de03d17a766be")
      public
          fun sortConfiguration(sortConfiguration: ComboChartSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param tooltip The legend display setup of the visual.
       */
      public fun tooltip(tooltip: IResolvable)

      /**
       * @param tooltip The legend display setup of the visual.
       */
      public fun tooltip(tooltip: TooltipOptionsProperty)

      /**
       * @param tooltip The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f39f1a372a468adc76f6651c75f8e325d0efd7487c52c36400e5c9aca840e387")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      public fun visualPalette(visualPalette: IResolvable)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      public fun visualPalette(visualPalette: VisualPaletteProperty)

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5db981720500ccd086f1dde6a5af5d16da2091a0e67d9bf141598c81d180d2fc")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartConfigurationProperty.builder()

      /**
       * @param barDataLabels The options that determine if visual data labels are displayed.
       * The data label options for a bar in a combo chart.
       */
      override fun barDataLabels(barDataLabels: IResolvable) {
        cdkBuilder.barDataLabels(barDataLabels.let(IResolvable::unwrap))
      }

      /**
       * @param barDataLabels The options that determine if visual data labels are displayed.
       * The data label options for a bar in a combo chart.
       */
      override fun barDataLabels(barDataLabels: DataLabelOptionsProperty) {
        cdkBuilder.barDataLabels(barDataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      /**
       * @param barDataLabels The options that determine if visual data labels are displayed.
       * The data label options for a bar in a combo chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b1510be0e238a20a90728595fa62c5b3f424f43f4d969216f436369dd2647bb5")
      override fun barDataLabels(barDataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          barDataLabels(DataLabelOptionsProperty(barDataLabels))

      /**
       * @param barsArrangement Determines the bar arrangement in a combo chart. The following are
       * valid values in this structure:.
       * * `CLUSTERED` : For clustered bar combo charts.
       * * `STACKED` : For stacked bar combo charts.
       * * `STACKED_PERCENT` : Do not use. If you use this value, the operation returns a validation
       * error.
       */
      override fun barsArrangement(barsArrangement: String) {
        cdkBuilder.barsArrangement(barsArrangement)
      }

      /**
       * @param categoryAxis The category axis of a combo chart.
       */
      override fun categoryAxis(categoryAxis: IResolvable) {
        cdkBuilder.categoryAxis(categoryAxis.let(IResolvable::unwrap))
      }

      /**
       * @param categoryAxis The category axis of a combo chart.
       */
      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty) {
        cdkBuilder.categoryAxis(categoryAxis.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param categoryAxis The category axis of a combo chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a0155f4ab773c9c1b7a68646da81bab928106e4c84750209b93d9b02fb7a15a5")
      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          categoryAxis(AxisDisplayOptionsProperty(categoryAxis))

      /**
       * @param categoryLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of a combo chart category (group/color) field well.
       */
      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param categoryLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of a combo chart category (group/color) field well.
       */
      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param categoryLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of a combo chart category (group/color) field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("72f1ba35943e7ced0d098970ddb232a3eb90bb07bc387eb532fcbfa72fa63466")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      /**
       * @param colorLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of a combo chart's color field well.
       */
      override fun colorLabelOptions(colorLabelOptions: IResolvable) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param colorLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of a combo chart's color field well.
       */
      override fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param colorLabelOptions The label options (label text, label visibility, and sort icon
       * visibility) of a combo chart's color field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0d15a3b96cfb61dbd2f96c041e2a08ca1416d63382b89a2e32cfe7ff01e2c17b")
      override
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = colorLabelOptions(ChartAxisLabelOptionsProperty(colorLabelOptions))

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: ComboChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(ComboChartFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("052913de2b68322cc3cf7a5f00167233c813b33fb44ff18834827806032f7a62")
      override fun fieldWells(fieldWells: ComboChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(ComboChartFieldWellsProperty(fieldWells))

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("870722e1a74e21809131f8ab107d0e05fa73e355f75a976a4a838d8c3d9f327f")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      /**
       * @param lineDataLabels The options that determine if visual data labels are displayed.
       * The data label options for a line in a combo chart.
       */
      override fun lineDataLabels(lineDataLabels: IResolvable) {
        cdkBuilder.lineDataLabels(lineDataLabels.let(IResolvable::unwrap))
      }

      /**
       * @param lineDataLabels The options that determine if visual data labels are displayed.
       * The data label options for a line in a combo chart.
       */
      override fun lineDataLabels(lineDataLabels: DataLabelOptionsProperty) {
        cdkBuilder.lineDataLabels(lineDataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      /**
       * @param lineDataLabels The options that determine if visual data labels are displayed.
       * The data label options for a line in a combo chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("64a3b4ede1730f5796a97be33946d78388c53a364bc1513819550739ee1bbfcd")
      override fun lineDataLabels(lineDataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit
          = lineDataLabels(DataLabelOptionsProperty(lineDataLabels))

      /**
       * @param primaryYAxisDisplayOptions The label display options (grid line, range, scale, and
       * axis step) of a combo chart's primary y-axis (bar) field well.
       */
      override fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param primaryYAxisDisplayOptions The label display options (grid line, range, scale, and
       * axis step) of a combo chart's primary y-axis (bar) field well.
       */
      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param primaryYAxisDisplayOptions The label display options (grid line, range, scale, and
       * axis step) of a combo chart's primary y-axis (bar) field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dab82d02ce3e4bf873db4a49887215feba4768ee7b614395973681f18c12ed7f")
      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisDisplayOptions(AxisDisplayOptionsProperty(primaryYAxisDisplayOptions))

      /**
       * @param primaryYAxisLabelOptions The label options (label text, label visibility, and sort
       * icon visibility) of a combo chart's primary y-axis (bar) field well.
       */
      override fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param primaryYAxisLabelOptions The label options (label text, label visibility, and sort
       * icon visibility) of a combo chart's primary y-axis (bar) field well.
       */
      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param primaryYAxisLabelOptions The label options (label text, label visibility, and sort
       * icon visibility) of a combo chart's primary y-axis (bar) field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("04285af03488d48631b8dc5f4fadd63bb07421c5dff803795706df6aa57242d3")
      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisLabelOptions(ChartAxisLabelOptionsProperty(primaryYAxisLabelOptions))

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      override fun referenceLines(referenceLines: IResolvable) {
        cdkBuilder.referenceLines(referenceLines.let(IResolvable::unwrap))
      }

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      override fun referenceLines(referenceLines: List<Any>) {
        cdkBuilder.referenceLines(referenceLines)
      }

      /**
       * @param referenceLines The reference line setup of the visual.
       */
      override fun referenceLines(vararg referenceLines: Any): Unit =
          referenceLines(referenceLines.toList())

      /**
       * @param secondaryYAxisDisplayOptions The label display options (grid line, range, scale,
       * axis step) of a combo chart's secondary y-axis (line) field well.
       */
      override fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: IResolvable) {
        cdkBuilder.secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param secondaryYAxisDisplayOptions The label display options (grid line, range, scale,
       * axis step) of a combo chart's secondary y-axis (line) field well.
       */
      override
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param secondaryYAxisDisplayOptions The label display options (grid line, range, scale,
       * axis step) of a combo chart's secondary y-axis (line) field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7f0e364c6994e7ed5a388426bb17244b042f90bc1904717a2815dc2c73f93078")
      override
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit =
          secondaryYAxisDisplayOptions(AxisDisplayOptionsProperty(secondaryYAxisDisplayOptions))

      /**
       * @param secondaryYAxisLabelOptions The label options (label text, label visibility, and sort
       * icon visibility) of a combo chart's secondary y-axis(line) field well.
       */
      override fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: IResolvable) {
        cdkBuilder.secondaryYAxisLabelOptions(secondaryYAxisLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param secondaryYAxisLabelOptions The label options (label text, label visibility, and sort
       * icon visibility) of a combo chart's secondary y-axis(line) field well.
       */
      override
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.secondaryYAxisLabelOptions(secondaryYAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param secondaryYAxisLabelOptions The label options (label text, label visibility, and sort
       * icon visibility) of a combo chart's secondary y-axis(line) field well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("364619fe095808336b6e99783d9a95759d2021403755f3186cbe6e1b02eec650")
      override
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          secondaryYAxisLabelOptions(ChartAxisLabelOptionsProperty(secondaryYAxisLabelOptions))

      /**
       * @param sortConfiguration The sort configuration of a `ComboChartVisual` .
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a `ComboChartVisual` .
       */
      override fun sortConfiguration(sortConfiguration: ComboChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(ComboChartSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a `ComboChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("923164ed894ed0b44f4f2f12c522ba283a9d1cdc008ab4f6c36de03d17a766be")
      override
          fun sortConfiguration(sortConfiguration: ComboChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(ComboChartSortConfigurationProperty(sortConfiguration))

      /**
       * @param tooltip The legend display setup of the visual.
       */
      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      /**
       * @param tooltip The legend display setup of the visual.
       */
      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltip The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f39f1a372a468adc76f6651c75f8e325d0efd7487c52c36400e5c9aca840e387")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      /**
       * @param visualPalette The palette (chart color) display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5db981720500ccd086f1dde6a5af5d16da2091a0e67d9bf141598c81d180d2fc")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartConfigurationProperty,
    ) : ComboChartConfigurationProperty {
      /**
       * The options that determine if visual data labels are displayed.
       *
       * The data label options for a bar in a combo chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-bardatalabels)
       */
      override fun barDataLabels(): Any? = unwrap(this).getBarDataLabels()

      /**
       * Determines the bar arrangement in a combo chart. The following are valid values in this
       * structure:.
       *
       * * `CLUSTERED` : For clustered bar combo charts.
       * * `STACKED` : For stacked bar combo charts.
       * * `STACKED_PERCENT` : Do not use. If you use this value, the operation returns a validation
       * error.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-barsarrangement)
       */
      override fun barsArrangement(): String? = unwrap(this).getBarsArrangement()

      /**
       * The category axis of a combo chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-categoryaxis)
       */
      override fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

      /**
       * The label options (label text, label visibility, and sort icon visibility) of a combo chart
       * category (group/color) field well.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-categorylabeloptions)
       */
      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      /**
       * The label options (label text, label visibility, and sort icon visibility) of a combo
       * chart's color field well.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-colorlabeloptions)
       */
      override fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

      /**
       * The field wells of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The legend display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-legend)
       */
      override fun legend(): Any? = unwrap(this).getLegend()

      /**
       * The options that determine if visual data labels are displayed.
       *
       * The data label options for a line in a combo chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-linedatalabels)
       */
      override fun lineDataLabels(): Any? = unwrap(this).getLineDataLabels()

      /**
       * The label display options (grid line, range, scale, and axis step) of a combo chart's
       * primary y-axis (bar) field well.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-primaryyaxisdisplayoptions)
       */
      override fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

      /**
       * The label options (label text, label visibility, and sort icon visibility) of a combo
       * chart's primary y-axis (bar) field well.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-primaryyaxislabeloptions)
       */
      override fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

      /**
       * The reference line setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-referencelines)
       */
      override fun referenceLines(): Any? = unwrap(this).getReferenceLines()

      /**
       * The label display options (grid line, range, scale, axis step) of a combo chart's secondary
       * y-axis (line) field well.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-secondaryyaxisdisplayoptions)
       */
      override fun secondaryYAxisDisplayOptions(): Any? =
          unwrap(this).getSecondaryYAxisDisplayOptions()

      /**
       * The label options (label text, label visibility, and sort icon visibility) of a combo
       * chart's secondary y-axis(line) field well.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-secondaryyaxislabeloptions)
       */
      override fun secondaryYAxisLabelOptions(): Any? = unwrap(this).getSecondaryYAxisLabelOptions()

      /**
       * The sort configuration of a `ComboChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The legend display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-tooltip)
       */
      override fun tooltip(): Any? = unwrap(this).getTooltip()

      /**
       * The palette (chart color) display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-visualpalette)
       */
      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ComboChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartConfigurationProperty):
          ComboChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComboChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface RangeEndsLabelTypeProperty {
    /**
     * The visibility of the range ends label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rangeendslabeltype.html#cfn-quicksight-analysis-rangeendslabeltype-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [RangeEndsLabelTypeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility The visibility of the range ends label.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RangeEndsLabelTypeProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RangeEndsLabelTypeProperty.builder()

      /**
       * @param visibility The visibility of the range ends label.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RangeEndsLabelTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RangeEndsLabelTypeProperty,
    ) : RangeEndsLabelTypeProperty {
      /**
       * The visibility of the range ends label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rangeendslabeltype.html#cfn-quicksight-analysis-rangeendslabeltype-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): RangeEndsLabelTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.RangeEndsLabelTypeProperty):
          RangeEndsLabelTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RangeEndsLabelTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RangeEndsLabelTypeProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface NumericSeparatorConfigurationProperty {
    /**
     * Determines the decimal separator.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericseparatorconfiguration.html#cfn-quicksight-analysis-numericseparatorconfiguration-decimalseparator)
     */
    public fun decimalSeparator(): String? = unwrap(this).getDecimalSeparator()

    /**
     * The options that determine the thousands separator configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericseparatorconfiguration.html#cfn-quicksight-analysis-numericseparatorconfiguration-thousandsseparator)
     */
    public fun thousandsSeparator(): Any? = unwrap(this).getThousandsSeparator()

    /**
     * A builder for [NumericSeparatorConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param decimalSeparator Determines the decimal separator.
       */
      public fun decimalSeparator(decimalSeparator: String)

      /**
       * @param thousandsSeparator The options that determine the thousands separator configuration.
       */
      public fun thousandsSeparator(thousandsSeparator: IResolvable)

      /**
       * @param thousandsSeparator The options that determine the thousands separator configuration.
       */
      public fun thousandsSeparator(thousandsSeparator: ThousandSeparatorOptionsProperty)

      /**
       * @param thousandsSeparator The options that determine the thousands separator configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("353dd4d75d5b35884f7f337717a836f0fa03a7e296fdc2552655835b08fe6236")
      public
          fun thousandsSeparator(thousandsSeparator: ThousandSeparatorOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericSeparatorConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericSeparatorConfigurationProperty.builder()

      /**
       * @param decimalSeparator Determines the decimal separator.
       */
      override fun decimalSeparator(decimalSeparator: String) {
        cdkBuilder.decimalSeparator(decimalSeparator)
      }

      /**
       * @param thousandsSeparator The options that determine the thousands separator configuration.
       */
      override fun thousandsSeparator(thousandsSeparator: IResolvable) {
        cdkBuilder.thousandsSeparator(thousandsSeparator.let(IResolvable::unwrap))
      }

      /**
       * @param thousandsSeparator The options that determine the thousands separator configuration.
       */
      override fun thousandsSeparator(thousandsSeparator: ThousandSeparatorOptionsProperty) {
        cdkBuilder.thousandsSeparator(thousandsSeparator.let(ThousandSeparatorOptionsProperty::unwrap))
      }

      /**
       * @param thousandsSeparator The options that determine the thousands separator configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("353dd4d75d5b35884f7f337717a836f0fa03a7e296fdc2552655835b08fe6236")
      override
          fun thousandsSeparator(thousandsSeparator: ThousandSeparatorOptionsProperty.Builder.() -> Unit):
          Unit = thousandsSeparator(ThousandSeparatorOptionsProperty(thousandsSeparator))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericSeparatorConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericSeparatorConfigurationProperty,
    ) : NumericSeparatorConfigurationProperty {
      /**
       * Determines the decimal separator.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericseparatorconfiguration.html#cfn-quicksight-analysis-numericseparatorconfiguration-decimalseparator)
       */
      override fun decimalSeparator(): String? = unwrap(this).getDecimalSeparator()

      /**
       * The options that determine the thousands separator configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericseparatorconfiguration.html#cfn-quicksight-analysis-numericseparatorconfiguration-thousandsseparator)
       */
      override fun thousandsSeparator(): Any? = unwrap(this).getThousandsSeparator()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          NumericSeparatorConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericSeparatorConfigurationProperty):
          NumericSeparatorConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericSeparatorConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericSeparatorConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FontConfigurationProperty {
    /**
     * Determines the color of the text.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontcolor)
     */
    public fun fontColor(): String? = unwrap(this).getFontColor()

    /**
     * Determines the appearance of decorative lines on the text.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontdecoration)
     */
    public fun fontDecoration(): String? = unwrap(this).getFontDecoration()

    /**
     * The option that determines the text display size.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontsize)
     */
    public fun fontSize(): Any? = unwrap(this).getFontSize()

    /**
     * Determines the text display face that is inherited by the given font family.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontstyle)
     */
    public fun fontStyle(): String? = unwrap(this).getFontStyle()

    /**
     * The option that determines the text display weight, or boldness.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontweight)
     */
    public fun fontWeight(): Any? = unwrap(this).getFontWeight()

    /**
     * A builder for [FontConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fontColor Determines the color of the text.
       */
      public fun fontColor(fontColor: String)

      /**
       * @param fontDecoration Determines the appearance of decorative lines on the text.
       */
      public fun fontDecoration(fontDecoration: String)

      /**
       * @param fontSize The option that determines the text display size.
       */
      public fun fontSize(fontSize: IResolvable)

      /**
       * @param fontSize The option that determines the text display size.
       */
      public fun fontSize(fontSize: FontSizeProperty)

      /**
       * @param fontSize The option that determines the text display size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5578c45555c85a8482cd6e5c5ed843c87492a25093d5d5cb9d828009b9049156")
      public fun fontSize(fontSize: FontSizeProperty.Builder.() -> Unit)

      /**
       * @param fontStyle Determines the text display face that is inherited by the given font
       * family.
       */
      public fun fontStyle(fontStyle: String)

      /**
       * @param fontWeight The option that determines the text display weight, or boldness.
       */
      public fun fontWeight(fontWeight: IResolvable)

      /**
       * @param fontWeight The option that determines the text display weight, or boldness.
       */
      public fun fontWeight(fontWeight: FontWeightProperty)

      /**
       * @param fontWeight The option that determines the text display weight, or boldness.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("503b87cf7a95a44576d6fbc3a4b272a9f7aab5ad687ab73aa3b8bed901bc4a71")
      public fun fontWeight(fontWeight: FontWeightProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontConfigurationProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontConfigurationProperty.builder()

      /**
       * @param fontColor Determines the color of the text.
       */
      override fun fontColor(fontColor: String) {
        cdkBuilder.fontColor(fontColor)
      }

      /**
       * @param fontDecoration Determines the appearance of decorative lines on the text.
       */
      override fun fontDecoration(fontDecoration: String) {
        cdkBuilder.fontDecoration(fontDecoration)
      }

      /**
       * @param fontSize The option that determines the text display size.
       */
      override fun fontSize(fontSize: IResolvable) {
        cdkBuilder.fontSize(fontSize.let(IResolvable::unwrap))
      }

      /**
       * @param fontSize The option that determines the text display size.
       */
      override fun fontSize(fontSize: FontSizeProperty) {
        cdkBuilder.fontSize(fontSize.let(FontSizeProperty::unwrap))
      }

      /**
       * @param fontSize The option that determines the text display size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5578c45555c85a8482cd6e5c5ed843c87492a25093d5d5cb9d828009b9049156")
      override fun fontSize(fontSize: FontSizeProperty.Builder.() -> Unit): Unit =
          fontSize(FontSizeProperty(fontSize))

      /**
       * @param fontStyle Determines the text display face that is inherited by the given font
       * family.
       */
      override fun fontStyle(fontStyle: String) {
        cdkBuilder.fontStyle(fontStyle)
      }

      /**
       * @param fontWeight The option that determines the text display weight, or boldness.
       */
      override fun fontWeight(fontWeight: IResolvable) {
        cdkBuilder.fontWeight(fontWeight.let(IResolvable::unwrap))
      }

      /**
       * @param fontWeight The option that determines the text display weight, or boldness.
       */
      override fun fontWeight(fontWeight: FontWeightProperty) {
        cdkBuilder.fontWeight(fontWeight.let(FontWeightProperty::unwrap))
      }

      /**
       * @param fontWeight The option that determines the text display weight, or boldness.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("503b87cf7a95a44576d6fbc3a4b272a9f7aab5ad687ab73aa3b8bed901bc4a71")
      override fun fontWeight(fontWeight: FontWeightProperty.Builder.() -> Unit): Unit =
          fontWeight(FontWeightProperty(fontWeight))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontConfigurationProperty,
    ) : FontConfigurationProperty {
      /**
       * Determines the color of the text.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontcolor)
       */
      override fun fontColor(): String? = unwrap(this).getFontColor()

      /**
       * Determines the appearance of decorative lines on the text.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontdecoration)
       */
      override fun fontDecoration(): String? = unwrap(this).getFontDecoration()

      /**
       * The option that determines the text display size.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontsize)
       */
      override fun fontSize(): Any? = unwrap(this).getFontSize()

      /**
       * Determines the text display face that is inherited by the given font family.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontstyle)
       */
      override fun fontStyle(): String? = unwrap(this).getFontStyle()

      /**
       * The option that determines the text display weight, or boldness.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontweight)
       */
      override fun fontWeight(): Any? = unwrap(this).getFontWeight()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FontConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FontConfigurationProperty):
          FontConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FontConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PercentileAggregationProperty {
    /**
     * The percentile value.
     *
     * This value can be any numeric constant 0–100. A percentile value of 50 computes the median
     * value of the measure.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentileaggregation.html#cfn-quicksight-analysis-percentileaggregation-percentilevalue)
     */
    public fun percentileValue(): Number? = unwrap(this).getPercentileValue()

    /**
     * A builder for [PercentileAggregationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param percentileValue The percentile value.
       * This value can be any numeric constant 0–100. A percentile value of 50 computes the median
       * value of the measure.
       */
      public fun percentileValue(percentileValue: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentileAggregationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentileAggregationProperty.builder()

      /**
       * @param percentileValue The percentile value.
       * This value can be any numeric constant 0–100. A percentile value of 50 computes the median
       * value of the measure.
       */
      override fun percentileValue(percentileValue: Number) {
        cdkBuilder.percentileValue(percentileValue)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentileAggregationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentileAggregationProperty,
    ) : PercentileAggregationProperty {
      /**
       * The percentile value.
       *
       * This value can be any numeric constant 0–100. A percentile value of 50 computes the median
       * value of the measure.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentileaggregation.html#cfn-quicksight-analysis-percentileaggregation-percentilevalue)
       */
      override fun percentileValue(): Number? = unwrap(this).getPercentileValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PercentileAggregationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentileAggregationProperty):
          PercentileAggregationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PercentileAggregationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PercentileAggregationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ColorsConfigurationProperty {
    /**
     * A list of up to 50 custom colors.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorsconfiguration.html#cfn-quicksight-analysis-colorsconfiguration-customcolors)
     */
    public fun customColors(): Any? = unwrap(this).getCustomColors()

    /**
     * A builder for [ColorsConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customColors A list of up to 50 custom colors.
       */
      public fun customColors(customColors: IResolvable)

      /**
       * @param customColors A list of up to 50 custom colors.
       */
      public fun customColors(customColors: List<Any>)

      /**
       * @param customColors A list of up to 50 custom colors.
       */
      public fun customColors(vararg customColors: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColorsConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColorsConfigurationProperty.builder()

      /**
       * @param customColors A list of up to 50 custom colors.
       */
      override fun customColors(customColors: IResolvable) {
        cdkBuilder.customColors(customColors.let(IResolvable::unwrap))
      }

      /**
       * @param customColors A list of up to 50 custom colors.
       */
      override fun customColors(customColors: List<Any>) {
        cdkBuilder.customColors(customColors)
      }

      /**
       * @param customColors A list of up to 50 custom colors.
       */
      override fun customColors(vararg customColors: Any): Unit =
          customColors(customColors.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColorsConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColorsConfigurationProperty,
    ) : ColorsConfigurationProperty {
      /**
       * A list of up to 50 custom colors.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorsconfiguration.html#cfn-quicksight-analysis-colorsconfiguration-customcolors)
       */
      override fun customColors(): Any? = unwrap(this).getCustomColors()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ColorsConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ColorsConfigurationProperty):
          ColorsConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColorsConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColorsConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface AxisLogarithmicScaleProperty {
    /**
     * The base setup of a logarithmic axis scale.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislogarithmicscale.html#cfn-quicksight-analysis-axislogarithmicscale-base)
     */
    public fun base(): Number? = unwrap(this).getBase()

    /**
     * A builder for [AxisLogarithmicScaleProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param base The base setup of a logarithmic axis scale.
       */
      public fun base(base: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLogarithmicScaleProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLogarithmicScaleProperty.builder()

      /**
       * @param base The base setup of a logarithmic axis scale.
       */
      override fun base(base: Number) {
        cdkBuilder.base(base)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLogarithmicScaleProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLogarithmicScaleProperty,
    ) : AxisLogarithmicScaleProperty {
      /**
       * The base setup of a logarithmic axis scale.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislogarithmicscale.html#cfn-quicksight-analysis-axislogarithmicscale-base)
       */
      override fun base(): Number? = unwrap(this).getBase()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AxisLogarithmicScaleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLogarithmicScaleProperty):
          AxisLogarithmicScaleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisLogarithmicScaleProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLogarithmicScaleProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface WhatIfRangeScenarioProperty {
    /**
     * The end date in the date range that you need the forecast results for.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifrangescenario.html#cfn-quicksight-analysis-whatifrangescenario-enddate)
     */
    public fun endDate(): String

    /**
     * The start date in the date range that you need the forecast results for.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifrangescenario.html#cfn-quicksight-analysis-whatifrangescenario-startdate)
     */
    public fun startDate(): String

    /**
     * The target value that you want to meet for the provided date range.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifrangescenario.html#cfn-quicksight-analysis-whatifrangescenario-value)
     */
    public fun `value`(): Number

    /**
     * A builder for [WhatIfRangeScenarioProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param endDate The end date in the date range that you need the forecast results for. 
       */
      public fun endDate(endDate: String)

      /**
       * @param startDate The start date in the date range that you need the forecast results for. 
       */
      public fun startDate(startDate: String)

      /**
       * @param value The target value that you want to meet for the provided date range. 
       */
      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WhatIfRangeScenarioProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WhatIfRangeScenarioProperty.builder()

      /**
       * @param endDate The end date in the date range that you need the forecast results for. 
       */
      override fun endDate(endDate: String) {
        cdkBuilder.endDate(endDate)
      }

      /**
       * @param startDate The start date in the date range that you need the forecast results for. 
       */
      override fun startDate(startDate: String) {
        cdkBuilder.startDate(startDate)
      }

      /**
       * @param value The target value that you want to meet for the provided date range. 
       */
      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WhatIfRangeScenarioProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WhatIfRangeScenarioProperty,
    ) : WhatIfRangeScenarioProperty {
      /**
       * The end date in the date range that you need the forecast results for.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifrangescenario.html#cfn-quicksight-analysis-whatifrangescenario-enddate)
       */
      override fun endDate(): String = unwrap(this).getEndDate()

      /**
       * The start date in the date range that you need the forecast results for.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifrangescenario.html#cfn-quicksight-analysis-whatifrangescenario-startdate)
       */
      override fun startDate(): String = unwrap(this).getStartDate()

      /**
       * The target value that you want to meet for the provided date range.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifrangescenario.html#cfn-quicksight-analysis-whatifrangescenario-value)
       */
      override fun `value`(): Number = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): WhatIfRangeScenarioProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WhatIfRangeScenarioProperty):
          WhatIfRangeScenarioProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WhatIfRangeScenarioProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WhatIfRangeScenarioProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface LineChartLineStyleSettingsProperty {
    /**
     * Interpolation style for line series.
     *
     * * `LINEAR` : Show as default, linear style.
     * * `SMOOTH` : Show as a smooth curve.
     * * `STEPPED` : Show steps in line.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html#cfn-quicksight-analysis-linechartlinestylesettings-lineinterpolation)
     */
    public fun lineInterpolation(): String? = unwrap(this).getLineInterpolation()

    /**
     * Line style for line series.
     *
     * * `SOLID` : Show as a solid line.
     * * `DOTTED` : Show as a dotted line.
     * * `DASHED` : Show as a dashed line.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html#cfn-quicksight-analysis-linechartlinestylesettings-linestyle)
     */
    public fun lineStyle(): String? = unwrap(this).getLineStyle()

    /**
     * Configuration option that determines whether to show the line for the series.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html#cfn-quicksight-analysis-linechartlinestylesettings-linevisibility)
     */
    public fun lineVisibility(): String? = unwrap(this).getLineVisibility()

    /**
     * Width that determines the line thickness.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html#cfn-quicksight-analysis-linechartlinestylesettings-linewidth)
     */
    public fun lineWidth(): String? = unwrap(this).getLineWidth()

    /**
     * A builder for [LineChartLineStyleSettingsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param lineInterpolation Interpolation style for line series.
       * * `LINEAR` : Show as default, linear style.
       * * `SMOOTH` : Show as a smooth curve.
       * * `STEPPED` : Show steps in line.
       */
      public fun lineInterpolation(lineInterpolation: String)

      /**
       * @param lineStyle Line style for line series.
       * * `SOLID` : Show as a solid line.
       * * `DOTTED` : Show as a dotted line.
       * * `DASHED` : Show as a dashed line.
       */
      public fun lineStyle(lineStyle: String)

      /**
       * @param lineVisibility Configuration option that determines whether to show the line for the
       * series.
       */
      public fun lineVisibility(lineVisibility: String)

      /**
       * @param lineWidth Width that determines the line thickness.
       */
      public fun lineWidth(lineWidth: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartLineStyleSettingsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartLineStyleSettingsProperty.builder()

      /**
       * @param lineInterpolation Interpolation style for line series.
       * * `LINEAR` : Show as default, linear style.
       * * `SMOOTH` : Show as a smooth curve.
       * * `STEPPED` : Show steps in line.
       */
      override fun lineInterpolation(lineInterpolation: String) {
        cdkBuilder.lineInterpolation(lineInterpolation)
      }

      /**
       * @param lineStyle Line style for line series.
       * * `SOLID` : Show as a solid line.
       * * `DOTTED` : Show as a dotted line.
       * * `DASHED` : Show as a dashed line.
       */
      override fun lineStyle(lineStyle: String) {
        cdkBuilder.lineStyle(lineStyle)
      }

      /**
       * @param lineVisibility Configuration option that determines whether to show the line for the
       * series.
       */
      override fun lineVisibility(lineVisibility: String) {
        cdkBuilder.lineVisibility(lineVisibility)
      }

      /**
       * @param lineWidth Width that determines the line thickness.
       */
      override fun lineWidth(lineWidth: String) {
        cdkBuilder.lineWidth(lineWidth)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartLineStyleSettingsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartLineStyleSettingsProperty,
    ) : LineChartLineStyleSettingsProperty {
      /**
       * Interpolation style for line series.
       *
       * * `LINEAR` : Show as default, linear style.
       * * `SMOOTH` : Show as a smooth curve.
       * * `STEPPED` : Show steps in line.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html#cfn-quicksight-analysis-linechartlinestylesettings-lineinterpolation)
       */
      override fun lineInterpolation(): String? = unwrap(this).getLineInterpolation()

      /**
       * Line style for line series.
       *
       * * `SOLID` : Show as a solid line.
       * * `DOTTED` : Show as a dotted line.
       * * `DASHED` : Show as a dashed line.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html#cfn-quicksight-analysis-linechartlinestylesettings-linestyle)
       */
      override fun lineStyle(): String? = unwrap(this).getLineStyle()

      /**
       * Configuration option that determines whether to show the line for the series.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html#cfn-quicksight-analysis-linechartlinestylesettings-linevisibility)
       */
      override fun lineVisibility(): String? = unwrap(this).getLineVisibility()

      /**
       * Width that determines the line thickness.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html#cfn-quicksight-analysis-linechartlinestylesettings-linewidth)
       */
      override fun lineWidth(): String? = unwrap(this).getLineWidth()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          LineChartLineStyleSettingsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartLineStyleSettingsProperty):
          LineChartLineStyleSettingsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartLineStyleSettingsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartLineStyleSettingsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface WaterfallVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration for a waterfall visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [WaterfallVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration for a waterfall visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration for a waterfall visual.
       */
      public fun chartConfiguration(chartConfiguration: WaterfallChartConfigurationProperty)

      /**
       * @param chartConfiguration The configuration for a waterfall visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3033bced83c07d9e9ecb284ac7dd709feb3a5955d898979ced2446a4e946502a")
      public
          fun chartConfiguration(chartConfiguration: WaterfallChartConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("acb5b3ec715a86cb032784053e9c7152f1356f196ac6a3e051b99a44b02cfadb")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8de7565e03727763eb383c893836b3714b07f14fcb42ccfbf4d18920c400e5f8")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration for a waterfall visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration for a waterfall visual.
       */
      override fun chartConfiguration(chartConfiguration: WaterfallChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(WaterfallChartConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration for a waterfall visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3033bced83c07d9e9ecb284ac7dd709feb3a5955d898979ced2446a4e946502a")
      override
          fun chartConfiguration(chartConfiguration: WaterfallChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(WaterfallChartConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("acb5b3ec715a86cb032784053e9c7152f1356f196ac6a3e051b99a44b02cfadb")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8de7565e03727763eb383c893836b3714b07f14fcb42ccfbf4d18920c400e5f8")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallVisualProperty,
    ) : WaterfallVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration for a waterfall visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): WaterfallVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallVisualProperty):
          WaterfallVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WaterfallVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallVisualProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface BinWidthOptionsProperty {
    /**
     * The options that determine the bin count limit.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-binwidthoptions.html#cfn-quicksight-analysis-binwidthoptions-bincountlimit)
     */
    public fun binCountLimit(): Number? = unwrap(this).getBinCountLimit()

    /**
     * The options that determine the bin width value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-binwidthoptions.html#cfn-quicksight-analysis-binwidthoptions-value)
     */
    public fun `value`(): Number? = unwrap(this).getValue()

    /**
     * A builder for [BinWidthOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param binCountLimit The options that determine the bin count limit.
       */
      public fun binCountLimit(binCountLimit: Number)

      /**
       * @param value The options that determine the bin width value.
       */
      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BinWidthOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BinWidthOptionsProperty.builder()

      /**
       * @param binCountLimit The options that determine the bin count limit.
       */
      override fun binCountLimit(binCountLimit: Number) {
        cdkBuilder.binCountLimit(binCountLimit)
      }

      /**
       * @param value The options that determine the bin width value.
       */
      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BinWidthOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BinWidthOptionsProperty,
    ) : BinWidthOptionsProperty {
      /**
       * The options that determine the bin count limit.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-binwidthoptions.html#cfn-quicksight-analysis-binwidthoptions-bincountlimit)
       */
      override fun binCountLimit(): Number? = unwrap(this).getBinCountLimit()

      /**
       * The options that determine the bin width value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-binwidthoptions.html#cfn-quicksight-analysis-binwidthoptions-value)
       */
      override fun `value`(): Number? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): BinWidthOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BinWidthOptionsProperty):
          BinWidthOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BinWidthOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BinWidthOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface ComboChartAggregatedFieldWellsProperty {
    /**
     * The aggregated `BarValues` field well of a combo chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html#cfn-quicksight-analysis-combochartaggregatedfieldwells-barvalues)
     */
    public fun barValues(): Any? = unwrap(this).getBarValues()

    /**
     * The aggregated category field wells of a combo chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html#cfn-quicksight-analysis-combochartaggregatedfieldwells-category)
     */
    public fun category(): Any? = unwrap(this).getCategory()

    /**
     * The aggregated colors field well of a combo chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html#cfn-quicksight-analysis-combochartaggregatedfieldwells-colors)
     */
    public fun colors(): Any? = unwrap(this).getColors()

    /**
     * The aggregated `LineValues` field well of a combo chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html#cfn-quicksight-analysis-combochartaggregatedfieldwells-linevalues)
     */
    public fun lineValues(): Any? = unwrap(this).getLineValues()

    /**
     * A builder for [ComboChartAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param barValues The aggregated `BarValues` field well of a combo chart.
       */
      public fun barValues(barValues: IResolvable)

      /**
       * @param barValues The aggregated `BarValues` field well of a combo chart.
       */
      public fun barValues(barValues: List<Any>)

      /**
       * @param barValues The aggregated `BarValues` field well of a combo chart.
       */
      public fun barValues(vararg barValues: Any)

      /**
       * @param category The aggregated category field wells of a combo chart.
       */
      public fun category(category: IResolvable)

      /**
       * @param category The aggregated category field wells of a combo chart.
       */
      public fun category(category: List<Any>)

      /**
       * @param category The aggregated category field wells of a combo chart.
       */
      public fun category(vararg category: Any)

      /**
       * @param colors The aggregated colors field well of a combo chart.
       */
      public fun colors(colors: IResolvable)

      /**
       * @param colors The aggregated colors field well of a combo chart.
       */
      public fun colors(colors: List<Any>)

      /**
       * @param colors The aggregated colors field well of a combo chart.
       */
      public fun colors(vararg colors: Any)

      /**
       * @param lineValues The aggregated `LineValues` field well of a combo chart.
       */
      public fun lineValues(lineValues: IResolvable)

      /**
       * @param lineValues The aggregated `LineValues` field well of a combo chart.
       */
      public fun lineValues(lineValues: List<Any>)

      /**
       * @param lineValues The aggregated `LineValues` field well of a combo chart.
       */
      public fun lineValues(vararg lineValues: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartAggregatedFieldWellsProperty.builder()

      /**
       * @param barValues The aggregated `BarValues` field well of a combo chart.
       */
      override fun barValues(barValues: IResolvable) {
        cdkBuilder.barValues(barValues.let(IResolvable::unwrap))
      }

      /**
       * @param barValues The aggregated `BarValues` field well of a combo chart.
       */
      override fun barValues(barValues: List<Any>) {
        cdkBuilder.barValues(barValues)
      }

      /**
       * @param barValues The aggregated `BarValues` field well of a combo chart.
       */
      override fun barValues(vararg barValues: Any): Unit = barValues(barValues.toList())

      /**
       * @param category The aggregated category field wells of a combo chart.
       */
      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      /**
       * @param category The aggregated category field wells of a combo chart.
       */
      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      /**
       * @param category The aggregated category field wells of a combo chart.
       */
      override fun category(vararg category: Any): Unit = category(category.toList())

      /**
       * @param colors The aggregated colors field well of a combo chart.
       */
      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      /**
       * @param colors The aggregated colors field well of a combo chart.
       */
      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      /**
       * @param colors The aggregated colors field well of a combo chart.
       */
      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      /**
       * @param lineValues The aggregated `LineValues` field well of a combo chart.
       */
      override fun lineValues(lineValues: IResolvable) {
        cdkBuilder.lineValues(lineValues.let(IResolvable::unwrap))
      }

      /**
       * @param lineValues The aggregated `LineValues` field well of a combo chart.
       */
      override fun lineValues(lineValues: List<Any>) {
        cdkBuilder.lineValues(lineValues)
      }

      /**
       * @param lineValues The aggregated `LineValues` field well of a combo chart.
       */
      override fun lineValues(vararg lineValues: Any): Unit = lineValues(lineValues.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartAggregatedFieldWellsProperty,
    ) : ComboChartAggregatedFieldWellsProperty {
      /**
       * The aggregated `BarValues` field well of a combo chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html#cfn-quicksight-analysis-combochartaggregatedfieldwells-barvalues)
       */
      override fun barValues(): Any? = unwrap(this).getBarValues()

      /**
       * The aggregated category field wells of a combo chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html#cfn-quicksight-analysis-combochartaggregatedfieldwells-category)
       */
      override fun category(): Any? = unwrap(this).getCategory()

      /**
       * The aggregated colors field well of a combo chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html#cfn-quicksight-analysis-combochartaggregatedfieldwells-colors)
       */
      override fun colors(): Any? = unwrap(this).getColors()

      /**
       * The aggregated `LineValues` field well of a combo chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html#cfn-quicksight-analysis-combochartaggregatedfieldwells-linevalues)
       */
      override fun lineValues(): Any? = unwrap(this).getLineValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ComboChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartAggregatedFieldWellsProperty):
          ComboChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComboChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComboChartAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ConditionalFormattingCustomIconConditionProperty {
    /**
     * Determines the color of the icon.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html#cfn-quicksight-analysis-conditionalformattingcustomiconcondition-color)
     */
    public fun color(): String? = unwrap(this).getColor()

    /**
     * Determines the icon display configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html#cfn-quicksight-analysis-conditionalformattingcustomiconcondition-displayconfiguration)
     */
    public fun displayConfiguration(): Any? = unwrap(this).getDisplayConfiguration()

    /**
     * The expression that determines the condition of the icon set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html#cfn-quicksight-analysis-conditionalformattingcustomiconcondition-expression)
     */
    public fun expression(): String

    /**
     * Custom icon options for an icon set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html#cfn-quicksight-analysis-conditionalformattingcustomiconcondition-iconoptions)
     */
    public fun iconOptions(): Any

    /**
     * A builder for [ConditionalFormattingCustomIconConditionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color Determines the color of the icon.
       */
      public fun color(color: String)

      /**
       * @param displayConfiguration Determines the icon display configuration.
       */
      public fun displayConfiguration(displayConfiguration: IResolvable)

      /**
       * @param displayConfiguration Determines the icon display configuration.
       */
      public
          fun displayConfiguration(displayConfiguration: ConditionalFormattingIconDisplayConfigurationProperty)

      /**
       * @param displayConfiguration Determines the icon display configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ef0674a2ec91e25b6bd2773523522d16c2e61ca820a8cc266bc2ae2006a4c225")
      public
          fun displayConfiguration(displayConfiguration: ConditionalFormattingIconDisplayConfigurationProperty.Builder.() -> Unit)

      /**
       * @param expression The expression that determines the condition of the icon set. 
       */
      public fun expression(expression: String)

      /**
       * @param iconOptions Custom icon options for an icon set. 
       */
      public fun iconOptions(iconOptions: IResolvable)

      /**
       * @param iconOptions Custom icon options for an icon set. 
       */
      public fun iconOptions(iconOptions: ConditionalFormattingCustomIconOptionsProperty)

      /**
       * @param iconOptions Custom icon options for an icon set. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("658380a28c396231decac2cd2e2f716657b0b527adfb46aa2183b4433b7e8f72")
      public
          fun iconOptions(iconOptions: ConditionalFormattingCustomIconOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingCustomIconConditionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingCustomIconConditionProperty.builder()

      /**
       * @param color Determines the color of the icon.
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      /**
       * @param displayConfiguration Determines the icon display configuration.
       */
      override fun displayConfiguration(displayConfiguration: IResolvable) {
        cdkBuilder.displayConfiguration(displayConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param displayConfiguration Determines the icon display configuration.
       */
      override
          fun displayConfiguration(displayConfiguration: ConditionalFormattingIconDisplayConfigurationProperty) {
        cdkBuilder.displayConfiguration(displayConfiguration.let(ConditionalFormattingIconDisplayConfigurationProperty::unwrap))
      }

      /**
       * @param displayConfiguration Determines the icon display configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ef0674a2ec91e25b6bd2773523522d16c2e61ca820a8cc266bc2ae2006a4c225")
      override
          fun displayConfiguration(displayConfiguration: ConditionalFormattingIconDisplayConfigurationProperty.Builder.() -> Unit):
          Unit =
          displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty(displayConfiguration))

      /**
       * @param expression The expression that determines the condition of the icon set. 
       */
      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      /**
       * @param iconOptions Custom icon options for an icon set. 
       */
      override fun iconOptions(iconOptions: IResolvable) {
        cdkBuilder.iconOptions(iconOptions.let(IResolvable::unwrap))
      }

      /**
       * @param iconOptions Custom icon options for an icon set. 
       */
      override fun iconOptions(iconOptions: ConditionalFormattingCustomIconOptionsProperty) {
        cdkBuilder.iconOptions(iconOptions.let(ConditionalFormattingCustomIconOptionsProperty::unwrap))
      }

      /**
       * @param iconOptions Custom icon options for an icon set. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("658380a28c396231decac2cd2e2f716657b0b527adfb46aa2183b4433b7e8f72")
      override
          fun iconOptions(iconOptions: ConditionalFormattingCustomIconOptionsProperty.Builder.() -> Unit):
          Unit = iconOptions(ConditionalFormattingCustomIconOptionsProperty(iconOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingCustomIconConditionProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingCustomIconConditionProperty,
    ) : ConditionalFormattingCustomIconConditionProperty {
      /**
       * Determines the color of the icon.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html#cfn-quicksight-analysis-conditionalformattingcustomiconcondition-color)
       */
      override fun color(): String? = unwrap(this).getColor()

      /**
       * Determines the icon display configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html#cfn-quicksight-analysis-conditionalformattingcustomiconcondition-displayconfiguration)
       */
      override fun displayConfiguration(): Any? = unwrap(this).getDisplayConfiguration()

      /**
       * The expression that determines the condition of the icon set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html#cfn-quicksight-analysis-conditionalformattingcustomiconcondition-expression)
       */
      override fun expression(): String = unwrap(this).getExpression()

      /**
       * Custom icon options for an icon set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html#cfn-quicksight-analysis-conditionalformattingcustomiconcondition-iconoptions)
       */
      override fun iconOptions(): Any = unwrap(this).getIconOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingCustomIconConditionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingCustomIconConditionProperty):
          ConditionalFormattingCustomIconConditionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingCustomIconConditionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingCustomIconConditionProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DataPathTypeProperty {
    /**
     * The type of data path value utilized in a pivot table. Choose one of the following options:.
     *
     * * `HIERARCHY_ROWS_LAYOUT_COLUMN` - The type of data path for the rows layout column, when
     * `RowsLayout` is set to `HIERARCHY` .
     * * `MULTIPLE_ROW_METRICS_COLUMN` - The type of data path for the metric column when the row is
     * set to Metric Placement.
     * * `EMPTY_COLUMN_HEADER` - The type of data path for the column with empty column header, when
     * there is no field in `ColumnsFieldWell` and the row is set to Metric Placement.
     * * `COUNT_METRIC_COLUMN` - The type of data path for the column with `COUNT` as the metric,
     * when there is no field in the `ValuesFieldWell` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathtype.html#cfn-quicksight-analysis-datapathtype-pivottabledatapathtype)
     */
    public fun pivotTableDataPathType(): String? = unwrap(this).getPivotTableDataPathType()

    /**
     * A builder for [DataPathTypeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param pivotTableDataPathType The type of data path value utilized in a pivot table. Choose
       * one of the following options:.
       * * `HIERARCHY_ROWS_LAYOUT_COLUMN` - The type of data path for the rows layout column, when
       * `RowsLayout` is set to `HIERARCHY` .
       * * `MULTIPLE_ROW_METRICS_COLUMN` - The type of data path for the metric column when the row
       * is set to Metric Placement.
       * * `EMPTY_COLUMN_HEADER` - The type of data path for the column with empty column header,
       * when there is no field in `ColumnsFieldWell` and the row is set to Metric Placement.
       * * `COUNT_METRIC_COLUMN` - The type of data path for the column with `COUNT` as the metric,
       * when there is no field in the `ValuesFieldWell` .
       */
      public fun pivotTableDataPathType(pivotTableDataPathType: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathTypeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathTypeProperty.builder()

      /**
       * @param pivotTableDataPathType The type of data path value utilized in a pivot table. Choose
       * one of the following options:.
       * * `HIERARCHY_ROWS_LAYOUT_COLUMN` - The type of data path for the rows layout column, when
       * `RowsLayout` is set to `HIERARCHY` .
       * * `MULTIPLE_ROW_METRICS_COLUMN` - The type of data path for the metric column when the row
       * is set to Metric Placement.
       * * `EMPTY_COLUMN_HEADER` - The type of data path for the column with empty column header,
       * when there is no field in `ColumnsFieldWell` and the row is set to Metric Placement.
       * * `COUNT_METRIC_COLUMN` - The type of data path for the column with `COUNT` as the metric,
       * when there is no field in the `ValuesFieldWell` .
       */
      override fun pivotTableDataPathType(pivotTableDataPathType: String) {
        cdkBuilder.pivotTableDataPathType(pivotTableDataPathType)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathTypeProperty,
    ) : DataPathTypeProperty {
      /**
       * The type of data path value utilized in a pivot table. Choose one of the following
       * options:.
       *
       * * `HIERARCHY_ROWS_LAYOUT_COLUMN` - The type of data path for the rows layout column, when
       * `RowsLayout` is set to `HIERARCHY` .
       * * `MULTIPLE_ROW_METRICS_COLUMN` - The type of data path for the metric column when the row
       * is set to Metric Placement.
       * * `EMPTY_COLUMN_HEADER` - The type of data path for the column with empty column header,
       * when there is no field in `ColumnsFieldWell` and the row is set to Metric Placement.
       * * `COUNT_METRIC_COLUMN` - The type of data path for the column with `COUNT` as the metric,
       * when there is no field in the `ValuesFieldWell` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathtype.html#cfn-quicksight-analysis-datapathtype-pivottabledatapathtype)
       */
      override fun pivotTableDataPathType(): String? = unwrap(this).getPivotTableDataPathType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DataPathTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathTypeProperty):
          DataPathTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataPathTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathTypeProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface FilterRelativeDateTimeControlProperty {
    /**
     * The display options of a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html#cfn-quicksight-analysis-filterrelativedatetimecontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The ID of the `FilterTextAreaControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html#cfn-quicksight-analysis-filterrelativedatetimecontrol-filtercontrolid)
     */
    public fun filterControlId(): String

    /**
     * The source filter ID of the `FilterTextAreaControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html#cfn-quicksight-analysis-filterrelativedatetimecontrol-sourcefilterid)
     */
    public fun sourceFilterId(): String

    /**
     * The title of the `FilterTextAreaControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html#cfn-quicksight-analysis-filterrelativedatetimecontrol-title)
     */
    public fun title(): String

    /**
     * A builder for [FilterRelativeDateTimeControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: RelativeDateTimeControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fc8d13122c593114bc16f851726c95cab7766d80c8258dc92915283ec825e119")
      public
          fun displayOptions(displayOptions: RelativeDateTimeControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param filterControlId The ID of the `FilterTextAreaControl` . 
       */
      public fun filterControlId(filterControlId: String)

      /**
       * @param sourceFilterId The source filter ID of the `FilterTextAreaControl` . 
       */
      public fun sourceFilterId(sourceFilterId: String)

      /**
       * @param title The title of the `FilterTextAreaControl` . 
       */
      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterRelativeDateTimeControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterRelativeDateTimeControlProperty.builder()

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: RelativeDateTimeControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(RelativeDateTimeControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fc8d13122c593114bc16f851726c95cab7766d80c8258dc92915283ec825e119")
      override
          fun displayOptions(displayOptions: RelativeDateTimeControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(RelativeDateTimeControlDisplayOptionsProperty(displayOptions))

      /**
       * @param filterControlId The ID of the `FilterTextAreaControl` . 
       */
      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      /**
       * @param sourceFilterId The source filter ID of the `FilterTextAreaControl` . 
       */
      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      /**
       * @param title The title of the `FilterTextAreaControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterRelativeDateTimeControlProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterRelativeDateTimeControlProperty,
    ) : FilterRelativeDateTimeControlProperty {
      /**
       * The display options of a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html#cfn-quicksight-analysis-filterrelativedatetimecontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The ID of the `FilterTextAreaControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html#cfn-quicksight-analysis-filterrelativedatetimecontrol-filtercontrolid)
       */
      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      /**
       * The source filter ID of the `FilterTextAreaControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html#cfn-quicksight-analysis-filterrelativedatetimecontrol-sourcefilterid)
       */
      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      /**
       * The title of the `FilterTextAreaControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html#cfn-quicksight-analysis-filterrelativedatetimecontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilterRelativeDateTimeControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterRelativeDateTimeControlProperty):
          FilterRelativeDateTimeControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterRelativeDateTimeControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterRelativeDateTimeControlProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface HistogramFieldWellsProperty {
    /**
     * The field well configuration of a histogram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramfieldwells.html#cfn-quicksight-analysis-histogramfieldwells-histogramaggregatedfieldwells)
     */
    public fun histogramAggregatedFieldWells(): Any? =
        unwrap(this).getHistogramAggregatedFieldWells()

    /**
     * A builder for [HistogramFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param histogramAggregatedFieldWells The field well configuration of a histogram.
       */
      public fun histogramAggregatedFieldWells(histogramAggregatedFieldWells: IResolvable)

      /**
       * @param histogramAggregatedFieldWells The field well configuration of a histogram.
       */
      public
          fun histogramAggregatedFieldWells(histogramAggregatedFieldWells: HistogramAggregatedFieldWellsProperty)

      /**
       * @param histogramAggregatedFieldWells The field well configuration of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("53982e7bffac30a1cfdbe3891af917e699155e938cdab814cef1bae8b6210251")
      public
          fun histogramAggregatedFieldWells(histogramAggregatedFieldWells: HistogramAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramFieldWellsProperty.builder()

      /**
       * @param histogramAggregatedFieldWells The field well configuration of a histogram.
       */
      override fun histogramAggregatedFieldWells(histogramAggregatedFieldWells: IResolvable) {
        cdkBuilder.histogramAggregatedFieldWells(histogramAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param histogramAggregatedFieldWells The field well configuration of a histogram.
       */
      override
          fun histogramAggregatedFieldWells(histogramAggregatedFieldWells: HistogramAggregatedFieldWellsProperty) {
        cdkBuilder.histogramAggregatedFieldWells(histogramAggregatedFieldWells.let(HistogramAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param histogramAggregatedFieldWells The field well configuration of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("53982e7bffac30a1cfdbe3891af917e699155e938cdab814cef1bae8b6210251")
      override
          fun histogramAggregatedFieldWells(histogramAggregatedFieldWells: HistogramAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          histogramAggregatedFieldWells(HistogramAggregatedFieldWellsProperty(histogramAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramFieldWellsProperty,
    ) : HistogramFieldWellsProperty {
      /**
       * The field well configuration of a histogram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramfieldwells.html#cfn-quicksight-analysis-histogramfieldwells-histogramaggregatedfieldwells)
       */
      override fun histogramAggregatedFieldWells(): Any? =
          unwrap(this).getHistogramAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): HistogramFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramFieldWellsProperty):
          HistogramFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HistogramFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface AnchorDateConfigurationProperty {
    /**
     * The options for the date configuration. Choose one of the options below:.
     *
     * * `NOW`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-anchordateconfiguration.html#cfn-quicksight-analysis-anchordateconfiguration-anchoroption)
     */
    public fun anchorOption(): String? = unwrap(this).getAnchorOption()

    /**
     * The name of the parameter that is used for the anchor date configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-anchordateconfiguration.html#cfn-quicksight-analysis-anchordateconfiguration-parametername)
     */
    public fun parameterName(): String? = unwrap(this).getParameterName()

    /**
     * A builder for [AnchorDateConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param anchorOption The options for the date configuration. Choose one of the options
       * below:.
       * * `NOW`
       */
      public fun anchorOption(anchorOption: String)

      /**
       * @param parameterName The name of the parameter that is used for the anchor date
       * configuration.
       */
      public fun parameterName(parameterName: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnchorDateConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnchorDateConfigurationProperty.builder()

      /**
       * @param anchorOption The options for the date configuration. Choose one of the options
       * below:.
       * * `NOW`
       */
      override fun anchorOption(anchorOption: String) {
        cdkBuilder.anchorOption(anchorOption)
      }

      /**
       * @param parameterName The name of the parameter that is used for the anchor date
       * configuration.
       */
      override fun parameterName(parameterName: String) {
        cdkBuilder.parameterName(parameterName)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnchorDateConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnchorDateConfigurationProperty,
    ) : AnchorDateConfigurationProperty {
      /**
       * The options for the date configuration. Choose one of the options below:.
       *
       * * `NOW`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-anchordateconfiguration.html#cfn-quicksight-analysis-anchordateconfiguration-anchoroption)
       */
      override fun anchorOption(): String? = unwrap(this).getAnchorOption()

      /**
       * The name of the parameter that is used for the anchor date configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-anchordateconfiguration.html#cfn-quicksight-analysis-anchordateconfiguration-parametername)
       */
      override fun parameterName(): String? = unwrap(this).getParameterName()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AnchorDateConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AnchorDateConfigurationProperty):
          AnchorDateConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AnchorDateConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnchorDateConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface KPISparklineOptionsProperty {
    /**
     * The color of the sparkline.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html#cfn-quicksight-analysis-kpisparklineoptions-color)
     */
    public fun color(): String? = unwrap(this).getColor()

    /**
     * The tooltip visibility of the sparkline.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html#cfn-quicksight-analysis-kpisparklineoptions-tooltipvisibility)
     */
    public fun tooltipVisibility(): String? = unwrap(this).getTooltipVisibility()

    /**
     * The type of the sparkline.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html#cfn-quicksight-analysis-kpisparklineoptions-type)
     */
    public fun type(): String

    /**
     * The visibility of the sparkline.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html#cfn-quicksight-analysis-kpisparklineoptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [KPISparklineOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color The color of the sparkline.
       */
      public fun color(color: String)

      /**
       * @param tooltipVisibility The tooltip visibility of the sparkline.
       */
      public fun tooltipVisibility(tooltipVisibility: String)

      /**
       * @param type The type of the sparkline. 
       */
      public fun type(type: String)

      /**
       * @param visibility The visibility of the sparkline.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPISparklineOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPISparklineOptionsProperty.builder()

      /**
       * @param color The color of the sparkline.
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      /**
       * @param tooltipVisibility The tooltip visibility of the sparkline.
       */
      override fun tooltipVisibility(tooltipVisibility: String) {
        cdkBuilder.tooltipVisibility(tooltipVisibility)
      }

      /**
       * @param type The type of the sparkline. 
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      /**
       * @param visibility The visibility of the sparkline.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPISparklineOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPISparklineOptionsProperty,
    ) : KPISparklineOptionsProperty {
      /**
       * The color of the sparkline.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html#cfn-quicksight-analysis-kpisparklineoptions-color)
       */
      override fun color(): String? = unwrap(this).getColor()

      /**
       * The tooltip visibility of the sparkline.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html#cfn-quicksight-analysis-kpisparklineoptions-tooltipvisibility)
       */
      override fun tooltipVisibility(): String? = unwrap(this).getTooltipVisibility()

      /**
       * The type of the sparkline.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html#cfn-quicksight-analysis-kpisparklineoptions-type)
       */
      override fun type(): String = unwrap(this).getType()

      /**
       * The visibility of the sparkline.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html#cfn-quicksight-analysis-kpisparklineoptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): KPISparklineOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPISparklineOptionsProperty):
          KPISparklineOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPISparklineOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPISparklineOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ColumnTooltipItemProperty {
    /**
     * The aggregation function of the column tooltip item.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html#cfn-quicksight-analysis-columntooltipitem-aggregation)
     */
    public fun aggregation(): Any? = unwrap(this).getAggregation()

    /**
     * The target column of the tooltip item.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html#cfn-quicksight-analysis-columntooltipitem-column)
     */
    public fun column(): Any

    /**
     * The label of the tooltip item.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html#cfn-quicksight-analysis-columntooltipitem-label)
     */
    public fun label(): String? = unwrap(this).getLabel()

    /**
     * The visibility of the tooltip item.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html#cfn-quicksight-analysis-columntooltipitem-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [ColumnTooltipItemProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param aggregation The aggregation function of the column tooltip item.
       */
      public fun aggregation(aggregation: IResolvable)

      /**
       * @param aggregation The aggregation function of the column tooltip item.
       */
      public fun aggregation(aggregation: AggregationFunctionProperty)

      /**
       * @param aggregation The aggregation function of the column tooltip item.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ba2d3ceb0fe4d4a716b9341f0b86defa28b378b04e9cbd4d261264c16a5ec918")
      public fun aggregation(aggregation: AggregationFunctionProperty.Builder.() -> Unit)

      /**
       * @param column The target column of the tooltip item. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The target column of the tooltip item. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The target column of the tooltip item. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("010c9a3e8615debd3cb0758dbceefe011b258146ca69932f5b49276f999637f1")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param label The label of the tooltip item.
       */
      public fun label(label: String)

      /**
       * @param visibility The visibility of the tooltip item.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnTooltipItemProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnTooltipItemProperty.builder()

      /**
       * @param aggregation The aggregation function of the column tooltip item.
       */
      override fun aggregation(aggregation: IResolvable) {
        cdkBuilder.aggregation(aggregation.let(IResolvable::unwrap))
      }

      /**
       * @param aggregation The aggregation function of the column tooltip item.
       */
      override fun aggregation(aggregation: AggregationFunctionProperty) {
        cdkBuilder.aggregation(aggregation.let(AggregationFunctionProperty::unwrap))
      }

      /**
       * @param aggregation The aggregation function of the column tooltip item.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ba2d3ceb0fe4d4a716b9341f0b86defa28b378b04e9cbd4d261264c16a5ec918")
      override fun aggregation(aggregation: AggregationFunctionProperty.Builder.() -> Unit): Unit =
          aggregation(AggregationFunctionProperty(aggregation))

      /**
       * @param column The target column of the tooltip item. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The target column of the tooltip item. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The target column of the tooltip item. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("010c9a3e8615debd3cb0758dbceefe011b258146ca69932f5b49276f999637f1")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param label The label of the tooltip item.
       */
      override fun label(label: String) {
        cdkBuilder.label(label)
      }

      /**
       * @param visibility The visibility of the tooltip item.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnTooltipItemProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnTooltipItemProperty,
    ) : ColumnTooltipItemProperty {
      /**
       * The aggregation function of the column tooltip item.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html#cfn-quicksight-analysis-columntooltipitem-aggregation)
       */
      override fun aggregation(): Any? = unwrap(this).getAggregation()

      /**
       * The target column of the tooltip item.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html#cfn-quicksight-analysis-columntooltipitem-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The label of the tooltip item.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html#cfn-quicksight-analysis-columntooltipitem-label)
       */
      override fun label(): String? = unwrap(this).getLabel()

      /**
       * The visibility of the tooltip item.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html#cfn-quicksight-analysis-columntooltipitem-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnTooltipItemProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnTooltipItemProperty):
          ColumnTooltipItemProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnTooltipItemProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnTooltipItemProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface StringParameterDeclarationProperty {
    /**
     * The default values of a parameter.
     *
     * If the parameter is a single-value parameter, a maximum of one default value can be provided.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-defaultvalues)
     */
    public fun defaultValues(): Any? = unwrap(this).getDefaultValues()

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-mappeddatasetparameters)
     */
    public fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

    /**
     * The name of the parameter that is being declared.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-name)
     */
    public fun name(): String

    /**
     * The value type determines whether the parameter is a single-value or multi-value parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-parametervaluetype)
     */
    public fun parameterValueType(): String

    /**
     * The configuration that defines the default value of a `String` parameter when a value has not
     * been set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-valuewhenunset)
     */
    public fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()

    /**
     * A builder for [StringParameterDeclarationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      public fun defaultValues(defaultValues: IResolvable)

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      public fun defaultValues(defaultValues: StringDefaultValuesProperty)

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f4d2414583030660d20c896cdfc5b9a7627472dc885864fa17c83b53bb734a28")
      public fun defaultValues(defaultValues: StringDefaultValuesProperty.Builder.() -> Unit)

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      public fun mappedDataSetParameters(mappedDataSetParameters: IResolvable)

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      public fun mappedDataSetParameters(mappedDataSetParameters: List<Any>)

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      public fun mappedDataSetParameters(vararg mappedDataSetParameters: Any)

      /**
       * @param name The name of the parameter that is being declared. 
       */
      public fun name(name: String)

      /**
       * @param parameterValueType The value type determines whether the parameter is a single-value
       * or multi-value parameter. 
       */
      public fun parameterValueType(parameterValueType: String)

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `String`
       * parameter when a value has not been set.
       */
      public fun valueWhenUnset(valueWhenUnset: IResolvable)

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `String`
       * parameter when a value has not been set.
       */
      public fun valueWhenUnset(valueWhenUnset: StringValueWhenUnsetConfigurationProperty)

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `String`
       * parameter when a value has not been set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf18c34313fc52c0231979f0f03b5b66b774bd4f017b3e6e1f9fd0ca7ac6624a")
      public
          fun valueWhenUnset(valueWhenUnset: StringValueWhenUnsetConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringParameterDeclarationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringParameterDeclarationProperty.builder()

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      override fun defaultValues(defaultValues: IResolvable) {
        cdkBuilder.defaultValues(defaultValues.let(IResolvable::unwrap))
      }

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      override fun defaultValues(defaultValues: StringDefaultValuesProperty) {
        cdkBuilder.defaultValues(defaultValues.let(StringDefaultValuesProperty::unwrap))
      }

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f4d2414583030660d20c896cdfc5b9a7627472dc885864fa17c83b53bb734a28")
      override fun defaultValues(defaultValues: StringDefaultValuesProperty.Builder.() -> Unit):
          Unit = defaultValues(StringDefaultValuesProperty(defaultValues))

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      override fun mappedDataSetParameters(mappedDataSetParameters: IResolvable) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters.let(IResolvable::unwrap))
      }

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      override fun mappedDataSetParameters(mappedDataSetParameters: List<Any>) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters)
      }

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      override fun mappedDataSetParameters(vararg mappedDataSetParameters: Any): Unit =
          mappedDataSetParameters(mappedDataSetParameters.toList())

      /**
       * @param name The name of the parameter that is being declared. 
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param parameterValueType The value type determines whether the parameter is a single-value
       * or multi-value parameter. 
       */
      override fun parameterValueType(parameterValueType: String) {
        cdkBuilder.parameterValueType(parameterValueType)
      }

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `String`
       * parameter when a value has not been set.
       */
      override fun valueWhenUnset(valueWhenUnset: IResolvable) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(IResolvable::unwrap))
      }

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `String`
       * parameter when a value has not been set.
       */
      override fun valueWhenUnset(valueWhenUnset: StringValueWhenUnsetConfigurationProperty) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(StringValueWhenUnsetConfigurationProperty::unwrap))
      }

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `String`
       * parameter when a value has not been set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf18c34313fc52c0231979f0f03b5b66b774bd4f017b3e6e1f9fd0ca7ac6624a")
      override
          fun valueWhenUnset(valueWhenUnset: StringValueWhenUnsetConfigurationProperty.Builder.() -> Unit):
          Unit = valueWhenUnset(StringValueWhenUnsetConfigurationProperty(valueWhenUnset))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringParameterDeclarationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringParameterDeclarationProperty,
    ) : StringParameterDeclarationProperty {
      /**
       * The default values of a parameter.
       *
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-defaultvalues)
       */
      override fun defaultValues(): Any? = unwrap(this).getDefaultValues()

      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-mappeddatasetparameters)
       */
      override fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

      /**
       * The name of the parameter that is being declared.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-name)
       */
      override fun name(): String = unwrap(this).getName()

      /**
       * The value type determines whether the parameter is a single-value or multi-value parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-parametervaluetype)
       */
      override fun parameterValueType(): String = unwrap(this).getParameterValueType()

      /**
       * The configuration that defines the default value of a `String` parameter when a value has
       * not been set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-valuewhenunset)
       */
      override fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          StringParameterDeclarationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.StringParameterDeclarationProperty):
          StringParameterDeclarationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: StringParameterDeclarationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringParameterDeclarationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableFieldURLConfigurationProperty {
    /**
     * The image configuration of a table field URL.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldurlconfiguration.html#cfn-quicksight-analysis-tablefieldurlconfiguration-imageconfiguration)
     */
    public fun imageConfiguration(): Any? = unwrap(this).getImageConfiguration()

    /**
     * The link configuration of a table field URL.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldurlconfiguration.html#cfn-quicksight-analysis-tablefieldurlconfiguration-linkconfiguration)
     */
    public fun linkConfiguration(): Any? = unwrap(this).getLinkConfiguration()

    /**
     * A builder for [TableFieldURLConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param imageConfiguration The image configuration of a table field URL.
       */
      public fun imageConfiguration(imageConfiguration: IResolvable)

      /**
       * @param imageConfiguration The image configuration of a table field URL.
       */
      public fun imageConfiguration(imageConfiguration: TableFieldImageConfigurationProperty)

      /**
       * @param imageConfiguration The image configuration of a table field URL.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ad9ca13ed51c6c5759c46176b3925408ac3a68f8793d5a3e44b8dc91340d445e")
      public
          fun imageConfiguration(imageConfiguration: TableFieldImageConfigurationProperty.Builder.() -> Unit)

      /**
       * @param linkConfiguration The link configuration of a table field URL.
       */
      public fun linkConfiguration(linkConfiguration: IResolvable)

      /**
       * @param linkConfiguration The link configuration of a table field URL.
       */
      public fun linkConfiguration(linkConfiguration: TableFieldLinkConfigurationProperty)

      /**
       * @param linkConfiguration The link configuration of a table field URL.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("41bd0615113e4e8b3869ebe9fe9ddfb676163ad4e82bfa7abb1a316d2abc3cb6")
      public
          fun linkConfiguration(linkConfiguration: TableFieldLinkConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldURLConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldURLConfigurationProperty.builder()

      /**
       * @param imageConfiguration The image configuration of a table field URL.
       */
      override fun imageConfiguration(imageConfiguration: IResolvable) {
        cdkBuilder.imageConfiguration(imageConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param imageConfiguration The image configuration of a table field URL.
       */
      override fun imageConfiguration(imageConfiguration: TableFieldImageConfigurationProperty) {
        cdkBuilder.imageConfiguration(imageConfiguration.let(TableFieldImageConfigurationProperty::unwrap))
      }

      /**
       * @param imageConfiguration The image configuration of a table field URL.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ad9ca13ed51c6c5759c46176b3925408ac3a68f8793d5a3e44b8dc91340d445e")
      override
          fun imageConfiguration(imageConfiguration: TableFieldImageConfigurationProperty.Builder.() -> Unit):
          Unit = imageConfiguration(TableFieldImageConfigurationProperty(imageConfiguration))

      /**
       * @param linkConfiguration The link configuration of a table field URL.
       */
      override fun linkConfiguration(linkConfiguration: IResolvable) {
        cdkBuilder.linkConfiguration(linkConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param linkConfiguration The link configuration of a table field URL.
       */
      override fun linkConfiguration(linkConfiguration: TableFieldLinkConfigurationProperty) {
        cdkBuilder.linkConfiguration(linkConfiguration.let(TableFieldLinkConfigurationProperty::unwrap))
      }

      /**
       * @param linkConfiguration The link configuration of a table field URL.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("41bd0615113e4e8b3869ebe9fe9ddfb676163ad4e82bfa7abb1a316d2abc3cb6")
      override
          fun linkConfiguration(linkConfiguration: TableFieldLinkConfigurationProperty.Builder.() -> Unit):
          Unit = linkConfiguration(TableFieldLinkConfigurationProperty(linkConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldURLConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldURLConfigurationProperty,
    ) : TableFieldURLConfigurationProperty {
      /**
       * The image configuration of a table field URL.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldurlconfiguration.html#cfn-quicksight-analysis-tablefieldurlconfiguration-imageconfiguration)
       */
      override fun imageConfiguration(): Any? = unwrap(this).getImageConfiguration()

      /**
       * The link configuration of a table field URL.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldurlconfiguration.html#cfn-quicksight-analysis-tablefieldurlconfiguration-linkconfiguration)
       */
      override fun linkConfiguration(): Any? = unwrap(this).getLinkConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableFieldURLConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldURLConfigurationProperty):
          TableFieldURLConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldURLConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldURLConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface CustomColorProperty {
    /**
     * The color that is applied to the data value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcolor.html#cfn-quicksight-analysis-customcolor-color)
     */
    public fun color(): String

    /**
     * The data value that the color is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcolor.html#cfn-quicksight-analysis-customcolor-fieldvalue)
     */
    public fun fieldValue(): String? = unwrap(this).getFieldValue()

    /**
     * The value of a special data value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcolor.html#cfn-quicksight-analysis-customcolor-specialvalue)
     */
    public fun specialValue(): String? = unwrap(this).getSpecialValue()

    /**
     * A builder for [CustomColorProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color The color that is applied to the data value. 
       */
      public fun color(color: String)

      /**
       * @param fieldValue The data value that the color is applied to.
       */
      public fun fieldValue(fieldValue: String)

      /**
       * @param specialValue The value of a special data value.
       */
      public fun specialValue(specialValue: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomColorProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomColorProperty.builder()

      /**
       * @param color The color that is applied to the data value. 
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      /**
       * @param fieldValue The data value that the color is applied to.
       */
      override fun fieldValue(fieldValue: String) {
        cdkBuilder.fieldValue(fieldValue)
      }

      /**
       * @param specialValue The value of a special data value.
       */
      override fun specialValue(specialValue: String) {
        cdkBuilder.specialValue(specialValue)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomColorProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomColorProperty,
    ) : CustomColorProperty {
      /**
       * The color that is applied to the data value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcolor.html#cfn-quicksight-analysis-customcolor-color)
       */
      override fun color(): String = unwrap(this).getColor()

      /**
       * The data value that the color is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcolor.html#cfn-quicksight-analysis-customcolor-fieldvalue)
       */
      override fun fieldValue(): String? = unwrap(this).getFieldValue()

      /**
       * The value of a special data value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcolor.html#cfn-quicksight-analysis-customcolor-specialvalue)
       */
      override fun specialValue(): String? = unwrap(this).getSpecialValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): CustomColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomColorProperty):
          CustomColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomColorProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomColorProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface WordCloudVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration settings of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers..
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [WordCloudVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: WordCloudChartConfigurationProperty)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3cc6478ebadcd1928300401a08dffd98bc3b2f5113e8dba01d4a850d41794545")
      public
          fun chartConfiguration(chartConfiguration: WordCloudChartConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("612fa73f0bfb5b2e0c24dbe6e2ce155d536272cb88ab2666683be69d525af91d")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5068e640b35a641f961a974dd8d99c8cc01f4f8e526ddae0f2df9f4c9f0123ec")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: WordCloudChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(WordCloudChartConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3cc6478ebadcd1928300401a08dffd98bc3b2f5113e8dba01d4a850d41794545")
      override
          fun chartConfiguration(chartConfiguration: WordCloudChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(WordCloudChartConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("612fa73f0bfb5b2e0c24dbe6e2ce155d536272cb88ab2666683be69d525af91d")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5068e640b35a641f961a974dd8d99c8cc01f4f8e526ddae0f2df9f4c9f0123ec")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudVisualProperty,
    ) : WordCloudVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration settings of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): WordCloudVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudVisualProperty):
          WordCloudVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WordCloudVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudVisualProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface TrendArrowOptionsProperty {
    /**
     * The visibility of the trend arrows.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-trendarrowoptions.html#cfn-quicksight-analysis-trendarrowoptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [TrendArrowOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility The visibility of the trend arrows.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TrendArrowOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TrendArrowOptionsProperty.builder()

      /**
       * @param visibility The visibility of the trend arrows.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TrendArrowOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TrendArrowOptionsProperty,
    ) : TrendArrowOptionsProperty {
      /**
       * The visibility of the trend arrows.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-trendarrowoptions.html#cfn-quicksight-analysis-trendarrowoptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TrendArrowOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TrendArrowOptionsProperty):
          TrendArrowOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TrendArrowOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TrendArrowOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface AggregationSortConfigurationProperty {
    /**
     * The function that aggregates the values in `Column` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationsortconfiguration.html#cfn-quicksight-analysis-aggregationsortconfiguration-aggregationfunction)
     */
    public fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

    /**
     * The column that determines the sort order of aggregated values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationsortconfiguration.html#cfn-quicksight-analysis-aggregationsortconfiguration-column)
     */
    public fun column(): Any

    /**
     * The sort direction of values.
     *
     * * `ASC` : Sort in ascending order.
     * * `DESC` : Sort in descending order.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationsortconfiguration.html#cfn-quicksight-analysis-aggregationsortconfiguration-sortdirection)
     */
    public fun sortDirection(): String

    /**
     * A builder for [AggregationSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param aggregationFunction The function that aggregates the values in `Column` .
       */
      public fun aggregationFunction(aggregationFunction: IResolvable)

      /**
       * @param aggregationFunction The function that aggregates the values in `Column` .
       */
      public fun aggregationFunction(aggregationFunction: AggregationFunctionProperty)

      /**
       * @param aggregationFunction The function that aggregates the values in `Column` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("722acbba4d216798323b2ba1c13c627a067c3c5f126520dfea935280e0d7406d")
      public
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit)

      /**
       * @param column The column that determines the sort order of aggregated values. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that determines the sort order of aggregated values. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that determines the sort order of aggregated values. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9435a1ffeae88b4869ad75763a94fbb258d93ae6f5757d1d718ce3bce88ec6c7")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param sortDirection The sort direction of values. 
       * * `ASC` : Sort in ascending order.
       * * `DESC` : Sort in descending order.
       */
      public fun sortDirection(sortDirection: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AggregationSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AggregationSortConfigurationProperty.builder()

      /**
       * @param aggregationFunction The function that aggregates the values in `Column` .
       */
      override fun aggregationFunction(aggregationFunction: IResolvable) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(IResolvable::unwrap))
      }

      /**
       * @param aggregationFunction The function that aggregates the values in `Column` .
       */
      override fun aggregationFunction(aggregationFunction: AggregationFunctionProperty) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(AggregationFunctionProperty::unwrap))
      }

      /**
       * @param aggregationFunction The function that aggregates the values in `Column` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("722acbba4d216798323b2ba1c13c627a067c3c5f126520dfea935280e0d7406d")
      override
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit):
          Unit = aggregationFunction(AggregationFunctionProperty(aggregationFunction))

      /**
       * @param column The column that determines the sort order of aggregated values. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that determines the sort order of aggregated values. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that determines the sort order of aggregated values. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9435a1ffeae88b4869ad75763a94fbb258d93ae6f5757d1d718ce3bce88ec6c7")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param sortDirection The sort direction of values. 
       * * `ASC` : Sort in ascending order.
       * * `DESC` : Sort in descending order.
       */
      override fun sortDirection(sortDirection: String) {
        cdkBuilder.sortDirection(sortDirection)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AggregationSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AggregationSortConfigurationProperty,
    ) : AggregationSortConfigurationProperty {
      /**
       * The function that aggregates the values in `Column` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationsortconfiguration.html#cfn-quicksight-analysis-aggregationsortconfiguration-aggregationfunction)
       */
      override fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

      /**
       * The column that determines the sort order of aggregated values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationsortconfiguration.html#cfn-quicksight-analysis-aggregationsortconfiguration-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The sort direction of values.
       *
       * * `ASC` : Sort in ascending order.
       * * `DESC` : Sort in descending order.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationsortconfiguration.html#cfn-quicksight-analysis-aggregationsortconfiguration-sortdirection)
       */
      override fun sortDirection(): String = unwrap(this).getSortDirection()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          AggregationSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AggregationSortConfigurationProperty):
          AggregationSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AggregationSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AggregationSortConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ThousandSeparatorOptionsProperty {
    /**
     * Determines the thousands separator symbol.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-thousandseparatoroptions.html#cfn-quicksight-analysis-thousandseparatoroptions-symbol)
     */
    public fun symbol(): String? = unwrap(this).getSymbol()

    /**
     * Determines the visibility of the thousands separator.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-thousandseparatoroptions.html#cfn-quicksight-analysis-thousandseparatoroptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [ThousandSeparatorOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param symbol Determines the thousands separator symbol.
       */
      public fun symbol(symbol: String)

      /**
       * @param visibility Determines the visibility of the thousands separator.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ThousandSeparatorOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ThousandSeparatorOptionsProperty.builder()

      /**
       * @param symbol Determines the thousands separator symbol.
       */
      override fun symbol(symbol: String) {
        cdkBuilder.symbol(symbol)
      }

      /**
       * @param visibility Determines the visibility of the thousands separator.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ThousandSeparatorOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ThousandSeparatorOptionsProperty,
    ) : ThousandSeparatorOptionsProperty {
      /**
       * Determines the thousands separator symbol.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-thousandseparatoroptions.html#cfn-quicksight-analysis-thousandseparatoroptions-symbol)
       */
      override fun symbol(): String? = unwrap(this).getSymbol()

      /**
       * Determines the visibility of the thousands separator.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-thousandseparatoroptions.html#cfn-quicksight-analysis-thousandseparatoroptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ThousandSeparatorOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ThousandSeparatorOptionsProperty):
          ThousandSeparatorOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ThousandSeparatorOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ThousandSeparatorOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ReferenceLineDynamicDataConfigurationProperty {
    /**
     * The calculation that is used in the dynamic data.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedynamicdataconfiguration.html#cfn-quicksight-analysis-referencelinedynamicdataconfiguration-calculation)
     */
    public fun calculation(): Any

    /**
     * The column that the dynamic data targets.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedynamicdataconfiguration.html#cfn-quicksight-analysis-referencelinedynamicdataconfiguration-column)
     */
    public fun column(): Any

    /**
     * The aggregation function that is used in the dynamic data.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedynamicdataconfiguration.html#cfn-quicksight-analysis-referencelinedynamicdataconfiguration-measureaggregationfunction)
     */
    public fun measureAggregationFunction(): Any? = unwrap(this).getMeasureAggregationFunction()

    /**
     * A builder for [ReferenceLineDynamicDataConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param calculation The calculation that is used in the dynamic data. 
       */
      public fun calculation(calculation: IResolvable)

      /**
       * @param calculation The calculation that is used in the dynamic data. 
       */
      public fun calculation(calculation: NumericalAggregationFunctionProperty)

      /**
       * @param calculation The calculation that is used in the dynamic data. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b6179267ff31276b0b08b56e006e49454cae6eb6728b8d915fc56124eda83706")
      public fun calculation(calculation: NumericalAggregationFunctionProperty.Builder.() -> Unit)

      /**
       * @param column The column that the dynamic data targets. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that the dynamic data targets. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that the dynamic data targets. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("702e706a2f63bb05dc950c68e6b105e44690dc18ccd2bdafada1242494afc23f")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param measureAggregationFunction The aggregation function that is used in the dynamic
       * data.
       */
      public fun measureAggregationFunction(measureAggregationFunction: IResolvable)

      /**
       * @param measureAggregationFunction The aggregation function that is used in the dynamic
       * data.
       */
      public fun measureAggregationFunction(measureAggregationFunction: AggregationFunctionProperty)

      /**
       * @param measureAggregationFunction The aggregation function that is used in the dynamic
       * data.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("86c52c427a268b825959568438e4fb4d8634970a213214c89402ccf08f13c125")
      public
          fun measureAggregationFunction(measureAggregationFunction: AggregationFunctionProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineDynamicDataConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineDynamicDataConfigurationProperty.builder()

      /**
       * @param calculation The calculation that is used in the dynamic data. 
       */
      override fun calculation(calculation: IResolvable) {
        cdkBuilder.calculation(calculation.let(IResolvable::unwrap))
      }

      /**
       * @param calculation The calculation that is used in the dynamic data. 
       */
      override fun calculation(calculation: NumericalAggregationFunctionProperty) {
        cdkBuilder.calculation(calculation.let(NumericalAggregationFunctionProperty::unwrap))
      }

      /**
       * @param calculation The calculation that is used in the dynamic data. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b6179267ff31276b0b08b56e006e49454cae6eb6728b8d915fc56124eda83706")
      override
          fun calculation(calculation: NumericalAggregationFunctionProperty.Builder.() -> Unit):
          Unit = calculation(NumericalAggregationFunctionProperty(calculation))

      /**
       * @param column The column that the dynamic data targets. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that the dynamic data targets. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that the dynamic data targets. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("702e706a2f63bb05dc950c68e6b105e44690dc18ccd2bdafada1242494afc23f")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param measureAggregationFunction The aggregation function that is used in the dynamic
       * data.
       */
      override fun measureAggregationFunction(measureAggregationFunction: IResolvable) {
        cdkBuilder.measureAggregationFunction(measureAggregationFunction.let(IResolvable::unwrap))
      }

      /**
       * @param measureAggregationFunction The aggregation function that is used in the dynamic
       * data.
       */
      override
          fun measureAggregationFunction(measureAggregationFunction: AggregationFunctionProperty) {
        cdkBuilder.measureAggregationFunction(measureAggregationFunction.let(AggregationFunctionProperty::unwrap))
      }

      /**
       * @param measureAggregationFunction The aggregation function that is used in the dynamic
       * data.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("86c52c427a268b825959568438e4fb4d8634970a213214c89402ccf08f13c125")
      override
          fun measureAggregationFunction(measureAggregationFunction: AggregationFunctionProperty.Builder.() -> Unit):
          Unit = measureAggregationFunction(AggregationFunctionProperty(measureAggregationFunction))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineDynamicDataConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineDynamicDataConfigurationProperty,
    ) : ReferenceLineDynamicDataConfigurationProperty {
      /**
       * The calculation that is used in the dynamic data.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedynamicdataconfiguration.html#cfn-quicksight-analysis-referencelinedynamicdataconfiguration-calculation)
       */
      override fun calculation(): Any = unwrap(this).getCalculation()

      /**
       * The column that the dynamic data targets.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedynamicdataconfiguration.html#cfn-quicksight-analysis-referencelinedynamicdataconfiguration-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The aggregation function that is used in the dynamic data.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedynamicdataconfiguration.html#cfn-quicksight-analysis-referencelinedynamicdataconfiguration-measureaggregationfunction)
       */
      override fun measureAggregationFunction(): Any? = unwrap(this).getMeasureAggregationFunction()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineDynamicDataConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineDynamicDataConfigurationProperty):
          ReferenceLineDynamicDataConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineDynamicDataConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineDynamicDataConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ProgressBarOptionsProperty {
    /**
     * The visibility of the progress bar.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-progressbaroptions.html#cfn-quicksight-analysis-progressbaroptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [ProgressBarOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility The visibility of the progress bar.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ProgressBarOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ProgressBarOptionsProperty.builder()

      /**
       * @param visibility The visibility of the progress bar.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ProgressBarOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ProgressBarOptionsProperty,
    ) : ProgressBarOptionsProperty {
      /**
       * The visibility of the progress bar.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-progressbaroptions.html#cfn-quicksight-analysis-progressbaroptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ProgressBarOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ProgressBarOptionsProperty):
          ProgressBarOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ProgressBarOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ProgressBarOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface SectionAfterPageBreakProperty {
    /**
     * The option that enables or disables a page break at the end of a section.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionafterpagebreak.html#cfn-quicksight-analysis-sectionafterpagebreak-status)
     */
    public fun status(): String? = unwrap(this).getStatus()

    /**
     * A builder for [SectionAfterPageBreakProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param status The option that enables or disables a page break at the end of a section.
       */
      public fun status(status: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionAfterPageBreakProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionAfterPageBreakProperty.builder()

      /**
       * @param status The option that enables or disables a page break at the end of a section.
       */
      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionAfterPageBreakProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionAfterPageBreakProperty,
    ) : SectionAfterPageBreakProperty {
      /**
       * The option that enables or disables a page break at the end of a section.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionafterpagebreak.html#cfn-quicksight-analysis-sectionafterpagebreak-status)
       */
      override fun status(): String? = unwrap(this).getStatus()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SectionAfterPageBreakProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionAfterPageBreakProperty):
          SectionAfterPageBreakProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionAfterPageBreakProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionAfterPageBreakProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface NumericEqualityDrillDownFilterProperty {
    /**
     * The column that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalitydrilldownfilter.html#cfn-quicksight-analysis-numericequalitydrilldownfilter-column)
     */
    public fun column(): Any

    /**
     * The value of the double input numeric drill down filter.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalitydrilldownfilter.html#cfn-quicksight-analysis-numericequalitydrilldownfilter-value)
     */
    public fun `value`(): Number

    /**
     * A builder for [NumericEqualityDrillDownFilterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1d91df18a6d9a35a550854c6e4068a9fc7e725baecfcfe3cdf4f21a21b598a83")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param value The value of the double input numeric drill down filter. 
       */
      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericEqualityDrillDownFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericEqualityDrillDownFilterProperty.builder()

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1d91df18a6d9a35a550854c6e4068a9fc7e725baecfcfe3cdf4f21a21b598a83")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param value The value of the double input numeric drill down filter. 
       */
      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericEqualityDrillDownFilterProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericEqualityDrillDownFilterProperty,
    ) : NumericEqualityDrillDownFilterProperty {
      /**
       * The column that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalitydrilldownfilter.html#cfn-quicksight-analysis-numericequalitydrilldownfilter-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The value of the double input numeric drill down filter.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalitydrilldownfilter.html#cfn-quicksight-analysis-numericequalitydrilldownfilter-value)
       */
      override fun `value`(): Number = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          NumericEqualityDrillDownFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericEqualityDrillDownFilterProperty):
          NumericEqualityDrillDownFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericEqualityDrillDownFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericEqualityDrillDownFilterProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TotalOptionsProperty {
    /**
     * The custom label string for the total cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-customlabel)
     */
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    /**
     * The placement (start, end) for the total cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-placement)
     */
    public fun placement(): String? = unwrap(this).getPlacement()

    /**
     * The scroll status (pinned, scrolled) for the total cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-scrollstatus)
     */
    public fun scrollStatus(): String? = unwrap(this).getScrollStatus()

    /**
     * The total aggregation settings for each value field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-totalaggregationoptions)
     */
    public fun totalAggregationOptions(): Any? = unwrap(this).getTotalAggregationOptions()

    /**
     * Cell styling options for the total cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-totalcellstyle)
     */
    public fun totalCellStyle(): Any? = unwrap(this).getTotalCellStyle()

    /**
     * The visibility configuration for the total cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-totalsvisibility)
     */
    public fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

    /**
     * A builder for [TotalOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customLabel The custom label string for the total cells.
       */
      public fun customLabel(customLabel: String)

      /**
       * @param placement The placement (start, end) for the total cells.
       */
      public fun placement(placement: String)

      /**
       * @param scrollStatus The scroll status (pinned, scrolled) for the total cells.
       */
      public fun scrollStatus(scrollStatus: String)

      /**
       * @param totalAggregationOptions The total aggregation settings for each value field.
       */
      public fun totalAggregationOptions(totalAggregationOptions: IResolvable)

      /**
       * @param totalAggregationOptions The total aggregation settings for each value field.
       */
      public fun totalAggregationOptions(totalAggregationOptions: List<Any>)

      /**
       * @param totalAggregationOptions The total aggregation settings for each value field.
       */
      public fun totalAggregationOptions(vararg totalAggregationOptions: Any)

      /**
       * @param totalCellStyle Cell styling options for the total cells.
       */
      public fun totalCellStyle(totalCellStyle: IResolvable)

      /**
       * @param totalCellStyle Cell styling options for the total cells.
       */
      public fun totalCellStyle(totalCellStyle: TableCellStyleProperty)

      /**
       * @param totalCellStyle Cell styling options for the total cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4b2cb3946fb9f5a28ae2ed125b4b04e54c5ed21393149611b968da52cbfe78ae")
      public fun totalCellStyle(totalCellStyle: TableCellStyleProperty.Builder.() -> Unit)

      /**
       * @param totalsVisibility The visibility configuration for the total cells.
       */
      public fun totalsVisibility(totalsVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalOptionsProperty.builder()

      /**
       * @param customLabel The custom label string for the total cells.
       */
      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      /**
       * @param placement The placement (start, end) for the total cells.
       */
      override fun placement(placement: String) {
        cdkBuilder.placement(placement)
      }

      /**
       * @param scrollStatus The scroll status (pinned, scrolled) for the total cells.
       */
      override fun scrollStatus(scrollStatus: String) {
        cdkBuilder.scrollStatus(scrollStatus)
      }

      /**
       * @param totalAggregationOptions The total aggregation settings for each value field.
       */
      override fun totalAggregationOptions(totalAggregationOptions: IResolvable) {
        cdkBuilder.totalAggregationOptions(totalAggregationOptions.let(IResolvable::unwrap))
      }

      /**
       * @param totalAggregationOptions The total aggregation settings for each value field.
       */
      override fun totalAggregationOptions(totalAggregationOptions: List<Any>) {
        cdkBuilder.totalAggregationOptions(totalAggregationOptions)
      }

      /**
       * @param totalAggregationOptions The total aggregation settings for each value field.
       */
      override fun totalAggregationOptions(vararg totalAggregationOptions: Any): Unit =
          totalAggregationOptions(totalAggregationOptions.toList())

      /**
       * @param totalCellStyle Cell styling options for the total cells.
       */
      override fun totalCellStyle(totalCellStyle: IResolvable) {
        cdkBuilder.totalCellStyle(totalCellStyle.let(IResolvable::unwrap))
      }

      /**
       * @param totalCellStyle Cell styling options for the total cells.
       */
      override fun totalCellStyle(totalCellStyle: TableCellStyleProperty) {
        cdkBuilder.totalCellStyle(totalCellStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param totalCellStyle Cell styling options for the total cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4b2cb3946fb9f5a28ae2ed125b4b04e54c5ed21393149611b968da52cbfe78ae")
      override fun totalCellStyle(totalCellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          totalCellStyle(TableCellStyleProperty(totalCellStyle))

      /**
       * @param totalsVisibility The visibility configuration for the total cells.
       */
      override fun totalsVisibility(totalsVisibility: String) {
        cdkBuilder.totalsVisibility(totalsVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalOptionsProperty,
    ) : TotalOptionsProperty {
      /**
       * The custom label string for the total cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-customlabel)
       */
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      /**
       * The placement (start, end) for the total cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-placement)
       */
      override fun placement(): String? = unwrap(this).getPlacement()

      /**
       * The scroll status (pinned, scrolled) for the total cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-scrollstatus)
       */
      override fun scrollStatus(): String? = unwrap(this).getScrollStatus()

      /**
       * The total aggregation settings for each value field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-totalaggregationoptions)
       */
      override fun totalAggregationOptions(): Any? = unwrap(this).getTotalAggregationOptions()

      /**
       * Cell styling options for the total cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-totalcellstyle)
       */
      override fun totalCellStyle(): Any? = unwrap(this).getTotalCellStyle()

      /**
       * The visibility configuration for the total cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-totalsvisibility)
       */
      override fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TotalOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalOptionsProperty):
          TotalOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TotalOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalOptionsProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface WaterfallChartOptionsProperty {
    /**
     * This option determines the total bar label of a waterfall visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartoptions.html#cfn-quicksight-analysis-waterfallchartoptions-totalbarlabel)
     */
    public fun totalBarLabel(): String? = unwrap(this).getTotalBarLabel()

    /**
     * A builder for [WaterfallChartOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param totalBarLabel This option determines the total bar label of a waterfall visual.
       */
      public fun totalBarLabel(totalBarLabel: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartOptionsProperty.builder()

      /**
       * @param totalBarLabel This option determines the total bar label of a waterfall visual.
       */
      override fun totalBarLabel(totalBarLabel: String) {
        cdkBuilder.totalBarLabel(totalBarLabel)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartOptionsProperty,
    ) : WaterfallChartOptionsProperty {
      /**
       * This option determines the total bar label of a waterfall visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartoptions.html#cfn-quicksight-analysis-waterfallchartoptions-totalbarlabel)
       */
      override fun totalBarLabel(): String? = unwrap(this).getTotalBarLabel()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): WaterfallChartOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartOptionsProperty):
          WaterfallChartOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WaterfallChartOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilledMapFieldWellsProperty {
    /**
     * The aggregated field well of the filled map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapfieldwells.html#cfn-quicksight-analysis-filledmapfieldwells-filledmapaggregatedfieldwells)
     */
    public fun filledMapAggregatedFieldWells(): Any? =
        unwrap(this).getFilledMapAggregatedFieldWells()

    /**
     * A builder for [FilledMapFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param filledMapAggregatedFieldWells The aggregated field well of the filled map.
       */
      public fun filledMapAggregatedFieldWells(filledMapAggregatedFieldWells: IResolvable)

      /**
       * @param filledMapAggregatedFieldWells The aggregated field well of the filled map.
       */
      public
          fun filledMapAggregatedFieldWells(filledMapAggregatedFieldWells: FilledMapAggregatedFieldWellsProperty)

      /**
       * @param filledMapAggregatedFieldWells The aggregated field well of the filled map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bcb2eef31775df7386b17c53c93cb3af6bf823ce884a8efeb7815be4cb7609d5")
      public
          fun filledMapAggregatedFieldWells(filledMapAggregatedFieldWells: FilledMapAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapFieldWellsProperty.builder()

      /**
       * @param filledMapAggregatedFieldWells The aggregated field well of the filled map.
       */
      override fun filledMapAggregatedFieldWells(filledMapAggregatedFieldWells: IResolvable) {
        cdkBuilder.filledMapAggregatedFieldWells(filledMapAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param filledMapAggregatedFieldWells The aggregated field well of the filled map.
       */
      override
          fun filledMapAggregatedFieldWells(filledMapAggregatedFieldWells: FilledMapAggregatedFieldWellsProperty) {
        cdkBuilder.filledMapAggregatedFieldWells(filledMapAggregatedFieldWells.let(FilledMapAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param filledMapAggregatedFieldWells The aggregated field well of the filled map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bcb2eef31775df7386b17c53c93cb3af6bf823ce884a8efeb7815be4cb7609d5")
      override
          fun filledMapAggregatedFieldWells(filledMapAggregatedFieldWells: FilledMapAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          filledMapAggregatedFieldWells(FilledMapAggregatedFieldWellsProperty(filledMapAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapFieldWellsProperty,
    ) : FilledMapFieldWellsProperty {
      /**
       * The aggregated field well of the filled map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapfieldwells.html#cfn-quicksight-analysis-filledmapfieldwells-filledmapaggregatedfieldwells)
       */
      override fun filledMapAggregatedFieldWells(): Any? =
          unwrap(this).getFilledMapAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilledMapFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapFieldWellsProperty):
          FilledMapFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration settings of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The conditional formatting for a `PivotTableVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-conditionalformatting)
     */
    public fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers..
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [TableVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: TableConfigurationProperty)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6c191f3cd3f1c148b01fbc46bbe4bdbf82b7de397b3266a0081a0bdab07db0b9")
      public
          fun chartConfiguration(chartConfiguration: TableConfigurationProperty.Builder.() -> Unit)

      /**
       * @param conditionalFormatting The conditional formatting for a `PivotTableVisual` .
       */
      public fun conditionalFormatting(conditionalFormatting: IResolvable)

      /**
       * @param conditionalFormatting The conditional formatting for a `PivotTableVisual` .
       */
      public fun conditionalFormatting(conditionalFormatting: TableConditionalFormattingProperty)

      /**
       * @param conditionalFormatting The conditional formatting for a `PivotTableVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dbe313083f503523ce6ce0aade6c68e62783ede50fa8b8e10997b9ebcb1a1112")
      public
          fun conditionalFormatting(conditionalFormatting: TableConditionalFormattingProperty.Builder.() -> Unit)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("642f94b3c19db75903d4e6d6d2e7c732ead7875d823f9f5ebf4e5d8899bce7b7")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8dad48b337b98eef3bb3075fa372724285418535ee0bae8396c52fcd03aba288")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: TableConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(TableConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6c191f3cd3f1c148b01fbc46bbe4bdbf82b7de397b3266a0081a0bdab07db0b9")
      override
          fun chartConfiguration(chartConfiguration: TableConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(TableConfigurationProperty(chartConfiguration))

      /**
       * @param conditionalFormatting The conditional formatting for a `PivotTableVisual` .
       */
      override fun conditionalFormatting(conditionalFormatting: IResolvable) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(IResolvable::unwrap))
      }

      /**
       * @param conditionalFormatting The conditional formatting for a `PivotTableVisual` .
       */
      override
          fun conditionalFormatting(conditionalFormatting: TableConditionalFormattingProperty) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(TableConditionalFormattingProperty::unwrap))
      }

      /**
       * @param conditionalFormatting The conditional formatting for a `PivotTableVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dbe313083f503523ce6ce0aade6c68e62783ede50fa8b8e10997b9ebcb1a1112")
      override
          fun conditionalFormatting(conditionalFormatting: TableConditionalFormattingProperty.Builder.() -> Unit):
          Unit = conditionalFormatting(TableConditionalFormattingProperty(conditionalFormatting))

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("642f94b3c19db75903d4e6d6d2e7c732ead7875d823f9f5ebf4e5d8899bce7b7")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8dad48b337b98eef3bb3075fa372724285418535ee0bae8396c52fcd03aba288")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.TableVisualProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableVisualProperty,
    ) : TableVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration settings of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The conditional formatting for a `PivotTableVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-conditionalformatting)
       */
      override fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TableVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableVisualProperty):
          TableVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableVisualProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface TimeRangeFilterValueProperty {
    /**
     * The parameter type input value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefiltervalue.html#cfn-quicksight-analysis-timerangefiltervalue-parameter)
     */
    public fun parameter(): String? = unwrap(this).getParameter()

    /**
     * The rolling date input value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefiltervalue.html#cfn-quicksight-analysis-timerangefiltervalue-rollingdate)
     */
    public fun rollingDate(): Any? = unwrap(this).getRollingDate()

    /**
     * The static input value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefiltervalue.html#cfn-quicksight-analysis-timerangefiltervalue-staticvalue)
     */
    public fun staticValue(): String? = unwrap(this).getStaticValue()

    /**
     * A builder for [TimeRangeFilterValueProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param parameter The parameter type input value.
       */
      public fun parameter(parameter: String)

      /**
       * @param rollingDate The rolling date input value.
       */
      public fun rollingDate(rollingDate: IResolvable)

      /**
       * @param rollingDate The rolling date input value.
       */
      public fun rollingDate(rollingDate: RollingDateConfigurationProperty)

      /**
       * @param rollingDate The rolling date input value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("af1b8722c6310ec55db1cb67e0d34d70caa70926a6d3b62099c7bc016aba4f6d")
      public fun rollingDate(rollingDate: RollingDateConfigurationProperty.Builder.() -> Unit)

      /**
       * @param staticValue The static input value.
       */
      public fun staticValue(staticValue: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeFilterValueProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeFilterValueProperty.builder()

      /**
       * @param parameter The parameter type input value.
       */
      override fun parameter(parameter: String) {
        cdkBuilder.parameter(parameter)
      }

      /**
       * @param rollingDate The rolling date input value.
       */
      override fun rollingDate(rollingDate: IResolvable) {
        cdkBuilder.rollingDate(rollingDate.let(IResolvable::unwrap))
      }

      /**
       * @param rollingDate The rolling date input value.
       */
      override fun rollingDate(rollingDate: RollingDateConfigurationProperty) {
        cdkBuilder.rollingDate(rollingDate.let(RollingDateConfigurationProperty::unwrap))
      }

      /**
       * @param rollingDate The rolling date input value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("af1b8722c6310ec55db1cb67e0d34d70caa70926a6d3b62099c7bc016aba4f6d")
      override fun rollingDate(rollingDate: RollingDateConfigurationProperty.Builder.() -> Unit):
          Unit = rollingDate(RollingDateConfigurationProperty(rollingDate))

      /**
       * @param staticValue The static input value.
       */
      override fun staticValue(staticValue: String) {
        cdkBuilder.staticValue(staticValue)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeFilterValueProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeFilterValueProperty,
    ) : TimeRangeFilterValueProperty {
      /**
       * The parameter type input value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefiltervalue.html#cfn-quicksight-analysis-timerangefiltervalue-parameter)
       */
      override fun parameter(): String? = unwrap(this).getParameter()

      /**
       * The rolling date input value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefiltervalue.html#cfn-quicksight-analysis-timerangefiltervalue-rollingdate)
       */
      override fun rollingDate(): Any? = unwrap(this).getRollingDate()

      /**
       * The static input value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefiltervalue.html#cfn-quicksight-analysis-timerangefiltervalue-staticvalue)
       */
      override fun staticValue(): String? = unwrap(this).getStaticValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TimeRangeFilterValueProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeFilterValueProperty):
          TimeRangeFilterValueProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TimeRangeFilterValueProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeRangeFilterValueProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ParameterListControlProperty {
    /**
     * The values that are displayed in a control can be configured to only show values that are
     * valid based on what's selected in other controls.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-cascadingcontrolconfiguration)
     */
    public fun cascadingControlConfiguration(): Any? =
        unwrap(this).getCascadingControlConfiguration()

    /**
     * The display options of a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The ID of the `ParameterListControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-parametercontrolid)
     */
    public fun parameterControlId(): String

    /**
     * A list of selectable values that are used in a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-selectablevalues)
     */
    public fun selectableValues(): Any? = unwrap(this).getSelectableValues()

    /**
     * The source parameter name of the `ParameterListControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-sourceparametername)
     */
    public fun sourceParameterName(): String

    /**
     * The title of the `ParameterListControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-title)
     */
    public fun title(): String

    /**
     * The type of `ParameterListControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-type)
     */
    public fun type(): String? = unwrap(this).getType()

    /**
     * A builder for [ParameterListControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      public fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable)

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty)

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eab124de035afd0659560b09f5a64f9ff6348ea065a5e16cd60a1d71e50519b1")
      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: ListControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a6bb006bf672cea558c174b99a4424c55a7b299e4e54275e8b8fb420058ec463")
      public
          fun displayOptions(displayOptions: ListControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param parameterControlId The ID of the `ParameterListControl` . 
       */
      public fun parameterControlId(parameterControlId: String)

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      public fun selectableValues(selectableValues: IResolvable)

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      public fun selectableValues(selectableValues: ParameterSelectableValuesProperty)

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0d4e47c84d71fdb7817545e874aac9dcde89a5d38914ad287041ed7bde45ffc7")
      public
          fun selectableValues(selectableValues: ParameterSelectableValuesProperty.Builder.() -> Unit)

      /**
       * @param sourceParameterName The source parameter name of the `ParameterListControl` . 
       */
      public fun sourceParameterName(sourceParameterName: String)

      /**
       * @param title The title of the `ParameterListControl` . 
       */
      public fun title(title: String)

      /**
       * @param type The type of `ParameterListControl` .
       */
      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterListControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterListControlProperty.builder()

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      override fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(CascadingControlConfigurationProperty::unwrap))
      }

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eab124de035afd0659560b09f5a64f9ff6348ea065a5e16cd60a1d71e50519b1")
      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit):
          Unit =
          cascadingControlConfiguration(CascadingControlConfigurationProperty(cascadingControlConfiguration))

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: ListControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(ListControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a6bb006bf672cea558c174b99a4424c55a7b299e4e54275e8b8fb420058ec463")
      override
          fun displayOptions(displayOptions: ListControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(ListControlDisplayOptionsProperty(displayOptions))

      /**
       * @param parameterControlId The ID of the `ParameterListControl` . 
       */
      override fun parameterControlId(parameterControlId: String) {
        cdkBuilder.parameterControlId(parameterControlId)
      }

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      override fun selectableValues(selectableValues: IResolvable) {
        cdkBuilder.selectableValues(selectableValues.let(IResolvable::unwrap))
      }

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      override fun selectableValues(selectableValues: ParameterSelectableValuesProperty) {
        cdkBuilder.selectableValues(selectableValues.let(ParameterSelectableValuesProperty::unwrap))
      }

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0d4e47c84d71fdb7817545e874aac9dcde89a5d38914ad287041ed7bde45ffc7")
      override
          fun selectableValues(selectableValues: ParameterSelectableValuesProperty.Builder.() -> Unit):
          Unit = selectableValues(ParameterSelectableValuesProperty(selectableValues))

      /**
       * @param sourceParameterName The source parameter name of the `ParameterListControl` . 
       */
      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      /**
       * @param title The title of the `ParameterListControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      /**
       * @param type The type of `ParameterListControl` .
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterListControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterListControlProperty,
    ) : ParameterListControlProperty {
      /**
       * The values that are displayed in a control can be configured to only show values that are
       * valid based on what's selected in other controls.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-cascadingcontrolconfiguration)
       */
      override fun cascadingControlConfiguration(): Any? =
          unwrap(this).getCascadingControlConfiguration()

      /**
       * The display options of a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The ID of the `ParameterListControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-parametercontrolid)
       */
      override fun parameterControlId(): String = unwrap(this).getParameterControlId()

      /**
       * A list of selectable values that are used in a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-selectablevalues)
       */
      override fun selectableValues(): Any? = unwrap(this).getSelectableValues()

      /**
       * The source parameter name of the `ParameterListControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-sourceparametername)
       */
      override fun sourceParameterName(): String = unwrap(this).getSourceParameterName()

      /**
       * The title of the `ParameterListControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()

      /**
       * The type of `ParameterListControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-type)
       */
      override fun type(): String? = unwrap(this).getType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ParameterListControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterListControlProperty):
          ParameterListControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterListControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterListControlProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GeospatialMapStyleOptionsProperty {
    /**
     * The base map style of the geospatial map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapstyleoptions.html#cfn-quicksight-analysis-geospatialmapstyleoptions-basemapstyle)
     */
    public fun baseMapStyle(): String? = unwrap(this).getBaseMapStyle()

    /**
     * A builder for [GeospatialMapStyleOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param baseMapStyle The base map style of the geospatial map.
       */
      public fun baseMapStyle(baseMapStyle: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapStyleOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapStyleOptionsProperty.builder()

      /**
       * @param baseMapStyle The base map style of the geospatial map.
       */
      override fun baseMapStyle(baseMapStyle: String) {
        cdkBuilder.baseMapStyle(baseMapStyle)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapStyleOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapStyleOptionsProperty,
    ) : GeospatialMapStyleOptionsProperty {
      /**
       * The base map style of the geospatial map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapstyleoptions.html#cfn-quicksight-analysis-geospatialmapstyleoptions-basemapstyle)
       */
      override fun baseMapStyle(): String? = unwrap(this).getBaseMapStyle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialMapStyleOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapStyleOptionsProperty):
          GeospatialMapStyleOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialMapStyleOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapStyleOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface RadarChartFieldWellsProperty {
    /**
     * The aggregated field wells of a radar chart visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartfieldwells.html#cfn-quicksight-analysis-radarchartfieldwells-radarchartaggregatedfieldwells)
     */
    public fun radarChartAggregatedFieldWells(): Any? =
        unwrap(this).getRadarChartAggregatedFieldWells()

    /**
     * A builder for [RadarChartFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param radarChartAggregatedFieldWells The aggregated field wells of a radar chart visual.
       */
      public fun radarChartAggregatedFieldWells(radarChartAggregatedFieldWells: IResolvable)

      /**
       * @param radarChartAggregatedFieldWells The aggregated field wells of a radar chart visual.
       */
      public
          fun radarChartAggregatedFieldWells(radarChartAggregatedFieldWells: RadarChartAggregatedFieldWellsProperty)

      /**
       * @param radarChartAggregatedFieldWells The aggregated field wells of a radar chart visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6fc84350aec8f1c34af6caa51c70ea3674c32f7ea0854b7aa65ea2993dd01919")
      public
          fun radarChartAggregatedFieldWells(radarChartAggregatedFieldWells: RadarChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartFieldWellsProperty.builder()

      /**
       * @param radarChartAggregatedFieldWells The aggregated field wells of a radar chart visual.
       */
      override fun radarChartAggregatedFieldWells(radarChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.radarChartAggregatedFieldWells(radarChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param radarChartAggregatedFieldWells The aggregated field wells of a radar chart visual.
       */
      override
          fun radarChartAggregatedFieldWells(radarChartAggregatedFieldWells: RadarChartAggregatedFieldWellsProperty) {
        cdkBuilder.radarChartAggregatedFieldWells(radarChartAggregatedFieldWells.let(RadarChartAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param radarChartAggregatedFieldWells The aggregated field wells of a radar chart visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6fc84350aec8f1c34af6caa51c70ea3674c32f7ea0854b7aa65ea2993dd01919")
      override
          fun radarChartAggregatedFieldWells(radarChartAggregatedFieldWells: RadarChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          radarChartAggregatedFieldWells(RadarChartAggregatedFieldWellsProperty(radarChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartFieldWellsProperty,
    ) : RadarChartFieldWellsProperty {
      /**
       * The aggregated field wells of a radar chart visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartfieldwells.html#cfn-quicksight-analysis-radarchartfieldwells-radarchartaggregatedfieldwells)
       */
      override fun radarChartAggregatedFieldWells(): Any? =
          unwrap(this).getRadarChartAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): RadarChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartFieldWellsProperty):
          RadarChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableFieldOptionProperty {
    /**
     * The custom label for a table field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-customlabel)
     */
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    /**
     * The field ID for a table field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-fieldid)
     */
    public fun fieldId(): String

    /**
     * The URL configuration for a table field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-urlstyling)
     */
    public fun urlStyling(): Any? = unwrap(this).getUrlStyling()

    /**
     * The visibility of a table field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * The width for a table field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-width)
     */
    public fun width(): String? = unwrap(this).getWidth()

    /**
     * A builder for [TableFieldOptionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customLabel The custom label for a table field.
       */
      public fun customLabel(customLabel: String)

      /**
       * @param fieldId The field ID for a table field. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param urlStyling The URL configuration for a table field.
       */
      public fun urlStyling(urlStyling: IResolvable)

      /**
       * @param urlStyling The URL configuration for a table field.
       */
      public fun urlStyling(urlStyling: TableFieldURLConfigurationProperty)

      /**
       * @param urlStyling The URL configuration for a table field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("805350aa0775d99508106dff93edeecc408ba4dbdb98670151802e46cddc95de")
      public fun urlStyling(urlStyling: TableFieldURLConfigurationProperty.Builder.() -> Unit)

      /**
       * @param visibility The visibility of a table field.
       */
      public fun visibility(visibility: String)

      /**
       * @param width The width for a table field.
       */
      public fun width(width: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldOptionProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldOptionProperty.builder()

      /**
       * @param customLabel The custom label for a table field.
       */
      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      /**
       * @param fieldId The field ID for a table field. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param urlStyling The URL configuration for a table field.
       */
      override fun urlStyling(urlStyling: IResolvable) {
        cdkBuilder.urlStyling(urlStyling.let(IResolvable::unwrap))
      }

      /**
       * @param urlStyling The URL configuration for a table field.
       */
      override fun urlStyling(urlStyling: TableFieldURLConfigurationProperty) {
        cdkBuilder.urlStyling(urlStyling.let(TableFieldURLConfigurationProperty::unwrap))
      }

      /**
       * @param urlStyling The URL configuration for a table field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("805350aa0775d99508106dff93edeecc408ba4dbdb98670151802e46cddc95de")
      override fun urlStyling(urlStyling: TableFieldURLConfigurationProperty.Builder.() -> Unit):
          Unit = urlStyling(TableFieldURLConfigurationProperty(urlStyling))

      /**
       * @param visibility The visibility of a table field.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      /**
       * @param width The width for a table field.
       */
      override fun width(width: String) {
        cdkBuilder.width(width)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldOptionProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldOptionProperty,
    ) : TableFieldOptionProperty {
      /**
       * The custom label for a table field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-customlabel)
       */
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      /**
       * The field ID for a table field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The URL configuration for a table field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-urlstyling)
       */
      override fun urlStyling(): Any? = unwrap(this).getUrlStyling()

      /**
       * The visibility of a table field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()

      /**
       * The width for a table field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-width)
       */
      override fun width(): String? = unwrap(this).getWidth()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TableFieldOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldOptionProperty):
          TableFieldOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldOptionProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface NumericalDimensionFieldProperty {
    /**
     * The column that is used in the `NumericalDimensionField` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html#cfn-quicksight-analysis-numericaldimensionfield-column)
     */
    public fun column(): Any

    /**
     * The custom field ID.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html#cfn-quicksight-analysis-numericaldimensionfield-fieldid)
     */
    public fun fieldId(): String

    /**
     * The format configuration of the field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html#cfn-quicksight-analysis-numericaldimensionfield-formatconfiguration)
     */
    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    /**
     * The custom hierarchy ID.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html#cfn-quicksight-analysis-numericaldimensionfield-hierarchyid)
     */
    public fun hierarchyId(): String? = unwrap(this).getHierarchyId()

    /**
     * A builder for [NumericalDimensionFieldProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param column The column that is used in the `NumericalDimensionField` . 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that is used in the `NumericalDimensionField` . 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that is used in the `NumericalDimensionField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("09604300e067aee733cfa4215315d268ac3c80f8f151efeb16d82ca41fab1bae")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param fieldId The custom field ID. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: IResolvable)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0abcd611ed451c375086fc4ace37da122c534a0523af5b5f6e1e2485fee82375")
      public
          fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param hierarchyId The custom hierarchy ID.
       */
      public fun hierarchyId(hierarchyId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalDimensionFieldProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalDimensionFieldProperty.builder()

      /**
       * @param column The column that is used in the `NumericalDimensionField` . 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that is used in the `NumericalDimensionField` . 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that is used in the `NumericalDimensionField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("09604300e067aee733cfa4215315d268ac3c80f8f151efeb16d82ca41fab1bae")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param fieldId The custom field ID. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(NumberFormatConfigurationProperty::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0abcd611ed451c375086fc4ace37da122c534a0523af5b5f6e1e2485fee82375")
      override
          fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(NumberFormatConfigurationProperty(formatConfiguration))

      /**
       * @param hierarchyId The custom hierarchy ID.
       */
      override fun hierarchyId(hierarchyId: String) {
        cdkBuilder.hierarchyId(hierarchyId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalDimensionFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalDimensionFieldProperty,
    ) : NumericalDimensionFieldProperty {
      /**
       * The column that is used in the `NumericalDimensionField` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html#cfn-quicksight-analysis-numericaldimensionfield-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The custom field ID.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html#cfn-quicksight-analysis-numericaldimensionfield-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The format configuration of the field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html#cfn-quicksight-analysis-numericaldimensionfield-formatconfiguration)
       */
      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

      /**
       * The custom hierarchy ID.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html#cfn-quicksight-analysis-numericaldimensionfield-hierarchyid)
       */
      override fun hierarchyId(): String? = unwrap(this).getHierarchyId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): NumericalDimensionFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalDimensionFieldProperty):
          NumericalDimensionFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericalDimensionFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalDimensionFieldProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface WordCloudSortConfigurationProperty {
    /**
     * The limit on the number of groups that are displayed in a word cloud.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudsortconfiguration.html#cfn-quicksight-analysis-wordcloudsortconfiguration-categoryitemslimit)
     */
    public fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

    /**
     * The sort configuration of group by fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudsortconfiguration.html#cfn-quicksight-analysis-wordcloudsortconfiguration-categorysort)
     */
    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    /**
     * A builder for [WordCloudSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryItemsLimit The limit on the number of groups that are displayed in a word
       * cloud.
       */
      public fun categoryItemsLimit(categoryItemsLimit: IResolvable)

      /**
       * @param categoryItemsLimit The limit on the number of groups that are displayed in a word
       * cloud.
       */
      public fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty)

      /**
       * @param categoryItemsLimit The limit on the number of groups that are displayed in a word
       * cloud.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ce0dc8cfa7def4680cfbba4934bb4bdb44dfe7f921db3e0ef416d577a174e478")
      public
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param categorySort The sort configuration of group by fields.
       */
      public fun categorySort(categorySort: IResolvable)

      /**
       * @param categorySort The sort configuration of group by fields.
       */
      public fun categorySort(categorySort: List<Any>)

      /**
       * @param categorySort The sort configuration of group by fields.
       */
      public fun categorySort(vararg categorySort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudSortConfigurationProperty.builder()

      /**
       * @param categoryItemsLimit The limit on the number of groups that are displayed in a word
       * cloud.
       */
      override fun categoryItemsLimit(categoryItemsLimit: IResolvable) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(IResolvable::unwrap))
      }

      /**
       * @param categoryItemsLimit The limit on the number of groups that are displayed in a word
       * cloud.
       */
      override fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param categoryItemsLimit The limit on the number of groups that are displayed in a word
       * cloud.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ce0dc8cfa7def4680cfbba4934bb4bdb44dfe7f921db3e0ef416d577a174e478")
      override
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = categoryItemsLimit(ItemsLimitConfigurationProperty(categoryItemsLimit))

      /**
       * @param categorySort The sort configuration of group by fields.
       */
      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      /**
       * @param categorySort The sort configuration of group by fields.
       */
      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      /**
       * @param categorySort The sort configuration of group by fields.
       */
      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudSortConfigurationProperty,
    ) : WordCloudSortConfigurationProperty {
      /**
       * The limit on the number of groups that are displayed in a word cloud.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudsortconfiguration.html#cfn-quicksight-analysis-wordcloudsortconfiguration-categoryitemslimit)
       */
      override fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

      /**
       * The sort configuration of group by fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudsortconfiguration.html#cfn-quicksight-analysis-wordcloudsortconfiguration-categorysort)
       */
      override fun categorySort(): Any? = unwrap(this).getCategorySort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          WordCloudSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudSortConfigurationProperty):
          WordCloudSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WordCloudSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudSortConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableCellImageSizingConfigurationProperty {
    /**
     * The cell scaling configuration of the sizing options for the table image configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellimagesizingconfiguration.html#cfn-quicksight-analysis-tablecellimagesizingconfiguration-tablecellimagescalingconfiguration)
     */
    public fun tableCellImageScalingConfiguration(): String? =
        unwrap(this).getTableCellImageScalingConfiguration()

    /**
     * A builder for [TableCellImageSizingConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param tableCellImageScalingConfiguration The cell scaling configuration of the sizing
       * options for the table image configuration.
       */
      public fun tableCellImageScalingConfiguration(tableCellImageScalingConfiguration: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellImageSizingConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellImageSizingConfigurationProperty.builder()

      /**
       * @param tableCellImageScalingConfiguration The cell scaling configuration of the sizing
       * options for the table image configuration.
       */
      override fun tableCellImageScalingConfiguration(tableCellImageScalingConfiguration: String) {
        cdkBuilder.tableCellImageScalingConfiguration(tableCellImageScalingConfiguration)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellImageSizingConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellImageSizingConfigurationProperty,
    ) : TableCellImageSizingConfigurationProperty {
      /**
       * The cell scaling configuration of the sizing options for the table image configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellimagesizingconfiguration.html#cfn-quicksight-analysis-tablecellimagesizingconfiguration-tablecellimagescalingconfiguration)
       */
      override fun tableCellImageScalingConfiguration(): String? =
          unwrap(this).getTableCellImageScalingConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableCellImageSizingConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellImageSizingConfigurationProperty):
          TableCellImageSizingConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableCellImageSizingConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellImageSizingConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilledMapAggregatedFieldWellsProperty {
    /**
     * The aggregated location field well of the filled map.
     *
     * Values are grouped by location fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapaggregatedfieldwells.html#cfn-quicksight-analysis-filledmapaggregatedfieldwells-geospatial)
     */
    public fun geospatial(): Any? = unwrap(this).getGeospatial()

    /**
     * The aggregated color field well of a filled map.
     *
     * Values are aggregated based on location fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapaggregatedfieldwells.html#cfn-quicksight-analysis-filledmapaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [FilledMapAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param geospatial The aggregated location field well of the filled map.
       * Values are grouped by location fields.
       */
      public fun geospatial(geospatial: IResolvable)

      /**
       * @param geospatial The aggregated location field well of the filled map.
       * Values are grouped by location fields.
       */
      public fun geospatial(geospatial: List<Any>)

      /**
       * @param geospatial The aggregated location field well of the filled map.
       * Values are grouped by location fields.
       */
      public fun geospatial(vararg geospatial: Any)

      /**
       * @param values The aggregated color field well of a filled map.
       * Values are aggregated based on location fields.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The aggregated color field well of a filled map.
       * Values are aggregated based on location fields.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The aggregated color field well of a filled map.
       * Values are aggregated based on location fields.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapAggregatedFieldWellsProperty.builder()

      /**
       * @param geospatial The aggregated location field well of the filled map.
       * Values are grouped by location fields.
       */
      override fun geospatial(geospatial: IResolvable) {
        cdkBuilder.geospatial(geospatial.let(IResolvable::unwrap))
      }

      /**
       * @param geospatial The aggregated location field well of the filled map.
       * Values are grouped by location fields.
       */
      override fun geospatial(geospatial: List<Any>) {
        cdkBuilder.geospatial(geospatial)
      }

      /**
       * @param geospatial The aggregated location field well of the filled map.
       * Values are grouped by location fields.
       */
      override fun geospatial(vararg geospatial: Any): Unit = geospatial(geospatial.toList())

      /**
       * @param values The aggregated color field well of a filled map.
       * Values are aggregated based on location fields.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The aggregated color field well of a filled map.
       * Values are aggregated based on location fields.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The aggregated color field well of a filled map.
       * Values are aggregated based on location fields.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapAggregatedFieldWellsProperty,
    ) : FilledMapAggregatedFieldWellsProperty {
      /**
       * The aggregated location field well of the filled map.
       *
       * Values are grouped by location fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapaggregatedfieldwells.html#cfn-quicksight-analysis-filledmapaggregatedfieldwells-geospatial)
       */
      override fun geospatial(): Any? = unwrap(this).getGeospatial()

      /**
       * The aggregated color field well of a filled map.
       *
       * Values are aggregated based on location fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapaggregatedfieldwells.html#cfn-quicksight-analysis-filledmapaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilledMapAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapAggregatedFieldWellsProperty):
          FilledMapAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface HistogramAggregatedFieldWellsProperty {
    /**
     * The value field wells of a histogram.
     *
     * Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramaggregatedfieldwells.html#cfn-quicksight-analysis-histogramaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [HistogramAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param values The value field wells of a histogram.
       * Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
       */
      public fun values(values: IResolvable)

      /**
       * @param values The value field wells of a histogram.
       * Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
       */
      public fun values(values: List<Any>)

      /**
       * @param values The value field wells of a histogram.
       * Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramAggregatedFieldWellsProperty.builder()

      /**
       * @param values The value field wells of a histogram.
       * Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The value field wells of a histogram.
       * Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The value field wells of a histogram.
       * Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramAggregatedFieldWellsProperty,
    ) : HistogramAggregatedFieldWellsProperty {
      /**
       * The value field wells of a histogram.
       *
       * Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramaggregatedfieldwells.html#cfn-quicksight-analysis-histogramaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          HistogramAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramAggregatedFieldWellsProperty):
          HistogramAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HistogramAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface VisualProperty {
    /**
     * A bar chart.
     *
     * For more information, see [Using bar
     * charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-barchartvisual)
     */
    public fun barChartVisual(): Any? = unwrap(this).getBarChartVisual()

    /**
     * A box plot.
     *
     * For more information, see [Using box
     * plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-boxplotvisual)
     */
    public fun boxPlotVisual(): Any? = unwrap(this).getBoxPlotVisual()

    /**
     * A combo chart.
     *
     * For more information, see [Using combo
     * charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-combochartvisual)
     */
    public fun comboChartVisual(): Any? = unwrap(this).getComboChartVisual()

    /**
     * A visual that contains custom content.
     *
     * For more information, see [Using custom visual
     * content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-customcontentvisual)
     */
    public fun customContentVisual(): Any? = unwrap(this).getCustomContentVisual()

    /**
     * An empty visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-emptyvisual)
     */
    public fun emptyVisual(): Any? = unwrap(this).getEmptyVisual()

    /**
     * A filled map.
     *
     * For more information, see [Creating filled
     * maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-filledmapvisual)
     */
    public fun filledMapVisual(): Any? = unwrap(this).getFilledMapVisual()

    /**
     * A funnel chart.
     *
     * For more information, see [Using funnel
     * charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-funnelchartvisual)
     */
    public fun funnelChartVisual(): Any? = unwrap(this).getFunnelChartVisual()

    /**
     * A gauge chart.
     *
     * For more information, see [Using gauge
     * charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-gaugechartvisual)
     */
    public fun gaugeChartVisual(): Any? = unwrap(this).getGaugeChartVisual()

    /**
     * A geospatial map or a points on map visual.
     *
     * For more information, see [Creating point
     * maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-geospatialmapvisual)
     */
    public fun geospatialMapVisual(): Any? = unwrap(this).getGeospatialMapVisual()

    /**
     * A heat map.
     *
     * For more information, see [Using heat
     * maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-heatmapvisual)
     */
    public fun heatMapVisual(): Any? = unwrap(this).getHeatMapVisual()

    /**
     * A histogram.
     *
     * For more information, see [Using
     * histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-histogramvisual)
     */
    public fun histogramVisual(): Any? = unwrap(this).getHistogramVisual()

    /**
     * An insight visual.
     *
     * For more information, see [Working with
     * insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-insightvisual)
     */
    public fun insightVisual(): Any? = unwrap(this).getInsightVisual()

    /**
     * A key performance indicator (KPI).
     *
     * For more information, see [Using
     * KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight
     * User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-kpivisual)
     */
    public fun kpiVisual(): Any? = unwrap(this).getKpiVisual()

    /**
     * A line chart.
     *
     * For more information, see [Using line
     * charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-linechartvisual)
     */
    public fun lineChartVisual(): Any? = unwrap(this).getLineChartVisual()

    /**
     * A pie or donut chart.
     *
     * For more information, see [Using pie
     * charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-piechartvisual)
     */
    public fun pieChartVisual(): Any? = unwrap(this).getPieChartVisual()

    /**
     * A pivot table.
     *
     * For more information, see [Using pivot
     * tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-pivottablevisual)
     */
    public fun pivotTableVisual(): Any? = unwrap(this).getPivotTableVisual()

    /**
     * A radar chart visual.
     *
     * For more information, see [Using radar
     * charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-radarchartvisual)
     */
    public fun radarChartVisual(): Any? = unwrap(this).getRadarChartVisual()

    /**
     * A sankey diagram.
     *
     * For more information, see [Using Sankey
     * diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-sankeydiagramvisual)
     */
    public fun sankeyDiagramVisual(): Any? = unwrap(this).getSankeyDiagramVisual()

    /**
     * A scatter plot.
     *
     * For more information, see [Using scatter
     * plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-scatterplotvisual)
     */
    public fun scatterPlotVisual(): Any? = unwrap(this).getScatterPlotVisual()

    /**
     * A table visual.
     *
     * For more information, see [Using tables as
     * visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-tablevisual)
     */
    public fun tableVisual(): Any? = unwrap(this).getTableVisual()

    /**
     * A tree map.
     *
     * For more information, see [Using tree
     * maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-treemapvisual)
     */
    public fun treeMapVisual(): Any? = unwrap(this).getTreeMapVisual()

    /**
     * A waterfall chart.
     *
     * For more information, see [Using waterfall
     * charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-waterfallvisual)
     */
    public fun waterfallVisual(): Any? = unwrap(this).getWaterfallVisual()

    /**
     * A word cloud.
     *
     * For more information, see [Using word
     * clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon
     * QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-wordcloudvisual)
     */
    public fun wordCloudVisual(): Any? = unwrap(this).getWordCloudVisual()

    /**
     * A builder for [VisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param barChartVisual A bar chart.
       * For more information, see [Using bar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun barChartVisual(barChartVisual: IResolvable)

      /**
       * @param barChartVisual A bar chart.
       * For more information, see [Using bar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun barChartVisual(barChartVisual: BarChartVisualProperty)

      /**
       * @param barChartVisual A bar chart.
       * For more information, see [Using bar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("df29a60f73bc3547b6d1688665e1829e5843fcc76bd8005c9d09591e73bf1f33")
      public fun barChartVisual(barChartVisual: BarChartVisualProperty.Builder.() -> Unit)

      /**
       * @param boxPlotVisual A box plot.
       * For more information, see [Using box
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun boxPlotVisual(boxPlotVisual: IResolvable)

      /**
       * @param boxPlotVisual A box plot.
       * For more information, see [Using box
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun boxPlotVisual(boxPlotVisual: BoxPlotVisualProperty)

      /**
       * @param boxPlotVisual A box plot.
       * For more information, see [Using box
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9348438aa25e6c1038b82dd2af0cc14f6b0808d8c4b5b7df5eb91ecb93678a75")
      public fun boxPlotVisual(boxPlotVisual: BoxPlotVisualProperty.Builder.() -> Unit)

      /**
       * @param comboChartVisual A combo chart.
       * For more information, see [Using combo
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun comboChartVisual(comboChartVisual: IResolvable)

      /**
       * @param comboChartVisual A combo chart.
       * For more information, see [Using combo
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun comboChartVisual(comboChartVisual: ComboChartVisualProperty)

      /**
       * @param comboChartVisual A combo chart.
       * For more information, see [Using combo
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d360e2f8e74864bb993cb08f0c7f7157c498a48d13ebd5b86860381420f54d90")
      public fun comboChartVisual(comboChartVisual: ComboChartVisualProperty.Builder.() -> Unit)

      /**
       * @param customContentVisual A visual that contains custom content.
       * For more information, see [Using custom visual
       * content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun customContentVisual(customContentVisual: IResolvable)

      /**
       * @param customContentVisual A visual that contains custom content.
       * For more information, see [Using custom visual
       * content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun customContentVisual(customContentVisual: CustomContentVisualProperty)

      /**
       * @param customContentVisual A visual that contains custom content.
       * For more information, see [Using custom visual
       * content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("29c69d8df3af711b6c966601e3945392d7d23932d86dce7322f95cef2c344a01")
      public
          fun customContentVisual(customContentVisual: CustomContentVisualProperty.Builder.() -> Unit)

      /**
       * @param emptyVisual An empty visual.
       */
      public fun emptyVisual(emptyVisual: IResolvable)

      /**
       * @param emptyVisual An empty visual.
       */
      public fun emptyVisual(emptyVisual: EmptyVisualProperty)

      /**
       * @param emptyVisual An empty visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b95d9c44823405356241c1f18e4c0c0004ff3d260282a6e5d7c581bdec1bb3a")
      public fun emptyVisual(emptyVisual: EmptyVisualProperty.Builder.() -> Unit)

      /**
       * @param filledMapVisual A filled map.
       * For more information, see [Creating filled
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun filledMapVisual(filledMapVisual: IResolvable)

      /**
       * @param filledMapVisual A filled map.
       * For more information, see [Creating filled
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun filledMapVisual(filledMapVisual: FilledMapVisualProperty)

      /**
       * @param filledMapVisual A filled map.
       * For more information, see [Creating filled
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bcc0b012ef4e55560aa85fac469173b2187fe822a67d4d26e05ac0743d95db12")
      public fun filledMapVisual(filledMapVisual: FilledMapVisualProperty.Builder.() -> Unit)

      /**
       * @param funnelChartVisual A funnel chart.
       * For more information, see [Using funnel
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun funnelChartVisual(funnelChartVisual: IResolvable)

      /**
       * @param funnelChartVisual A funnel chart.
       * For more information, see [Using funnel
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun funnelChartVisual(funnelChartVisual: FunnelChartVisualProperty)

      /**
       * @param funnelChartVisual A funnel chart.
       * For more information, see [Using funnel
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ff34bdc27858461b7e680da029d3449b388acf570ad74b5719d5798a9834cf16")
      public fun funnelChartVisual(funnelChartVisual: FunnelChartVisualProperty.Builder.() -> Unit)

      /**
       * @param gaugeChartVisual A gauge chart.
       * For more information, see [Using gauge
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun gaugeChartVisual(gaugeChartVisual: IResolvable)

      /**
       * @param gaugeChartVisual A gauge chart.
       * For more information, see [Using gauge
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun gaugeChartVisual(gaugeChartVisual: GaugeChartVisualProperty)

      /**
       * @param gaugeChartVisual A gauge chart.
       * For more information, see [Using gauge
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("586115d9f9fccd6d7a185e418b10d95151841d29b1178e157943955520213610")
      public fun gaugeChartVisual(gaugeChartVisual: GaugeChartVisualProperty.Builder.() -> Unit)

      /**
       * @param geospatialMapVisual A geospatial map or a points on map visual.
       * For more information, see [Creating point
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun geospatialMapVisual(geospatialMapVisual: IResolvable)

      /**
       * @param geospatialMapVisual A geospatial map or a points on map visual.
       * For more information, see [Creating point
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun geospatialMapVisual(geospatialMapVisual: GeospatialMapVisualProperty)

      /**
       * @param geospatialMapVisual A geospatial map or a points on map visual.
       * For more information, see [Creating point
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7bbc33007285c8b2361e21128f7b12fcd144ae3268e6ee2b5652ee99a85ca848")
      public
          fun geospatialMapVisual(geospatialMapVisual: GeospatialMapVisualProperty.Builder.() -> Unit)

      /**
       * @param heatMapVisual A heat map.
       * For more information, see [Using heat
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun heatMapVisual(heatMapVisual: IResolvable)

      /**
       * @param heatMapVisual A heat map.
       * For more information, see [Using heat
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun heatMapVisual(heatMapVisual: HeatMapVisualProperty)

      /**
       * @param heatMapVisual A heat map.
       * For more information, see [Using heat
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("259aa2a004c55eee2646bed8494f14ff77a7ea06fd22df7de6d4fc1d89c32b5a")
      public fun heatMapVisual(heatMapVisual: HeatMapVisualProperty.Builder.() -> Unit)

      /**
       * @param histogramVisual A histogram.
       * For more information, see [Using
       * histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun histogramVisual(histogramVisual: IResolvable)

      /**
       * @param histogramVisual A histogram.
       * For more information, see [Using
       * histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun histogramVisual(histogramVisual: HistogramVisualProperty)

      /**
       * @param histogramVisual A histogram.
       * For more information, see [Using
       * histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the
       * *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("febdb9a04d6ef174bc189cecc937245bbc54d916b967eb688642e1588c07ecb9")
      public fun histogramVisual(histogramVisual: HistogramVisualProperty.Builder.() -> Unit)

      /**
       * @param insightVisual An insight visual.
       * For more information, see [Working with
       * insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in
       * the *Amazon QuickSight User Guide* .
       */
      public fun insightVisual(insightVisual: IResolvable)

      /**
       * @param insightVisual An insight visual.
       * For more information, see [Working with
       * insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in
       * the *Amazon QuickSight User Guide* .
       */
      public fun insightVisual(insightVisual: InsightVisualProperty)

      /**
       * @param insightVisual An insight visual.
       * For more information, see [Working with
       * insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in
       * the *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7d4fbfa5dd906d2b24c3447265a85d98dda812cdf88d344a15abd35ff6a31b46")
      public fun insightVisual(insightVisual: InsightVisualProperty.Builder.() -> Unit)

      /**
       * @param kpiVisual A key performance indicator (KPI).
       * For more information, see [Using
       * KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight
       * User Guide* .
       */
      public fun kpiVisual(kpiVisual: IResolvable)

      /**
       * @param kpiVisual A key performance indicator (KPI).
       * For more information, see [Using
       * KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight
       * User Guide* .
       */
      public fun kpiVisual(kpiVisual: KPIVisualProperty)

      /**
       * @param kpiVisual A key performance indicator (KPI).
       * For more information, see [Using
       * KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight
       * User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("20a69528d9b4e50bea71058a0180f07944694fa1ac45dbc5d6bc9b17194bdb25")
      public fun kpiVisual(kpiVisual: KPIVisualProperty.Builder.() -> Unit)

      /**
       * @param lineChartVisual A line chart.
       * For more information, see [Using line
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun lineChartVisual(lineChartVisual: IResolvable)

      /**
       * @param lineChartVisual A line chart.
       * For more information, see [Using line
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun lineChartVisual(lineChartVisual: LineChartVisualProperty)

      /**
       * @param lineChartVisual A line chart.
       * For more information, see [Using line
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8e6e82d8d4383424123777af7433ca2a3f41ba5cc79244b5777ba694d49f3294")
      public fun lineChartVisual(lineChartVisual: LineChartVisualProperty.Builder.() -> Unit)

      /**
       * @param pieChartVisual A pie or donut chart.
       * For more information, see [Using pie
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun pieChartVisual(pieChartVisual: IResolvable)

      /**
       * @param pieChartVisual A pie or donut chart.
       * For more information, see [Using pie
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun pieChartVisual(pieChartVisual: PieChartVisualProperty)

      /**
       * @param pieChartVisual A pie or donut chart.
       * For more information, see [Using pie
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0d6d6c6fcf31963406160da9c9e04bb8cfa8badbeff97efc5fcfeb6151b7674b")
      public fun pieChartVisual(pieChartVisual: PieChartVisualProperty.Builder.() -> Unit)

      /**
       * @param pivotTableVisual A pivot table.
       * For more information, see [Using pivot
       * tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun pivotTableVisual(pivotTableVisual: IResolvable)

      /**
       * @param pivotTableVisual A pivot table.
       * For more information, see [Using pivot
       * tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun pivotTableVisual(pivotTableVisual: PivotTableVisualProperty)

      /**
       * @param pivotTableVisual A pivot table.
       * For more information, see [Using pivot
       * tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd882b0a6cb351d2265d6fea8997b2c5a9f0c8d5d9115dd8987cd10db0cc037d")
      public fun pivotTableVisual(pivotTableVisual: PivotTableVisualProperty.Builder.() -> Unit)

      /**
       * @param radarChartVisual A radar chart visual.
       * For more information, see [Using radar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun radarChartVisual(radarChartVisual: IResolvable)

      /**
       * @param radarChartVisual A radar chart visual.
       * For more information, see [Using radar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun radarChartVisual(radarChartVisual: RadarChartVisualProperty)

      /**
       * @param radarChartVisual A radar chart visual.
       * For more information, see [Using radar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0de47e899be5a3985e6fe321c6025ebd12efbe52b1ae7380e8d300e6e64f7158")
      public fun radarChartVisual(radarChartVisual: RadarChartVisualProperty.Builder.() -> Unit)

      /**
       * @param sankeyDiagramVisual A sankey diagram.
       * For more information, see [Using Sankey
       * diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun sankeyDiagramVisual(sankeyDiagramVisual: IResolvable)

      /**
       * @param sankeyDiagramVisual A sankey diagram.
       * For more information, see [Using Sankey
       * diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun sankeyDiagramVisual(sankeyDiagramVisual: SankeyDiagramVisualProperty)

      /**
       * @param sankeyDiagramVisual A sankey diagram.
       * For more information, see [Using Sankey
       * diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the
       * *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e45cc101a07a5c14ce90294eba606e8fee364cced0f39e3ee382c4cb0102a89f")
      public
          fun sankeyDiagramVisual(sankeyDiagramVisual: SankeyDiagramVisualProperty.Builder.() -> Unit)

      /**
       * @param scatterPlotVisual A scatter plot.
       * For more information, see [Using scatter
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun scatterPlotVisual(scatterPlotVisual: IResolvable)

      /**
       * @param scatterPlotVisual A scatter plot.
       * For more information, see [Using scatter
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun scatterPlotVisual(scatterPlotVisual: ScatterPlotVisualProperty)

      /**
       * @param scatterPlotVisual A scatter plot.
       * For more information, see [Using scatter
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9b38d9e489ce4619f9d9aaacfcf082b7047a49f709168d5d696d16e2c59210b9")
      public fun scatterPlotVisual(scatterPlotVisual: ScatterPlotVisualProperty.Builder.() -> Unit)

      /**
       * @param tableVisual A table visual.
       * For more information, see [Using tables as
       * visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun tableVisual(tableVisual: IResolvable)

      /**
       * @param tableVisual A table visual.
       * For more information, see [Using tables as
       * visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun tableVisual(tableVisual: TableVisualProperty)

      /**
       * @param tableVisual A table visual.
       * For more information, see [Using tables as
       * visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("993425af1876d91f5299bcbf38da3ff46606981ac0b697597f75095add2bee0e")
      public fun tableVisual(tableVisual: TableVisualProperty.Builder.() -> Unit)

      /**
       * @param treeMapVisual A tree map.
       * For more information, see [Using tree
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun treeMapVisual(treeMapVisual: IResolvable)

      /**
       * @param treeMapVisual A tree map.
       * For more information, see [Using tree
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun treeMapVisual(treeMapVisual: TreeMapVisualProperty)

      /**
       * @param treeMapVisual A tree map.
       * For more information, see [Using tree
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3bd0f8298345806559832167cd2cdc496a3cae3e847212ac795e7ff711be59e6")
      public fun treeMapVisual(treeMapVisual: TreeMapVisualProperty.Builder.() -> Unit)

      /**
       * @param waterfallVisual A waterfall chart.
       * For more information, see [Using waterfall
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun waterfallVisual(waterfallVisual: IResolvable)

      /**
       * @param waterfallVisual A waterfall chart.
       * For more information, see [Using waterfall
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun waterfallVisual(waterfallVisual: WaterfallVisualProperty)

      /**
       * @param waterfallVisual A waterfall chart.
       * For more information, see [Using waterfall
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the
       * *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1bf3481903e4c9d70afaa63f225ff553274c2d0a8bfdf7108c57d30b235e04db")
      public fun waterfallVisual(waterfallVisual: WaterfallVisualProperty.Builder.() -> Unit)

      /**
       * @param wordCloudVisual A word cloud.
       * For more information, see [Using word
       * clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun wordCloudVisual(wordCloudVisual: IResolvable)

      /**
       * @param wordCloudVisual A word cloud.
       * For more information, see [Using word
       * clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon
       * QuickSight User Guide* .
       */
      public fun wordCloudVisual(wordCloudVisual: WordCloudVisualProperty)

      /**
       * @param wordCloudVisual A word cloud.
       * For more information, see [Using word
       * clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4637f47d72cc4020ff4056d974dc3c942afe0d8b17016322075dd78c878fc923")
      public fun wordCloudVisual(wordCloudVisual: WordCloudVisualProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualProperty.builder()

      /**
       * @param barChartVisual A bar chart.
       * For more information, see [Using bar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun barChartVisual(barChartVisual: IResolvable) {
        cdkBuilder.barChartVisual(barChartVisual.let(IResolvable::unwrap))
      }

      /**
       * @param barChartVisual A bar chart.
       * For more information, see [Using bar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun barChartVisual(barChartVisual: BarChartVisualProperty) {
        cdkBuilder.barChartVisual(barChartVisual.let(BarChartVisualProperty::unwrap))
      }

      /**
       * @param barChartVisual A bar chart.
       * For more information, see [Using bar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("df29a60f73bc3547b6d1688665e1829e5843fcc76bd8005c9d09591e73bf1f33")
      override fun barChartVisual(barChartVisual: BarChartVisualProperty.Builder.() -> Unit): Unit =
          barChartVisual(BarChartVisualProperty(barChartVisual))

      /**
       * @param boxPlotVisual A box plot.
       * For more information, see [Using box
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun boxPlotVisual(boxPlotVisual: IResolvable) {
        cdkBuilder.boxPlotVisual(boxPlotVisual.let(IResolvable::unwrap))
      }

      /**
       * @param boxPlotVisual A box plot.
       * For more information, see [Using box
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun boxPlotVisual(boxPlotVisual: BoxPlotVisualProperty) {
        cdkBuilder.boxPlotVisual(boxPlotVisual.let(BoxPlotVisualProperty::unwrap))
      }

      /**
       * @param boxPlotVisual A box plot.
       * For more information, see [Using box
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9348438aa25e6c1038b82dd2af0cc14f6b0808d8c4b5b7df5eb91ecb93678a75")
      override fun boxPlotVisual(boxPlotVisual: BoxPlotVisualProperty.Builder.() -> Unit): Unit =
          boxPlotVisual(BoxPlotVisualProperty(boxPlotVisual))

      /**
       * @param comboChartVisual A combo chart.
       * For more information, see [Using combo
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun comboChartVisual(comboChartVisual: IResolvable) {
        cdkBuilder.comboChartVisual(comboChartVisual.let(IResolvable::unwrap))
      }

      /**
       * @param comboChartVisual A combo chart.
       * For more information, see [Using combo
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun comboChartVisual(comboChartVisual: ComboChartVisualProperty) {
        cdkBuilder.comboChartVisual(comboChartVisual.let(ComboChartVisualProperty::unwrap))
      }

      /**
       * @param comboChartVisual A combo chart.
       * For more information, see [Using combo
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d360e2f8e74864bb993cb08f0c7f7157c498a48d13ebd5b86860381420f54d90")
      override fun comboChartVisual(comboChartVisual: ComboChartVisualProperty.Builder.() -> Unit):
          Unit = comboChartVisual(ComboChartVisualProperty(comboChartVisual))

      /**
       * @param customContentVisual A visual that contains custom content.
       * For more information, see [Using custom visual
       * content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun customContentVisual(customContentVisual: IResolvable) {
        cdkBuilder.customContentVisual(customContentVisual.let(IResolvable::unwrap))
      }

      /**
       * @param customContentVisual A visual that contains custom content.
       * For more information, see [Using custom visual
       * content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun customContentVisual(customContentVisual: CustomContentVisualProperty) {
        cdkBuilder.customContentVisual(customContentVisual.let(CustomContentVisualProperty::unwrap))
      }

      /**
       * @param customContentVisual A visual that contains custom content.
       * For more information, see [Using custom visual
       * content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("29c69d8df3af711b6c966601e3945392d7d23932d86dce7322f95cef2c344a01")
      override
          fun customContentVisual(customContentVisual: CustomContentVisualProperty.Builder.() -> Unit):
          Unit = customContentVisual(CustomContentVisualProperty(customContentVisual))

      /**
       * @param emptyVisual An empty visual.
       */
      override fun emptyVisual(emptyVisual: IResolvable) {
        cdkBuilder.emptyVisual(emptyVisual.let(IResolvable::unwrap))
      }

      /**
       * @param emptyVisual An empty visual.
       */
      override fun emptyVisual(emptyVisual: EmptyVisualProperty) {
        cdkBuilder.emptyVisual(emptyVisual.let(EmptyVisualProperty::unwrap))
      }

      /**
       * @param emptyVisual An empty visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b95d9c44823405356241c1f18e4c0c0004ff3d260282a6e5d7c581bdec1bb3a")
      override fun emptyVisual(emptyVisual: EmptyVisualProperty.Builder.() -> Unit): Unit =
          emptyVisual(EmptyVisualProperty(emptyVisual))

      /**
       * @param filledMapVisual A filled map.
       * For more information, see [Creating filled
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun filledMapVisual(filledMapVisual: IResolvable) {
        cdkBuilder.filledMapVisual(filledMapVisual.let(IResolvable::unwrap))
      }

      /**
       * @param filledMapVisual A filled map.
       * For more information, see [Creating filled
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun filledMapVisual(filledMapVisual: FilledMapVisualProperty) {
        cdkBuilder.filledMapVisual(filledMapVisual.let(FilledMapVisualProperty::unwrap))
      }

      /**
       * @param filledMapVisual A filled map.
       * For more information, see [Creating filled
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bcc0b012ef4e55560aa85fac469173b2187fe822a67d4d26e05ac0743d95db12")
      override fun filledMapVisual(filledMapVisual: FilledMapVisualProperty.Builder.() -> Unit):
          Unit = filledMapVisual(FilledMapVisualProperty(filledMapVisual))

      /**
       * @param funnelChartVisual A funnel chart.
       * For more information, see [Using funnel
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun funnelChartVisual(funnelChartVisual: IResolvable) {
        cdkBuilder.funnelChartVisual(funnelChartVisual.let(IResolvable::unwrap))
      }

      /**
       * @param funnelChartVisual A funnel chart.
       * For more information, see [Using funnel
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun funnelChartVisual(funnelChartVisual: FunnelChartVisualProperty) {
        cdkBuilder.funnelChartVisual(funnelChartVisual.let(FunnelChartVisualProperty::unwrap))
      }

      /**
       * @param funnelChartVisual A funnel chart.
       * For more information, see [Using funnel
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ff34bdc27858461b7e680da029d3449b388acf570ad74b5719d5798a9834cf16")
      override
          fun funnelChartVisual(funnelChartVisual: FunnelChartVisualProperty.Builder.() -> Unit):
          Unit = funnelChartVisual(FunnelChartVisualProperty(funnelChartVisual))

      /**
       * @param gaugeChartVisual A gauge chart.
       * For more information, see [Using gauge
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun gaugeChartVisual(gaugeChartVisual: IResolvable) {
        cdkBuilder.gaugeChartVisual(gaugeChartVisual.let(IResolvable::unwrap))
      }

      /**
       * @param gaugeChartVisual A gauge chart.
       * For more information, see [Using gauge
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun gaugeChartVisual(gaugeChartVisual: GaugeChartVisualProperty) {
        cdkBuilder.gaugeChartVisual(gaugeChartVisual.let(GaugeChartVisualProperty::unwrap))
      }

      /**
       * @param gaugeChartVisual A gauge chart.
       * For more information, see [Using gauge
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("586115d9f9fccd6d7a185e418b10d95151841d29b1178e157943955520213610")
      override fun gaugeChartVisual(gaugeChartVisual: GaugeChartVisualProperty.Builder.() -> Unit):
          Unit = gaugeChartVisual(GaugeChartVisualProperty(gaugeChartVisual))

      /**
       * @param geospatialMapVisual A geospatial map or a points on map visual.
       * For more information, see [Creating point
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun geospatialMapVisual(geospatialMapVisual: IResolvable) {
        cdkBuilder.geospatialMapVisual(geospatialMapVisual.let(IResolvable::unwrap))
      }

      /**
       * @param geospatialMapVisual A geospatial map or a points on map visual.
       * For more information, see [Creating point
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun geospatialMapVisual(geospatialMapVisual: GeospatialMapVisualProperty) {
        cdkBuilder.geospatialMapVisual(geospatialMapVisual.let(GeospatialMapVisualProperty::unwrap))
      }

      /**
       * @param geospatialMapVisual A geospatial map or a points on map visual.
       * For more information, see [Creating point
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7bbc33007285c8b2361e21128f7b12fcd144ae3268e6ee2b5652ee99a85ca848")
      override
          fun geospatialMapVisual(geospatialMapVisual: GeospatialMapVisualProperty.Builder.() -> Unit):
          Unit = geospatialMapVisual(GeospatialMapVisualProperty(geospatialMapVisual))

      /**
       * @param heatMapVisual A heat map.
       * For more information, see [Using heat
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun heatMapVisual(heatMapVisual: IResolvable) {
        cdkBuilder.heatMapVisual(heatMapVisual.let(IResolvable::unwrap))
      }

      /**
       * @param heatMapVisual A heat map.
       * For more information, see [Using heat
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun heatMapVisual(heatMapVisual: HeatMapVisualProperty) {
        cdkBuilder.heatMapVisual(heatMapVisual.let(HeatMapVisualProperty::unwrap))
      }

      /**
       * @param heatMapVisual A heat map.
       * For more information, see [Using heat
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("259aa2a004c55eee2646bed8494f14ff77a7ea06fd22df7de6d4fc1d89c32b5a")
      override fun heatMapVisual(heatMapVisual: HeatMapVisualProperty.Builder.() -> Unit): Unit =
          heatMapVisual(HeatMapVisualProperty(heatMapVisual))

      /**
       * @param histogramVisual A histogram.
       * For more information, see [Using
       * histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun histogramVisual(histogramVisual: IResolvable) {
        cdkBuilder.histogramVisual(histogramVisual.let(IResolvable::unwrap))
      }

      /**
       * @param histogramVisual A histogram.
       * For more information, see [Using
       * histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun histogramVisual(histogramVisual: HistogramVisualProperty) {
        cdkBuilder.histogramVisual(histogramVisual.let(HistogramVisualProperty::unwrap))
      }

      /**
       * @param histogramVisual A histogram.
       * For more information, see [Using
       * histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the
       * *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("febdb9a04d6ef174bc189cecc937245bbc54d916b967eb688642e1588c07ecb9")
      override fun histogramVisual(histogramVisual: HistogramVisualProperty.Builder.() -> Unit):
          Unit = histogramVisual(HistogramVisualProperty(histogramVisual))

      /**
       * @param insightVisual An insight visual.
       * For more information, see [Working with
       * insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in
       * the *Amazon QuickSight User Guide* .
       */
      override fun insightVisual(insightVisual: IResolvable) {
        cdkBuilder.insightVisual(insightVisual.let(IResolvable::unwrap))
      }

      /**
       * @param insightVisual An insight visual.
       * For more information, see [Working with
       * insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in
       * the *Amazon QuickSight User Guide* .
       */
      override fun insightVisual(insightVisual: InsightVisualProperty) {
        cdkBuilder.insightVisual(insightVisual.let(InsightVisualProperty::unwrap))
      }

      /**
       * @param insightVisual An insight visual.
       * For more information, see [Working with
       * insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in
       * the *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7d4fbfa5dd906d2b24c3447265a85d98dda812cdf88d344a15abd35ff6a31b46")
      override fun insightVisual(insightVisual: InsightVisualProperty.Builder.() -> Unit): Unit =
          insightVisual(InsightVisualProperty(insightVisual))

      /**
       * @param kpiVisual A key performance indicator (KPI).
       * For more information, see [Using
       * KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight
       * User Guide* .
       */
      override fun kpiVisual(kpiVisual: IResolvable) {
        cdkBuilder.kpiVisual(kpiVisual.let(IResolvable::unwrap))
      }

      /**
       * @param kpiVisual A key performance indicator (KPI).
       * For more information, see [Using
       * KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight
       * User Guide* .
       */
      override fun kpiVisual(kpiVisual: KPIVisualProperty) {
        cdkBuilder.kpiVisual(kpiVisual.let(KPIVisualProperty::unwrap))
      }

      /**
       * @param kpiVisual A key performance indicator (KPI).
       * For more information, see [Using
       * KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight
       * User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("20a69528d9b4e50bea71058a0180f07944694fa1ac45dbc5d6bc9b17194bdb25")
      override fun kpiVisual(kpiVisual: KPIVisualProperty.Builder.() -> Unit): Unit =
          kpiVisual(KPIVisualProperty(kpiVisual))

      /**
       * @param lineChartVisual A line chart.
       * For more information, see [Using line
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun lineChartVisual(lineChartVisual: IResolvable) {
        cdkBuilder.lineChartVisual(lineChartVisual.let(IResolvable::unwrap))
      }

      /**
       * @param lineChartVisual A line chart.
       * For more information, see [Using line
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun lineChartVisual(lineChartVisual: LineChartVisualProperty) {
        cdkBuilder.lineChartVisual(lineChartVisual.let(LineChartVisualProperty::unwrap))
      }

      /**
       * @param lineChartVisual A line chart.
       * For more information, see [Using line
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8e6e82d8d4383424123777af7433ca2a3f41ba5cc79244b5777ba694d49f3294")
      override fun lineChartVisual(lineChartVisual: LineChartVisualProperty.Builder.() -> Unit):
          Unit = lineChartVisual(LineChartVisualProperty(lineChartVisual))

      /**
       * @param pieChartVisual A pie or donut chart.
       * For more information, see [Using pie
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun pieChartVisual(pieChartVisual: IResolvable) {
        cdkBuilder.pieChartVisual(pieChartVisual.let(IResolvable::unwrap))
      }

      /**
       * @param pieChartVisual A pie or donut chart.
       * For more information, see [Using pie
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun pieChartVisual(pieChartVisual: PieChartVisualProperty) {
        cdkBuilder.pieChartVisual(pieChartVisual.let(PieChartVisualProperty::unwrap))
      }

      /**
       * @param pieChartVisual A pie or donut chart.
       * For more information, see [Using pie
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0d6d6c6fcf31963406160da9c9e04bb8cfa8badbeff97efc5fcfeb6151b7674b")
      override fun pieChartVisual(pieChartVisual: PieChartVisualProperty.Builder.() -> Unit): Unit =
          pieChartVisual(PieChartVisualProperty(pieChartVisual))

      /**
       * @param pivotTableVisual A pivot table.
       * For more information, see [Using pivot
       * tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun pivotTableVisual(pivotTableVisual: IResolvable) {
        cdkBuilder.pivotTableVisual(pivotTableVisual.let(IResolvable::unwrap))
      }

      /**
       * @param pivotTableVisual A pivot table.
       * For more information, see [Using pivot
       * tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun pivotTableVisual(pivotTableVisual: PivotTableVisualProperty) {
        cdkBuilder.pivotTableVisual(pivotTableVisual.let(PivotTableVisualProperty::unwrap))
      }

      /**
       * @param pivotTableVisual A pivot table.
       * For more information, see [Using pivot
       * tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd882b0a6cb351d2265d6fea8997b2c5a9f0c8d5d9115dd8987cd10db0cc037d")
      override fun pivotTableVisual(pivotTableVisual: PivotTableVisualProperty.Builder.() -> Unit):
          Unit = pivotTableVisual(PivotTableVisualProperty(pivotTableVisual))

      /**
       * @param radarChartVisual A radar chart visual.
       * For more information, see [Using radar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun radarChartVisual(radarChartVisual: IResolvable) {
        cdkBuilder.radarChartVisual(radarChartVisual.let(IResolvable::unwrap))
      }

      /**
       * @param radarChartVisual A radar chart visual.
       * For more information, see [Using radar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun radarChartVisual(radarChartVisual: RadarChartVisualProperty) {
        cdkBuilder.radarChartVisual(radarChartVisual.let(RadarChartVisualProperty::unwrap))
      }

      /**
       * @param radarChartVisual A radar chart visual.
       * For more information, see [Using radar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0de47e899be5a3985e6fe321c6025ebd12efbe52b1ae7380e8d300e6e64f7158")
      override fun radarChartVisual(radarChartVisual: RadarChartVisualProperty.Builder.() -> Unit):
          Unit = radarChartVisual(RadarChartVisualProperty(radarChartVisual))

      /**
       * @param sankeyDiagramVisual A sankey diagram.
       * For more information, see [Using Sankey
       * diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun sankeyDiagramVisual(sankeyDiagramVisual: IResolvable) {
        cdkBuilder.sankeyDiagramVisual(sankeyDiagramVisual.let(IResolvable::unwrap))
      }

      /**
       * @param sankeyDiagramVisual A sankey diagram.
       * For more information, see [Using Sankey
       * diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun sankeyDiagramVisual(sankeyDiagramVisual: SankeyDiagramVisualProperty) {
        cdkBuilder.sankeyDiagramVisual(sankeyDiagramVisual.let(SankeyDiagramVisualProperty::unwrap))
      }

      /**
       * @param sankeyDiagramVisual A sankey diagram.
       * For more information, see [Using Sankey
       * diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the
       * *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e45cc101a07a5c14ce90294eba606e8fee364cced0f39e3ee382c4cb0102a89f")
      override
          fun sankeyDiagramVisual(sankeyDiagramVisual: SankeyDiagramVisualProperty.Builder.() -> Unit):
          Unit = sankeyDiagramVisual(SankeyDiagramVisualProperty(sankeyDiagramVisual))

      /**
       * @param scatterPlotVisual A scatter plot.
       * For more information, see [Using scatter
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun scatterPlotVisual(scatterPlotVisual: IResolvable) {
        cdkBuilder.scatterPlotVisual(scatterPlotVisual.let(IResolvable::unwrap))
      }

      /**
       * @param scatterPlotVisual A scatter plot.
       * For more information, see [Using scatter
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun scatterPlotVisual(scatterPlotVisual: ScatterPlotVisualProperty) {
        cdkBuilder.scatterPlotVisual(scatterPlotVisual.let(ScatterPlotVisualProperty::unwrap))
      }

      /**
       * @param scatterPlotVisual A scatter plot.
       * For more information, see [Using scatter
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9b38d9e489ce4619f9d9aaacfcf082b7047a49f709168d5d696d16e2c59210b9")
      override
          fun scatterPlotVisual(scatterPlotVisual: ScatterPlotVisualProperty.Builder.() -> Unit):
          Unit = scatterPlotVisual(ScatterPlotVisualProperty(scatterPlotVisual))

      /**
       * @param tableVisual A table visual.
       * For more information, see [Using tables as
       * visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun tableVisual(tableVisual: IResolvable) {
        cdkBuilder.tableVisual(tableVisual.let(IResolvable::unwrap))
      }

      /**
       * @param tableVisual A table visual.
       * For more information, see [Using tables as
       * visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun tableVisual(tableVisual: TableVisualProperty) {
        cdkBuilder.tableVisual(tableVisual.let(TableVisualProperty::unwrap))
      }

      /**
       * @param tableVisual A table visual.
       * For more information, see [Using tables as
       * visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("993425af1876d91f5299bcbf38da3ff46606981ac0b697597f75095add2bee0e")
      override fun tableVisual(tableVisual: TableVisualProperty.Builder.() -> Unit): Unit =
          tableVisual(TableVisualProperty(tableVisual))

      /**
       * @param treeMapVisual A tree map.
       * For more information, see [Using tree
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun treeMapVisual(treeMapVisual: IResolvable) {
        cdkBuilder.treeMapVisual(treeMapVisual.let(IResolvable::unwrap))
      }

      /**
       * @param treeMapVisual A tree map.
       * For more information, see [Using tree
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun treeMapVisual(treeMapVisual: TreeMapVisualProperty) {
        cdkBuilder.treeMapVisual(treeMapVisual.let(TreeMapVisualProperty::unwrap))
      }

      /**
       * @param treeMapVisual A tree map.
       * For more information, see [Using tree
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3bd0f8298345806559832167cd2cdc496a3cae3e847212ac795e7ff711be59e6")
      override fun treeMapVisual(treeMapVisual: TreeMapVisualProperty.Builder.() -> Unit): Unit =
          treeMapVisual(TreeMapVisualProperty(treeMapVisual))

      /**
       * @param waterfallVisual A waterfall chart.
       * For more information, see [Using waterfall
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun waterfallVisual(waterfallVisual: IResolvable) {
        cdkBuilder.waterfallVisual(waterfallVisual.let(IResolvable::unwrap))
      }

      /**
       * @param waterfallVisual A waterfall chart.
       * For more information, see [Using waterfall
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun waterfallVisual(waterfallVisual: WaterfallVisualProperty) {
        cdkBuilder.waterfallVisual(waterfallVisual.let(WaterfallVisualProperty::unwrap))
      }

      /**
       * @param waterfallVisual A waterfall chart.
       * For more information, see [Using waterfall
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the
       * *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1bf3481903e4c9d70afaa63f225ff553274c2d0a8bfdf7108c57d30b235e04db")
      override fun waterfallVisual(waterfallVisual: WaterfallVisualProperty.Builder.() -> Unit):
          Unit = waterfallVisual(WaterfallVisualProperty(waterfallVisual))

      /**
       * @param wordCloudVisual A word cloud.
       * For more information, see [Using word
       * clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun wordCloudVisual(wordCloudVisual: IResolvable) {
        cdkBuilder.wordCloudVisual(wordCloudVisual.let(IResolvable::unwrap))
      }

      /**
       * @param wordCloudVisual A word cloud.
       * For more information, see [Using word
       * clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon
       * QuickSight User Guide* .
       */
      override fun wordCloudVisual(wordCloudVisual: WordCloudVisualProperty) {
        cdkBuilder.wordCloudVisual(wordCloudVisual.let(WordCloudVisualProperty::unwrap))
      }

      /**
       * @param wordCloudVisual A word cloud.
       * For more information, see [Using word
       * clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon
       * QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4637f47d72cc4020ff4056d974dc3c942afe0d8b17016322075dd78c878fc923")
      override fun wordCloudVisual(wordCloudVisual: WordCloudVisualProperty.Builder.() -> Unit):
          Unit = wordCloudVisual(WordCloudVisualProperty(wordCloudVisual))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualProperty,
    ) : VisualProperty {
      /**
       * A bar chart.
       *
       * For more information, see [Using bar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-barchartvisual)
       */
      override fun barChartVisual(): Any? = unwrap(this).getBarChartVisual()

      /**
       * A box plot.
       *
       * For more information, see [Using box
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-boxplotvisual)
       */
      override fun boxPlotVisual(): Any? = unwrap(this).getBoxPlotVisual()

      /**
       * A combo chart.
       *
       * For more information, see [Using combo
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-combochartvisual)
       */
      override fun comboChartVisual(): Any? = unwrap(this).getComboChartVisual()

      /**
       * A visual that contains custom content.
       *
       * For more information, see [Using custom visual
       * content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-customcontentvisual)
       */
      override fun customContentVisual(): Any? = unwrap(this).getCustomContentVisual()

      /**
       * An empty visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-emptyvisual)
       */
      override fun emptyVisual(): Any? = unwrap(this).getEmptyVisual()

      /**
       * A filled map.
       *
       * For more information, see [Creating filled
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-filledmapvisual)
       */
      override fun filledMapVisual(): Any? = unwrap(this).getFilledMapVisual()

      /**
       * A funnel chart.
       *
       * For more information, see [Using funnel
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the
       * *Amazon QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-funnelchartvisual)
       */
      override fun funnelChartVisual(): Any? = unwrap(this).getFunnelChartVisual()

      /**
       * A gauge chart.
       *
       * For more information, see [Using gauge
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-gaugechartvisual)
       */
      override fun gaugeChartVisual(): Any? = unwrap(this).getGaugeChartVisual()

      /**
       * A geospatial map or a points on map visual.
       *
       * For more information, see [Creating point
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-geospatialmapvisual)
       */
      override fun geospatialMapVisual(): Any? = unwrap(this).getGeospatialMapVisual()

      /**
       * A heat map.
       *
       * For more information, see [Using heat
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-heatmapvisual)
       */
      override fun heatMapVisual(): Any? = unwrap(this).getHeatMapVisual()

      /**
       * A histogram.
       *
       * For more information, see [Using
       * histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the
       * *Amazon QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-histogramvisual)
       */
      override fun histogramVisual(): Any? = unwrap(this).getHistogramVisual()

      /**
       * An insight visual.
       *
       * For more information, see [Working with
       * insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in
       * the *Amazon QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-insightvisual)
       */
      override fun insightVisual(): Any? = unwrap(this).getInsightVisual()

      /**
       * A key performance indicator (KPI).
       *
       * For more information, see [Using
       * KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight
       * User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-kpivisual)
       */
      override fun kpiVisual(): Any? = unwrap(this).getKpiVisual()

      /**
       * A line chart.
       *
       * For more information, see [Using line
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-linechartvisual)
       */
      override fun lineChartVisual(): Any? = unwrap(this).getLineChartVisual()

      /**
       * A pie or donut chart.
       *
       * For more information, see [Using pie
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-piechartvisual)
       */
      override fun pieChartVisual(): Any? = unwrap(this).getPieChartVisual()

      /**
       * A pivot table.
       *
       * For more information, see [Using pivot
       * tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-pivottablevisual)
       */
      override fun pivotTableVisual(): Any? = unwrap(this).getPivotTableVisual()

      /**
       * A radar chart visual.
       *
       * For more information, see [Using radar
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-radarchartvisual)
       */
      override fun radarChartVisual(): Any? = unwrap(this).getRadarChartVisual()

      /**
       * A sankey diagram.
       *
       * For more information, see [Using Sankey
       * diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the
       * *Amazon QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-sankeydiagramvisual)
       */
      override fun sankeyDiagramVisual(): Any? = unwrap(this).getSankeyDiagramVisual()

      /**
       * A scatter plot.
       *
       * For more information, see [Using scatter
       * plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-scatterplotvisual)
       */
      override fun scatterPlotVisual(): Any? = unwrap(this).getScatterPlotVisual()

      /**
       * A table visual.
       *
       * For more information, see [Using tables as
       * visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-tablevisual)
       */
      override fun tableVisual(): Any? = unwrap(this).getTableVisual()

      /**
       * A tree map.
       *
       * For more information, see [Using tree
       * maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-treemapvisual)
       */
      override fun treeMapVisual(): Any? = unwrap(this).getTreeMapVisual()

      /**
       * A waterfall chart.
       *
       * For more information, see [Using waterfall
       * charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the
       * *Amazon QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-waterfallvisual)
       */
      override fun waterfallVisual(): Any? = unwrap(this).getWaterfallVisual()

      /**
       * A word cloud.
       *
       * For more information, see [Using word
       * clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon
       * QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-wordcloudvisual)
       */
      override fun wordCloudVisual(): Any? = unwrap(this).getWordCloudVisual()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): VisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualProperty):
          VisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface TimeEqualityFilterProperty {
    /**
     * The column that the filter is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-column)
     */
    public fun column(): Any

    /**
     * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-filterid)
     */
    public fun filterId(): String

    /**
     * The parameter whose value should be used for the filter value.
     *
     * This field is mutually exclusive to `Value` and `RollingDate` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-parametername)
     */
    public fun parameterName(): String? = unwrap(this).getParameterName()

    /**
     * The rolling date input for the `TimeEquality` filter.
     *
     * This field is mutually exclusive to `Value` and `ParameterName` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-rollingdate)
     */
    public fun rollingDate(): Any? = unwrap(this).getRollingDate()

    /**
     * The level of time precision that is used to aggregate `DateTime` values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-timegranularity)
     */
    public fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

    /**
     * The value of a `TimeEquality` filter.
     *
     * This field is mutually exclusive to `RollingDate` and `ParameterName` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-value)
     */
    public fun `value`(): String? = unwrap(this).getValue()

    /**
     * A builder for [TimeEqualityFilterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that the filter is applied to. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("791f181f39de5e057e773bea5540ba5394cc7c6380e2fc68ecbd5d3bb7e9bd82")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      public fun filterId(filterId: String)

      /**
       * @param parameterName The parameter whose value should be used for the filter value.
       * This field is mutually exclusive to `Value` and `RollingDate` .
       */
      public fun parameterName(parameterName: String)

      /**
       * @param rollingDate The rolling date input for the `TimeEquality` filter.
       * This field is mutually exclusive to `Value` and `ParameterName` .
       */
      public fun rollingDate(rollingDate: IResolvable)

      /**
       * @param rollingDate The rolling date input for the `TimeEquality` filter.
       * This field is mutually exclusive to `Value` and `ParameterName` .
       */
      public fun rollingDate(rollingDate: RollingDateConfigurationProperty)

      /**
       * @param rollingDate The rolling date input for the `TimeEquality` filter.
       * This field is mutually exclusive to `Value` and `ParameterName` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("40a7e7a9db713388acce117ffeab949e1ea31bb8e535100941ce4886662a0b56")
      public fun rollingDate(rollingDate: RollingDateConfigurationProperty.Builder.() -> Unit)

      /**
       * @param timeGranularity The level of time precision that is used to aggregate `DateTime`
       * values.
       */
      public fun timeGranularity(timeGranularity: String)

      /**
       * @param value The value of a `TimeEquality` filter.
       * This field is mutually exclusive to `RollingDate` and `ParameterName` .
       */
      public fun `value`(`value`: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeEqualityFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeEqualityFilterProperty.builder()

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that the filter is applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("791f181f39de5e057e773bea5540ba5394cc7c6380e2fc68ecbd5d3bb7e9bd82")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param filterId An identifier that uniquely identifies a filter within a dashboard,
       * analysis, or template. 
       */
      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      /**
       * @param parameterName The parameter whose value should be used for the filter value.
       * This field is mutually exclusive to `Value` and `RollingDate` .
       */
      override fun parameterName(parameterName: String) {
        cdkBuilder.parameterName(parameterName)
      }

      /**
       * @param rollingDate The rolling date input for the `TimeEquality` filter.
       * This field is mutually exclusive to `Value` and `ParameterName` .
       */
      override fun rollingDate(rollingDate: IResolvable) {
        cdkBuilder.rollingDate(rollingDate.let(IResolvable::unwrap))
      }

      /**
       * @param rollingDate The rolling date input for the `TimeEquality` filter.
       * This field is mutually exclusive to `Value` and `ParameterName` .
       */
      override fun rollingDate(rollingDate: RollingDateConfigurationProperty) {
        cdkBuilder.rollingDate(rollingDate.let(RollingDateConfigurationProperty::unwrap))
      }

      /**
       * @param rollingDate The rolling date input for the `TimeEquality` filter.
       * This field is mutually exclusive to `Value` and `ParameterName` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("40a7e7a9db713388acce117ffeab949e1ea31bb8e535100941ce4886662a0b56")
      override fun rollingDate(rollingDate: RollingDateConfigurationProperty.Builder.() -> Unit):
          Unit = rollingDate(RollingDateConfigurationProperty(rollingDate))

      /**
       * @param timeGranularity The level of time precision that is used to aggregate `DateTime`
       * values.
       */
      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      /**
       * @param value The value of a `TimeEquality` filter.
       * This field is mutually exclusive to `RollingDate` and `ParameterName` .
       */
      override fun `value`(`value`: String) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeEqualityFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeEqualityFilterProperty,
    ) : TimeEqualityFilterProperty {
      /**
       * The column that the filter is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-filterid)
       */
      override fun filterId(): String = unwrap(this).getFilterId()

      /**
       * The parameter whose value should be used for the filter value.
       *
       * This field is mutually exclusive to `Value` and `RollingDate` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-parametername)
       */
      override fun parameterName(): String? = unwrap(this).getParameterName()

      /**
       * The rolling date input for the `TimeEquality` filter.
       *
       * This field is mutually exclusive to `Value` and `ParameterName` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-rollingdate)
       */
      override fun rollingDate(): Any? = unwrap(this).getRollingDate()

      /**
       * The level of time precision that is used to aggregate `DateTime` values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-timegranularity)
       */
      override fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

      /**
       * The value of a `TimeEquality` filter.
       *
       * This field is mutually exclusive to `RollingDate` and `ParameterName` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-value)
       */
      override fun `value`(): String? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TimeEqualityFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeEqualityFilterProperty):
          TimeEqualityFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TimeEqualityFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TimeEqualityFilterProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface VisibleRangeOptionsProperty {
    /**
     * The percent range in the visible range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visiblerangeoptions.html#cfn-quicksight-analysis-visiblerangeoptions-percentrange)
     */
    public fun percentRange(): Any? = unwrap(this).getPercentRange()

    /**
     * A builder for [VisibleRangeOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param percentRange The percent range in the visible range.
       */
      public fun percentRange(percentRange: IResolvable)

      /**
       * @param percentRange The percent range in the visible range.
       */
      public fun percentRange(percentRange: PercentVisibleRangeProperty)

      /**
       * @param percentRange The percent range in the visible range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d6d06f7eda2d41031d356dfb0a6d650356cdf2ad3c21fdeaa538f774924fb7fb")
      public fun percentRange(percentRange: PercentVisibleRangeProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisibleRangeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisibleRangeOptionsProperty.builder()

      /**
       * @param percentRange The percent range in the visible range.
       */
      override fun percentRange(percentRange: IResolvable) {
        cdkBuilder.percentRange(percentRange.let(IResolvable::unwrap))
      }

      /**
       * @param percentRange The percent range in the visible range.
       */
      override fun percentRange(percentRange: PercentVisibleRangeProperty) {
        cdkBuilder.percentRange(percentRange.let(PercentVisibleRangeProperty::unwrap))
      }

      /**
       * @param percentRange The percent range in the visible range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d6d06f7eda2d41031d356dfb0a6d650356cdf2ad3c21fdeaa538f774924fb7fb")
      override fun percentRange(percentRange: PercentVisibleRangeProperty.Builder.() -> Unit): Unit
          = percentRange(PercentVisibleRangeProperty(percentRange))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisibleRangeOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisibleRangeOptionsProperty,
    ) : VisibleRangeOptionsProperty {
      /**
       * The percent range in the visible range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visiblerangeoptions.html#cfn-quicksight-analysis-visiblerangeoptions-percentrange)
       */
      override fun percentRange(): Any? = unwrap(this).getPercentRange()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): VisibleRangeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.VisibleRangeOptionsProperty):
          VisibleRangeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisibleRangeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisibleRangeOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface DropDownControlDisplayOptionsProperty {
    /**
     * The configuration of info icon label options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dropdowncontroldisplayoptions.html#cfn-quicksight-analysis-dropdowncontroldisplayoptions-infoiconlabeloptions)
     */
    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    /**
     * The configuration of the `Select all` options in a dropdown control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dropdowncontroldisplayoptions.html#cfn-quicksight-analysis-dropdowncontroldisplayoptions-selectalloptions)
     */
    public fun selectAllOptions(): Any? = unwrap(this).getSelectAllOptions()

    /**
     * The options to configure the title visibility, name, and font size.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dropdowncontroldisplayoptions.html#cfn-quicksight-analysis-dropdowncontroldisplayoptions-titleoptions)
     */
    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    /**
     * A builder for [DropDownControlDisplayOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4a1c146b98951caf6e4fc3128190ad35efdd91ae5f24c48f47199b48076f7e8e")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param selectAllOptions The configuration of the `Select all` options in a dropdown
       * control.
       */
      public fun selectAllOptions(selectAllOptions: IResolvable)

      /**
       * @param selectAllOptions The configuration of the `Select all` options in a dropdown
       * control.
       */
      public fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty)

      /**
       * @param selectAllOptions The configuration of the `Select all` options in a dropdown
       * control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4c1cb4d3969636a8a0dac817e6b345b10542914b863ec8ebe04b784fa47d0fc3")
      public
          fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty.Builder.() -> Unit)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: IResolvable)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: LabelOptionsProperty)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("364b0b6b9bf475e522ae3c6d4344c1af9127490fb7466b961bda1d524302bfbb")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DropDownControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DropDownControlDisplayOptionsProperty.builder()

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4a1c146b98951caf6e4fc3128190ad35efdd91ae5f24c48f47199b48076f7e8e")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      /**
       * @param selectAllOptions The configuration of the `Select all` options in a dropdown
       * control.
       */
      override fun selectAllOptions(selectAllOptions: IResolvable) {
        cdkBuilder.selectAllOptions(selectAllOptions.let(IResolvable::unwrap))
      }

      /**
       * @param selectAllOptions The configuration of the `Select all` options in a dropdown
       * control.
       */
      override fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty) {
        cdkBuilder.selectAllOptions(selectAllOptions.let(ListControlSelectAllOptionsProperty::unwrap))
      }

      /**
       * @param selectAllOptions The configuration of the `Select all` options in a dropdown
       * control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4c1cb4d3969636a8a0dac817e6b345b10542914b863ec8ebe04b784fa47d0fc3")
      override
          fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty.Builder.() -> Unit):
          Unit = selectAllOptions(ListControlSelectAllOptionsProperty(selectAllOptions))

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("364b0b6b9bf475e522ae3c6d4344c1af9127490fb7466b961bda1d524302bfbb")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DropDownControlDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DropDownControlDisplayOptionsProperty,
    ) : DropDownControlDisplayOptionsProperty {
      /**
       * The configuration of info icon label options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dropdowncontroldisplayoptions.html#cfn-quicksight-analysis-dropdowncontroldisplayoptions-infoiconlabeloptions)
       */
      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      /**
       * The configuration of the `Select all` options in a dropdown control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dropdowncontroldisplayoptions.html#cfn-quicksight-analysis-dropdowncontroldisplayoptions-selectalloptions)
       */
      override fun selectAllOptions(): Any? = unwrap(this).getSelectAllOptions()

      /**
       * The options to configure the title visibility, name, and font size.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dropdowncontroldisplayoptions.html#cfn-quicksight-analysis-dropdowncontroldisplayoptions-titleoptions)
       */
      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DropDownControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DropDownControlDisplayOptionsProperty):
          DropDownControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DropDownControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DropDownControlDisplayOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface KPIActualValueConditionalFormattingProperty {
    /**
     * The conditional formatting of the actual value's icon.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiactualvalueconditionalformatting.html#cfn-quicksight-analysis-kpiactualvalueconditionalformatting-icon)
     */
    public fun icon(): Any? = unwrap(this).getIcon()

    /**
     * The conditional formatting of the actual value's text color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiactualvalueconditionalformatting.html#cfn-quicksight-analysis-kpiactualvalueconditionalformatting-textcolor)
     */
    public fun textColor(): Any? = unwrap(this).getTextColor()

    /**
     * A builder for [KPIActualValueConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param icon The conditional formatting of the actual value's icon.
       */
      public fun icon(icon: IResolvable)

      /**
       * @param icon The conditional formatting of the actual value's icon.
       */
      public fun icon(icon: ConditionalFormattingIconProperty)

      /**
       * @param icon The conditional formatting of the actual value's icon.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("63919fd779831b27a8421f7cc17a8a95982fcaa7caa8f6f1295847e94e71ebeb")
      public fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit)

      /**
       * @param textColor The conditional formatting of the actual value's text color.
       */
      public fun textColor(textColor: IResolvable)

      /**
       * @param textColor The conditional formatting of the actual value's text color.
       */
      public fun textColor(textColor: ConditionalFormattingColorProperty)

      /**
       * @param textColor The conditional formatting of the actual value's text color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("11d8df835118296ba884a97320b523a332c7af4c1527132311294e62a6f31057")
      public fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIActualValueConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIActualValueConditionalFormattingProperty.builder()

      /**
       * @param icon The conditional formatting of the actual value's icon.
       */
      override fun icon(icon: IResolvable) {
        cdkBuilder.icon(icon.let(IResolvable::unwrap))
      }

      /**
       * @param icon The conditional formatting of the actual value's icon.
       */
      override fun icon(icon: ConditionalFormattingIconProperty) {
        cdkBuilder.icon(icon.let(ConditionalFormattingIconProperty::unwrap))
      }

      /**
       * @param icon The conditional formatting of the actual value's icon.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("63919fd779831b27a8421f7cc17a8a95982fcaa7caa8f6f1295847e94e71ebeb")
      override fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit): Unit =
          icon(ConditionalFormattingIconProperty(icon))

      /**
       * @param textColor The conditional formatting of the actual value's text color.
       */
      override fun textColor(textColor: IResolvable) {
        cdkBuilder.textColor(textColor.let(IResolvable::unwrap))
      }

      /**
       * @param textColor The conditional formatting of the actual value's text color.
       */
      override fun textColor(textColor: ConditionalFormattingColorProperty) {
        cdkBuilder.textColor(textColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      /**
       * @param textColor The conditional formatting of the actual value's text color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("11d8df835118296ba884a97320b523a332c7af4c1527132311294e62a6f31057")
      override fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit): Unit
          = textColor(ConditionalFormattingColorProperty(textColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIActualValueConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIActualValueConditionalFormattingProperty,
    ) : KPIActualValueConditionalFormattingProperty {
      /**
       * The conditional formatting of the actual value's icon.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiactualvalueconditionalformatting.html#cfn-quicksight-analysis-kpiactualvalueconditionalformatting-icon)
       */
      override fun icon(): Any? = unwrap(this).getIcon()

      /**
       * The conditional formatting of the actual value's text color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiactualvalueconditionalformatting.html#cfn-quicksight-analysis-kpiactualvalueconditionalformatting-textcolor)
       */
      override fun textColor(): Any? = unwrap(this).getTextColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          KPIActualValueConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIActualValueConditionalFormattingProperty):
          KPIActualValueConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIActualValueConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIActualValueConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FreeFormLayoutElementBackgroundStyleProperty {
    /**
     * The background color of a free-form layout element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementbackgroundstyle.html#cfn-quicksight-analysis-freeformlayoutelementbackgroundstyle-color)
     */
    public fun color(): String? = unwrap(this).getColor()

    /**
     * The background visibility of a free-form layout element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementbackgroundstyle.html#cfn-quicksight-analysis-freeformlayoutelementbackgroundstyle-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [FreeFormLayoutElementBackgroundStyleProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color The background color of a free-form layout element.
       */
      public fun color(color: String)

      /**
       * @param visibility The background visibility of a free-form layout element.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementBackgroundStyleProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementBackgroundStyleProperty.builder()

      /**
       * @param color The background color of a free-form layout element.
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      /**
       * @param visibility The background visibility of a free-form layout element.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementBackgroundStyleProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementBackgroundStyleProperty,
    ) : FreeFormLayoutElementBackgroundStyleProperty {
      /**
       * The background color of a free-form layout element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementbackgroundstyle.html#cfn-quicksight-analysis-freeformlayoutelementbackgroundstyle-color)
       */
      override fun color(): String? = unwrap(this).getColor()

      /**
       * The background visibility of a free-form layout element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementbackgroundstyle.html#cfn-quicksight-analysis-freeformlayoutelementbackgroundstyle-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FreeFormLayoutElementBackgroundStyleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementBackgroundStyleProperty):
          FreeFormLayoutElementBackgroundStyleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormLayoutElementBackgroundStyleProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementBackgroundStyleProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TreeMapFieldWellsProperty {
    /**
     * The aggregated field wells of a tree map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapfieldwells.html#cfn-quicksight-analysis-treemapfieldwells-treemapaggregatedfieldwells)
     */
    public fun treeMapAggregatedFieldWells(): Any? = unwrap(this).getTreeMapAggregatedFieldWells()

    /**
     * A builder for [TreeMapFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param treeMapAggregatedFieldWells The aggregated field wells of a tree map.
       */
      public fun treeMapAggregatedFieldWells(treeMapAggregatedFieldWells: IResolvable)

      /**
       * @param treeMapAggregatedFieldWells The aggregated field wells of a tree map.
       */
      public
          fun treeMapAggregatedFieldWells(treeMapAggregatedFieldWells: TreeMapAggregatedFieldWellsProperty)

      /**
       * @param treeMapAggregatedFieldWells The aggregated field wells of a tree map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("711d149d4db466e72c57927904002c86785f12078b924b084215a532152a9633")
      public
          fun treeMapAggregatedFieldWells(treeMapAggregatedFieldWells: TreeMapAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapFieldWellsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapFieldWellsProperty.builder()

      /**
       * @param treeMapAggregatedFieldWells The aggregated field wells of a tree map.
       */
      override fun treeMapAggregatedFieldWells(treeMapAggregatedFieldWells: IResolvable) {
        cdkBuilder.treeMapAggregatedFieldWells(treeMapAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param treeMapAggregatedFieldWells The aggregated field wells of a tree map.
       */
      override
          fun treeMapAggregatedFieldWells(treeMapAggregatedFieldWells: TreeMapAggregatedFieldWellsProperty) {
        cdkBuilder.treeMapAggregatedFieldWells(treeMapAggregatedFieldWells.let(TreeMapAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param treeMapAggregatedFieldWells The aggregated field wells of a tree map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("711d149d4db466e72c57927904002c86785f12078b924b084215a532152a9633")
      override
          fun treeMapAggregatedFieldWells(treeMapAggregatedFieldWells: TreeMapAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          treeMapAggregatedFieldWells(TreeMapAggregatedFieldWellsProperty(treeMapAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapFieldWellsProperty,
    ) : TreeMapFieldWellsProperty {
      /**
       * The aggregated field wells of a tree map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapfieldwells.html#cfn-quicksight-analysis-treemapfieldwells-treemapaggregatedfieldwells)
       */
      override fun treeMapAggregatedFieldWells(): Any? =
          unwrap(this).getTreeMapAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TreeMapFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapFieldWellsProperty):
          TreeMapFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TreeMapFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ColumnConfigurationProperty {
    /**
     * The color configurations of the column.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html#cfn-quicksight-analysis-columnconfiguration-colorsconfiguration)
     */
    public fun colorsConfiguration(): Any? = unwrap(this).getColorsConfiguration()

    /**
     * The column.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html#cfn-quicksight-analysis-columnconfiguration-column)
     */
    public fun column(): Any

    /**
     * The format configuration of a column.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html#cfn-quicksight-analysis-columnconfiguration-formatconfiguration)
     */
    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    /**
     * The role of the column.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html#cfn-quicksight-analysis-columnconfiguration-role)
     */
    public fun role(): String? = unwrap(this).getRole()

    /**
     * A builder for [ColumnConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param colorsConfiguration The color configurations of the column.
       */
      public fun colorsConfiguration(colorsConfiguration: IResolvable)

      /**
       * @param colorsConfiguration The color configurations of the column.
       */
      public fun colorsConfiguration(colorsConfiguration: ColorsConfigurationProperty)

      /**
       * @param colorsConfiguration The color configurations of the column.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("623ad8a5d23d37bbe7975e50a2f22ff38405396eabb2b965c99578def1c6aeef")
      public
          fun colorsConfiguration(colorsConfiguration: ColorsConfigurationProperty.Builder.() -> Unit)

      /**
       * @param column The column. 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column. 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("69d60b85e4483a473c4979fa5be07caab3469c946fa44e4ea09f835aa9b32019")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param formatConfiguration The format configuration of a column.
       */
      public fun formatConfiguration(formatConfiguration: IResolvable)

      /**
       * @param formatConfiguration The format configuration of a column.
       */
      public fun formatConfiguration(formatConfiguration: FormatConfigurationProperty)

      /**
       * @param formatConfiguration The format configuration of a column.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("23004e83f60bcd3b89b633f7b5cb39b8f6829d619858cb93c6f6604d476058da")
      public
          fun formatConfiguration(formatConfiguration: FormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param role The role of the column.
       */
      public fun role(role: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnConfigurationProperty.builder()

      /**
       * @param colorsConfiguration The color configurations of the column.
       */
      override fun colorsConfiguration(colorsConfiguration: IResolvable) {
        cdkBuilder.colorsConfiguration(colorsConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param colorsConfiguration The color configurations of the column.
       */
      override fun colorsConfiguration(colorsConfiguration: ColorsConfigurationProperty) {
        cdkBuilder.colorsConfiguration(colorsConfiguration.let(ColorsConfigurationProperty::unwrap))
      }

      /**
       * @param colorsConfiguration The color configurations of the column.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("623ad8a5d23d37bbe7975e50a2f22ff38405396eabb2b965c99578def1c6aeef")
      override
          fun colorsConfiguration(colorsConfiguration: ColorsConfigurationProperty.Builder.() -> Unit):
          Unit = colorsConfiguration(ColorsConfigurationProperty(colorsConfiguration))

      /**
       * @param column The column. 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column. 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("69d60b85e4483a473c4979fa5be07caab3469c946fa44e4ea09f835aa9b32019")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param formatConfiguration The format configuration of a column.
       */
      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of a column.
       */
      override fun formatConfiguration(formatConfiguration: FormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(FormatConfigurationProperty::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of a column.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("23004e83f60bcd3b89b633f7b5cb39b8f6829d619858cb93c6f6604d476058da")
      override
          fun formatConfiguration(formatConfiguration: FormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(FormatConfigurationProperty(formatConfiguration))

      /**
       * @param role The role of the column.
       */
      override fun role(role: String) {
        cdkBuilder.role(role)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnConfigurationProperty,
    ) : ColumnConfigurationProperty {
      /**
       * The color configurations of the column.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html#cfn-quicksight-analysis-columnconfiguration-colorsconfiguration)
       */
      override fun colorsConfiguration(): Any? = unwrap(this).getColorsConfiguration()

      /**
       * The column.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html#cfn-quicksight-analysis-columnconfiguration-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The format configuration of a column.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html#cfn-quicksight-analysis-columnconfiguration-formatconfiguration)
       */
      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

      /**
       * The role of the column.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html#cfn-quicksight-analysis-columnconfiguration-role)
       */
      override fun role(): String? = unwrap(this).getRole()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnConfigurationProperty):
          ColumnConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColumnConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface DefaultNewSheetConfigurationProperty {
    /**
     * The options that determine the default settings for interactive layout configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultnewsheetconfiguration.html#cfn-quicksight-analysis-defaultnewsheetconfiguration-interactivelayoutconfiguration)
     */
    public fun interactiveLayoutConfiguration(): Any? =
        unwrap(this).getInteractiveLayoutConfiguration()

    /**
     * The options that determine the default settings for a paginated layout configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultnewsheetconfiguration.html#cfn-quicksight-analysis-defaultnewsheetconfiguration-paginatedlayoutconfiguration)
     */
    public fun paginatedLayoutConfiguration(): Any? = unwrap(this).getPaginatedLayoutConfiguration()

    /**
     * The option that determines the sheet content type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultnewsheetconfiguration.html#cfn-quicksight-analysis-defaultnewsheetconfiguration-sheetcontenttype)
     */
    public fun sheetContentType(): String? = unwrap(this).getSheetContentType()

    /**
     * A builder for [DefaultNewSheetConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param interactiveLayoutConfiguration The options that determine the default settings for
       * interactive layout configuration.
       */
      public fun interactiveLayoutConfiguration(interactiveLayoutConfiguration: IResolvable)

      /**
       * @param interactiveLayoutConfiguration The options that determine the default settings for
       * interactive layout configuration.
       */
      public
          fun interactiveLayoutConfiguration(interactiveLayoutConfiguration: DefaultInteractiveLayoutConfigurationProperty)

      /**
       * @param interactiveLayoutConfiguration The options that determine the default settings for
       * interactive layout configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ab88a70fd4a9db376bd83ec7d1a5fc0b7de35d9b38d28981dd2bb6b87ca17660")
      public
          fun interactiveLayoutConfiguration(interactiveLayoutConfiguration: DefaultInteractiveLayoutConfigurationProperty.Builder.() -> Unit)

      /**
       * @param paginatedLayoutConfiguration The options that determine the default settings for a
       * paginated layout configuration.
       */
      public fun paginatedLayoutConfiguration(paginatedLayoutConfiguration: IResolvable)

      /**
       * @param paginatedLayoutConfiguration The options that determine the default settings for a
       * paginated layout configuration.
       */
      public
          fun paginatedLayoutConfiguration(paginatedLayoutConfiguration: DefaultPaginatedLayoutConfigurationProperty)

      /**
       * @param paginatedLayoutConfiguration The options that determine the default settings for a
       * paginated layout configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3b66c6468fa6e1741a37f5da87305845bb70747275bf76a2673a4e542186eb9d")
      public
          fun paginatedLayoutConfiguration(paginatedLayoutConfiguration: DefaultPaginatedLayoutConfigurationProperty.Builder.() -> Unit)

      /**
       * @param sheetContentType The option that determines the sheet content type.
       */
      public fun sheetContentType(sheetContentType: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultNewSheetConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultNewSheetConfigurationProperty.builder()

      /**
       * @param interactiveLayoutConfiguration The options that determine the default settings for
       * interactive layout configuration.
       */
      override fun interactiveLayoutConfiguration(interactiveLayoutConfiguration: IResolvable) {
        cdkBuilder.interactiveLayoutConfiguration(interactiveLayoutConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param interactiveLayoutConfiguration The options that determine the default settings for
       * interactive layout configuration.
       */
      override
          fun interactiveLayoutConfiguration(interactiveLayoutConfiguration: DefaultInteractiveLayoutConfigurationProperty) {
        cdkBuilder.interactiveLayoutConfiguration(interactiveLayoutConfiguration.let(DefaultInteractiveLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param interactiveLayoutConfiguration The options that determine the default settings for
       * interactive layout configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ab88a70fd4a9db376bd83ec7d1a5fc0b7de35d9b38d28981dd2bb6b87ca17660")
      override
          fun interactiveLayoutConfiguration(interactiveLayoutConfiguration: DefaultInteractiveLayoutConfigurationProperty.Builder.() -> Unit):
          Unit =
          interactiveLayoutConfiguration(DefaultInteractiveLayoutConfigurationProperty(interactiveLayoutConfiguration))

      /**
       * @param paginatedLayoutConfiguration The options that determine the default settings for a
       * paginated layout configuration.
       */
      override fun paginatedLayoutConfiguration(paginatedLayoutConfiguration: IResolvable) {
        cdkBuilder.paginatedLayoutConfiguration(paginatedLayoutConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param paginatedLayoutConfiguration The options that determine the default settings for a
       * paginated layout configuration.
       */
      override
          fun paginatedLayoutConfiguration(paginatedLayoutConfiguration: DefaultPaginatedLayoutConfigurationProperty) {
        cdkBuilder.paginatedLayoutConfiguration(paginatedLayoutConfiguration.let(DefaultPaginatedLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param paginatedLayoutConfiguration The options that determine the default settings for a
       * paginated layout configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3b66c6468fa6e1741a37f5da87305845bb70747275bf76a2673a4e542186eb9d")
      override
          fun paginatedLayoutConfiguration(paginatedLayoutConfiguration: DefaultPaginatedLayoutConfigurationProperty.Builder.() -> Unit):
          Unit =
          paginatedLayoutConfiguration(DefaultPaginatedLayoutConfigurationProperty(paginatedLayoutConfiguration))

      /**
       * @param sheetContentType The option that determines the sheet content type.
       */
      override fun sheetContentType(sheetContentType: String) {
        cdkBuilder.sheetContentType(sheetContentType)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultNewSheetConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultNewSheetConfigurationProperty,
    ) : DefaultNewSheetConfigurationProperty {
      /**
       * The options that determine the default settings for interactive layout configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultnewsheetconfiguration.html#cfn-quicksight-analysis-defaultnewsheetconfiguration-interactivelayoutconfiguration)
       */
      override fun interactiveLayoutConfiguration(): Any? =
          unwrap(this).getInteractiveLayoutConfiguration()

      /**
       * The options that determine the default settings for a paginated layout configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultnewsheetconfiguration.html#cfn-quicksight-analysis-defaultnewsheetconfiguration-paginatedlayoutconfiguration)
       */
      override fun paginatedLayoutConfiguration(): Any? =
          unwrap(this).getPaginatedLayoutConfiguration()

      /**
       * The option that determines the sheet content type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultnewsheetconfiguration.html#cfn-quicksight-analysis-defaultnewsheetconfiguration-sheetcontenttype)
       */
      override fun sheetContentType(): String? = unwrap(this).getSheetContentType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DefaultNewSheetConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultNewSheetConfigurationProperty):
          DefaultNewSheetConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DefaultNewSheetConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultNewSheetConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableFieldCustomTextContentProperty {
    /**
     * The font configuration of the custom text content for the table URL link content.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomtextcontent.html#cfn-quicksight-analysis-tablefieldcustomtextcontent-fontconfiguration)
     */
    public fun fontConfiguration(): Any

    /**
     * The string value of the custom text content for the table URL link content.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomtextcontent.html#cfn-quicksight-analysis-tablefieldcustomtextcontent-value)
     */
    public fun `value`(): String? = unwrap(this).getValue()

    /**
     * A builder for [TableFieldCustomTextContentProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fontConfiguration The font configuration of the custom text content for the table
       * URL link content. 
       */
      public fun fontConfiguration(fontConfiguration: IResolvable)

      /**
       * @param fontConfiguration The font configuration of the custom text content for the table
       * URL link content. 
       */
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty)

      /**
       * @param fontConfiguration The font configuration of the custom text content for the table
       * URL link content. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1f3fc4cd216588a2f084227c996895c45465d4f5b4140516335a7c53bda81ea2")
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      /**
       * @param value The string value of the custom text content for the table URL link content.
       */
      public fun `value`(`value`: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldCustomTextContentProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldCustomTextContentProperty.builder()

      /**
       * @param fontConfiguration The font configuration of the custom text content for the table
       * URL link content. 
       */
      override fun fontConfiguration(fontConfiguration: IResolvable) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param fontConfiguration The font configuration of the custom text content for the table
       * URL link content. 
       */
      override fun fontConfiguration(fontConfiguration: FontConfigurationProperty) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      /**
       * @param fontConfiguration The font configuration of the custom text content for the table
       * URL link content. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1f3fc4cd216588a2f084227c996895c45465d4f5b4140516335a7c53bda81ea2")
      override
          fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = fontConfiguration(FontConfigurationProperty(fontConfiguration))

      /**
       * @param value The string value of the custom text content for the table URL link content.
       */
      override fun `value`(`value`: String) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldCustomTextContentProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldCustomTextContentProperty,
    ) : TableFieldCustomTextContentProperty {
      /**
       * The font configuration of the custom text content for the table URL link content.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomtextcontent.html#cfn-quicksight-analysis-tablefieldcustomtextcontent-fontconfiguration)
       */
      override fun fontConfiguration(): Any = unwrap(this).getFontConfiguration()

      /**
       * The string value of the custom text content for the table URL link content.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomtextcontent.html#cfn-quicksight-analysis-tablefieldcustomtextcontent-value)
       */
      override fun `value`(): String? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableFieldCustomTextContentProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldCustomTextContentProperty):
          TableFieldCustomTextContentProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldCustomTextContentProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldCustomTextContentProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ReferenceLineDataConfigurationProperty {
    /**
     * The axis binding type of the reference line. Choose one of the following options:.
     *
     * * `PrimaryY`
     * * `SecondaryY`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html#cfn-quicksight-analysis-referencelinedataconfiguration-axisbinding)
     */
    public fun axisBinding(): String? = unwrap(this).getAxisBinding()

    /**
     * The dynamic configuration of the reference line data configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html#cfn-quicksight-analysis-referencelinedataconfiguration-dynamicconfiguration)
     */
    public fun dynamicConfiguration(): Any? = unwrap(this).getDynamicConfiguration()

    /**
     * The series type of the reference line data configuration. Choose one of the following
     * options:.
     *
     * * `BAR`
     * * `LINE`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html#cfn-quicksight-analysis-referencelinedataconfiguration-seriestype)
     */
    public fun seriesType(): String? = unwrap(this).getSeriesType()

    /**
     * The static data configuration of the reference line data configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html#cfn-quicksight-analysis-referencelinedataconfiguration-staticconfiguration)
     */
    public fun staticConfiguration(): Any? = unwrap(this).getStaticConfiguration()

    /**
     * A builder for [ReferenceLineDataConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param axisBinding The axis binding type of the reference line. Choose one of the following
       * options:.
       * * `PrimaryY`
       * * `SecondaryY`
       */
      public fun axisBinding(axisBinding: String)

      /**
       * @param dynamicConfiguration The dynamic configuration of the reference line data
       * configuration.
       */
      public fun dynamicConfiguration(dynamicConfiguration: IResolvable)

      /**
       * @param dynamicConfiguration The dynamic configuration of the reference line data
       * configuration.
       */
      public
          fun dynamicConfiguration(dynamicConfiguration: ReferenceLineDynamicDataConfigurationProperty)

      /**
       * @param dynamicConfiguration The dynamic configuration of the reference line data
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ccd78ed0e710a2f38748a57de32ac21ed91bb7f493e93a783154187865a3dd4")
      public
          fun dynamicConfiguration(dynamicConfiguration: ReferenceLineDynamicDataConfigurationProperty.Builder.() -> Unit)

      /**
       * @param seriesType The series type of the reference line data configuration. Choose one of
       * the following options:.
       * * `BAR`
       * * `LINE`
       */
      public fun seriesType(seriesType: String)

      /**
       * @param staticConfiguration The static data configuration of the reference line data
       * configuration.
       */
      public fun staticConfiguration(staticConfiguration: IResolvable)

      /**
       * @param staticConfiguration The static data configuration of the reference line data
       * configuration.
       */
      public
          fun staticConfiguration(staticConfiguration: ReferenceLineStaticDataConfigurationProperty)

      /**
       * @param staticConfiguration The static data configuration of the reference line data
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a5840fdc61c2dd7a97cd64caeb7bd5f82387458c8ec04fa4addd6d4b5bb64566")
      public
          fun staticConfiguration(staticConfiguration: ReferenceLineStaticDataConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineDataConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineDataConfigurationProperty.builder()

      /**
       * @param axisBinding The axis binding type of the reference line. Choose one of the following
       * options:.
       * * `PrimaryY`
       * * `SecondaryY`
       */
      override fun axisBinding(axisBinding: String) {
        cdkBuilder.axisBinding(axisBinding)
      }

      /**
       * @param dynamicConfiguration The dynamic configuration of the reference line data
       * configuration.
       */
      override fun dynamicConfiguration(dynamicConfiguration: IResolvable) {
        cdkBuilder.dynamicConfiguration(dynamicConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param dynamicConfiguration The dynamic configuration of the reference line data
       * configuration.
       */
      override
          fun dynamicConfiguration(dynamicConfiguration: ReferenceLineDynamicDataConfigurationProperty) {
        cdkBuilder.dynamicConfiguration(dynamicConfiguration.let(ReferenceLineDynamicDataConfigurationProperty::unwrap))
      }

      /**
       * @param dynamicConfiguration The dynamic configuration of the reference line data
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ccd78ed0e710a2f38748a57de32ac21ed91bb7f493e93a783154187865a3dd4")
      override
          fun dynamicConfiguration(dynamicConfiguration: ReferenceLineDynamicDataConfigurationProperty.Builder.() -> Unit):
          Unit =
          dynamicConfiguration(ReferenceLineDynamicDataConfigurationProperty(dynamicConfiguration))

      /**
       * @param seriesType The series type of the reference line data configuration. Choose one of
       * the following options:.
       * * `BAR`
       * * `LINE`
       */
      override fun seriesType(seriesType: String) {
        cdkBuilder.seriesType(seriesType)
      }

      /**
       * @param staticConfiguration The static data configuration of the reference line data
       * configuration.
       */
      override fun staticConfiguration(staticConfiguration: IResolvable) {
        cdkBuilder.staticConfiguration(staticConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param staticConfiguration The static data configuration of the reference line data
       * configuration.
       */
      override
          fun staticConfiguration(staticConfiguration: ReferenceLineStaticDataConfigurationProperty) {
        cdkBuilder.staticConfiguration(staticConfiguration.let(ReferenceLineStaticDataConfigurationProperty::unwrap))
      }

      /**
       * @param staticConfiguration The static data configuration of the reference line data
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a5840fdc61c2dd7a97cd64caeb7bd5f82387458c8ec04fa4addd6d4b5bb64566")
      override
          fun staticConfiguration(staticConfiguration: ReferenceLineStaticDataConfigurationProperty.Builder.() -> Unit):
          Unit =
          staticConfiguration(ReferenceLineStaticDataConfigurationProperty(staticConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineDataConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineDataConfigurationProperty,
    ) : ReferenceLineDataConfigurationProperty {
      /**
       * The axis binding type of the reference line. Choose one of the following options:.
       *
       * * `PrimaryY`
       * * `SecondaryY`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html#cfn-quicksight-analysis-referencelinedataconfiguration-axisbinding)
       */
      override fun axisBinding(): String? = unwrap(this).getAxisBinding()

      /**
       * The dynamic configuration of the reference line data configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html#cfn-quicksight-analysis-referencelinedataconfiguration-dynamicconfiguration)
       */
      override fun dynamicConfiguration(): Any? = unwrap(this).getDynamicConfiguration()

      /**
       * The series type of the reference line data configuration. Choose one of the following
       * options:.
       *
       * * `BAR`
       * * `LINE`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html#cfn-quicksight-analysis-referencelinedataconfiguration-seriestype)
       */
      override fun seriesType(): String? = unwrap(this).getSeriesType()

      /**
       * The static data configuration of the reference line data configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html#cfn-quicksight-analysis-referencelinedataconfiguration-staticconfiguration)
       */
      override fun staticConfiguration(): Any? = unwrap(this).getStaticConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineDataConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineDataConfigurationProperty):
          ReferenceLineDataConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineDataConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineDataConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface CustomActionFilterOperationProperty {
    /**
     * The configuration that chooses the fields to be filtered.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionfilteroperation.html#cfn-quicksight-analysis-customactionfilteroperation-selectedfieldsconfiguration)
     */
    public fun selectedFieldsConfiguration(): Any

    /**
     * The configuration that chooses the target visuals to be filtered.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionfilteroperation.html#cfn-quicksight-analysis-customactionfilteroperation-targetvisualsconfiguration)
     */
    public fun targetVisualsConfiguration(): Any

    /**
     * A builder for [CustomActionFilterOperationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param selectedFieldsConfiguration The configuration that chooses the fields to be
       * filtered. 
       */
      public fun selectedFieldsConfiguration(selectedFieldsConfiguration: IResolvable)

      /**
       * @param selectedFieldsConfiguration The configuration that chooses the fields to be
       * filtered. 
       */
      public
          fun selectedFieldsConfiguration(selectedFieldsConfiguration: FilterOperationSelectedFieldsConfigurationProperty)

      /**
       * @param selectedFieldsConfiguration The configuration that chooses the fields to be
       * filtered. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("774eba98b79f247f003b2d7d0e9bc34a452413a07fcdf712735cb26d4a5dbcee")
      public
          fun selectedFieldsConfiguration(selectedFieldsConfiguration: FilterOperationSelectedFieldsConfigurationProperty.Builder.() -> Unit)

      /**
       * @param targetVisualsConfiguration The configuration that chooses the target visuals to be
       * filtered. 
       */
      public fun targetVisualsConfiguration(targetVisualsConfiguration: IResolvable)

      /**
       * @param targetVisualsConfiguration The configuration that chooses the target visuals to be
       * filtered. 
       */
      public
          fun targetVisualsConfiguration(targetVisualsConfiguration: FilterOperationTargetVisualsConfigurationProperty)

      /**
       * @param targetVisualsConfiguration The configuration that chooses the target visuals to be
       * filtered. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6020bbcec85a157a602871cbf74ac5c4bec9c196c594dfb73464087e402c8c00")
      public
          fun targetVisualsConfiguration(targetVisualsConfiguration: FilterOperationTargetVisualsConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionFilterOperationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionFilterOperationProperty.builder()

      /**
       * @param selectedFieldsConfiguration The configuration that chooses the fields to be
       * filtered. 
       */
      override fun selectedFieldsConfiguration(selectedFieldsConfiguration: IResolvable) {
        cdkBuilder.selectedFieldsConfiguration(selectedFieldsConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param selectedFieldsConfiguration The configuration that chooses the fields to be
       * filtered. 
       */
      override
          fun selectedFieldsConfiguration(selectedFieldsConfiguration: FilterOperationSelectedFieldsConfigurationProperty) {
        cdkBuilder.selectedFieldsConfiguration(selectedFieldsConfiguration.let(FilterOperationSelectedFieldsConfigurationProperty::unwrap))
      }

      /**
       * @param selectedFieldsConfiguration The configuration that chooses the fields to be
       * filtered. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("774eba98b79f247f003b2d7d0e9bc34a452413a07fcdf712735cb26d4a5dbcee")
      override
          fun selectedFieldsConfiguration(selectedFieldsConfiguration: FilterOperationSelectedFieldsConfigurationProperty.Builder.() -> Unit):
          Unit =
          selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty(selectedFieldsConfiguration))

      /**
       * @param targetVisualsConfiguration The configuration that chooses the target visuals to be
       * filtered. 
       */
      override fun targetVisualsConfiguration(targetVisualsConfiguration: IResolvable) {
        cdkBuilder.targetVisualsConfiguration(targetVisualsConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param targetVisualsConfiguration The configuration that chooses the target visuals to be
       * filtered. 
       */
      override
          fun targetVisualsConfiguration(targetVisualsConfiguration: FilterOperationTargetVisualsConfigurationProperty) {
        cdkBuilder.targetVisualsConfiguration(targetVisualsConfiguration.let(FilterOperationTargetVisualsConfigurationProperty::unwrap))
      }

      /**
       * @param targetVisualsConfiguration The configuration that chooses the target visuals to be
       * filtered. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6020bbcec85a157a602871cbf74ac5c4bec9c196c594dfb73464087e402c8c00")
      override
          fun targetVisualsConfiguration(targetVisualsConfiguration: FilterOperationTargetVisualsConfigurationProperty.Builder.() -> Unit):
          Unit =
          targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty(targetVisualsConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionFilterOperationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionFilterOperationProperty,
    ) : CustomActionFilterOperationProperty {
      /**
       * The configuration that chooses the fields to be filtered.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionfilteroperation.html#cfn-quicksight-analysis-customactionfilteroperation-selectedfieldsconfiguration)
       */
      override fun selectedFieldsConfiguration(): Any =
          unwrap(this).getSelectedFieldsConfiguration()

      /**
       * The configuration that chooses the target visuals to be filtered.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionfilteroperation.html#cfn-quicksight-analysis-customactionfilteroperation-targetvisualsconfiguration)
       */
      override fun targetVisualsConfiguration(): Any = unwrap(this).getTargetVisualsConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomActionFilterOperationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionFilterOperationProperty):
          CustomActionFilterOperationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomActionFilterOperationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionFilterOperationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SetParameterValueConfigurationProperty {
    /**
     * The destination parameter name of the `SetParameterValueConfiguration` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-setparametervalueconfiguration.html#cfn-quicksight-analysis-setparametervalueconfiguration-destinationparametername)
     */
    public fun destinationParameterName(): String

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-setparametervalueconfiguration.html#cfn-quicksight-analysis-setparametervalueconfiguration-value)
     */
    public fun `value`(): Any

    /**
     * A builder for [SetParameterValueConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param destinationParameterName The destination parameter name of the
       * `SetParameterValueConfiguration` . 
       */
      public fun destinationParameterName(destinationParameterName: String)

      /**
       * @param value the value to be set. 
       */
      public fun `value`(`value`: IResolvable)

      /**
       * @param value the value to be set. 
       */
      public fun `value`(`value`: DestinationParameterValueConfigurationProperty)

      /**
       * @param value the value to be set. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0135e879d20561e1dc2c05f5c5b33e1b038ba7af934186791d55d82e43fe8178")
      public fun `value`(`value`: DestinationParameterValueConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SetParameterValueConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SetParameterValueConfigurationProperty.builder()

      /**
       * @param destinationParameterName The destination parameter name of the
       * `SetParameterValueConfiguration` . 
       */
      override fun destinationParameterName(destinationParameterName: String) {
        cdkBuilder.destinationParameterName(destinationParameterName)
      }

      /**
       * @param value the value to be set. 
       */
      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      /**
       * @param value the value to be set. 
       */
      override fun `value`(`value`: DestinationParameterValueConfigurationProperty) {
        cdkBuilder.`value`(`value`.let(DestinationParameterValueConfigurationProperty::unwrap))
      }

      /**
       * @param value the value to be set. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0135e879d20561e1dc2c05f5c5b33e1b038ba7af934186791d55d82e43fe8178")
      override
          fun `value`(`value`: DestinationParameterValueConfigurationProperty.Builder.() -> Unit):
          Unit = `value`(DestinationParameterValueConfigurationProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SetParameterValueConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SetParameterValueConfigurationProperty,
    ) : SetParameterValueConfigurationProperty {
      /**
       * The destination parameter name of the `SetParameterValueConfiguration` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-setparametervalueconfiguration.html#cfn-quicksight-analysis-setparametervalueconfiguration-destinationparametername)
       */
      override fun destinationParameterName(): String = unwrap(this).getDestinationParameterName()

      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-setparametervalueconfiguration.html#cfn-quicksight-analysis-setparametervalueconfiguration-value)
       */
      override fun `value`(): Any = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SetParameterValueConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SetParameterValueConfigurationProperty):
          SetParameterValueConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SetParameterValueConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SetParameterValueConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DataBarsOptionsProperty {
    /**
     * The field ID for the data bars options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-databarsoptions.html#cfn-quicksight-analysis-databarsoptions-fieldid)
     */
    public fun fieldId(): String

    /**
     * The color of the negative data bar.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-databarsoptions.html#cfn-quicksight-analysis-databarsoptions-negativecolor)
     */
    public fun negativeColor(): String? = unwrap(this).getNegativeColor()

    /**
     * The color of the positive data bar.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-databarsoptions.html#cfn-quicksight-analysis-databarsoptions-positivecolor)
     */
    public fun positiveColor(): String? = unwrap(this).getPositiveColor()

    /**
     * A builder for [DataBarsOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldId The field ID for the data bars options. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param negativeColor The color of the negative data bar.
       */
      public fun negativeColor(negativeColor: String)

      /**
       * @param positiveColor The color of the positive data bar.
       */
      public fun positiveColor(positiveColor: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataBarsOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataBarsOptionsProperty.builder()

      /**
       * @param fieldId The field ID for the data bars options. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param negativeColor The color of the negative data bar.
       */
      override fun negativeColor(negativeColor: String) {
        cdkBuilder.negativeColor(negativeColor)
      }

      /**
       * @param positiveColor The color of the positive data bar.
       */
      override fun positiveColor(positiveColor: String) {
        cdkBuilder.positiveColor(positiveColor)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataBarsOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataBarsOptionsProperty,
    ) : DataBarsOptionsProperty {
      /**
       * The field ID for the data bars options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-databarsoptions.html#cfn-quicksight-analysis-databarsoptions-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The color of the negative data bar.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-databarsoptions.html#cfn-quicksight-analysis-databarsoptions-negativecolor)
       */
      override fun negativeColor(): String? = unwrap(this).getNegativeColor()

      /**
       * The color of the positive data bar.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-databarsoptions.html#cfn-quicksight-analysis-databarsoptions-positivecolor)
       */
      override fun positiveColor(): String? = unwrap(this).getPositiveColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DataBarsOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DataBarsOptionsProperty):
          DataBarsOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataBarsOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataBarsOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface BoxPlotOptionsProperty {
    /**
     * Determines the visibility of all data points of the box plot.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotoptions.html#cfn-quicksight-analysis-boxplotoptions-alldatapointsvisibility)
     */
    public fun allDataPointsVisibility(): String? = unwrap(this).getAllDataPointsVisibility()

    /**
     * Determines the visibility of the outlier in a box plot.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotoptions.html#cfn-quicksight-analysis-boxplotoptions-outliervisibility)
     */
    public fun outlierVisibility(): String? = unwrap(this).getOutlierVisibility()

    /**
     * The style options of the box plot.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotoptions.html#cfn-quicksight-analysis-boxplotoptions-styleoptions)
     */
    public fun styleOptions(): Any? = unwrap(this).getStyleOptions()

    /**
     * A builder for [BoxPlotOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param allDataPointsVisibility Determines the visibility of all data points of the box
       * plot.
       */
      public fun allDataPointsVisibility(allDataPointsVisibility: String)

      /**
       * @param outlierVisibility Determines the visibility of the outlier in a box plot.
       */
      public fun outlierVisibility(outlierVisibility: String)

      /**
       * @param styleOptions The style options of the box plot.
       */
      public fun styleOptions(styleOptions: IResolvable)

      /**
       * @param styleOptions The style options of the box plot.
       */
      public fun styleOptions(styleOptions: BoxPlotStyleOptionsProperty)

      /**
       * @param styleOptions The style options of the box plot.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dc7cbb81ae0c3513904dfd7c56ba615408a99e3bcebe21f91f938a43f900bb38")
      public fun styleOptions(styleOptions: BoxPlotStyleOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotOptionsProperty.builder()

      /**
       * @param allDataPointsVisibility Determines the visibility of all data points of the box
       * plot.
       */
      override fun allDataPointsVisibility(allDataPointsVisibility: String) {
        cdkBuilder.allDataPointsVisibility(allDataPointsVisibility)
      }

      /**
       * @param outlierVisibility Determines the visibility of the outlier in a box plot.
       */
      override fun outlierVisibility(outlierVisibility: String) {
        cdkBuilder.outlierVisibility(outlierVisibility)
      }

      /**
       * @param styleOptions The style options of the box plot.
       */
      override fun styleOptions(styleOptions: IResolvable) {
        cdkBuilder.styleOptions(styleOptions.let(IResolvable::unwrap))
      }

      /**
       * @param styleOptions The style options of the box plot.
       */
      override fun styleOptions(styleOptions: BoxPlotStyleOptionsProperty) {
        cdkBuilder.styleOptions(styleOptions.let(BoxPlotStyleOptionsProperty::unwrap))
      }

      /**
       * @param styleOptions The style options of the box plot.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dc7cbb81ae0c3513904dfd7c56ba615408a99e3bcebe21f91f938a43f900bb38")
      override fun styleOptions(styleOptions: BoxPlotStyleOptionsProperty.Builder.() -> Unit): Unit
          = styleOptions(BoxPlotStyleOptionsProperty(styleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotOptionsProperty,
    ) : BoxPlotOptionsProperty {
      /**
       * Determines the visibility of all data points of the box plot.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotoptions.html#cfn-quicksight-analysis-boxplotoptions-alldatapointsvisibility)
       */
      override fun allDataPointsVisibility(): String? = unwrap(this).getAllDataPointsVisibility()

      /**
       * Determines the visibility of the outlier in a box plot.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotoptions.html#cfn-quicksight-analysis-boxplotoptions-outliervisibility)
       */
      override fun outlierVisibility(): String? = unwrap(this).getOutlierVisibility()

      /**
       * The style options of the box plot.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotoptions.html#cfn-quicksight-analysis-boxplotoptions-styleoptions)
       */
      override fun styleOptions(): Any? = unwrap(this).getStyleOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): BoxPlotOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotOptionsProperty):
          BoxPlotOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface LayoutProperty {
    /**
     * The configuration that determines what the type of layout for a sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layout.html#cfn-quicksight-analysis-layout-configuration)
     */
    public fun configuration(): Any

    /**
     * A builder for [LayoutProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param configuration The configuration that determines what the type of layout for a sheet.
       * 
       */
      public fun configuration(configuration: IResolvable)

      /**
       * @param configuration The configuration that determines what the type of layout for a sheet.
       * 
       */
      public fun configuration(configuration: LayoutConfigurationProperty)

      /**
       * @param configuration The configuration that determines what the type of layout for a sheet.
       * 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5db422f6655d7329519074ebef4b63a02b2de25cd237a3cdee4e42bfc27d7dc3")
      public fun configuration(configuration: LayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LayoutProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LayoutProperty.builder()

      /**
       * @param configuration The configuration that determines what the type of layout for a sheet.
       * 
       */
      override fun configuration(configuration: IResolvable) {
        cdkBuilder.configuration(configuration.let(IResolvable::unwrap))
      }

      /**
       * @param configuration The configuration that determines what the type of layout for a sheet.
       * 
       */
      override fun configuration(configuration: LayoutConfigurationProperty) {
        cdkBuilder.configuration(configuration.let(LayoutConfigurationProperty::unwrap))
      }

      /**
       * @param configuration The configuration that determines what the type of layout for a sheet.
       * 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5db422f6655d7329519074ebef4b63a02b2de25cd237a3cdee4e42bfc27d7dc3")
      override fun configuration(configuration: LayoutConfigurationProperty.Builder.() -> Unit):
          Unit = configuration(LayoutConfigurationProperty(configuration))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.LayoutProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LayoutProperty,
    ) : LayoutProperty {
      /**
       * The configuration that determines what the type of layout for a sheet.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layout.html#cfn-quicksight-analysis-layout-configuration)
       */
      override fun configuration(): Any = unwrap(this).getConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): LayoutProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LayoutProperty):
          LayoutProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LayoutProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LayoutProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface TableConditionalFormattingOptionProperty {
    /**
     * The cell conditional formatting option for a table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformattingoption.html#cfn-quicksight-analysis-tableconditionalformattingoption-cell)
     */
    public fun cell(): Any? = unwrap(this).getCell()

    /**
     * The row conditional formatting option for a table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformattingoption.html#cfn-quicksight-analysis-tableconditionalformattingoption-row)
     */
    public fun row(): Any? = unwrap(this).getRow()

    /**
     * A builder for [TableConditionalFormattingOptionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param cell The cell conditional formatting option for a table.
       */
      public fun cell(cell: IResolvable)

      /**
       * @param cell The cell conditional formatting option for a table.
       */
      public fun cell(cell: TableCellConditionalFormattingProperty)

      /**
       * @param cell The cell conditional formatting option for a table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1f3cc68fb3e4272f93f206d97c7d29b57e3a4c9b1c669b89af9c3597e6e43ec2")
      public fun cell(cell: TableCellConditionalFormattingProperty.Builder.() -> Unit)

      /**
       * @param row The row conditional formatting option for a table.
       */
      public fun row(row: IResolvable)

      /**
       * @param row The row conditional formatting option for a table.
       */
      public fun row(row: TableRowConditionalFormattingProperty)

      /**
       * @param row The row conditional formatting option for a table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5ad8a6c85096d72f8341416c55d78d49d6869ca70053ca7e829419993adabe21")
      public fun row(row: TableRowConditionalFormattingProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConditionalFormattingOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConditionalFormattingOptionProperty.builder()

      /**
       * @param cell The cell conditional formatting option for a table.
       */
      override fun cell(cell: IResolvable) {
        cdkBuilder.cell(cell.let(IResolvable::unwrap))
      }

      /**
       * @param cell The cell conditional formatting option for a table.
       */
      override fun cell(cell: TableCellConditionalFormattingProperty) {
        cdkBuilder.cell(cell.let(TableCellConditionalFormattingProperty::unwrap))
      }

      /**
       * @param cell The cell conditional formatting option for a table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1f3cc68fb3e4272f93f206d97c7d29b57e3a4c9b1c669b89af9c3597e6e43ec2")
      override fun cell(cell: TableCellConditionalFormattingProperty.Builder.() -> Unit): Unit =
          cell(TableCellConditionalFormattingProperty(cell))

      /**
       * @param row The row conditional formatting option for a table.
       */
      override fun row(row: IResolvable) {
        cdkBuilder.row(row.let(IResolvable::unwrap))
      }

      /**
       * @param row The row conditional formatting option for a table.
       */
      override fun row(row: TableRowConditionalFormattingProperty) {
        cdkBuilder.row(row.let(TableRowConditionalFormattingProperty::unwrap))
      }

      /**
       * @param row The row conditional formatting option for a table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5ad8a6c85096d72f8341416c55d78d49d6869ca70053ca7e829419993adabe21")
      override fun row(row: TableRowConditionalFormattingProperty.Builder.() -> Unit): Unit =
          row(TableRowConditionalFormattingProperty(row))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConditionalFormattingOptionProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConditionalFormattingOptionProperty,
    ) : TableConditionalFormattingOptionProperty {
      /**
       * The cell conditional formatting option for a table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformattingoption.html#cfn-quicksight-analysis-tableconditionalformattingoption-cell)
       */
      override fun cell(): Any? = unwrap(this).getCell()

      /**
       * The row conditional formatting option for a table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformattingoption.html#cfn-quicksight-analysis-tableconditionalformattingoption-row)
       */
      override fun row(): Any? = unwrap(this).getRow()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableConditionalFormattingOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConditionalFormattingOptionProperty):
          TableConditionalFormattingOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableConditionalFormattingOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableConditionalFormattingOptionProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ListControlSearchOptionsProperty {
    /**
     * The visibility configuration of the search options in a list control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontrolsearchoptions.html#cfn-quicksight-analysis-listcontrolsearchoptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [ListControlSearchOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility The visibility configuration of the search options in a list control.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlSearchOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlSearchOptionsProperty.builder()

      /**
       * @param visibility The visibility configuration of the search options in a list control.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlSearchOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlSearchOptionsProperty,
    ) : ListControlSearchOptionsProperty {
      /**
       * The visibility configuration of the search options in a list control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontrolsearchoptions.html#cfn-quicksight-analysis-listcontrolsearchoptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ListControlSearchOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlSearchOptionsProperty):
          ListControlSearchOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ListControlSearchOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlSearchOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface CustomActionSetParametersOperationProperty {
    /**
     * The parameter that determines the value configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionsetparametersoperation.html#cfn-quicksight-analysis-customactionsetparametersoperation-parametervalueconfigurations)
     */
    public fun parameterValueConfigurations(): Any

    /**
     * A builder for [CustomActionSetParametersOperationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param parameterValueConfigurations The parameter that determines the value configuration. 
       */
      public fun parameterValueConfigurations(parameterValueConfigurations: IResolvable)

      /**
       * @param parameterValueConfigurations The parameter that determines the value configuration. 
       */
      public fun parameterValueConfigurations(parameterValueConfigurations: List<Any>)

      /**
       * @param parameterValueConfigurations The parameter that determines the value configuration. 
       */
      public fun parameterValueConfigurations(vararg parameterValueConfigurations: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionSetParametersOperationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionSetParametersOperationProperty.builder()

      /**
       * @param parameterValueConfigurations The parameter that determines the value configuration. 
       */
      override fun parameterValueConfigurations(parameterValueConfigurations: IResolvable) {
        cdkBuilder.parameterValueConfigurations(parameterValueConfigurations.let(IResolvable::unwrap))
      }

      /**
       * @param parameterValueConfigurations The parameter that determines the value configuration. 
       */
      override fun parameterValueConfigurations(parameterValueConfigurations: List<Any>) {
        cdkBuilder.parameterValueConfigurations(parameterValueConfigurations)
      }

      /**
       * @param parameterValueConfigurations The parameter that determines the value configuration. 
       */
      override fun parameterValueConfigurations(vararg parameterValueConfigurations: Any): Unit =
          parameterValueConfigurations(parameterValueConfigurations.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionSetParametersOperationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionSetParametersOperationProperty,
    ) : CustomActionSetParametersOperationProperty {
      /**
       * The parameter that determines the value configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionsetparametersoperation.html#cfn-quicksight-analysis-customactionsetparametersoperation-parametervalueconfigurations)
       */
      override fun parameterValueConfigurations(): Any =
          unwrap(this).getParameterValueConfigurations()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomActionSetParametersOperationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionSetParametersOperationProperty):
          CustomActionSetParametersOperationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomActionSetParametersOperationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionSetParametersOperationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface CustomFilterListConfigurationProperty {
    /**
     * The list of category values for the filter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html#cfn-quicksight-analysis-customfilterlistconfiguration-categoryvalues)
     */
    public fun categoryValues(): List<String> = unwrap(this).getCategoryValues() ?: emptyList()

    /**
     * The match operator that is used to determine if a filter should be applied.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html#cfn-quicksight-analysis-customfilterlistconfiguration-matchoperator)
     */
    public fun matchOperator(): String

    /**
     * This option determines how null values should be treated when filtering data.
     *
     * * `ALL_VALUES` : Include null values in filtered results.
     * * `NULLS_ONLY` : Only include null values in filtered results.
     * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html#cfn-quicksight-analysis-customfilterlistconfiguration-nulloption)
     */
    public fun nullOption(): String

    /**
     * Select all of the values. Null is not the assigned value of select all.
     *
     * * `FILTER_ALL_VALUES`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html#cfn-quicksight-analysis-customfilterlistconfiguration-selectalloptions)
     */
    public fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()

    /**
     * A builder for [CustomFilterListConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryValues The list of category values for the filter.
       */
      public fun categoryValues(categoryValues: List<String>)

      /**
       * @param categoryValues The list of category values for the filter.
       */
      public fun categoryValues(vararg categoryValues: String)

      /**
       * @param matchOperator The match operator that is used to determine if a filter should be
       * applied. 
       */
      public fun matchOperator(matchOperator: String)

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data. 
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      public fun nullOption(nullOption: String)

      /**
       * @param selectAllOptions Select all of the values. Null is not the assigned value of select
       * all.
       * * `FILTER_ALL_VALUES`
       */
      public fun selectAllOptions(selectAllOptions: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomFilterListConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomFilterListConfigurationProperty.builder()

      /**
       * @param categoryValues The list of category values for the filter.
       */
      override fun categoryValues(categoryValues: List<String>) {
        cdkBuilder.categoryValues(categoryValues)
      }

      /**
       * @param categoryValues The list of category values for the filter.
       */
      override fun categoryValues(vararg categoryValues: String): Unit =
          categoryValues(categoryValues.toList())

      /**
       * @param matchOperator The match operator that is used to determine if a filter should be
       * applied. 
       */
      override fun matchOperator(matchOperator: String) {
        cdkBuilder.matchOperator(matchOperator)
      }

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data. 
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      /**
       * @param selectAllOptions Select all of the values. Null is not the assigned value of select
       * all.
       * * `FILTER_ALL_VALUES`
       */
      override fun selectAllOptions(selectAllOptions: String) {
        cdkBuilder.selectAllOptions(selectAllOptions)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomFilterListConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomFilterListConfigurationProperty,
    ) : CustomFilterListConfigurationProperty {
      /**
       * The list of category values for the filter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html#cfn-quicksight-analysis-customfilterlistconfiguration-categoryvalues)
       */
      override fun categoryValues(): List<String> = unwrap(this).getCategoryValues() ?: emptyList()

      /**
       * The match operator that is used to determine if a filter should be applied.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html#cfn-quicksight-analysis-customfilterlistconfiguration-matchoperator)
       */
      override fun matchOperator(): String = unwrap(this).getMatchOperator()

      /**
       * This option determines how null values should be treated when filtering data.
       *
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html#cfn-quicksight-analysis-customfilterlistconfiguration-nulloption)
       */
      override fun nullOption(): String = unwrap(this).getNullOption()

      /**
       * Select all of the values. Null is not the assigned value of select all.
       *
       * * `FILTER_ALL_VALUES`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html#cfn-quicksight-analysis-customfilterlistconfiguration-selectalloptions)
       */
      override fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomFilterListConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomFilterListConfigurationProperty):
          CustomFilterListConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomFilterListConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomFilterListConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DateTimeValueWhenUnsetConfigurationProperty {
    /**
     * A custom value that's used when the value of a parameter isn't set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimevaluewhenunsetconfiguration.html#cfn-quicksight-analysis-datetimevaluewhenunsetconfiguration-customvalue)
     */
    public fun customValue(): String? = unwrap(this).getCustomValue()

    /**
     * The built-in options for default values. The value can be one of the following:.
     *
     * * `RECOMMENDED` : The recommended value.
     * * `NULL` : The `NULL` value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimevaluewhenunsetconfiguration.html#cfn-quicksight-analysis-datetimevaluewhenunsetconfiguration-valuewhenunsetoption)
     */
    public fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()

    /**
     * A builder for [DateTimeValueWhenUnsetConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customValue A custom value that's used when the value of a parameter isn't set.
       */
      public fun customValue(customValue: String)

      /**
       * @param valueWhenUnsetOption The built-in options for default values. The value can be one
       * of the following:.
       * * `RECOMMENDED` : The recommended value.
       * * `NULL` : The `NULL` value.
       */
      public fun valueWhenUnsetOption(valueWhenUnsetOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeValueWhenUnsetConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeValueWhenUnsetConfigurationProperty.builder()

      /**
       * @param customValue A custom value that's used when the value of a parameter isn't set.
       */
      override fun customValue(customValue: String) {
        cdkBuilder.customValue(customValue)
      }

      /**
       * @param valueWhenUnsetOption The built-in options for default values. The value can be one
       * of the following:.
       * * `RECOMMENDED` : The recommended value.
       * * `NULL` : The `NULL` value.
       */
      override fun valueWhenUnsetOption(valueWhenUnsetOption: String) {
        cdkBuilder.valueWhenUnsetOption(valueWhenUnsetOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeValueWhenUnsetConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeValueWhenUnsetConfigurationProperty,
    ) : DateTimeValueWhenUnsetConfigurationProperty {
      /**
       * A custom value that's used when the value of a parameter isn't set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimevaluewhenunsetconfiguration.html#cfn-quicksight-analysis-datetimevaluewhenunsetconfiguration-customvalue)
       */
      override fun customValue(): String? = unwrap(this).getCustomValue()

      /**
       * The built-in options for default values. The value can be one of the following:.
       *
       * * `RECOMMENDED` : The recommended value.
       * * `NULL` : The `NULL` value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimevaluewhenunsetconfiguration.html#cfn-quicksight-analysis-datetimevaluewhenunsetconfiguration-valuewhenunsetoption)
       */
      override fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DateTimeValueWhenUnsetConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeValueWhenUnsetConfigurationProperty):
          DateTimeValueWhenUnsetConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimeValueWhenUnsetConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeValueWhenUnsetConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SectionBasedLayoutPaperCanvasSizeOptionsProperty {
    /**
     * Defines the spacing between the canvas content and the top, bottom, left, and right edges.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions-papermargin)
     */
    public fun paperMargin(): Any? = unwrap(this).getPaperMargin()

    /**
     * The paper orientation that is used to define canvas dimensions. Choose one of the following
     * options:.
     *
     * * PORTRAIT
     * * LANDSCAPE
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions-paperorientation)
     */
    public fun paperOrientation(): String? = unwrap(this).getPaperOrientation()

    /**
     * The paper size that is used to define canvas dimensions.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions-papersize)
     */
    public fun paperSize(): String? = unwrap(this).getPaperSize()

    /**
     * A builder for [SectionBasedLayoutPaperCanvasSizeOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param paperMargin Defines the spacing between the canvas content and the top, bottom,
       * left, and right edges.
       */
      public fun paperMargin(paperMargin: IResolvable)

      /**
       * @param paperMargin Defines the spacing between the canvas content and the top, bottom,
       * left, and right edges.
       */
      public fun paperMargin(paperMargin: SpacingProperty)

      /**
       * @param paperMargin Defines the spacing between the canvas content and the top, bottom,
       * left, and right edges.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f167c9583f3db5523065c322ea7c31de2aa8e779db37b3127a1530c1e03f3d4")
      public fun paperMargin(paperMargin: SpacingProperty.Builder.() -> Unit)

      /**
       * @param paperOrientation The paper orientation that is used to define canvas dimensions.
       * Choose one of the following options:.
       * * PORTRAIT
       * * LANDSCAPE
       */
      public fun paperOrientation(paperOrientation: String)

      /**
       * @param paperSize The paper size that is used to define canvas dimensions.
       */
      public fun paperSize(paperSize: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutPaperCanvasSizeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()

      /**
       * @param paperMargin Defines the spacing between the canvas content and the top, bottom,
       * left, and right edges.
       */
      override fun paperMargin(paperMargin: IResolvable) {
        cdkBuilder.paperMargin(paperMargin.let(IResolvable::unwrap))
      }

      /**
       * @param paperMargin Defines the spacing between the canvas content and the top, bottom,
       * left, and right edges.
       */
      override fun paperMargin(paperMargin: SpacingProperty) {
        cdkBuilder.paperMargin(paperMargin.let(SpacingProperty::unwrap))
      }

      /**
       * @param paperMargin Defines the spacing between the canvas content and the top, bottom,
       * left, and right edges.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f167c9583f3db5523065c322ea7c31de2aa8e779db37b3127a1530c1e03f3d4")
      override fun paperMargin(paperMargin: SpacingProperty.Builder.() -> Unit): Unit =
          paperMargin(SpacingProperty(paperMargin))

      /**
       * @param paperOrientation The paper orientation that is used to define canvas dimensions.
       * Choose one of the following options:.
       * * PORTRAIT
       * * LANDSCAPE
       */
      override fun paperOrientation(paperOrientation: String) {
        cdkBuilder.paperOrientation(paperOrientation)
      }

      /**
       * @param paperSize The paper size that is used to define canvas dimensions.
       */
      override fun paperSize(paperSize: String) {
        cdkBuilder.paperSize(paperSize)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutPaperCanvasSizeOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutPaperCanvasSizeOptionsProperty,
    ) : SectionBasedLayoutPaperCanvasSizeOptionsProperty {
      /**
       * Defines the spacing between the canvas content and the top, bottom, left, and right edges.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions-papermargin)
       */
      override fun paperMargin(): Any? = unwrap(this).getPaperMargin()

      /**
       * The paper orientation that is used to define canvas dimensions. Choose one of the following
       * options:.
       *
       * * PORTRAIT
       * * LANDSCAPE
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions-paperorientation)
       */
      override fun paperOrientation(): String? = unwrap(this).getPaperOrientation()

      /**
       * The paper size that is used to define canvas dimensions.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions-papersize)
       */
      override fun paperSize(): String? = unwrap(this).getPaperSize()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SectionBasedLayoutPaperCanvasSizeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutPaperCanvasSizeOptionsProperty):
          SectionBasedLayoutPaperCanvasSizeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionBasedLayoutPaperCanvasSizeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionBasedLayoutPaperCanvasSizeOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface AxisTickLabelOptionsProperty {
    /**
     * Determines whether or not the axis ticks are visible.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisticklabeloptions.html#cfn-quicksight-analysis-axisticklabeloptions-labeloptions)
     */
    public fun labelOptions(): Any? = unwrap(this).getLabelOptions()

    /**
     * The rotation angle of the axis tick labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisticklabeloptions.html#cfn-quicksight-analysis-axisticklabeloptions-rotationangle)
     */
    public fun rotationAngle(): Number? = unwrap(this).getRotationAngle()

    /**
     * A builder for [AxisTickLabelOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param labelOptions Determines whether or not the axis ticks are visible.
       */
      public fun labelOptions(labelOptions: IResolvable)

      /**
       * @param labelOptions Determines whether or not the axis ticks are visible.
       */
      public fun labelOptions(labelOptions: LabelOptionsProperty)

      /**
       * @param labelOptions Determines whether or not the axis ticks are visible.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d486098d2fd1cbe0b5ac682257e2fa2e8d45a6a41fe3909f102f4f0420fba5f7")
      public fun labelOptions(labelOptions: LabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param rotationAngle The rotation angle of the axis tick labels.
       */
      public fun rotationAngle(rotationAngle: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisTickLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisTickLabelOptionsProperty.builder()

      /**
       * @param labelOptions Determines whether or not the axis ticks are visible.
       */
      override fun labelOptions(labelOptions: IResolvable) {
        cdkBuilder.labelOptions(labelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param labelOptions Determines whether or not the axis ticks are visible.
       */
      override fun labelOptions(labelOptions: LabelOptionsProperty) {
        cdkBuilder.labelOptions(labelOptions.let(LabelOptionsProperty::unwrap))
      }

      /**
       * @param labelOptions Determines whether or not the axis ticks are visible.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d486098d2fd1cbe0b5ac682257e2fa2e8d45a6a41fe3909f102f4f0420fba5f7")
      override fun labelOptions(labelOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          labelOptions(LabelOptionsProperty(labelOptions))

      /**
       * @param rotationAngle The rotation angle of the axis tick labels.
       */
      override fun rotationAngle(rotationAngle: Number) {
        cdkBuilder.rotationAngle(rotationAngle)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisTickLabelOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisTickLabelOptionsProperty,
    ) : AxisTickLabelOptionsProperty {
      /**
       * Determines whether or not the axis ticks are visible.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisticklabeloptions.html#cfn-quicksight-analysis-axisticklabeloptions-labeloptions)
       */
      override fun labelOptions(): Any? = unwrap(this).getLabelOptions()

      /**
       * The rotation angle of the axis tick labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisticklabeloptions.html#cfn-quicksight-analysis-axisticklabeloptions-rotationangle)
       */
      override fun rotationAngle(): Number? = unwrap(this).getRotationAngle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AxisTickLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisTickLabelOptionsProperty):
          AxisTickLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisTickLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisTickLabelOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface AnalysisDefaultsProperty {
    /**
     * The configuration for default new sheet settings.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefaults.html#cfn-quicksight-analysis-analysisdefaults-defaultnewsheetconfiguration)
     */
    public fun defaultNewSheetConfiguration(): Any

    /**
     * A builder for [AnalysisDefaultsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param defaultNewSheetConfiguration The configuration for default new sheet settings. 
       */
      public fun defaultNewSheetConfiguration(defaultNewSheetConfiguration: IResolvable)

      /**
       * @param defaultNewSheetConfiguration The configuration for default new sheet settings. 
       */
      public
          fun defaultNewSheetConfiguration(defaultNewSheetConfiguration: DefaultNewSheetConfigurationProperty)

      /**
       * @param defaultNewSheetConfiguration The configuration for default new sheet settings. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e3dced2eda4f6458963086480e06cfbc2d3ee33064bf9f32d3778eb7d3feaf0a")
      public
          fun defaultNewSheetConfiguration(defaultNewSheetConfiguration: DefaultNewSheetConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisDefaultsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisDefaultsProperty.builder()

      /**
       * @param defaultNewSheetConfiguration The configuration for default new sheet settings. 
       */
      override fun defaultNewSheetConfiguration(defaultNewSheetConfiguration: IResolvable) {
        cdkBuilder.defaultNewSheetConfiguration(defaultNewSheetConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param defaultNewSheetConfiguration The configuration for default new sheet settings. 
       */
      override
          fun defaultNewSheetConfiguration(defaultNewSheetConfiguration: DefaultNewSheetConfigurationProperty) {
        cdkBuilder.defaultNewSheetConfiguration(defaultNewSheetConfiguration.let(DefaultNewSheetConfigurationProperty::unwrap))
      }

      /**
       * @param defaultNewSheetConfiguration The configuration for default new sheet settings. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e3dced2eda4f6458963086480e06cfbc2d3ee33064bf9f32d3778eb7d3feaf0a")
      override
          fun defaultNewSheetConfiguration(defaultNewSheetConfiguration: DefaultNewSheetConfigurationProperty.Builder.() -> Unit):
          Unit =
          defaultNewSheetConfiguration(DefaultNewSheetConfigurationProperty(defaultNewSheetConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisDefaultsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisDefaultsProperty,
    ) : AnalysisDefaultsProperty {
      /**
       * The configuration for default new sheet settings.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefaults.html#cfn-quicksight-analysis-analysisdefaults-defaultnewsheetconfiguration)
       */
      override fun defaultNewSheetConfiguration(): Any =
          unwrap(this).getDefaultNewSheetConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AnalysisDefaultsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisDefaultsProperty):
          AnalysisDefaultsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AnalysisDefaultsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisDefaultsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface LineSeriesAxisDisplayOptionsProperty {
    /**
     * The options that determine the presentation of the line series axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-lineseriesaxisdisplayoptions.html#cfn-quicksight-analysis-lineseriesaxisdisplayoptions-axisoptions)
     */
    public fun axisOptions(): Any? = unwrap(this).getAxisOptions()

    /**
     * The configuration options that determine how missing data is treated during the rendering of
     * a line chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-lineseriesaxisdisplayoptions.html#cfn-quicksight-analysis-lineseriesaxisdisplayoptions-missingdataconfigurations)
     */
    public fun missingDataConfigurations(): Any? = unwrap(this).getMissingDataConfigurations()

    /**
     * A builder for [LineSeriesAxisDisplayOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param axisOptions The options that determine the presentation of the line series axis.
       */
      public fun axisOptions(axisOptions: IResolvable)

      /**
       * @param axisOptions The options that determine the presentation of the line series axis.
       */
      public fun axisOptions(axisOptions: AxisDisplayOptionsProperty)

      /**
       * @param axisOptions The options that determine the presentation of the line series axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a98a50088097c9b6453044d72431d69c76daccad3d7694497c50ed2617398dce")
      public fun axisOptions(axisOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param missingDataConfigurations The configuration options that determine how missing data
       * is treated during the rendering of a line chart.
       */
      public fun missingDataConfigurations(missingDataConfigurations: IResolvable)

      /**
       * @param missingDataConfigurations The configuration options that determine how missing data
       * is treated during the rendering of a line chart.
       */
      public fun missingDataConfigurations(missingDataConfigurations: List<Any>)

      /**
       * @param missingDataConfigurations The configuration options that determine how missing data
       * is treated during the rendering of a line chart.
       */
      public fun missingDataConfigurations(vararg missingDataConfigurations: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineSeriesAxisDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineSeriesAxisDisplayOptionsProperty.builder()

      /**
       * @param axisOptions The options that determine the presentation of the line series axis.
       */
      override fun axisOptions(axisOptions: IResolvable) {
        cdkBuilder.axisOptions(axisOptions.let(IResolvable::unwrap))
      }

      /**
       * @param axisOptions The options that determine the presentation of the line series axis.
       */
      override fun axisOptions(axisOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.axisOptions(axisOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param axisOptions The options that determine the presentation of the line series axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a98a50088097c9b6453044d72431d69c76daccad3d7694497c50ed2617398dce")
      override fun axisOptions(axisOptions: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          axisOptions(AxisDisplayOptionsProperty(axisOptions))

      /**
       * @param missingDataConfigurations The configuration options that determine how missing data
       * is treated during the rendering of a line chart.
       */
      override fun missingDataConfigurations(missingDataConfigurations: IResolvable) {
        cdkBuilder.missingDataConfigurations(missingDataConfigurations.let(IResolvable::unwrap))
      }

      /**
       * @param missingDataConfigurations The configuration options that determine how missing data
       * is treated during the rendering of a line chart.
       */
      override fun missingDataConfigurations(missingDataConfigurations: List<Any>) {
        cdkBuilder.missingDataConfigurations(missingDataConfigurations)
      }

      /**
       * @param missingDataConfigurations The configuration options that determine how missing data
       * is treated during the rendering of a line chart.
       */
      override fun missingDataConfigurations(vararg missingDataConfigurations: Any): Unit =
          missingDataConfigurations(missingDataConfigurations.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineSeriesAxisDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineSeriesAxisDisplayOptionsProperty,
    ) : LineSeriesAxisDisplayOptionsProperty {
      /**
       * The options that determine the presentation of the line series axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-lineseriesaxisdisplayoptions.html#cfn-quicksight-analysis-lineseriesaxisdisplayoptions-axisoptions)
       */
      override fun axisOptions(): Any? = unwrap(this).getAxisOptions()

      /**
       * The configuration options that determine how missing data is treated during the rendering
       * of a line chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-lineseriesaxisdisplayoptions.html#cfn-quicksight-analysis-lineseriesaxisdisplayoptions-missingdataconfigurations)
       */
      override fun missingDataConfigurations(): Any? = unwrap(this).getMissingDataConfigurations()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          LineSeriesAxisDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LineSeriesAxisDisplayOptionsProperty):
          LineSeriesAxisDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineSeriesAxisDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineSeriesAxisDisplayOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration settings of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The conditional formatting for a `PivotTableVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-conditionalformatting)
     */
    public fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers..
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [PivotTableVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: PivotTableConfigurationProperty)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("68140260bfccc2ab910020a0699edc50b38a27543c9a39ebb8fde070a0592cae")
      public
          fun chartConfiguration(chartConfiguration: PivotTableConfigurationProperty.Builder.() -> Unit)

      /**
       * @param conditionalFormatting The conditional formatting for a `PivotTableVisual` .
       */
      public fun conditionalFormatting(conditionalFormatting: IResolvable)

      /**
       * @param conditionalFormatting The conditional formatting for a `PivotTableVisual` .
       */
      public
          fun conditionalFormatting(conditionalFormatting: PivotTableConditionalFormattingProperty)

      /**
       * @param conditionalFormatting The conditional formatting for a `PivotTableVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fb0fc72d237f41d1b0bc4663c8c9d175f8fa2342e97b60ceb5b21cfea25a025a")
      public
          fun conditionalFormatting(conditionalFormatting: PivotTableConditionalFormattingProperty.Builder.() -> Unit)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fcc0a41edf4641ef2f4d4e6a2bdb5b87d289d4ecfed636a2863d460d1a311136")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c2c2d09925615eb39d735306a6bbc3e56f2401fe90e9b2ae55ac3ed75deb405c")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: PivotTableConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(PivotTableConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("68140260bfccc2ab910020a0699edc50b38a27543c9a39ebb8fde070a0592cae")
      override
          fun chartConfiguration(chartConfiguration: PivotTableConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(PivotTableConfigurationProperty(chartConfiguration))

      /**
       * @param conditionalFormatting The conditional formatting for a `PivotTableVisual` .
       */
      override fun conditionalFormatting(conditionalFormatting: IResolvable) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(IResolvable::unwrap))
      }

      /**
       * @param conditionalFormatting The conditional formatting for a `PivotTableVisual` .
       */
      override
          fun conditionalFormatting(conditionalFormatting: PivotTableConditionalFormattingProperty) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(PivotTableConditionalFormattingProperty::unwrap))
      }

      /**
       * @param conditionalFormatting The conditional formatting for a `PivotTableVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fb0fc72d237f41d1b0bc4663c8c9d175f8fa2342e97b60ceb5b21cfea25a025a")
      override
          fun conditionalFormatting(conditionalFormatting: PivotTableConditionalFormattingProperty.Builder.() -> Unit):
          Unit =
          conditionalFormatting(PivotTableConditionalFormattingProperty(conditionalFormatting))

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fcc0a41edf4641ef2f4d4e6a2bdb5b87d289d4ecfed636a2863d460d1a311136")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c2c2d09925615eb39d735306a6bbc3e56f2401fe90e9b2ae55ac3ed75deb405c")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableVisualProperty,
    ) : PivotTableVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration settings of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The conditional formatting for a `PivotTableVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-conditionalformatting)
       */
      override fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableVisualProperty):
          PivotTableVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableVisualProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface DefaultPaginatedLayoutConfigurationProperty {
    /**
     * The options that determine the default settings for a section-based layout configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultpaginatedlayoutconfiguration.html#cfn-quicksight-analysis-defaultpaginatedlayoutconfiguration-sectionbased)
     */
    public fun sectionBased(): Any? = unwrap(this).getSectionBased()

    /**
     * A builder for [DefaultPaginatedLayoutConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param sectionBased The options that determine the default settings for a section-based
       * layout configuration.
       */
      public fun sectionBased(sectionBased: IResolvable)

      /**
       * @param sectionBased The options that determine the default settings for a section-based
       * layout configuration.
       */
      public fun sectionBased(sectionBased: DefaultSectionBasedLayoutConfigurationProperty)

      /**
       * @param sectionBased The options that determine the default settings for a section-based
       * layout configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8684309fb10389272de1c3978361259f33265ea1cff5c3b1c310f119e8be386b")
      public
          fun sectionBased(sectionBased: DefaultSectionBasedLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultPaginatedLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultPaginatedLayoutConfigurationProperty.builder()

      /**
       * @param sectionBased The options that determine the default settings for a section-based
       * layout configuration.
       */
      override fun sectionBased(sectionBased: IResolvable) {
        cdkBuilder.sectionBased(sectionBased.let(IResolvable::unwrap))
      }

      /**
       * @param sectionBased The options that determine the default settings for a section-based
       * layout configuration.
       */
      override fun sectionBased(sectionBased: DefaultSectionBasedLayoutConfigurationProperty) {
        cdkBuilder.sectionBased(sectionBased.let(DefaultSectionBasedLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param sectionBased The options that determine the default settings for a section-based
       * layout configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8684309fb10389272de1c3978361259f33265ea1cff5c3b1c310f119e8be386b")
      override
          fun sectionBased(sectionBased: DefaultSectionBasedLayoutConfigurationProperty.Builder.() -> Unit):
          Unit = sectionBased(DefaultSectionBasedLayoutConfigurationProperty(sectionBased))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultPaginatedLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultPaginatedLayoutConfigurationProperty,
    ) : DefaultPaginatedLayoutConfigurationProperty {
      /**
       * The options that determine the default settings for a section-based layout configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultpaginatedlayoutconfiguration.html#cfn-quicksight-analysis-defaultpaginatedlayoutconfiguration-sectionbased)
       */
      override fun sectionBased(): Any? = unwrap(this).getSectionBased()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DefaultPaginatedLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultPaginatedLayoutConfigurationProperty):
          DefaultPaginatedLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DefaultPaginatedLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultPaginatedLayoutConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ForecastComputationProperty {
    /**
     * The ID for a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-computationid)
     */
    public fun computationId(): String

    /**
     * The custom seasonality value setup of a forecast computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-customseasonalityvalue)
     */
    public fun customSeasonalityValue(): Number? = unwrap(this).getCustomSeasonalityValue()

    /**
     * The lower boundary setup of a forecast computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-lowerboundary)
     */
    public fun lowerBoundary(): Number? = unwrap(this).getLowerBoundary()

    /**
     * The name of a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * The periods backward setup of a forecast computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-periodsbackward)
     */
    public fun periodsBackward(): Number? = unwrap(this).getPeriodsBackward()

    /**
     * The periods forward setup of a forecast computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-periodsforward)
     */
    public fun periodsForward(): Number? = unwrap(this).getPeriodsForward()

    /**
     * The prediction interval setup of a forecast computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-predictioninterval)
     */
    public fun predictionInterval(): Number? = unwrap(this).getPredictionInterval()

    /**
     * The seasonality setup of a forecast computation. Choose one of the following options:.
     *
     * * `AUTOMATIC`
     * * `CUSTOM` : Checks the custom seasonality value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-seasonality)
     */
    public fun seasonality(): String? = unwrap(this).getSeasonality()

    /**
     * The time field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-time)
     */
    public fun time(): Any? = unwrap(this).getTime()

    /**
     * The upper boundary setup of a forecast computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-upperboundary)
     */
    public fun upperBoundary(): Number? = unwrap(this).getUpperBoundary()

    /**
     * The value field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-value)
     */
    public fun `value`(): Any? = unwrap(this).getValue()

    /**
     * A builder for [ForecastComputationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param computationId The ID for a computation. 
       */
      public fun computationId(computationId: String)

      /**
       * @param customSeasonalityValue The custom seasonality value setup of a forecast computation.
       */
      public fun customSeasonalityValue(customSeasonalityValue: Number)

      /**
       * @param lowerBoundary The lower boundary setup of a forecast computation.
       */
      public fun lowerBoundary(lowerBoundary: Number)

      /**
       * @param name The name of a computation.
       */
      public fun name(name: String)

      /**
       * @param periodsBackward The periods backward setup of a forecast computation.
       */
      public fun periodsBackward(periodsBackward: Number)

      /**
       * @param periodsForward The periods forward setup of a forecast computation.
       */
      public fun periodsForward(periodsForward: Number)

      /**
       * @param predictionInterval The prediction interval setup of a forecast computation.
       */
      public fun predictionInterval(predictionInterval: Number)

      /**
       * @param seasonality The seasonality setup of a forecast computation. Choose one of the
       * following options:.
       * * `AUTOMATIC`
       * * `CUSTOM` : Checks the custom seasonality value.
       */
      public fun seasonality(seasonality: String)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: IResolvable)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: DimensionFieldProperty)

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ff2d7cd895aaa87e9acd2655aa31ce5c6fae08c0154731376bdbb81cdbf1f82e")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)

      /**
       * @param upperBoundary The upper boundary setup of a forecast computation.
       */
      public fun upperBoundary(upperBoundary: Number)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: IResolvable)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: MeasureFieldProperty)

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5da1e6c1a3fe09f7b3174c2191917b7c91ed05c4cb2c70fecfa6b215c448e533")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastComputationProperty.builder()

      /**
       * @param computationId The ID for a computation. 
       */
      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      /**
       * @param customSeasonalityValue The custom seasonality value setup of a forecast computation.
       */
      override fun customSeasonalityValue(customSeasonalityValue: Number) {
        cdkBuilder.customSeasonalityValue(customSeasonalityValue)
      }

      /**
       * @param lowerBoundary The lower boundary setup of a forecast computation.
       */
      override fun lowerBoundary(lowerBoundary: Number) {
        cdkBuilder.lowerBoundary(lowerBoundary)
      }

      /**
       * @param name The name of a computation.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param periodsBackward The periods backward setup of a forecast computation.
       */
      override fun periodsBackward(periodsBackward: Number) {
        cdkBuilder.periodsBackward(periodsBackward)
      }

      /**
       * @param periodsForward The periods forward setup of a forecast computation.
       */
      override fun periodsForward(periodsForward: Number) {
        cdkBuilder.periodsForward(periodsForward)
      }

      /**
       * @param predictionInterval The prediction interval setup of a forecast computation.
       */
      override fun predictionInterval(predictionInterval: Number) {
        cdkBuilder.predictionInterval(predictionInterval)
      }

      /**
       * @param seasonality The seasonality setup of a forecast computation. Choose one of the
       * following options:.
       * * `AUTOMATIC`
       * * `CUSTOM` : Checks the custom seasonality value.
       */
      override fun seasonality(seasonality: String) {
        cdkBuilder.seasonality(seasonality)
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ff2d7cd895aaa87e9acd2655aa31ce5c6fae08c0154731376bdbb81cdbf1f82e")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      /**
       * @param upperBoundary The upper boundary setup of a forecast computation.
       */
      override fun upperBoundary(upperBoundary: Number) {
        cdkBuilder.upperBoundary(upperBoundary)
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5da1e6c1a3fe09f7b3174c2191917b7c91ed05c4cb2c70fecfa6b215c448e533")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastComputationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastComputationProperty,
    ) : ForecastComputationProperty {
      /**
       * The ID for a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-computationid)
       */
      override fun computationId(): String = unwrap(this).getComputationId()

      /**
       * The custom seasonality value setup of a forecast computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-customseasonalityvalue)
       */
      override fun customSeasonalityValue(): Number? = unwrap(this).getCustomSeasonalityValue()

      /**
       * The lower boundary setup of a forecast computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-lowerboundary)
       */
      override fun lowerBoundary(): Number? = unwrap(this).getLowerBoundary()

      /**
       * The name of a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-name)
       */
      override fun name(): String? = unwrap(this).getName()

      /**
       * The periods backward setup of a forecast computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-periodsbackward)
       */
      override fun periodsBackward(): Number? = unwrap(this).getPeriodsBackward()

      /**
       * The periods forward setup of a forecast computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-periodsforward)
       */
      override fun periodsForward(): Number? = unwrap(this).getPeriodsForward()

      /**
       * The prediction interval setup of a forecast computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-predictioninterval)
       */
      override fun predictionInterval(): Number? = unwrap(this).getPredictionInterval()

      /**
       * The seasonality setup of a forecast computation. Choose one of the following options:.
       *
       * * `AUTOMATIC`
       * * `CUSTOM` : Checks the custom seasonality value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-seasonality)
       */
      override fun seasonality(): String? = unwrap(this).getSeasonality()

      /**
       * The time field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-time)
       */
      override fun time(): Any? = unwrap(this).getTime()

      /**
       * The upper boundary setup of a forecast computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-upperboundary)
       */
      override fun upperBoundary(): Number? = unwrap(this).getUpperBoundary()

      /**
       * The value field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-value)
       */
      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ForecastComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastComputationProperty):
          ForecastComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ForecastComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ForecastComputationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ArcAxisConfigurationProperty {
    /**
     * The arc axis range of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisconfiguration.html#cfn-quicksight-analysis-arcaxisconfiguration-range)
     */
    public fun range(): Any? = unwrap(this).getRange()

    /**
     * The reserved range of the arc axis.
     *
     * Default: - 0
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisconfiguration.html#cfn-quicksight-analysis-arcaxisconfiguration-reserverange)
     */
    public fun reserveRange(): Number? = unwrap(this).getReserveRange()

    /**
     * A builder for [ArcAxisConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param range The arc axis range of a `GaugeChartVisual` .
       */
      public fun range(range: IResolvable)

      /**
       * @param range The arc axis range of a `GaugeChartVisual` .
       */
      public fun range(range: ArcAxisDisplayRangeProperty)

      /**
       * @param range The arc axis range of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b6fa86580e86ac04a39d62d8074ee16281c4a16edf50094d4c99aa0b5f1229dd")
      public fun range(range: ArcAxisDisplayRangeProperty.Builder.() -> Unit)

      /**
       * @param reserveRange The reserved range of the arc axis.
       */
      public fun reserveRange(reserveRange: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcAxisConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcAxisConfigurationProperty.builder()

      /**
       * @param range The arc axis range of a `GaugeChartVisual` .
       */
      override fun range(range: IResolvable) {
        cdkBuilder.range(range.let(IResolvable::unwrap))
      }

      /**
       * @param range The arc axis range of a `GaugeChartVisual` .
       */
      override fun range(range: ArcAxisDisplayRangeProperty) {
        cdkBuilder.range(range.let(ArcAxisDisplayRangeProperty::unwrap))
      }

      /**
       * @param range The arc axis range of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b6fa86580e86ac04a39d62d8074ee16281c4a16edf50094d4c99aa0b5f1229dd")
      override fun range(range: ArcAxisDisplayRangeProperty.Builder.() -> Unit): Unit =
          range(ArcAxisDisplayRangeProperty(range))

      /**
       * @param reserveRange The reserved range of the arc axis.
       */
      override fun reserveRange(reserveRange: Number) {
        cdkBuilder.reserveRange(reserveRange)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcAxisConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcAxisConfigurationProperty,
    ) : ArcAxisConfigurationProperty {
      /**
       * The arc axis range of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisconfiguration.html#cfn-quicksight-analysis-arcaxisconfiguration-range)
       */
      override fun range(): Any? = unwrap(this).getRange()

      /**
       * The reserved range of the arc axis.
       *
       * Default: - 0
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisconfiguration.html#cfn-quicksight-analysis-arcaxisconfiguration-reserverange)
       */
      override fun reserveRange(): Number? = unwrap(this).getReserveRange()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ArcAxisConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcAxisConfigurationProperty):
          ArcAxisConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ArcAxisConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcAxisConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface CustomActionURLOperationProperty {
    /**
     * The target of the `CustomActionURLOperation` .
     *
     * Valid values are defined as follows:
     *
     * * `NEW_TAB` : Opens the target URL in a new browser tab.
     * * `NEW_WINDOW` : Opens the target URL in a new browser window.
     * * `SAME_TAB` : Opens the target URL in the same browser tab.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionurloperation.html#cfn-quicksight-analysis-customactionurloperation-urltarget)
     */
    public fun urlTarget(): String

    /**
     * THe URL link of the `CustomActionURLOperation` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionurloperation.html#cfn-quicksight-analysis-customactionurloperation-urltemplate)
     */
    public fun urlTemplate(): String

    /**
     * A builder for [CustomActionURLOperationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param urlTarget The target of the `CustomActionURLOperation` . 
       * Valid values are defined as follows:
       *
       * * `NEW_TAB` : Opens the target URL in a new browser tab.
       * * `NEW_WINDOW` : Opens the target URL in a new browser window.
       * * `SAME_TAB` : Opens the target URL in the same browser tab.
       */
      public fun urlTarget(urlTarget: String)

      /**
       * @param urlTemplate THe URL link of the `CustomActionURLOperation` . 
       */
      public fun urlTemplate(urlTemplate: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionURLOperationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionURLOperationProperty.builder()

      /**
       * @param urlTarget The target of the `CustomActionURLOperation` . 
       * Valid values are defined as follows:
       *
       * * `NEW_TAB` : Opens the target URL in a new browser tab.
       * * `NEW_WINDOW` : Opens the target URL in a new browser window.
       * * `SAME_TAB` : Opens the target URL in the same browser tab.
       */
      override fun urlTarget(urlTarget: String) {
        cdkBuilder.urlTarget(urlTarget)
      }

      /**
       * @param urlTemplate THe URL link of the `CustomActionURLOperation` . 
       */
      override fun urlTemplate(urlTemplate: String) {
        cdkBuilder.urlTemplate(urlTemplate)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionURLOperationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionURLOperationProperty,
    ) : CustomActionURLOperationProperty {
      /**
       * The target of the `CustomActionURLOperation` .
       *
       * Valid values are defined as follows:
       *
       * * `NEW_TAB` : Opens the target URL in a new browser tab.
       * * `NEW_WINDOW` : Opens the target URL in a new browser window.
       * * `SAME_TAB` : Opens the target URL in the same browser tab.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionurloperation.html#cfn-quicksight-analysis-customactionurloperation-urltarget)
       */
      override fun urlTarget(): String = unwrap(this).getUrlTarget()

      /**
       * THe URL link of the `CustomActionURLOperation` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionurloperation.html#cfn-quicksight-analysis-customactionurloperation-urltemplate)
       */
      override fun urlTemplate(): String = unwrap(this).getUrlTemplate()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): CustomActionURLOperationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionURLOperationProperty):
          CustomActionURLOperationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomActionURLOperationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomActionURLOperationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface AxisDisplayOptionsProperty {
    /**
     * Determines whether or not the axis line is visible.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-axislinevisibility)
     */
    public fun axisLineVisibility(): String? = unwrap(this).getAxisLineVisibility()

    /**
     * The offset value that determines the starting placement of the axis within a visual's bounds.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-axisoffset)
     */
    public fun axisOffset(): String? = unwrap(this).getAxisOffset()

    /**
     * The data options for an axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-dataoptions)
     */
    public fun dataOptions(): Any? = unwrap(this).getDataOptions()

    /**
     * Determines whether or not the grid line is visible.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-gridlinevisibility)
     */
    public fun gridLineVisibility(): String? = unwrap(this).getGridLineVisibility()

    /**
     * The scroll bar options for an axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-scrollbaroptions)
     */
    public fun scrollbarOptions(): Any? = unwrap(this).getScrollbarOptions()

    /**
     * The tick label options of an axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-ticklabeloptions)
     */
    public fun tickLabelOptions(): Any? = unwrap(this).getTickLabelOptions()

    /**
     * A builder for [AxisDisplayOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param axisLineVisibility Determines whether or not the axis line is visible.
       */
      public fun axisLineVisibility(axisLineVisibility: String)

      /**
       * @param axisOffset The offset value that determines the starting placement of the axis
       * within a visual's bounds.
       */
      public fun axisOffset(axisOffset: String)

      /**
       * @param dataOptions The data options for an axis.
       */
      public fun dataOptions(dataOptions: IResolvable)

      /**
       * @param dataOptions The data options for an axis.
       */
      public fun dataOptions(dataOptions: AxisDataOptionsProperty)

      /**
       * @param dataOptions The data options for an axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("59d3e09ddd53f4eb30c8e137a7260c0c290cd6d5437a75864d0c4d6f2b66bdce")
      public fun dataOptions(dataOptions: AxisDataOptionsProperty.Builder.() -> Unit)

      /**
       * @param gridLineVisibility Determines whether or not the grid line is visible.
       */
      public fun gridLineVisibility(gridLineVisibility: String)

      /**
       * @param scrollbarOptions The scroll bar options for an axis.
       */
      public fun scrollbarOptions(scrollbarOptions: IResolvable)

      /**
       * @param scrollbarOptions The scroll bar options for an axis.
       */
      public fun scrollbarOptions(scrollbarOptions: ScrollBarOptionsProperty)

      /**
       * @param scrollbarOptions The scroll bar options for an axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("883fc4c2d7dc89bb46ae576020ed73e3886cc0c78df725fea36548612b46580b")
      public fun scrollbarOptions(scrollbarOptions: ScrollBarOptionsProperty.Builder.() -> Unit)

      /**
       * @param tickLabelOptions The tick label options of an axis.
       */
      public fun tickLabelOptions(tickLabelOptions: IResolvable)

      /**
       * @param tickLabelOptions The tick label options of an axis.
       */
      public fun tickLabelOptions(tickLabelOptions: AxisTickLabelOptionsProperty)

      /**
       * @param tickLabelOptions The tick label options of an axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c80aa402d96baed55ef32aaa4ff1ce07f27a9b9f021c1b6e8bd5f4fb467425c5")
      public fun tickLabelOptions(tickLabelOptions: AxisTickLabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayOptionsProperty.builder()

      /**
       * @param axisLineVisibility Determines whether or not the axis line is visible.
       */
      override fun axisLineVisibility(axisLineVisibility: String) {
        cdkBuilder.axisLineVisibility(axisLineVisibility)
      }

      /**
       * @param axisOffset The offset value that determines the starting placement of the axis
       * within a visual's bounds.
       */
      override fun axisOffset(axisOffset: String) {
        cdkBuilder.axisOffset(axisOffset)
      }

      /**
       * @param dataOptions The data options for an axis.
       */
      override fun dataOptions(dataOptions: IResolvable) {
        cdkBuilder.dataOptions(dataOptions.let(IResolvable::unwrap))
      }

      /**
       * @param dataOptions The data options for an axis.
       */
      override fun dataOptions(dataOptions: AxisDataOptionsProperty) {
        cdkBuilder.dataOptions(dataOptions.let(AxisDataOptionsProperty::unwrap))
      }

      /**
       * @param dataOptions The data options for an axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("59d3e09ddd53f4eb30c8e137a7260c0c290cd6d5437a75864d0c4d6f2b66bdce")
      override fun dataOptions(dataOptions: AxisDataOptionsProperty.Builder.() -> Unit): Unit =
          dataOptions(AxisDataOptionsProperty(dataOptions))

      /**
       * @param gridLineVisibility Determines whether or not the grid line is visible.
       */
      override fun gridLineVisibility(gridLineVisibility: String) {
        cdkBuilder.gridLineVisibility(gridLineVisibility)
      }

      /**
       * @param scrollbarOptions The scroll bar options for an axis.
       */
      override fun scrollbarOptions(scrollbarOptions: IResolvable) {
        cdkBuilder.scrollbarOptions(scrollbarOptions.let(IResolvable::unwrap))
      }

      /**
       * @param scrollbarOptions The scroll bar options for an axis.
       */
      override fun scrollbarOptions(scrollbarOptions: ScrollBarOptionsProperty) {
        cdkBuilder.scrollbarOptions(scrollbarOptions.let(ScrollBarOptionsProperty::unwrap))
      }

      /**
       * @param scrollbarOptions The scroll bar options for an axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("883fc4c2d7dc89bb46ae576020ed73e3886cc0c78df725fea36548612b46580b")
      override fun scrollbarOptions(scrollbarOptions: ScrollBarOptionsProperty.Builder.() -> Unit):
          Unit = scrollbarOptions(ScrollBarOptionsProperty(scrollbarOptions))

      /**
       * @param tickLabelOptions The tick label options of an axis.
       */
      override fun tickLabelOptions(tickLabelOptions: IResolvable) {
        cdkBuilder.tickLabelOptions(tickLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param tickLabelOptions The tick label options of an axis.
       */
      override fun tickLabelOptions(tickLabelOptions: AxisTickLabelOptionsProperty) {
        cdkBuilder.tickLabelOptions(tickLabelOptions.let(AxisTickLabelOptionsProperty::unwrap))
      }

      /**
       * @param tickLabelOptions The tick label options of an axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c80aa402d96baed55ef32aaa4ff1ce07f27a9b9f021c1b6e8bd5f4fb467425c5")
      override
          fun tickLabelOptions(tickLabelOptions: AxisTickLabelOptionsProperty.Builder.() -> Unit):
          Unit = tickLabelOptions(AxisTickLabelOptionsProperty(tickLabelOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayOptionsProperty,
    ) : AxisDisplayOptionsProperty {
      /**
       * Determines whether or not the axis line is visible.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-axislinevisibility)
       */
      override fun axisLineVisibility(): String? = unwrap(this).getAxisLineVisibility()

      /**
       * The offset value that determines the starting placement of the axis within a visual's
       * bounds.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-axisoffset)
       */
      override fun axisOffset(): String? = unwrap(this).getAxisOffset()

      /**
       * The data options for an axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-dataoptions)
       */
      override fun dataOptions(): Any? = unwrap(this).getDataOptions()

      /**
       * Determines whether or not the grid line is visible.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-gridlinevisibility)
       */
      override fun gridLineVisibility(): String? = unwrap(this).getGridLineVisibility()

      /**
       * The scroll bar options for an axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-scrollbaroptions)
       */
      override fun scrollbarOptions(): Any? = unwrap(this).getScrollbarOptions()

      /**
       * The tick label options of an axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-ticklabeloptions)
       */
      override fun tickLabelOptions(): Any? = unwrap(this).getTickLabelOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AxisDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayOptionsProperty):
          AxisDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisDisplayOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface SmallMultiplesAxisPropertiesProperty {
    /**
     * Defines the placement of the axis.
     *
     * By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are
     * rendered `INSIDE` the panels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesaxisproperties.html#cfn-quicksight-analysis-smallmultiplesaxisproperties-placement)
     */
    public fun placement(): String? = unwrap(this).getPlacement()

    /**
     * Determines whether scale of the axes are shared or independent.
     *
     * The default value is `SHARED` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesaxisproperties.html#cfn-quicksight-analysis-smallmultiplesaxisproperties-scale)
     */
    public fun scale(): String? = unwrap(this).getScale()

    /**
     * A builder for [SmallMultiplesAxisPropertiesProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param placement Defines the placement of the axis.
       * By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are
       * rendered `INSIDE` the panels.
       */
      public fun placement(placement: String)

      /**
       * @param scale Determines whether scale of the axes are shared or independent.
       * The default value is `SHARED` .
       */
      public fun scale(scale: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SmallMultiplesAxisPropertiesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SmallMultiplesAxisPropertiesProperty.builder()

      /**
       * @param placement Defines the placement of the axis.
       * By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are
       * rendered `INSIDE` the panels.
       */
      override fun placement(placement: String) {
        cdkBuilder.placement(placement)
      }

      /**
       * @param scale Determines whether scale of the axes are shared or independent.
       * The default value is `SHARED` .
       */
      override fun scale(scale: String) {
        cdkBuilder.scale(scale)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SmallMultiplesAxisPropertiesProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SmallMultiplesAxisPropertiesProperty,
    ) : SmallMultiplesAxisPropertiesProperty {
      /**
       * Defines the placement of the axis.
       *
       * By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are
       * rendered `INSIDE` the panels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesaxisproperties.html#cfn-quicksight-analysis-smallmultiplesaxisproperties-placement)
       */
      override fun placement(): String? = unwrap(this).getPlacement()

      /**
       * Determines whether scale of the axes are shared or independent.
       *
       * The default value is `SHARED` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesaxisproperties.html#cfn-quicksight-analysis-smallmultiplesaxisproperties-scale)
       */
      override fun scale(): String? = unwrap(this).getScale()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SmallMultiplesAxisPropertiesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SmallMultiplesAxisPropertiesProperty):
          SmallMultiplesAxisPropertiesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SmallMultiplesAxisPropertiesProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SmallMultiplesAxisPropertiesProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TablePaginatedReportOptionsProperty {
    /**
     * The visibility of repeating header rows on each page.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablepaginatedreportoptions.html#cfn-quicksight-analysis-tablepaginatedreportoptions-overflowcolumnheadervisibility)
     */
    public fun overflowColumnHeaderVisibility(): String? =
        unwrap(this).getOverflowColumnHeaderVisibility()

    /**
     * The visibility of printing table overflow across pages.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablepaginatedreportoptions.html#cfn-quicksight-analysis-tablepaginatedreportoptions-verticaloverflowvisibility)
     */
    public fun verticalOverflowVisibility(): String? = unwrap(this).getVerticalOverflowVisibility()

    /**
     * A builder for [TablePaginatedReportOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param overflowColumnHeaderVisibility The visibility of repeating header rows on each page.
       */
      public fun overflowColumnHeaderVisibility(overflowColumnHeaderVisibility: String)

      /**
       * @param verticalOverflowVisibility The visibility of printing table overflow across pages.
       */
      public fun verticalOverflowVisibility(verticalOverflowVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TablePaginatedReportOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TablePaginatedReportOptionsProperty.builder()

      /**
       * @param overflowColumnHeaderVisibility The visibility of repeating header rows on each page.
       */
      override fun overflowColumnHeaderVisibility(overflowColumnHeaderVisibility: String) {
        cdkBuilder.overflowColumnHeaderVisibility(overflowColumnHeaderVisibility)
      }

      /**
       * @param verticalOverflowVisibility The visibility of printing table overflow across pages.
       */
      override fun verticalOverflowVisibility(verticalOverflowVisibility: String) {
        cdkBuilder.verticalOverflowVisibility(verticalOverflowVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TablePaginatedReportOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TablePaginatedReportOptionsProperty,
    ) : TablePaginatedReportOptionsProperty {
      /**
       * The visibility of repeating header rows on each page.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablepaginatedreportoptions.html#cfn-quicksight-analysis-tablepaginatedreportoptions-overflowcolumnheadervisibility)
       */
      override fun overflowColumnHeaderVisibility(): String? =
          unwrap(this).getOverflowColumnHeaderVisibility()

      /**
       * The visibility of printing table overflow across pages.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablepaginatedreportoptions.html#cfn-quicksight-analysis-tablepaginatedreportoptions-verticaloverflowvisibility)
       */
      override fun verticalOverflowVisibility(): String? =
          unwrap(this).getVerticalOverflowVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TablePaginatedReportOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TablePaginatedReportOptionsProperty):
          TablePaginatedReportOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TablePaginatedReportOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TablePaginatedReportOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableFieldCollapseStateOptionProperty {
    /**
     * The state of the field target of a pivot table. Choose one of the following options:.
     *
     * * `COLLAPSED`
     * * `EXPANDED`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestateoption.html#cfn-quicksight-analysis-pivottablefieldcollapsestateoption-state)
     */
    public fun state(): String? = unwrap(this).getState()

    /**
     * A tagged-union object that sets the collapse state.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestateoption.html#cfn-quicksight-analysis-pivottablefieldcollapsestateoption-target)
     */
    public fun target(): Any

    /**
     * A builder for [PivotTableFieldCollapseStateOptionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param state The state of the field target of a pivot table. Choose one of the following
       * options:.
       * * `COLLAPSED`
       * * `EXPANDED`
       */
      public fun state(state: String)

      /**
       * @param target A tagged-union object that sets the collapse state. 
       */
      public fun target(target: IResolvable)

      /**
       * @param target A tagged-union object that sets the collapse state. 
       */
      public fun target(target: PivotTableFieldCollapseStateTargetProperty)

      /**
       * @param target A tagged-union object that sets the collapse state. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1d0d41c2b702fbb43da26c5e74d3aabb4534d375db07fdbac9aeb10acea4fc90")
      public fun target(target: PivotTableFieldCollapseStateTargetProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldCollapseStateOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldCollapseStateOptionProperty.builder()

      /**
       * @param state The state of the field target of a pivot table. Choose one of the following
       * options:.
       * * `COLLAPSED`
       * * `EXPANDED`
       */
      override fun state(state: String) {
        cdkBuilder.state(state)
      }

      /**
       * @param target A tagged-union object that sets the collapse state. 
       */
      override fun target(target: IResolvable) {
        cdkBuilder.target(target.let(IResolvable::unwrap))
      }

      /**
       * @param target A tagged-union object that sets the collapse state. 
       */
      override fun target(target: PivotTableFieldCollapseStateTargetProperty) {
        cdkBuilder.target(target.let(PivotTableFieldCollapseStateTargetProperty::unwrap))
      }

      /**
       * @param target A tagged-union object that sets the collapse state. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1d0d41c2b702fbb43da26c5e74d3aabb4534d375db07fdbac9aeb10acea4fc90")
      override fun target(target: PivotTableFieldCollapseStateTargetProperty.Builder.() -> Unit):
          Unit = target(PivotTableFieldCollapseStateTargetProperty(target))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldCollapseStateOptionProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldCollapseStateOptionProperty,
    ) : PivotTableFieldCollapseStateOptionProperty {
      /**
       * The state of the field target of a pivot table. Choose one of the following options:.
       *
       * * `COLLAPSED`
       * * `EXPANDED`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestateoption.html#cfn-quicksight-analysis-pivottablefieldcollapsestateoption-state)
       */
      override fun state(): String? = unwrap(this).getState()

      /**
       * A tagged-union object that sets the collapse state.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestateoption.html#cfn-quicksight-analysis-pivottablefieldcollapsestateoption-target)
       */
      override fun target(): Any = unwrap(this).getTarget()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableFieldCollapseStateOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldCollapseStateOptionProperty):
          PivotTableFieldCollapseStateOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableFieldCollapseStateOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldCollapseStateOptionProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PanelConfigurationProperty {
    /**
     * Sets the background color for each panel.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-backgroundcolor)
     */
    public fun backgroundColor(): String? = unwrap(this).getBackgroundColor()

    /**
     * Determines whether or not a background for each small multiples panel is rendered.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-backgroundvisibility)
     */
    public fun backgroundVisibility(): String? = unwrap(this).getBackgroundVisibility()

    /**
     * Sets the line color of panel borders.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-bordercolor)
     */
    public fun borderColor(): String? = unwrap(this).getBorderColor()

    /**
     * Sets the line style of panel borders.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-borderstyle)
     */
    public fun borderStyle(): String? = unwrap(this).getBorderStyle()

    /**
     * Sets the line thickness of panel borders.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-borderthickness)
     */
    public fun borderThickness(): String? = unwrap(this).getBorderThickness()

    /**
     * Determines whether or not each panel displays a border.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-bordervisibility)
     */
    public fun borderVisibility(): String? = unwrap(this).getBorderVisibility()

    /**
     * Sets the total amount of negative space to display between sibling panels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-gutterspacing)
     */
    public fun gutterSpacing(): String? = unwrap(this).getGutterSpacing()

    /**
     * Determines whether or not negative space between sibling panels is rendered.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-guttervisibility)
     */
    public fun gutterVisibility(): String? = unwrap(this).getGutterVisibility()

    /**
     * Configures the title display within each small multiples panel.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * A builder for [PanelConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param backgroundColor Sets the background color for each panel.
       */
      public fun backgroundColor(backgroundColor: String)

      /**
       * @param backgroundVisibility Determines whether or not a background for each small multiples
       * panel is rendered.
       */
      public fun backgroundVisibility(backgroundVisibility: String)

      /**
       * @param borderColor Sets the line color of panel borders.
       */
      public fun borderColor(borderColor: String)

      /**
       * @param borderStyle Sets the line style of panel borders.
       */
      public fun borderStyle(borderStyle: String)

      /**
       * @param borderThickness Sets the line thickness of panel borders.
       */
      public fun borderThickness(borderThickness: String)

      /**
       * @param borderVisibility Determines whether or not each panel displays a border.
       */
      public fun borderVisibility(borderVisibility: String)

      /**
       * @param gutterSpacing Sets the total amount of negative space to display between sibling
       * panels.
       */
      public fun gutterSpacing(gutterSpacing: String)

      /**
       * @param gutterVisibility Determines whether or not negative space between sibling panels is
       * rendered.
       */
      public fun gutterVisibility(gutterVisibility: String)

      /**
       * @param title Configures the title display within each small multiples panel.
       */
      public fun title(title: IResolvable)

      /**
       * @param title Configures the title display within each small multiples panel.
       */
      public fun title(title: PanelTitleOptionsProperty)

      /**
       * @param title Configures the title display within each small multiples panel.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6e5bbcee74e02a4bec3347e7b2578f2be03e871dc0ef4eeeca692e74fbce892d")
      public fun title(title: PanelTitleOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PanelConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PanelConfigurationProperty.builder()

      /**
       * @param backgroundColor Sets the background color for each panel.
       */
      override fun backgroundColor(backgroundColor: String) {
        cdkBuilder.backgroundColor(backgroundColor)
      }

      /**
       * @param backgroundVisibility Determines whether or not a background for each small multiples
       * panel is rendered.
       */
      override fun backgroundVisibility(backgroundVisibility: String) {
        cdkBuilder.backgroundVisibility(backgroundVisibility)
      }

      /**
       * @param borderColor Sets the line color of panel borders.
       */
      override fun borderColor(borderColor: String) {
        cdkBuilder.borderColor(borderColor)
      }

      /**
       * @param borderStyle Sets the line style of panel borders.
       */
      override fun borderStyle(borderStyle: String) {
        cdkBuilder.borderStyle(borderStyle)
      }

      /**
       * @param borderThickness Sets the line thickness of panel borders.
       */
      override fun borderThickness(borderThickness: String) {
        cdkBuilder.borderThickness(borderThickness)
      }

      /**
       * @param borderVisibility Determines whether or not each panel displays a border.
       */
      override fun borderVisibility(borderVisibility: String) {
        cdkBuilder.borderVisibility(borderVisibility)
      }

      /**
       * @param gutterSpacing Sets the total amount of negative space to display between sibling
       * panels.
       */
      override fun gutterSpacing(gutterSpacing: String) {
        cdkBuilder.gutterSpacing(gutterSpacing)
      }

      /**
       * @param gutterVisibility Determines whether or not negative space between sibling panels is
       * rendered.
       */
      override fun gutterVisibility(gutterVisibility: String) {
        cdkBuilder.gutterVisibility(gutterVisibility)
      }

      /**
       * @param title Configures the title display within each small multiples panel.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title Configures the title display within each small multiples panel.
       */
      override fun title(title: PanelTitleOptionsProperty) {
        cdkBuilder.title(title.let(PanelTitleOptionsProperty::unwrap))
      }

      /**
       * @param title Configures the title display within each small multiples panel.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6e5bbcee74e02a4bec3347e7b2578f2be03e871dc0ef4eeeca692e74fbce892d")
      override fun title(title: PanelTitleOptionsProperty.Builder.() -> Unit): Unit =
          title(PanelTitleOptionsProperty(title))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PanelConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PanelConfigurationProperty,
    ) : PanelConfigurationProperty {
      /**
       * Sets the background color for each panel.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-backgroundcolor)
       */
      override fun backgroundColor(): String? = unwrap(this).getBackgroundColor()

      /**
       * Determines whether or not a background for each small multiples panel is rendered.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-backgroundvisibility)
       */
      override fun backgroundVisibility(): String? = unwrap(this).getBackgroundVisibility()

      /**
       * Sets the line color of panel borders.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-bordercolor)
       */
      override fun borderColor(): String? = unwrap(this).getBorderColor()

      /**
       * Sets the line style of panel borders.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-borderstyle)
       */
      override fun borderStyle(): String? = unwrap(this).getBorderStyle()

      /**
       * Sets the line thickness of panel borders.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-borderthickness)
       */
      override fun borderThickness(): String? = unwrap(this).getBorderThickness()

      /**
       * Determines whether or not each panel displays a border.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-bordervisibility)
       */
      override fun borderVisibility(): String? = unwrap(this).getBorderVisibility()

      /**
       * Sets the total amount of negative space to display between sibling panels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-gutterspacing)
       */
      override fun gutterSpacing(): String? = unwrap(this).getGutterSpacing()

      /**
       * Determines whether or not negative space between sibling panels is rendered.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-guttervisibility)
       */
      override fun gutterVisibility(): String? = unwrap(this).getGutterVisibility()

      /**
       * Configures the title display within each small multiples panel.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PanelConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PanelConfigurationProperty):
          PanelConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PanelConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PanelConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface BodySectionConfigurationProperty {
    /**
     * The configuration of content in a body section.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html#cfn-quicksight-analysis-bodysectionconfiguration-content)
     */
    public fun content(): Any

    /**
     * The configuration of a page break for a section.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html#cfn-quicksight-analysis-bodysectionconfiguration-pagebreakconfiguration)
     */
    public fun pageBreakConfiguration(): Any? = unwrap(this).getPageBreakConfiguration()

    /**
     * The unique identifier of a body section.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html#cfn-quicksight-analysis-bodysectionconfiguration-sectionid)
     */
    public fun sectionId(): String

    /**
     * The style options of a body section.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html#cfn-quicksight-analysis-bodysectionconfiguration-style)
     */
    public fun style(): Any? = unwrap(this).getStyle()

    /**
     * A builder for [BodySectionConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param content The configuration of content in a body section. 
       */
      public fun content(content: IResolvable)

      /**
       * @param content The configuration of content in a body section. 
       */
      public fun content(content: BodySectionContentProperty)

      /**
       * @param content The configuration of content in a body section. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6fd24b06d64cef933f4290d3634dedfe5ad85dabf34bd7fa823ccf10b5a946ac")
      public fun content(content: BodySectionContentProperty.Builder.() -> Unit)

      /**
       * @param pageBreakConfiguration The configuration of a page break for a section.
       */
      public fun pageBreakConfiguration(pageBreakConfiguration: IResolvable)

      /**
       * @param pageBreakConfiguration The configuration of a page break for a section.
       */
      public
          fun pageBreakConfiguration(pageBreakConfiguration: SectionPageBreakConfigurationProperty)

      /**
       * @param pageBreakConfiguration The configuration of a page break for a section.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("53eea4a213aad3117d52723a889ec34c7c87e6a3995c135033206e254474e1ba")
      public
          fun pageBreakConfiguration(pageBreakConfiguration: SectionPageBreakConfigurationProperty.Builder.() -> Unit)

      /**
       * @param sectionId The unique identifier of a body section. 
       */
      public fun sectionId(sectionId: String)

      /**
       * @param style The style options of a body section.
       */
      public fun style(style: IResolvable)

      /**
       * @param style The style options of a body section.
       */
      public fun style(style: SectionStyleProperty)

      /**
       * @param style The style options of a body section.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5a58c701eb59a161fc4c555e87ad33994a7935a4ff9240df50e15cc2b9b7b74f")
      public fun style(style: SectionStyleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BodySectionConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BodySectionConfigurationProperty.builder()

      /**
       * @param content The configuration of content in a body section. 
       */
      override fun content(content: IResolvable) {
        cdkBuilder.content(content.let(IResolvable::unwrap))
      }

      /**
       * @param content The configuration of content in a body section. 
       */
      override fun content(content: BodySectionContentProperty) {
        cdkBuilder.content(content.let(BodySectionContentProperty::unwrap))
      }

      /**
       * @param content The configuration of content in a body section. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6fd24b06d64cef933f4290d3634dedfe5ad85dabf34bd7fa823ccf10b5a946ac")
      override fun content(content: BodySectionContentProperty.Builder.() -> Unit): Unit =
          content(BodySectionContentProperty(content))

      /**
       * @param pageBreakConfiguration The configuration of a page break for a section.
       */
      override fun pageBreakConfiguration(pageBreakConfiguration: IResolvable) {
        cdkBuilder.pageBreakConfiguration(pageBreakConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param pageBreakConfiguration The configuration of a page break for a section.
       */
      override
          fun pageBreakConfiguration(pageBreakConfiguration: SectionPageBreakConfigurationProperty) {
        cdkBuilder.pageBreakConfiguration(pageBreakConfiguration.let(SectionPageBreakConfigurationProperty::unwrap))
      }

      /**
       * @param pageBreakConfiguration The configuration of a page break for a section.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("53eea4a213aad3117d52723a889ec34c7c87e6a3995c135033206e254474e1ba")
      override
          fun pageBreakConfiguration(pageBreakConfiguration: SectionPageBreakConfigurationProperty.Builder.() -> Unit):
          Unit =
          pageBreakConfiguration(SectionPageBreakConfigurationProperty(pageBreakConfiguration))

      /**
       * @param sectionId The unique identifier of a body section. 
       */
      override fun sectionId(sectionId: String) {
        cdkBuilder.sectionId(sectionId)
      }

      /**
       * @param style The style options of a body section.
       */
      override fun style(style: IResolvable) {
        cdkBuilder.style(style.let(IResolvable::unwrap))
      }

      /**
       * @param style The style options of a body section.
       */
      override fun style(style: SectionStyleProperty) {
        cdkBuilder.style(style.let(SectionStyleProperty::unwrap))
      }

      /**
       * @param style The style options of a body section.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5a58c701eb59a161fc4c555e87ad33994a7935a4ff9240df50e15cc2b9b7b74f")
      override fun style(style: SectionStyleProperty.Builder.() -> Unit): Unit =
          style(SectionStyleProperty(style))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BodySectionConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BodySectionConfigurationProperty,
    ) : BodySectionConfigurationProperty {
      /**
       * The configuration of content in a body section.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html#cfn-quicksight-analysis-bodysectionconfiguration-content)
       */
      override fun content(): Any = unwrap(this).getContent()

      /**
       * The configuration of a page break for a section.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html#cfn-quicksight-analysis-bodysectionconfiguration-pagebreakconfiguration)
       */
      override fun pageBreakConfiguration(): Any? = unwrap(this).getPageBreakConfiguration()

      /**
       * The unique identifier of a body section.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html#cfn-quicksight-analysis-bodysectionconfiguration-sectionid)
       */
      override fun sectionId(): String = unwrap(this).getSectionId()

      /**
       * The style options of a body section.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html#cfn-quicksight-analysis-bodysectionconfiguration-style)
       */
      override fun style(): Any? = unwrap(this).getStyle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): BodySectionConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BodySectionConfigurationProperty):
          BodySectionConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BodySectionConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BodySectionConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface HeatMapConfigurationProperty {
    /**
     * The color options (gradient color, point of divergence) in a heat map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-colorscale)
     */
    public fun colorScale(): Any? = unwrap(this).getColorScale()

    /**
     * The label options of the column that is displayed in a heat map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-columnlabeloptions)
     */
    public fun columnLabelOptions(): Any? = unwrap(this).getColumnLabelOptions()

    /**
     * The options that determine if visual data labels are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-datalabels)
     */
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    /**
     * The field wells of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The legend display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-legend)
     */
    public fun legend(): Any? = unwrap(this).getLegend()

    /**
     * The label options of the row that is displayed in a `heat map` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-rowlabeloptions)
     */
    public fun rowLabelOptions(): Any? = unwrap(this).getRowLabelOptions()

    /**
     * The sort configuration of a heat map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The tooltip display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-tooltip)
     */
    public fun tooltip(): Any? = unwrap(this).getTooltip()

    /**
     * A builder for [HeatMapConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param colorScale The color options (gradient color, point of divergence) in a heat map.
       */
      public fun colorScale(colorScale: IResolvable)

      /**
       * @param colorScale The color options (gradient color, point of divergence) in a heat map.
       */
      public fun colorScale(colorScale: ColorScaleProperty)

      /**
       * @param colorScale The color options (gradient color, point of divergence) in a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e36e00e080f7d49d839fd7f7c7a880922aabe36e90a28d1ff2111a45c4e77831")
      public fun colorScale(colorScale: ColorScaleProperty.Builder.() -> Unit)

      /**
       * @param columnLabelOptions The label options of the column that is displayed in a heat map.
       */
      public fun columnLabelOptions(columnLabelOptions: IResolvable)

      /**
       * @param columnLabelOptions The label options of the column that is displayed in a heat map.
       */
      public fun columnLabelOptions(columnLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param columnLabelOptions The label options of the column that is displayed in a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("58877e9132b5a03ca4ae50005e7b1811dbf86794dd5e7fd7d9a4ccc5aec9e988")
      public
          fun columnLabelOptions(columnLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      public fun dataLabels(dataLabels: IResolvable)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e708da1d74efce09793530d96086da9c9f8aa67114762173355b06ca3d686221")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: HeatMapFieldWellsProperty)

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c17abd24fdf8577986caa3acb24ef5dfa9e30e8d1105c1040e00931d9ed8c4e")
      public fun fieldWells(fieldWells: HeatMapFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: IResolvable)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: LegendOptionsProperty)

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3a83c55820c3693858969a30671104190c246e40a17e087bcb00b43585508122")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      /**
       * @param rowLabelOptions The label options of the row that is displayed in a `heat map` .
       */
      public fun rowLabelOptions(rowLabelOptions: IResolvable)

      /**
       * @param rowLabelOptions The label options of the row that is displayed in a `heat map` .
       */
      public fun rowLabelOptions(rowLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param rowLabelOptions The label options of the row that is displayed in a `heat map` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("851113521b602761a3f25b35f0a8fa59eb86c837e53f566d6027482a91b6e18b")
      public fun rowLabelOptions(rowLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration of a heat map.
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a heat map.
       */
      public fun sortConfiguration(sortConfiguration: HeatMapSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b2fad0a4bb83489a02d722c69751185bc31d01029e75073bf2ea298721b94098")
      public
          fun sortConfiguration(sortConfiguration: HeatMapSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: IResolvable)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: TooltipOptionsProperty)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cd559468749ef902d173e28ee5dde2baba117eee2718a68b6e9464f7a74c0797")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapConfigurationProperty.builder()

      /**
       * @param colorScale The color options (gradient color, point of divergence) in a heat map.
       */
      override fun colorScale(colorScale: IResolvable) {
        cdkBuilder.colorScale(colorScale.let(IResolvable::unwrap))
      }

      /**
       * @param colorScale The color options (gradient color, point of divergence) in a heat map.
       */
      override fun colorScale(colorScale: ColorScaleProperty) {
        cdkBuilder.colorScale(colorScale.let(ColorScaleProperty::unwrap))
      }

      /**
       * @param colorScale The color options (gradient color, point of divergence) in a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e36e00e080f7d49d839fd7f7c7a880922aabe36e90a28d1ff2111a45c4e77831")
      override fun colorScale(colorScale: ColorScaleProperty.Builder.() -> Unit): Unit =
          colorScale(ColorScaleProperty(colorScale))

      /**
       * @param columnLabelOptions The label options of the column that is displayed in a heat map.
       */
      override fun columnLabelOptions(columnLabelOptions: IResolvable) {
        cdkBuilder.columnLabelOptions(columnLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param columnLabelOptions The label options of the column that is displayed in a heat map.
       */
      override fun columnLabelOptions(columnLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.columnLabelOptions(columnLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param columnLabelOptions The label options of the column that is displayed in a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("58877e9132b5a03ca4ae50005e7b1811dbf86794dd5e7fd7d9a4ccc5aec9e988")
      override
          fun columnLabelOptions(columnLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = columnLabelOptions(ChartAxisLabelOptionsProperty(columnLabelOptions))

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      /**
       * @param dataLabels The options that determine if visual data labels are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e708da1d74efce09793530d96086da9c9f8aa67114762173355b06ca3d686221")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: HeatMapFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(HeatMapFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c17abd24fdf8577986caa3acb24ef5dfa9e30e8d1105c1040e00931d9ed8c4e")
      override fun fieldWells(fieldWells: HeatMapFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(HeatMapFieldWellsProperty(fieldWells))

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3a83c55820c3693858969a30671104190c246e40a17e087bcb00b43585508122")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      /**
       * @param rowLabelOptions The label options of the row that is displayed in a `heat map` .
       */
      override fun rowLabelOptions(rowLabelOptions: IResolvable) {
        cdkBuilder.rowLabelOptions(rowLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param rowLabelOptions The label options of the row that is displayed in a `heat map` .
       */
      override fun rowLabelOptions(rowLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.rowLabelOptions(rowLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param rowLabelOptions The label options of the row that is displayed in a `heat map` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("851113521b602761a3f25b35f0a8fa59eb86c837e53f566d6027482a91b6e18b")
      override
          fun rowLabelOptions(rowLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = rowLabelOptions(ChartAxisLabelOptionsProperty(rowLabelOptions))

      /**
       * @param sortConfiguration The sort configuration of a heat map.
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a heat map.
       */
      override fun sortConfiguration(sortConfiguration: HeatMapSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(HeatMapSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a heat map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b2fad0a4bb83489a02d722c69751185bc31d01029e75073bf2ea298721b94098")
      override
          fun sortConfiguration(sortConfiguration: HeatMapSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(HeatMapSortConfigurationProperty(sortConfiguration))

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cd559468749ef902d173e28ee5dde2baba117eee2718a68b6e9464f7a74c0797")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapConfigurationProperty,
    ) : HeatMapConfigurationProperty {
      /**
       * The color options (gradient color, point of divergence) in a heat map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-colorscale)
       */
      override fun colorScale(): Any? = unwrap(this).getColorScale()

      /**
       * The label options of the column that is displayed in a heat map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-columnlabeloptions)
       */
      override fun columnLabelOptions(): Any? = unwrap(this).getColumnLabelOptions()

      /**
       * The options that determine if visual data labels are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-datalabels)
       */
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      /**
       * The field wells of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The legend display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-legend)
       */
      override fun legend(): Any? = unwrap(this).getLegend()

      /**
       * The label options of the row that is displayed in a `heat map` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-rowlabeloptions)
       */
      override fun rowLabelOptions(): Any? = unwrap(this).getRowLabelOptions()

      /**
       * The sort configuration of a heat map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The tooltip display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-tooltip)
       */
      override fun tooltip(): Any? = unwrap(this).getTooltip()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): HeatMapConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapConfigurationProperty):
          HeatMapConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HeatMapConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GeospatialWindowOptionsProperty {
    /**
     * The bounds options (north, south, west, east) of the geospatial window options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialwindowoptions.html#cfn-quicksight-analysis-geospatialwindowoptions-bounds)
     */
    public fun bounds(): Any? = unwrap(this).getBounds()

    /**
     * The map zoom modes (manual, auto) of the geospatial window options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialwindowoptions.html#cfn-quicksight-analysis-geospatialwindowoptions-mapzoommode)
     */
    public fun mapZoomMode(): String? = unwrap(this).getMapZoomMode()

    /**
     * A builder for [GeospatialWindowOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param bounds The bounds options (north, south, west, east) of the geospatial window
       * options.
       */
      public fun bounds(bounds: IResolvable)

      /**
       * @param bounds The bounds options (north, south, west, east) of the geospatial window
       * options.
       */
      public fun bounds(bounds: GeospatialCoordinateBoundsProperty)

      /**
       * @param bounds The bounds options (north, south, west, east) of the geospatial window
       * options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a3b2d42078f599645cac365a52b44c5a5be0cb2158e1e92a45274a1f4226f936")
      public fun bounds(bounds: GeospatialCoordinateBoundsProperty.Builder.() -> Unit)

      /**
       * @param mapZoomMode The map zoom modes (manual, auto) of the geospatial window options.
       */
      public fun mapZoomMode(mapZoomMode: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialWindowOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialWindowOptionsProperty.builder()

      /**
       * @param bounds The bounds options (north, south, west, east) of the geospatial window
       * options.
       */
      override fun bounds(bounds: IResolvable) {
        cdkBuilder.bounds(bounds.let(IResolvable::unwrap))
      }

      /**
       * @param bounds The bounds options (north, south, west, east) of the geospatial window
       * options.
       */
      override fun bounds(bounds: GeospatialCoordinateBoundsProperty) {
        cdkBuilder.bounds(bounds.let(GeospatialCoordinateBoundsProperty::unwrap))
      }

      /**
       * @param bounds The bounds options (north, south, west, east) of the geospatial window
       * options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a3b2d42078f599645cac365a52b44c5a5be0cb2158e1e92a45274a1f4226f936")
      override fun bounds(bounds: GeospatialCoordinateBoundsProperty.Builder.() -> Unit): Unit =
          bounds(GeospatialCoordinateBoundsProperty(bounds))

      /**
       * @param mapZoomMode The map zoom modes (manual, auto) of the geospatial window options.
       */
      override fun mapZoomMode(mapZoomMode: String) {
        cdkBuilder.mapZoomMode(mapZoomMode)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialWindowOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialWindowOptionsProperty,
    ) : GeospatialWindowOptionsProperty {
      /**
       * The bounds options (north, south, west, east) of the geospatial window options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialwindowoptions.html#cfn-quicksight-analysis-geospatialwindowoptions-bounds)
       */
      override fun bounds(): Any? = unwrap(this).getBounds()

      /**
       * The map zoom modes (manual, auto) of the geospatial window options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialwindowoptions.html#cfn-quicksight-analysis-geospatialwindowoptions-mapzoommode)
       */
      override fun mapZoomMode(): String? = unwrap(this).getMapZoomMode()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GeospatialWindowOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialWindowOptionsProperty):
          GeospatialWindowOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialWindowOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialWindowOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FunnelChartVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration of a `FunnelChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers..
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [FunnelChartVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration of a `FunnelChartVisual` .
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration of a `FunnelChartVisual` .
       */
      public fun chartConfiguration(chartConfiguration: FunnelChartConfigurationProperty)

      /**
       * @param chartConfiguration The configuration of a `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c1e2f6a0a90f45279b7925d50f031aa94270bc2697ca57ad29b23b5f06d7fc5b")
      public
          fun chartConfiguration(chartConfiguration: FunnelChartConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2ff3c0adfef27ad928fee71fd59bcd79747a6affb9254cba0edfa05a76fc8cd6")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fcd1b5a8244a5f977fe870791d54d6aaacf200e56d143d383b9303c3bef9c902")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration of a `FunnelChartVisual` .
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a `FunnelChartVisual` .
       */
      override fun chartConfiguration(chartConfiguration: FunnelChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(FunnelChartConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a `FunnelChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c1e2f6a0a90f45279b7925d50f031aa94270bc2697ca57ad29b23b5f06d7fc5b")
      override
          fun chartConfiguration(chartConfiguration: FunnelChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(FunnelChartConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2ff3c0adfef27ad928fee71fd59bcd79747a6affb9254cba0edfa05a76fc8cd6")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fcd1b5a8244a5f977fe870791d54d6aaacf200e56d143d383b9303c3bef9c902")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartVisualProperty,
    ) : FunnelChartVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration of a `FunnelChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FunnelChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartVisualProperty):
          FunnelChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FunnelChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartVisualProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PanelTitleOptionsProperty {
    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paneltitleoptions.html#cfn-quicksight-analysis-paneltitleoptions-fontconfiguration)
     */
    public fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

    /**
     * Sets the horizontal text alignment of the title within each panel.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paneltitleoptions.html#cfn-quicksight-analysis-paneltitleoptions-horizontaltextalignment)
     */
    public fun horizontalTextAlignment(): String? = unwrap(this).getHorizontalTextAlignment()

    /**
     * Determines whether or not panel titles are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paneltitleoptions.html#cfn-quicksight-analysis-paneltitleoptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [PanelTitleOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fontConfiguration the value to be set.
       */
      public fun fontConfiguration(fontConfiguration: IResolvable)

      /**
       * @param fontConfiguration the value to be set.
       */
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty)

      /**
       * @param fontConfiguration the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c298316e157f76adfea71dcf2cb0a958b583497bd2f1604bde6e00e73c62b35")
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      /**
       * @param horizontalTextAlignment Sets the horizontal text alignment of the title within each
       * panel.
       */
      public fun horizontalTextAlignment(horizontalTextAlignment: String)

      /**
       * @param visibility Determines whether or not panel titles are displayed.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PanelTitleOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PanelTitleOptionsProperty.builder()

      /**
       * @param fontConfiguration the value to be set.
       */
      override fun fontConfiguration(fontConfiguration: IResolvable) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param fontConfiguration the value to be set.
       */
      override fun fontConfiguration(fontConfiguration: FontConfigurationProperty) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      /**
       * @param fontConfiguration the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c298316e157f76adfea71dcf2cb0a958b583497bd2f1604bde6e00e73c62b35")
      override
          fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = fontConfiguration(FontConfigurationProperty(fontConfiguration))

      /**
       * @param horizontalTextAlignment Sets the horizontal text alignment of the title within each
       * panel.
       */
      override fun horizontalTextAlignment(horizontalTextAlignment: String) {
        cdkBuilder.horizontalTextAlignment(horizontalTextAlignment)
      }

      /**
       * @param visibility Determines whether or not panel titles are displayed.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PanelTitleOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PanelTitleOptionsProperty,
    ) : PanelTitleOptionsProperty {
      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paneltitleoptions.html#cfn-quicksight-analysis-paneltitleoptions-fontconfiguration)
       */
      override fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

      /**
       * Sets the horizontal text alignment of the title within each panel.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paneltitleoptions.html#cfn-quicksight-analysis-paneltitleoptions-horizontaltextalignment)
       */
      override fun horizontalTextAlignment(): String? = unwrap(this).getHorizontalTextAlignment()

      /**
       * Determines whether or not panel titles are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paneltitleoptions.html#cfn-quicksight-analysis-paneltitleoptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PanelTitleOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PanelTitleOptionsProperty):
          PanelTitleOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PanelTitleOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PanelTitleOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableFieldLinkConfigurationProperty {
    /**
     * The URL content (text, icon) for the table link configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkconfiguration.html#cfn-quicksight-analysis-tablefieldlinkconfiguration-content)
     */
    public fun content(): Any

    /**
     * The URL target (new tab, new window, same tab) for the table link configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkconfiguration.html#cfn-quicksight-analysis-tablefieldlinkconfiguration-target)
     */
    public fun target(): String

    /**
     * A builder for [TableFieldLinkConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param content The URL content (text, icon) for the table link configuration. 
       */
      public fun content(content: IResolvable)

      /**
       * @param content The URL content (text, icon) for the table link configuration. 
       */
      public fun content(content: TableFieldLinkContentConfigurationProperty)

      /**
       * @param content The URL content (text, icon) for the table link configuration. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8f25a71719be4c6d6c6be9194511f5a6018798508d236d4b42bcf18f5041fc5b")
      public fun content(content: TableFieldLinkContentConfigurationProperty.Builder.() -> Unit)

      /**
       * @param target The URL target (new tab, new window, same tab) for the table link
       * configuration. 
       */
      public fun target(target: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldLinkConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldLinkConfigurationProperty.builder()

      /**
       * @param content The URL content (text, icon) for the table link configuration. 
       */
      override fun content(content: IResolvable) {
        cdkBuilder.content(content.let(IResolvable::unwrap))
      }

      /**
       * @param content The URL content (text, icon) for the table link configuration. 
       */
      override fun content(content: TableFieldLinkContentConfigurationProperty) {
        cdkBuilder.content(content.let(TableFieldLinkContentConfigurationProperty::unwrap))
      }

      /**
       * @param content The URL content (text, icon) for the table link configuration. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8f25a71719be4c6d6c6be9194511f5a6018798508d236d4b42bcf18f5041fc5b")
      override fun content(content: TableFieldLinkContentConfigurationProperty.Builder.() -> Unit):
          Unit = content(TableFieldLinkContentConfigurationProperty(content))

      /**
       * @param target The URL target (new tab, new window, same tab) for the table link
       * configuration. 
       */
      override fun target(target: String) {
        cdkBuilder.target(target)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldLinkConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldLinkConfigurationProperty,
    ) : TableFieldLinkConfigurationProperty {
      /**
       * The URL content (text, icon) for the table link configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkconfiguration.html#cfn-quicksight-analysis-tablefieldlinkconfiguration-content)
       */
      override fun content(): Any = unwrap(this).getContent()

      /**
       * The URL target (new tab, new window, same tab) for the table link configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkconfiguration.html#cfn-quicksight-analysis-tablefieldlinkconfiguration-target)
       */
      override fun target(): String = unwrap(this).getTarget()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableFieldLinkConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldLinkConfigurationProperty):
          TableFieldLinkConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldLinkConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableFieldLinkConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PeriodToDateComputationProperty {
    /**
     * The ID for a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-computationid)
     */
    public fun computationId(): String

    /**
     * The name of a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * The time granularity setup of period to date computation. Choose from the following options:.
     *
     * * YEAR: Year to date.
     * * MONTH: Month to date.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-periodtimegranularity)
     */
    public fun periodTimeGranularity(): String? = unwrap(this).getPeriodTimeGranularity()

    /**
     * The time field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-time)
     */
    public fun time(): Any? = unwrap(this).getTime()

    /**
     * The value field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-value)
     */
    public fun `value`(): Any? = unwrap(this).getValue()

    /**
     * A builder for [PeriodToDateComputationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param computationId The ID for a computation. 
       */
      public fun computationId(computationId: String)

      /**
       * @param name The name of a computation.
       */
      public fun name(name: String)

      /**
       * @param periodTimeGranularity The time granularity setup of period to date computation.
       * Choose from the following options:.
       * * YEAR: Year to date.
       * * MONTH: Month to date.
       */
      public fun periodTimeGranularity(periodTimeGranularity: String)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: IResolvable)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: DimensionFieldProperty)

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f7782cfb5b4be1f5bb673d16050a32cf14f20cf57de54bdb42b4ca139f715eb4")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: IResolvable)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: MeasureFieldProperty)

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("22eae063ff62d67a56d6f7719a24ae597b8d39f782354c2f4f20f20f4f7422fe")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PeriodToDateComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PeriodToDateComputationProperty.builder()

      /**
       * @param computationId The ID for a computation. 
       */
      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      /**
       * @param name The name of a computation.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param periodTimeGranularity The time granularity setup of period to date computation.
       * Choose from the following options:.
       * * YEAR: Year to date.
       * * MONTH: Month to date.
       */
      override fun periodTimeGranularity(periodTimeGranularity: String) {
        cdkBuilder.periodTimeGranularity(periodTimeGranularity)
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f7782cfb5b4be1f5bb673d16050a32cf14f20cf57de54bdb42b4ca139f715eb4")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("22eae063ff62d67a56d6f7719a24ae597b8d39f782354c2f4f20f20f4f7422fe")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PeriodToDateComputationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PeriodToDateComputationProperty,
    ) : PeriodToDateComputationProperty {
      /**
       * The ID for a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-computationid)
       */
      override fun computationId(): String = unwrap(this).getComputationId()

      /**
       * The name of a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-name)
       */
      override fun name(): String? = unwrap(this).getName()

      /**
       * The time granularity setup of period to date computation. Choose from the following
       * options:.
       *
       * * YEAR: Year to date.
       * * MONTH: Month to date.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-periodtimegranularity)
       */
      override fun periodTimeGranularity(): String? = unwrap(this).getPeriodTimeGranularity()

      /**
       * The time field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-time)
       */
      override fun time(): Any? = unwrap(this).getTime()

      /**
       * The value field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-value)
       */
      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PeriodToDateComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PeriodToDateComputationProperty):
          PeriodToDateComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PeriodToDateComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PeriodToDateComputationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface SectionPageBreakConfigurationProperty {
    /**
     * The configuration of a page break after a section.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionpagebreakconfiguration.html#cfn-quicksight-analysis-sectionpagebreakconfiguration-after)
     */
    public fun after(): Any? = unwrap(this).getAfter()

    /**
     * A builder for [SectionPageBreakConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param after The configuration of a page break after a section.
       */
      public fun after(after: IResolvable)

      /**
       * @param after The configuration of a page break after a section.
       */
      public fun after(after: SectionAfterPageBreakProperty)

      /**
       * @param after The configuration of a page break after a section.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cae20e694d403a162c03f622ea6b751a08d466d837fceadd0e4ec28532001506")
      public fun after(after: SectionAfterPageBreakProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionPageBreakConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionPageBreakConfigurationProperty.builder()

      /**
       * @param after The configuration of a page break after a section.
       */
      override fun after(after: IResolvable) {
        cdkBuilder.after(after.let(IResolvable::unwrap))
      }

      /**
       * @param after The configuration of a page break after a section.
       */
      override fun after(after: SectionAfterPageBreakProperty) {
        cdkBuilder.after(after.let(SectionAfterPageBreakProperty::unwrap))
      }

      /**
       * @param after The configuration of a page break after a section.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cae20e694d403a162c03f622ea6b751a08d466d837fceadd0e4ec28532001506")
      override fun after(after: SectionAfterPageBreakProperty.Builder.() -> Unit): Unit =
          after(SectionAfterPageBreakProperty(after))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionPageBreakConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionPageBreakConfigurationProperty,
    ) : SectionPageBreakConfigurationProperty {
      /**
       * The configuration of a page break after a section.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionpagebreakconfiguration.html#cfn-quicksight-analysis-sectionpagebreakconfiguration-after)
       */
      override fun after(): Any? = unwrap(this).getAfter()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SectionPageBreakConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionPageBreakConfigurationProperty):
          SectionPageBreakConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionPageBreakConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SectionPageBreakConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableRowConditionalFormattingProperty {
    /**
     * The conditional formatting color (solid, gradient) of the background for a table row.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablerowconditionalformatting.html#cfn-quicksight-analysis-tablerowconditionalformatting-backgroundcolor)
     */
    public fun backgroundColor(): Any? = unwrap(this).getBackgroundColor()

    /**
     * The conditional formatting color (solid, gradient) of the text for a table row.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablerowconditionalformatting.html#cfn-quicksight-analysis-tablerowconditionalformatting-textcolor)
     */
    public fun textColor(): Any? = unwrap(this).getTextColor()

    /**
     * A builder for [TableRowConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param backgroundColor The conditional formatting color (solid, gradient) of the background
       * for a table row.
       */
      public fun backgroundColor(backgroundColor: IResolvable)

      /**
       * @param backgroundColor The conditional formatting color (solid, gradient) of the background
       * for a table row.
       */
      public fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty)

      /**
       * @param backgroundColor The conditional formatting color (solid, gradient) of the background
       * for a table row.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b77706f7feeeb83df6db7524e27900f5a297999ae4c90ba018b59295bec4a47")
      public
          fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit)

      /**
       * @param textColor The conditional formatting color (solid, gradient) of the text for a table
       * row.
       */
      public fun textColor(textColor: IResolvable)

      /**
       * @param textColor The conditional formatting color (solid, gradient) of the text for a table
       * row.
       */
      public fun textColor(textColor: ConditionalFormattingColorProperty)

      /**
       * @param textColor The conditional formatting color (solid, gradient) of the text for a table
       * row.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f15cf0682907fb9a8550ef1f77a441959a03d9c150f96830ee0aec4f9d504109")
      public fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableRowConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableRowConditionalFormattingProperty.builder()

      /**
       * @param backgroundColor The conditional formatting color (solid, gradient) of the background
       * for a table row.
       */
      override fun backgroundColor(backgroundColor: IResolvable) {
        cdkBuilder.backgroundColor(backgroundColor.let(IResolvable::unwrap))
      }

      /**
       * @param backgroundColor The conditional formatting color (solid, gradient) of the background
       * for a table row.
       */
      override fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty) {
        cdkBuilder.backgroundColor(backgroundColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      /**
       * @param backgroundColor The conditional formatting color (solid, gradient) of the background
       * for a table row.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b77706f7feeeb83df6db7524e27900f5a297999ae4c90ba018b59295bec4a47")
      override
          fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit):
          Unit = backgroundColor(ConditionalFormattingColorProperty(backgroundColor))

      /**
       * @param textColor The conditional formatting color (solid, gradient) of the text for a table
       * row.
       */
      override fun textColor(textColor: IResolvable) {
        cdkBuilder.textColor(textColor.let(IResolvable::unwrap))
      }

      /**
       * @param textColor The conditional formatting color (solid, gradient) of the text for a table
       * row.
       */
      override fun textColor(textColor: ConditionalFormattingColorProperty) {
        cdkBuilder.textColor(textColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      /**
       * @param textColor The conditional formatting color (solid, gradient) of the text for a table
       * row.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f15cf0682907fb9a8550ef1f77a441959a03d9c150f96830ee0aec4f9d504109")
      override fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit): Unit
          = textColor(ConditionalFormattingColorProperty(textColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableRowConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableRowConditionalFormattingProperty,
    ) : TableRowConditionalFormattingProperty {
      /**
       * The conditional formatting color (solid, gradient) of the background for a table row.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablerowconditionalformatting.html#cfn-quicksight-analysis-tablerowconditionalformatting-backgroundcolor)
       */
      override fun backgroundColor(): Any? = unwrap(this).getBackgroundColor()

      /**
       * The conditional formatting color (solid, gradient) of the text for a table row.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablerowconditionalformatting.html#cfn-quicksight-analysis-tablerowconditionalformatting-textcolor)
       */
      override fun textColor(): Any? = unwrap(this).getTextColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableRowConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableRowConditionalFormattingProperty):
          TableRowConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableRowConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableRowConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SankeyDiagramAggregatedFieldWellsProperty {
    /**
     * The destination field wells of a sankey diagram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-analysis-sankeydiagramaggregatedfieldwells-destination)
     */
    public fun destination(): Any? = unwrap(this).getDestination()

    /**
     * The source field wells of a sankey diagram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-analysis-sankeydiagramaggregatedfieldwells-source)
     */
    public fun source(): Any? = unwrap(this).getSource()

    /**
     * The weight field wells of a sankey diagram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-analysis-sankeydiagramaggregatedfieldwells-weight)
     */
    public fun weight(): Any? = unwrap(this).getWeight()

    /**
     * A builder for [SankeyDiagramAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param destination The destination field wells of a sankey diagram.
       */
      public fun destination(destination: IResolvable)

      /**
       * @param destination The destination field wells of a sankey diagram.
       */
      public fun destination(destination: List<Any>)

      /**
       * @param destination The destination field wells of a sankey diagram.
       */
      public fun destination(vararg destination: Any)

      /**
       * @param source The source field wells of a sankey diagram.
       */
      public fun source(source: IResolvable)

      /**
       * @param source The source field wells of a sankey diagram.
       */
      public fun source(source: List<Any>)

      /**
       * @param source The source field wells of a sankey diagram.
       */
      public fun source(vararg source: Any)

      /**
       * @param weight The weight field wells of a sankey diagram.
       */
      public fun weight(weight: IResolvable)

      /**
       * @param weight The weight field wells of a sankey diagram.
       */
      public fun weight(weight: List<Any>)

      /**
       * @param weight The weight field wells of a sankey diagram.
       */
      public fun weight(vararg weight: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramAggregatedFieldWellsProperty.builder()

      /**
       * @param destination The destination field wells of a sankey diagram.
       */
      override fun destination(destination: IResolvable) {
        cdkBuilder.destination(destination.let(IResolvable::unwrap))
      }

      /**
       * @param destination The destination field wells of a sankey diagram.
       */
      override fun destination(destination: List<Any>) {
        cdkBuilder.destination(destination)
      }

      /**
       * @param destination The destination field wells of a sankey diagram.
       */
      override fun destination(vararg destination: Any): Unit = destination(destination.toList())

      /**
       * @param source The source field wells of a sankey diagram.
       */
      override fun source(source: IResolvable) {
        cdkBuilder.source(source.let(IResolvable::unwrap))
      }

      /**
       * @param source The source field wells of a sankey diagram.
       */
      override fun source(source: List<Any>) {
        cdkBuilder.source(source)
      }

      /**
       * @param source The source field wells of a sankey diagram.
       */
      override fun source(vararg source: Any): Unit = source(source.toList())

      /**
       * @param weight The weight field wells of a sankey diagram.
       */
      override fun weight(weight: IResolvable) {
        cdkBuilder.weight(weight.let(IResolvable::unwrap))
      }

      /**
       * @param weight The weight field wells of a sankey diagram.
       */
      override fun weight(weight: List<Any>) {
        cdkBuilder.weight(weight)
      }

      /**
       * @param weight The weight field wells of a sankey diagram.
       */
      override fun weight(vararg weight: Any): Unit = weight(weight.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramAggregatedFieldWellsProperty,
    ) : SankeyDiagramAggregatedFieldWellsProperty {
      /**
       * The destination field wells of a sankey diagram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-analysis-sankeydiagramaggregatedfieldwells-destination)
       */
      override fun destination(): Any? = unwrap(this).getDestination()

      /**
       * The source field wells of a sankey diagram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-analysis-sankeydiagramaggregatedfieldwells-source)
       */
      override fun source(): Any? = unwrap(this).getSource()

      /**
       * The weight field wells of a sankey diagram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-analysis-sankeydiagramaggregatedfieldwells-weight)
       */
      override fun weight(): Any? = unwrap(this).getWeight()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SankeyDiagramAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramAggregatedFieldWellsProperty):
          SankeyDiagramAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SankeyDiagramAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface WaterfallChartConfigurationProperty {
    /**
     * The options that determine the presentation of the category axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-categoryaxisdisplayoptions)
     */
    public fun categoryAxisDisplayOptions(): Any? = unwrap(this).getCategoryAxisDisplayOptions()

    /**
     * The options that determine the presentation of the category axis label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-categoryaxislabeloptions)
     */
    public fun categoryAxisLabelOptions(): Any? = unwrap(this).getCategoryAxisLabelOptions()

    /**
     * The data label configuration of a waterfall visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-datalabels)
     */
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    /**
     * The field well configuration of a waterfall visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The legend configuration of a waterfall visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-legend)
     */
    public fun legend(): Any? = unwrap(this).getLegend()

    /**
     * The options that determine the presentation of the y-axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-primaryyaxisdisplayoptions)
     */
    public fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

    /**
     * The options that determine the presentation of the y-axis label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-primaryyaxislabeloptions)
     */
    public fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

    /**
     * The sort configuration of a waterfall visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-sortconfiguration)
     */
    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    /**
     * The visual palette configuration of a waterfall visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-visualpalette)
     */
    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    /**
     * The options that determine the presentation of a waterfall visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-waterfallchartoptions)
     */
    public fun waterfallChartOptions(): Any? = unwrap(this).getWaterfallChartOptions()

    /**
     * A builder for [WaterfallChartConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryAxisDisplayOptions The options that determine the presentation of the
       * category axis.
       */
      public fun categoryAxisDisplayOptions(categoryAxisDisplayOptions: IResolvable)

      /**
       * @param categoryAxisDisplayOptions The options that determine the presentation of the
       * category axis.
       */
      public fun categoryAxisDisplayOptions(categoryAxisDisplayOptions: AxisDisplayOptionsProperty)

      /**
       * @param categoryAxisDisplayOptions The options that determine the presentation of the
       * category axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6bcf9126cfcb43db5c914e4ad4c9243c164b55f69a2c6c0ae25e82194a8cc5a2")
      public
          fun categoryAxisDisplayOptions(categoryAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param categoryAxisLabelOptions The options that determine the presentation of the category
       * axis label.
       */
      public fun categoryAxisLabelOptions(categoryAxisLabelOptions: IResolvable)

      /**
       * @param categoryAxisLabelOptions The options that determine the presentation of the category
       * axis label.
       */
      public fun categoryAxisLabelOptions(categoryAxisLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param categoryAxisLabelOptions The options that determine the presentation of the category
       * axis label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("45081e56a67fcf9c03ddc45a55f516aace3f1ba58188f3734ef066e729977b6a")
      public
          fun categoryAxisLabelOptions(categoryAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param dataLabels The data label configuration of a waterfall visual.
       */
      public fun dataLabels(dataLabels: IResolvable)

      /**
       * @param dataLabels The data label configuration of a waterfall visual.
       */
      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      /**
       * @param dataLabels The data label configuration of a waterfall visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7458636886a8bc97087def2e4071340ae1a9a90921c10283b569b32657568924")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field well configuration of a waterfall visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field well configuration of a waterfall visual.
       */
      public fun fieldWells(fieldWells: WaterfallChartFieldWellsProperty)

      /**
       * @param fieldWells The field well configuration of a waterfall visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d57c49dc484a1778325d068326bd9c93a9b12cc9d5d42d2fe3a0c0fe2d289b43")
      public fun fieldWells(fieldWells: WaterfallChartFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param legend The legend configuration of a waterfall visual.
       */
      public fun legend(legend: IResolvable)

      /**
       * @param legend The legend configuration of a waterfall visual.
       */
      public fun legend(legend: LegendOptionsProperty)

      /**
       * @param legend The legend configuration of a waterfall visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f0294b6ac65a546a211a6353d5e16225ebfd408664c141483e1ae6cb87645730")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      /**
       * @param primaryYAxisDisplayOptions The options that determine the presentation of the
       * y-axis.
       */
      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable)

      /**
       * @param primaryYAxisDisplayOptions The options that determine the presentation of the
       * y-axis.
       */
      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty)

      /**
       * @param primaryYAxisDisplayOptions The options that determine the presentation of the
       * y-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("81a11ba50d92ed506a611716e61eca936734256ef32e28b8874dbb59cb964bea")
      public
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param primaryYAxisLabelOptions The options that determine the presentation of the y-axis
       * label.
       */
      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable)

      /**
       * @param primaryYAxisLabelOptions The options that determine the presentation of the y-axis
       * label.
       */
      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param primaryYAxisLabelOptions The options that determine the presentation of the y-axis
       * label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("25697cf65eee7fe937e8818c955ed256a372523703a73ff4b8130c2618c119b2")
      public
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param sortConfiguration The sort configuration of a waterfall visual.
       */
      public fun sortConfiguration(sortConfiguration: IResolvable)

      /**
       * @param sortConfiguration The sort configuration of a waterfall visual.
       */
      public fun sortConfiguration(sortConfiguration: WaterfallChartSortConfigurationProperty)

      /**
       * @param sortConfiguration The sort configuration of a waterfall visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9c85018bb20b4aaec3e0aa26536a432525880a7f12096e85a167cfd9484da711")
      public
          fun sortConfiguration(sortConfiguration: WaterfallChartSortConfigurationProperty.Builder.() -> Unit)

      /**
       * @param visualPalette The visual palette configuration of a waterfall visual.
       */
      public fun visualPalette(visualPalette: IResolvable)

      /**
       * @param visualPalette The visual palette configuration of a waterfall visual.
       */
      public fun visualPalette(visualPalette: VisualPaletteProperty)

      /**
       * @param visualPalette The visual palette configuration of a waterfall visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1afb0737db7dcb678c27f9bad2d271853027b46a3b97e61ad7799e0929397d62")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)

      /**
       * @param waterfallChartOptions The options that determine the presentation of a waterfall
       * visual.
       */
      public fun waterfallChartOptions(waterfallChartOptions: IResolvable)

      /**
       * @param waterfallChartOptions The options that determine the presentation of a waterfall
       * visual.
       */
      public fun waterfallChartOptions(waterfallChartOptions: WaterfallChartOptionsProperty)

      /**
       * @param waterfallChartOptions The options that determine the presentation of a waterfall
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9f5e2f8b3b493f22065a3dc21e6ddc54a0cf59b78bf2cc366eb09bfe456d051b")
      public
          fun waterfallChartOptions(waterfallChartOptions: WaterfallChartOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartConfigurationProperty.builder()

      /**
       * @param categoryAxisDisplayOptions The options that determine the presentation of the
       * category axis.
       */
      override fun categoryAxisDisplayOptions(categoryAxisDisplayOptions: IResolvable) {
        cdkBuilder.categoryAxisDisplayOptions(categoryAxisDisplayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param categoryAxisDisplayOptions The options that determine the presentation of the
       * category axis.
       */
      override
          fun categoryAxisDisplayOptions(categoryAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.categoryAxisDisplayOptions(categoryAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param categoryAxisDisplayOptions The options that determine the presentation of the
       * category axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6bcf9126cfcb43db5c914e4ad4c9243c164b55f69a2c6c0ae25e82194a8cc5a2")
      override
          fun categoryAxisDisplayOptions(categoryAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = categoryAxisDisplayOptions(AxisDisplayOptionsProperty(categoryAxisDisplayOptions))

      /**
       * @param categoryAxisLabelOptions The options that determine the presentation of the category
       * axis label.
       */
      override fun categoryAxisLabelOptions(categoryAxisLabelOptions: IResolvable) {
        cdkBuilder.categoryAxisLabelOptions(categoryAxisLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param categoryAxisLabelOptions The options that determine the presentation of the category
       * axis label.
       */
      override
          fun categoryAxisLabelOptions(categoryAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryAxisLabelOptions(categoryAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param categoryAxisLabelOptions The options that determine the presentation of the category
       * axis label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("45081e56a67fcf9c03ddc45a55f516aace3f1ba58188f3734ef066e729977b6a")
      override
          fun categoryAxisLabelOptions(categoryAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryAxisLabelOptions(ChartAxisLabelOptionsProperty(categoryAxisLabelOptions))

      /**
       * @param dataLabels The data label configuration of a waterfall visual.
       */
      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      /**
       * @param dataLabels The data label configuration of a waterfall visual.
       */
      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      /**
       * @param dataLabels The data label configuration of a waterfall visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7458636886a8bc97087def2e4071340ae1a9a90921c10283b569b32657568924")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      /**
       * @param fieldWells The field well configuration of a waterfall visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a waterfall visual.
       */
      override fun fieldWells(fieldWells: WaterfallChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(WaterfallChartFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a waterfall visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d57c49dc484a1778325d068326bd9c93a9b12cc9d5d42d2fe3a0c0fe2d289b43")
      override fun fieldWells(fieldWells: WaterfallChartFieldWellsProperty.Builder.() -> Unit): Unit
          = fieldWells(WaterfallChartFieldWellsProperty(fieldWells))

      /**
       * @param legend The legend configuration of a waterfall visual.
       */
      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      /**
       * @param legend The legend configuration of a waterfall visual.
       */
      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      /**
       * @param legend The legend configuration of a waterfall visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f0294b6ac65a546a211a6353d5e16225ebfd408664c141483e1ae6cb87645730")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      /**
       * @param primaryYAxisDisplayOptions The options that determine the presentation of the
       * y-axis.
       */
      override fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param primaryYAxisDisplayOptions The options that determine the presentation of the
       * y-axis.
       */
      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param primaryYAxisDisplayOptions The options that determine the presentation of the
       * y-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("81a11ba50d92ed506a611716e61eca936734256ef32e28b8874dbb59cb964bea")
      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisDisplayOptions(AxisDisplayOptionsProperty(primaryYAxisDisplayOptions))

      /**
       * @param primaryYAxisLabelOptions The options that determine the presentation of the y-axis
       * label.
       */
      override fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param primaryYAxisLabelOptions The options that determine the presentation of the y-axis
       * label.
       */
      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param primaryYAxisLabelOptions The options that determine the presentation of the y-axis
       * label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("25697cf65eee7fe937e8818c955ed256a372523703a73ff4b8130c2618c119b2")
      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisLabelOptions(ChartAxisLabelOptionsProperty(primaryYAxisLabelOptions))

      /**
       * @param sortConfiguration The sort configuration of a waterfall visual.
       */
      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a waterfall visual.
       */
      override fun sortConfiguration(sortConfiguration: WaterfallChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(WaterfallChartSortConfigurationProperty::unwrap))
      }

      /**
       * @param sortConfiguration The sort configuration of a waterfall visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9c85018bb20b4aaec3e0aa26536a432525880a7f12096e85a167cfd9484da711")
      override
          fun sortConfiguration(sortConfiguration: WaterfallChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(WaterfallChartSortConfigurationProperty(sortConfiguration))

      /**
       * @param visualPalette The visual palette configuration of a waterfall visual.
       */
      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      /**
       * @param visualPalette The visual palette configuration of a waterfall visual.
       */
      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      /**
       * @param visualPalette The visual palette configuration of a waterfall visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1afb0737db7dcb678c27f9bad2d271853027b46a3b97e61ad7799e0929397d62")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      /**
       * @param waterfallChartOptions The options that determine the presentation of a waterfall
       * visual.
       */
      override fun waterfallChartOptions(waterfallChartOptions: IResolvable) {
        cdkBuilder.waterfallChartOptions(waterfallChartOptions.let(IResolvable::unwrap))
      }

      /**
       * @param waterfallChartOptions The options that determine the presentation of a waterfall
       * visual.
       */
      override fun waterfallChartOptions(waterfallChartOptions: WaterfallChartOptionsProperty) {
        cdkBuilder.waterfallChartOptions(waterfallChartOptions.let(WaterfallChartOptionsProperty::unwrap))
      }

      /**
       * @param waterfallChartOptions The options that determine the presentation of a waterfall
       * visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9f5e2f8b3b493f22065a3dc21e6ddc54a0cf59b78bf2cc366eb09bfe456d051b")
      override
          fun waterfallChartOptions(waterfallChartOptions: WaterfallChartOptionsProperty.Builder.() -> Unit):
          Unit = waterfallChartOptions(WaterfallChartOptionsProperty(waterfallChartOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartConfigurationProperty,
    ) : WaterfallChartConfigurationProperty {
      /**
       * The options that determine the presentation of the category axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-categoryaxisdisplayoptions)
       */
      override fun categoryAxisDisplayOptions(): Any? = unwrap(this).getCategoryAxisDisplayOptions()

      /**
       * The options that determine the presentation of the category axis label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-categoryaxislabeloptions)
       */
      override fun categoryAxisLabelOptions(): Any? = unwrap(this).getCategoryAxisLabelOptions()

      /**
       * The data label configuration of a waterfall visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-datalabels)
       */
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      /**
       * The field well configuration of a waterfall visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The legend configuration of a waterfall visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-legend)
       */
      override fun legend(): Any? = unwrap(this).getLegend()

      /**
       * The options that determine the presentation of the y-axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-primaryyaxisdisplayoptions)
       */
      override fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

      /**
       * The options that determine the presentation of the y-axis label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-primaryyaxislabeloptions)
       */
      override fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

      /**
       * The sort configuration of a waterfall visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-sortconfiguration)
       */
      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      /**
       * The visual palette configuration of a waterfall visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-visualpalette)
       */
      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()

      /**
       * The options that determine the presentation of a waterfall visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-waterfallchartoptions)
       */
      override fun waterfallChartOptions(): Any? = unwrap(this).getWaterfallChartOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          WaterfallChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartConfigurationProperty):
          WaterfallChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WaterfallChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DateDimensionFieldProperty {
    /**
     * The column that is used in the `DateDimensionField` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-column)
     */
    public fun column(): Any

    /**
     * The date granularity of the `DateDimensionField` . Choose one of the following options:.
     *
     * * `YEAR`
     * * `QUARTER`
     * * `MONTH`
     * * `WEEK`
     * * `DAY`
     * * `HOUR`
     * * `MINUTE`
     * * `SECOND`
     * * `MILLISECOND`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-dategranularity)
     */
    public fun dateGranularity(): String? = unwrap(this).getDateGranularity()

    /**
     * The custom field ID.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-fieldid)
     */
    public fun fieldId(): String

    /**
     * The format configuration of the field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-formatconfiguration)
     */
    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    /**
     * The custom hierarchy ID.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-hierarchyid)
     */
    public fun hierarchyId(): String? = unwrap(this).getHierarchyId()

    /**
     * A builder for [DateDimensionFieldProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param column The column that is used in the `DateDimensionField` . 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that is used in the `DateDimensionField` . 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that is used in the `DateDimensionField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("426bdad6b7f60b975334e6a95f84b092a05a53b6a649a066162a5646a307ae5a")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param dateGranularity The date granularity of the `DateDimensionField` . Choose one of the
       * following options:.
       * * `YEAR`
       * * `QUARTER`
       * * `MONTH`
       * * `WEEK`
       * * `DAY`
       * * `HOUR`
       * * `MINUTE`
       * * `SECOND`
       * * `MILLISECOND`
       */
      public fun dateGranularity(dateGranularity: String)

      /**
       * @param fieldId The custom field ID. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: IResolvable)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bd40217f5f77b5d0a14946016c8776b6ac6329cbf3ce1d4b862bbbdcc65e5d81")
      public
          fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param hierarchyId The custom hierarchy ID.
       */
      public fun hierarchyId(hierarchyId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateDimensionFieldProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateDimensionFieldProperty.builder()

      /**
       * @param column The column that is used in the `DateDimensionField` . 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that is used in the `DateDimensionField` . 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that is used in the `DateDimensionField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("426bdad6b7f60b975334e6a95f84b092a05a53b6a649a066162a5646a307ae5a")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param dateGranularity The date granularity of the `DateDimensionField` . Choose one of the
       * following options:.
       * * `YEAR`
       * * `QUARTER`
       * * `MONTH`
       * * `WEEK`
       * * `DAY`
       * * `HOUR`
       * * `MINUTE`
       * * `SECOND`
       * * `MILLISECOND`
       */
      override fun dateGranularity(dateGranularity: String) {
        cdkBuilder.dateGranularity(dateGranularity)
      }

      /**
       * @param fieldId The custom field ID. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(DateTimeFormatConfigurationProperty::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bd40217f5f77b5d0a14946016c8776b6ac6329cbf3ce1d4b862bbbdcc65e5d81")
      override
          fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(DateTimeFormatConfigurationProperty(formatConfiguration))

      /**
       * @param hierarchyId The custom hierarchy ID.
       */
      override fun hierarchyId(hierarchyId: String) {
        cdkBuilder.hierarchyId(hierarchyId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateDimensionFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateDimensionFieldProperty,
    ) : DateDimensionFieldProperty {
      /**
       * The column that is used in the `DateDimensionField` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The date granularity of the `DateDimensionField` . Choose one of the following options:.
       *
       * * `YEAR`
       * * `QUARTER`
       * * `MONTH`
       * * `WEEK`
       * * `DAY`
       * * `HOUR`
       * * `MINUTE`
       * * `SECOND`
       * * `MILLISECOND`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-dategranularity)
       */
      override fun dateGranularity(): String? = unwrap(this).getDateGranularity()

      /**
       * The custom field ID.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The format configuration of the field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-formatconfiguration)
       */
      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

      /**
       * The custom hierarchy ID.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-hierarchyid)
       */
      override fun hierarchyId(): String? = unwrap(this).getHierarchyId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DateDimensionFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DateDimensionFieldProperty):
          DateDimensionFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateDimensionFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateDimensionFieldProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ReferenceLineValueLabelConfigurationProperty {
    /**
     * The format configuration of the value label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinevaluelabelconfiguration.html#cfn-quicksight-analysis-referencelinevaluelabelconfiguration-formatconfiguration)
     */
    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    /**
     * The relative position of the value label. Choose one of the following options:.
     *
     * * `BEFORE_CUSTOM_LABEL`
     * * `AFTER_CUSTOM_LABEL`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinevaluelabelconfiguration.html#cfn-quicksight-analysis-referencelinevaluelabelconfiguration-relativeposition)
     */
    public fun relativePosition(): String? = unwrap(this).getRelativePosition()

    /**
     * A builder for [ReferenceLineValueLabelConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param formatConfiguration The format configuration of the value label.
       */
      public fun formatConfiguration(formatConfiguration: IResolvable)

      /**
       * @param formatConfiguration The format configuration of the value label.
       */
      public fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty)

      /**
       * @param formatConfiguration The format configuration of the value label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f1ffe70895a77e280f9808b7249b522d944f50c26aec77d0deab51da68ba4ec5")
      public
          fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param relativePosition The relative position of the value label. Choose one of the
       * following options:.
       * * `BEFORE_CUSTOM_LABEL`
       * * `AFTER_CUSTOM_LABEL`
       */
      public fun relativePosition(relativePosition: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineValueLabelConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineValueLabelConfigurationProperty.builder()

      /**
       * @param formatConfiguration The format configuration of the value label.
       */
      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the value label.
       */
      override fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(NumericFormatConfigurationProperty::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the value label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f1ffe70895a77e280f9808b7249b522d944f50c26aec77d0deab51da68ba4ec5")
      override
          fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(NumericFormatConfigurationProperty(formatConfiguration))

      /**
       * @param relativePosition The relative position of the value label. Choose one of the
       * following options:.
       * * `BEFORE_CUSTOM_LABEL`
       * * `AFTER_CUSTOM_LABEL`
       */
      override fun relativePosition(relativePosition: String) {
        cdkBuilder.relativePosition(relativePosition)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineValueLabelConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineValueLabelConfigurationProperty,
    ) : ReferenceLineValueLabelConfigurationProperty {
      /**
       * The format configuration of the value label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinevaluelabelconfiguration.html#cfn-quicksight-analysis-referencelinevaluelabelconfiguration-formatconfiguration)
       */
      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

      /**
       * The relative position of the value label. Choose one of the following options:.
       *
       * * `BEFORE_CUSTOM_LABEL`
       * * `AFTER_CUSTOM_LABEL`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinevaluelabelconfiguration.html#cfn-quicksight-analysis-referencelinevaluelabelconfiguration-relativeposition)
       */
      override fun relativePosition(): String? = unwrap(this).getRelativePosition()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineValueLabelConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineValueLabelConfigurationProperty):
          ReferenceLineValueLabelConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineValueLabelConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineValueLabelConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DonutCenterOptionsProperty {
    /**
     * Determines the visibility of the label in a donut chart.
     *
     * In the Amazon QuickSight console, this option is called `'Show total'` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutcenteroptions.html#cfn-quicksight-analysis-donutcenteroptions-labelvisibility)
     */
    public fun labelVisibility(): String? = unwrap(this).getLabelVisibility()

    /**
     * A builder for [DonutCenterOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param labelVisibility Determines the visibility of the label in a donut chart.
       * In the Amazon QuickSight console, this option is called `'Show total'` .
       */
      public fun labelVisibility(labelVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DonutCenterOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DonutCenterOptionsProperty.builder()

      /**
       * @param labelVisibility Determines the visibility of the label in a donut chart.
       * In the Amazon QuickSight console, this option is called `'Show total'` .
       */
      override fun labelVisibility(labelVisibility: String) {
        cdkBuilder.labelVisibility(labelVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DonutCenterOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DonutCenterOptionsProperty,
    ) : DonutCenterOptionsProperty {
      /**
       * Determines the visibility of the label in a donut chart.
       *
       * In the Amazon QuickSight console, this option is called `'Show total'` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutcenteroptions.html#cfn-quicksight-analysis-donutcenteroptions-labelvisibility)
       */
      override fun labelVisibility(): String? = unwrap(this).getLabelVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DonutCenterOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DonutCenterOptionsProperty):
          DonutCenterOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DonutCenterOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DonutCenterOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableSortConfigurationProperty {
    /**
     * The field sort options for a pivot table sort configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortconfiguration.html#cfn-quicksight-analysis-pivottablesortconfiguration-fieldsortoptions)
     */
    public fun fieldSortOptions(): Any? = unwrap(this).getFieldSortOptions()

    /**
     * A builder for [PivotTableSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldSortOptions The field sort options for a pivot table sort configuration.
       */
      public fun fieldSortOptions(fieldSortOptions: IResolvable)

      /**
       * @param fieldSortOptions The field sort options for a pivot table sort configuration.
       */
      public fun fieldSortOptions(fieldSortOptions: List<Any>)

      /**
       * @param fieldSortOptions The field sort options for a pivot table sort configuration.
       */
      public fun fieldSortOptions(vararg fieldSortOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableSortConfigurationProperty.builder()

      /**
       * @param fieldSortOptions The field sort options for a pivot table sort configuration.
       */
      override fun fieldSortOptions(fieldSortOptions: IResolvable) {
        cdkBuilder.fieldSortOptions(fieldSortOptions.let(IResolvable::unwrap))
      }

      /**
       * @param fieldSortOptions The field sort options for a pivot table sort configuration.
       */
      override fun fieldSortOptions(fieldSortOptions: List<Any>) {
        cdkBuilder.fieldSortOptions(fieldSortOptions)
      }

      /**
       * @param fieldSortOptions The field sort options for a pivot table sort configuration.
       */
      override fun fieldSortOptions(vararg fieldSortOptions: Any): Unit =
          fieldSortOptions(fieldSortOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableSortConfigurationProperty,
    ) : PivotTableSortConfigurationProperty {
      /**
       * The field sort options for a pivot table sort configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortconfiguration.html#cfn-quicksight-analysis-pivottablesortconfiguration-fieldsortoptions)
       */
      override fun fieldSortOptions(): Any? = unwrap(this).getFieldSortOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableSortConfigurationProperty):
          PivotTableSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableSortConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableFieldOptionsProperty {
    /**
     * The collapse state options for the pivot table field options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoptions.html#cfn-quicksight-analysis-pivottablefieldoptions-collapsestateoptions)
     */
    public fun collapseStateOptions(): Any? = unwrap(this).getCollapseStateOptions()

    /**
     * The data path options for the pivot table field options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoptions.html#cfn-quicksight-analysis-pivottablefieldoptions-datapathoptions)
     */
    public fun dataPathOptions(): Any? = unwrap(this).getDataPathOptions()

    /**
     * The selected field options for the pivot table field options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoptions.html#cfn-quicksight-analysis-pivottablefieldoptions-selectedfieldoptions)
     */
    public fun selectedFieldOptions(): Any? = unwrap(this).getSelectedFieldOptions()

    /**
     * A builder for [PivotTableFieldOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param collapseStateOptions The collapse state options for the pivot table field options.
       */
      public fun collapseStateOptions(collapseStateOptions: IResolvable)

      /**
       * @param collapseStateOptions The collapse state options for the pivot table field options.
       */
      public fun collapseStateOptions(collapseStateOptions: List<Any>)

      /**
       * @param collapseStateOptions The collapse state options for the pivot table field options.
       */
      public fun collapseStateOptions(vararg collapseStateOptions: Any)

      /**
       * @param dataPathOptions The data path options for the pivot table field options.
       */
      public fun dataPathOptions(dataPathOptions: IResolvable)

      /**
       * @param dataPathOptions The data path options for the pivot table field options.
       */
      public fun dataPathOptions(dataPathOptions: List<Any>)

      /**
       * @param dataPathOptions The data path options for the pivot table field options.
       */
      public fun dataPathOptions(vararg dataPathOptions: Any)

      /**
       * @param selectedFieldOptions The selected field options for the pivot table field options.
       */
      public fun selectedFieldOptions(selectedFieldOptions: IResolvable)

      /**
       * @param selectedFieldOptions The selected field options for the pivot table field options.
       */
      public fun selectedFieldOptions(selectedFieldOptions: List<Any>)

      /**
       * @param selectedFieldOptions The selected field options for the pivot table field options.
       */
      public fun selectedFieldOptions(vararg selectedFieldOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldOptionsProperty.builder()

      /**
       * @param collapseStateOptions The collapse state options for the pivot table field options.
       */
      override fun collapseStateOptions(collapseStateOptions: IResolvable) {
        cdkBuilder.collapseStateOptions(collapseStateOptions.let(IResolvable::unwrap))
      }

      /**
       * @param collapseStateOptions The collapse state options for the pivot table field options.
       */
      override fun collapseStateOptions(collapseStateOptions: List<Any>) {
        cdkBuilder.collapseStateOptions(collapseStateOptions)
      }

      /**
       * @param collapseStateOptions The collapse state options for the pivot table field options.
       */
      override fun collapseStateOptions(vararg collapseStateOptions: Any): Unit =
          collapseStateOptions(collapseStateOptions.toList())

      /**
       * @param dataPathOptions The data path options for the pivot table field options.
       */
      override fun dataPathOptions(dataPathOptions: IResolvable) {
        cdkBuilder.dataPathOptions(dataPathOptions.let(IResolvable::unwrap))
      }

      /**
       * @param dataPathOptions The data path options for the pivot table field options.
       */
      override fun dataPathOptions(dataPathOptions: List<Any>) {
        cdkBuilder.dataPathOptions(dataPathOptions)
      }

      /**
       * @param dataPathOptions The data path options for the pivot table field options.
       */
      override fun dataPathOptions(vararg dataPathOptions: Any): Unit =
          dataPathOptions(dataPathOptions.toList())

      /**
       * @param selectedFieldOptions The selected field options for the pivot table field options.
       */
      override fun selectedFieldOptions(selectedFieldOptions: IResolvable) {
        cdkBuilder.selectedFieldOptions(selectedFieldOptions.let(IResolvable::unwrap))
      }

      /**
       * @param selectedFieldOptions The selected field options for the pivot table field options.
       */
      override fun selectedFieldOptions(selectedFieldOptions: List<Any>) {
        cdkBuilder.selectedFieldOptions(selectedFieldOptions)
      }

      /**
       * @param selectedFieldOptions The selected field options for the pivot table field options.
       */
      override fun selectedFieldOptions(vararg selectedFieldOptions: Any): Unit =
          selectedFieldOptions(selectedFieldOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldOptionsProperty,
    ) : PivotTableFieldOptionsProperty {
      /**
       * The collapse state options for the pivot table field options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoptions.html#cfn-quicksight-analysis-pivottablefieldoptions-collapsestateoptions)
       */
      override fun collapseStateOptions(): Any? = unwrap(this).getCollapseStateOptions()

      /**
       * The data path options for the pivot table field options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoptions.html#cfn-quicksight-analysis-pivottablefieldoptions-datapathoptions)
       */
      override fun dataPathOptions(): Any? = unwrap(this).getDataPathOptions()

      /**
       * The selected field options for the pivot table field options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoptions.html#cfn-quicksight-analysis-pivottablefieldoptions-selectedfieldoptions)
       */
      override fun selectedFieldOptions(): Any? = unwrap(this).getSelectedFieldOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableFieldOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldOptionsProperty):
          PivotTableFieldOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableFieldOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface AnalysisDefinitionProperty {
    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-analysisdefaults)
     */
    public fun analysisDefaults(): Any? = unwrap(this).getAnalysisDefaults()

    /**
     * An array of calculated field definitions for the analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-calculatedfields)
     */
    public fun calculatedFields(): Any? = unwrap(this).getCalculatedFields()

    /**
     * An array of analysis-level column configurations.
     *
     * Column configurations can be used to set default formatting for a column to be used
     * throughout an analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-columnconfigurations)
     */
    public fun columnConfigurations(): Any? = unwrap(this).getColumnConfigurations()

    /**
     * An array of dataset identifier declarations.
     *
     * This mapping allows the usage of dataset identifiers instead of dataset ARNs throughout
     * analysis sub-structures.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-datasetidentifierdeclarations)
     */
    public fun dataSetIdentifierDeclarations(): Any

    /**
     * Filter definitions for an analysis.
     *
     * For more information, see [Filtering Data in Amazon
     * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the
     * *Amazon QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-filtergroups)
     */
    public fun filterGroups(): Any? = unwrap(this).getFilterGroups()

    /**
     * An array of option definitions for an analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-options)
     */
    public fun options(): Any? = unwrap(this).getOptions()

    /**
     * An array of parameter declarations for an analysis.
     *
     * Parameters are named variables that can transfer a value for use by an action or an object.
     *
     * For more information, see [Parameters in Amazon
     * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-parameterdeclarations)
     */
    public fun parameterDeclarations(): Any? = unwrap(this).getParameterDeclarations()

    /**
     * An array of sheet definitions for an analysis.
     *
     * Each `SheetDefinition` provides detailed information about a sheet within this analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-sheets)
     */
    public fun sheets(): Any? = unwrap(this).getSheets()

    /**
     * A builder for [AnalysisDefinitionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param analysisDefaults the value to be set.
       */
      public fun analysisDefaults(analysisDefaults: IResolvable)

      /**
       * @param analysisDefaults the value to be set.
       */
      public fun analysisDefaults(analysisDefaults: AnalysisDefaultsProperty)

      /**
       * @param analysisDefaults the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("00cdac2bc3eb1acd3f925da526b7b48983b40e689e41b4295e1e61afc08903e4")
      public fun analysisDefaults(analysisDefaults: AnalysisDefaultsProperty.Builder.() -> Unit)

      /**
       * @param calculatedFields An array of calculated field definitions for the analysis.
       */
      public fun calculatedFields(calculatedFields: IResolvable)

      /**
       * @param calculatedFields An array of calculated field definitions for the analysis.
       */
      public fun calculatedFields(calculatedFields: List<Any>)

      /**
       * @param calculatedFields An array of calculated field definitions for the analysis.
       */
      public fun calculatedFields(vararg calculatedFields: Any)

      /**
       * @param columnConfigurations An array of analysis-level column configurations.
       * Column configurations can be used to set default formatting for a column to be used
       * throughout an analysis.
       */
      public fun columnConfigurations(columnConfigurations: IResolvable)

      /**
       * @param columnConfigurations An array of analysis-level column configurations.
       * Column configurations can be used to set default formatting for a column to be used
       * throughout an analysis.
       */
      public fun columnConfigurations(columnConfigurations: List<Any>)

      /**
       * @param columnConfigurations An array of analysis-level column configurations.
       * Column configurations can be used to set default formatting for a column to be used
       * throughout an analysis.
       */
      public fun columnConfigurations(vararg columnConfigurations: Any)

      /**
       * @param dataSetIdentifierDeclarations An array of dataset identifier declarations. 
       * This mapping allows the usage of dataset identifiers instead of dataset ARNs throughout
       * analysis sub-structures.
       */
      public fun dataSetIdentifierDeclarations(dataSetIdentifierDeclarations: IResolvable)

      /**
       * @param dataSetIdentifierDeclarations An array of dataset identifier declarations. 
       * This mapping allows the usage of dataset identifiers instead of dataset ARNs throughout
       * analysis sub-structures.
       */
      public fun dataSetIdentifierDeclarations(dataSetIdentifierDeclarations: List<Any>)

      /**
       * @param dataSetIdentifierDeclarations An array of dataset identifier declarations. 
       * This mapping allows the usage of dataset identifiers instead of dataset ARNs throughout
       * analysis sub-structures.
       */
      public fun dataSetIdentifierDeclarations(vararg dataSetIdentifierDeclarations: Any)

      /**
       * @param filterGroups Filter definitions for an analysis.
       * For more information, see [Filtering Data in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun filterGroups(filterGroups: IResolvable)

      /**
       * @param filterGroups Filter definitions for an analysis.
       * For more information, see [Filtering Data in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun filterGroups(filterGroups: List<Any>)

      /**
       * @param filterGroups Filter definitions for an analysis.
       * For more information, see [Filtering Data in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the
       * *Amazon QuickSight User Guide* .
       */
      public fun filterGroups(vararg filterGroups: Any)

      /**
       * @param options An array of option definitions for an analysis.
       */
      public fun options(options: IResolvable)

      /**
       * @param options An array of option definitions for an analysis.
       */
      public fun options(options: AssetOptionsProperty)

      /**
       * @param options An array of option definitions for an analysis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b4c48dba508f1189573306cc37b4b1ca97f97fc049ac6340f7a2800e5b1bc12a")
      public fun options(options: AssetOptionsProperty.Builder.() -> Unit)

      /**
       * @param parameterDeclarations An array of parameter declarations for an analysis.
       * Parameters are named variables that can transfer a value for use by an action or an object.
       *
       * For more information, see [Parameters in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html)
       * in the *Amazon QuickSight User Guide* .
       */
      public fun parameterDeclarations(parameterDeclarations: IResolvable)

      /**
       * @param parameterDeclarations An array of parameter declarations for an analysis.
       * Parameters are named variables that can transfer a value for use by an action or an object.
       *
       * For more information, see [Parameters in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html)
       * in the *Amazon QuickSight User Guide* .
       */
      public fun parameterDeclarations(parameterDeclarations: List<Any>)

      /**
       * @param parameterDeclarations An array of parameter declarations for an analysis.
       * Parameters are named variables that can transfer a value for use by an action or an object.
       *
       * For more information, see [Parameters in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html)
       * in the *Amazon QuickSight User Guide* .
       */
      public fun parameterDeclarations(vararg parameterDeclarations: Any)

      /**
       * @param sheets An array of sheet definitions for an analysis.
       * Each `SheetDefinition` provides detailed information about a sheet within this analysis.
       */
      public fun sheets(sheets: IResolvable)

      /**
       * @param sheets An array of sheet definitions for an analysis.
       * Each `SheetDefinition` provides detailed information about a sheet within this analysis.
       */
      public fun sheets(sheets: List<Any>)

      /**
       * @param sheets An array of sheet definitions for an analysis.
       * Each `SheetDefinition` provides detailed information about a sheet within this analysis.
       */
      public fun sheets(vararg sheets: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisDefinitionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisDefinitionProperty.builder()

      /**
       * @param analysisDefaults the value to be set.
       */
      override fun analysisDefaults(analysisDefaults: IResolvable) {
        cdkBuilder.analysisDefaults(analysisDefaults.let(IResolvable::unwrap))
      }

      /**
       * @param analysisDefaults the value to be set.
       */
      override fun analysisDefaults(analysisDefaults: AnalysisDefaultsProperty) {
        cdkBuilder.analysisDefaults(analysisDefaults.let(AnalysisDefaultsProperty::unwrap))
      }

      /**
       * @param analysisDefaults the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("00cdac2bc3eb1acd3f925da526b7b48983b40e689e41b4295e1e61afc08903e4")
      override fun analysisDefaults(analysisDefaults: AnalysisDefaultsProperty.Builder.() -> Unit):
          Unit = analysisDefaults(AnalysisDefaultsProperty(analysisDefaults))

      /**
       * @param calculatedFields An array of calculated field definitions for the analysis.
       */
      override fun calculatedFields(calculatedFields: IResolvable) {
        cdkBuilder.calculatedFields(calculatedFields.let(IResolvable::unwrap))
      }

      /**
       * @param calculatedFields An array of calculated field definitions for the analysis.
       */
      override fun calculatedFields(calculatedFields: List<Any>) {
        cdkBuilder.calculatedFields(calculatedFields)
      }

      /**
       * @param calculatedFields An array of calculated field definitions for the analysis.
       */
      override fun calculatedFields(vararg calculatedFields: Any): Unit =
          calculatedFields(calculatedFields.toList())

      /**
       * @param columnConfigurations An array of analysis-level column configurations.
       * Column configurations can be used to set default formatting for a column to be used
       * throughout an analysis.
       */
      override fun columnConfigurations(columnConfigurations: IResolvable) {
        cdkBuilder.columnConfigurations(columnConfigurations.let(IResolvable::unwrap))
      }

      /**
       * @param columnConfigurations An array of analysis-level column configurations.
       * Column configurations can be used to set default formatting for a column to be used
       * throughout an analysis.
       */
      override fun columnConfigurations(columnConfigurations: List<Any>) {
        cdkBuilder.columnConfigurations(columnConfigurations)
      }

      /**
       * @param columnConfigurations An array of analysis-level column configurations.
       * Column configurations can be used to set default formatting for a column to be used
       * throughout an analysis.
       */
      override fun columnConfigurations(vararg columnConfigurations: Any): Unit =
          columnConfigurations(columnConfigurations.toList())

      /**
       * @param dataSetIdentifierDeclarations An array of dataset identifier declarations. 
       * This mapping allows the usage of dataset identifiers instead of dataset ARNs throughout
       * analysis sub-structures.
       */
      override fun dataSetIdentifierDeclarations(dataSetIdentifierDeclarations: IResolvable) {
        cdkBuilder.dataSetIdentifierDeclarations(dataSetIdentifierDeclarations.let(IResolvable::unwrap))
      }

      /**
       * @param dataSetIdentifierDeclarations An array of dataset identifier declarations. 
       * This mapping allows the usage of dataset identifiers instead of dataset ARNs throughout
       * analysis sub-structures.
       */
      override fun dataSetIdentifierDeclarations(dataSetIdentifierDeclarations: List<Any>) {
        cdkBuilder.dataSetIdentifierDeclarations(dataSetIdentifierDeclarations)
      }

      /**
       * @param dataSetIdentifierDeclarations An array of dataset identifier declarations. 
       * This mapping allows the usage of dataset identifiers instead of dataset ARNs throughout
       * analysis sub-structures.
       */
      override fun dataSetIdentifierDeclarations(vararg dataSetIdentifierDeclarations: Any): Unit =
          dataSetIdentifierDeclarations(dataSetIdentifierDeclarations.toList())

      /**
       * @param filterGroups Filter definitions for an analysis.
       * For more information, see [Filtering Data in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun filterGroups(filterGroups: IResolvable) {
        cdkBuilder.filterGroups(filterGroups.let(IResolvable::unwrap))
      }

      /**
       * @param filterGroups Filter definitions for an analysis.
       * For more information, see [Filtering Data in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun filterGroups(filterGroups: List<Any>) {
        cdkBuilder.filterGroups(filterGroups)
      }

      /**
       * @param filterGroups Filter definitions for an analysis.
       * For more information, see [Filtering Data in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the
       * *Amazon QuickSight User Guide* .
       */
      override fun filterGroups(vararg filterGroups: Any): Unit =
          filterGroups(filterGroups.toList())

      /**
       * @param options An array of option definitions for an analysis.
       */
      override fun options(options: IResolvable) {
        cdkBuilder.options(options.let(IResolvable::unwrap))
      }

      /**
       * @param options An array of option definitions for an analysis.
       */
      override fun options(options: AssetOptionsProperty) {
        cdkBuilder.options(options.let(AssetOptionsProperty::unwrap))
      }

      /**
       * @param options An array of option definitions for an analysis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b4c48dba508f1189573306cc37b4b1ca97f97fc049ac6340f7a2800e5b1bc12a")
      override fun options(options: AssetOptionsProperty.Builder.() -> Unit): Unit =
          options(AssetOptionsProperty(options))

      /**
       * @param parameterDeclarations An array of parameter declarations for an analysis.
       * Parameters are named variables that can transfer a value for use by an action or an object.
       *
       * For more information, see [Parameters in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html)
       * in the *Amazon QuickSight User Guide* .
       */
      override fun parameterDeclarations(parameterDeclarations: IResolvable) {
        cdkBuilder.parameterDeclarations(parameterDeclarations.let(IResolvable::unwrap))
      }

      /**
       * @param parameterDeclarations An array of parameter declarations for an analysis.
       * Parameters are named variables that can transfer a value for use by an action or an object.
       *
       * For more information, see [Parameters in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html)
       * in the *Amazon QuickSight User Guide* .
       */
      override fun parameterDeclarations(parameterDeclarations: List<Any>) {
        cdkBuilder.parameterDeclarations(parameterDeclarations)
      }

      /**
       * @param parameterDeclarations An array of parameter declarations for an analysis.
       * Parameters are named variables that can transfer a value for use by an action or an object.
       *
       * For more information, see [Parameters in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html)
       * in the *Amazon QuickSight User Guide* .
       */
      override fun parameterDeclarations(vararg parameterDeclarations: Any): Unit =
          parameterDeclarations(parameterDeclarations.toList())

      /**
       * @param sheets An array of sheet definitions for an analysis.
       * Each `SheetDefinition` provides detailed information about a sheet within this analysis.
       */
      override fun sheets(sheets: IResolvable) {
        cdkBuilder.sheets(sheets.let(IResolvable::unwrap))
      }

      /**
       * @param sheets An array of sheet definitions for an analysis.
       * Each `SheetDefinition` provides detailed information about a sheet within this analysis.
       */
      override fun sheets(sheets: List<Any>) {
        cdkBuilder.sheets(sheets)
      }

      /**
       * @param sheets An array of sheet definitions for an analysis.
       * Each `SheetDefinition` provides detailed information about a sheet within this analysis.
       */
      override fun sheets(vararg sheets: Any): Unit = sheets(sheets.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisDefinitionProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisDefinitionProperty,
    ) : AnalysisDefinitionProperty {
      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-analysisdefaults)
       */
      override fun analysisDefaults(): Any? = unwrap(this).getAnalysisDefaults()

      /**
       * An array of calculated field definitions for the analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-calculatedfields)
       */
      override fun calculatedFields(): Any? = unwrap(this).getCalculatedFields()

      /**
       * An array of analysis-level column configurations.
       *
       * Column configurations can be used to set default formatting for a column to be used
       * throughout an analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-columnconfigurations)
       */
      override fun columnConfigurations(): Any? = unwrap(this).getColumnConfigurations()

      /**
       * An array of dataset identifier declarations.
       *
       * This mapping allows the usage of dataset identifiers instead of dataset ARNs throughout
       * analysis sub-structures.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-datasetidentifierdeclarations)
       */
      override fun dataSetIdentifierDeclarations(): Any =
          unwrap(this).getDataSetIdentifierDeclarations()

      /**
       * Filter definitions for an analysis.
       *
       * For more information, see [Filtering Data in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the
       * *Amazon QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-filtergroups)
       */
      override fun filterGroups(): Any? = unwrap(this).getFilterGroups()

      /**
       * An array of option definitions for an analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-options)
       */
      override fun options(): Any? = unwrap(this).getOptions()

      /**
       * An array of parameter declarations for an analysis.
       *
       * Parameters are named variables that can transfer a value for use by an action or an object.
       *
       * For more information, see [Parameters in Amazon
       * QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html)
       * in the *Amazon QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-parameterdeclarations)
       */
      override fun parameterDeclarations(): Any? = unwrap(this).getParameterDeclarations()

      /**
       * An array of sheet definitions for an analysis.
       *
       * Each `SheetDefinition` provides detailed information about a sheet within this analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-sheets)
       */
      override fun sheets(): Any? = unwrap(this).getSheets()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AnalysisDefinitionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisDefinitionProperty):
          AnalysisDefinitionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AnalysisDefinitionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisDefinitionProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableTotalOptionsProperty {
    /**
     * The column subtotal options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html#cfn-quicksight-analysis-pivottabletotaloptions-columnsubtotaloptions)
     */
    public fun columnSubtotalOptions(): Any? = unwrap(this).getColumnSubtotalOptions()

    /**
     * The column total options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html#cfn-quicksight-analysis-pivottabletotaloptions-columntotaloptions)
     */
    public fun columnTotalOptions(): Any? = unwrap(this).getColumnTotalOptions()

    /**
     * The row subtotal options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html#cfn-quicksight-analysis-pivottabletotaloptions-rowsubtotaloptions)
     */
    public fun rowSubtotalOptions(): Any? = unwrap(this).getRowSubtotalOptions()

    /**
     * The row total options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html#cfn-quicksight-analysis-pivottabletotaloptions-rowtotaloptions)
     */
    public fun rowTotalOptions(): Any? = unwrap(this).getRowTotalOptions()

    /**
     * A builder for [PivotTableTotalOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param columnSubtotalOptions The column subtotal options.
       */
      public fun columnSubtotalOptions(columnSubtotalOptions: IResolvable)

      /**
       * @param columnSubtotalOptions The column subtotal options.
       */
      public fun columnSubtotalOptions(columnSubtotalOptions: SubtotalOptionsProperty)

      /**
       * @param columnSubtotalOptions The column subtotal options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("53df807dcea450b417b3f040269f996b1ad278530c3ceae0f3bfd82d500f48c2")
      public
          fun columnSubtotalOptions(columnSubtotalOptions: SubtotalOptionsProperty.Builder.() -> Unit)

      /**
       * @param columnTotalOptions The column total options.
       */
      public fun columnTotalOptions(columnTotalOptions: IResolvable)

      /**
       * @param columnTotalOptions The column total options.
       */
      public fun columnTotalOptions(columnTotalOptions: PivotTotalOptionsProperty)

      /**
       * @param columnTotalOptions The column total options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ff741edb883b8bd0bed483613523a3bf8af36dff574228d99c038b182f5f07ac")
      public
          fun columnTotalOptions(columnTotalOptions: PivotTotalOptionsProperty.Builder.() -> Unit)

      /**
       * @param rowSubtotalOptions The row subtotal options.
       */
      public fun rowSubtotalOptions(rowSubtotalOptions: IResolvable)

      /**
       * @param rowSubtotalOptions The row subtotal options.
       */
      public fun rowSubtotalOptions(rowSubtotalOptions: SubtotalOptionsProperty)

      /**
       * @param rowSubtotalOptions The row subtotal options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8a9d76cc882a63699c731ebbcc54e687e8c2af4d7015758b536fcf150e614f45")
      public fun rowSubtotalOptions(rowSubtotalOptions: SubtotalOptionsProperty.Builder.() -> Unit)

      /**
       * @param rowTotalOptions The row total options.
       */
      public fun rowTotalOptions(rowTotalOptions: IResolvable)

      /**
       * @param rowTotalOptions The row total options.
       */
      public fun rowTotalOptions(rowTotalOptions: PivotTotalOptionsProperty)

      /**
       * @param rowTotalOptions The row total options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("64310ee1723d4d0a6c5f249acb1c9d5555ede157e657f0b173a68248e25d36ba")
      public fun rowTotalOptions(rowTotalOptions: PivotTotalOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableTotalOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableTotalOptionsProperty.builder()

      /**
       * @param columnSubtotalOptions The column subtotal options.
       */
      override fun columnSubtotalOptions(columnSubtotalOptions: IResolvable) {
        cdkBuilder.columnSubtotalOptions(columnSubtotalOptions.let(IResolvable::unwrap))
      }

      /**
       * @param columnSubtotalOptions The column subtotal options.
       */
      override fun columnSubtotalOptions(columnSubtotalOptions: SubtotalOptionsProperty) {
        cdkBuilder.columnSubtotalOptions(columnSubtotalOptions.let(SubtotalOptionsProperty::unwrap))
      }

      /**
       * @param columnSubtotalOptions The column subtotal options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("53df807dcea450b417b3f040269f996b1ad278530c3ceae0f3bfd82d500f48c2")
      override
          fun columnSubtotalOptions(columnSubtotalOptions: SubtotalOptionsProperty.Builder.() -> Unit):
          Unit = columnSubtotalOptions(SubtotalOptionsProperty(columnSubtotalOptions))

      /**
       * @param columnTotalOptions The column total options.
       */
      override fun columnTotalOptions(columnTotalOptions: IResolvable) {
        cdkBuilder.columnTotalOptions(columnTotalOptions.let(IResolvable::unwrap))
      }

      /**
       * @param columnTotalOptions The column total options.
       */
      override fun columnTotalOptions(columnTotalOptions: PivotTotalOptionsProperty) {
        cdkBuilder.columnTotalOptions(columnTotalOptions.let(PivotTotalOptionsProperty::unwrap))
      }

      /**
       * @param columnTotalOptions The column total options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ff741edb883b8bd0bed483613523a3bf8af36dff574228d99c038b182f5f07ac")
      override
          fun columnTotalOptions(columnTotalOptions: PivotTotalOptionsProperty.Builder.() -> Unit):
          Unit = columnTotalOptions(PivotTotalOptionsProperty(columnTotalOptions))

      /**
       * @param rowSubtotalOptions The row subtotal options.
       */
      override fun rowSubtotalOptions(rowSubtotalOptions: IResolvable) {
        cdkBuilder.rowSubtotalOptions(rowSubtotalOptions.let(IResolvable::unwrap))
      }

      /**
       * @param rowSubtotalOptions The row subtotal options.
       */
      override fun rowSubtotalOptions(rowSubtotalOptions: SubtotalOptionsProperty) {
        cdkBuilder.rowSubtotalOptions(rowSubtotalOptions.let(SubtotalOptionsProperty::unwrap))
      }

      /**
       * @param rowSubtotalOptions The row subtotal options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8a9d76cc882a63699c731ebbcc54e687e8c2af4d7015758b536fcf150e614f45")
      override
          fun rowSubtotalOptions(rowSubtotalOptions: SubtotalOptionsProperty.Builder.() -> Unit):
          Unit = rowSubtotalOptions(SubtotalOptionsProperty(rowSubtotalOptions))

      /**
       * @param rowTotalOptions The row total options.
       */
      override fun rowTotalOptions(rowTotalOptions: IResolvable) {
        cdkBuilder.rowTotalOptions(rowTotalOptions.let(IResolvable::unwrap))
      }

      /**
       * @param rowTotalOptions The row total options.
       */
      override fun rowTotalOptions(rowTotalOptions: PivotTotalOptionsProperty) {
        cdkBuilder.rowTotalOptions(rowTotalOptions.let(PivotTotalOptionsProperty::unwrap))
      }

      /**
       * @param rowTotalOptions The row total options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("64310ee1723d4d0a6c5f249acb1c9d5555ede157e657f0b173a68248e25d36ba")
      override fun rowTotalOptions(rowTotalOptions: PivotTotalOptionsProperty.Builder.() -> Unit):
          Unit = rowTotalOptions(PivotTotalOptionsProperty(rowTotalOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableTotalOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableTotalOptionsProperty,
    ) : PivotTableTotalOptionsProperty {
      /**
       * The column subtotal options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html#cfn-quicksight-analysis-pivottabletotaloptions-columnsubtotaloptions)
       */
      override fun columnSubtotalOptions(): Any? = unwrap(this).getColumnSubtotalOptions()

      /**
       * The column total options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html#cfn-quicksight-analysis-pivottabletotaloptions-columntotaloptions)
       */
      override fun columnTotalOptions(): Any? = unwrap(this).getColumnTotalOptions()

      /**
       * The row subtotal options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html#cfn-quicksight-analysis-pivottabletotaloptions-rowsubtotaloptions)
       */
      override fun rowSubtotalOptions(): Any? = unwrap(this).getRowSubtotalOptions()

      /**
       * The row total options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html#cfn-quicksight-analysis-pivottabletotaloptions-rowtotaloptions)
       */
      override fun rowTotalOptions(): Any? = unwrap(this).getRowTotalOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableTotalOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableTotalOptionsProperty):
          PivotTableTotalOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableTotalOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableTotalOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ConditionalFormattingGradientColorProperty {
    /**
     * Determines the color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattinggradientcolor.html#cfn-quicksight-analysis-conditionalformattinggradientcolor-color)
     */
    public fun color(): Any

    /**
     * The expression that determines the formatting configuration for gradient color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattinggradientcolor.html#cfn-quicksight-analysis-conditionalformattinggradientcolor-expression)
     */
    public fun expression(): String

    /**
     * A builder for [ConditionalFormattingGradientColorProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color Determines the color. 
       */
      public fun color(color: IResolvable)

      /**
       * @param color Determines the color. 
       */
      public fun color(color: GradientColorProperty)

      /**
       * @param color Determines the color. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("68a3b27da762ce9f6cbc40002037a871deffa0d6ae79c6be75ceab1c09acc30c")
      public fun color(color: GradientColorProperty.Builder.() -> Unit)

      /**
       * @param expression The expression that determines the formatting configuration for gradient
       * color. 
       */
      public fun expression(expression: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingGradientColorProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingGradientColorProperty.builder()

      /**
       * @param color Determines the color. 
       */
      override fun color(color: IResolvable) {
        cdkBuilder.color(color.let(IResolvable::unwrap))
      }

      /**
       * @param color Determines the color. 
       */
      override fun color(color: GradientColorProperty) {
        cdkBuilder.color(color.let(GradientColorProperty::unwrap))
      }

      /**
       * @param color Determines the color. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("68a3b27da762ce9f6cbc40002037a871deffa0d6ae79c6be75ceab1c09acc30c")
      override fun color(color: GradientColorProperty.Builder.() -> Unit): Unit =
          color(GradientColorProperty(color))

      /**
       * @param expression The expression that determines the formatting configuration for gradient
       * color. 
       */
      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingGradientColorProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingGradientColorProperty,
    ) : ConditionalFormattingGradientColorProperty {
      /**
       * Determines the color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattinggradientcolor.html#cfn-quicksight-analysis-conditionalformattinggradientcolor-color)
       */
      override fun color(): Any = unwrap(this).getColor()

      /**
       * The expression that determines the formatting configuration for gradient color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattinggradientcolor.html#cfn-quicksight-analysis-conditionalformattinggradientcolor-expression)
       */
      override fun expression(): String = unwrap(this).getExpression()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingGradientColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingGradientColorProperty):
          ConditionalFormattingGradientColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingGradientColorProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingGradientColorProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilterGroupProperty {
    /**
     * The filter new feature which can apply filter group to all data sets. Choose one of the
     * following options:.
     *
     * * `ALL_DATASETS`
     * * `SINGLE_DATASET`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-crossdataset)
     */
    public fun crossDataset(): String

    /**
     * The value that uniquely identifies a `FilterGroup` within a dashboard, template, or analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-filtergroupid)
     */
    public fun filterGroupId(): String

    /**
     * The list of filters that are present in a `FilterGroup` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-filters)
     */
    public fun filters(): Any

    /**
     * The configuration that specifies what scope to apply to a `FilterGroup` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-scopeconfiguration)
     */
    public fun scopeConfiguration(): Any

    /**
     * The status of the `FilterGroup` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-status)
     */
    public fun status(): String? = unwrap(this).getStatus()

    /**
     * A builder for [FilterGroupProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param crossDataset The filter new feature which can apply filter group to all data sets.
       * Choose one of the following options:. 
       * * `ALL_DATASETS`
       * * `SINGLE_DATASET`
       */
      public fun crossDataset(crossDataset: String)

      /**
       * @param filterGroupId The value that uniquely identifies a `FilterGroup` within a dashboard,
       * template, or analysis. 
       */
      public fun filterGroupId(filterGroupId: String)

      /**
       * @param filters The list of filters that are present in a `FilterGroup` . 
       */
      public fun filters(filters: IResolvable)

      /**
       * @param filters The list of filters that are present in a `FilterGroup` . 
       */
      public fun filters(filters: List<Any>)

      /**
       * @param filters The list of filters that are present in a `FilterGroup` . 
       */
      public fun filters(vararg filters: Any)

      /**
       * @param scopeConfiguration The configuration that specifies what scope to apply to a
       * `FilterGroup` . 
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       */
      public fun scopeConfiguration(scopeConfiguration: IResolvable)

      /**
       * @param scopeConfiguration The configuration that specifies what scope to apply to a
       * `FilterGroup` . 
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       */
      public fun scopeConfiguration(scopeConfiguration: FilterScopeConfigurationProperty)

      /**
       * @param scopeConfiguration The configuration that specifies what scope to apply to a
       * `FilterGroup` . 
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("49bb19244fc7c45ba914be0fe3798cf7ac905361977de99df5e427dccf81f580")
      public
          fun scopeConfiguration(scopeConfiguration: FilterScopeConfigurationProperty.Builder.() -> Unit)

      /**
       * @param status The status of the `FilterGroup` .
       */
      public fun status(status: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterGroupProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterGroupProperty.builder()

      /**
       * @param crossDataset The filter new feature which can apply filter group to all data sets.
       * Choose one of the following options:. 
       * * `ALL_DATASETS`
       * * `SINGLE_DATASET`
       */
      override fun crossDataset(crossDataset: String) {
        cdkBuilder.crossDataset(crossDataset)
      }

      /**
       * @param filterGroupId The value that uniquely identifies a `FilterGroup` within a dashboard,
       * template, or analysis. 
       */
      override fun filterGroupId(filterGroupId: String) {
        cdkBuilder.filterGroupId(filterGroupId)
      }

      /**
       * @param filters The list of filters that are present in a `FilterGroup` . 
       */
      override fun filters(filters: IResolvable) {
        cdkBuilder.filters(filters.let(IResolvable::unwrap))
      }

      /**
       * @param filters The list of filters that are present in a `FilterGroup` . 
       */
      override fun filters(filters: List<Any>) {
        cdkBuilder.filters(filters)
      }

      /**
       * @param filters The list of filters that are present in a `FilterGroup` . 
       */
      override fun filters(vararg filters: Any): Unit = filters(filters.toList())

      /**
       * @param scopeConfiguration The configuration that specifies what scope to apply to a
       * `FilterGroup` . 
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       */
      override fun scopeConfiguration(scopeConfiguration: IResolvable) {
        cdkBuilder.scopeConfiguration(scopeConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param scopeConfiguration The configuration that specifies what scope to apply to a
       * `FilterGroup` . 
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       */
      override fun scopeConfiguration(scopeConfiguration: FilterScopeConfigurationProperty) {
        cdkBuilder.scopeConfiguration(scopeConfiguration.let(FilterScopeConfigurationProperty::unwrap))
      }

      /**
       * @param scopeConfiguration The configuration that specifies what scope to apply to a
       * `FilterGroup` . 
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("49bb19244fc7c45ba914be0fe3798cf7ac905361977de99df5e427dccf81f580")
      override
          fun scopeConfiguration(scopeConfiguration: FilterScopeConfigurationProperty.Builder.() -> Unit):
          Unit = scopeConfiguration(FilterScopeConfigurationProperty(scopeConfiguration))

      /**
       * @param status The status of the `FilterGroup` .
       */
      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterGroupProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterGroupProperty,
    ) : FilterGroupProperty {
      /**
       * The filter new feature which can apply filter group to all data sets. Choose one of the
       * following options:.
       *
       * * `ALL_DATASETS`
       * * `SINGLE_DATASET`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-crossdataset)
       */
      override fun crossDataset(): String = unwrap(this).getCrossDataset()

      /**
       * The value that uniquely identifies a `FilterGroup` within a dashboard, template, or
       * analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-filtergroupid)
       */
      override fun filterGroupId(): String = unwrap(this).getFilterGroupId()

      /**
       * The list of filters that are present in a `FilterGroup` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-filters)
       */
      override fun filters(): Any = unwrap(this).getFilters()

      /**
       * The configuration that specifies what scope to apply to a `FilterGroup` .
       *
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-scopeconfiguration)
       */
      override fun scopeConfiguration(): Any = unwrap(this).getScopeConfiguration()

      /**
       * The status of the `FilterGroup` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-status)
       */
      override fun status(): String? = unwrap(this).getStatus()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilterGroupProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterGroupProperty):
          FilterGroupProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterGroupProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterGroupProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface TotalAggregationComputationProperty {
    /**
     * The ID for a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationcomputation.html#cfn-quicksight-analysis-totalaggregationcomputation-computationid)
     */
    public fun computationId(): String

    /**
     * The name of a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationcomputation.html#cfn-quicksight-analysis-totalaggregationcomputation-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * The value field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationcomputation.html#cfn-quicksight-analysis-totalaggregationcomputation-value)
     */
    public fun `value`(): Any? = unwrap(this).getValue()

    /**
     * A builder for [TotalAggregationComputationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param computationId The ID for a computation. 
       */
      public fun computationId(computationId: String)

      /**
       * @param name The name of a computation.
       */
      public fun name(name: String)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: IResolvable)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: MeasureFieldProperty)

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7cf52da237e5de6097a6dc07b7d90cd7a3a48152f0aa6fddb5b2bd4ed54f68ed")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationComputationProperty.builder()

      /**
       * @param computationId The ID for a computation. 
       */
      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      /**
       * @param name The name of a computation.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7cf52da237e5de6097a6dc07b7d90cd7a3a48152f0aa6fddb5b2bd4ed54f68ed")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationComputationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationComputationProperty,
    ) : TotalAggregationComputationProperty {
      /**
       * The ID for a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationcomputation.html#cfn-quicksight-analysis-totalaggregationcomputation-computationid)
       */
      override fun computationId(): String = unwrap(this).getComputationId()

      /**
       * The name of a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationcomputation.html#cfn-quicksight-analysis-totalaggregationcomputation-name)
       */
      override fun name(): String? = unwrap(this).getName()

      /**
       * The value field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationcomputation.html#cfn-quicksight-analysis-totalaggregationcomputation-value)
       */
      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TotalAggregationComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationComputationProperty):
          TotalAggregationComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TotalAggregationComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TotalAggregationComputationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface KPIPrimaryValueConditionalFormattingProperty {
    /**
     * The conditional formatting of the primary value's icon.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprimaryvalueconditionalformatting.html#cfn-quicksight-analysis-kpiprimaryvalueconditionalformatting-icon)
     */
    public fun icon(): Any? = unwrap(this).getIcon()

    /**
     * The conditional formatting of the primary value's text color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprimaryvalueconditionalformatting.html#cfn-quicksight-analysis-kpiprimaryvalueconditionalformatting-textcolor)
     */
    public fun textColor(): Any? = unwrap(this).getTextColor()

    /**
     * A builder for [KPIPrimaryValueConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param icon The conditional formatting of the primary value's icon.
       */
      public fun icon(icon: IResolvable)

      /**
       * @param icon The conditional formatting of the primary value's icon.
       */
      public fun icon(icon: ConditionalFormattingIconProperty)

      /**
       * @param icon The conditional formatting of the primary value's icon.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("70d54a81351efe36be0d5dfec8c9908585b37dbb4aef90f9eb9cc0bc8d6abde8")
      public fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit)

      /**
       * @param textColor The conditional formatting of the primary value's text color.
       */
      public fun textColor(textColor: IResolvable)

      /**
       * @param textColor The conditional formatting of the primary value's text color.
       */
      public fun textColor(textColor: ConditionalFormattingColorProperty)

      /**
       * @param textColor The conditional formatting of the primary value's text color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47b05b12a6c293aa377ef027f95ce63d15632414570e97ea6415ca959d681082")
      public fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIPrimaryValueConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIPrimaryValueConditionalFormattingProperty.builder()

      /**
       * @param icon The conditional formatting of the primary value's icon.
       */
      override fun icon(icon: IResolvable) {
        cdkBuilder.icon(icon.let(IResolvable::unwrap))
      }

      /**
       * @param icon The conditional formatting of the primary value's icon.
       */
      override fun icon(icon: ConditionalFormattingIconProperty) {
        cdkBuilder.icon(icon.let(ConditionalFormattingIconProperty::unwrap))
      }

      /**
       * @param icon The conditional formatting of the primary value's icon.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("70d54a81351efe36be0d5dfec8c9908585b37dbb4aef90f9eb9cc0bc8d6abde8")
      override fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit): Unit =
          icon(ConditionalFormattingIconProperty(icon))

      /**
       * @param textColor The conditional formatting of the primary value's text color.
       */
      override fun textColor(textColor: IResolvable) {
        cdkBuilder.textColor(textColor.let(IResolvable::unwrap))
      }

      /**
       * @param textColor The conditional formatting of the primary value's text color.
       */
      override fun textColor(textColor: ConditionalFormattingColorProperty) {
        cdkBuilder.textColor(textColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      /**
       * @param textColor The conditional formatting of the primary value's text color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47b05b12a6c293aa377ef027f95ce63d15632414570e97ea6415ca959d681082")
      override fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit): Unit
          = textColor(ConditionalFormattingColorProperty(textColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIPrimaryValueConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIPrimaryValueConditionalFormattingProperty,
    ) : KPIPrimaryValueConditionalFormattingProperty {
      /**
       * The conditional formatting of the primary value's icon.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprimaryvalueconditionalformatting.html#cfn-quicksight-analysis-kpiprimaryvalueconditionalformatting-icon)
       */
      override fun icon(): Any? = unwrap(this).getIcon()

      /**
       * The conditional formatting of the primary value's text color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprimaryvalueconditionalformatting.html#cfn-quicksight-analysis-kpiprimaryvalueconditionalformatting-textcolor)
       */
      override fun textColor(): Any? = unwrap(this).getTextColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          KPIPrimaryValueConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIPrimaryValueConditionalFormattingProperty):
          KPIPrimaryValueConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIPrimaryValueConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIPrimaryValueConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface MissingDataConfigurationProperty {
    /**
     * The treatment option that determines how missing data should be rendered. Choose from the
     * following options:.
     *
     * * `INTERPOLATE` : Interpolate missing values between the prior and the next known value.
     * * `SHOW_AS_ZERO` : Show missing values as the value `0` .
     * * `SHOW_AS_BLANK` : Display a blank space when rendering missing data.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-missingdataconfiguration.html#cfn-quicksight-analysis-missingdataconfiguration-treatmentoption)
     */
    public fun treatmentOption(): String? = unwrap(this).getTreatmentOption()

    /**
     * A builder for [MissingDataConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param treatmentOption The treatment option that determines how missing data should be
       * rendered. Choose from the following options:.
       * * `INTERPOLATE` : Interpolate missing values between the prior and the next known value.
       * * `SHOW_AS_ZERO` : Show missing values as the value `0` .
       * * `SHOW_AS_BLANK` : Display a blank space when rendering missing data.
       */
      public fun treatmentOption(treatmentOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MissingDataConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MissingDataConfigurationProperty.builder()

      /**
       * @param treatmentOption The treatment option that determines how missing data should be
       * rendered. Choose from the following options:.
       * * `INTERPOLATE` : Interpolate missing values between the prior and the next known value.
       * * `SHOW_AS_ZERO` : Show missing values as the value `0` .
       * * `SHOW_AS_BLANK` : Display a blank space when rendering missing data.
       */
      override fun treatmentOption(treatmentOption: String) {
        cdkBuilder.treatmentOption(treatmentOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MissingDataConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MissingDataConfigurationProperty,
    ) : MissingDataConfigurationProperty {
      /**
       * The treatment option that determines how missing data should be rendered. Choose from the
       * following options:.
       *
       * * `INTERPOLATE` : Interpolate missing values between the prior and the next known value.
       * * `SHOW_AS_ZERO` : Show missing values as the value `0` .
       * * `SHOW_AS_BLANK` : Display a blank space when rendering missing data.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-missingdataconfiguration.html#cfn-quicksight-analysis-missingdataconfiguration-treatmentoption)
       */
      override fun treatmentOption(): String? = unwrap(this).getTreatmentOption()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): MissingDataConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.MissingDataConfigurationProperty):
          MissingDataConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MissingDataConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MissingDataConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableConditionalFormattingProperty {
    /**
     * Conditional formatting options for a `PivotTableVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformatting.html#cfn-quicksight-analysis-pivottableconditionalformatting-conditionalformattingoptions)
     */
    public fun conditionalFormattingOptions(): Any? = unwrap(this).getConditionalFormattingOptions()

    /**
     * A builder for [PivotTableConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param conditionalFormattingOptions Conditional formatting options for a `PivotTableVisual`
       * .
       */
      public fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable)

      /**
       * @param conditionalFormattingOptions Conditional formatting options for a `PivotTableVisual`
       * .
       */
      public fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>)

      /**
       * @param conditionalFormattingOptions Conditional formatting options for a `PivotTableVisual`
       * .
       */
      public fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingProperty.builder()

      /**
       * @param conditionalFormattingOptions Conditional formatting options for a `PivotTableVisual`
       * .
       */
      override fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions.let(IResolvable::unwrap))
      }

      /**
       * @param conditionalFormattingOptions Conditional formatting options for a `PivotTableVisual`
       * .
       */
      override fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions)
      }

      /**
       * @param conditionalFormattingOptions Conditional formatting options for a `PivotTableVisual`
       * .
       */
      override fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any): Unit =
          conditionalFormattingOptions(conditionalFormattingOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingProperty,
    ) : PivotTableConditionalFormattingProperty {
      /**
       * Conditional formatting options for a `PivotTableVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformatting.html#cfn-quicksight-analysis-pivottableconditionalformatting-conditionalformattingoptions)
       */
      override fun conditionalFormattingOptions(): Any? =
          unwrap(this).getConditionalFormattingOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingProperty):
          PivotTableConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilterTextAreaControlProperty {
    /**
     * The delimiter that is used to separate the lines in text.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-delimiter)
     */
    public fun delimiter(): String? = unwrap(this).getDelimiter()

    /**
     * The display options of a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The ID of the `FilterTextAreaControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-filtercontrolid)
     */
    public fun filterControlId(): String

    /**
     * The source filter ID of the `FilterTextAreaControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-sourcefilterid)
     */
    public fun sourceFilterId(): String

    /**
     * The title of the `FilterTextAreaControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-title)
     */
    public fun title(): String

    /**
     * A builder for [FilterTextAreaControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param delimiter The delimiter that is used to separate the lines in text.
       */
      public fun delimiter(delimiter: String)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1535ce1f57e1c562097d8e9955b1f7219ac9260f409933f21bc64ce0234e8576")
      public
          fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param filterControlId The ID of the `FilterTextAreaControl` . 
       */
      public fun filterControlId(filterControlId: String)

      /**
       * @param sourceFilterId The source filter ID of the `FilterTextAreaControl` . 
       */
      public fun sourceFilterId(sourceFilterId: String)

      /**
       * @param title The title of the `FilterTextAreaControl` . 
       */
      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterTextAreaControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterTextAreaControlProperty.builder()

      /**
       * @param delimiter The delimiter that is used to separate the lines in text.
       */
      override fun delimiter(delimiter: String) {
        cdkBuilder.delimiter(delimiter)
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(TextAreaControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1535ce1f57e1c562097d8e9955b1f7219ac9260f409933f21bc64ce0234e8576")
      override
          fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(TextAreaControlDisplayOptionsProperty(displayOptions))

      /**
       * @param filterControlId The ID of the `FilterTextAreaControl` . 
       */
      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      /**
       * @param sourceFilterId The source filter ID of the `FilterTextAreaControl` . 
       */
      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      /**
       * @param title The title of the `FilterTextAreaControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterTextAreaControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterTextAreaControlProperty,
    ) : FilterTextAreaControlProperty {
      /**
       * The delimiter that is used to separate the lines in text.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-delimiter)
       */
      override fun delimiter(): String? = unwrap(this).getDelimiter()

      /**
       * The display options of a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The ID of the `FilterTextAreaControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-filtercontrolid)
       */
      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      /**
       * The source filter ID of the `FilterTextAreaControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-sourcefilterid)
       */
      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      /**
       * The title of the `FilterTextAreaControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilterTextAreaControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterTextAreaControlProperty):
          FilterTextAreaControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterTextAreaControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterTextAreaControlProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface LineChartMarkerStyleSettingsProperty {
    /**
     * Color of marker in the series.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html#cfn-quicksight-analysis-linechartmarkerstylesettings-markercolor)
     */
    public fun markerColor(): String? = unwrap(this).getMarkerColor()

    /**
     * Shape option for markers in the series.
     *
     * * `CIRCLE` : Show marker as a circle.
     * * `TRIANGLE` : Show marker as a triangle.
     * * `SQUARE` : Show marker as a square.
     * * `DIAMOND` : Show marker as a diamond.
     * * `ROUNDED_SQUARE` : Show marker as a rounded square.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html#cfn-quicksight-analysis-linechartmarkerstylesettings-markershape)
     */
    public fun markerShape(): String? = unwrap(this).getMarkerShape()

    /**
     * Size of marker in the series.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html#cfn-quicksight-analysis-linechartmarkerstylesettings-markersize)
     */
    public fun markerSize(): String? = unwrap(this).getMarkerSize()

    /**
     * Configuration option that determines whether to show the markers in the series.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html#cfn-quicksight-analysis-linechartmarkerstylesettings-markervisibility)
     */
    public fun markerVisibility(): String? = unwrap(this).getMarkerVisibility()

    /**
     * A builder for [LineChartMarkerStyleSettingsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param markerColor Color of marker in the series.
       */
      public fun markerColor(markerColor: String)

      /**
       * @param markerShape Shape option for markers in the series.
       * * `CIRCLE` : Show marker as a circle.
       * * `TRIANGLE` : Show marker as a triangle.
       * * `SQUARE` : Show marker as a square.
       * * `DIAMOND` : Show marker as a diamond.
       * * `ROUNDED_SQUARE` : Show marker as a rounded square.
       */
      public fun markerShape(markerShape: String)

      /**
       * @param markerSize Size of marker in the series.
       */
      public fun markerSize(markerSize: String)

      /**
       * @param markerVisibility Configuration option that determines whether to show the markers in
       * the series.
       */
      public fun markerVisibility(markerVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartMarkerStyleSettingsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartMarkerStyleSettingsProperty.builder()

      /**
       * @param markerColor Color of marker in the series.
       */
      override fun markerColor(markerColor: String) {
        cdkBuilder.markerColor(markerColor)
      }

      /**
       * @param markerShape Shape option for markers in the series.
       * * `CIRCLE` : Show marker as a circle.
       * * `TRIANGLE` : Show marker as a triangle.
       * * `SQUARE` : Show marker as a square.
       * * `DIAMOND` : Show marker as a diamond.
       * * `ROUNDED_SQUARE` : Show marker as a rounded square.
       */
      override fun markerShape(markerShape: String) {
        cdkBuilder.markerShape(markerShape)
      }

      /**
       * @param markerSize Size of marker in the series.
       */
      override fun markerSize(markerSize: String) {
        cdkBuilder.markerSize(markerSize)
      }

      /**
       * @param markerVisibility Configuration option that determines whether to show the markers in
       * the series.
       */
      override fun markerVisibility(markerVisibility: String) {
        cdkBuilder.markerVisibility(markerVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartMarkerStyleSettingsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartMarkerStyleSettingsProperty,
    ) : LineChartMarkerStyleSettingsProperty {
      /**
       * Color of marker in the series.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html#cfn-quicksight-analysis-linechartmarkerstylesettings-markercolor)
       */
      override fun markerColor(): String? = unwrap(this).getMarkerColor()

      /**
       * Shape option for markers in the series.
       *
       * * `CIRCLE` : Show marker as a circle.
       * * `TRIANGLE` : Show marker as a triangle.
       * * `SQUARE` : Show marker as a square.
       * * `DIAMOND` : Show marker as a diamond.
       * * `ROUNDED_SQUARE` : Show marker as a rounded square.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html#cfn-quicksight-analysis-linechartmarkerstylesettings-markershape)
       */
      override fun markerShape(): String? = unwrap(this).getMarkerShape()

      /**
       * Size of marker in the series.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html#cfn-quicksight-analysis-linechartmarkerstylesettings-markersize)
       */
      override fun markerSize(): String? = unwrap(this).getMarkerSize()

      /**
       * Configuration option that determines whether to show the markers in the series.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html#cfn-quicksight-analysis-linechartmarkerstylesettings-markervisibility)
       */
      override fun markerVisibility(): String? = unwrap(this).getMarkerVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          LineChartMarkerStyleSettingsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartMarkerStyleSettingsProperty):
          LineChartMarkerStyleSettingsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartMarkerStyleSettingsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartMarkerStyleSettingsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ValidationStrategyProperty {
    /**
     * The mode of validation for the asset to be created or updated.
     *
     * When you set this value to `STRICT` , strict validation for every error is enforced. When you
     * set this value to `LENIENT` , validation is skipped for specific UI errors.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-validationstrategy.html#cfn-quicksight-analysis-validationstrategy-mode)
     */
    public fun mode(): String

    /**
     * A builder for [ValidationStrategyProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param mode The mode of validation for the asset to be created or updated. 
       * When you set this value to `STRICT` , strict validation for every error is enforced. When
       * you set this value to `LENIENT` , validation is skipped for specific UI errors.
       */
      public fun mode(mode: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ValidationStrategyProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ValidationStrategyProperty.builder()

      /**
       * @param mode The mode of validation for the asset to be created or updated. 
       * When you set this value to `STRICT` , strict validation for every error is enforced. When
       * you set this value to `LENIENT` , validation is skipped for specific UI errors.
       */
      override fun mode(mode: String) {
        cdkBuilder.mode(mode)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ValidationStrategyProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ValidationStrategyProperty,
    ) : ValidationStrategyProperty {
      /**
       * The mode of validation for the asset to be created or updated.
       *
       * When you set this value to `STRICT` , strict validation for every error is enforced. When
       * you set this value to `LENIENT` , validation is skipped for specific UI errors.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-validationstrategy.html#cfn-quicksight-analysis-validationstrategy-mode)
       */
      override fun mode(): String = unwrap(this).getMode()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ValidationStrategyProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ValidationStrategyProperty):
          ValidationStrategyProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ValidationStrategyProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ValidationStrategyProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GeospatialMapAggregatedFieldWellsProperty {
    /**
     * The color field wells of a geospatial map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapaggregatedfieldwells.html#cfn-quicksight-analysis-geospatialmapaggregatedfieldwells-colors)
     */
    public fun colors(): Any? = unwrap(this).getColors()

    /**
     * The geospatial field wells of a geospatial map.
     *
     * Values are grouped by geospatial fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapaggregatedfieldwells.html#cfn-quicksight-analysis-geospatialmapaggregatedfieldwells-geospatial)
     */
    public fun geospatial(): Any? = unwrap(this).getGeospatial()

    /**
     * The size field wells of a geospatial map.
     *
     * Values are aggregated based on geospatial fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapaggregatedfieldwells.html#cfn-quicksight-analysis-geospatialmapaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [GeospatialMapAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param colors The color field wells of a geospatial map.
       */
      public fun colors(colors: IResolvable)

      /**
       * @param colors The color field wells of a geospatial map.
       */
      public fun colors(colors: List<Any>)

      /**
       * @param colors The color field wells of a geospatial map.
       */
      public fun colors(vararg colors: Any)

      /**
       * @param geospatial The geospatial field wells of a geospatial map.
       * Values are grouped by geospatial fields.
       */
      public fun geospatial(geospatial: IResolvable)

      /**
       * @param geospatial The geospatial field wells of a geospatial map.
       * Values are grouped by geospatial fields.
       */
      public fun geospatial(geospatial: List<Any>)

      /**
       * @param geospatial The geospatial field wells of a geospatial map.
       * Values are grouped by geospatial fields.
       */
      public fun geospatial(vararg geospatial: Any)

      /**
       * @param values The size field wells of a geospatial map.
       * Values are aggregated based on geospatial fields.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The size field wells of a geospatial map.
       * Values are aggregated based on geospatial fields.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The size field wells of a geospatial map.
       * Values are aggregated based on geospatial fields.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapAggregatedFieldWellsProperty.builder()

      /**
       * @param colors The color field wells of a geospatial map.
       */
      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      /**
       * @param colors The color field wells of a geospatial map.
       */
      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      /**
       * @param colors The color field wells of a geospatial map.
       */
      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      /**
       * @param geospatial The geospatial field wells of a geospatial map.
       * Values are grouped by geospatial fields.
       */
      override fun geospatial(geospatial: IResolvable) {
        cdkBuilder.geospatial(geospatial.let(IResolvable::unwrap))
      }

      /**
       * @param geospatial The geospatial field wells of a geospatial map.
       * Values are grouped by geospatial fields.
       */
      override fun geospatial(geospatial: List<Any>) {
        cdkBuilder.geospatial(geospatial)
      }

      /**
       * @param geospatial The geospatial field wells of a geospatial map.
       * Values are grouped by geospatial fields.
       */
      override fun geospatial(vararg geospatial: Any): Unit = geospatial(geospatial.toList())

      /**
       * @param values The size field wells of a geospatial map.
       * Values are aggregated based on geospatial fields.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The size field wells of a geospatial map.
       * Values are aggregated based on geospatial fields.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The size field wells of a geospatial map.
       * Values are aggregated based on geospatial fields.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapAggregatedFieldWellsProperty,
    ) : GeospatialMapAggregatedFieldWellsProperty {
      /**
       * The color field wells of a geospatial map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapaggregatedfieldwells.html#cfn-quicksight-analysis-geospatialmapaggregatedfieldwells-colors)
       */
      override fun colors(): Any? = unwrap(this).getColors()

      /**
       * The geospatial field wells of a geospatial map.
       *
       * Values are grouped by geospatial fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapaggregatedfieldwells.html#cfn-quicksight-analysis-geospatialmapaggregatedfieldwells-geospatial)
       */
      override fun geospatial(): Any? = unwrap(this).getGeospatial()

      /**
       * The size field wells of a geospatial map.
       *
       * Values are aggregated based on geospatial fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapaggregatedfieldwells.html#cfn-quicksight-analysis-geospatialmapaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialMapAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapAggregatedFieldWellsProperty):
          GeospatialMapAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialMapAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTotalOptionsProperty {
    /**
     * The custom label string for the total cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-customlabel)
     */
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    /**
     * The cell styling options for the total of header cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-metricheadercellstyle)
     */
    public fun metricHeaderCellStyle(): Any? = unwrap(this).getMetricHeaderCellStyle()

    /**
     * The placement (start, end) for the total cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-placement)
     */
    public fun placement(): String? = unwrap(this).getPlacement()

    /**
     * The scroll status (pinned, scrolled) for the total cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-scrollstatus)
     */
    public fun scrollStatus(): String? = unwrap(this).getScrollStatus()

    /**
     * The total aggregation options for each value field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-totalaggregationoptions)
     */
    public fun totalAggregationOptions(): Any? = unwrap(this).getTotalAggregationOptions()

    /**
     * The cell styling options for the total cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-totalcellstyle)
     */
    public fun totalCellStyle(): Any? = unwrap(this).getTotalCellStyle()

    /**
     * The visibility configuration for the total cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-totalsvisibility)
     */
    public fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

    /**
     * The cell styling options for the totals of value cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-valuecellstyle)
     */
    public fun valueCellStyle(): Any? = unwrap(this).getValueCellStyle()

    /**
     * A builder for [PivotTotalOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customLabel The custom label string for the total cells.
       */
      public fun customLabel(customLabel: String)

      /**
       * @param metricHeaderCellStyle The cell styling options for the total of header cells.
       */
      public fun metricHeaderCellStyle(metricHeaderCellStyle: IResolvable)

      /**
       * @param metricHeaderCellStyle The cell styling options for the total of header cells.
       */
      public fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty)

      /**
       * @param metricHeaderCellStyle The cell styling options for the total of header cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bde3ee1bf0f48830e9ce720e5d7996dd47c01971b9492ed7b98505c2d977e3f7")
      public
          fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty.Builder.() -> Unit)

      /**
       * @param placement The placement (start, end) for the total cells.
       */
      public fun placement(placement: String)

      /**
       * @param scrollStatus The scroll status (pinned, scrolled) for the total cells.
       */
      public fun scrollStatus(scrollStatus: String)

      /**
       * @param totalAggregationOptions The total aggregation options for each value field.
       */
      public fun totalAggregationOptions(totalAggregationOptions: IResolvable)

      /**
       * @param totalAggregationOptions The total aggregation options for each value field.
       */
      public fun totalAggregationOptions(totalAggregationOptions: List<Any>)

      /**
       * @param totalAggregationOptions The total aggregation options for each value field.
       */
      public fun totalAggregationOptions(vararg totalAggregationOptions: Any)

      /**
       * @param totalCellStyle The cell styling options for the total cells.
       */
      public fun totalCellStyle(totalCellStyle: IResolvable)

      /**
       * @param totalCellStyle The cell styling options for the total cells.
       */
      public fun totalCellStyle(totalCellStyle: TableCellStyleProperty)

      /**
       * @param totalCellStyle The cell styling options for the total cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ce7d06737525ba6135108405b52c14aad9e0953d723cab252262b0d423fd858")
      public fun totalCellStyle(totalCellStyle: TableCellStyleProperty.Builder.() -> Unit)

      /**
       * @param totalsVisibility The visibility configuration for the total cells.
       */
      public fun totalsVisibility(totalsVisibility: String)

      /**
       * @param valueCellStyle The cell styling options for the totals of value cells.
       */
      public fun valueCellStyle(valueCellStyle: IResolvable)

      /**
       * @param valueCellStyle The cell styling options for the totals of value cells.
       */
      public fun valueCellStyle(valueCellStyle: TableCellStyleProperty)

      /**
       * @param valueCellStyle The cell styling options for the totals of value cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2dca78d34f71ae58b4b7a9675659fac39b21429b26e4a52c51f3d8658a001a0e")
      public fun valueCellStyle(valueCellStyle: TableCellStyleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTotalOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTotalOptionsProperty.builder()

      /**
       * @param customLabel The custom label string for the total cells.
       */
      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      /**
       * @param metricHeaderCellStyle The cell styling options for the total of header cells.
       */
      override fun metricHeaderCellStyle(metricHeaderCellStyle: IResolvable) {
        cdkBuilder.metricHeaderCellStyle(metricHeaderCellStyle.let(IResolvable::unwrap))
      }

      /**
       * @param metricHeaderCellStyle The cell styling options for the total of header cells.
       */
      override fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty) {
        cdkBuilder.metricHeaderCellStyle(metricHeaderCellStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param metricHeaderCellStyle The cell styling options for the total of header cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bde3ee1bf0f48830e9ce720e5d7996dd47c01971b9492ed7b98505c2d977e3f7")
      override
          fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty.Builder.() -> Unit):
          Unit = metricHeaderCellStyle(TableCellStyleProperty(metricHeaderCellStyle))

      /**
       * @param placement The placement (start, end) for the total cells.
       */
      override fun placement(placement: String) {
        cdkBuilder.placement(placement)
      }

      /**
       * @param scrollStatus The scroll status (pinned, scrolled) for the total cells.
       */
      override fun scrollStatus(scrollStatus: String) {
        cdkBuilder.scrollStatus(scrollStatus)
      }

      /**
       * @param totalAggregationOptions The total aggregation options for each value field.
       */
      override fun totalAggregationOptions(totalAggregationOptions: IResolvable) {
        cdkBuilder.totalAggregationOptions(totalAggregationOptions.let(IResolvable::unwrap))
      }

      /**
       * @param totalAggregationOptions The total aggregation options for each value field.
       */
      override fun totalAggregationOptions(totalAggregationOptions: List<Any>) {
        cdkBuilder.totalAggregationOptions(totalAggregationOptions)
      }

      /**
       * @param totalAggregationOptions The total aggregation options for each value field.
       */
      override fun totalAggregationOptions(vararg totalAggregationOptions: Any): Unit =
          totalAggregationOptions(totalAggregationOptions.toList())

      /**
       * @param totalCellStyle The cell styling options for the total cells.
       */
      override fun totalCellStyle(totalCellStyle: IResolvable) {
        cdkBuilder.totalCellStyle(totalCellStyle.let(IResolvable::unwrap))
      }

      /**
       * @param totalCellStyle The cell styling options for the total cells.
       */
      override fun totalCellStyle(totalCellStyle: TableCellStyleProperty) {
        cdkBuilder.totalCellStyle(totalCellStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param totalCellStyle The cell styling options for the total cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ce7d06737525ba6135108405b52c14aad9e0953d723cab252262b0d423fd858")
      override fun totalCellStyle(totalCellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          totalCellStyle(TableCellStyleProperty(totalCellStyle))

      /**
       * @param totalsVisibility The visibility configuration for the total cells.
       */
      override fun totalsVisibility(totalsVisibility: String) {
        cdkBuilder.totalsVisibility(totalsVisibility)
      }

      /**
       * @param valueCellStyle The cell styling options for the totals of value cells.
       */
      override fun valueCellStyle(valueCellStyle: IResolvable) {
        cdkBuilder.valueCellStyle(valueCellStyle.let(IResolvable::unwrap))
      }

      /**
       * @param valueCellStyle The cell styling options for the totals of value cells.
       */
      override fun valueCellStyle(valueCellStyle: TableCellStyleProperty) {
        cdkBuilder.valueCellStyle(valueCellStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param valueCellStyle The cell styling options for the totals of value cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2dca78d34f71ae58b4b7a9675659fac39b21429b26e4a52c51f3d8658a001a0e")
      override fun valueCellStyle(valueCellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          valueCellStyle(TableCellStyleProperty(valueCellStyle))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTotalOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTotalOptionsProperty,
    ) : PivotTotalOptionsProperty {
      /**
       * The custom label string for the total cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-customlabel)
       */
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      /**
       * The cell styling options for the total of header cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-metricheadercellstyle)
       */
      override fun metricHeaderCellStyle(): Any? = unwrap(this).getMetricHeaderCellStyle()

      /**
       * The placement (start, end) for the total cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-placement)
       */
      override fun placement(): String? = unwrap(this).getPlacement()

      /**
       * The scroll status (pinned, scrolled) for the total cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-scrollstatus)
       */
      override fun scrollStatus(): String? = unwrap(this).getScrollStatus()

      /**
       * The total aggregation options for each value field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-totalaggregationoptions)
       */
      override fun totalAggregationOptions(): Any? = unwrap(this).getTotalAggregationOptions()

      /**
       * The cell styling options for the total cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-totalcellstyle)
       */
      override fun totalCellStyle(): Any? = unwrap(this).getTotalCellStyle()

      /**
       * The visibility configuration for the total cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-totalsvisibility)
       */
      override fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

      /**
       * The cell styling options for the totals of value cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-valuecellstyle)
       */
      override fun valueCellStyle(): Any? = unwrap(this).getValueCellStyle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTotalOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTotalOptionsProperty):
          PivotTotalOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTotalOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTotalOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface VisualCustomActionOperationProperty {
    /**
     * The filter operation that filters data included in a visual or in an entire sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html#cfn-quicksight-analysis-visualcustomactionoperation-filteroperation)
     */
    public fun filterOperation(): Any? = unwrap(this).getFilterOperation()

    /**
     * The navigation operation that navigates between different sheets in the same analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html#cfn-quicksight-analysis-visualcustomactionoperation-navigationoperation)
     */
    public fun navigationOperation(): Any? = unwrap(this).getNavigationOperation()

    /**
     * The set parameter operation that sets parameters in custom action.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html#cfn-quicksight-analysis-visualcustomactionoperation-setparametersoperation)
     */
    public fun setParametersOperation(): Any? = unwrap(this).getSetParametersOperation()

    /**
     * The URL operation that opens a link to another webpage.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html#cfn-quicksight-analysis-visualcustomactionoperation-urloperation)
     */
    public fun urlOperation(): Any? = unwrap(this).getUrlOperation()

    /**
     * A builder for [VisualCustomActionOperationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param filterOperation The filter operation that filters data included in a visual or in an
       * entire sheet.
       */
      public fun filterOperation(filterOperation: IResolvable)

      /**
       * @param filterOperation The filter operation that filters data included in a visual or in an
       * entire sheet.
       */
      public fun filterOperation(filterOperation: CustomActionFilterOperationProperty)

      /**
       * @param filterOperation The filter operation that filters data included in a visual or in an
       * entire sheet.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("12ce4439f256401fea7f3452cc92724b7097680cb7ced9140f2aaf4913bc38eb")
      public
          fun filterOperation(filterOperation: CustomActionFilterOperationProperty.Builder.() -> Unit)

      /**
       * @param navigationOperation The navigation operation that navigates between different sheets
       * in the same analysis.
       */
      public fun navigationOperation(navigationOperation: IResolvable)

      /**
       * @param navigationOperation The navigation operation that navigates between different sheets
       * in the same analysis.
       */
      public fun navigationOperation(navigationOperation: CustomActionNavigationOperationProperty)

      /**
       * @param navigationOperation The navigation operation that navigates between different sheets
       * in the same analysis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("744fbba8fd758617413d747bcd03cab49313e21a2041be2354784ad516d1362a")
      public
          fun navigationOperation(navigationOperation: CustomActionNavigationOperationProperty.Builder.() -> Unit)

      /**
       * @param setParametersOperation The set parameter operation that sets parameters in custom
       * action.
       */
      public fun parametersOperation(setParametersOperation: IResolvable)

      /**
       * @param setParametersOperation The set parameter operation that sets parameters in custom
       * action.
       */
      public
          fun parametersOperation(setParametersOperation: CustomActionSetParametersOperationProperty)

      /**
       * @param setParametersOperation The set parameter operation that sets parameters in custom
       * action.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("60d7ba56130871e7ff02f289c6832d6ccc27f1fb760297b2400eda27460eb847")
      public
          fun parametersOperation(setParametersOperation: CustomActionSetParametersOperationProperty.Builder.() -> Unit)

      /**
       * @param urlOperation The URL operation that opens a link to another webpage.
       */
      public fun urlOperation(urlOperation: IResolvable)

      /**
       * @param urlOperation The URL operation that opens a link to another webpage.
       */
      public fun urlOperation(urlOperation: CustomActionURLOperationProperty)

      /**
       * @param urlOperation The URL operation that opens a link to another webpage.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("43df86478a6d6e2a4321ea76a354f69c17dd39cf4e6be8121af5a5af38bf1c1e")
      public fun urlOperation(urlOperation: CustomActionURLOperationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualCustomActionOperationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualCustomActionOperationProperty.builder()

      /**
       * @param filterOperation The filter operation that filters data included in a visual or in an
       * entire sheet.
       */
      override fun filterOperation(filterOperation: IResolvable) {
        cdkBuilder.filterOperation(filterOperation.let(IResolvable::unwrap))
      }

      /**
       * @param filterOperation The filter operation that filters data included in a visual or in an
       * entire sheet.
       */
      override fun filterOperation(filterOperation: CustomActionFilterOperationProperty) {
        cdkBuilder.filterOperation(filterOperation.let(CustomActionFilterOperationProperty::unwrap))
      }

      /**
       * @param filterOperation The filter operation that filters data included in a visual or in an
       * entire sheet.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("12ce4439f256401fea7f3452cc92724b7097680cb7ced9140f2aaf4913bc38eb")
      override
          fun filterOperation(filterOperation: CustomActionFilterOperationProperty.Builder.() -> Unit):
          Unit = filterOperation(CustomActionFilterOperationProperty(filterOperation))

      /**
       * @param navigationOperation The navigation operation that navigates between different sheets
       * in the same analysis.
       */
      override fun navigationOperation(navigationOperation: IResolvable) {
        cdkBuilder.navigationOperation(navigationOperation.let(IResolvable::unwrap))
      }

      /**
       * @param navigationOperation The navigation operation that navigates between different sheets
       * in the same analysis.
       */
      override
          fun navigationOperation(navigationOperation: CustomActionNavigationOperationProperty) {
        cdkBuilder.navigationOperation(navigationOperation.let(CustomActionNavigationOperationProperty::unwrap))
      }

      /**
       * @param navigationOperation The navigation operation that navigates between different sheets
       * in the same analysis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("744fbba8fd758617413d747bcd03cab49313e21a2041be2354784ad516d1362a")
      override
          fun navigationOperation(navigationOperation: CustomActionNavigationOperationProperty.Builder.() -> Unit):
          Unit = navigationOperation(CustomActionNavigationOperationProperty(navigationOperation))

      /**
       * @param setParametersOperation The set parameter operation that sets parameters in custom
       * action.
       */
      override fun parametersOperation(setParametersOperation: IResolvable) {
        cdkBuilder.setParametersOperation(setParametersOperation.let(IResolvable::unwrap))
      }

      /**
       * @param setParametersOperation The set parameter operation that sets parameters in custom
       * action.
       */
      override
          fun parametersOperation(setParametersOperation: CustomActionSetParametersOperationProperty) {
        cdkBuilder.setParametersOperation(setParametersOperation.let(CustomActionSetParametersOperationProperty::unwrap))
      }

      /**
       * @param setParametersOperation The set parameter operation that sets parameters in custom
       * action.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("60d7ba56130871e7ff02f289c6832d6ccc27f1fb760297b2400eda27460eb847")
      override
          fun parametersOperation(setParametersOperation: CustomActionSetParametersOperationProperty.Builder.() -> Unit):
          Unit =
          parametersOperation(CustomActionSetParametersOperationProperty(setParametersOperation))

      /**
       * @param urlOperation The URL operation that opens a link to another webpage.
       */
      override fun urlOperation(urlOperation: IResolvable) {
        cdkBuilder.urlOperation(urlOperation.let(IResolvable::unwrap))
      }

      /**
       * @param urlOperation The URL operation that opens a link to another webpage.
       */
      override fun urlOperation(urlOperation: CustomActionURLOperationProperty) {
        cdkBuilder.urlOperation(urlOperation.let(CustomActionURLOperationProperty::unwrap))
      }

      /**
       * @param urlOperation The URL operation that opens a link to another webpage.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("43df86478a6d6e2a4321ea76a354f69c17dd39cf4e6be8121af5a5af38bf1c1e")
      override fun urlOperation(urlOperation: CustomActionURLOperationProperty.Builder.() -> Unit):
          Unit = urlOperation(CustomActionURLOperationProperty(urlOperation))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualCustomActionOperationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualCustomActionOperationProperty,
    ) : VisualCustomActionOperationProperty {
      /**
       * The filter operation that filters data included in a visual or in an entire sheet.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html#cfn-quicksight-analysis-visualcustomactionoperation-filteroperation)
       */
      override fun filterOperation(): Any? = unwrap(this).getFilterOperation()

      /**
       * The navigation operation that navigates between different sheets in the same analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html#cfn-quicksight-analysis-visualcustomactionoperation-navigationoperation)
       */
      override fun navigationOperation(): Any? = unwrap(this).getNavigationOperation()

      /**
       * The set parameter operation that sets parameters in custom action.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html#cfn-quicksight-analysis-visualcustomactionoperation-setparametersoperation)
       */
      override fun setParametersOperation(): Any? = unwrap(this).getSetParametersOperation()

      /**
       * The URL operation that opens a link to another webpage.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html#cfn-quicksight-analysis-visualcustomactionoperation-urloperation)
       */
      override fun urlOperation(): Any? = unwrap(this).getUrlOperation()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          VisualCustomActionOperationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualCustomActionOperationProperty):
          VisualCustomActionOperationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisualCustomActionOperationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualCustomActionOperationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface AxisLinearScaleProperty {
    /**
     * The step count setup of a linear axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislinearscale.html#cfn-quicksight-analysis-axislinearscale-stepcount)
     */
    public fun stepCount(): Number? = unwrap(this).getStepCount()

    /**
     * The step size setup of a linear axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislinearscale.html#cfn-quicksight-analysis-axislinearscale-stepsize)
     */
    public fun stepSize(): Number? = unwrap(this).getStepSize()

    /**
     * A builder for [AxisLinearScaleProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param stepCount The step count setup of a linear axis.
       */
      public fun stepCount(stepCount: Number)

      /**
       * @param stepSize The step size setup of a linear axis.
       */
      public fun stepSize(stepSize: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLinearScaleProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLinearScaleProperty.builder()

      /**
       * @param stepCount The step count setup of a linear axis.
       */
      override fun stepCount(stepCount: Number) {
        cdkBuilder.stepCount(stepCount)
      }

      /**
       * @param stepSize The step size setup of a linear axis.
       */
      override fun stepSize(stepSize: Number) {
        cdkBuilder.stepSize(stepSize)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLinearScaleProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLinearScaleProperty,
    ) : AxisLinearScaleProperty {
      /**
       * The step count setup of a linear axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislinearscale.html#cfn-quicksight-analysis-axislinearscale-stepcount)
       */
      override fun stepCount(): Number? = unwrap(this).getStepCount()

      /**
       * The step size setup of a linear axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislinearscale.html#cfn-quicksight-analysis-axislinearscale-stepsize)
       */
      override fun stepSize(): Number? = unwrap(this).getStepSize()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AxisLinearScaleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLinearScaleProperty):
          AxisLinearScaleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisLinearScaleProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLinearScaleProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface PivotFieldSortOptionsProperty {
    /**
     * The field ID for the field sort options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivotfieldsortoptions.html#cfn-quicksight-analysis-pivotfieldsortoptions-fieldid)
     */
    public fun fieldId(): String

    /**
     * The sort by field for the field sort options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivotfieldsortoptions.html#cfn-quicksight-analysis-pivotfieldsortoptions-sortby)
     */
    public fun sortBy(): Any

    /**
     * A builder for [PivotFieldSortOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldId The field ID for the field sort options. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param sortBy The sort by field for the field sort options. 
       */
      public fun sortBy(sortBy: IResolvable)

      /**
       * @param sortBy The sort by field for the field sort options. 
       */
      public fun sortBy(sortBy: PivotTableSortByProperty)

      /**
       * @param sortBy The sort by field for the field sort options. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("579c3dc3e4ec65137e6a55c1bed4d41dad9ebb4af3d8e15057f3de8dc49c9b62")
      public fun sortBy(sortBy: PivotTableSortByProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotFieldSortOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotFieldSortOptionsProperty.builder()

      /**
       * @param fieldId The field ID for the field sort options. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param sortBy The sort by field for the field sort options. 
       */
      override fun sortBy(sortBy: IResolvable) {
        cdkBuilder.sortBy(sortBy.let(IResolvable::unwrap))
      }

      /**
       * @param sortBy The sort by field for the field sort options. 
       */
      override fun sortBy(sortBy: PivotTableSortByProperty) {
        cdkBuilder.sortBy(sortBy.let(PivotTableSortByProperty::unwrap))
      }

      /**
       * @param sortBy The sort by field for the field sort options. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("579c3dc3e4ec65137e6a55c1bed4d41dad9ebb4af3d8e15057f3de8dc49c9b62")
      override fun sortBy(sortBy: PivotTableSortByProperty.Builder.() -> Unit): Unit =
          sortBy(PivotTableSortByProperty(sortBy))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotFieldSortOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotFieldSortOptionsProperty,
    ) : PivotFieldSortOptionsProperty {
      /**
       * The field ID for the field sort options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivotfieldsortoptions.html#cfn-quicksight-analysis-pivotfieldsortoptions-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The sort by field for the field sort options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivotfieldsortoptions.html#cfn-quicksight-analysis-pivotfieldsortoptions-sortby)
       */
      override fun sortBy(): Any = unwrap(this).getSortBy()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PivotFieldSortOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotFieldSortOptionsProperty):
          PivotFieldSortOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotFieldSortOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotFieldSortOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FreeFormLayoutConfigurationProperty {
    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutconfiguration.html#cfn-quicksight-analysis-freeformlayoutconfiguration-canvassizeoptions)
     */
    public fun canvasSizeOptions(): Any? = unwrap(this).getCanvasSizeOptions()

    /**
     * The elements that are included in a free-form layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutconfiguration.html#cfn-quicksight-analysis-freeformlayoutconfiguration-elements)
     */
    public fun elements(): Any

    /**
     * A builder for [FreeFormLayoutConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param canvasSizeOptions the value to be set.
       */
      public fun canvasSizeOptions(canvasSizeOptions: IResolvable)

      /**
       * @param canvasSizeOptions the value to be set.
       */
      public fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty)

      /**
       * @param canvasSizeOptions the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("770100a1775b139e9ea9a6f301781e3085fc3d1a8f942bef830aae901a800ba4")
      public
          fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty.Builder.() -> Unit)

      /**
       * @param elements The elements that are included in a free-form layout. 
       */
      public fun elements(elements: IResolvable)

      /**
       * @param elements The elements that are included in a free-form layout. 
       */
      public fun elements(elements: List<Any>)

      /**
       * @param elements The elements that are included in a free-form layout. 
       */
      public fun elements(vararg elements: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutConfigurationProperty.builder()

      /**
       * @param canvasSizeOptions the value to be set.
       */
      override fun canvasSizeOptions(canvasSizeOptions: IResolvable) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(IResolvable::unwrap))
      }

      /**
       * @param canvasSizeOptions the value to be set.
       */
      override fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(FreeFormLayoutCanvasSizeOptionsProperty::unwrap))
      }

      /**
       * @param canvasSizeOptions the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("770100a1775b139e9ea9a6f301781e3085fc3d1a8f942bef830aae901a800ba4")
      override
          fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit = canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty(canvasSizeOptions))

      /**
       * @param elements The elements that are included in a free-form layout. 
       */
      override fun elements(elements: IResolvable) {
        cdkBuilder.elements(elements.let(IResolvable::unwrap))
      }

      /**
       * @param elements The elements that are included in a free-form layout. 
       */
      override fun elements(elements: List<Any>) {
        cdkBuilder.elements(elements)
      }

      /**
       * @param elements The elements that are included in a free-form layout. 
       */
      override fun elements(vararg elements: Any): Unit = elements(elements.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutConfigurationProperty,
    ) : FreeFormLayoutConfigurationProperty {
      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutconfiguration.html#cfn-quicksight-analysis-freeformlayoutconfiguration-canvassizeoptions)
       */
      override fun canvasSizeOptions(): Any? = unwrap(this).getCanvasSizeOptions()

      /**
       * The elements that are included in a free-form layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutconfiguration.html#cfn-quicksight-analysis-freeformlayoutconfiguration-elements)
       */
      override fun elements(): Any = unwrap(this).getElements()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FreeFormLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutConfigurationProperty):
          FreeFormLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface CustomContentConfigurationProperty {
    /**
     * The content type of the custom content visual.
     *
     * You can use this to have the visual render as an image.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentconfiguration.html#cfn-quicksight-analysis-customcontentconfiguration-contenttype)
     */
    public fun contentType(): String? = unwrap(this).getContentType()

    /**
     * The input URL that links to the custom content that you want in the custom visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentconfiguration.html#cfn-quicksight-analysis-customcontentconfiguration-contenturl)
     */
    public fun contentUrl(): String? = unwrap(this).getContentUrl()

    /**
     * The sizing options for the size of the custom content visual.
     *
     * This structure is required when the `ContentType` of the visual is `'IMAGE'` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentconfiguration.html#cfn-quicksight-analysis-customcontentconfiguration-imagescaling)
     */
    public fun imageScaling(): String? = unwrap(this).getImageScaling()

    /**
     * A builder for [CustomContentConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param contentType The content type of the custom content visual.
       * You can use this to have the visual render as an image.
       */
      public fun contentType(contentType: String)

      /**
       * @param contentUrl The input URL that links to the custom content that you want in the
       * custom visual.
       */
      public fun contentUrl(contentUrl: String)

      /**
       * @param imageScaling The sizing options for the size of the custom content visual.
       * This structure is required when the `ContentType` of the visual is `'IMAGE'` .
       */
      public fun imageScaling(imageScaling: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomContentConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomContentConfigurationProperty.builder()

      /**
       * @param contentType The content type of the custom content visual.
       * You can use this to have the visual render as an image.
       */
      override fun contentType(contentType: String) {
        cdkBuilder.contentType(contentType)
      }

      /**
       * @param contentUrl The input URL that links to the custom content that you want in the
       * custom visual.
       */
      override fun contentUrl(contentUrl: String) {
        cdkBuilder.contentUrl(contentUrl)
      }

      /**
       * @param imageScaling The sizing options for the size of the custom content visual.
       * This structure is required when the `ContentType` of the visual is `'IMAGE'` .
       */
      override fun imageScaling(imageScaling: String) {
        cdkBuilder.imageScaling(imageScaling)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomContentConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomContentConfigurationProperty,
    ) : CustomContentConfigurationProperty {
      /**
       * The content type of the custom content visual.
       *
       * You can use this to have the visual render as an image.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentconfiguration.html#cfn-quicksight-analysis-customcontentconfiguration-contenttype)
       */
      override fun contentType(): String? = unwrap(this).getContentType()

      /**
       * The input URL that links to the custom content that you want in the custom visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentconfiguration.html#cfn-quicksight-analysis-customcontentconfiguration-contenturl)
       */
      override fun contentUrl(): String? = unwrap(this).getContentUrl()

      /**
       * The sizing options for the size of the custom content visual.
       *
       * This structure is required when the `ContentType` of the visual is `'IMAGE'` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentconfiguration.html#cfn-quicksight-analysis-customcontentconfiguration-imagescaling)
       */
      override fun imageScaling(): String? = unwrap(this).getImageScaling()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomContentConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomContentConfigurationProperty):
          CustomContentConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomContentConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CustomContentConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FontWeightProperty {
    /**
     * The lexical name for the level of boldness of the text display.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontweight.html#cfn-quicksight-analysis-fontweight-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * A builder for [FontWeightProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param name The lexical name for the level of boldness of the text display.
       */
      public fun name(name: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontWeightProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontWeightProperty.builder()

      /**
       * @param name The lexical name for the level of boldness of the text display.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.FontWeightProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontWeightProperty,
    ) : FontWeightProperty {
      /**
       * The lexical name for the level of boldness of the text display.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontweight.html#cfn-quicksight-analysis-fontweight-name)
       */
      override fun name(): String? = unwrap(this).getName()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FontWeightProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FontWeightProperty):
          FontWeightProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FontWeightProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FontWeightProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface ScrollBarOptionsProperty {
    /**
     * The visibility of the data zoom scroll bar.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scrollbaroptions.html#cfn-quicksight-analysis-scrollbaroptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * The visibility range for the data zoom scroll bar.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scrollbaroptions.html#cfn-quicksight-analysis-scrollbaroptions-visiblerange)
     */
    public fun visibleRange(): Any? = unwrap(this).getVisibleRange()

    /**
     * A builder for [ScrollBarOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility The visibility of the data zoom scroll bar.
       */
      public fun visibility(visibility: String)

      /**
       * @param visibleRange The visibility range for the data zoom scroll bar.
       */
      public fun visibleRange(visibleRange: IResolvable)

      /**
       * @param visibleRange The visibility range for the data zoom scroll bar.
       */
      public fun visibleRange(visibleRange: VisibleRangeOptionsProperty)

      /**
       * @param visibleRange The visibility range for the data zoom scroll bar.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2e4c19c91e4a39dd0b82ea039c7d2ded57fc01c53f62c5a69af311557018bea")
      public fun visibleRange(visibleRange: VisibleRangeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScrollBarOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScrollBarOptionsProperty.builder()

      /**
       * @param visibility The visibility of the data zoom scroll bar.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      /**
       * @param visibleRange The visibility range for the data zoom scroll bar.
       */
      override fun visibleRange(visibleRange: IResolvable) {
        cdkBuilder.visibleRange(visibleRange.let(IResolvable::unwrap))
      }

      /**
       * @param visibleRange The visibility range for the data zoom scroll bar.
       */
      override fun visibleRange(visibleRange: VisibleRangeOptionsProperty) {
        cdkBuilder.visibleRange(visibleRange.let(VisibleRangeOptionsProperty::unwrap))
      }

      /**
       * @param visibleRange The visibility range for the data zoom scroll bar.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2e4c19c91e4a39dd0b82ea039c7d2ded57fc01c53f62c5a69af311557018bea")
      override fun visibleRange(visibleRange: VisibleRangeOptionsProperty.Builder.() -> Unit): Unit
          = visibleRange(VisibleRangeOptionsProperty(visibleRange))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScrollBarOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScrollBarOptionsProperty,
    ) : ScrollBarOptionsProperty {
      /**
       * The visibility of the data zoom scroll bar.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scrollbaroptions.html#cfn-quicksight-analysis-scrollbaroptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()

      /**
       * The visibility range for the data zoom scroll bar.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scrollbaroptions.html#cfn-quicksight-analysis-scrollbaroptions-visiblerange)
       */
      override fun visibleRange(): Any? = unwrap(this).getVisibleRange()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ScrollBarOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ScrollBarOptionsProperty):
          ScrollBarOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ScrollBarOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScrollBarOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface GaugeChartConfigurationProperty {
    /**
     * The data label configuration of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-datalabels)
     */
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    /**
     * The field well configuration of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The options that determine the presentation of the `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-gaugechartoptions)
     */
    public fun gaugeChartOptions(): Any? = unwrap(this).getGaugeChartOptions()

    /**
     * The tooltip configuration of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-tooltipoptions)
     */
    public fun tooltipOptions(): Any? = unwrap(this).getTooltipOptions()

    /**
     * The visual palette configuration of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-visualpalette)
     */
    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    /**
     * A builder for [GaugeChartConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataLabels The data label configuration of a `GaugeChartVisual` .
       */
      public fun dataLabels(dataLabels: IResolvable)

      /**
       * @param dataLabels The data label configuration of a `GaugeChartVisual` .
       */
      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      /**
       * @param dataLabels The data label configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dad8de8634d9d6cc4ca4133c776567a0e2b909c67b7a61460b7798ec83e35f91")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field well configuration of a `GaugeChartVisual` .
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field well configuration of a `GaugeChartVisual` .
       */
      public fun fieldWells(fieldWells: GaugeChartFieldWellsProperty)

      /**
       * @param fieldWells The field well configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("16be44f699e8c3e084946636158d250d3714cd4948402f5103cd65ae80f5721f")
      public fun fieldWells(fieldWells: GaugeChartFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param gaugeChartOptions The options that determine the presentation of the
       * `GaugeChartVisual` .
       */
      public fun gaugeChartOptions(gaugeChartOptions: IResolvable)

      /**
       * @param gaugeChartOptions The options that determine the presentation of the
       * `GaugeChartVisual` .
       */
      public fun gaugeChartOptions(gaugeChartOptions: GaugeChartOptionsProperty)

      /**
       * @param gaugeChartOptions The options that determine the presentation of the
       * `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a19d3bc2fb05c9bceed6204aa1faad6ae4e7d25d23278f10966f3cd00a3f396b")
      public fun gaugeChartOptions(gaugeChartOptions: GaugeChartOptionsProperty.Builder.() -> Unit)

      /**
       * @param tooltipOptions The tooltip configuration of a `GaugeChartVisual` .
       */
      public fun tooltipOptions(tooltipOptions: IResolvable)

      /**
       * @param tooltipOptions The tooltip configuration of a `GaugeChartVisual` .
       */
      public fun tooltipOptions(tooltipOptions: TooltipOptionsProperty)

      /**
       * @param tooltipOptions The tooltip configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("37d4f2885dcf0c53ba2902d2a5fe278e7d489273cca1329174f7f961581d2e3b")
      public fun tooltipOptions(tooltipOptions: TooltipOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualPalette The visual palette configuration of a `GaugeChartVisual` .
       */
      public fun visualPalette(visualPalette: IResolvable)

      /**
       * @param visualPalette The visual palette configuration of a `GaugeChartVisual` .
       */
      public fun visualPalette(visualPalette: VisualPaletteProperty)

      /**
       * @param visualPalette The visual palette configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("400a59c741eb3e292a647757ba88b406df83d858e85b5e2018e8cdfcb12bd555")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConfigurationProperty.builder()

      /**
       * @param dataLabels The data label configuration of a `GaugeChartVisual` .
       */
      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      /**
       * @param dataLabels The data label configuration of a `GaugeChartVisual` .
       */
      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      /**
       * @param dataLabels The data label configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dad8de8634d9d6cc4ca4133c776567a0e2b909c67b7a61460b7798ec83e35f91")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      /**
       * @param fieldWells The field well configuration of a `GaugeChartVisual` .
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a `GaugeChartVisual` .
       */
      override fun fieldWells(fieldWells: GaugeChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(GaugeChartFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("16be44f699e8c3e084946636158d250d3714cd4948402f5103cd65ae80f5721f")
      override fun fieldWells(fieldWells: GaugeChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(GaugeChartFieldWellsProperty(fieldWells))

      /**
       * @param gaugeChartOptions The options that determine the presentation of the
       * `GaugeChartVisual` .
       */
      override fun gaugeChartOptions(gaugeChartOptions: IResolvable) {
        cdkBuilder.gaugeChartOptions(gaugeChartOptions.let(IResolvable::unwrap))
      }

      /**
       * @param gaugeChartOptions The options that determine the presentation of the
       * `GaugeChartVisual` .
       */
      override fun gaugeChartOptions(gaugeChartOptions: GaugeChartOptionsProperty) {
        cdkBuilder.gaugeChartOptions(gaugeChartOptions.let(GaugeChartOptionsProperty::unwrap))
      }

      /**
       * @param gaugeChartOptions The options that determine the presentation of the
       * `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a19d3bc2fb05c9bceed6204aa1faad6ae4e7d25d23278f10966f3cd00a3f396b")
      override
          fun gaugeChartOptions(gaugeChartOptions: GaugeChartOptionsProperty.Builder.() -> Unit):
          Unit = gaugeChartOptions(GaugeChartOptionsProperty(gaugeChartOptions))

      /**
       * @param tooltipOptions The tooltip configuration of a `GaugeChartVisual` .
       */
      override fun tooltipOptions(tooltipOptions: IResolvable) {
        cdkBuilder.tooltipOptions(tooltipOptions.let(IResolvable::unwrap))
      }

      /**
       * @param tooltipOptions The tooltip configuration of a `GaugeChartVisual` .
       */
      override fun tooltipOptions(tooltipOptions: TooltipOptionsProperty) {
        cdkBuilder.tooltipOptions(tooltipOptions.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltipOptions The tooltip configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("37d4f2885dcf0c53ba2902d2a5fe278e7d489273cca1329174f7f961581d2e3b")
      override fun tooltipOptions(tooltipOptions: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltipOptions(TooltipOptionsProperty(tooltipOptions))

      /**
       * @param visualPalette The visual palette configuration of a `GaugeChartVisual` .
       */
      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      /**
       * @param visualPalette The visual palette configuration of a `GaugeChartVisual` .
       */
      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      /**
       * @param visualPalette The visual palette configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("400a59c741eb3e292a647757ba88b406df83d858e85b5e2018e8cdfcb12bd555")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConfigurationProperty,
    ) : GaugeChartConfigurationProperty {
      /**
       * The data label configuration of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-datalabels)
       */
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      /**
       * The field well configuration of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The options that determine the presentation of the `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-gaugechartoptions)
       */
      override fun gaugeChartOptions(): Any? = unwrap(this).getGaugeChartOptions()

      /**
       * The tooltip configuration of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-tooltipoptions)
       */
      override fun tooltipOptions(): Any? = unwrap(this).getTooltipOptions()

      /**
       * The visual palette configuration of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-visualpalette)
       */
      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GaugeChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConfigurationProperty):
          GaugeChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GaugeChartArcConditionalFormattingProperty {
    /**
     * The conditional formatting of the arc foreground color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartarcconditionalformatting.html#cfn-quicksight-analysis-gaugechartarcconditionalformatting-foregroundcolor)
     */
    public fun foregroundColor(): Any? = unwrap(this).getForegroundColor()

    /**
     * A builder for [GaugeChartArcConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param foregroundColor The conditional formatting of the arc foreground color.
       */
      public fun foregroundColor(foregroundColor: IResolvable)

      /**
       * @param foregroundColor The conditional formatting of the arc foreground color.
       */
      public fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty)

      /**
       * @param foregroundColor The conditional formatting of the arc foreground color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93e1211755cd115a36dd7492e1e42774a8bc4d6c7f01a7ac227dfab3d2ea12f0")
      public
          fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartArcConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartArcConditionalFormattingProperty.builder()

      /**
       * @param foregroundColor The conditional formatting of the arc foreground color.
       */
      override fun foregroundColor(foregroundColor: IResolvable) {
        cdkBuilder.foregroundColor(foregroundColor.let(IResolvable::unwrap))
      }

      /**
       * @param foregroundColor The conditional formatting of the arc foreground color.
       */
      override fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty) {
        cdkBuilder.foregroundColor(foregroundColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      /**
       * @param foregroundColor The conditional formatting of the arc foreground color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93e1211755cd115a36dd7492e1e42774a8bc4d6c7f01a7ac227dfab3d2ea12f0")
      override
          fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit):
          Unit = foregroundColor(ConditionalFormattingColorProperty(foregroundColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartArcConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartArcConditionalFormattingProperty,
    ) : GaugeChartArcConditionalFormattingProperty {
      /**
       * The conditional formatting of the arc foreground color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartarcconditionalformatting.html#cfn-quicksight-analysis-gaugechartarcconditionalformatting-foregroundcolor)
       */
      override fun foregroundColor(): Any? = unwrap(this).getForegroundColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GaugeChartArcConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartArcConditionalFormattingProperty):
          GaugeChartArcConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartArcConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartArcConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DefaultFreeFormLayoutConfigurationProperty {
    /**
     * Determines the screen canvas size options for a free-form layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultfreeformlayoutconfiguration.html#cfn-quicksight-analysis-defaultfreeformlayoutconfiguration-canvassizeoptions)
     */
    public fun canvasSizeOptions(): Any

    /**
     * A builder for [DefaultFreeFormLayoutConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a free-form layout. 
       */
      public fun canvasSizeOptions(canvasSizeOptions: IResolvable)

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a free-form layout. 
       */
      public fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty)

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a free-form layout. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e9ff89a00ecb42ab32bad32fa8ae7fd1b0f4780befdf7bbd879b276bd38d40b9")
      public
          fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultFreeFormLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultFreeFormLayoutConfigurationProperty.builder()

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a free-form layout. 
       */
      override fun canvasSizeOptions(canvasSizeOptions: IResolvable) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(IResolvable::unwrap))
      }

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a free-form layout. 
       */
      override fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(FreeFormLayoutCanvasSizeOptionsProperty::unwrap))
      }

      /**
       * @param canvasSizeOptions Determines the screen canvas size options for a free-form layout. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e9ff89a00ecb42ab32bad32fa8ae7fd1b0f4780befdf7bbd879b276bd38d40b9")
      override
          fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit = canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty(canvasSizeOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultFreeFormLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultFreeFormLayoutConfigurationProperty,
    ) : DefaultFreeFormLayoutConfigurationProperty {
      /**
       * Determines the screen canvas size options for a free-form layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultfreeformlayoutconfiguration.html#cfn-quicksight-analysis-defaultfreeformlayoutconfiguration-canvassizeoptions)
       */
      override fun canvasSizeOptions(): Any = unwrap(this).getCanvasSizeOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DefaultFreeFormLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultFreeFormLayoutConfigurationProperty):
          DefaultFreeFormLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DefaultFreeFormLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DefaultFreeFormLayoutConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SheetElementConfigurationOverridesProperty {
    /**
     * Determines whether or not the overrides are visible. Choose one of the following options:.
     *
     * * `VISIBLE`
     * * `HIDDEN`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementconfigurationoverrides.html#cfn-quicksight-analysis-sheetelementconfigurationoverrides-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [SheetElementConfigurationOverridesProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility Determines whether or not the overrides are visible. Choose one of the
       * following options:.
       * * `VISIBLE`
       * * `HIDDEN`
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetElementConfigurationOverridesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetElementConfigurationOverridesProperty.builder()

      /**
       * @param visibility Determines whether or not the overrides are visible. Choose one of the
       * following options:.
       * * `VISIBLE`
       * * `HIDDEN`
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetElementConfigurationOverridesProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetElementConfigurationOverridesProperty,
    ) : SheetElementConfigurationOverridesProperty {
      /**
       * Determines whether or not the overrides are visible. Choose one of the following options:.
       *
       * * `VISIBLE`
       * * `HIDDEN`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementconfigurationoverrides.html#cfn-quicksight-analysis-sheetelementconfigurationoverrides-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SheetElementConfigurationOverridesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetElementConfigurationOverridesProperty):
          SheetElementConfigurationOverridesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetElementConfigurationOverridesProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetElementConfigurationOverridesProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface GeospatialHeatmapDataColorProperty {
    /**
     * The hex color to be used in the heatmap point style.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapdatacolor.html#cfn-quicksight-analysis-geospatialheatmapdatacolor-color)
     */
    public fun color(): String

    /**
     * A builder for [GeospatialHeatmapDataColorProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color The hex color to be used in the heatmap point style. 
       */
      public fun color(color: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapDataColorProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapDataColorProperty.builder()

      /**
       * @param color The hex color to be used in the heatmap point style. 
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapDataColorProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapDataColorProperty,
    ) : GeospatialHeatmapDataColorProperty {
      /**
       * The hex color to be used in the heatmap point style.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapdatacolor.html#cfn-quicksight-analysis-geospatialheatmapdatacolor-color)
       */
      override fun color(): String = unwrap(this).getColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialHeatmapDataColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapDataColorProperty):
          GeospatialHeatmapDataColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialHeatmapDataColorProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapDataColorProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface StringValueWhenUnsetConfigurationProperty {
    /**
     * A custom value that's used when the value of a parameter isn't set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringvaluewhenunsetconfiguration.html#cfn-quicksight-analysis-stringvaluewhenunsetconfiguration-customvalue)
     */
    public fun customValue(): String? = unwrap(this).getCustomValue()

    /**
     * The built-in options for default values. The value can be one of the following:.
     *
     * * `RECOMMENDED` : The recommended value.
     * * `NULL` : The `NULL` value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringvaluewhenunsetconfiguration.html#cfn-quicksight-analysis-stringvaluewhenunsetconfiguration-valuewhenunsetoption)
     */
    public fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()

    /**
     * A builder for [StringValueWhenUnsetConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customValue A custom value that's used when the value of a parameter isn't set.
       */
      public fun customValue(customValue: String)

      /**
       * @param valueWhenUnsetOption The built-in options for default values. The value can be one
       * of the following:.
       * * `RECOMMENDED` : The recommended value.
       * * `NULL` : The `NULL` value.
       */
      public fun valueWhenUnsetOption(valueWhenUnsetOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringValueWhenUnsetConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringValueWhenUnsetConfigurationProperty.builder()

      /**
       * @param customValue A custom value that's used when the value of a parameter isn't set.
       */
      override fun customValue(customValue: String) {
        cdkBuilder.customValue(customValue)
      }

      /**
       * @param valueWhenUnsetOption The built-in options for default values. The value can be one
       * of the following:.
       * * `RECOMMENDED` : The recommended value.
       * * `NULL` : The `NULL` value.
       */
      override fun valueWhenUnsetOption(valueWhenUnsetOption: String) {
        cdkBuilder.valueWhenUnsetOption(valueWhenUnsetOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringValueWhenUnsetConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringValueWhenUnsetConfigurationProperty,
    ) : StringValueWhenUnsetConfigurationProperty {
      /**
       * A custom value that's used when the value of a parameter isn't set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringvaluewhenunsetconfiguration.html#cfn-quicksight-analysis-stringvaluewhenunsetconfiguration-customvalue)
       */
      override fun customValue(): String? = unwrap(this).getCustomValue()

      /**
       * The built-in options for default values. The value can be one of the following:.
       *
       * * `RECOMMENDED` : The recommended value.
       * * `NULL` : The `NULL` value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringvaluewhenunsetconfiguration.html#cfn-quicksight-analysis-stringvaluewhenunsetconfiguration-valuewhenunsetoption)
       */
      override fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          StringValueWhenUnsetConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.StringValueWhenUnsetConfigurationProperty):
          StringValueWhenUnsetConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: StringValueWhenUnsetConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringValueWhenUnsetConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface RadarChartSortConfigurationProperty {
    /**
     * The category items limit for a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html#cfn-quicksight-analysis-radarchartsortconfiguration-categoryitemslimit)
     */
    public fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

    /**
     * The category sort options of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html#cfn-quicksight-analysis-radarchartsortconfiguration-categorysort)
     */
    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    /**
     * The color items limit of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html#cfn-quicksight-analysis-radarchartsortconfiguration-coloritemslimit)
     */
    public fun colorItemsLimit(): Any? = unwrap(this).getColorItemsLimit()

    /**
     * The color sort configuration of a radar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html#cfn-quicksight-analysis-radarchartsortconfiguration-colorsort)
     */
    public fun colorSort(): Any? = unwrap(this).getColorSort()

    /**
     * A builder for [RadarChartSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryItemsLimit The category items limit for a radar chart.
       */
      public fun categoryItemsLimit(categoryItemsLimit: IResolvable)

      /**
       * @param categoryItemsLimit The category items limit for a radar chart.
       */
      public fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty)

      /**
       * @param categoryItemsLimit The category items limit for a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c63991cfe3b8d464c62963f8ee9ecb1bc0ee6d6a061e7594e2b131eee9d7cd39")
      public
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param categorySort The category sort options of a radar chart.
       */
      public fun categorySort(categorySort: IResolvable)

      /**
       * @param categorySort The category sort options of a radar chart.
       */
      public fun categorySort(categorySort: List<Any>)

      /**
       * @param categorySort The category sort options of a radar chart.
       */
      public fun categorySort(vararg categorySort: Any)

      /**
       * @param colorItemsLimit The color items limit of a radar chart.
       */
      public fun colorItemsLimit(colorItemsLimit: IResolvable)

      /**
       * @param colorItemsLimit The color items limit of a radar chart.
       */
      public fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty)

      /**
       * @param colorItemsLimit The color items limit of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c0d56ea38b450cd56707de4b7fc4d31231fda32eab367a1cca748f3c35653c0")
      public
          fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param colorSort The color sort configuration of a radar chart.
       */
      public fun colorSort(colorSort: IResolvable)

      /**
       * @param colorSort The color sort configuration of a radar chart.
       */
      public fun colorSort(colorSort: List<Any>)

      /**
       * @param colorSort The color sort configuration of a radar chart.
       */
      public fun colorSort(vararg colorSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartSortConfigurationProperty.builder()

      /**
       * @param categoryItemsLimit The category items limit for a radar chart.
       */
      override fun categoryItemsLimit(categoryItemsLimit: IResolvable) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(IResolvable::unwrap))
      }

      /**
       * @param categoryItemsLimit The category items limit for a radar chart.
       */
      override fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param categoryItemsLimit The category items limit for a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c63991cfe3b8d464c62963f8ee9ecb1bc0ee6d6a061e7594e2b131eee9d7cd39")
      override
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = categoryItemsLimit(ItemsLimitConfigurationProperty(categoryItemsLimit))

      /**
       * @param categorySort The category sort options of a radar chart.
       */
      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      /**
       * @param categorySort The category sort options of a radar chart.
       */
      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      /**
       * @param categorySort The category sort options of a radar chart.
       */
      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      /**
       * @param colorItemsLimit The color items limit of a radar chart.
       */
      override fun colorItemsLimit(colorItemsLimit: IResolvable) {
        cdkBuilder.colorItemsLimit(colorItemsLimit.let(IResolvable::unwrap))
      }

      /**
       * @param colorItemsLimit The color items limit of a radar chart.
       */
      override fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.colorItemsLimit(colorItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param colorItemsLimit The color items limit of a radar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c0d56ea38b450cd56707de4b7fc4d31231fda32eab367a1cca748f3c35653c0")
      override
          fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = colorItemsLimit(ItemsLimitConfigurationProperty(colorItemsLimit))

      /**
       * @param colorSort The color sort configuration of a radar chart.
       */
      override fun colorSort(colorSort: IResolvable) {
        cdkBuilder.colorSort(colorSort.let(IResolvable::unwrap))
      }

      /**
       * @param colorSort The color sort configuration of a radar chart.
       */
      override fun colorSort(colorSort: List<Any>) {
        cdkBuilder.colorSort(colorSort)
      }

      /**
       * @param colorSort The color sort configuration of a radar chart.
       */
      override fun colorSort(vararg colorSort: Any): Unit = colorSort(colorSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartSortConfigurationProperty,
    ) : RadarChartSortConfigurationProperty {
      /**
       * The category items limit for a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html#cfn-quicksight-analysis-radarchartsortconfiguration-categoryitemslimit)
       */
      override fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

      /**
       * The category sort options of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html#cfn-quicksight-analysis-radarchartsortconfiguration-categorysort)
       */
      override fun categorySort(): Any? = unwrap(this).getCategorySort()

      /**
       * The color items limit of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html#cfn-quicksight-analysis-radarchartsortconfiguration-coloritemslimit)
       */
      override fun colorItemsLimit(): Any? = unwrap(this).getColorItemsLimit()

      /**
       * The color sort configuration of a radar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html#cfn-quicksight-analysis-radarchartsortconfiguration-colorsort)
       */
      override fun colorSort(): Any? = unwrap(this).getColorSort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          RadarChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartSortConfigurationProperty):
          RadarChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RadarChartSortConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface LongFormatTextProperty {
    /**
     * Plain text format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-longformattext.html#cfn-quicksight-analysis-longformattext-plaintext)
     */
    public fun plainText(): String? = unwrap(this).getPlainText()

    /**
     * Rich text.
     *
     * Examples of rich text include bold, underline, and italics.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-longformattext.html#cfn-quicksight-analysis-longformattext-richtext)
     */
    public fun richText(): String? = unwrap(this).getRichText()

    /**
     * A builder for [LongFormatTextProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param plainText Plain text format.
       */
      public fun plainText(plainText: String)

      /**
       * @param richText Rich text.
       * Examples of rich text include bold, underline, and italics.
       */
      public fun richText(richText: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LongFormatTextProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LongFormatTextProperty.builder()

      /**
       * @param plainText Plain text format.
       */
      override fun plainText(plainText: String) {
        cdkBuilder.plainText(plainText)
      }

      /**
       * @param richText Rich text.
       * Examples of rich text include bold, underline, and italics.
       */
      override fun richText(richText: String) {
        cdkBuilder.richText(richText)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LongFormatTextProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LongFormatTextProperty,
    ) : LongFormatTextProperty {
      /**
       * Plain text format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-longformattext.html#cfn-quicksight-analysis-longformattext-plaintext)
       */
      override fun plainText(): String? = unwrap(this).getPlainText()

      /**
       * Rich text.
       *
       * Examples of rich text include bold, underline, and italics.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-longformattext.html#cfn-quicksight-analysis-longformattext-richtext)
       */
      override fun richText(): String? = unwrap(this).getRichText()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): LongFormatTextProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LongFormatTextProperty):
          LongFormatTextProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LongFormatTextProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LongFormatTextProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface FieldLabelTypeProperty {
    /**
     * Indicates the field that is targeted by the field label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldlabeltype.html#cfn-quicksight-analysis-fieldlabeltype-fieldid)
     */
    public fun fieldId(): String? = unwrap(this).getFieldId()

    /**
     * The visibility of the field label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldlabeltype.html#cfn-quicksight-analysis-fieldlabeltype-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [FieldLabelTypeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldId Indicates the field that is targeted by the field label.
       */
      public fun fieldId(fieldId: String)

      /**
       * @param visibility The visibility of the field label.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldLabelTypeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldLabelTypeProperty.builder()

      /**
       * @param fieldId Indicates the field that is targeted by the field label.
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param visibility The visibility of the field label.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldLabelTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldLabelTypeProperty,
    ) : FieldLabelTypeProperty {
      /**
       * Indicates the field that is targeted by the field label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldlabeltype.html#cfn-quicksight-analysis-fieldlabeltype-fieldid)
       */
      override fun fieldId(): String? = unwrap(this).getFieldId()

      /**
       * The visibility of the field label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldlabeltype.html#cfn-quicksight-analysis-fieldlabeltype-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FieldLabelTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldLabelTypeProperty):
          FieldLabelTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FieldLabelTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldLabelTypeProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface GaugeChartOptionsProperty {
    /**
     * The arc configuration of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-arc)
     */
    public fun arc(): Any? = unwrap(this).getArc()

    /**
     * The arc axis configuration of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-arcaxis)
     */
    public fun arcAxis(): Any? = unwrap(this).getArcAxis()

    /**
     * The comparison configuration of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-comparison)
     */
    public fun comparison(): Any? = unwrap(this).getComparison()

    /**
     * The options that determine the primary value display type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-primaryvaluedisplaytype)
     */
    public fun primaryValueDisplayType(): String? = unwrap(this).getPrimaryValueDisplayType()

    /**
     * The options that determine the primary value font configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-primaryvaluefontconfiguration)
     */
    public fun primaryValueFontConfiguration(): Any? =
        unwrap(this).getPrimaryValueFontConfiguration()

    /**
     * A builder for [GaugeChartOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param arc The arc configuration of a `GaugeChartVisual` .
       */
      public fun arc(arc: IResolvable)

      /**
       * @param arc The arc configuration of a `GaugeChartVisual` .
       */
      public fun arc(arc: ArcConfigurationProperty)

      /**
       * @param arc The arc configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("514233c010ff57ece230b078572b685ea0c575ba98d8802f590df91e935fc9b7")
      public fun arc(arc: ArcConfigurationProperty.Builder.() -> Unit)

      /**
       * @param arcAxis The arc axis configuration of a `GaugeChartVisual` .
       */
      public fun arcAxis(arcAxis: IResolvable)

      /**
       * @param arcAxis The arc axis configuration of a `GaugeChartVisual` .
       */
      public fun arcAxis(arcAxis: ArcAxisConfigurationProperty)

      /**
       * @param arcAxis The arc axis configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("229197befffd6ad732220ed140ed3416799cd9c67bab696c75fde96eb6b54be0")
      public fun arcAxis(arcAxis: ArcAxisConfigurationProperty.Builder.() -> Unit)

      /**
       * @param comparison The comparison configuration of a `GaugeChartVisual` .
       */
      public fun comparison(comparison: IResolvable)

      /**
       * @param comparison The comparison configuration of a `GaugeChartVisual` .
       */
      public fun comparison(comparison: ComparisonConfigurationProperty)

      /**
       * @param comparison The comparison configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("36cd4a2d7432345ac3802302267c480549e45c8e952bb57db99b7422c0e0c342")
      public fun comparison(comparison: ComparisonConfigurationProperty.Builder.() -> Unit)

      /**
       * @param primaryValueDisplayType The options that determine the primary value display type.
       */
      public fun primaryValueDisplayType(primaryValueDisplayType: String)

      /**
       * @param primaryValueFontConfiguration The options that determine the primary value font
       * configuration.
       */
      public fun primaryValueFontConfiguration(primaryValueFontConfiguration: IResolvable)

      /**
       * @param primaryValueFontConfiguration The options that determine the primary value font
       * configuration.
       */
      public
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty)

      /**
       * @param primaryValueFontConfiguration The options that determine the primary value font
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4eb621f678fa3b41b78d0c1e94a19c3757fa12996e48ad83befe4668d65a7ddb")
      public
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartOptionsProperty.builder()

      /**
       * @param arc The arc configuration of a `GaugeChartVisual` .
       */
      override fun arc(arc: IResolvable) {
        cdkBuilder.arc(arc.let(IResolvable::unwrap))
      }

      /**
       * @param arc The arc configuration of a `GaugeChartVisual` .
       */
      override fun arc(arc: ArcConfigurationProperty) {
        cdkBuilder.arc(arc.let(ArcConfigurationProperty::unwrap))
      }

      /**
       * @param arc The arc configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("514233c010ff57ece230b078572b685ea0c575ba98d8802f590df91e935fc9b7")
      override fun arc(arc: ArcConfigurationProperty.Builder.() -> Unit): Unit =
          arc(ArcConfigurationProperty(arc))

      /**
       * @param arcAxis The arc axis configuration of a `GaugeChartVisual` .
       */
      override fun arcAxis(arcAxis: IResolvable) {
        cdkBuilder.arcAxis(arcAxis.let(IResolvable::unwrap))
      }

      /**
       * @param arcAxis The arc axis configuration of a `GaugeChartVisual` .
       */
      override fun arcAxis(arcAxis: ArcAxisConfigurationProperty) {
        cdkBuilder.arcAxis(arcAxis.let(ArcAxisConfigurationProperty::unwrap))
      }

      /**
       * @param arcAxis The arc axis configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("229197befffd6ad732220ed140ed3416799cd9c67bab696c75fde96eb6b54be0")
      override fun arcAxis(arcAxis: ArcAxisConfigurationProperty.Builder.() -> Unit): Unit =
          arcAxis(ArcAxisConfigurationProperty(arcAxis))

      /**
       * @param comparison The comparison configuration of a `GaugeChartVisual` .
       */
      override fun comparison(comparison: IResolvable) {
        cdkBuilder.comparison(comparison.let(IResolvable::unwrap))
      }

      /**
       * @param comparison The comparison configuration of a `GaugeChartVisual` .
       */
      override fun comparison(comparison: ComparisonConfigurationProperty) {
        cdkBuilder.comparison(comparison.let(ComparisonConfigurationProperty::unwrap))
      }

      /**
       * @param comparison The comparison configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("36cd4a2d7432345ac3802302267c480549e45c8e952bb57db99b7422c0e0c342")
      override fun comparison(comparison: ComparisonConfigurationProperty.Builder.() -> Unit): Unit
          = comparison(ComparisonConfigurationProperty(comparison))

      /**
       * @param primaryValueDisplayType The options that determine the primary value display type.
       */
      override fun primaryValueDisplayType(primaryValueDisplayType: String) {
        cdkBuilder.primaryValueDisplayType(primaryValueDisplayType)
      }

      /**
       * @param primaryValueFontConfiguration The options that determine the primary value font
       * configuration.
       */
      override fun primaryValueFontConfiguration(primaryValueFontConfiguration: IResolvable) {
        cdkBuilder.primaryValueFontConfiguration(primaryValueFontConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param primaryValueFontConfiguration The options that determine the primary value font
       * configuration.
       */
      override
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty) {
        cdkBuilder.primaryValueFontConfiguration(primaryValueFontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      /**
       * @param primaryValueFontConfiguration The options that determine the primary value font
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4eb621f678fa3b41b78d0c1e94a19c3757fa12996e48ad83befe4668d65a7ddb")
      override
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit =
          primaryValueFontConfiguration(FontConfigurationProperty(primaryValueFontConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartOptionsProperty,
    ) : GaugeChartOptionsProperty {
      /**
       * The arc configuration of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-arc)
       */
      override fun arc(): Any? = unwrap(this).getArc()

      /**
       * The arc axis configuration of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-arcaxis)
       */
      override fun arcAxis(): Any? = unwrap(this).getArcAxis()

      /**
       * The comparison configuration of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-comparison)
       */
      override fun comparison(): Any? = unwrap(this).getComparison()

      /**
       * The options that determine the primary value display type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-primaryvaluedisplaytype)
       */
      override fun primaryValueDisplayType(): String? = unwrap(this).getPrimaryValueDisplayType()

      /**
       * The options that determine the primary value font configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-primaryvaluefontconfiguration)
       */
      override fun primaryValueFontConfiguration(): Any? =
          unwrap(this).getPrimaryValueFontConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GaugeChartOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartOptionsProperty):
          GaugeChartOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface CurrencyDisplayFormatConfigurationProperty {
    /**
     * The option that determines the decimal places configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-decimalplacesconfiguration)
     */
    public fun decimalPlacesConfiguration(): Any? = unwrap(this).getDecimalPlacesConfiguration()

    /**
     * The options that determine the negative value configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-negativevalueconfiguration)
     */
    public fun negativeValueConfiguration(): Any? = unwrap(this).getNegativeValueConfiguration()

    /**
     * The options that determine the null value format configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-nullvalueformatconfiguration)
     */
    public fun nullValueFormatConfiguration(): Any? = unwrap(this).getNullValueFormatConfiguration()

    /**
     * Determines the number scale value for the currency format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-numberscale)
     */
    public fun numberScale(): String? = unwrap(this).getNumberScale()

    /**
     * Determines the prefix value of the currency format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-prefix)
     */
    public fun prefix(): String? = unwrap(this).getPrefix()

    /**
     * The options that determine the numeric separator configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-separatorconfiguration)
     */
    public fun separatorConfiguration(): Any? = unwrap(this).getSeparatorConfiguration()

    /**
     * Determines the suffix value of the currency format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-suffix)
     */
    public fun suffix(): String? = unwrap(this).getSuffix()

    /**
     * Determines the symbol for the currency format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-symbol)
     */
    public fun symbol(): String? = unwrap(this).getSymbol()

    /**
     * A builder for [CurrencyDisplayFormatConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      public fun decimalPlacesConfiguration(decimalPlacesConfiguration: IResolvable)

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      public
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty)

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ad8b4e325c7b6bb15a9510d603e6a5d08ef1e49ead04abd11da39a237db4a6f7")
      public
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty.Builder.() -> Unit)

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      public fun negativeValueConfiguration(negativeValueConfiguration: IResolvable)

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      public
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty)

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("29992a17940ffb4cf7293674bd3e93dcf356b5c84915121afc301d55af1548f2")
      public
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty.Builder.() -> Unit)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      public fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty)

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("941970a743f052c4aad9cfcddbb250eca23fc09956111632ec88ae71ab36eff8")
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param numberScale Determines the number scale value for the currency format.
       */
      public fun numberScale(numberScale: String)

      /**
       * @param prefix Determines the prefix value of the currency format.
       */
      public fun prefix(prefix: String)

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      public fun separatorConfiguration(separatorConfiguration: IResolvable)

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      public
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty)

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("91d220cea4fb1dfd113a6a19e5860cb639b9f505934fb51a7592fe3c92a98448")
      public
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty.Builder.() -> Unit)

      /**
       * @param suffix Determines the suffix value of the currency format.
       */
      public fun suffix(suffix: String)

      /**
       * @param symbol Determines the symbol for the currency format.
       */
      public fun symbol(symbol: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CurrencyDisplayFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CurrencyDisplayFormatConfigurationProperty.builder()

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      override fun decimalPlacesConfiguration(decimalPlacesConfiguration: IResolvable) {
        cdkBuilder.decimalPlacesConfiguration(decimalPlacesConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      override
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty) {
        cdkBuilder.decimalPlacesConfiguration(decimalPlacesConfiguration.let(DecimalPlacesConfigurationProperty::unwrap))
      }

      /**
       * @param decimalPlacesConfiguration The option that determines the decimal places
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ad8b4e325c7b6bb15a9510d603e6a5d08ef1e49ead04abd11da39a237db4a6f7")
      override
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty.Builder.() -> Unit):
          Unit =
          decimalPlacesConfiguration(DecimalPlacesConfigurationProperty(decimalPlacesConfiguration))

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      override fun negativeValueConfiguration(negativeValueConfiguration: IResolvable) {
        cdkBuilder.negativeValueConfiguration(negativeValueConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      override
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty) {
        cdkBuilder.negativeValueConfiguration(negativeValueConfiguration.let(NegativeValueConfigurationProperty::unwrap))
      }

      /**
       * @param negativeValueConfiguration The options that determine the negative value
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("29992a17940ffb4cf7293674bd3e93dcf356b5c84915121afc301d55af1548f2")
      override
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty.Builder.() -> Unit):
          Unit =
          negativeValueConfiguration(NegativeValueConfigurationProperty(negativeValueConfiguration))

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      override fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(NullValueFormatConfigurationProperty::unwrap))
      }

      /**
       * @param nullValueFormatConfiguration The options that determine the null value format
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("941970a743f052c4aad9cfcddbb250eca23fc09956111632ec88ae71ab36eff8")
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          nullValueFormatConfiguration(NullValueFormatConfigurationProperty(nullValueFormatConfiguration))

      /**
       * @param numberScale Determines the number scale value for the currency format.
       */
      override fun numberScale(numberScale: String) {
        cdkBuilder.numberScale(numberScale)
      }

      /**
       * @param prefix Determines the prefix value of the currency format.
       */
      override fun prefix(prefix: String) {
        cdkBuilder.prefix(prefix)
      }

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      override fun separatorConfiguration(separatorConfiguration: IResolvable) {
        cdkBuilder.separatorConfiguration(separatorConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      override
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty) {
        cdkBuilder.separatorConfiguration(separatorConfiguration.let(NumericSeparatorConfigurationProperty::unwrap))
      }

      /**
       * @param separatorConfiguration The options that determine the numeric separator
       * configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("91d220cea4fb1dfd113a6a19e5860cb639b9f505934fb51a7592fe3c92a98448")
      override
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty.Builder.() -> Unit):
          Unit =
          separatorConfiguration(NumericSeparatorConfigurationProperty(separatorConfiguration))

      /**
       * @param suffix Determines the suffix value of the currency format.
       */
      override fun suffix(suffix: String) {
        cdkBuilder.suffix(suffix)
      }

      /**
       * @param symbol Determines the symbol for the currency format.
       */
      override fun symbol(symbol: String) {
        cdkBuilder.symbol(symbol)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CurrencyDisplayFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CurrencyDisplayFormatConfigurationProperty,
    ) : CurrencyDisplayFormatConfigurationProperty {
      /**
       * The option that determines the decimal places configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-decimalplacesconfiguration)
       */
      override fun decimalPlacesConfiguration(): Any? = unwrap(this).getDecimalPlacesConfiguration()

      /**
       * The options that determine the negative value configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-negativevalueconfiguration)
       */
      override fun negativeValueConfiguration(): Any? = unwrap(this).getNegativeValueConfiguration()

      /**
       * The options that determine the null value format configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-nullvalueformatconfiguration)
       */
      override fun nullValueFormatConfiguration(): Any? =
          unwrap(this).getNullValueFormatConfiguration()

      /**
       * Determines the number scale value for the currency format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-numberscale)
       */
      override fun numberScale(): String? = unwrap(this).getNumberScale()

      /**
       * Determines the prefix value of the currency format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-prefix)
       */
      override fun prefix(): String? = unwrap(this).getPrefix()

      /**
       * The options that determine the numeric separator configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-separatorconfiguration)
       */
      override fun separatorConfiguration(): Any? = unwrap(this).getSeparatorConfiguration()

      /**
       * Determines the suffix value of the currency format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-suffix)
       */
      override fun suffix(): String? = unwrap(this).getSuffix()

      /**
       * Determines the symbol for the currency format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-symbol)
       */
      override fun symbol(): String? = unwrap(this).getSymbol()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          CurrencyDisplayFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CurrencyDisplayFormatConfigurationProperty):
          CurrencyDisplayFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CurrencyDisplayFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CurrencyDisplayFormatConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PaginationConfigurationProperty {
    /**
     * Indicates the page number.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paginationconfiguration.html#cfn-quicksight-analysis-paginationconfiguration-pagenumber)
     */
    public fun pageNumber(): Number

    /**
     * Indicates how many items render in one page.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paginationconfiguration.html#cfn-quicksight-analysis-paginationconfiguration-pagesize)
     */
    public fun pageSize(): Number

    /**
     * A builder for [PaginationConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param pageNumber Indicates the page number. 
       */
      public fun pageNumber(pageNumber: Number)

      /**
       * @param pageSize Indicates how many items render in one page. 
       */
      public fun pageSize(pageSize: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PaginationConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PaginationConfigurationProperty.builder()

      /**
       * @param pageNumber Indicates the page number. 
       */
      override fun pageNumber(pageNumber: Number) {
        cdkBuilder.pageNumber(pageNumber)
      }

      /**
       * @param pageSize Indicates how many items render in one page. 
       */
      override fun pageSize(pageSize: Number) {
        cdkBuilder.pageSize(pageSize)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PaginationConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PaginationConfigurationProperty,
    ) : PaginationConfigurationProperty {
      /**
       * Indicates the page number.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paginationconfiguration.html#cfn-quicksight-analysis-paginationconfiguration-pagenumber)
       */
      override fun pageNumber(): Number = unwrap(this).getPageNumber()

      /**
       * Indicates how many items render in one page.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paginationconfiguration.html#cfn-quicksight-analysis-paginationconfiguration-pagesize)
       */
      override fun pageSize(): Number = unwrap(this).getPageSize()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PaginationConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PaginationConfigurationProperty):
          PaginationConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PaginationConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PaginationConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilterListConfigurationProperty {
    /**
     * The list of category values for the filter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html#cfn-quicksight-analysis-filterlistconfiguration-categoryvalues)
     */
    public fun categoryValues(): List<String> = unwrap(this).getCategoryValues() ?: emptyList()

    /**
     * The match operator that is used to determine if a filter should be applied.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html#cfn-quicksight-analysis-filterlistconfiguration-matchoperator)
     */
    public fun matchOperator(): String

    /**
     * This option determines how null values should be treated when filtering data.
     *
     * * `ALL_VALUES` : Include null values in filtered results.
     * * `NULLS_ONLY` : Only include null values in filtered results.
     * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html#cfn-quicksight-analysis-filterlistconfiguration-nulloption)
     */
    public fun nullOption(): String? = unwrap(this).getNullOption()

    /**
     * Select all of the values. Null is not the assigned value of select all.
     *
     * * `FILTER_ALL_VALUES`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html#cfn-quicksight-analysis-filterlistconfiguration-selectalloptions)
     */
    public fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()

    /**
     * A builder for [FilterListConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryValues The list of category values for the filter.
       */
      public fun categoryValues(categoryValues: List<String>)

      /**
       * @param categoryValues The list of category values for the filter.
       */
      public fun categoryValues(vararg categoryValues: String)

      /**
       * @param matchOperator The match operator that is used to determine if a filter should be
       * applied. 
       */
      public fun matchOperator(matchOperator: String)

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data.
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      public fun nullOption(nullOption: String)

      /**
       * @param selectAllOptions Select all of the values. Null is not the assigned value of select
       * all.
       * * `FILTER_ALL_VALUES`
       */
      public fun selectAllOptions(selectAllOptions: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterListConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterListConfigurationProperty.builder()

      /**
       * @param categoryValues The list of category values for the filter.
       */
      override fun categoryValues(categoryValues: List<String>) {
        cdkBuilder.categoryValues(categoryValues)
      }

      /**
       * @param categoryValues The list of category values for the filter.
       */
      override fun categoryValues(vararg categoryValues: String): Unit =
          categoryValues(categoryValues.toList())

      /**
       * @param matchOperator The match operator that is used to determine if a filter should be
       * applied. 
       */
      override fun matchOperator(matchOperator: String) {
        cdkBuilder.matchOperator(matchOperator)
      }

      /**
       * @param nullOption This option determines how null values should be treated when filtering
       * data.
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       */
      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      /**
       * @param selectAllOptions Select all of the values. Null is not the assigned value of select
       * all.
       * * `FILTER_ALL_VALUES`
       */
      override fun selectAllOptions(selectAllOptions: String) {
        cdkBuilder.selectAllOptions(selectAllOptions)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterListConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterListConfigurationProperty,
    ) : FilterListConfigurationProperty {
      /**
       * The list of category values for the filter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html#cfn-quicksight-analysis-filterlistconfiguration-categoryvalues)
       */
      override fun categoryValues(): List<String> = unwrap(this).getCategoryValues() ?: emptyList()

      /**
       * The match operator that is used to determine if a filter should be applied.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html#cfn-quicksight-analysis-filterlistconfiguration-matchoperator)
       */
      override fun matchOperator(): String = unwrap(this).getMatchOperator()

      /**
       * This option determines how null values should be treated when filtering data.
       *
       * * `ALL_VALUES` : Include null values in filtered results.
       * * `NULLS_ONLY` : Only include null values in filtered results.
       * * `NON_NULLS_ONLY` : Exclude null values from filtered results.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html#cfn-quicksight-analysis-filterlistconfiguration-nulloption)
       */
      override fun nullOption(): String? = unwrap(this).getNullOption()

      /**
       * Select all of the values. Null is not the assigned value of select all.
       *
       * * `FILTER_ALL_VALUES`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html#cfn-quicksight-analysis-filterlistconfiguration-selectalloptions)
       */
      override fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilterListConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterListConfigurationProperty):
          FilterListConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterListConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterListConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface UniqueValuesComputationProperty {
    /**
     * The category field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-uniquevaluescomputation.html#cfn-quicksight-analysis-uniquevaluescomputation-category)
     */
    public fun category(): Any? = unwrap(this).getCategory()

    /**
     * The ID for a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-uniquevaluescomputation.html#cfn-quicksight-analysis-uniquevaluescomputation-computationid)
     */
    public fun computationId(): String

    /**
     * The name of a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-uniquevaluescomputation.html#cfn-quicksight-analysis-uniquevaluescomputation-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * A builder for [UniqueValuesComputationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param category The category field that is used in a computation.
       */
      public fun category(category: IResolvable)

      /**
       * @param category The category field that is used in a computation.
       */
      public fun category(category: DimensionFieldProperty)

      /**
       * @param category The category field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("38d18a35a4019d485a44058c26e0a6d2ed711b0b508adecc7b4473b1f4a7612a")
      public fun category(category: DimensionFieldProperty.Builder.() -> Unit)

      /**
       * @param computationId The ID for a computation. 
       */
      public fun computationId(computationId: String)

      /**
       * @param name The name of a computation.
       */
      public fun name(name: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.UniqueValuesComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.UniqueValuesComputationProperty.builder()

      /**
       * @param category The category field that is used in a computation.
       */
      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      /**
       * @param category The category field that is used in a computation.
       */
      override fun category(category: DimensionFieldProperty) {
        cdkBuilder.category(category.let(DimensionFieldProperty::unwrap))
      }

      /**
       * @param category The category field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("38d18a35a4019d485a44058c26e0a6d2ed711b0b508adecc7b4473b1f4a7612a")
      override fun category(category: DimensionFieldProperty.Builder.() -> Unit): Unit =
          category(DimensionFieldProperty(category))

      /**
       * @param computationId The ID for a computation. 
       */
      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      /**
       * @param name The name of a computation.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.UniqueValuesComputationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.UniqueValuesComputationProperty,
    ) : UniqueValuesComputationProperty {
      /**
       * The category field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-uniquevaluescomputation.html#cfn-quicksight-analysis-uniquevaluescomputation-category)
       */
      override fun category(): Any? = unwrap(this).getCategory()

      /**
       * The ID for a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-uniquevaluescomputation.html#cfn-quicksight-analysis-uniquevaluescomputation-computationid)
       */
      override fun computationId(): String = unwrap(this).getComputationId()

      /**
       * The name of a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-uniquevaluescomputation.html#cfn-quicksight-analysis-uniquevaluescomputation-name)
       */
      override fun name(): String? = unwrap(this).getName()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): UniqueValuesComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.UniqueValuesComputationProperty):
          UniqueValuesComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: UniqueValuesComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.UniqueValuesComputationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface KPISortConfigurationProperty {
    /**
     * The sort configuration of the trend group fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisortconfiguration.html#cfn-quicksight-analysis-kpisortconfiguration-trendgroupsort)
     */
    public fun trendGroupSort(): Any? = unwrap(this).getTrendGroupSort()

    /**
     * A builder for [KPISortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param trendGroupSort The sort configuration of the trend group fields.
       */
      public fun trendGroupSort(trendGroupSort: IResolvable)

      /**
       * @param trendGroupSort The sort configuration of the trend group fields.
       */
      public fun trendGroupSort(trendGroupSort: List<Any>)

      /**
       * @param trendGroupSort The sort configuration of the trend group fields.
       */
      public fun trendGroupSort(vararg trendGroupSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPISortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPISortConfigurationProperty.builder()

      /**
       * @param trendGroupSort The sort configuration of the trend group fields.
       */
      override fun trendGroupSort(trendGroupSort: IResolvable) {
        cdkBuilder.trendGroupSort(trendGroupSort.let(IResolvable::unwrap))
      }

      /**
       * @param trendGroupSort The sort configuration of the trend group fields.
       */
      override fun trendGroupSort(trendGroupSort: List<Any>) {
        cdkBuilder.trendGroupSort(trendGroupSort)
      }

      /**
       * @param trendGroupSort The sort configuration of the trend group fields.
       */
      override fun trendGroupSort(vararg trendGroupSort: Any): Unit =
          trendGroupSort(trendGroupSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPISortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPISortConfigurationProperty,
    ) : KPISortConfigurationProperty {
      /**
       * The sort configuration of the trend group fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisortconfiguration.html#cfn-quicksight-analysis-kpisortconfiguration-trendgroupsort)
       */
      override fun trendGroupSort(): Any? = unwrap(this).getTrendGroupSort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): KPISortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPISortConfigurationProperty):
          KPISortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPISortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPISortConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableDataPathOptionProperty {
    /**
     * The list of data path values for the data path options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabledatapathoption.html#cfn-quicksight-analysis-pivottabledatapathoption-datapathlist)
     */
    public fun dataPathList(): Any

    /**
     * The width of the data path option.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabledatapathoption.html#cfn-quicksight-analysis-pivottabledatapathoption-width)
     */
    public fun width(): String? = unwrap(this).getWidth()

    /**
     * A builder for [PivotTableDataPathOptionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataPathList The list of data path values for the data path options. 
       */
      public fun dataPathList(dataPathList: IResolvable)

      /**
       * @param dataPathList The list of data path values for the data path options. 
       */
      public fun dataPathList(dataPathList: List<Any>)

      /**
       * @param dataPathList The list of data path values for the data path options. 
       */
      public fun dataPathList(vararg dataPathList: Any)

      /**
       * @param width The width of the data path option.
       */
      public fun width(width: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableDataPathOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableDataPathOptionProperty.builder()

      /**
       * @param dataPathList The list of data path values for the data path options. 
       */
      override fun dataPathList(dataPathList: IResolvable) {
        cdkBuilder.dataPathList(dataPathList.let(IResolvable::unwrap))
      }

      /**
       * @param dataPathList The list of data path values for the data path options. 
       */
      override fun dataPathList(dataPathList: List<Any>) {
        cdkBuilder.dataPathList(dataPathList)
      }

      /**
       * @param dataPathList The list of data path values for the data path options. 
       */
      override fun dataPathList(vararg dataPathList: Any): Unit =
          dataPathList(dataPathList.toList())

      /**
       * @param width The width of the data path option.
       */
      override fun width(width: String) {
        cdkBuilder.width(width)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableDataPathOptionProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableDataPathOptionProperty,
    ) : PivotTableDataPathOptionProperty {
      /**
       * The list of data path values for the data path options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabledatapathoption.html#cfn-quicksight-analysis-pivottabledatapathoption-datapathlist)
       */
      override fun dataPathList(): Any = unwrap(this).getDataPathList()

      /**
       * The width of the data path option.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabledatapathoption.html#cfn-quicksight-analysis-pivottabledatapathoption-width)
       */
      override fun width(): String? = unwrap(this).getWidth()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableDataPathOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableDataPathOptionProperty):
          PivotTableDataPathOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableDataPathOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableDataPathOptionProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface StringDefaultValuesProperty {
    /**
     * The dynamic value of the `StringDefaultValues` .
     *
     * Different defaults displayed according to users, groups, and values mapping.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringdefaultvalues.html#cfn-quicksight-analysis-stringdefaultvalues-dynamicvalue)
     */
    public fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

    /**
     * The static values of the `DecimalDefaultValues` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringdefaultvalues.html#cfn-quicksight-analysis-stringdefaultvalues-staticvalues)
     */
    public fun staticValues(): List<String> = unwrap(this).getStaticValues() ?: emptyList()

    /**
     * A builder for [StringDefaultValuesProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dynamicValue The dynamic value of the `StringDefaultValues` .
       * Different defaults displayed according to users, groups, and values mapping.
       */
      public fun dynamicValue(dynamicValue: IResolvable)

      /**
       * @param dynamicValue The dynamic value of the `StringDefaultValues` .
       * Different defaults displayed according to users, groups, and values mapping.
       */
      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty)

      /**
       * @param dynamicValue The dynamic value of the `StringDefaultValues` .
       * Different defaults displayed according to users, groups, and values mapping.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5758a3ab2e97127160d26ba7c51eea6b3cf7c72cafe625bde2f877f1bafd1c7d")
      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit)

      /**
       * @param staticValues The static values of the `DecimalDefaultValues` .
       */
      public fun staticValues(staticValues: List<String>)

      /**
       * @param staticValues The static values of the `DecimalDefaultValues` .
       */
      public fun staticValues(vararg staticValues: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringDefaultValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringDefaultValuesProperty.builder()

      /**
       * @param dynamicValue The dynamic value of the `StringDefaultValues` .
       * Different defaults displayed according to users, groups, and values mapping.
       */
      override fun dynamicValue(dynamicValue: IResolvable) {
        cdkBuilder.dynamicValue(dynamicValue.let(IResolvable::unwrap))
      }

      /**
       * @param dynamicValue The dynamic value of the `StringDefaultValues` .
       * Different defaults displayed according to users, groups, and values mapping.
       */
      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty) {
        cdkBuilder.dynamicValue(dynamicValue.let(DynamicDefaultValueProperty::unwrap))
      }

      /**
       * @param dynamicValue The dynamic value of the `StringDefaultValues` .
       * Different defaults displayed according to users, groups, and values mapping.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5758a3ab2e97127160d26ba7c51eea6b3cf7c72cafe625bde2f877f1bafd1c7d")
      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit): Unit
          = dynamicValue(DynamicDefaultValueProperty(dynamicValue))

      /**
       * @param staticValues The static values of the `DecimalDefaultValues` .
       */
      override fun staticValues(staticValues: List<String>) {
        cdkBuilder.staticValues(staticValues)
      }

      /**
       * @param staticValues The static values of the `DecimalDefaultValues` .
       */
      override fun staticValues(vararg staticValues: String): Unit =
          staticValues(staticValues.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringDefaultValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringDefaultValuesProperty,
    ) : StringDefaultValuesProperty {
      /**
       * The dynamic value of the `StringDefaultValues` .
       *
       * Different defaults displayed according to users, groups, and values mapping.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringdefaultvalues.html#cfn-quicksight-analysis-stringdefaultvalues-dynamicvalue)
       */
      override fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

      /**
       * The static values of the `DecimalDefaultValues` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringdefaultvalues.html#cfn-quicksight-analysis-stringdefaultvalues-staticvalues)
       */
      override fun staticValues(): List<String> = unwrap(this).getStaticValues() ?: emptyList()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): StringDefaultValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.StringDefaultValuesProperty):
          StringDefaultValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: StringDefaultValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringDefaultValuesProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TreeMapVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration settings of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers..
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [TreeMapVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: TreeMapConfigurationProperty)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("20340775bdd69caae69a18480b298df57566de46b6489b95e346eb9720718614")
      public
          fun chartConfiguration(chartConfiguration: TreeMapConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8f03d5d383d9467d246a25410a6cf49f1fb4d08dae12a559fb5cf3b7e37a6b43")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c1368bb221826a43bf62cf2b59fe5e8301d410bc304ae44446f3b5dda3864271")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: TreeMapConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(TreeMapConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("20340775bdd69caae69a18480b298df57566de46b6489b95e346eb9720718614")
      override
          fun chartConfiguration(chartConfiguration: TreeMapConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(TreeMapConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8f03d5d383d9467d246a25410a6cf49f1fb4d08dae12a559fb5cf3b7e37a6b43")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c1368bb221826a43bf62cf2b59fe5e8301d410bc304ae44446f3b5dda3864271")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapVisualProperty,
    ) : TreeMapVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration settings of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TreeMapVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapVisualProperty):
          TreeMapVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TreeMapVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TreeMapVisualProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface FieldSeriesItemProperty {
    /**
     * The axis that you are binding the field to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldseriesitem.html#cfn-quicksight-analysis-fieldseriesitem-axisbinding)
     */
    public fun axisBinding(): String

    /**
     * The field ID of the field for which you are setting the axis binding.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldseriesitem.html#cfn-quicksight-analysis-fieldseriesitem-fieldid)
     */
    public fun fieldId(): String

    /**
     * The options that determine the presentation of line series associated to the field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldseriesitem.html#cfn-quicksight-analysis-fieldseriesitem-settings)
     */
    public fun settings(): Any? = unwrap(this).getSettings()

    /**
     * A builder for [FieldSeriesItemProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param axisBinding The axis that you are binding the field to. 
       */
      public fun axisBinding(axisBinding: String)

      /**
       * @param fieldId The field ID of the field for which you are setting the axis binding. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param settings The options that determine the presentation of line series associated to
       * the field.
       */
      public fun tings(settings: IResolvable)

      /**
       * @param settings The options that determine the presentation of line series associated to
       * the field.
       */
      public fun tings(settings: LineChartSeriesSettingsProperty)

      /**
       * @param settings The options that determine the presentation of line series associated to
       * the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2e302c0d5c8deaea5e877e9a3554efb723ca11328014bfa98b85fdbbfd48a863")
      public fun tings(settings: LineChartSeriesSettingsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSeriesItemProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSeriesItemProperty.builder()

      /**
       * @param axisBinding The axis that you are binding the field to. 
       */
      override fun axisBinding(axisBinding: String) {
        cdkBuilder.axisBinding(axisBinding)
      }

      /**
       * @param fieldId The field ID of the field for which you are setting the axis binding. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param settings The options that determine the presentation of line series associated to
       * the field.
       */
      override fun tings(settings: IResolvable) {
        cdkBuilder.settings(settings.let(IResolvable::unwrap))
      }

      /**
       * @param settings The options that determine the presentation of line series associated to
       * the field.
       */
      override fun tings(settings: LineChartSeriesSettingsProperty) {
        cdkBuilder.settings(settings.let(LineChartSeriesSettingsProperty::unwrap))
      }

      /**
       * @param settings The options that determine the presentation of line series associated to
       * the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2e302c0d5c8deaea5e877e9a3554efb723ca11328014bfa98b85fdbbfd48a863")
      override fun tings(settings: LineChartSeriesSettingsProperty.Builder.() -> Unit): Unit =
          tings(LineChartSeriesSettingsProperty(settings))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSeriesItemProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSeriesItemProperty,
    ) : FieldSeriesItemProperty {
      /**
       * The axis that you are binding the field to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldseriesitem.html#cfn-quicksight-analysis-fieldseriesitem-axisbinding)
       */
      override fun axisBinding(): String = unwrap(this).getAxisBinding()

      /**
       * The field ID of the field for which you are setting the axis binding.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldseriesitem.html#cfn-quicksight-analysis-fieldseriesitem-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The options that determine the presentation of line series associated to the field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldseriesitem.html#cfn-quicksight-analysis-fieldseriesitem-settings)
       */
      override fun settings(): Any? = unwrap(this).getSettings()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FieldSeriesItemProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSeriesItemProperty):
          FieldSeriesItemProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FieldSeriesItemProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FieldSeriesItemProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface FunnelChartSortConfigurationProperty {
    /**
     * The limit on the number of categories displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartsortconfiguration.html#cfn-quicksight-analysis-funnelchartsortconfiguration-categoryitemslimit)
     */
    public fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

    /**
     * The sort configuration of the category fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartsortconfiguration.html#cfn-quicksight-analysis-funnelchartsortconfiguration-categorysort)
     */
    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    /**
     * A builder for [FunnelChartSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryItemsLimit The limit on the number of categories displayed.
       */
      public fun categoryItemsLimit(categoryItemsLimit: IResolvable)

      /**
       * @param categoryItemsLimit The limit on the number of categories displayed.
       */
      public fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty)

      /**
       * @param categoryItemsLimit The limit on the number of categories displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f92929c8a1ad485a2d2328020d3ba8a6513c76cdde8c0a480444487b3c32b39f")
      public
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      public fun categorySort(categorySort: IResolvable)

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      public fun categorySort(categorySort: List<Any>)

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      public fun categorySort(vararg categorySort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartSortConfigurationProperty.builder()

      /**
       * @param categoryItemsLimit The limit on the number of categories displayed.
       */
      override fun categoryItemsLimit(categoryItemsLimit: IResolvable) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(IResolvable::unwrap))
      }

      /**
       * @param categoryItemsLimit The limit on the number of categories displayed.
       */
      override fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param categoryItemsLimit The limit on the number of categories displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f92929c8a1ad485a2d2328020d3ba8a6513c76cdde8c0a480444487b3c32b39f")
      override
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = categoryItemsLimit(ItemsLimitConfigurationProperty(categoryItemsLimit))

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartSortConfigurationProperty,
    ) : FunnelChartSortConfigurationProperty {
      /**
       * The limit on the number of categories displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartsortconfiguration.html#cfn-quicksight-analysis-funnelchartsortconfiguration-categoryitemslimit)
       */
      override fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

      /**
       * The sort configuration of the category fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartsortconfiguration.html#cfn-quicksight-analysis-funnelchartsortconfiguration-categorysort)
       */
      override fun categorySort(): Any? = unwrap(this).getCategorySort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FunnelChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartSortConfigurationProperty):
          FunnelChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FunnelChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartSortConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableCellConditionalFormattingProperty {
    /**
     * The field ID of the cell for conditional formatting.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html#cfn-quicksight-analysis-pivottablecellconditionalformatting-fieldid)
     */
    public fun fieldId(): String

    /**
     * The scope of the cell for conditional formatting.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html#cfn-quicksight-analysis-pivottablecellconditionalformatting-scope)
     */
    public fun scope(): Any? = unwrap(this).getScope()

    /**
     * A list of cell scopes for conditional formatting.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html#cfn-quicksight-analysis-pivottablecellconditionalformatting-scopes)
     */
    public fun scopes(): Any? = unwrap(this).getScopes()

    /**
     * The text format of the cell for conditional formatting.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html#cfn-quicksight-analysis-pivottablecellconditionalformatting-textformat)
     */
    public fun textFormat(): Any? = unwrap(this).getTextFormat()

    /**
     * A builder for [PivotTableCellConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldId The field ID of the cell for conditional formatting. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param scope The scope of the cell for conditional formatting.
       */
      public fun scope(scope: IResolvable)

      /**
       * @param scope The scope of the cell for conditional formatting.
       */
      public fun scope(scope: PivotTableConditionalFormattingScopeProperty)

      /**
       * @param scope The scope of the cell for conditional formatting.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("089adc198b8b77cc5b5931298e16deaacd77a541eb90763254514a5d34c55dfb")
      public fun scope(scope: PivotTableConditionalFormattingScopeProperty.Builder.() -> Unit)

      /**
       * @param scopes A list of cell scopes for conditional formatting.
       */
      public fun scopes(scopes: IResolvable)

      /**
       * @param scopes A list of cell scopes for conditional formatting.
       */
      public fun scopes(scopes: List<Any>)

      /**
       * @param scopes A list of cell scopes for conditional formatting.
       */
      public fun scopes(vararg scopes: Any)

      /**
       * @param textFormat The text format of the cell for conditional formatting.
       */
      public fun textFormat(textFormat: IResolvable)

      /**
       * @param textFormat The text format of the cell for conditional formatting.
       */
      public fun textFormat(textFormat: TextConditionalFormatProperty)

      /**
       * @param textFormat The text format of the cell for conditional formatting.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e3b8de2289ff1d52815e261a7afdc09e288573c9fae08c7ff9e1b5ededbc8bb1")
      public fun textFormat(textFormat: TextConditionalFormatProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableCellConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableCellConditionalFormattingProperty.builder()

      /**
       * @param fieldId The field ID of the cell for conditional formatting. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param scope The scope of the cell for conditional formatting.
       */
      override fun scope(scope: IResolvable) {
        cdkBuilder.scope(scope.let(IResolvable::unwrap))
      }

      /**
       * @param scope The scope of the cell for conditional formatting.
       */
      override fun scope(scope: PivotTableConditionalFormattingScopeProperty) {
        cdkBuilder.scope(scope.let(PivotTableConditionalFormattingScopeProperty::unwrap))
      }

      /**
       * @param scope The scope of the cell for conditional formatting.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("089adc198b8b77cc5b5931298e16deaacd77a541eb90763254514a5d34c55dfb")
      override fun scope(scope: PivotTableConditionalFormattingScopeProperty.Builder.() -> Unit):
          Unit = scope(PivotTableConditionalFormattingScopeProperty(scope))

      /**
       * @param scopes A list of cell scopes for conditional formatting.
       */
      override fun scopes(scopes: IResolvable) {
        cdkBuilder.scopes(scopes.let(IResolvable::unwrap))
      }

      /**
       * @param scopes A list of cell scopes for conditional formatting.
       */
      override fun scopes(scopes: List<Any>) {
        cdkBuilder.scopes(scopes)
      }

      /**
       * @param scopes A list of cell scopes for conditional formatting.
       */
      override fun scopes(vararg scopes: Any): Unit = scopes(scopes.toList())

      /**
       * @param textFormat The text format of the cell for conditional formatting.
       */
      override fun textFormat(textFormat: IResolvable) {
        cdkBuilder.textFormat(textFormat.let(IResolvable::unwrap))
      }

      /**
       * @param textFormat The text format of the cell for conditional formatting.
       */
      override fun textFormat(textFormat: TextConditionalFormatProperty) {
        cdkBuilder.textFormat(textFormat.let(TextConditionalFormatProperty::unwrap))
      }

      /**
       * @param textFormat The text format of the cell for conditional formatting.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e3b8de2289ff1d52815e261a7afdc09e288573c9fae08c7ff9e1b5ededbc8bb1")
      override fun textFormat(textFormat: TextConditionalFormatProperty.Builder.() -> Unit): Unit =
          textFormat(TextConditionalFormatProperty(textFormat))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableCellConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableCellConditionalFormattingProperty,
    ) : PivotTableCellConditionalFormattingProperty {
      /**
       * The field ID of the cell for conditional formatting.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html#cfn-quicksight-analysis-pivottablecellconditionalformatting-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The scope of the cell for conditional formatting.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html#cfn-quicksight-analysis-pivottablecellconditionalformatting-scope)
       */
      override fun scope(): Any? = unwrap(this).getScope()

      /**
       * A list of cell scopes for conditional formatting.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html#cfn-quicksight-analysis-pivottablecellconditionalformatting-scopes)
       */
      override fun scopes(): Any? = unwrap(this).getScopes()

      /**
       * The text format of the cell for conditional formatting.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html#cfn-quicksight-analysis-pivottablecellconditionalformatting-textformat)
       */
      override fun textFormat(): Any? = unwrap(this).getTextFormat()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableCellConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableCellConditionalFormattingProperty):
          PivotTableCellConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableCellConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableCellConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface LoadingAnimationProperty {
    /**
     * The visibility configuration of `LoadingAnimation` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-loadinganimation.html#cfn-quicksight-analysis-loadinganimation-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [LoadingAnimationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility The visibility configuration of `LoadingAnimation` .
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LoadingAnimationProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LoadingAnimationProperty.builder()

      /**
       * @param visibility The visibility configuration of `LoadingAnimation` .
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LoadingAnimationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LoadingAnimationProperty,
    ) : LoadingAnimationProperty {
      /**
       * The visibility configuration of `LoadingAnimation` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-loadinganimation.html#cfn-quicksight-analysis-loadinganimation-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): LoadingAnimationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LoadingAnimationProperty):
          LoadingAnimationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LoadingAnimationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LoadingAnimationProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface GeospatialHeatmapConfigurationProperty {
    /**
     * The color scale specification for the heatmap point style.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapconfiguration.html#cfn-quicksight-analysis-geospatialheatmapconfiguration-heatmapcolor)
     */
    public fun heatmapColor(): Any? = unwrap(this).getHeatmapColor()

    /**
     * A builder for [GeospatialHeatmapConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param heatmapColor The color scale specification for the heatmap point style.
       */
      public fun heatmapColor(heatmapColor: IResolvable)

      /**
       * @param heatmapColor The color scale specification for the heatmap point style.
       */
      public fun heatmapColor(heatmapColor: GeospatialHeatmapColorScaleProperty)

      /**
       * @param heatmapColor The color scale specification for the heatmap point style.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2e860512e964ee8c85ed233d1b8071f3ad044a61076e701044978e66bc3129b")
      public fun heatmapColor(heatmapColor: GeospatialHeatmapColorScaleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapConfigurationProperty.builder()

      /**
       * @param heatmapColor The color scale specification for the heatmap point style.
       */
      override fun heatmapColor(heatmapColor: IResolvable) {
        cdkBuilder.heatmapColor(heatmapColor.let(IResolvable::unwrap))
      }

      /**
       * @param heatmapColor The color scale specification for the heatmap point style.
       */
      override fun heatmapColor(heatmapColor: GeospatialHeatmapColorScaleProperty) {
        cdkBuilder.heatmapColor(heatmapColor.let(GeospatialHeatmapColorScaleProperty::unwrap))
      }

      /**
       * @param heatmapColor The color scale specification for the heatmap point style.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2e860512e964ee8c85ed233d1b8071f3ad044a61076e701044978e66bc3129b")
      override
          fun heatmapColor(heatmapColor: GeospatialHeatmapColorScaleProperty.Builder.() -> Unit):
          Unit = heatmapColor(GeospatialHeatmapColorScaleProperty(heatmapColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapConfigurationProperty,
    ) : GeospatialHeatmapConfigurationProperty {
      /**
       * The color scale specification for the heatmap point style.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapconfiguration.html#cfn-quicksight-analysis-geospatialheatmapconfiguration-heatmapcolor)
       */
      override fun heatmapColor(): Any? = unwrap(this).getHeatmapColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialHeatmapConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapConfigurationProperty):
          GeospatialHeatmapConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialHeatmapConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ColorScaleProperty {
    /**
     * Determines the color fill type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorscale.html#cfn-quicksight-analysis-colorscale-colorfilltype)
     */
    public fun colorFillType(): String

    /**
     * Determines the list of colors that are applied to the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorscale.html#cfn-quicksight-analysis-colorscale-colors)
     */
    public fun colors(): Any

    /**
     * Determines the color that is applied to null values.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorscale.html#cfn-quicksight-analysis-colorscale-nullvaluecolor)
     */
    public fun nullValueColor(): Any? = unwrap(this).getNullValueColor()

    /**
     * A builder for [ColorScaleProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param colorFillType Determines the color fill type. 
       */
      public fun colorFillType(colorFillType: String)

      /**
       * @param colors Determines the list of colors that are applied to the visual. 
       */
      public fun colors(colors: IResolvable)

      /**
       * @param colors Determines the list of colors that are applied to the visual. 
       */
      public fun colors(colors: List<Any>)

      /**
       * @param colors Determines the list of colors that are applied to the visual. 
       */
      public fun colors(vararg colors: Any)

      /**
       * @param nullValueColor Determines the color that is applied to null values.
       */
      public fun nullValueColor(nullValueColor: IResolvable)

      /**
       * @param nullValueColor Determines the color that is applied to null values.
       */
      public fun nullValueColor(nullValueColor: DataColorProperty)

      /**
       * @param nullValueColor Determines the color that is applied to null values.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8cf7891d9e1e9eb6f587fb5af6c6cfd4a35b04cc6de64165ba424d09f941e7d2")
      public fun nullValueColor(nullValueColor: DataColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColorScaleProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColorScaleProperty.builder()

      /**
       * @param colorFillType Determines the color fill type. 
       */
      override fun colorFillType(colorFillType: String) {
        cdkBuilder.colorFillType(colorFillType)
      }

      /**
       * @param colors Determines the list of colors that are applied to the visual. 
       */
      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      /**
       * @param colors Determines the list of colors that are applied to the visual. 
       */
      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      /**
       * @param colors Determines the list of colors that are applied to the visual. 
       */
      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      /**
       * @param nullValueColor Determines the color that is applied to null values.
       */
      override fun nullValueColor(nullValueColor: IResolvable) {
        cdkBuilder.nullValueColor(nullValueColor.let(IResolvable::unwrap))
      }

      /**
       * @param nullValueColor Determines the color that is applied to null values.
       */
      override fun nullValueColor(nullValueColor: DataColorProperty) {
        cdkBuilder.nullValueColor(nullValueColor.let(DataColorProperty::unwrap))
      }

      /**
       * @param nullValueColor Determines the color that is applied to null values.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8cf7891d9e1e9eb6f587fb5af6c6cfd4a35b04cc6de64165ba424d09f941e7d2")
      override fun nullValueColor(nullValueColor: DataColorProperty.Builder.() -> Unit): Unit =
          nullValueColor(DataColorProperty(nullValueColor))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.ColorScaleProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColorScaleProperty,
    ) : ColorScaleProperty {
      /**
       * Determines the color fill type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorscale.html#cfn-quicksight-analysis-colorscale-colorfilltype)
       */
      override fun colorFillType(): String = unwrap(this).getColorFillType()

      /**
       * Determines the list of colors that are applied to the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorscale.html#cfn-quicksight-analysis-colorscale-colors)
       */
      override fun colors(): Any = unwrap(this).getColors()

      /**
       * Determines the color that is applied to null values.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorscale.html#cfn-quicksight-analysis-colorscale-nullvaluecolor)
       */
      override fun nullValueColor(): Any? = unwrap(this).getNullValueColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ColorScaleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ColorScaleProperty):
          ColorScaleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColorScaleProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ColorScaleProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface BarChartSortConfigurationProperty {
    /**
     * The limit on the number of categories displayed in a bar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-categoryitemslimit)
     */
    public fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

    /**
     * The sort configuration of category fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-categorysort)
     */
    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    /**
     * The limit on the number of values displayed in a bar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-coloritemslimit)
     */
    public fun colorItemsLimit(): Any? = unwrap(this).getColorItemsLimit()

    /**
     * The sort configuration of color fields in a bar chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-colorsort)
     */
    public fun colorSort(): Any? = unwrap(this).getColorSort()

    /**
     * The limit on the number of small multiples panels that are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-smallmultipleslimitconfiguration)
     */
    public fun smallMultiplesLimitConfiguration(): Any? =
        unwrap(this).getSmallMultiplesLimitConfiguration()

    /**
     * The sort configuration of the small multiples field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-smallmultiplessort)
     */
    public fun smallMultiplesSort(): Any? = unwrap(this).getSmallMultiplesSort()

    /**
     * A builder for [BarChartSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryItemsLimit The limit on the number of categories displayed in a bar chart.
       */
      public fun categoryItemsLimit(categoryItemsLimit: IResolvable)

      /**
       * @param categoryItemsLimit The limit on the number of categories displayed in a bar chart.
       */
      public fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty)

      /**
       * @param categoryItemsLimit The limit on the number of categories displayed in a bar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1d01ca45df4a71ae316849b22a53c9fc77751e6b8de44ef58e0c197c516eb4f0")
      public
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param categorySort The sort configuration of category fields.
       */
      public fun categorySort(categorySort: IResolvable)

      /**
       * @param categorySort The sort configuration of category fields.
       */
      public fun categorySort(categorySort: List<Any>)

      /**
       * @param categorySort The sort configuration of category fields.
       */
      public fun categorySort(vararg categorySort: Any)

      /**
       * @param colorItemsLimit The limit on the number of values displayed in a bar chart.
       */
      public fun colorItemsLimit(colorItemsLimit: IResolvable)

      /**
       * @param colorItemsLimit The limit on the number of values displayed in a bar chart.
       */
      public fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty)

      /**
       * @param colorItemsLimit The limit on the number of values displayed in a bar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aaa1cd02ea48c370ec46e8ad85185b1e84e01ba3af5b6ad041bf66e0fcc2c582")
      public
          fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param colorSort The sort configuration of color fields in a bar chart.
       */
      public fun colorSort(colorSort: IResolvable)

      /**
       * @param colorSort The sort configuration of color fields in a bar chart.
       */
      public fun colorSort(colorSort: List<Any>)

      /**
       * @param colorSort The sort configuration of color fields in a bar chart.
       */
      public fun colorSort(vararg colorSort: Any)

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      public fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: IResolvable)

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      public
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty)

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4483b4799b9392eeb9e0143005ca30dbb1120d208fd0f4b8840b0cf8fc15521a")
      public
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      public fun smallMultiplesSort(smallMultiplesSort: IResolvable)

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      public fun smallMultiplesSort(smallMultiplesSort: List<Any>)

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      public fun smallMultiplesSort(vararg smallMultiplesSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartSortConfigurationProperty.builder()

      /**
       * @param categoryItemsLimit The limit on the number of categories displayed in a bar chart.
       */
      override fun categoryItemsLimit(categoryItemsLimit: IResolvable) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(IResolvable::unwrap))
      }

      /**
       * @param categoryItemsLimit The limit on the number of categories displayed in a bar chart.
       */
      override fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param categoryItemsLimit The limit on the number of categories displayed in a bar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1d01ca45df4a71ae316849b22a53c9fc77751e6b8de44ef58e0c197c516eb4f0")
      override
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = categoryItemsLimit(ItemsLimitConfigurationProperty(categoryItemsLimit))

      /**
       * @param categorySort The sort configuration of category fields.
       */
      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      /**
       * @param categorySort The sort configuration of category fields.
       */
      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      /**
       * @param categorySort The sort configuration of category fields.
       */
      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      /**
       * @param colorItemsLimit The limit on the number of values displayed in a bar chart.
       */
      override fun colorItemsLimit(colorItemsLimit: IResolvable) {
        cdkBuilder.colorItemsLimit(colorItemsLimit.let(IResolvable::unwrap))
      }

      /**
       * @param colorItemsLimit The limit on the number of values displayed in a bar chart.
       */
      override fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.colorItemsLimit(colorItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param colorItemsLimit The limit on the number of values displayed in a bar chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aaa1cd02ea48c370ec46e8ad85185b1e84e01ba3af5b6ad041bf66e0fcc2c582")
      override
          fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = colorItemsLimit(ItemsLimitConfigurationProperty(colorItemsLimit))

      /**
       * @param colorSort The sort configuration of color fields in a bar chart.
       */
      override fun colorSort(colorSort: IResolvable) {
        cdkBuilder.colorSort(colorSort.let(IResolvable::unwrap))
      }

      /**
       * @param colorSort The sort configuration of color fields in a bar chart.
       */
      override fun colorSort(colorSort: List<Any>) {
        cdkBuilder.colorSort(colorSort)
      }

      /**
       * @param colorSort The sort configuration of color fields in a bar chart.
       */
      override fun colorSort(vararg colorSort: Any): Unit = colorSort(colorSort.toList())

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      override fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: IResolvable) {
        cdkBuilder.smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      override
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4483b4799b9392eeb9e0143005ca30dbb1120d208fd0f4b8840b0cf8fc15521a")
      override
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty(smallMultiplesLimitConfiguration))

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      override fun smallMultiplesSort(smallMultiplesSort: IResolvable) {
        cdkBuilder.smallMultiplesSort(smallMultiplesSort.let(IResolvable::unwrap))
      }

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      override fun smallMultiplesSort(smallMultiplesSort: List<Any>) {
        cdkBuilder.smallMultiplesSort(smallMultiplesSort)
      }

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      override fun smallMultiplesSort(vararg smallMultiplesSort: Any): Unit =
          smallMultiplesSort(smallMultiplesSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartSortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartSortConfigurationProperty,
    ) : BarChartSortConfigurationProperty {
      /**
       * The limit on the number of categories displayed in a bar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-categoryitemslimit)
       */
      override fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

      /**
       * The sort configuration of category fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-categorysort)
       */
      override fun categorySort(): Any? = unwrap(this).getCategorySort()

      /**
       * The limit on the number of values displayed in a bar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-coloritemslimit)
       */
      override fun colorItemsLimit(): Any? = unwrap(this).getColorItemsLimit()

      /**
       * The sort configuration of color fields in a bar chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-colorsort)
       */
      override fun colorSort(): Any? = unwrap(this).getColorSort()

      /**
       * The limit on the number of small multiples panels that are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-smallmultipleslimitconfiguration)
       */
      override fun smallMultiplesLimitConfiguration(): Any? =
          unwrap(this).getSmallMultiplesLimitConfiguration()

      /**
       * The sort configuration of the small multiples field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-smallmultiplessort)
       */
      override fun smallMultiplesSort(): Any? = unwrap(this).getSmallMultiplesSort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          BarChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartSortConfigurationProperty):
          BarChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BarChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BarChartSortConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FreeFormSectionLayoutConfigurationProperty {
    /**
     * The elements that are included in the free-form layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformsectionlayoutconfiguration.html#cfn-quicksight-analysis-freeformsectionlayoutconfiguration-elements)
     */
    public fun elements(): Any

    /**
     * A builder for [FreeFormSectionLayoutConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param elements The elements that are included in the free-form layout. 
       */
      public fun elements(elements: IResolvable)

      /**
       * @param elements The elements that are included in the free-form layout. 
       */
      public fun elements(elements: List<Any>)

      /**
       * @param elements The elements that are included in the free-form layout. 
       */
      public fun elements(vararg elements: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormSectionLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormSectionLayoutConfigurationProperty.builder()

      /**
       * @param elements The elements that are included in the free-form layout. 
       */
      override fun elements(elements: IResolvable) {
        cdkBuilder.elements(elements.let(IResolvable::unwrap))
      }

      /**
       * @param elements The elements that are included in the free-form layout. 
       */
      override fun elements(elements: List<Any>) {
        cdkBuilder.elements(elements)
      }

      /**
       * @param elements The elements that are included in the free-form layout. 
       */
      override fun elements(vararg elements: Any): Unit = elements(elements.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormSectionLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormSectionLayoutConfigurationProperty,
    ) : FreeFormSectionLayoutConfigurationProperty {
      /**
       * The elements that are included in the free-form layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformsectionlayoutconfiguration.html#cfn-quicksight-analysis-freeformsectionlayoutconfiguration-elements)
       */
      override fun elements(): Any = unwrap(this).getElements()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FreeFormSectionLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormSectionLayoutConfigurationProperty):
          FreeFormSectionLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormSectionLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormSectionLayoutConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface WaterfallChartAggregatedFieldWellsProperty {
    /**
     * The breakdown field wells of a waterfall visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartaggregatedfieldwells.html#cfn-quicksight-analysis-waterfallchartaggregatedfieldwells-breakdowns)
     */
    public fun breakdowns(): Any? = unwrap(this).getBreakdowns()

    /**
     * The category field wells of a waterfall visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartaggregatedfieldwells.html#cfn-quicksight-analysis-waterfallchartaggregatedfieldwells-categories)
     */
    public fun categories(): Any? = unwrap(this).getCategories()

    /**
     * The value field wells of a waterfall visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartaggregatedfieldwells.html#cfn-quicksight-analysis-waterfallchartaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [WaterfallChartAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param breakdowns The breakdown field wells of a waterfall visual.
       */
      public fun breakdowns(breakdowns: IResolvable)

      /**
       * @param breakdowns The breakdown field wells of a waterfall visual.
       */
      public fun breakdowns(breakdowns: List<Any>)

      /**
       * @param breakdowns The breakdown field wells of a waterfall visual.
       */
      public fun breakdowns(vararg breakdowns: Any)

      /**
       * @param categories The category field wells of a waterfall visual.
       */
      public fun categories(categories: IResolvable)

      /**
       * @param categories The category field wells of a waterfall visual.
       */
      public fun categories(categories: List<Any>)

      /**
       * @param categories The category field wells of a waterfall visual.
       */
      public fun categories(vararg categories: Any)

      /**
       * @param values The value field wells of a waterfall visual.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The value field wells of a waterfall visual.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The value field wells of a waterfall visual.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartAggregatedFieldWellsProperty.builder()

      /**
       * @param breakdowns The breakdown field wells of a waterfall visual.
       */
      override fun breakdowns(breakdowns: IResolvable) {
        cdkBuilder.breakdowns(breakdowns.let(IResolvable::unwrap))
      }

      /**
       * @param breakdowns The breakdown field wells of a waterfall visual.
       */
      override fun breakdowns(breakdowns: List<Any>) {
        cdkBuilder.breakdowns(breakdowns)
      }

      /**
       * @param breakdowns The breakdown field wells of a waterfall visual.
       */
      override fun breakdowns(vararg breakdowns: Any): Unit = breakdowns(breakdowns.toList())

      /**
       * @param categories The category field wells of a waterfall visual.
       */
      override fun categories(categories: IResolvable) {
        cdkBuilder.categories(categories.let(IResolvable::unwrap))
      }

      /**
       * @param categories The category field wells of a waterfall visual.
       */
      override fun categories(categories: List<Any>) {
        cdkBuilder.categories(categories)
      }

      /**
       * @param categories The category field wells of a waterfall visual.
       */
      override fun categories(vararg categories: Any): Unit = categories(categories.toList())

      /**
       * @param values The value field wells of a waterfall visual.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The value field wells of a waterfall visual.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The value field wells of a waterfall visual.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartAggregatedFieldWellsProperty,
    ) : WaterfallChartAggregatedFieldWellsProperty {
      /**
       * The breakdown field wells of a waterfall visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartaggregatedfieldwells.html#cfn-quicksight-analysis-waterfallchartaggregatedfieldwells-breakdowns)
       */
      override fun breakdowns(): Any? = unwrap(this).getBreakdowns()

      /**
       * The category field wells of a waterfall visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartaggregatedfieldwells.html#cfn-quicksight-analysis-waterfallchartaggregatedfieldwells-categories)
       */
      override fun categories(): Any? = unwrap(this).getCategories()

      /**
       * The value field wells of a waterfall visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartaggregatedfieldwells.html#cfn-quicksight-analysis-waterfallchartaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          WaterfallChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartAggregatedFieldWellsProperty):
          WaterfallChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WaterfallChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WaterfallChartAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DecimalParameterDeclarationProperty {
    /**
     * The default values of a parameter.
     *
     * If the parameter is a single-value parameter, a maximum of one default value can be provided.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-defaultvalues)
     */
    public fun defaultValues(): Any? = unwrap(this).getDefaultValues()

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-mappeddatasetparameters)
     */
    public fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

    /**
     * The name of the parameter that is being declared.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-name)
     */
    public fun name(): String

    /**
     * The value type determines whether the parameter is a single-value or multi-value parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-parametervaluetype)
     */
    public fun parameterValueType(): String

    /**
     * The configuration that defines the default value of a `Decimal` parameter when a value has
     * not been set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-valuewhenunset)
     */
    public fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()

    /**
     * A builder for [DecimalParameterDeclarationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      public fun defaultValues(defaultValues: IResolvable)

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      public fun defaultValues(defaultValues: DecimalDefaultValuesProperty)

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6d3ad4fedd3da08e2e2a9a5d9d14e494c3f0bf7bfdd58642e65f2d32aa65c31c")
      public fun defaultValues(defaultValues: DecimalDefaultValuesProperty.Builder.() -> Unit)

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      public fun mappedDataSetParameters(mappedDataSetParameters: IResolvable)

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      public fun mappedDataSetParameters(mappedDataSetParameters: List<Any>)

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      public fun mappedDataSetParameters(vararg mappedDataSetParameters: Any)

      /**
       * @param name The name of the parameter that is being declared. 
       */
      public fun name(name: String)

      /**
       * @param parameterValueType The value type determines whether the parameter is a single-value
       * or multi-value parameter. 
       */
      public fun parameterValueType(parameterValueType: String)

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `Decimal`
       * parameter when a value has not been set.
       */
      public fun valueWhenUnset(valueWhenUnset: IResolvable)

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `Decimal`
       * parameter when a value has not been set.
       */
      public fun valueWhenUnset(valueWhenUnset: DecimalValueWhenUnsetConfigurationProperty)

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `Decimal`
       * parameter when a value has not been set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("af15f0190ea1ef3ebe6332c58b67ee03b15b3b19449ad0538ea2ae242937439f")
      public
          fun valueWhenUnset(valueWhenUnset: DecimalValueWhenUnsetConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalParameterDeclarationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalParameterDeclarationProperty.builder()

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      override fun defaultValues(defaultValues: IResolvable) {
        cdkBuilder.defaultValues(defaultValues.let(IResolvable::unwrap))
      }

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      override fun defaultValues(defaultValues: DecimalDefaultValuesProperty) {
        cdkBuilder.defaultValues(defaultValues.let(DecimalDefaultValuesProperty::unwrap))
      }

      /**
       * @param defaultValues The default values of a parameter.
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6d3ad4fedd3da08e2e2a9a5d9d14e494c3f0bf7bfdd58642e65f2d32aa65c31c")
      override fun defaultValues(defaultValues: DecimalDefaultValuesProperty.Builder.() -> Unit):
          Unit = defaultValues(DecimalDefaultValuesProperty(defaultValues))

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      override fun mappedDataSetParameters(mappedDataSetParameters: IResolvable) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters.let(IResolvable::unwrap))
      }

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      override fun mappedDataSetParameters(mappedDataSetParameters: List<Any>) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters)
      }

      /**
       * @param mappedDataSetParameters the value to be set.
       */
      override fun mappedDataSetParameters(vararg mappedDataSetParameters: Any): Unit =
          mappedDataSetParameters(mappedDataSetParameters.toList())

      /**
       * @param name The name of the parameter that is being declared. 
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param parameterValueType The value type determines whether the parameter is a single-value
       * or multi-value parameter. 
       */
      override fun parameterValueType(parameterValueType: String) {
        cdkBuilder.parameterValueType(parameterValueType)
      }

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `Decimal`
       * parameter when a value has not been set.
       */
      override fun valueWhenUnset(valueWhenUnset: IResolvable) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(IResolvable::unwrap))
      }

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `Decimal`
       * parameter when a value has not been set.
       */
      override fun valueWhenUnset(valueWhenUnset: DecimalValueWhenUnsetConfigurationProperty) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(DecimalValueWhenUnsetConfigurationProperty::unwrap))
      }

      /**
       * @param valueWhenUnset The configuration that defines the default value of a `Decimal`
       * parameter when a value has not been set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("af15f0190ea1ef3ebe6332c58b67ee03b15b3b19449ad0538ea2ae242937439f")
      override
          fun valueWhenUnset(valueWhenUnset: DecimalValueWhenUnsetConfigurationProperty.Builder.() -> Unit):
          Unit = valueWhenUnset(DecimalValueWhenUnsetConfigurationProperty(valueWhenUnset))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalParameterDeclarationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalParameterDeclarationProperty,
    ) : DecimalParameterDeclarationProperty {
      /**
       * The default values of a parameter.
       *
       * If the parameter is a single-value parameter, a maximum of one default value can be
       * provided.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-defaultvalues)
       */
      override fun defaultValues(): Any? = unwrap(this).getDefaultValues()

      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-mappeddatasetparameters)
       */
      override fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

      /**
       * The name of the parameter that is being declared.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-name)
       */
      override fun name(): String = unwrap(this).getName()

      /**
       * The value type determines whether the parameter is a single-value or multi-value parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-parametervaluetype)
       */
      override fun parameterValueType(): String = unwrap(this).getParameterValueType()

      /**
       * The configuration that defines the default value of a `Decimal` parameter when a value has
       * not been set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-valuewhenunset)
       */
      override fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DecimalParameterDeclarationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalParameterDeclarationProperty):
          DecimalParameterDeclarationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DecimalParameterDeclarationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalParameterDeclarationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PeriodOverPeriodComputationProperty {
    /**
     * The ID for a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html#cfn-quicksight-analysis-periodoverperiodcomputation-computationid)
     */
    public fun computationId(): String

    /**
     * The name of a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html#cfn-quicksight-analysis-periodoverperiodcomputation-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * The time field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html#cfn-quicksight-analysis-periodoverperiodcomputation-time)
     */
    public fun time(): Any? = unwrap(this).getTime()

    /**
     * The value field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html#cfn-quicksight-analysis-periodoverperiodcomputation-value)
     */
    public fun `value`(): Any? = unwrap(this).getValue()

    /**
     * A builder for [PeriodOverPeriodComputationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param computationId The ID for a computation. 
       */
      public fun computationId(computationId: String)

      /**
       * @param name The name of a computation.
       */
      public fun name(name: String)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: IResolvable)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: DimensionFieldProperty)

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d44e4b110129409280309a500e84dc3deea6fbe042e58a29d6198d0637f70963")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: IResolvable)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: MeasureFieldProperty)

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9582c48cd41cd69d9f5b4ed695c0d8d8ac18bfff7e8857b3440a65e76195263a")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PeriodOverPeriodComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PeriodOverPeriodComputationProperty.builder()

      /**
       * @param computationId The ID for a computation. 
       */
      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      /**
       * @param name The name of a computation.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d44e4b110129409280309a500e84dc3deea6fbe042e58a29d6198d0637f70963")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9582c48cd41cd69d9f5b4ed695c0d8d8ac18bfff7e8857b3440a65e76195263a")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PeriodOverPeriodComputationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PeriodOverPeriodComputationProperty,
    ) : PeriodOverPeriodComputationProperty {
      /**
       * The ID for a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html#cfn-quicksight-analysis-periodoverperiodcomputation-computationid)
       */
      override fun computationId(): String = unwrap(this).getComputationId()

      /**
       * The name of a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html#cfn-quicksight-analysis-periodoverperiodcomputation-name)
       */
      override fun name(): String? = unwrap(this).getName()

      /**
       * The time field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html#cfn-quicksight-analysis-periodoverperiodcomputation-time)
       */
      override fun time(): Any? = unwrap(this).getTime()

      /**
       * The value field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html#cfn-quicksight-analysis-periodoverperiodcomputation-value)
       */
      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PeriodOverPeriodComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PeriodOverPeriodComputationProperty):
          PeriodOverPeriodComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PeriodOverPeriodComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PeriodOverPeriodComputationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DecimalValueWhenUnsetConfigurationProperty {
    /**
     * A custom value that's used when the value of a parameter isn't set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalvaluewhenunsetconfiguration.html#cfn-quicksight-analysis-decimalvaluewhenunsetconfiguration-customvalue)
     */
    public fun customValue(): Number? = unwrap(this).getCustomValue()

    /**
     * The built-in options for default values. The value can be one of the following:.
     *
     * * `RECOMMENDED` : The recommended value.
     * * `NULL` : The `NULL` value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalvaluewhenunsetconfiguration.html#cfn-quicksight-analysis-decimalvaluewhenunsetconfiguration-valuewhenunsetoption)
     */
    public fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()

    /**
     * A builder for [DecimalValueWhenUnsetConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customValue A custom value that's used when the value of a parameter isn't set.
       */
      public fun customValue(customValue: Number)

      /**
       * @param valueWhenUnsetOption The built-in options for default values. The value can be one
       * of the following:.
       * * `RECOMMENDED` : The recommended value.
       * * `NULL` : The `NULL` value.
       */
      public fun valueWhenUnsetOption(valueWhenUnsetOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalValueWhenUnsetConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalValueWhenUnsetConfigurationProperty.builder()

      /**
       * @param customValue A custom value that's used when the value of a parameter isn't set.
       */
      override fun customValue(customValue: Number) {
        cdkBuilder.customValue(customValue)
      }

      /**
       * @param valueWhenUnsetOption The built-in options for default values. The value can be one
       * of the following:.
       * * `RECOMMENDED` : The recommended value.
       * * `NULL` : The `NULL` value.
       */
      override fun valueWhenUnsetOption(valueWhenUnsetOption: String) {
        cdkBuilder.valueWhenUnsetOption(valueWhenUnsetOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalValueWhenUnsetConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalValueWhenUnsetConfigurationProperty,
    ) : DecimalValueWhenUnsetConfigurationProperty {
      /**
       * A custom value that's used when the value of a parameter isn't set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalvaluewhenunsetconfiguration.html#cfn-quicksight-analysis-decimalvaluewhenunsetconfiguration-customvalue)
       */
      override fun customValue(): Number? = unwrap(this).getCustomValue()

      /**
       * The built-in options for default values. The value can be one of the following:.
       *
       * * `RECOMMENDED` : The recommended value.
       * * `NULL` : The `NULL` value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalvaluewhenunsetconfiguration.html#cfn-quicksight-analysis-decimalvaluewhenunsetconfiguration-valuewhenunsetoption)
       */
      override fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DecimalValueWhenUnsetConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalValueWhenUnsetConfigurationProperty):
          DecimalValueWhenUnsetConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DecimalValueWhenUnsetConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalValueWhenUnsetConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DataColorProperty {
    /**
     * The color that is applied to the data value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datacolor.html#cfn-quicksight-analysis-datacolor-color)
     */
    public fun color(): String? = unwrap(this).getColor()

    /**
     * The data value that the color is applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datacolor.html#cfn-quicksight-analysis-datacolor-datavalue)
     */
    public fun dataValue(): Number? = unwrap(this).getDataValue()

    /**
     * A builder for [DataColorProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color The color that is applied to the data value.
       */
      public fun color(color: String)

      /**
       * @param dataValue The data value that the color is applied to.
       */
      public fun dataValue(dataValue: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataColorProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataColorProperty.builder()

      /**
       * @param color The color that is applied to the data value.
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      /**
       * @param dataValue The data value that the color is applied to.
       */
      override fun dataValue(dataValue: Number) {
        cdkBuilder.dataValue(dataValue)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.DataColorProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataColorProperty,
    ) : DataColorProperty {
      /**
       * The color that is applied to the data value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datacolor.html#cfn-quicksight-analysis-datacolor-color)
       */
      override fun color(): String? = unwrap(this).getColor()

      /**
       * The data value that the color is applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datacolor.html#cfn-quicksight-analysis-datacolor-datavalue)
       */
      override fun dataValue(): Number? = unwrap(this).getDataValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DataColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DataColorProperty):
          DataColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataColorProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataColorProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface SankeyDiagramFieldWellsProperty {
    /**
     * The field well configuration of a sankey diagram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramfieldwells.html#cfn-quicksight-analysis-sankeydiagramfieldwells-sankeydiagramaggregatedfieldwells)
     */
    public fun sankeyDiagramAggregatedFieldWells(): Any? =
        unwrap(this).getSankeyDiagramAggregatedFieldWells()

    /**
     * A builder for [SankeyDiagramFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param sankeyDiagramAggregatedFieldWells The field well configuration of a sankey diagram.
       */
      public fun sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells: IResolvable)

      /**
       * @param sankeyDiagramAggregatedFieldWells The field well configuration of a sankey diagram.
       */
      public
          fun sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells: SankeyDiagramAggregatedFieldWellsProperty)

      /**
       * @param sankeyDiagramAggregatedFieldWells The field well configuration of a sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bfc336d8a625fb7373bac0c57b5485efea78c3db49e685af62535e03a812a1d8")
      public
          fun sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells: SankeyDiagramAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramFieldWellsProperty.builder()

      /**
       * @param sankeyDiagramAggregatedFieldWells The field well configuration of a sankey diagram.
       */
      override
          fun sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells: IResolvable) {
        cdkBuilder.sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param sankeyDiagramAggregatedFieldWells The field well configuration of a sankey diagram.
       */
      override
          fun sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells: SankeyDiagramAggregatedFieldWellsProperty) {
        cdkBuilder.sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells.let(SankeyDiagramAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param sankeyDiagramAggregatedFieldWells The field well configuration of a sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bfc336d8a625fb7373bac0c57b5485efea78c3db49e685af62535e03a812a1d8")
      override
          fun sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells: SankeyDiagramAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          sankeyDiagramAggregatedFieldWells(SankeyDiagramAggregatedFieldWellsProperty(sankeyDiagramAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramFieldWellsProperty,
    ) : SankeyDiagramFieldWellsProperty {
      /**
       * The field well configuration of a sankey diagram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramfieldwells.html#cfn-quicksight-analysis-sankeydiagramfieldwells-sankeydiagramaggregatedfieldwells)
       */
      override fun sankeyDiagramAggregatedFieldWells(): Any? =
          unwrap(this).getSankeyDiagramAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SankeyDiagramFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramFieldWellsProperty):
          SankeyDiagramFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SankeyDiagramFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GaugeChartVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The conditional formatting of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-conditionalformatting)
     */
    public fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [GaugeChartVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration of a `GaugeChartVisual` .
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration of a `GaugeChartVisual` .
       */
      public fun chartConfiguration(chartConfiguration: GaugeChartConfigurationProperty)

      /**
       * @param chartConfiguration The configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b3281df53f0bc02e8c32b4934cf505974367770d890723a33cae520083e552bd")
      public
          fun chartConfiguration(chartConfiguration: GaugeChartConfigurationProperty.Builder.() -> Unit)

      /**
       * @param conditionalFormatting The conditional formatting of a `GaugeChartVisual` .
       */
      public fun conditionalFormatting(conditionalFormatting: IResolvable)

      /**
       * @param conditionalFormatting The conditional formatting of a `GaugeChartVisual` .
       */
      public
          fun conditionalFormatting(conditionalFormatting: GaugeChartConditionalFormattingProperty)

      /**
       * @param conditionalFormatting The conditional formatting of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ccbbf6e4c6e6273e31d8f138aec1ec99e7c1870ebe5496c40b455da6f42311f3")
      public
          fun conditionalFormatting(conditionalFormatting: GaugeChartConditionalFormattingProperty.Builder.() -> Unit)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eb355c3973fa62dffa95a8cdec04e30aced350829f2d7ce68404e96b20b54971")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cd9d19642ae8602bca6d1b473121483b3262121c162107da68e00b89892e4251")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration of a `GaugeChartVisual` .
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a `GaugeChartVisual` .
       */
      override fun chartConfiguration(chartConfiguration: GaugeChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(GaugeChartConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b3281df53f0bc02e8c32b4934cf505974367770d890723a33cae520083e552bd")
      override
          fun chartConfiguration(chartConfiguration: GaugeChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(GaugeChartConfigurationProperty(chartConfiguration))

      /**
       * @param conditionalFormatting The conditional formatting of a `GaugeChartVisual` .
       */
      override fun conditionalFormatting(conditionalFormatting: IResolvable) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(IResolvable::unwrap))
      }

      /**
       * @param conditionalFormatting The conditional formatting of a `GaugeChartVisual` .
       */
      override
          fun conditionalFormatting(conditionalFormatting: GaugeChartConditionalFormattingProperty) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(GaugeChartConditionalFormattingProperty::unwrap))
      }

      /**
       * @param conditionalFormatting The conditional formatting of a `GaugeChartVisual` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ccbbf6e4c6e6273e31d8f138aec1ec99e7c1870ebe5496c40b455da6f42311f3")
      override
          fun conditionalFormatting(conditionalFormatting: GaugeChartConditionalFormattingProperty.Builder.() -> Unit):
          Unit =
          conditionalFormatting(GaugeChartConditionalFormattingProperty(conditionalFormatting))

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eb355c3973fa62dffa95a8cdec04e30aced350829f2d7ce68404e96b20b54971")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cd9d19642ae8602bca6d1b473121483b3262121c162107da68e00b89892e4251")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartVisualProperty,
    ) : GaugeChartVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The conditional formatting of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-conditionalformatting)
       */
      override fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GaugeChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartVisualProperty):
          GaugeChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartVisualProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface TableCellStyleProperty {
    /**
     * The background color for the table cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-backgroundcolor)
     */
    public fun backgroundColor(): String? = unwrap(this).getBackgroundColor()

    /**
     * The borders for the table cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-border)
     */
    public fun border(): Any? = unwrap(this).getBorder()

    /**
     * The font configuration of the table cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-fontconfiguration)
     */
    public fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

    /**
     * The height color for the table cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-height)
     */
    public fun height(): Number? = unwrap(this).getHeight()

    /**
     * The horizontal text alignment (left, center, right, auto) for the table cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-horizontaltextalignment)
     */
    public fun horizontalTextAlignment(): String? = unwrap(this).getHorizontalTextAlignment()

    /**
     * The text wrap (none, wrap) for the table cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-textwrap)
     */
    public fun textWrap(): String? = unwrap(this).getTextWrap()

    /**
     * The vertical text alignment (top, middle, bottom) for the table cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-verticaltextalignment)
     */
    public fun verticalTextAlignment(): String? = unwrap(this).getVerticalTextAlignment()

    /**
     * The visibility of the table cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [TableCellStyleProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param backgroundColor The background color for the table cells.
       */
      public fun backgroundColor(backgroundColor: String)

      /**
       * @param border The borders for the table cells.
       */
      public fun border(border: IResolvable)

      /**
       * @param border The borders for the table cells.
       */
      public fun border(border: GlobalTableBorderOptionsProperty)

      /**
       * @param border The borders for the table cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7f379bc8cd610e3dfa98dc11d253b0bd46d343453d30bad77e6f3db3ccb87e68")
      public fun border(border: GlobalTableBorderOptionsProperty.Builder.() -> Unit)

      /**
       * @param fontConfiguration The font configuration of the table cells.
       */
      public fun fontConfiguration(fontConfiguration: IResolvable)

      /**
       * @param fontConfiguration The font configuration of the table cells.
       */
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty)

      /**
       * @param fontConfiguration The font configuration of the table cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4053a05e469b98bfac348ae7cd96ea372556df6d3ae76e3dce3d0aec09c154f3")
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      /**
       * @param height The height color for the table cells.
       */
      public fun height(height: Number)

      /**
       * @param horizontalTextAlignment The horizontal text alignment (left, center, right, auto)
       * for the table cells.
       */
      public fun horizontalTextAlignment(horizontalTextAlignment: String)

      /**
       * @param textWrap The text wrap (none, wrap) for the table cells.
       */
      public fun textWrap(textWrap: String)

      /**
       * @param verticalTextAlignment The vertical text alignment (top, middle, bottom) for the
       * table cells.
       */
      public fun verticalTextAlignment(verticalTextAlignment: String)

      /**
       * @param visibility The visibility of the table cells.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellStyleProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellStyleProperty.builder()

      /**
       * @param backgroundColor The background color for the table cells.
       */
      override fun backgroundColor(backgroundColor: String) {
        cdkBuilder.backgroundColor(backgroundColor)
      }

      /**
       * @param border The borders for the table cells.
       */
      override fun border(border: IResolvable) {
        cdkBuilder.border(border.let(IResolvable::unwrap))
      }

      /**
       * @param border The borders for the table cells.
       */
      override fun border(border: GlobalTableBorderOptionsProperty) {
        cdkBuilder.border(border.let(GlobalTableBorderOptionsProperty::unwrap))
      }

      /**
       * @param border The borders for the table cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7f379bc8cd610e3dfa98dc11d253b0bd46d343453d30bad77e6f3db3ccb87e68")
      override fun border(border: GlobalTableBorderOptionsProperty.Builder.() -> Unit): Unit =
          border(GlobalTableBorderOptionsProperty(border))

      /**
       * @param fontConfiguration The font configuration of the table cells.
       */
      override fun fontConfiguration(fontConfiguration: IResolvable) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param fontConfiguration The font configuration of the table cells.
       */
      override fun fontConfiguration(fontConfiguration: FontConfigurationProperty) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      /**
       * @param fontConfiguration The font configuration of the table cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4053a05e469b98bfac348ae7cd96ea372556df6d3ae76e3dce3d0aec09c154f3")
      override
          fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = fontConfiguration(FontConfigurationProperty(fontConfiguration))

      /**
       * @param height The height color for the table cells.
       */
      override fun height(height: Number) {
        cdkBuilder.height(height)
      }

      /**
       * @param horizontalTextAlignment The horizontal text alignment (left, center, right, auto)
       * for the table cells.
       */
      override fun horizontalTextAlignment(horizontalTextAlignment: String) {
        cdkBuilder.horizontalTextAlignment(horizontalTextAlignment)
      }

      /**
       * @param textWrap The text wrap (none, wrap) for the table cells.
       */
      override fun textWrap(textWrap: String) {
        cdkBuilder.textWrap(textWrap)
      }

      /**
       * @param verticalTextAlignment The vertical text alignment (top, middle, bottom) for the
       * table cells.
       */
      override fun verticalTextAlignment(verticalTextAlignment: String) {
        cdkBuilder.verticalTextAlignment(verticalTextAlignment)
      }

      /**
       * @param visibility The visibility of the table cells.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellStyleProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellStyleProperty,
    ) : TableCellStyleProperty {
      /**
       * The background color for the table cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-backgroundcolor)
       */
      override fun backgroundColor(): String? = unwrap(this).getBackgroundColor()

      /**
       * The borders for the table cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-border)
       */
      override fun border(): Any? = unwrap(this).getBorder()

      /**
       * The font configuration of the table cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-fontconfiguration)
       */
      override fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

      /**
       * The height color for the table cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-height)
       */
      override fun height(): Number? = unwrap(this).getHeight()

      /**
       * The horizontal text alignment (left, center, right, auto) for the table cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-horizontaltextalignment)
       */
      override fun horizontalTextAlignment(): String? = unwrap(this).getHorizontalTextAlignment()

      /**
       * The text wrap (none, wrap) for the table cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-textwrap)
       */
      override fun textWrap(): String? = unwrap(this).getTextWrap()

      /**
       * The vertical text alignment (top, middle, bottom) for the table cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-verticaltextalignment)
       */
      override fun verticalTextAlignment(): String? = unwrap(this).getVerticalTextAlignment()

      /**
       * The visibility of the table cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TableCellStyleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellStyleProperty):
          TableCellStyleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableCellStyleProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableCellStyleProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface ResourcePermissionProperty {
    /**
     * The IAM action to grant or revoke permissions on.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-resourcepermission.html#cfn-quicksight-analysis-resourcepermission-actions)
     */
    public fun actions(): List<String>

    /**
     * The Amazon Resource Name (ARN) of the principal. This can be one of the following:.
     *
     * * The ARN of an Amazon QuickSight user or group associated with a data source or dataset.
     * (This is common.)
     * * The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis,
     * dashboard, template, or theme. (This is common.)
     * * The ARN of an AWS account root: This is an IAM ARN rather than a Amazon QuickSight ARN. Use
     * this option only to share resources (templates) across AWS accounts . (This is less common.)
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-resourcepermission.html#cfn-quicksight-analysis-resourcepermission-principal)
     */
    public fun principal(): String

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-resourcepermission.html#cfn-quicksight-analysis-resourcepermission-resource)
     */
    public fun resource(): String? = unwrap(this).getResource()

    /**
     * A builder for [ResourcePermissionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The IAM action to grant or revoke permissions on. 
       */
      public fun actions(actions: List<String>)

      /**
       * @param actions The IAM action to grant or revoke permissions on. 
       */
      public fun actions(vararg actions: String)

      /**
       * @param principal The Amazon Resource Name (ARN) of the principal. This can be one of the
       * following:. 
       * * The ARN of an Amazon QuickSight user or group associated with a data source or dataset.
       * (This is common.)
       * * The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis,
       * dashboard, template, or theme. (This is common.)
       * * The ARN of an AWS account root: This is an IAM ARN rather than a Amazon QuickSight ARN.
       * Use this option only to share resources (templates) across AWS accounts . (This is less
       * common.)
       */
      public fun principal(principal: String)

      /**
       * @param resource the value to be set.
       */
      public fun resource(resource: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ResourcePermissionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ResourcePermissionProperty.builder()

      /**
       * @param actions The IAM action to grant or revoke permissions on. 
       */
      override fun actions(actions: List<String>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The IAM action to grant or revoke permissions on. 
       */
      override fun actions(vararg actions: String): Unit = actions(actions.toList())

      /**
       * @param principal The Amazon Resource Name (ARN) of the principal. This can be one of the
       * following:. 
       * * The ARN of an Amazon QuickSight user or group associated with a data source or dataset.
       * (This is common.)
       * * The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis,
       * dashboard, template, or theme. (This is common.)
       * * The ARN of an AWS account root: This is an IAM ARN rather than a Amazon QuickSight ARN.
       * Use this option only to share resources (templates) across AWS accounts . (This is less
       * common.)
       */
      override fun principal(principal: String) {
        cdkBuilder.principal(principal)
      }

      /**
       * @param resource the value to be set.
       */
      override fun resource(resource: String) {
        cdkBuilder.resource(resource)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ResourcePermissionProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ResourcePermissionProperty,
    ) : ResourcePermissionProperty {
      /**
       * The IAM action to grant or revoke permissions on.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-resourcepermission.html#cfn-quicksight-analysis-resourcepermission-actions)
       */
      override fun actions(): List<String> = unwrap(this).getActions()

      /**
       * The Amazon Resource Name (ARN) of the principal. This can be one of the following:.
       *
       * * The ARN of an Amazon QuickSight user or group associated with a data source or dataset.
       * (This is common.)
       * * The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis,
       * dashboard, template, or theme. (This is common.)
       * * The ARN of an AWS account root: This is an IAM ARN rather than a Amazon QuickSight ARN.
       * Use this option only to share resources (templates) across AWS accounts . (This is less
       * common.)
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-resourcepermission.html#cfn-quicksight-analysis-resourcepermission-principal)
       */
      override fun principal(): String = unwrap(this).getPrincipal()

      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-resourcepermission.html#cfn-quicksight-analysis-resourcepermission-resource)
       */
      override fun resource(): String? = unwrap(this).getResource()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ResourcePermissionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ResourcePermissionProperty):
          ResourcePermissionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ResourcePermissionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ResourcePermissionProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FreeFormLayoutScreenCanvasSizeOptionsProperty {
    /**
     * The width that the view port will be optimized for when the layout renders.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutscreencanvassizeoptions.html#cfn-quicksight-analysis-freeformlayoutscreencanvassizeoptions-optimizedviewportwidth)
     */
    public fun optimizedViewPortWidth(): String

    /**
     * A builder for [FreeFormLayoutScreenCanvasSizeOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param optimizedViewPortWidth The width that the view port will be optimized for when the
       * layout renders. 
       */
      public fun optimizedViewPortWidth(optimizedViewPortWidth: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutScreenCanvasSizeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()

      /**
       * @param optimizedViewPortWidth The width that the view port will be optimized for when the
       * layout renders. 
       */
      override fun optimizedViewPortWidth(optimizedViewPortWidth: String) {
        cdkBuilder.optimizedViewPortWidth(optimizedViewPortWidth)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutScreenCanvasSizeOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutScreenCanvasSizeOptionsProperty,
    ) : FreeFormLayoutScreenCanvasSizeOptionsProperty {
      /**
       * The width that the view port will be optimized for when the layout renders.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutscreencanvassizeoptions.html#cfn-quicksight-analysis-freeformlayoutscreencanvassizeoptions-optimizedviewportwidth)
       */
      override fun optimizedViewPortWidth(): String = unwrap(this).getOptimizedViewPortWidth()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FreeFormLayoutScreenCanvasSizeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutScreenCanvasSizeOptionsProperty):
          FreeFormLayoutScreenCanvasSizeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormLayoutScreenCanvasSizeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutScreenCanvasSizeOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableAggregatedFieldWellsProperty {
    /**
     * The group by field well for a pivot table.
     *
     * Values are grouped by group by fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableaggregatedfieldwells.html#cfn-quicksight-analysis-tableaggregatedfieldwells-groupby)
     */
    public fun groupBy(): Any? = unwrap(this).getGroupBy()

    /**
     * The values field well for a pivot table.
     *
     * Values are aggregated based on group by fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableaggregatedfieldwells.html#cfn-quicksight-analysis-tableaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [TableAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param groupBy The group by field well for a pivot table.
       * Values are grouped by group by fields.
       */
      public fun groupBy(groupBy: IResolvable)

      /**
       * @param groupBy The group by field well for a pivot table.
       * Values are grouped by group by fields.
       */
      public fun groupBy(groupBy: List<Any>)

      /**
       * @param groupBy The group by field well for a pivot table.
       * Values are grouped by group by fields.
       */
      public fun groupBy(vararg groupBy: Any)

      /**
       * @param values The values field well for a pivot table.
       * Values are aggregated based on group by fields.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The values field well for a pivot table.
       * Values are aggregated based on group by fields.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The values field well for a pivot table.
       * Values are aggregated based on group by fields.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableAggregatedFieldWellsProperty.builder()

      /**
       * @param groupBy The group by field well for a pivot table.
       * Values are grouped by group by fields.
       */
      override fun groupBy(groupBy: IResolvable) {
        cdkBuilder.groupBy(groupBy.let(IResolvable::unwrap))
      }

      /**
       * @param groupBy The group by field well for a pivot table.
       * Values are grouped by group by fields.
       */
      override fun groupBy(groupBy: List<Any>) {
        cdkBuilder.groupBy(groupBy)
      }

      /**
       * @param groupBy The group by field well for a pivot table.
       * Values are grouped by group by fields.
       */
      override fun groupBy(vararg groupBy: Any): Unit = groupBy(groupBy.toList())

      /**
       * @param values The values field well for a pivot table.
       * Values are aggregated based on group by fields.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The values field well for a pivot table.
       * Values are aggregated based on group by fields.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The values field well for a pivot table.
       * Values are aggregated based on group by fields.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableAggregatedFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableAggregatedFieldWellsProperty,
    ) : TableAggregatedFieldWellsProperty {
      /**
       * The group by field well for a pivot table.
       *
       * Values are grouped by group by fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableaggregatedfieldwells.html#cfn-quicksight-analysis-tableaggregatedfieldwells-groupby)
       */
      override fun groupBy(): Any? = unwrap(this).getGroupBy()

      /**
       * The values field well for a pivot table.
       *
       * Values are aggregated based on group by fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableaggregatedfieldwells.html#cfn-quicksight-analysis-tableaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableAggregatedFieldWellsProperty):
          TableAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableAggregatedFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GeospatialMapConfigurationProperty {
    /**
     * The field wells of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The legend display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-legend)
     */
    public fun legend(): Any? = unwrap(this).getLegend()

    /**
     * The map style options of the geospatial map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-mapstyleoptions)
     */
    public fun mapStyleOptions(): Any? = unwrap(this).getMapStyleOptions()

    /**
     * The point style options of the geospatial map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-pointstyleoptions)
     */
    public fun pointStyleOptions(): Any? = unwrap(this).getPointStyleOptions()

    /**
     * The tooltip display setup of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-tooltip)
     */
    public fun tooltip(): Any? = unwrap(this).getTooltip()

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-visualpalette)
     */
    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    /**
     * The window options of the geospatial map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-windowoptions)
     */
    public fun windowOptions(): Any? = unwrap(this).getWindowOptions()

    /**
     * A builder for [GeospatialMapConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field wells of the visual.
       */
      public fun fieldWells(fieldWells: GeospatialMapFieldWellsProperty)

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9f880758caa803e69ceb7ad5710c113e27364ac136b3a85dde935e4d45a5f633")
      public fun fieldWells(fieldWells: GeospatialMapFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: IResolvable)

      /**
       * @param legend The legend display setup of the visual.
       */
      public fun legend(legend: LegendOptionsProperty)

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f562086fabc337f8ac31262e31c492e722537a78b4746f42f98a6dea1e31abb9")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      /**
       * @param mapStyleOptions The map style options of the geospatial map.
       */
      public fun mapStyleOptions(mapStyleOptions: IResolvable)

      /**
       * @param mapStyleOptions The map style options of the geospatial map.
       */
      public fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty)

      /**
       * @param mapStyleOptions The map style options of the geospatial map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ab7f9134ef416a8c9c324aad0c52ca4b5d45d48f765970519936e6c40b269479")
      public
          fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty.Builder.() -> Unit)

      /**
       * @param pointStyleOptions The point style options of the geospatial map.
       */
      public fun pointStyleOptions(pointStyleOptions: IResolvable)

      /**
       * @param pointStyleOptions The point style options of the geospatial map.
       */
      public fun pointStyleOptions(pointStyleOptions: GeospatialPointStyleOptionsProperty)

      /**
       * @param pointStyleOptions The point style options of the geospatial map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9ae4467496e16c2db739030ca10e5f3c089b4290bdf8c2103a24cf4ef2b3b285")
      public
          fun pointStyleOptions(pointStyleOptions: GeospatialPointStyleOptionsProperty.Builder.() -> Unit)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: IResolvable)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      public fun tooltip(tooltip: TooltipOptionsProperty)

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("70ecaf68ac4069b01d39b6bbc6814e0feafbb4f1d83fd37ad4a4ab50f88eb1d1")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualPalette the value to be set.
       */
      public fun visualPalette(visualPalette: IResolvable)

      /**
       * @param visualPalette the value to be set.
       */
      public fun visualPalette(visualPalette: VisualPaletteProperty)

      /**
       * @param visualPalette the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be2756f2222799c79c578d6dc1a3b00e8dcd17dc2497a7fcd706ca5fd7574d42")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)

      /**
       * @param windowOptions The window options of the geospatial map.
       */
      public fun windowOptions(windowOptions: IResolvable)

      /**
       * @param windowOptions The window options of the geospatial map.
       */
      public fun windowOptions(windowOptions: GeospatialWindowOptionsProperty)

      /**
       * @param windowOptions The window options of the geospatial map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8d35a81c3eb600aad2b341283c16af777fe47fcd3846f12845e6517e72a12408")
      public fun windowOptions(windowOptions: GeospatialWindowOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapConfigurationProperty.builder()

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      override fun fieldWells(fieldWells: GeospatialMapFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(GeospatialMapFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field wells of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9f880758caa803e69ceb7ad5710c113e27364ac136b3a85dde935e4d45a5f633")
      override fun fieldWells(fieldWells: GeospatialMapFieldWellsProperty.Builder.() -> Unit): Unit
          = fieldWells(GeospatialMapFieldWellsProperty(fieldWells))

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      /**
       * @param legend The legend display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f562086fabc337f8ac31262e31c492e722537a78b4746f42f98a6dea1e31abb9")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      /**
       * @param mapStyleOptions The map style options of the geospatial map.
       */
      override fun mapStyleOptions(mapStyleOptions: IResolvable) {
        cdkBuilder.mapStyleOptions(mapStyleOptions.let(IResolvable::unwrap))
      }

      /**
       * @param mapStyleOptions The map style options of the geospatial map.
       */
      override fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty) {
        cdkBuilder.mapStyleOptions(mapStyleOptions.let(GeospatialMapStyleOptionsProperty::unwrap))
      }

      /**
       * @param mapStyleOptions The map style options of the geospatial map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ab7f9134ef416a8c9c324aad0c52ca4b5d45d48f765970519936e6c40b269479")
      override
          fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty.Builder.() -> Unit):
          Unit = mapStyleOptions(GeospatialMapStyleOptionsProperty(mapStyleOptions))

      /**
       * @param pointStyleOptions The point style options of the geospatial map.
       */
      override fun pointStyleOptions(pointStyleOptions: IResolvable) {
        cdkBuilder.pointStyleOptions(pointStyleOptions.let(IResolvable::unwrap))
      }

      /**
       * @param pointStyleOptions The point style options of the geospatial map.
       */
      override fun pointStyleOptions(pointStyleOptions: GeospatialPointStyleOptionsProperty) {
        cdkBuilder.pointStyleOptions(pointStyleOptions.let(GeospatialPointStyleOptionsProperty::unwrap))
      }

      /**
       * @param pointStyleOptions The point style options of the geospatial map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9ae4467496e16c2db739030ca10e5f3c089b4290bdf8c2103a24cf4ef2b3b285")
      override
          fun pointStyleOptions(pointStyleOptions: GeospatialPointStyleOptionsProperty.Builder.() -> Unit):
          Unit = pointStyleOptions(GeospatialPointStyleOptionsProperty(pointStyleOptions))

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltip The tooltip display setup of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("70ecaf68ac4069b01d39b6bbc6814e0feafbb4f1d83fd37ad4a4ab50f88eb1d1")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      /**
       * @param visualPalette the value to be set.
       */
      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      /**
       * @param visualPalette the value to be set.
       */
      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      /**
       * @param visualPalette the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be2756f2222799c79c578d6dc1a3b00e8dcd17dc2497a7fcd706ca5fd7574d42")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      /**
       * @param windowOptions The window options of the geospatial map.
       */
      override fun windowOptions(windowOptions: IResolvable) {
        cdkBuilder.windowOptions(windowOptions.let(IResolvable::unwrap))
      }

      /**
       * @param windowOptions The window options of the geospatial map.
       */
      override fun windowOptions(windowOptions: GeospatialWindowOptionsProperty) {
        cdkBuilder.windowOptions(windowOptions.let(GeospatialWindowOptionsProperty::unwrap))
      }

      /**
       * @param windowOptions The window options of the geospatial map.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8d35a81c3eb600aad2b341283c16af777fe47fcd3846f12845e6517e72a12408")
      override fun windowOptions(windowOptions: GeospatialWindowOptionsProperty.Builder.() -> Unit):
          Unit = windowOptions(GeospatialWindowOptionsProperty(windowOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapConfigurationProperty,
    ) : GeospatialMapConfigurationProperty {
      /**
       * The field wells of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The legend display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-legend)
       */
      override fun legend(): Any? = unwrap(this).getLegend()

      /**
       * The map style options of the geospatial map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-mapstyleoptions)
       */
      override fun mapStyleOptions(): Any? = unwrap(this).getMapStyleOptions()

      /**
       * The point style options of the geospatial map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-pointstyleoptions)
       */
      override fun pointStyleOptions(): Any? = unwrap(this).getPointStyleOptions()

      /**
       * The tooltip display setup of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-tooltip)
       */
      override fun tooltip(): Any? = unwrap(this).getTooltip()

      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-visualpalette)
       */
      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()

      /**
       * The window options of the geospatial map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-windowoptions)
       */
      override fun windowOptions(): Any? = unwrap(this).getWindowOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialMapConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapConfigurationProperty):
          GeospatialMapConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialMapConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface AxisLabelOptionsProperty {
    /**
     * The options that indicate which field the label belongs to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabeloptions.html#cfn-quicksight-analysis-axislabeloptions-applyto)
     */
    public fun applyTo(): Any? = unwrap(this).getApplyTo()

    /**
     * The text for the axis label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabeloptions.html#cfn-quicksight-analysis-axislabeloptions-customlabel)
     */
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    /**
     * The font configuration of the axis label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabeloptions.html#cfn-quicksight-analysis-axislabeloptions-fontconfiguration)
     */
    public fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

    /**
     * A builder for [AxisLabelOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param applyTo The options that indicate which field the label belongs to.
       */
      public fun applyTo(applyTo: IResolvable)

      /**
       * @param applyTo The options that indicate which field the label belongs to.
       */
      public fun applyTo(applyTo: AxisLabelReferenceOptionsProperty)

      /**
       * @param applyTo The options that indicate which field the label belongs to.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5ae8acb49828621d7423c22678b658113eefa8632ca074805f04af5bb9fd14b9")
      public fun applyTo(applyTo: AxisLabelReferenceOptionsProperty.Builder.() -> Unit)

      /**
       * @param customLabel The text for the axis label.
       */
      public fun customLabel(customLabel: String)

      /**
       * @param fontConfiguration The font configuration of the axis label.
       */
      public fun fontConfiguration(fontConfiguration: IResolvable)

      /**
       * @param fontConfiguration The font configuration of the axis label.
       */
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty)

      /**
       * @param fontConfiguration The font configuration of the axis label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("23530e5b1430786203b2baf31348bb7f39a60a0e175b65e0a9426254d3c42c09")
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLabelOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLabelOptionsProperty.builder()

      /**
       * @param applyTo The options that indicate which field the label belongs to.
       */
      override fun applyTo(applyTo: IResolvable) {
        cdkBuilder.applyTo(applyTo.let(IResolvable::unwrap))
      }

      /**
       * @param applyTo The options that indicate which field the label belongs to.
       */
      override fun applyTo(applyTo: AxisLabelReferenceOptionsProperty) {
        cdkBuilder.applyTo(applyTo.let(AxisLabelReferenceOptionsProperty::unwrap))
      }

      /**
       * @param applyTo The options that indicate which field the label belongs to.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5ae8acb49828621d7423c22678b658113eefa8632ca074805f04af5bb9fd14b9")
      override fun applyTo(applyTo: AxisLabelReferenceOptionsProperty.Builder.() -> Unit): Unit =
          applyTo(AxisLabelReferenceOptionsProperty(applyTo))

      /**
       * @param customLabel The text for the axis label.
       */
      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      /**
       * @param fontConfiguration The font configuration of the axis label.
       */
      override fun fontConfiguration(fontConfiguration: IResolvable) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param fontConfiguration The font configuration of the axis label.
       */
      override fun fontConfiguration(fontConfiguration: FontConfigurationProperty) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      /**
       * @param fontConfiguration The font configuration of the axis label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("23530e5b1430786203b2baf31348bb7f39a60a0e175b65e0a9426254d3c42c09")
      override
          fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = fontConfiguration(FontConfigurationProperty(fontConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLabelOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLabelOptionsProperty,
    ) : AxisLabelOptionsProperty {
      /**
       * The options that indicate which field the label belongs to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabeloptions.html#cfn-quicksight-analysis-axislabeloptions-applyto)
       */
      override fun applyTo(): Any? = unwrap(this).getApplyTo()

      /**
       * The text for the axis label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabeloptions.html#cfn-quicksight-analysis-axislabeloptions-customlabel)
       */
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      /**
       * The font configuration of the axis label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabeloptions.html#cfn-quicksight-analysis-axislabeloptions-fontconfiguration)
       */
      override fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AxisLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLabelOptionsProperty):
          AxisLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AxisLabelOptionsProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface VisualTitleLabelOptionsProperty {
    /**
     * The short text format of the title label, such as plain text or rich text.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualtitlelabeloptions.html#cfn-quicksight-analysis-visualtitlelabeloptions-formattext)
     */
    public fun formatText(): Any? = unwrap(this).getFormatText()

    /**
     * The visibility of the title label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualtitlelabeloptions.html#cfn-quicksight-analysis-visualtitlelabeloptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [VisualTitleLabelOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param formatText The short text format of the title label, such as plain text or rich
       * text.
       */
      public fun formatText(formatText: IResolvable)

      /**
       * @param formatText The short text format of the title label, such as plain text or rich
       * text.
       */
      public fun formatText(formatText: ShortFormatTextProperty)

      /**
       * @param formatText The short text format of the title label, such as plain text or rich
       * text.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dc359c7a5fc6aaa11edb987707992dd70570bbfe51221b65a7f1cac2d7c0e236")
      public fun formatText(formatText: ShortFormatTextProperty.Builder.() -> Unit)

      /**
       * @param visibility The visibility of the title label.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualTitleLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualTitleLabelOptionsProperty.builder()

      /**
       * @param formatText The short text format of the title label, such as plain text or rich
       * text.
       */
      override fun formatText(formatText: IResolvable) {
        cdkBuilder.formatText(formatText.let(IResolvable::unwrap))
      }

      /**
       * @param formatText The short text format of the title label, such as plain text or rich
       * text.
       */
      override fun formatText(formatText: ShortFormatTextProperty) {
        cdkBuilder.formatText(formatText.let(ShortFormatTextProperty::unwrap))
      }

      /**
       * @param formatText The short text format of the title label, such as plain text or rich
       * text.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dc359c7a5fc6aaa11edb987707992dd70570bbfe51221b65a7f1cac2d7c0e236")
      override fun formatText(formatText: ShortFormatTextProperty.Builder.() -> Unit): Unit =
          formatText(ShortFormatTextProperty(formatText))

      /**
       * @param visibility The visibility of the title label.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualTitleLabelOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualTitleLabelOptionsProperty,
    ) : VisualTitleLabelOptionsProperty {
      /**
       * The short text format of the title label, such as plain text or rich text.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualtitlelabeloptions.html#cfn-quicksight-analysis-visualtitlelabeloptions-formattext)
       */
      override fun formatText(): Any? = unwrap(this).getFormatText()

      /**
       * The visibility of the title label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualtitlelabeloptions.html#cfn-quicksight-analysis-visualtitlelabeloptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): VisualTitleLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualTitleLabelOptionsProperty):
          VisualTitleLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisualTitleLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualTitleLabelOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface LocalNavigationConfigurationProperty {
    /**
     * The sheet that is targeted for navigation in the same analysis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-localnavigationconfiguration.html#cfn-quicksight-analysis-localnavigationconfiguration-targetsheetid)
     */
    public fun targetSheetId(): String

    /**
     * A builder for [LocalNavigationConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param targetSheetId The sheet that is targeted for navigation in the same analysis. 
       */
      public fun targetSheetId(targetSheetId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LocalNavigationConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LocalNavigationConfigurationProperty.builder()

      /**
       * @param targetSheetId The sheet that is targeted for navigation in the same analysis. 
       */
      override fun targetSheetId(targetSheetId: String) {
        cdkBuilder.targetSheetId(targetSheetId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LocalNavigationConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LocalNavigationConfigurationProperty,
    ) : LocalNavigationConfigurationProperty {
      /**
       * The sheet that is targeted for navigation in the same analysis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-localnavigationconfiguration.html#cfn-quicksight-analysis-localnavigationconfiguration-targetsheetid)
       */
      override fun targetSheetId(): String = unwrap(this).getTargetSheetId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          LocalNavigationConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LocalNavigationConfigurationProperty):
          LocalNavigationConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LocalNavigationConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LocalNavigationConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FreeFormLayoutElementBorderStyleProperty {
    /**
     * The border color of a free-form layout element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementborderstyle.html#cfn-quicksight-analysis-freeformlayoutelementborderstyle-color)
     */
    public fun color(): String? = unwrap(this).getColor()

    /**
     * The border visibility of a free-form layout element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementborderstyle.html#cfn-quicksight-analysis-freeformlayoutelementborderstyle-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [FreeFormLayoutElementBorderStyleProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color The border color of a free-form layout element.
       */
      public fun color(color: String)

      /**
       * @param visibility The border visibility of a free-form layout element.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementBorderStyleProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementBorderStyleProperty.builder()

      /**
       * @param color The border color of a free-form layout element.
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      /**
       * @param visibility The border visibility of a free-form layout element.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementBorderStyleProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementBorderStyleProperty,
    ) : FreeFormLayoutElementBorderStyleProperty {
      /**
       * The border color of a free-form layout element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementborderstyle.html#cfn-quicksight-analysis-freeformlayoutelementborderstyle-color)
       */
      override fun color(): String? = unwrap(this).getColor()

      /**
       * The border visibility of a free-form layout element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementborderstyle.html#cfn-quicksight-analysis-freeformlayoutelementborderstyle-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FreeFormLayoutElementBorderStyleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementBorderStyleProperty):
          FreeFormLayoutElementBorderStyleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormLayoutElementBorderStyleProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementBorderStyleProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface HeatMapAggregatedFieldWellsProperty {
    /**
     * The columns field well of a heat map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapaggregatedfieldwells.html#cfn-quicksight-analysis-heatmapaggregatedfieldwells-columns)
     */
    public fun columns(): Any? = unwrap(this).getColumns()

    /**
     * The rows field well of a heat map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapaggregatedfieldwells.html#cfn-quicksight-analysis-heatmapaggregatedfieldwells-rows)
     */
    public fun rows(): Any? = unwrap(this).getRows()

    /**
     * The values field well of a heat map.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapaggregatedfieldwells.html#cfn-quicksight-analysis-heatmapaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [HeatMapAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param columns The columns field well of a heat map.
       */
      public fun columns(columns: IResolvable)

      /**
       * @param columns The columns field well of a heat map.
       */
      public fun columns(columns: List<Any>)

      /**
       * @param columns The columns field well of a heat map.
       */
      public fun columns(vararg columns: Any)

      /**
       * @param rows The rows field well of a heat map.
       */
      public fun rows(rows: IResolvable)

      /**
       * @param rows The rows field well of a heat map.
       */
      public fun rows(rows: List<Any>)

      /**
       * @param rows The rows field well of a heat map.
       */
      public fun rows(vararg rows: Any)

      /**
       * @param values The values field well of a heat map.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The values field well of a heat map.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The values field well of a heat map.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapAggregatedFieldWellsProperty.builder()

      /**
       * @param columns The columns field well of a heat map.
       */
      override fun columns(columns: IResolvable) {
        cdkBuilder.columns(columns.let(IResolvable::unwrap))
      }

      /**
       * @param columns The columns field well of a heat map.
       */
      override fun columns(columns: List<Any>) {
        cdkBuilder.columns(columns)
      }

      /**
       * @param columns The columns field well of a heat map.
       */
      override fun columns(vararg columns: Any): Unit = columns(columns.toList())

      /**
       * @param rows The rows field well of a heat map.
       */
      override fun rows(rows: IResolvable) {
        cdkBuilder.rows(rows.let(IResolvable::unwrap))
      }

      /**
       * @param rows The rows field well of a heat map.
       */
      override fun rows(rows: List<Any>) {
        cdkBuilder.rows(rows)
      }

      /**
       * @param rows The rows field well of a heat map.
       */
      override fun rows(vararg rows: Any): Unit = rows(rows.toList())

      /**
       * @param values The values field well of a heat map.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The values field well of a heat map.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The values field well of a heat map.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapAggregatedFieldWellsProperty,
    ) : HeatMapAggregatedFieldWellsProperty {
      /**
       * The columns field well of a heat map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapaggregatedfieldwells.html#cfn-quicksight-analysis-heatmapaggregatedfieldwells-columns)
       */
      override fun columns(): Any? = unwrap(this).getColumns()

      /**
       * The rows field well of a heat map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapaggregatedfieldwells.html#cfn-quicksight-analysis-heatmapaggregatedfieldwells-rows)
       */
      override fun rows(): Any? = unwrap(this).getRows()

      /**
       * The values field well of a heat map.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapaggregatedfieldwells.html#cfn-quicksight-analysis-heatmapaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          HeatMapAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapAggregatedFieldWellsProperty):
          HeatMapAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HeatMapAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HeatMapAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SheetControlLayoutProperty {
    /**
     * The configuration that determines the elements and canvas size options of sheet control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrollayout.html#cfn-quicksight-analysis-sheetcontrollayout-configuration)
     */
    public fun configuration(): Any

    /**
     * A builder for [SheetControlLayoutProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param configuration The configuration that determines the elements and canvas size options
       * of sheet control. 
       */
      public fun configuration(configuration: IResolvable)

      /**
       * @param configuration The configuration that determines the elements and canvas size options
       * of sheet control. 
       */
      public fun configuration(configuration: SheetControlLayoutConfigurationProperty)

      /**
       * @param configuration The configuration that determines the elements and canvas size options
       * of sheet control. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("62b13bf5bc3f518cf7d65378575352c25b1a32d2f921bd9d174754689caa7b38")
      public
          fun configuration(configuration: SheetControlLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlLayoutProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlLayoutProperty.builder()

      /**
       * @param configuration The configuration that determines the elements and canvas size options
       * of sheet control. 
       */
      override fun configuration(configuration: IResolvable) {
        cdkBuilder.configuration(configuration.let(IResolvable::unwrap))
      }

      /**
       * @param configuration The configuration that determines the elements and canvas size options
       * of sheet control. 
       */
      override fun configuration(configuration: SheetControlLayoutConfigurationProperty) {
        cdkBuilder.configuration(configuration.let(SheetControlLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param configuration The configuration that determines the elements and canvas size options
       * of sheet control. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("62b13bf5bc3f518cf7d65378575352c25b1a32d2f921bd9d174754689caa7b38")
      override
          fun configuration(configuration: SheetControlLayoutConfigurationProperty.Builder.() -> Unit):
          Unit = configuration(SheetControlLayoutConfigurationProperty(configuration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlLayoutProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlLayoutProperty,
    ) : SheetControlLayoutProperty {
      /**
       * The configuration that determines the elements and canvas size options of sheet control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrollayout.html#cfn-quicksight-analysis-sheetcontrollayout-configuration)
       */
      override fun configuration(): Any = unwrap(this).getConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SheetControlLayoutProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlLayoutProperty):
          SheetControlLayoutProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetControlLayoutProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlLayoutProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ArcOptionsProperty {
    /**
     * The arc thickness of a `GaugeChartVisual` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcoptions.html#cfn-quicksight-analysis-arcoptions-arcthickness)
     */
    public fun arcThickness(): String? = unwrap(this).getArcThickness()

    /**
     * A builder for [ArcOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param arcThickness The arc thickness of a `GaugeChartVisual` .
       */
      public fun arcThickness(arcThickness: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcOptionsProperty.builder()

      /**
       * @param arcThickness The arc thickness of a `GaugeChartVisual` .
       */
      override fun arcThickness(arcThickness: String) {
        cdkBuilder.arcThickness(arcThickness)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcOptionsProperty,
    ) : ArcOptionsProperty {
      /**
       * The arc thickness of a `GaugeChartVisual` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcoptions.html#cfn-quicksight-analysis-arcoptions-arcthickness)
       */
      override fun arcThickness(): String? = unwrap(this).getArcThickness()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ArcOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcOptionsProperty):
          ArcOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ArcOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ArcOptionsProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface WordCloudAggregatedFieldWellsProperty {
    /**
     * The group by field well of a word cloud.
     *
     * Values are grouped by group by fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudaggregatedfieldwells.html#cfn-quicksight-analysis-wordcloudaggregatedfieldwells-groupby)
     */
    public fun groupBy(): Any? = unwrap(this).getGroupBy()

    /**
     * The size field well of a word cloud.
     *
     * Values are aggregated based on group by fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudaggregatedfieldwells.html#cfn-quicksight-analysis-wordcloudaggregatedfieldwells-size)
     */
    public fun size(): Any? = unwrap(this).getSize()

    /**
     * A builder for [WordCloudAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param groupBy The group by field well of a word cloud.
       * Values are grouped by group by fields.
       */
      public fun groupBy(groupBy: IResolvable)

      /**
       * @param groupBy The group by field well of a word cloud.
       * Values are grouped by group by fields.
       */
      public fun groupBy(groupBy: List<Any>)

      /**
       * @param groupBy The group by field well of a word cloud.
       * Values are grouped by group by fields.
       */
      public fun groupBy(vararg groupBy: Any)

      /**
       * @param size The size field well of a word cloud.
       * Values are aggregated based on group by fields.
       */
      public fun size(size: IResolvable)

      /**
       * @param size The size field well of a word cloud.
       * Values are aggregated based on group by fields.
       */
      public fun size(size: List<Any>)

      /**
       * @param size The size field well of a word cloud.
       * Values are aggregated based on group by fields.
       */
      public fun size(vararg size: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudAggregatedFieldWellsProperty.builder()

      /**
       * @param groupBy The group by field well of a word cloud.
       * Values are grouped by group by fields.
       */
      override fun groupBy(groupBy: IResolvable) {
        cdkBuilder.groupBy(groupBy.let(IResolvable::unwrap))
      }

      /**
       * @param groupBy The group by field well of a word cloud.
       * Values are grouped by group by fields.
       */
      override fun groupBy(groupBy: List<Any>) {
        cdkBuilder.groupBy(groupBy)
      }

      /**
       * @param groupBy The group by field well of a word cloud.
       * Values are grouped by group by fields.
       */
      override fun groupBy(vararg groupBy: Any): Unit = groupBy(groupBy.toList())

      /**
       * @param size The size field well of a word cloud.
       * Values are aggregated based on group by fields.
       */
      override fun size(size: IResolvable) {
        cdkBuilder.size(size.let(IResolvable::unwrap))
      }

      /**
       * @param size The size field well of a word cloud.
       * Values are aggregated based on group by fields.
       */
      override fun size(size: List<Any>) {
        cdkBuilder.size(size)
      }

      /**
       * @param size The size field well of a word cloud.
       * Values are aggregated based on group by fields.
       */
      override fun size(vararg size: Any): Unit = size(size.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudAggregatedFieldWellsProperty,
    ) : WordCloudAggregatedFieldWellsProperty {
      /**
       * The group by field well of a word cloud.
       *
       * Values are grouped by group by fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudaggregatedfieldwells.html#cfn-quicksight-analysis-wordcloudaggregatedfieldwells-groupby)
       */
      override fun groupBy(): Any? = unwrap(this).getGroupBy()

      /**
       * The size field well of a word cloud.
       *
       * Values are aggregated based on group by fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudaggregatedfieldwells.html#cfn-quicksight-analysis-wordcloudaggregatedfieldwells-size)
       */
      override fun size(): Any? = unwrap(this).getSize()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          WordCloudAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudAggregatedFieldWellsProperty):
          WordCloudAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WordCloudAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableOptionsProperty {
    /**
     * The table cell style of cells.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-cellstyle)
     */
    public fun cellStyle(): Any? = unwrap(this).getCellStyle()

    /**
     * The visibility setting of a pivot table's collapsed row dimension fields.
     *
     * If the value of this structure is `HIDDEN` , all collapsed columns in a pivot table are
     * automatically hidden. The default value is `VISIBLE` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-collapsedrowdimensionsvisibility)
     */
    public fun collapsedRowDimensionsVisibility(): String? =
        unwrap(this).getCollapsedRowDimensionsVisibility()

    /**
     * The table cell style of the column header.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-columnheaderstyle)
     */
    public fun columnHeaderStyle(): Any? = unwrap(this).getColumnHeaderStyle()

    /**
     * The visibility of the column names.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-columnnamesvisibility)
     */
    public fun columnNamesVisibility(): String? = unwrap(this).getColumnNamesVisibility()

    /**
     * The default cell width of the pivot table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-defaultcellwidth)
     */
    public fun defaultCellWidth(): String? = unwrap(this).getDefaultCellWidth()

    /**
     * The metric placement (row, column) options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-metricplacement)
     */
    public fun metricPlacement(): String? = unwrap(this).getMetricPlacement()

    /**
     * The row alternate color options (widget status, row alternate colors).
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowalternatecoloroptions)
     */
    public fun rowAlternateColorOptions(): Any? = unwrap(this).getRowAlternateColorOptions()

    /**
     * The table cell style of row field names.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowfieldnamesstyle)
     */
    public fun rowFieldNamesStyle(): Any? = unwrap(this).getRowFieldNamesStyle()

    /**
     * The table cell style of the row headers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowheaderstyle)
     */
    public fun rowHeaderStyle(): Any? = unwrap(this).getRowHeaderStyle()

    /**
     * The options for the label that is located above the row headers.
     *
     * This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowslabeloptions)
     */
    public fun rowsLabelOptions(): Any? = unwrap(this).getRowsLabelOptions()

    /**
     * The layout for the row dimension headers of a pivot table. Choose one of the following
     * options.
     *
     * * `TABULAR` : (Default) Each row field is displayed in a separate column.
     * * `HIERARCHY` : All row fields are displayed in a single column. Indentation is used to
     * differentiate row headers of different fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowslayout)
     */
    public fun rowsLayout(): String? = unwrap(this).getRowsLayout()

    /**
     * The visibility of the single metric options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-singlemetricvisibility)
     */
    public fun singleMetricVisibility(): String? = unwrap(this).getSingleMetricVisibility()

    /**
     * Determines the visibility of the pivot table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-togglebuttonsvisibility)
     */
    public fun toggleButtonsVisibility(): String? = unwrap(this).getToggleButtonsVisibility()

    /**
     * A builder for [PivotTableOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param cellStyle The table cell style of cells.
       */
      public fun cellStyle(cellStyle: IResolvable)

      /**
       * @param cellStyle The table cell style of cells.
       */
      public fun cellStyle(cellStyle: TableCellStyleProperty)

      /**
       * @param cellStyle The table cell style of cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("02bd2236a997026b2df5d2c9788695f771d5a885ade30dabff0b8ea653adb28a")
      public fun cellStyle(cellStyle: TableCellStyleProperty.Builder.() -> Unit)

      /**
       * @param collapsedRowDimensionsVisibility The visibility setting of a pivot table's collapsed
       * row dimension fields.
       * If the value of this structure is `HIDDEN` , all collapsed columns in a pivot table are
       * automatically hidden. The default value is `VISIBLE` .
       */
      public fun collapsedRowDimensionsVisibility(collapsedRowDimensionsVisibility: String)

      /**
       * @param columnHeaderStyle The table cell style of the column header.
       */
      public fun columnHeaderStyle(columnHeaderStyle: IResolvable)

      /**
       * @param columnHeaderStyle The table cell style of the column header.
       */
      public fun columnHeaderStyle(columnHeaderStyle: TableCellStyleProperty)

      /**
       * @param columnHeaderStyle The table cell style of the column header.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c1ee85d3bc2605c050ace0e903825e7eb4fcabb1865641c5b8fa26e7223c5302")
      public fun columnHeaderStyle(columnHeaderStyle: TableCellStyleProperty.Builder.() -> Unit)

      /**
       * @param columnNamesVisibility The visibility of the column names.
       */
      public fun columnNamesVisibility(columnNamesVisibility: String)

      /**
       * @param defaultCellWidth The default cell width of the pivot table.
       */
      public fun defaultCellWidth(defaultCellWidth: String)

      /**
       * @param metricPlacement The metric placement (row, column) options.
       */
      public fun metricPlacement(metricPlacement: String)

      /**
       * @param rowAlternateColorOptions The row alternate color options (widget status, row
       * alternate colors).
       */
      public fun rowAlternateColorOptions(rowAlternateColorOptions: IResolvable)

      /**
       * @param rowAlternateColorOptions The row alternate color options (widget status, row
       * alternate colors).
       */
      public
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty)

      /**
       * @param rowAlternateColorOptions The row alternate color options (widget status, row
       * alternate colors).
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("90a682c59bde6f416b027eb2c50edd94a09e2f4560ba8fb6a25afbdfd4f660b1")
      public
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty.Builder.() -> Unit)

      /**
       * @param rowFieldNamesStyle The table cell style of row field names.
       */
      public fun rowFieldNamesStyle(rowFieldNamesStyle: IResolvable)

      /**
       * @param rowFieldNamesStyle The table cell style of row field names.
       */
      public fun rowFieldNamesStyle(rowFieldNamesStyle: TableCellStyleProperty)

      /**
       * @param rowFieldNamesStyle The table cell style of row field names.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("95e4aa753c059586c6ae4793d4dc02a384566481a0ec15cd47de2408c7067d83")
      public fun rowFieldNamesStyle(rowFieldNamesStyle: TableCellStyleProperty.Builder.() -> Unit)

      /**
       * @param rowHeaderStyle The table cell style of the row headers.
       */
      public fun rowHeaderStyle(rowHeaderStyle: IResolvable)

      /**
       * @param rowHeaderStyle The table cell style of the row headers.
       */
      public fun rowHeaderStyle(rowHeaderStyle: TableCellStyleProperty)

      /**
       * @param rowHeaderStyle The table cell style of the row headers.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("da10f5de52bc7c825fccd57e79943259d5212a003e2fab7ca66997e138d40960")
      public fun rowHeaderStyle(rowHeaderStyle: TableCellStyleProperty.Builder.() -> Unit)

      /**
       * @param rowsLabelOptions The options for the label that is located above the row headers.
       * This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
       */
      public fun rowsLabelOptions(rowsLabelOptions: IResolvable)

      /**
       * @param rowsLabelOptions The options for the label that is located above the row headers.
       * This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
       */
      public fun rowsLabelOptions(rowsLabelOptions: PivotTableRowsLabelOptionsProperty)

      /**
       * @param rowsLabelOptions The options for the label that is located above the row headers.
       * This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("97685b9f92ffe9e7ce0e8652929cce92a8b8f524cad1b4facc2a2b3396937daf")
      public
          fun rowsLabelOptions(rowsLabelOptions: PivotTableRowsLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param rowsLayout The layout for the row dimension headers of a pivot table. Choose one of
       * the following options.
       * * `TABULAR` : (Default) Each row field is displayed in a separate column.
       * * `HIERARCHY` : All row fields are displayed in a single column. Indentation is used to
       * differentiate row headers of different fields.
       */
      public fun rowsLayout(rowsLayout: String)

      /**
       * @param singleMetricVisibility The visibility of the single metric options.
       */
      public fun singleMetricVisibility(singleMetricVisibility: String)

      /**
       * @param toggleButtonsVisibility Determines the visibility of the pivot table.
       */
      public fun toggleButtonsVisibility(toggleButtonsVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableOptionsProperty.builder()

      /**
       * @param cellStyle The table cell style of cells.
       */
      override fun cellStyle(cellStyle: IResolvable) {
        cdkBuilder.cellStyle(cellStyle.let(IResolvable::unwrap))
      }

      /**
       * @param cellStyle The table cell style of cells.
       */
      override fun cellStyle(cellStyle: TableCellStyleProperty) {
        cdkBuilder.cellStyle(cellStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param cellStyle The table cell style of cells.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("02bd2236a997026b2df5d2c9788695f771d5a885ade30dabff0b8ea653adb28a")
      override fun cellStyle(cellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          cellStyle(TableCellStyleProperty(cellStyle))

      /**
       * @param collapsedRowDimensionsVisibility The visibility setting of a pivot table's collapsed
       * row dimension fields.
       * If the value of this structure is `HIDDEN` , all collapsed columns in a pivot table are
       * automatically hidden. The default value is `VISIBLE` .
       */
      override fun collapsedRowDimensionsVisibility(collapsedRowDimensionsVisibility: String) {
        cdkBuilder.collapsedRowDimensionsVisibility(collapsedRowDimensionsVisibility)
      }

      /**
       * @param columnHeaderStyle The table cell style of the column header.
       */
      override fun columnHeaderStyle(columnHeaderStyle: IResolvable) {
        cdkBuilder.columnHeaderStyle(columnHeaderStyle.let(IResolvable::unwrap))
      }

      /**
       * @param columnHeaderStyle The table cell style of the column header.
       */
      override fun columnHeaderStyle(columnHeaderStyle: TableCellStyleProperty) {
        cdkBuilder.columnHeaderStyle(columnHeaderStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param columnHeaderStyle The table cell style of the column header.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c1ee85d3bc2605c050ace0e903825e7eb4fcabb1865641c5b8fa26e7223c5302")
      override fun columnHeaderStyle(columnHeaderStyle: TableCellStyleProperty.Builder.() -> Unit):
          Unit = columnHeaderStyle(TableCellStyleProperty(columnHeaderStyle))

      /**
       * @param columnNamesVisibility The visibility of the column names.
       */
      override fun columnNamesVisibility(columnNamesVisibility: String) {
        cdkBuilder.columnNamesVisibility(columnNamesVisibility)
      }

      /**
       * @param defaultCellWidth The default cell width of the pivot table.
       */
      override fun defaultCellWidth(defaultCellWidth: String) {
        cdkBuilder.defaultCellWidth(defaultCellWidth)
      }

      /**
       * @param metricPlacement The metric placement (row, column) options.
       */
      override fun metricPlacement(metricPlacement: String) {
        cdkBuilder.metricPlacement(metricPlacement)
      }

      /**
       * @param rowAlternateColorOptions The row alternate color options (widget status, row
       * alternate colors).
       */
      override fun rowAlternateColorOptions(rowAlternateColorOptions: IResolvable) {
        cdkBuilder.rowAlternateColorOptions(rowAlternateColorOptions.let(IResolvable::unwrap))
      }

      /**
       * @param rowAlternateColorOptions The row alternate color options (widget status, row
       * alternate colors).
       */
      override
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty) {
        cdkBuilder.rowAlternateColorOptions(rowAlternateColorOptions.let(RowAlternateColorOptionsProperty::unwrap))
      }

      /**
       * @param rowAlternateColorOptions The row alternate color options (widget status, row
       * alternate colors).
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("90a682c59bde6f416b027eb2c50edd94a09e2f4560ba8fb6a25afbdfd4f660b1")
      override
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty.Builder.() -> Unit):
          Unit =
          rowAlternateColorOptions(RowAlternateColorOptionsProperty(rowAlternateColorOptions))

      /**
       * @param rowFieldNamesStyle The table cell style of row field names.
       */
      override fun rowFieldNamesStyle(rowFieldNamesStyle: IResolvable) {
        cdkBuilder.rowFieldNamesStyle(rowFieldNamesStyle.let(IResolvable::unwrap))
      }

      /**
       * @param rowFieldNamesStyle The table cell style of row field names.
       */
      override fun rowFieldNamesStyle(rowFieldNamesStyle: TableCellStyleProperty) {
        cdkBuilder.rowFieldNamesStyle(rowFieldNamesStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param rowFieldNamesStyle The table cell style of row field names.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("95e4aa753c059586c6ae4793d4dc02a384566481a0ec15cd47de2408c7067d83")
      override
          fun rowFieldNamesStyle(rowFieldNamesStyle: TableCellStyleProperty.Builder.() -> Unit):
          Unit = rowFieldNamesStyle(TableCellStyleProperty(rowFieldNamesStyle))

      /**
       * @param rowHeaderStyle The table cell style of the row headers.
       */
      override fun rowHeaderStyle(rowHeaderStyle: IResolvable) {
        cdkBuilder.rowHeaderStyle(rowHeaderStyle.let(IResolvable::unwrap))
      }

      /**
       * @param rowHeaderStyle The table cell style of the row headers.
       */
      override fun rowHeaderStyle(rowHeaderStyle: TableCellStyleProperty) {
        cdkBuilder.rowHeaderStyle(rowHeaderStyle.let(TableCellStyleProperty::unwrap))
      }

      /**
       * @param rowHeaderStyle The table cell style of the row headers.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("da10f5de52bc7c825fccd57e79943259d5212a003e2fab7ca66997e138d40960")
      override fun rowHeaderStyle(rowHeaderStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          rowHeaderStyle(TableCellStyleProperty(rowHeaderStyle))

      /**
       * @param rowsLabelOptions The options for the label that is located above the row headers.
       * This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
       */
      override fun rowsLabelOptions(rowsLabelOptions: IResolvable) {
        cdkBuilder.rowsLabelOptions(rowsLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param rowsLabelOptions The options for the label that is located above the row headers.
       * This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
       */
      override fun rowsLabelOptions(rowsLabelOptions: PivotTableRowsLabelOptionsProperty) {
        cdkBuilder.rowsLabelOptions(rowsLabelOptions.let(PivotTableRowsLabelOptionsProperty::unwrap))
      }

      /**
       * @param rowsLabelOptions The options for the label that is located above the row headers.
       * This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("97685b9f92ffe9e7ce0e8652929cce92a8b8f524cad1b4facc2a2b3396937daf")
      override
          fun rowsLabelOptions(rowsLabelOptions: PivotTableRowsLabelOptionsProperty.Builder.() -> Unit):
          Unit = rowsLabelOptions(PivotTableRowsLabelOptionsProperty(rowsLabelOptions))

      /**
       * @param rowsLayout The layout for the row dimension headers of a pivot table. Choose one of
       * the following options.
       * * `TABULAR` : (Default) Each row field is displayed in a separate column.
       * * `HIERARCHY` : All row fields are displayed in a single column. Indentation is used to
       * differentiate row headers of different fields.
       */
      override fun rowsLayout(rowsLayout: String) {
        cdkBuilder.rowsLayout(rowsLayout)
      }

      /**
       * @param singleMetricVisibility The visibility of the single metric options.
       */
      override fun singleMetricVisibility(singleMetricVisibility: String) {
        cdkBuilder.singleMetricVisibility(singleMetricVisibility)
      }

      /**
       * @param toggleButtonsVisibility Determines the visibility of the pivot table.
       */
      override fun toggleButtonsVisibility(toggleButtonsVisibility: String) {
        cdkBuilder.toggleButtonsVisibility(toggleButtonsVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableOptionsProperty,
    ) : PivotTableOptionsProperty {
      /**
       * The table cell style of cells.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-cellstyle)
       */
      override fun cellStyle(): Any? = unwrap(this).getCellStyle()

      /**
       * The visibility setting of a pivot table's collapsed row dimension fields.
       *
       * If the value of this structure is `HIDDEN` , all collapsed columns in a pivot table are
       * automatically hidden. The default value is `VISIBLE` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-collapsedrowdimensionsvisibility)
       */
      override fun collapsedRowDimensionsVisibility(): String? =
          unwrap(this).getCollapsedRowDimensionsVisibility()

      /**
       * The table cell style of the column header.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-columnheaderstyle)
       */
      override fun columnHeaderStyle(): Any? = unwrap(this).getColumnHeaderStyle()

      /**
       * The visibility of the column names.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-columnnamesvisibility)
       */
      override fun columnNamesVisibility(): String? = unwrap(this).getColumnNamesVisibility()

      /**
       * The default cell width of the pivot table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-defaultcellwidth)
       */
      override fun defaultCellWidth(): String? = unwrap(this).getDefaultCellWidth()

      /**
       * The metric placement (row, column) options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-metricplacement)
       */
      override fun metricPlacement(): String? = unwrap(this).getMetricPlacement()

      /**
       * The row alternate color options (widget status, row alternate colors).
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowalternatecoloroptions)
       */
      override fun rowAlternateColorOptions(): Any? = unwrap(this).getRowAlternateColorOptions()

      /**
       * The table cell style of row field names.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowfieldnamesstyle)
       */
      override fun rowFieldNamesStyle(): Any? = unwrap(this).getRowFieldNamesStyle()

      /**
       * The table cell style of the row headers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowheaderstyle)
       */
      override fun rowHeaderStyle(): Any? = unwrap(this).getRowHeaderStyle()

      /**
       * The options for the label that is located above the row headers.
       *
       * This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowslabeloptions)
       */
      override fun rowsLabelOptions(): Any? = unwrap(this).getRowsLabelOptions()

      /**
       * The layout for the row dimension headers of a pivot table. Choose one of the following
       * options.
       *
       * * `TABULAR` : (Default) Each row field is displayed in a separate column.
       * * `HIERARCHY` : All row fields are displayed in a single column. Indentation is used to
       * differentiate row headers of different fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowslayout)
       */
      override fun rowsLayout(): String? = unwrap(this).getRowsLayout()

      /**
       * The visibility of the single metric options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-singlemetricvisibility)
       */
      override fun singleMetricVisibility(): String? = unwrap(this).getSingleMetricVisibility()

      /**
       * Determines the visibility of the pivot table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-togglebuttonsvisibility)
       */
      override fun toggleButtonsVisibility(): String? = unwrap(this).getToggleButtonsVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableOptionsProperty):
          PivotTableOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ParameterDateTimePickerControlProperty {
    /**
     * The display options of a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html#cfn-quicksight-analysis-parameterdatetimepickercontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The ID of the `ParameterDateTimePickerControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html#cfn-quicksight-analysis-parameterdatetimepickercontrol-parametercontrolid)
     */
    public fun parameterControlId(): String

    /**
     * The name of the `ParameterDateTimePickerControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html#cfn-quicksight-analysis-parameterdatetimepickercontrol-sourceparametername)
     */
    public fun sourceParameterName(): String

    /**
     * The title of the `ParameterDateTimePickerControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html#cfn-quicksight-analysis-parameterdatetimepickercontrol-title)
     */
    public fun title(): String

    /**
     * A builder for [ParameterDateTimePickerControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9afebfe2a62ae592186a097aa02e2c4e0b90b15b1e0838edabd80acbf082cced")
      public
          fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param parameterControlId The ID of the `ParameterDateTimePickerControl` . 
       */
      public fun parameterControlId(parameterControlId: String)

      /**
       * @param sourceParameterName The name of the `ParameterDateTimePickerControl` . 
       */
      public fun sourceParameterName(sourceParameterName: String)

      /**
       * @param title The title of the `ParameterDateTimePickerControl` . 
       */
      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDateTimePickerControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDateTimePickerControlProperty.builder()

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(DateTimePickerControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9afebfe2a62ae592186a097aa02e2c4e0b90b15b1e0838edabd80acbf082cced")
      override
          fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(DateTimePickerControlDisplayOptionsProperty(displayOptions))

      /**
       * @param parameterControlId The ID of the `ParameterDateTimePickerControl` . 
       */
      override fun parameterControlId(parameterControlId: String) {
        cdkBuilder.parameterControlId(parameterControlId)
      }

      /**
       * @param sourceParameterName The name of the `ParameterDateTimePickerControl` . 
       */
      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      /**
       * @param title The title of the `ParameterDateTimePickerControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDateTimePickerControlProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDateTimePickerControlProperty,
    ) : ParameterDateTimePickerControlProperty {
      /**
       * The display options of a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html#cfn-quicksight-analysis-parameterdatetimepickercontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The ID of the `ParameterDateTimePickerControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html#cfn-quicksight-analysis-parameterdatetimepickercontrol-parametercontrolid)
       */
      override fun parameterControlId(): String = unwrap(this).getParameterControlId()

      /**
       * The name of the `ParameterDateTimePickerControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html#cfn-quicksight-analysis-parameterdatetimepickercontrol-sourceparametername)
       */
      override fun sourceParameterName(): String = unwrap(this).getSourceParameterName()

      /**
       * The title of the `ParameterDateTimePickerControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html#cfn-quicksight-analysis-parameterdatetimepickercontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ParameterDateTimePickerControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDateTimePickerControlProperty):
          ParameterDateTimePickerControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterDateTimePickerControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterDateTimePickerControlProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SankeyDiagramVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration of a sankey diagram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [SankeyDiagramVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration of a sankey diagram.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration of a sankey diagram.
       */
      public fun chartConfiguration(chartConfiguration: SankeyDiagramChartConfigurationProperty)

      /**
       * @param chartConfiguration The configuration of a sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e7574f0670a052e3fcde4ca1e3a75025e626d3247b47238414315c48e3ae3061")
      public
          fun chartConfiguration(chartConfiguration: SankeyDiagramChartConfigurationProperty.Builder.() -> Unit)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("63846cf19bfed2291fe58b9b54ca35adfe93ff429f4dc547d3837a4763603461")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2553f764d080625820e1e61ec3d7eaafd5e272659f7c7f882d1c9259dde003a5")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramVisualProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration of a sankey diagram.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a sankey diagram.
       */
      override fun chartConfiguration(chartConfiguration: SankeyDiagramChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(SankeyDiagramChartConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration of a sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e7574f0670a052e3fcde4ca1e3a75025e626d3247b47238414315c48e3ae3061")
      override
          fun chartConfiguration(chartConfiguration: SankeyDiagramChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(SankeyDiagramChartConfigurationProperty(chartConfiguration))

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("63846cf19bfed2291fe58b9b54ca35adfe93ff429f4dc547d3837a4763603461")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2553f764d080625820e1e61ec3d7eaafd5e272659f7c7f882d1c9259dde003a5")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramVisualProperty,
    ) : SankeyDiagramVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration of a sankey diagram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SankeyDiagramVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramVisualProperty):
          SankeyDiagramVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SankeyDiagramVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramVisualProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ListControlSelectAllOptionsProperty {
    /**
     * The visibility configuration of the `Select all` options in a list control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontrolselectalloptions.html#cfn-quicksight-analysis-listcontrolselectalloptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [ListControlSelectAllOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility The visibility configuration of the `Select all` options in a list
       * control.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlSelectAllOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlSelectAllOptionsProperty.builder()

      /**
       * @param visibility The visibility configuration of the `Select all` options in a list
       * control.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlSelectAllOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlSelectAllOptionsProperty,
    ) : ListControlSelectAllOptionsProperty {
      /**
       * The visibility configuration of the `Select all` options in a list control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontrolselectalloptions.html#cfn-quicksight-analysis-listcontrolselectalloptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ListControlSelectAllOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlSelectAllOptionsProperty):
          ListControlSelectAllOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ListControlSelectAllOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ListControlSelectAllOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface GaugeChartPrimaryValueConditionalFormattingProperty {
    /**
     * The conditional formatting of the primary value icon.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartprimaryvalueconditionalformatting.html#cfn-quicksight-analysis-gaugechartprimaryvalueconditionalformatting-icon)
     */
    public fun icon(): Any? = unwrap(this).getIcon()

    /**
     * The conditional formatting of the primary value text color.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartprimaryvalueconditionalformatting.html#cfn-quicksight-analysis-gaugechartprimaryvalueconditionalformatting-textcolor)
     */
    public fun textColor(): Any? = unwrap(this).getTextColor()

    /**
     * A builder for [GaugeChartPrimaryValueConditionalFormattingProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param icon The conditional formatting of the primary value icon.
       */
      public fun icon(icon: IResolvable)

      /**
       * @param icon The conditional formatting of the primary value icon.
       */
      public fun icon(icon: ConditionalFormattingIconProperty)

      /**
       * @param icon The conditional formatting of the primary value icon.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4d9113d2c65f2dd5a75a5076ddf2a220bcf4def34d442b4650be27d0ebdd85f1")
      public fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit)

      /**
       * @param textColor The conditional formatting of the primary value text color.
       */
      public fun textColor(textColor: IResolvable)

      /**
       * @param textColor The conditional formatting of the primary value text color.
       */
      public fun textColor(textColor: ConditionalFormattingColorProperty)

      /**
       * @param textColor The conditional formatting of the primary value text color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("788be85a0458ca8101af495c5bf8c9ba3777198c6f1bae2a821fb998f884877e")
      public fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartPrimaryValueConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartPrimaryValueConditionalFormattingProperty.builder()

      /**
       * @param icon The conditional formatting of the primary value icon.
       */
      override fun icon(icon: IResolvable) {
        cdkBuilder.icon(icon.let(IResolvable::unwrap))
      }

      /**
       * @param icon The conditional formatting of the primary value icon.
       */
      override fun icon(icon: ConditionalFormattingIconProperty) {
        cdkBuilder.icon(icon.let(ConditionalFormattingIconProperty::unwrap))
      }

      /**
       * @param icon The conditional formatting of the primary value icon.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4d9113d2c65f2dd5a75a5076ddf2a220bcf4def34d442b4650be27d0ebdd85f1")
      override fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit): Unit =
          icon(ConditionalFormattingIconProperty(icon))

      /**
       * @param textColor The conditional formatting of the primary value text color.
       */
      override fun textColor(textColor: IResolvable) {
        cdkBuilder.textColor(textColor.let(IResolvable::unwrap))
      }

      /**
       * @param textColor The conditional formatting of the primary value text color.
       */
      override fun textColor(textColor: ConditionalFormattingColorProperty) {
        cdkBuilder.textColor(textColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      /**
       * @param textColor The conditional formatting of the primary value text color.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("788be85a0458ca8101af495c5bf8c9ba3777198c6f1bae2a821fb998f884877e")
      override fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit): Unit
          = textColor(ConditionalFormattingColorProperty(textColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartPrimaryValueConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartPrimaryValueConditionalFormattingProperty,
    ) : GaugeChartPrimaryValueConditionalFormattingProperty {
      /**
       * The conditional formatting of the primary value icon.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartprimaryvalueconditionalformatting.html#cfn-quicksight-analysis-gaugechartprimaryvalueconditionalformatting-icon)
       */
      override fun icon(): Any? = unwrap(this).getIcon()

      /**
       * The conditional formatting of the primary value text color.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartprimaryvalueconditionalformatting.html#cfn-quicksight-analysis-gaugechartprimaryvalueconditionalformatting-textcolor)
       */
      override fun textColor(): Any? = unwrap(this).getTextColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GaugeChartPrimaryValueConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartPrimaryValueConditionalFormattingProperty):
          GaugeChartPrimaryValueConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartPrimaryValueConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GaugeChartPrimaryValueConditionalFormattingProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ChartAxisLabelOptionsProperty {
    /**
     * The label options for a chart axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-chartaxislabeloptions.html#cfn-quicksight-analysis-chartaxislabeloptions-axislabeloptions)
     */
    public fun axisLabelOptions(): Any? = unwrap(this).getAxisLabelOptions()

    /**
     * The visibility configuration of the sort icon on a chart's axis label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-chartaxislabeloptions.html#cfn-quicksight-analysis-chartaxislabeloptions-sorticonvisibility)
     */
    public fun sortIconVisibility(): String? = unwrap(this).getSortIconVisibility()

    /**
     * The visibility of an axis label on a chart. Choose one of the following options:.
     *
     * * `VISIBLE` : Shows the axis.
     * * `HIDDEN` : Hides the axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-chartaxislabeloptions.html#cfn-quicksight-analysis-chartaxislabeloptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [ChartAxisLabelOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param axisLabelOptions The label options for a chart axis.
       */
      public fun axisLabelOptions(axisLabelOptions: IResolvable)

      /**
       * @param axisLabelOptions The label options for a chart axis.
       */
      public fun axisLabelOptions(axisLabelOptions: List<Any>)

      /**
       * @param axisLabelOptions The label options for a chart axis.
       */
      public fun axisLabelOptions(vararg axisLabelOptions: Any)

      /**
       * @param sortIconVisibility The visibility configuration of the sort icon on a chart's axis
       * label.
       */
      public fun sortIconVisibility(sortIconVisibility: String)

      /**
       * @param visibility The visibility of an axis label on a chart. Choose one of the following
       * options:.
       * * `VISIBLE` : Shows the axis.
       * * `HIDDEN` : Hides the axis.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ChartAxisLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ChartAxisLabelOptionsProperty.builder()

      /**
       * @param axisLabelOptions The label options for a chart axis.
       */
      override fun axisLabelOptions(axisLabelOptions: IResolvable) {
        cdkBuilder.axisLabelOptions(axisLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param axisLabelOptions The label options for a chart axis.
       */
      override fun axisLabelOptions(axisLabelOptions: List<Any>) {
        cdkBuilder.axisLabelOptions(axisLabelOptions)
      }

      /**
       * @param axisLabelOptions The label options for a chart axis.
       */
      override fun axisLabelOptions(vararg axisLabelOptions: Any): Unit =
          axisLabelOptions(axisLabelOptions.toList())

      /**
       * @param sortIconVisibility The visibility configuration of the sort icon on a chart's axis
       * label.
       */
      override fun sortIconVisibility(sortIconVisibility: String) {
        cdkBuilder.sortIconVisibility(sortIconVisibility)
      }

      /**
       * @param visibility The visibility of an axis label on a chart. Choose one of the following
       * options:.
       * * `VISIBLE` : Shows the axis.
       * * `HIDDEN` : Hides the axis.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ChartAxisLabelOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ChartAxisLabelOptionsProperty,
    ) : ChartAxisLabelOptionsProperty {
      /**
       * The label options for a chart axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-chartaxislabeloptions.html#cfn-quicksight-analysis-chartaxislabeloptions-axislabeloptions)
       */
      override fun axisLabelOptions(): Any? = unwrap(this).getAxisLabelOptions()

      /**
       * The visibility configuration of the sort icon on a chart's axis label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-chartaxislabeloptions.html#cfn-quicksight-analysis-chartaxislabeloptions-sorticonvisibility)
       */
      override fun sortIconVisibility(): String? = unwrap(this).getSortIconVisibility()

      /**
       * The visibility of an axis label on a chart. Choose one of the following options:.
       *
       * * `VISIBLE` : Shows the axis.
       * * `HIDDEN` : Hides the axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-chartaxislabeloptions.html#cfn-quicksight-analysis-chartaxislabeloptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ChartAxisLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ChartAxisLabelOptionsProperty):
          ChartAxisLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ChartAxisLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ChartAxisLabelOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ConditionalFormattingIconSetProperty {
    /**
     * The expression that determines the formatting configuration for the icon set.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingiconset.html#cfn-quicksight-analysis-conditionalformattingiconset-expression)
     */
    public fun expression(): String

    /**
     * Determines the icon set type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingiconset.html#cfn-quicksight-analysis-conditionalformattingiconset-iconsettype)
     */
    public fun iconSetType(): String? = unwrap(this).getIconSetType()

    /**
     * A builder for [ConditionalFormattingIconSetProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param expression The expression that determines the formatting configuration for the icon
       * set. 
       */
      public fun expression(expression: String)

      /**
       * @param iconSetType Determines the icon set type.
       */
      public fun iconSetType(iconSetType: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconSetProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconSetProperty.builder()

      /**
       * @param expression The expression that determines the formatting configuration for the icon
       * set. 
       */
      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      /**
       * @param iconSetType Determines the icon set type.
       */
      override fun iconSetType(iconSetType: String) {
        cdkBuilder.iconSetType(iconSetType)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconSetProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconSetProperty,
    ) : ConditionalFormattingIconSetProperty {
      /**
       * The expression that determines the formatting configuration for the icon set.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingiconset.html#cfn-quicksight-analysis-conditionalformattingiconset-expression)
       */
      override fun expression(): String = unwrap(this).getExpression()

      /**
       * Determines the icon set type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingiconset.html#cfn-quicksight-analysis-conditionalformattingiconset-iconsettype)
       */
      override fun iconSetType(): String? = unwrap(this).getIconSetType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingIconSetProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconSetProperty):
          ConditionalFormattingIconSetProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingIconSetProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ConditionalFormattingIconSetProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface TableSortConfigurationProperty {
    /**
     * The pagination configuration (page size, page number) for the table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesortconfiguration.html#cfn-quicksight-analysis-tablesortconfiguration-paginationconfiguration)
     */
    public fun paginationConfiguration(): Any? = unwrap(this).getPaginationConfiguration()

    /**
     * The field sort options for rows in the table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesortconfiguration.html#cfn-quicksight-analysis-tablesortconfiguration-rowsort)
     */
    public fun rowSort(): Any? = unwrap(this).getRowSort()

    /**
     * A builder for [TableSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param paginationConfiguration The pagination configuration (page size, page number) for
       * the table.
       */
      public fun paginationConfiguration(paginationConfiguration: IResolvable)

      /**
       * @param paginationConfiguration The pagination configuration (page size, page number) for
       * the table.
       */
      public fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty)

      /**
       * @param paginationConfiguration The pagination configuration (page size, page number) for
       * the table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a3b6b144ac05e8ef35390990b1066f3d782053d26f51e2fecf2c4f6f3419f45b")
      public
          fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty.Builder.() -> Unit)

      /**
       * @param rowSort The field sort options for rows in the table.
       */
      public fun rowSort(rowSort: IResolvable)

      /**
       * @param rowSort The field sort options for rows in the table.
       */
      public fun rowSort(rowSort: List<Any>)

      /**
       * @param rowSort The field sort options for rows in the table.
       */
      public fun rowSort(vararg rowSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableSortConfigurationProperty.builder()

      /**
       * @param paginationConfiguration The pagination configuration (page size, page number) for
       * the table.
       */
      override fun paginationConfiguration(paginationConfiguration: IResolvable) {
        cdkBuilder.paginationConfiguration(paginationConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param paginationConfiguration The pagination configuration (page size, page number) for
       * the table.
       */
      override
          fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty) {
        cdkBuilder.paginationConfiguration(paginationConfiguration.let(PaginationConfigurationProperty::unwrap))
      }

      /**
       * @param paginationConfiguration The pagination configuration (page size, page number) for
       * the table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a3b6b144ac05e8ef35390990b1066f3d782053d26f51e2fecf2c4f6f3419f45b")
      override
          fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty.Builder.() -> Unit):
          Unit = paginationConfiguration(PaginationConfigurationProperty(paginationConfiguration))

      /**
       * @param rowSort The field sort options for rows in the table.
       */
      override fun rowSort(rowSort: IResolvable) {
        cdkBuilder.rowSort(rowSort.let(IResolvable::unwrap))
      }

      /**
       * @param rowSort The field sort options for rows in the table.
       */
      override fun rowSort(rowSort: List<Any>) {
        cdkBuilder.rowSort(rowSort)
      }

      /**
       * @param rowSort The field sort options for rows in the table.
       */
      override fun rowSort(vararg rowSort: Any): Unit = rowSort(rowSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableSortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableSortConfigurationProperty,
    ) : TableSortConfigurationProperty {
      /**
       * The pagination configuration (page size, page number) for the table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesortconfiguration.html#cfn-quicksight-analysis-tablesortconfiguration-paginationconfiguration)
       */
      override fun paginationConfiguration(): Any? = unwrap(this).getPaginationConfiguration()

      /**
       * The field sort options for rows in the table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesortconfiguration.html#cfn-quicksight-analysis-tablesortconfiguration-rowsort)
       */
      override fun rowSort(): Any? = unwrap(this).getRowSort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TableSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TableSortConfigurationProperty):
          TableSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TableSortConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface RowAlternateColorOptionsProperty {
    /**
     * Determines the list of row alternate colors.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rowalternatecoloroptions.html#cfn-quicksight-analysis-rowalternatecoloroptions-rowalternatecolors)
     */
    public fun rowAlternateColors(): List<String> = unwrap(this).getRowAlternateColors() ?:
        emptyList()

    /**
     * Determines the widget status.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rowalternatecoloroptions.html#cfn-quicksight-analysis-rowalternatecoloroptions-status)
     */
    public fun status(): String? = unwrap(this).getStatus()

    /**
     * The primary background color options for alternate rows.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rowalternatecoloroptions.html#cfn-quicksight-analysis-rowalternatecoloroptions-useprimarybackgroundcolor)
     */
    public fun usePrimaryBackgroundColor(): String? = unwrap(this).getUsePrimaryBackgroundColor()

    /**
     * A builder for [RowAlternateColorOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param rowAlternateColors Determines the list of row alternate colors.
       */
      public fun rowAlternateColors(rowAlternateColors: List<String>)

      /**
       * @param rowAlternateColors Determines the list of row alternate colors.
       */
      public fun rowAlternateColors(vararg rowAlternateColors: String)

      /**
       * @param status Determines the widget status.
       */
      public fun status(status: String)

      /**
       * @param usePrimaryBackgroundColor The primary background color options for alternate rows.
       */
      public fun usePrimaryBackgroundColor(usePrimaryBackgroundColor: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RowAlternateColorOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RowAlternateColorOptionsProperty.builder()

      /**
       * @param rowAlternateColors Determines the list of row alternate colors.
       */
      override fun rowAlternateColors(rowAlternateColors: List<String>) {
        cdkBuilder.rowAlternateColors(rowAlternateColors)
      }

      /**
       * @param rowAlternateColors Determines the list of row alternate colors.
       */
      override fun rowAlternateColors(vararg rowAlternateColors: String): Unit =
          rowAlternateColors(rowAlternateColors.toList())

      /**
       * @param status Determines the widget status.
       */
      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      /**
       * @param usePrimaryBackgroundColor The primary background color options for alternate rows.
       */
      override fun usePrimaryBackgroundColor(usePrimaryBackgroundColor: String) {
        cdkBuilder.usePrimaryBackgroundColor(usePrimaryBackgroundColor)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RowAlternateColorOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RowAlternateColorOptionsProperty,
    ) : RowAlternateColorOptionsProperty {
      /**
       * Determines the list of row alternate colors.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rowalternatecoloroptions.html#cfn-quicksight-analysis-rowalternatecoloroptions-rowalternatecolors)
       */
      override fun rowAlternateColors(): List<String> = unwrap(this).getRowAlternateColors() ?:
          emptyList()

      /**
       * Determines the widget status.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rowalternatecoloroptions.html#cfn-quicksight-analysis-rowalternatecoloroptions-status)
       */
      override fun status(): String? = unwrap(this).getStatus()

      /**
       * The primary background color options for alternate rows.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rowalternatecoloroptions.html#cfn-quicksight-analysis-rowalternatecoloroptions-useprimarybackgroundcolor)
       */
      override fun usePrimaryBackgroundColor(): String? =
          unwrap(this).getUsePrimaryBackgroundColor()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): RowAlternateColorOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.RowAlternateColorOptionsProperty):
          RowAlternateColorOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RowAlternateColorOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.RowAlternateColorOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface DestinationParameterValueConfigurationProperty {
    /**
     * The configuration of custom values for destination parameter in
     * `DestinationParameterValueConfiguration` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-customvaluesconfiguration)
     */
    public fun customValuesConfiguration(): Any? = unwrap(this).getCustomValuesConfiguration()

    /**
     * The configuration that selects all options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-selectallvalueoptions)
     */
    public fun selectAllValueOptions(): String? = unwrap(this).getSelectAllValueOptions()

    /**
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-sourcecolumn)
     */
    public fun sourceColumn(): Any? = unwrap(this).getSourceColumn()

    /**
     * The source field ID of the destination parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-sourcefield)
     */
    public fun sourceField(): String? = unwrap(this).getSourceField()

    /**
     * The source parameter name of the destination parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-sourceparametername)
     */
    public fun sourceParameterName(): String? = unwrap(this).getSourceParameterName()

    /**
     * A builder for [DestinationParameterValueConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param customValuesConfiguration The configuration of custom values for destination
       * parameter in `DestinationParameterValueConfiguration` .
       */
      public fun customValuesConfiguration(customValuesConfiguration: IResolvable)

      /**
       * @param customValuesConfiguration The configuration of custom values for destination
       * parameter in `DestinationParameterValueConfiguration` .
       */
      public
          fun customValuesConfiguration(customValuesConfiguration: CustomValuesConfigurationProperty)

      /**
       * @param customValuesConfiguration The configuration of custom values for destination
       * parameter in `DestinationParameterValueConfiguration` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7f29d0db7ddeae31a46399245ead8f82984fe2dc9a4044e831d4d12e9f92805d")
      public
          fun customValuesConfiguration(customValuesConfiguration: CustomValuesConfigurationProperty.Builder.() -> Unit)

      /**
       * @param selectAllValueOptions The configuration that selects all options.
       */
      public fun selectAllValueOptions(selectAllValueOptions: String)

      /**
       * @param sourceColumn the value to be set.
       */
      public fun sourceColumn(sourceColumn: IResolvable)

      /**
       * @param sourceColumn the value to be set.
       */
      public fun sourceColumn(sourceColumn: ColumnIdentifierProperty)

      /**
       * @param sourceColumn the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("acc2885bcb7d2d7730886c9d16888ea12a0c1efd98f0ce8fa26d5e870837b779")
      public fun sourceColumn(sourceColumn: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param sourceField The source field ID of the destination parameter.
       */
      public fun sourceField(sourceField: String)

      /**
       * @param sourceParameterName The source parameter name of the destination parameter.
       */
      public fun sourceParameterName(sourceParameterName: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DestinationParameterValueConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DestinationParameterValueConfigurationProperty.builder()

      /**
       * @param customValuesConfiguration The configuration of custom values for destination
       * parameter in `DestinationParameterValueConfiguration` .
       */
      override fun customValuesConfiguration(customValuesConfiguration: IResolvable) {
        cdkBuilder.customValuesConfiguration(customValuesConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param customValuesConfiguration The configuration of custom values for destination
       * parameter in `DestinationParameterValueConfiguration` .
       */
      override
          fun customValuesConfiguration(customValuesConfiguration: CustomValuesConfigurationProperty) {
        cdkBuilder.customValuesConfiguration(customValuesConfiguration.let(CustomValuesConfigurationProperty::unwrap))
      }

      /**
       * @param customValuesConfiguration The configuration of custom values for destination
       * parameter in `DestinationParameterValueConfiguration` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7f29d0db7ddeae31a46399245ead8f82984fe2dc9a4044e831d4d12e9f92805d")
      override
          fun customValuesConfiguration(customValuesConfiguration: CustomValuesConfigurationProperty.Builder.() -> Unit):
          Unit =
          customValuesConfiguration(CustomValuesConfigurationProperty(customValuesConfiguration))

      /**
       * @param selectAllValueOptions The configuration that selects all options.
       */
      override fun selectAllValueOptions(selectAllValueOptions: String) {
        cdkBuilder.selectAllValueOptions(selectAllValueOptions)
      }

      /**
       * @param sourceColumn the value to be set.
       */
      override fun sourceColumn(sourceColumn: IResolvable) {
        cdkBuilder.sourceColumn(sourceColumn.let(IResolvable::unwrap))
      }

      /**
       * @param sourceColumn the value to be set.
       */
      override fun sourceColumn(sourceColumn: ColumnIdentifierProperty) {
        cdkBuilder.sourceColumn(sourceColumn.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param sourceColumn the value to be set.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("acc2885bcb7d2d7730886c9d16888ea12a0c1efd98f0ce8fa26d5e870837b779")
      override fun sourceColumn(sourceColumn: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          sourceColumn(ColumnIdentifierProperty(sourceColumn))

      /**
       * @param sourceField The source field ID of the destination parameter.
       */
      override fun sourceField(sourceField: String) {
        cdkBuilder.sourceField(sourceField)
      }

      /**
       * @param sourceParameterName The source parameter name of the destination parameter.
       */
      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DestinationParameterValueConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DestinationParameterValueConfigurationProperty,
    ) : DestinationParameterValueConfigurationProperty {
      /**
       * The configuration of custom values for destination parameter in
       * `DestinationParameterValueConfiguration` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-customvaluesconfiguration)
       */
      override fun customValuesConfiguration(): Any? = unwrap(this).getCustomValuesConfiguration()

      /**
       * The configuration that selects all options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-selectallvalueoptions)
       */
      override fun selectAllValueOptions(): String? = unwrap(this).getSelectAllValueOptions()

      /**
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-sourcecolumn)
       */
      override fun sourceColumn(): Any? = unwrap(this).getSourceColumn()

      /**
       * The source field ID of the destination parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-sourcefield)
       */
      override fun sourceField(): String? = unwrap(this).getSourceField()

      /**
       * The source parameter name of the destination parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-sourceparametername)
       */
      override fun sourceParameterName(): String? = unwrap(this).getSourceParameterName()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DestinationParameterValueConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DestinationParameterValueConfigurationProperty):
          DestinationParameterValueConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DestinationParameterValueConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DestinationParameterValueConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PieChartSortConfigurationProperty {
    /**
     * The limit on the number of categories that are displayed in a pie chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html#cfn-quicksight-analysis-piechartsortconfiguration-categoryitemslimit)
     */
    public fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

    /**
     * The sort configuration of the category fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html#cfn-quicksight-analysis-piechartsortconfiguration-categorysort)
     */
    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    /**
     * The limit on the number of small multiples panels that are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html#cfn-quicksight-analysis-piechartsortconfiguration-smallmultipleslimitconfiguration)
     */
    public fun smallMultiplesLimitConfiguration(): Any? =
        unwrap(this).getSmallMultiplesLimitConfiguration()

    /**
     * The sort configuration of the small multiples field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html#cfn-quicksight-analysis-piechartsortconfiguration-smallmultiplessort)
     */
    public fun smallMultiplesSort(): Any? = unwrap(this).getSmallMultiplesSort()

    /**
     * A builder for [PieChartSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryItemsLimit The limit on the number of categories that are displayed in a pie
       * chart.
       */
      public fun categoryItemsLimit(categoryItemsLimit: IResolvable)

      /**
       * @param categoryItemsLimit The limit on the number of categories that are displayed in a pie
       * chart.
       */
      public fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty)

      /**
       * @param categoryItemsLimit The limit on the number of categories that are displayed in a pie
       * chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("096b62544dff446a02f720a4f5af1a4d7adc07ac1fcc7bfddb4c7493ddcc912e")
      public
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      public fun categorySort(categorySort: IResolvable)

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      public fun categorySort(categorySort: List<Any>)

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      public fun categorySort(vararg categorySort: Any)

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      public fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: IResolvable)

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      public
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty)

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d4d78b27cc77fbebb589ba080aa7111c2f6f14b14c2800bb18a1290cf7c5f4fe")
      public
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      public fun smallMultiplesSort(smallMultiplesSort: IResolvable)

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      public fun smallMultiplesSort(smallMultiplesSort: List<Any>)

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      public fun smallMultiplesSort(vararg smallMultiplesSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartSortConfigurationProperty.builder()

      /**
       * @param categoryItemsLimit The limit on the number of categories that are displayed in a pie
       * chart.
       */
      override fun categoryItemsLimit(categoryItemsLimit: IResolvable) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(IResolvable::unwrap))
      }

      /**
       * @param categoryItemsLimit The limit on the number of categories that are displayed in a pie
       * chart.
       */
      override fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param categoryItemsLimit The limit on the number of categories that are displayed in a pie
       * chart.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("096b62544dff446a02f720a4f5af1a4d7adc07ac1fcc7bfddb4c7493ddcc912e")
      override
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = categoryItemsLimit(ItemsLimitConfigurationProperty(categoryItemsLimit))

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      /**
       * @param categorySort The sort configuration of the category fields.
       */
      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      override fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: IResolvable) {
        cdkBuilder.smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      override
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param smallMultiplesLimitConfiguration The limit on the number of small multiples panels
       * that are displayed.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d4d78b27cc77fbebb589ba080aa7111c2f6f14b14c2800bb18a1290cf7c5f4fe")
      override
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty(smallMultiplesLimitConfiguration))

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      override fun smallMultiplesSort(smallMultiplesSort: IResolvable) {
        cdkBuilder.smallMultiplesSort(smallMultiplesSort.let(IResolvable::unwrap))
      }

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      override fun smallMultiplesSort(smallMultiplesSort: List<Any>) {
        cdkBuilder.smallMultiplesSort(smallMultiplesSort)
      }

      /**
       * @param smallMultiplesSort The sort configuration of the small multiples field.
       */
      override fun smallMultiplesSort(vararg smallMultiplesSort: Any): Unit =
          smallMultiplesSort(smallMultiplesSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartSortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartSortConfigurationProperty,
    ) : PieChartSortConfigurationProperty {
      /**
       * The limit on the number of categories that are displayed in a pie chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html#cfn-quicksight-analysis-piechartsortconfiguration-categoryitemslimit)
       */
      override fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

      /**
       * The sort configuration of the category fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html#cfn-quicksight-analysis-piechartsortconfiguration-categorysort)
       */
      override fun categorySort(): Any? = unwrap(this).getCategorySort()

      /**
       * The limit on the number of small multiples panels that are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html#cfn-quicksight-analysis-piechartsortconfiguration-smallmultipleslimitconfiguration)
       */
      override fun smallMultiplesLimitConfiguration(): Any? =
          unwrap(this).getSmallMultiplesLimitConfiguration()

      /**
       * The sort configuration of the small multiples field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html#cfn-quicksight-analysis-piechartsortconfiguration-smallmultiplessort)
       */
      override fun smallMultiplesSort(): Any? = unwrap(this).getSmallMultiplesSort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PieChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartSortConfigurationProperty):
          PieChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PieChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartSortConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface MaximumLabelTypeProperty {
    /**
     * The visibility of the maximum label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumlabeltype.html#cfn-quicksight-analysis-maximumlabeltype-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [MaximumLabelTypeProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param visibility The visibility of the maximum label.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MaximumLabelTypeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MaximumLabelTypeProperty.builder()

      /**
       * @param visibility The visibility of the maximum label.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MaximumLabelTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MaximumLabelTypeProperty,
    ) : MaximumLabelTypeProperty {
      /**
       * The visibility of the maximum label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumlabeltype.html#cfn-quicksight-analysis-maximumlabeltype-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): MaximumLabelTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.MaximumLabelTypeProperty):
          MaximumLabelTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MaximumLabelTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MaximumLabelTypeProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface DataSetReferenceProperty {
    /**
     * Dataset Amazon Resource Name (ARN).
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetreference.html#cfn-quicksight-analysis-datasetreference-datasetarn)
     */
    public fun dataSetArn(): String

    /**
     * Dataset placeholder.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetreference.html#cfn-quicksight-analysis-datasetreference-datasetplaceholder)
     */
    public fun dataSetPlaceholder(): String

    /**
     * A builder for [DataSetReferenceProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dataSetArn Dataset Amazon Resource Name (ARN). 
       */
      public fun dataSetArn(dataSetArn: String)

      /**
       * @param dataSetPlaceholder Dataset placeholder. 
       */
      public fun dataSetPlaceholder(dataSetPlaceholder: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataSetReferenceProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataSetReferenceProperty.builder()

      /**
       * @param dataSetArn Dataset Amazon Resource Name (ARN). 
       */
      override fun dataSetArn(dataSetArn: String) {
        cdkBuilder.dataSetArn(dataSetArn)
      }

      /**
       * @param dataSetPlaceholder Dataset placeholder. 
       */
      override fun dataSetPlaceholder(dataSetPlaceholder: String) {
        cdkBuilder.dataSetPlaceholder(dataSetPlaceholder)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataSetReferenceProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataSetReferenceProperty,
    ) : DataSetReferenceProperty {
      /**
       * Dataset Amazon Resource Name (ARN).
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetreference.html#cfn-quicksight-analysis-datasetreference-datasetarn)
       */
      override fun dataSetArn(): String = unwrap(this).getDataSetArn()

      /**
       * Dataset placeholder.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetreference.html#cfn-quicksight-analysis-datasetreference-datasetplaceholder)
       */
      override fun dataSetPlaceholder(): String = unwrap(this).getDataSetPlaceholder()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DataSetReferenceProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DataSetReferenceProperty):
          DataSetReferenceProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataSetReferenceProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataSetReferenceProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface ScatterPlotCategoricallyAggregatedFieldWellsProperty {
    /**
     * The category field well of a scatter plot.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-category)
     */
    public fun category(): Any? = unwrap(this).getCategory()

    /**
     * The label field well of a scatter plot.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-label)
     */
    public fun label(): Any? = unwrap(this).getLabel()

    /**
     * The size field well of a scatter plot.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-size)
     */
    public fun size(): Any? = unwrap(this).getSize()

    /**
     * The x-axis field well of a scatter plot.
     *
     * The x-axis is aggregated by category.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-xaxis)
     */
    public fun xAxis(): Any? = unwrap(this).getXAxis()

    /**
     * The y-axis field well of a scatter plot.
     *
     * The y-axis is aggregated by category.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-yaxis)
     */
    public fun yAxis(): Any? = unwrap(this).getYAxis()

    /**
     * A builder for [ScatterPlotCategoricallyAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param category The category field well of a scatter plot.
       */
      public fun category(category: IResolvable)

      /**
       * @param category The category field well of a scatter plot.
       */
      public fun category(category: List<Any>)

      /**
       * @param category The category field well of a scatter plot.
       */
      public fun category(vararg category: Any)

      /**
       * @param label The label field well of a scatter plot.
       */
      public fun label(label: IResolvable)

      /**
       * @param label The label field well of a scatter plot.
       */
      public fun label(label: List<Any>)

      /**
       * @param label The label field well of a scatter plot.
       */
      public fun label(vararg label: Any)

      /**
       * @param size The size field well of a scatter plot.
       */
      public fun size(size: IResolvable)

      /**
       * @param size The size field well of a scatter plot.
       */
      public fun size(size: List<Any>)

      /**
       * @param size The size field well of a scatter plot.
       */
      public fun size(vararg size: Any)

      /**
       * @param xAxis The x-axis field well of a scatter plot.
       * The x-axis is aggregated by category.
       */
      public fun xAxis(xAxis: IResolvable)

      /**
       * @param xAxis The x-axis field well of a scatter plot.
       * The x-axis is aggregated by category.
       */
      public fun xAxis(xAxis: List<Any>)

      /**
       * @param xAxis The x-axis field well of a scatter plot.
       * The x-axis is aggregated by category.
       */
      public fun xAxis(vararg xAxis: Any)

      /**
       * @param yAxis The y-axis field well of a scatter plot.
       * The y-axis is aggregated by category.
       */
      public fun yAxis(yAxis: IResolvable)

      /**
       * @param yAxis The y-axis field well of a scatter plot.
       * The y-axis is aggregated by category.
       */
      public fun yAxis(yAxis: List<Any>)

      /**
       * @param yAxis The y-axis field well of a scatter plot.
       * The y-axis is aggregated by category.
       */
      public fun yAxis(vararg yAxis: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotCategoricallyAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotCategoricallyAggregatedFieldWellsProperty.builder()

      /**
       * @param category The category field well of a scatter plot.
       */
      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      /**
       * @param category The category field well of a scatter plot.
       */
      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      /**
       * @param category The category field well of a scatter plot.
       */
      override fun category(vararg category: Any): Unit = category(category.toList())

      /**
       * @param label The label field well of a scatter plot.
       */
      override fun label(label: IResolvable) {
        cdkBuilder.label(label.let(IResolvable::unwrap))
      }

      /**
       * @param label The label field well of a scatter plot.
       */
      override fun label(label: List<Any>) {
        cdkBuilder.label(label)
      }

      /**
       * @param label The label field well of a scatter plot.
       */
      override fun label(vararg label: Any): Unit = label(label.toList())

      /**
       * @param size The size field well of a scatter plot.
       */
      override fun size(size: IResolvable) {
        cdkBuilder.size(size.let(IResolvable::unwrap))
      }

      /**
       * @param size The size field well of a scatter plot.
       */
      override fun size(size: List<Any>) {
        cdkBuilder.size(size)
      }

      /**
       * @param size The size field well of a scatter plot.
       */
      override fun size(vararg size: Any): Unit = size(size.toList())

      /**
       * @param xAxis The x-axis field well of a scatter plot.
       * The x-axis is aggregated by category.
       */
      override fun xAxis(xAxis: IResolvable) {
        cdkBuilder.xAxis(xAxis.let(IResolvable::unwrap))
      }

      /**
       * @param xAxis The x-axis field well of a scatter plot.
       * The x-axis is aggregated by category.
       */
      override fun xAxis(xAxis: List<Any>) {
        cdkBuilder.xAxis(xAxis)
      }

      /**
       * @param xAxis The x-axis field well of a scatter plot.
       * The x-axis is aggregated by category.
       */
      override fun xAxis(vararg xAxis: Any): Unit = xAxis(xAxis.toList())

      /**
       * @param yAxis The y-axis field well of a scatter plot.
       * The y-axis is aggregated by category.
       */
      override fun yAxis(yAxis: IResolvable) {
        cdkBuilder.yAxis(yAxis.let(IResolvable::unwrap))
      }

      /**
       * @param yAxis The y-axis field well of a scatter plot.
       * The y-axis is aggregated by category.
       */
      override fun yAxis(yAxis: List<Any>) {
        cdkBuilder.yAxis(yAxis)
      }

      /**
       * @param yAxis The y-axis field well of a scatter plot.
       * The y-axis is aggregated by category.
       */
      override fun yAxis(vararg yAxis: Any): Unit = yAxis(yAxis.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotCategoricallyAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotCategoricallyAggregatedFieldWellsProperty,
    ) : ScatterPlotCategoricallyAggregatedFieldWellsProperty {
      /**
       * The category field well of a scatter plot.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-category)
       */
      override fun category(): Any? = unwrap(this).getCategory()

      /**
       * The label field well of a scatter plot.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-label)
       */
      override fun label(): Any? = unwrap(this).getLabel()

      /**
       * The size field well of a scatter plot.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-size)
       */
      override fun size(): Any? = unwrap(this).getSize()

      /**
       * The x-axis field well of a scatter plot.
       *
       * The x-axis is aggregated by category.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-xaxis)
       */
      override fun xAxis(): Any? = unwrap(this).getXAxis()

      /**
       * The y-axis field well of a scatter plot.
       *
       * The y-axis is aggregated by category.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-yaxis)
       */
      override fun yAxis(): Any? = unwrap(this).getYAxis()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ScatterPlotCategoricallyAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotCategoricallyAggregatedFieldWellsProperty):
          ScatterPlotCategoricallyAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ScatterPlotCategoricallyAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ScatterPlotCategoricallyAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface KPIConditionalFormattingOptionProperty {
    /**
     * The conditional formatting for the actual value of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html#cfn-quicksight-analysis-kpiconditionalformattingoption-actualvalue)
     */
    public fun actualValue(): Any? = unwrap(this).getActualValue()

    /**
     * The conditional formatting for the comparison value of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html#cfn-quicksight-analysis-kpiconditionalformattingoption-comparisonvalue)
     */
    public fun comparisonValue(): Any? = unwrap(this).getComparisonValue()

    /**
     * The conditional formatting for the primary value of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html#cfn-quicksight-analysis-kpiconditionalformattingoption-primaryvalue)
     */
    public fun primaryValue(): Any? = unwrap(this).getPrimaryValue()

    /**
     * The conditional formatting for the progress bar of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html#cfn-quicksight-analysis-kpiconditionalformattingoption-progressbar)
     */
    public fun progressBar(): Any? = unwrap(this).getProgressBar()

    /**
     * A builder for [KPIConditionalFormattingOptionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actualValue The conditional formatting for the actual value of a KPI visual.
       */
      public fun actualValue(actualValue: IResolvable)

      /**
       * @param actualValue The conditional formatting for the actual value of a KPI visual.
       */
      public fun actualValue(actualValue: KPIActualValueConditionalFormattingProperty)

      /**
       * @param actualValue The conditional formatting for the actual value of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f48f8020cff8ae7473c80538bf43587633331ca010c47afcd6d569dc00ddd61e")
      public
          fun actualValue(actualValue: KPIActualValueConditionalFormattingProperty.Builder.() -> Unit)

      /**
       * @param comparisonValue The conditional formatting for the comparison value of a KPI visual.
       */
      public fun comparisonValue(comparisonValue: IResolvable)

      /**
       * @param comparisonValue The conditional formatting for the comparison value of a KPI visual.
       */
      public fun comparisonValue(comparisonValue: KPIComparisonValueConditionalFormattingProperty)

      /**
       * @param comparisonValue The conditional formatting for the comparison value of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5eeed50bd3eaf5dfa3309b4b5acd1919a68effd224d1bf028c9016e3ab34f89d")
      public
          fun comparisonValue(comparisonValue: KPIComparisonValueConditionalFormattingProperty.Builder.() -> Unit)

      /**
       * @param primaryValue The conditional formatting for the primary value of a KPI visual.
       */
      public fun primaryValue(primaryValue: IResolvable)

      /**
       * @param primaryValue The conditional formatting for the primary value of a KPI visual.
       */
      public fun primaryValue(primaryValue: KPIPrimaryValueConditionalFormattingProperty)

      /**
       * @param primaryValue The conditional formatting for the primary value of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f09d4c862f72505bb5c53950ed5e779ea6ec65ba6025da78cf32b6abfed9bfc3")
      public
          fun primaryValue(primaryValue: KPIPrimaryValueConditionalFormattingProperty.Builder.() -> Unit)

      /**
       * @param progressBar The conditional formatting for the progress bar of a KPI visual.
       */
      public fun progressBar(progressBar: IResolvable)

      /**
       * @param progressBar The conditional formatting for the progress bar of a KPI visual.
       */
      public fun progressBar(progressBar: KPIProgressBarConditionalFormattingProperty)

      /**
       * @param progressBar The conditional formatting for the progress bar of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("31b6b0d950efb0f629602c771e0035bee624f7f16ee55d3ef4b85fcbcefcb231")
      public
          fun progressBar(progressBar: KPIProgressBarConditionalFormattingProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConditionalFormattingOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConditionalFormattingOptionProperty.builder()

      /**
       * @param actualValue The conditional formatting for the actual value of a KPI visual.
       */
      override fun actualValue(actualValue: IResolvable) {
        cdkBuilder.actualValue(actualValue.let(IResolvable::unwrap))
      }

      /**
       * @param actualValue The conditional formatting for the actual value of a KPI visual.
       */
      override fun actualValue(actualValue: KPIActualValueConditionalFormattingProperty) {
        cdkBuilder.actualValue(actualValue.let(KPIActualValueConditionalFormattingProperty::unwrap))
      }

      /**
       * @param actualValue The conditional formatting for the actual value of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f48f8020cff8ae7473c80538bf43587633331ca010c47afcd6d569dc00ddd61e")
      override
          fun actualValue(actualValue: KPIActualValueConditionalFormattingProperty.Builder.() -> Unit):
          Unit = actualValue(KPIActualValueConditionalFormattingProperty(actualValue))

      /**
       * @param comparisonValue The conditional formatting for the comparison value of a KPI visual.
       */
      override fun comparisonValue(comparisonValue: IResolvable) {
        cdkBuilder.comparisonValue(comparisonValue.let(IResolvable::unwrap))
      }

      /**
       * @param comparisonValue The conditional formatting for the comparison value of a KPI visual.
       */
      override
          fun comparisonValue(comparisonValue: KPIComparisonValueConditionalFormattingProperty) {
        cdkBuilder.comparisonValue(comparisonValue.let(KPIComparisonValueConditionalFormattingProperty::unwrap))
      }

      /**
       * @param comparisonValue The conditional formatting for the comparison value of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5eeed50bd3eaf5dfa3309b4b5acd1919a68effd224d1bf028c9016e3ab34f89d")
      override
          fun comparisonValue(comparisonValue: KPIComparisonValueConditionalFormattingProperty.Builder.() -> Unit):
          Unit = comparisonValue(KPIComparisonValueConditionalFormattingProperty(comparisonValue))

      /**
       * @param primaryValue The conditional formatting for the primary value of a KPI visual.
       */
      override fun primaryValue(primaryValue: IResolvable) {
        cdkBuilder.primaryValue(primaryValue.let(IResolvable::unwrap))
      }

      /**
       * @param primaryValue The conditional formatting for the primary value of a KPI visual.
       */
      override fun primaryValue(primaryValue: KPIPrimaryValueConditionalFormattingProperty) {
        cdkBuilder.primaryValue(primaryValue.let(KPIPrimaryValueConditionalFormattingProperty::unwrap))
      }

      /**
       * @param primaryValue The conditional formatting for the primary value of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f09d4c862f72505bb5c53950ed5e779ea6ec65ba6025da78cf32b6abfed9bfc3")
      override
          fun primaryValue(primaryValue: KPIPrimaryValueConditionalFormattingProperty.Builder.() -> Unit):
          Unit = primaryValue(KPIPrimaryValueConditionalFormattingProperty(primaryValue))

      /**
       * @param progressBar The conditional formatting for the progress bar of a KPI visual.
       */
      override fun progressBar(progressBar: IResolvable) {
        cdkBuilder.progressBar(progressBar.let(IResolvable::unwrap))
      }

      /**
       * @param progressBar The conditional formatting for the progress bar of a KPI visual.
       */
      override fun progressBar(progressBar: KPIProgressBarConditionalFormattingProperty) {
        cdkBuilder.progressBar(progressBar.let(KPIProgressBarConditionalFormattingProperty::unwrap))
      }

      /**
       * @param progressBar The conditional formatting for the progress bar of a KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("31b6b0d950efb0f629602c771e0035bee624f7f16ee55d3ef4b85fcbcefcb231")
      override
          fun progressBar(progressBar: KPIProgressBarConditionalFormattingProperty.Builder.() -> Unit):
          Unit = progressBar(KPIProgressBarConditionalFormattingProperty(progressBar))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConditionalFormattingOptionProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConditionalFormattingOptionProperty,
    ) : KPIConditionalFormattingOptionProperty {
      /**
       * The conditional formatting for the actual value of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html#cfn-quicksight-analysis-kpiconditionalformattingoption-actualvalue)
       */
      override fun actualValue(): Any? = unwrap(this).getActualValue()

      /**
       * The conditional formatting for the comparison value of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html#cfn-quicksight-analysis-kpiconditionalformattingoption-comparisonvalue)
       */
      override fun comparisonValue(): Any? = unwrap(this).getComparisonValue()

      /**
       * The conditional formatting for the primary value of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html#cfn-quicksight-analysis-kpiconditionalformattingoption-primaryvalue)
       */
      override fun primaryValue(): Any? = unwrap(this).getPrimaryValue()

      /**
       * The conditional formatting for the progress bar of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html#cfn-quicksight-analysis-kpiconditionalformattingoption-progressbar)
       */
      override fun progressBar(): Any? = unwrap(this).getProgressBar()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          KPIConditionalFormattingOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConditionalFormattingOptionProperty):
          KPIConditionalFormattingOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIConditionalFormattingOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIConditionalFormattingOptionProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ParameterTextAreaControlProperty {
    /**
     * The delimiter that is used to separate the lines in text.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-delimiter)
     */
    public fun delimiter(): String? = unwrap(this).getDelimiter()

    /**
     * The display options of a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The ID of the `ParameterTextAreaControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-parametercontrolid)
     */
    public fun parameterControlId(): String

    /**
     * The source parameter name of the `ParameterTextAreaControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-sourceparametername)
     */
    public fun sourceParameterName(): String

    /**
     * The title of the `ParameterTextAreaControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-title)
     */
    public fun title(): String

    /**
     * A builder for [ParameterTextAreaControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param delimiter The delimiter that is used to separate the lines in text.
       */
      public fun delimiter(delimiter: String)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a46b5047340dbc9b1357e4c175e7839d4d54b5a50c5273c384b56d27642d3d3c")
      public
          fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param parameterControlId The ID of the `ParameterTextAreaControl` . 
       */
      public fun parameterControlId(parameterControlId: String)

      /**
       * @param sourceParameterName The source parameter name of the `ParameterTextAreaControl` . 
       */
      public fun sourceParameterName(sourceParameterName: String)

      /**
       * @param title The title of the `ParameterTextAreaControl` . 
       */
      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterTextAreaControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterTextAreaControlProperty.builder()

      /**
       * @param delimiter The delimiter that is used to separate the lines in text.
       */
      override fun delimiter(delimiter: String) {
        cdkBuilder.delimiter(delimiter)
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(TextAreaControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a46b5047340dbc9b1357e4c175e7839d4d54b5a50c5273c384b56d27642d3d3c")
      override
          fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(TextAreaControlDisplayOptionsProperty(displayOptions))

      /**
       * @param parameterControlId The ID of the `ParameterTextAreaControl` . 
       */
      override fun parameterControlId(parameterControlId: String) {
        cdkBuilder.parameterControlId(parameterControlId)
      }

      /**
       * @param sourceParameterName The source parameter name of the `ParameterTextAreaControl` . 
       */
      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      /**
       * @param title The title of the `ParameterTextAreaControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterTextAreaControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterTextAreaControlProperty,
    ) : ParameterTextAreaControlProperty {
      /**
       * The delimiter that is used to separate the lines in text.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-delimiter)
       */
      override fun delimiter(): String? = unwrap(this).getDelimiter()

      /**
       * The display options of a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The ID of the `ParameterTextAreaControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-parametercontrolid)
       */
      override fun parameterControlId(): String = unwrap(this).getParameterControlId()

      /**
       * The source parameter name of the `ParameterTextAreaControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-sourceparametername)
       */
      override fun sourceParameterName(): String = unwrap(this).getSourceParameterName()

      /**
       * The title of the `ParameterTextAreaControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ParameterTextAreaControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterTextAreaControlProperty):
          ParameterTextAreaControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterTextAreaControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParameterTextAreaControlProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface StringParameterProperty {
    /**
     * A display name for a string parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameter.html#cfn-quicksight-analysis-stringparameter-name)
     */
    public fun name(): String

    /**
     * The values of a string parameter.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameter.html#cfn-quicksight-analysis-stringparameter-values)
     */
    public fun values(): List<String>

    /**
     * A builder for [StringParameterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param name A display name for a string parameter. 
       */
      public fun name(name: String)

      /**
       * @param values The values of a string parameter. 
       */
      public fun values(values: List<String>)

      /**
       * @param values The values of a string parameter. 
       */
      public fun values(vararg values: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringParameterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringParameterProperty.builder()

      /**
       * @param name A display name for a string parameter. 
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param values The values of a string parameter. 
       */
      override fun values(values: List<String>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The values of a string parameter. 
       */
      override fun values(vararg values: String): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringParameterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringParameterProperty,
    ) : StringParameterProperty {
      /**
       * A display name for a string parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameter.html#cfn-quicksight-analysis-stringparameter-name)
       */
      override fun name(): String = unwrap(this).getName()

      /**
       * The values of a string parameter.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameter.html#cfn-quicksight-analysis-stringparameter-values)
       */
      override fun values(): List<String> = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): StringParameterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.StringParameterProperty):
          StringParameterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: StringParameterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.StringParameterProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface PivotTableConditionalFormattingOptionProperty {
    /**
     * The cell conditional formatting option for a pivot table.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformattingoption.html#cfn-quicksight-analysis-pivottableconditionalformattingoption-cell)
     */
    public fun cell(): Any? = unwrap(this).getCell()

    /**
     * A builder for [PivotTableConditionalFormattingOptionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param cell The cell conditional formatting option for a pivot table.
       */
      public fun cell(cell: IResolvable)

      /**
       * @param cell The cell conditional formatting option for a pivot table.
       */
      public fun cell(cell: PivotTableCellConditionalFormattingProperty)

      /**
       * @param cell The cell conditional formatting option for a pivot table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be5079016e80bc9442d94892d6a0d45cf1bdac9de4f63e35b22d72ebfbe386fe")
      public fun cell(cell: PivotTableCellConditionalFormattingProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingOptionProperty.builder()

      /**
       * @param cell The cell conditional formatting option for a pivot table.
       */
      override fun cell(cell: IResolvable) {
        cdkBuilder.cell(cell.let(IResolvable::unwrap))
      }

      /**
       * @param cell The cell conditional formatting option for a pivot table.
       */
      override fun cell(cell: PivotTableCellConditionalFormattingProperty) {
        cdkBuilder.cell(cell.let(PivotTableCellConditionalFormattingProperty::unwrap))
      }

      /**
       * @param cell The cell conditional formatting option for a pivot table.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be5079016e80bc9442d94892d6a0d45cf1bdac9de4f63e35b22d72ebfbe386fe")
      override fun cell(cell: PivotTableCellConditionalFormattingProperty.Builder.() -> Unit): Unit
          = cell(PivotTableCellConditionalFormattingProperty(cell))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingOptionProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingOptionProperty,
    ) : PivotTableConditionalFormattingOptionProperty {
      /**
       * The cell conditional formatting option for a pivot table.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformattingoption.html#cfn-quicksight-analysis-pivottableconditionalformattingoption-cell)
       */
      override fun cell(): Any? = unwrap(this).getCell()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableConditionalFormattingOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingOptionProperty):
          PivotTableConditionalFormattingOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableConditionalFormattingOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableConditionalFormattingOptionProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface KPIFieldWellsProperty {
    /**
     * The target value field wells of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpifieldwells.html#cfn-quicksight-analysis-kpifieldwells-targetvalues)
     */
    public fun targetValues(): Any? = unwrap(this).getTargetValues()

    /**
     * The trend group field wells of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpifieldwells.html#cfn-quicksight-analysis-kpifieldwells-trendgroups)
     */
    public fun trendGroups(): Any? = unwrap(this).getTrendGroups()

    /**
     * The value field wells of a KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpifieldwells.html#cfn-quicksight-analysis-kpifieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [KPIFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param targetValues The target value field wells of a KPI visual.
       */
      public fun targetValues(targetValues: IResolvable)

      /**
       * @param targetValues The target value field wells of a KPI visual.
       */
      public fun targetValues(targetValues: List<Any>)

      /**
       * @param targetValues The target value field wells of a KPI visual.
       */
      public fun targetValues(vararg targetValues: Any)

      /**
       * @param trendGroups The trend group field wells of a KPI visual.
       */
      public fun trendGroups(trendGroups: IResolvable)

      /**
       * @param trendGroups The trend group field wells of a KPI visual.
       */
      public fun trendGroups(trendGroups: List<Any>)

      /**
       * @param trendGroups The trend group field wells of a KPI visual.
       */
      public fun trendGroups(vararg trendGroups: Any)

      /**
       * @param values The value field wells of a KPI visual.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The value field wells of a KPI visual.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The value field wells of a KPI visual.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIFieldWellsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIFieldWellsProperty.builder()

      /**
       * @param targetValues The target value field wells of a KPI visual.
       */
      override fun targetValues(targetValues: IResolvable) {
        cdkBuilder.targetValues(targetValues.let(IResolvable::unwrap))
      }

      /**
       * @param targetValues The target value field wells of a KPI visual.
       */
      override fun targetValues(targetValues: List<Any>) {
        cdkBuilder.targetValues(targetValues)
      }

      /**
       * @param targetValues The target value field wells of a KPI visual.
       */
      override fun targetValues(vararg targetValues: Any): Unit =
          targetValues(targetValues.toList())

      /**
       * @param trendGroups The trend group field wells of a KPI visual.
       */
      override fun trendGroups(trendGroups: IResolvable) {
        cdkBuilder.trendGroups(trendGroups.let(IResolvable::unwrap))
      }

      /**
       * @param trendGroups The trend group field wells of a KPI visual.
       */
      override fun trendGroups(trendGroups: List<Any>) {
        cdkBuilder.trendGroups(trendGroups)
      }

      /**
       * @param trendGroups The trend group field wells of a KPI visual.
       */
      override fun trendGroups(vararg trendGroups: Any): Unit = trendGroups(trendGroups.toList())

      /**
       * @param values The value field wells of a KPI visual.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The value field wells of a KPI visual.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The value field wells of a KPI visual.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIFieldWellsProperty,
    ) : KPIFieldWellsProperty {
      /**
       * The target value field wells of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpifieldwells.html#cfn-quicksight-analysis-kpifieldwells-targetvalues)
       */
      override fun targetValues(): Any? = unwrap(this).getTargetValues()

      /**
       * The trend group field wells of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpifieldwells.html#cfn-quicksight-analysis-kpifieldwells-trendgroups)
       */
      override fun trendGroups(): Any? = unwrap(this).getTrendGroups()

      /**
       * The value field wells of a KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpifieldwells.html#cfn-quicksight-analysis-kpifieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): KPIFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIFieldWellsProperty):
          KPIFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIFieldWellsProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface CategoricalDimensionFieldProperty {
    /**
     * The column that is used in the `CategoricalDimensionField` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html#cfn-quicksight-analysis-categoricaldimensionfield-column)
     */
    public fun column(): Any

    /**
     * The custom field ID.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html#cfn-quicksight-analysis-categoricaldimensionfield-fieldid)
     */
    public fun fieldId(): String

    /**
     * The format configuration of the field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html#cfn-quicksight-analysis-categoricaldimensionfield-formatconfiguration)
     */
    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    /**
     * The custom hierarchy ID.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html#cfn-quicksight-analysis-categoricaldimensionfield-hierarchyid)
     */
    public fun hierarchyId(): String? = unwrap(this).getHierarchyId()

    /**
     * A builder for [CategoricalDimensionFieldProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param column The column that is used in the `CategoricalDimensionField` . 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that is used in the `CategoricalDimensionField` . 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that is used in the `CategoricalDimensionField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9ca9947d05b693cdc924fc70d75db861d1eec4b6bcdf47619efdc364d7d27cd3")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param fieldId The custom field ID. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: IResolvable)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e6512175ef9ffbcfd8fc860083f2f2f7aeab5fa69ddac2892c63522fe9605d76")
      public
          fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param hierarchyId The custom hierarchy ID.
       */
      public fun hierarchyId(hierarchyId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoricalDimensionFieldProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoricalDimensionFieldProperty.builder()

      /**
       * @param column The column that is used in the `CategoricalDimensionField` . 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that is used in the `CategoricalDimensionField` . 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that is used in the `CategoricalDimensionField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9ca9947d05b693cdc924fc70d75db861d1eec4b6bcdf47619efdc364d7d27cd3")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param fieldId The custom field ID. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(StringFormatConfigurationProperty::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e6512175ef9ffbcfd8fc860083f2f2f7aeab5fa69ddac2892c63522fe9605d76")
      override
          fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(StringFormatConfigurationProperty(formatConfiguration))

      /**
       * @param hierarchyId The custom hierarchy ID.
       */
      override fun hierarchyId(hierarchyId: String) {
        cdkBuilder.hierarchyId(hierarchyId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoricalDimensionFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoricalDimensionFieldProperty,
    ) : CategoricalDimensionFieldProperty {
      /**
       * The column that is used in the `CategoricalDimensionField` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html#cfn-quicksight-analysis-categoricaldimensionfield-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The custom field ID.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html#cfn-quicksight-analysis-categoricaldimensionfield-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The format configuration of the field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html#cfn-quicksight-analysis-categoricaldimensionfield-formatconfiguration)
       */
      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

      /**
       * The custom hierarchy ID.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html#cfn-quicksight-analysis-categoricaldimensionfield-hierarchyid)
       */
      override fun hierarchyId(): String? = unwrap(this).getHierarchyId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          CategoricalDimensionFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoricalDimensionFieldProperty):
          CategoricalDimensionFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CategoricalDimensionFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.CategoricalDimensionFieldProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface SankeyDiagramSortConfigurationProperty {
    /**
     * The limit on the number of destination nodes that are displayed in a sankey diagram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramsortconfiguration.html#cfn-quicksight-analysis-sankeydiagramsortconfiguration-destinationitemslimit)
     */
    public fun destinationItemsLimit(): Any? = unwrap(this).getDestinationItemsLimit()

    /**
     * The limit on the number of source nodes that are displayed in a sankey diagram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramsortconfiguration.html#cfn-quicksight-analysis-sankeydiagramsortconfiguration-sourceitemslimit)
     */
    public fun sourceItemsLimit(): Any? = unwrap(this).getSourceItemsLimit()

    /**
     * The sort configuration of the weight fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramsortconfiguration.html#cfn-quicksight-analysis-sankeydiagramsortconfiguration-weightsort)
     */
    public fun weightSort(): Any? = unwrap(this).getWeightSort()

    /**
     * A builder for [SankeyDiagramSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param destinationItemsLimit The limit on the number of destination nodes that are
       * displayed in a sankey diagram.
       */
      public fun destinationItemsLimit(destinationItemsLimit: IResolvable)

      /**
       * @param destinationItemsLimit The limit on the number of destination nodes that are
       * displayed in a sankey diagram.
       */
      public fun destinationItemsLimit(destinationItemsLimit: ItemsLimitConfigurationProperty)

      /**
       * @param destinationItemsLimit The limit on the number of destination nodes that are
       * displayed in a sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b24beb75b690c0759d32483ce51ec1c23182a12e9cc5a29f82a1ca0bff22e934")
      public
          fun destinationItemsLimit(destinationItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param sourceItemsLimit The limit on the number of source nodes that are displayed in a
       * sankey diagram.
       */
      public fun sourceItemsLimit(sourceItemsLimit: IResolvable)

      /**
       * @param sourceItemsLimit The limit on the number of source nodes that are displayed in a
       * sankey diagram.
       */
      public fun sourceItemsLimit(sourceItemsLimit: ItemsLimitConfigurationProperty)

      /**
       * @param sourceItemsLimit The limit on the number of source nodes that are displayed in a
       * sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f9427bf68d0003b322836a55f22a3c1e0b844d70e6997ca42c8b6a29e678128f")
      public
          fun sourceItemsLimit(sourceItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      /**
       * @param weightSort The sort configuration of the weight fields.
       */
      public fun weightSort(weightSort: IResolvable)

      /**
       * @param weightSort The sort configuration of the weight fields.
       */
      public fun weightSort(weightSort: List<Any>)

      /**
       * @param weightSort The sort configuration of the weight fields.
       */
      public fun weightSort(vararg weightSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramSortConfigurationProperty.builder()

      /**
       * @param destinationItemsLimit The limit on the number of destination nodes that are
       * displayed in a sankey diagram.
       */
      override fun destinationItemsLimit(destinationItemsLimit: IResolvable) {
        cdkBuilder.destinationItemsLimit(destinationItemsLimit.let(IResolvable::unwrap))
      }

      /**
       * @param destinationItemsLimit The limit on the number of destination nodes that are
       * displayed in a sankey diagram.
       */
      override fun destinationItemsLimit(destinationItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.destinationItemsLimit(destinationItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param destinationItemsLimit The limit on the number of destination nodes that are
       * displayed in a sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b24beb75b690c0759d32483ce51ec1c23182a12e9cc5a29f82a1ca0bff22e934")
      override
          fun destinationItemsLimit(destinationItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = destinationItemsLimit(ItemsLimitConfigurationProperty(destinationItemsLimit))

      /**
       * @param sourceItemsLimit The limit on the number of source nodes that are displayed in a
       * sankey diagram.
       */
      override fun sourceItemsLimit(sourceItemsLimit: IResolvable) {
        cdkBuilder.sourceItemsLimit(sourceItemsLimit.let(IResolvable::unwrap))
      }

      /**
       * @param sourceItemsLimit The limit on the number of source nodes that are displayed in a
       * sankey diagram.
       */
      override fun sourceItemsLimit(sourceItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.sourceItemsLimit(sourceItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      /**
       * @param sourceItemsLimit The limit on the number of source nodes that are displayed in a
       * sankey diagram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f9427bf68d0003b322836a55f22a3c1e0b844d70e6997ca42c8b6a29e678128f")
      override
          fun sourceItemsLimit(sourceItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = sourceItemsLimit(ItemsLimitConfigurationProperty(sourceItemsLimit))

      /**
       * @param weightSort The sort configuration of the weight fields.
       */
      override fun weightSort(weightSort: IResolvable) {
        cdkBuilder.weightSort(weightSort.let(IResolvable::unwrap))
      }

      /**
       * @param weightSort The sort configuration of the weight fields.
       */
      override fun weightSort(weightSort: List<Any>) {
        cdkBuilder.weightSort(weightSort)
      }

      /**
       * @param weightSort The sort configuration of the weight fields.
       */
      override fun weightSort(vararg weightSort: Any): Unit = weightSort(weightSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramSortConfigurationProperty,
    ) : SankeyDiagramSortConfigurationProperty {
      /**
       * The limit on the number of destination nodes that are displayed in a sankey diagram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramsortconfiguration.html#cfn-quicksight-analysis-sankeydiagramsortconfiguration-destinationitemslimit)
       */
      override fun destinationItemsLimit(): Any? = unwrap(this).getDestinationItemsLimit()

      /**
       * The limit on the number of source nodes that are displayed in a sankey diagram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramsortconfiguration.html#cfn-quicksight-analysis-sankeydiagramsortconfiguration-sourceitemslimit)
       */
      override fun sourceItemsLimit(): Any? = unwrap(this).getSourceItemsLimit()

      /**
       * The sort configuration of the weight fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramsortconfiguration.html#cfn-quicksight-analysis-sankeydiagramsortconfiguration-weightsort)
       */
      override fun weightSort(): Any? = unwrap(this).getWeightSort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SankeyDiagramSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramSortConfigurationProperty):
          SankeyDiagramSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SankeyDiagramSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SankeyDiagramSortConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface GeospatialMapVisualProperty {
    /**
     * The list of custom actions that are configured for a visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-actions)
     */
    public fun actions(): Any? = unwrap(this).getActions()

    /**
     * The configuration settings of the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-chartconfiguration)
     */
    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    /**
     * The column hierarchy that is used during drill-downs and drill-ups.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-columnhierarchies)
     */
    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    /**
     * The subtitle that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-subtitle)
     */
    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    /**
     * The title that is displayed on the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-title)
     */
    public fun title(): Any? = unwrap(this).getTitle()

    /**
     * The unique identifier of a visual.
     *
     * This identifier must be unique within the context of a dashboard, template, or analysis. Two
     * dashboards, analyses, or templates can have visuals with the same identifiers..
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-visualid)
     */
    public fun visualId(): String

    /**
     * A builder for [GeospatialMapVisualProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: IResolvable)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(actions: List<Any>)

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      public fun actions(vararg actions: Any)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: IResolvable)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      public fun chartConfiguration(chartConfiguration: GeospatialMapConfigurationProperty)

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("74916e7c7fe0bfa2aad2315256eb905d1e14043b01e387620cee70a674325769")
      public
          fun chartConfiguration(chartConfiguration: GeospatialMapConfigurationProperty.Builder.() -> Unit)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: IResolvable)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(columnHierarchies: List<Any>)

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      public fun columnHierarchies(vararg columnHierarchies: Any)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: IResolvable)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("75491c53e731fe46509cc5e3170ebca570e41336e4a1106ad7c296f569c979c8")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: IResolvable)

      /**
       * @param title The title that is displayed on the visual.
       */
      public fun title(title: VisualTitleLabelOptionsProperty)

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ca9e0e28e0b150892551dd4e7784205a51f07d1850331c35d6b632ac0f51cec8")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapVisualProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapVisualProperty.builder()

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      /**
       * @param actions The list of custom actions that are configured for a visual.
       */
      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      override fun chartConfiguration(chartConfiguration: GeospatialMapConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(GeospatialMapConfigurationProperty::unwrap))
      }

      /**
       * @param chartConfiguration The configuration settings of the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("74916e7c7fe0bfa2aad2315256eb905d1e14043b01e387620cee70a674325769")
      override
          fun chartConfiguration(chartConfiguration: GeospatialMapConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(GeospatialMapConfigurationProperty(chartConfiguration))

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      /**
       * @param columnHierarchies The column hierarchy that is used during drill-downs and
       * drill-ups.
       */
      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param subtitle The subtitle that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("75491c53e731fe46509cc5e3170ebca570e41336e4a1106ad7c296f569c979c8")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      /**
       * @param title The title that is displayed on the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ca9e0e28e0b150892551dd4e7784205a51f07d1850331c35d6b632ac0f51cec8")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      /**
       * @param visualId The unique identifier of a visual. 
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       */
      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapVisualProperty,
    ) : GeospatialMapVisualProperty {
      /**
       * The list of custom actions that are configured for a visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-actions)
       */
      override fun actions(): Any? = unwrap(this).getActions()

      /**
       * The configuration settings of the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-chartconfiguration)
       */
      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      /**
       * The column hierarchy that is used during drill-downs and drill-ups.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-columnhierarchies)
       */
      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      /**
       * The subtitle that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-subtitle)
       */
      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      /**
       * The title that is displayed on the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-title)
       */
      override fun title(): Any? = unwrap(this).getTitle()

      /**
       * The unique identifier of a visual.
       *
       * This identifier must be unique within the context of a dashboard, template, or analysis.
       * Two dashboards, analyses, or templates can have visuals with the same identifiers..
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-visualid)
       */
      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GeospatialMapVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapVisualProperty):
          GeospatialMapVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialMapVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialMapVisualProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface MaximumMinimumComputationProperty {
    /**
     * The ID for a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-computationid)
     */
    public fun computationId(): String

    /**
     * The name of a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-name)
     */
    public fun name(): String? = unwrap(this).getName()

    /**
     * The time field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-time)
     */
    public fun time(): Any? = unwrap(this).getTime()

    /**
     * The type of computation. Choose one of the following options:.
     *
     * * MAXIMUM: A maximum computation.
     * * MINIMUM: A minimum computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-type)
     */
    public fun type(): String

    /**
     * The value field that is used in a computation.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-value)
     */
    public fun `value`(): Any? = unwrap(this).getValue()

    /**
     * A builder for [MaximumMinimumComputationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param computationId The ID for a computation. 
       */
      public fun computationId(computationId: String)

      /**
       * @param name The name of a computation.
       */
      public fun name(name: String)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: IResolvable)

      /**
       * @param time The time field that is used in a computation.
       */
      public fun time(time: DimensionFieldProperty)

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("77e10443e3063a1f7c6080cfdc51f71795c1178631adde319d5f5058fd557957")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)

      /**
       * @param type The type of computation. Choose one of the following options:. 
       * * MAXIMUM: A maximum computation.
       * * MINIMUM: A minimum computation.
       */
      public fun type(type: String)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: IResolvable)

      /**
       * @param value The value field that is used in a computation.
       */
      public fun `value`(`value`: MeasureFieldProperty)

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a2812c79650b25f2552619de42d9dc77b4cad5bf8b5c8ad8fd57cc0273cf4f30")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MaximumMinimumComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MaximumMinimumComputationProperty.builder()

      /**
       * @param computationId The ID for a computation. 
       */
      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      /**
       * @param name The name of a computation.
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      /**
       * @param time The time field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("77e10443e3063a1f7c6080cfdc51f71795c1178631adde319d5f5058fd557957")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      /**
       * @param type The type of computation. Choose one of the following options:. 
       * * MAXIMUM: A maximum computation.
       * * MINIMUM: A minimum computation.
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      /**
       * @param value The value field that is used in a computation.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a2812c79650b25f2552619de42d9dc77b4cad5bf8b5c8ad8fd57cc0273cf4f30")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MaximumMinimumComputationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MaximumMinimumComputationProperty,
    ) : MaximumMinimumComputationProperty {
      /**
       * The ID for a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-computationid)
       */
      override fun computationId(): String = unwrap(this).getComputationId()

      /**
       * The name of a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-name)
       */
      override fun name(): String? = unwrap(this).getName()

      /**
       * The time field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-time)
       */
      override fun time(): Any? = unwrap(this).getTime()

      /**
       * The type of computation. Choose one of the following options:.
       *
       * * MAXIMUM: A maximum computation.
       * * MINIMUM: A minimum computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-type)
       */
      override fun type(): String = unwrap(this).getType()

      /**
       * The value field that is used in a computation.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-value)
       */
      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          MaximumMinimumComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.MaximumMinimumComputationProperty):
          MaximumMinimumComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MaximumMinimumComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.MaximumMinimumComputationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FunnelChartDataLabelOptionsProperty {
    /**
     * The visibility of the category labels within the data labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-categorylabelvisibility)
     */
    public fun categoryLabelVisibility(): String? = unwrap(this).getCategoryLabelVisibility()

    /**
     * The color of the data label text.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-labelcolor)
     */
    public fun labelColor(): String? = unwrap(this).getLabelColor()

    /**
     * The font configuration for the data labels.
     *
     * Only the `FontSize` attribute of the font configuration is used for data labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-labelfontconfiguration)
     */
    public fun labelFontConfiguration(): Any? = unwrap(this).getLabelFontConfiguration()

    /**
     * Determines the style of the metric labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-measuredatalabelstyle)
     */
    public fun measureDataLabelStyle(): String? = unwrap(this).getMeasureDataLabelStyle()

    /**
     * The visibility of the measure labels within the data labels.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-measurelabelvisibility)
     */
    public fun measureLabelVisibility(): String? = unwrap(this).getMeasureLabelVisibility()

    /**
     * Determines the positioning of the data label relative to a section of the funnel.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-position)
     */
    public fun position(): String? = unwrap(this).getPosition()

    /**
     * The visibility option that determines if data labels are displayed.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * A builder for [FunnelChartDataLabelOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryLabelVisibility The visibility of the category labels within the data
       * labels.
       */
      public fun categoryLabelVisibility(categoryLabelVisibility: String)

      /**
       * @param labelColor The color of the data label text.
       */
      public fun labelColor(labelColor: String)

      /**
       * @param labelFontConfiguration The font configuration for the data labels.
       * Only the `FontSize` attribute of the font configuration is used for data labels.
       */
      public fun labelFontConfiguration(labelFontConfiguration: IResolvable)

      /**
       * @param labelFontConfiguration The font configuration for the data labels.
       * Only the `FontSize` attribute of the font configuration is used for data labels.
       */
      public fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty)

      /**
       * @param labelFontConfiguration The font configuration for the data labels.
       * Only the `FontSize` attribute of the font configuration is used for data labels.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ce1bb12ec129cdd893a79760e9b99d232e54340163d9ae4e0c11bb9f276c443")
      public
          fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      /**
       * @param measureDataLabelStyle Determines the style of the metric labels.
       */
      public fun measureDataLabelStyle(measureDataLabelStyle: String)

      /**
       * @param measureLabelVisibility The visibility of the measure labels within the data labels.
       */
      public fun measureLabelVisibility(measureLabelVisibility: String)

      /**
       * @param position Determines the positioning of the data label relative to a section of the
       * funnel.
       */
      public fun position(position: String)

      /**
       * @param visibility The visibility option that determines if data labels are displayed.
       */
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartDataLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartDataLabelOptionsProperty.builder()

      /**
       * @param categoryLabelVisibility The visibility of the category labels within the data
       * labels.
       */
      override fun categoryLabelVisibility(categoryLabelVisibility: String) {
        cdkBuilder.categoryLabelVisibility(categoryLabelVisibility)
      }

      /**
       * @param labelColor The color of the data label text.
       */
      override fun labelColor(labelColor: String) {
        cdkBuilder.labelColor(labelColor)
      }

      /**
       * @param labelFontConfiguration The font configuration for the data labels.
       * Only the `FontSize` attribute of the font configuration is used for data labels.
       */
      override fun labelFontConfiguration(labelFontConfiguration: IResolvable) {
        cdkBuilder.labelFontConfiguration(labelFontConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param labelFontConfiguration The font configuration for the data labels.
       * Only the `FontSize` attribute of the font configuration is used for data labels.
       */
      override fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty) {
        cdkBuilder.labelFontConfiguration(labelFontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      /**
       * @param labelFontConfiguration The font configuration for the data labels.
       * Only the `FontSize` attribute of the font configuration is used for data labels.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ce1bb12ec129cdd893a79760e9b99d232e54340163d9ae4e0c11bb9f276c443")
      override
          fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = labelFontConfiguration(FontConfigurationProperty(labelFontConfiguration))

      /**
       * @param measureDataLabelStyle Determines the style of the metric labels.
       */
      override fun measureDataLabelStyle(measureDataLabelStyle: String) {
        cdkBuilder.measureDataLabelStyle(measureDataLabelStyle)
      }

      /**
       * @param measureLabelVisibility The visibility of the measure labels within the data labels.
       */
      override fun measureLabelVisibility(measureLabelVisibility: String) {
        cdkBuilder.measureLabelVisibility(measureLabelVisibility)
      }

      /**
       * @param position Determines the positioning of the data label relative to a section of the
       * funnel.
       */
      override fun position(position: String) {
        cdkBuilder.position(position)
      }

      /**
       * @param visibility The visibility option that determines if data labels are displayed.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartDataLabelOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartDataLabelOptionsProperty,
    ) : FunnelChartDataLabelOptionsProperty {
      /**
       * The visibility of the category labels within the data labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-categorylabelvisibility)
       */
      override fun categoryLabelVisibility(): String? = unwrap(this).getCategoryLabelVisibility()

      /**
       * The color of the data label text.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-labelcolor)
       */
      override fun labelColor(): String? = unwrap(this).getLabelColor()

      /**
       * The font configuration for the data labels.
       *
       * Only the `FontSize` attribute of the font configuration is used for data labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-labelfontconfiguration)
       */
      override fun labelFontConfiguration(): Any? = unwrap(this).getLabelFontConfiguration()

      /**
       * Determines the style of the metric labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-measuredatalabelstyle)
       */
      override fun measureDataLabelStyle(): String? = unwrap(this).getMeasureDataLabelStyle()

      /**
       * The visibility of the measure labels within the data labels.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-measurelabelvisibility)
       */
      override fun measureLabelVisibility(): String? = unwrap(this).getMeasureLabelVisibility()

      /**
       * Determines the positioning of the data label relative to a section of the funnel.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-position)
       */
      override fun position(): String? = unwrap(this).getPosition()

      /**
       * The visibility option that determines if data labels are displayed.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FunnelChartDataLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartDataLabelOptionsProperty):
          FunnelChartDataLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FunnelChartDataLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartDataLabelOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface LineChartDefaultSeriesSettingsProperty {
    /**
     * The axis to which you are binding all line series to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartdefaultseriessettings.html#cfn-quicksight-analysis-linechartdefaultseriessettings-axisbinding)
     */
    public fun axisBinding(): String? = unwrap(this).getAxisBinding()

    /**
     * Line styles options for all line series in the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartdefaultseriessettings.html#cfn-quicksight-analysis-linechartdefaultseriessettings-linestylesettings)
     */
    public fun lineStyleSettings(): Any? = unwrap(this).getLineStyleSettings()

    /**
     * Marker styles options for all line series in the visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartdefaultseriessettings.html#cfn-quicksight-analysis-linechartdefaultseriessettings-markerstylesettings)
     */
    public fun markerStyleSettings(): Any? = unwrap(this).getMarkerStyleSettings()

    /**
     * A builder for [LineChartDefaultSeriesSettingsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param axisBinding The axis to which you are binding all line series to.
       */
      public fun axisBinding(axisBinding: String)

      /**
       * @param lineStyleSettings Line styles options for all line series in the visual.
       */
      public fun lineStyleSettings(lineStyleSettings: IResolvable)

      /**
       * @param lineStyleSettings Line styles options for all line series in the visual.
       */
      public fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty)

      /**
       * @param lineStyleSettings Line styles options for all line series in the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ac1a004d3a7f3a4e583bb82bf22cbecf15d8e26fa52f614498b4cabadd0391d5")
      public
          fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty.Builder.() -> Unit)

      /**
       * @param markerStyleSettings Marker styles options for all line series in the visual.
       */
      public fun markerStyleSettings(markerStyleSettings: IResolvable)

      /**
       * @param markerStyleSettings Marker styles options for all line series in the visual.
       */
      public fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty)

      /**
       * @param markerStyleSettings Marker styles options for all line series in the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3e18fab6c3f142746f5a622552d7d4c3b791c050865c6a0bfc3ec5fb0a984636")
      public
          fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartDefaultSeriesSettingsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartDefaultSeriesSettingsProperty.builder()

      /**
       * @param axisBinding The axis to which you are binding all line series to.
       */
      override fun axisBinding(axisBinding: String) {
        cdkBuilder.axisBinding(axisBinding)
      }

      /**
       * @param lineStyleSettings Line styles options for all line series in the visual.
       */
      override fun lineStyleSettings(lineStyleSettings: IResolvable) {
        cdkBuilder.lineStyleSettings(lineStyleSettings.let(IResolvable::unwrap))
      }

      /**
       * @param lineStyleSettings Line styles options for all line series in the visual.
       */
      override fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty) {
        cdkBuilder.lineStyleSettings(lineStyleSettings.let(LineChartLineStyleSettingsProperty::unwrap))
      }

      /**
       * @param lineStyleSettings Line styles options for all line series in the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ac1a004d3a7f3a4e583bb82bf22cbecf15d8e26fa52f614498b4cabadd0391d5")
      override
          fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty.Builder.() -> Unit):
          Unit = lineStyleSettings(LineChartLineStyleSettingsProperty(lineStyleSettings))

      /**
       * @param markerStyleSettings Marker styles options for all line series in the visual.
       */
      override fun markerStyleSettings(markerStyleSettings: IResolvable) {
        cdkBuilder.markerStyleSettings(markerStyleSettings.let(IResolvable::unwrap))
      }

      /**
       * @param markerStyleSettings Marker styles options for all line series in the visual.
       */
      override fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty) {
        cdkBuilder.markerStyleSettings(markerStyleSettings.let(LineChartMarkerStyleSettingsProperty::unwrap))
      }

      /**
       * @param markerStyleSettings Marker styles options for all line series in the visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3e18fab6c3f142746f5a622552d7d4c3b791c050865c6a0bfc3ec5fb0a984636")
      override
          fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty.Builder.() -> Unit):
          Unit = markerStyleSettings(LineChartMarkerStyleSettingsProperty(markerStyleSettings))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartDefaultSeriesSettingsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartDefaultSeriesSettingsProperty,
    ) : LineChartDefaultSeriesSettingsProperty {
      /**
       * The axis to which you are binding all line series to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartdefaultseriessettings.html#cfn-quicksight-analysis-linechartdefaultseriessettings-axisbinding)
       */
      override fun axisBinding(): String? = unwrap(this).getAxisBinding()

      /**
       * Line styles options for all line series in the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartdefaultseriessettings.html#cfn-quicksight-analysis-linechartdefaultseriessettings-linestylesettings)
       */
      override fun lineStyleSettings(): Any? = unwrap(this).getLineStyleSettings()

      /**
       * Marker styles options for all line series in the visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartdefaultseriessettings.html#cfn-quicksight-analysis-linechartdefaultseriessettings-markerstylesettings)
       */
      override fun markerStyleSettings(): Any? = unwrap(this).getMarkerStyleSettings()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          LineChartDefaultSeriesSettingsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartDefaultSeriesSettingsProperty):
          LineChartDefaultSeriesSettingsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartDefaultSeriesSettingsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.LineChartDefaultSeriesSettingsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ShortFormatTextProperty {
    /**
     * Plain text format.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shortformattext.html#cfn-quicksight-analysis-shortformattext-plaintext)
     */
    public fun plainText(): String? = unwrap(this).getPlainText()

    /**
     * Rich text.
     *
     * Examples of rich text include bold, underline, and italics.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shortformattext.html#cfn-quicksight-analysis-shortformattext-richtext)
     */
    public fun richText(): String? = unwrap(this).getRichText()

    /**
     * A builder for [ShortFormatTextProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param plainText Plain text format.
       */
      public fun plainText(plainText: String)

      /**
       * @param richText Rich text.
       * Examples of rich text include bold, underline, and italics.
       */
      public fun richText(richText: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ShortFormatTextProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ShortFormatTextProperty.builder()

      /**
       * @param plainText Plain text format.
       */
      override fun plainText(plainText: String) {
        cdkBuilder.plainText(plainText)
      }

      /**
       * @param richText Rich text.
       * Examples of rich text include bold, underline, and italics.
       */
      override fun richText(richText: String) {
        cdkBuilder.richText(richText)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ShortFormatTextProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ShortFormatTextProperty,
    ) : ShortFormatTextProperty {
      /**
       * Plain text format.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shortformattext.html#cfn-quicksight-analysis-shortformattext-plaintext)
       */
      override fun plainText(): String? = unwrap(this).getPlainText()

      /**
       * Rich text.
       *
       * Examples of rich text include bold, underline, and italics.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shortformattext.html#cfn-quicksight-analysis-shortformattext-richtext)
       */
      override fun richText(): String? = unwrap(this).getRichText()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ShortFormatTextProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ShortFormatTextProperty):
          ShortFormatTextProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ShortFormatTextProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ShortFormatTextProperty = (wrapped
          as Wrapper).cdkObject
    }
  }

  public interface KPIVisualStandardLayoutProperty {
    /**
     * The standard layout type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisualstandardlayout.html#cfn-quicksight-analysis-kpivisualstandardlayout-type)
     */
    public fun type(): String

    /**
     * A builder for [KPIVisualStandardLayoutProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param type The standard layout type. 
       */
      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualStandardLayoutProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualStandardLayoutProperty.builder()

      /**
       * @param type The standard layout type. 
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualStandardLayoutProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualStandardLayoutProperty,
    ) : KPIVisualStandardLayoutProperty {
      /**
       * The standard layout type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisualstandardlayout.html#cfn-quicksight-analysis-kpivisualstandardlayout-type)
       */
      override fun type(): String = unwrap(this).getType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): KPIVisualStandardLayoutProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualStandardLayoutProperty):
          KPIVisualStandardLayoutProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIVisualStandardLayoutProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualStandardLayoutProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FreeFormLayoutElementProperty {
    /**
     * The background style configuration of a free-form layout element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-backgroundstyle)
     */
    public fun backgroundStyle(): Any? = unwrap(this).getBackgroundStyle()

    /**
     * The border style configuration of a free-form layout element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-borderstyle)
     */
    public fun borderStyle(): Any? = unwrap(this).getBorderStyle()

    /**
     * A unique identifier for an element within a free-form layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-elementid)
     */
    public fun elementId(): String

    /**
     * The type of element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-elementtype)
     */
    public fun elementType(): String

    /**
     * The height of an element within a free-form layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-height)
     */
    public fun height(): String

    /**
     * The loading animation configuration of a free-form layout element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-loadinganimation)
     */
    public fun loadingAnimation(): Any? = unwrap(this).getLoadingAnimation()

    /**
     * The rendering rules that determine when an element should be displayed within a free-form
     * layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-renderingrules)
     */
    public fun renderingRules(): Any? = unwrap(this).getRenderingRules()

    /**
     * The border style configuration of a free-form layout element.
     *
     * This border style is used when the element is selected.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-selectedborderstyle)
     */
    public fun selectedBorderStyle(): Any? = unwrap(this).getSelectedBorderStyle()

    /**
     * The visibility of an element within a free-form layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-visibility)
     */
    public fun visibility(): String? = unwrap(this).getVisibility()

    /**
     * The width of an element within a free-form layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-width)
     */
    public fun width(): String

    /**
     * The x-axis coordinate of the element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-xaxislocation)
     */
    public fun xAxisLocation(): String

    /**
     * The y-axis coordinate of the element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-yaxislocation)
     */
    public fun yAxisLocation(): String

    /**
     * A builder for [FreeFormLayoutElementProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param backgroundStyle The background style configuration of a free-form layout element.
       */
      public fun backgroundStyle(backgroundStyle: IResolvable)

      /**
       * @param backgroundStyle The background style configuration of a free-form layout element.
       */
      public fun backgroundStyle(backgroundStyle: FreeFormLayoutElementBackgroundStyleProperty)

      /**
       * @param backgroundStyle The background style configuration of a free-form layout element.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5890f16b7e1b17ee9c055d055b1a568028ea85a327cc8d20943601121a6e30db")
      public
          fun backgroundStyle(backgroundStyle: FreeFormLayoutElementBackgroundStyleProperty.Builder.() -> Unit)

      /**
       * @param borderStyle The border style configuration of a free-form layout element.
       */
      public fun borderStyle(borderStyle: IResolvable)

      /**
       * @param borderStyle The border style configuration of a free-form layout element.
       */
      public fun borderStyle(borderStyle: FreeFormLayoutElementBorderStyleProperty)

      /**
       * @param borderStyle The border style configuration of a free-form layout element.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ff52ef8b6830d896ab35404b99534f622ef0e48f670fe91abdc8590911748fe0")
      public
          fun borderStyle(borderStyle: FreeFormLayoutElementBorderStyleProperty.Builder.() -> Unit)

      /**
       * @param elementId A unique identifier for an element within a free-form layout. 
       */
      public fun elementId(elementId: String)

      /**
       * @param elementType The type of element. 
       */
      public fun elementType(elementType: String)

      /**
       * @param height The height of an element within a free-form layout. 
       */
      public fun height(height: String)

      /**
       * @param loadingAnimation The loading animation configuration of a free-form layout element.
       */
      public fun loadingAnimation(loadingAnimation: IResolvable)

      /**
       * @param loadingAnimation The loading animation configuration of a free-form layout element.
       */
      public fun loadingAnimation(loadingAnimation: LoadingAnimationProperty)

      /**
       * @param loadingAnimation The loading animation configuration of a free-form layout element.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cf74db3d182317c300722ef23ba67b5c09b5fbb903e4a744f2c0810b45a1d0be")
      public fun loadingAnimation(loadingAnimation: LoadingAnimationProperty.Builder.() -> Unit)

      /**
       * @param renderingRules The rendering rules that determine when an element should be
       * displayed within a free-form layout.
       */
      public fun renderingRules(renderingRules: IResolvable)

      /**
       * @param renderingRules The rendering rules that determine when an element should be
       * displayed within a free-form layout.
       */
      public fun renderingRules(renderingRules: List<Any>)

      /**
       * @param renderingRules The rendering rules that determine when an element should be
       * displayed within a free-form layout.
       */
      public fun renderingRules(vararg renderingRules: Any)

      /**
       * @param selectedBorderStyle The border style configuration of a free-form layout element.
       * This border style is used when the element is selected.
       */
      public fun selectedBorderStyle(selectedBorderStyle: IResolvable)

      /**
       * @param selectedBorderStyle The border style configuration of a free-form layout element.
       * This border style is used when the element is selected.
       */
      public fun selectedBorderStyle(selectedBorderStyle: FreeFormLayoutElementBorderStyleProperty)

      /**
       * @param selectedBorderStyle The border style configuration of a free-form layout element.
       * This border style is used when the element is selected.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("56589274a214061a4c05207c8450beccbdc787f32e1f1110c0f754b8cbbb7ecd")
      public
          fun selectedBorderStyle(selectedBorderStyle: FreeFormLayoutElementBorderStyleProperty.Builder.() -> Unit)

      /**
       * @param visibility The visibility of an element within a free-form layout.
       */
      public fun visibility(visibility: String)

      /**
       * @param width The width of an element within a free-form layout. 
       */
      public fun width(width: String)

      /**
       * @param xAxisLocation The x-axis coordinate of the element. 
       */
      public fun xAxisLocation(xAxisLocation: String)

      /**
       * @param yAxisLocation The y-axis coordinate of the element. 
       */
      public fun yAxisLocation(yAxisLocation: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementProperty.builder()

      /**
       * @param backgroundStyle The background style configuration of a free-form layout element.
       */
      override fun backgroundStyle(backgroundStyle: IResolvable) {
        cdkBuilder.backgroundStyle(backgroundStyle.let(IResolvable::unwrap))
      }

      /**
       * @param backgroundStyle The background style configuration of a free-form layout element.
       */
      override fun backgroundStyle(backgroundStyle: FreeFormLayoutElementBackgroundStyleProperty) {
        cdkBuilder.backgroundStyle(backgroundStyle.let(FreeFormLayoutElementBackgroundStyleProperty::unwrap))
      }

      /**
       * @param backgroundStyle The background style configuration of a free-form layout element.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5890f16b7e1b17ee9c055d055b1a568028ea85a327cc8d20943601121a6e30db")
      override
          fun backgroundStyle(backgroundStyle: FreeFormLayoutElementBackgroundStyleProperty.Builder.() -> Unit):
          Unit = backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty(backgroundStyle))

      /**
       * @param borderStyle The border style configuration of a free-form layout element.
       */
      override fun borderStyle(borderStyle: IResolvable) {
        cdkBuilder.borderStyle(borderStyle.let(IResolvable::unwrap))
      }

      /**
       * @param borderStyle The border style configuration of a free-form layout element.
       */
      override fun borderStyle(borderStyle: FreeFormLayoutElementBorderStyleProperty) {
        cdkBuilder.borderStyle(borderStyle.let(FreeFormLayoutElementBorderStyleProperty::unwrap))
      }

      /**
       * @param borderStyle The border style configuration of a free-form layout element.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ff52ef8b6830d896ab35404b99534f622ef0e48f670fe91abdc8590911748fe0")
      override
          fun borderStyle(borderStyle: FreeFormLayoutElementBorderStyleProperty.Builder.() -> Unit):
          Unit = borderStyle(FreeFormLayoutElementBorderStyleProperty(borderStyle))

      /**
       * @param elementId A unique identifier for an element within a free-form layout. 
       */
      override fun elementId(elementId: String) {
        cdkBuilder.elementId(elementId)
      }

      /**
       * @param elementType The type of element. 
       */
      override fun elementType(elementType: String) {
        cdkBuilder.elementType(elementType)
      }

      /**
       * @param height The height of an element within a free-form layout. 
       */
      override fun height(height: String) {
        cdkBuilder.height(height)
      }

      /**
       * @param loadingAnimation The loading animation configuration of a free-form layout element.
       */
      override fun loadingAnimation(loadingAnimation: IResolvable) {
        cdkBuilder.loadingAnimation(loadingAnimation.let(IResolvable::unwrap))
      }

      /**
       * @param loadingAnimation The loading animation configuration of a free-form layout element.
       */
      override fun loadingAnimation(loadingAnimation: LoadingAnimationProperty) {
        cdkBuilder.loadingAnimation(loadingAnimation.let(LoadingAnimationProperty::unwrap))
      }

      /**
       * @param loadingAnimation The loading animation configuration of a free-form layout element.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cf74db3d182317c300722ef23ba67b5c09b5fbb903e4a744f2c0810b45a1d0be")
      override fun loadingAnimation(loadingAnimation: LoadingAnimationProperty.Builder.() -> Unit):
          Unit = loadingAnimation(LoadingAnimationProperty(loadingAnimation))

      /**
       * @param renderingRules The rendering rules that determine when an element should be
       * displayed within a free-form layout.
       */
      override fun renderingRules(renderingRules: IResolvable) {
        cdkBuilder.renderingRules(renderingRules.let(IResolvable::unwrap))
      }

      /**
       * @param renderingRules The rendering rules that determine when an element should be
       * displayed within a free-form layout.
       */
      override fun renderingRules(renderingRules: List<Any>) {
        cdkBuilder.renderingRules(renderingRules)
      }

      /**
       * @param renderingRules The rendering rules that determine when an element should be
       * displayed within a free-form layout.
       */
      override fun renderingRules(vararg renderingRules: Any): Unit =
          renderingRules(renderingRules.toList())

      /**
       * @param selectedBorderStyle The border style configuration of a free-form layout element.
       * This border style is used when the element is selected.
       */
      override fun selectedBorderStyle(selectedBorderStyle: IResolvable) {
        cdkBuilder.selectedBorderStyle(selectedBorderStyle.let(IResolvable::unwrap))
      }

      /**
       * @param selectedBorderStyle The border style configuration of a free-form layout element.
       * This border style is used when the element is selected.
       */
      override
          fun selectedBorderStyle(selectedBorderStyle: FreeFormLayoutElementBorderStyleProperty) {
        cdkBuilder.selectedBorderStyle(selectedBorderStyle.let(FreeFormLayoutElementBorderStyleProperty::unwrap))
      }

      /**
       * @param selectedBorderStyle The border style configuration of a free-form layout element.
       * This border style is used when the element is selected.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("56589274a214061a4c05207c8450beccbdc787f32e1f1110c0f754b8cbbb7ecd")
      override
          fun selectedBorderStyle(selectedBorderStyle: FreeFormLayoutElementBorderStyleProperty.Builder.() -> Unit):
          Unit = selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty(selectedBorderStyle))

      /**
       * @param visibility The visibility of an element within a free-form layout.
       */
      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      /**
       * @param width The width of an element within a free-form layout. 
       */
      override fun width(width: String) {
        cdkBuilder.width(width)
      }

      /**
       * @param xAxisLocation The x-axis coordinate of the element. 
       */
      override fun xAxisLocation(xAxisLocation: String) {
        cdkBuilder.xAxisLocation(xAxisLocation)
      }

      /**
       * @param yAxisLocation The y-axis coordinate of the element. 
       */
      override fun yAxisLocation(yAxisLocation: String) {
        cdkBuilder.yAxisLocation(yAxisLocation)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementProperty,
    ) : FreeFormLayoutElementProperty {
      /**
       * The background style configuration of a free-form layout element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-backgroundstyle)
       */
      override fun backgroundStyle(): Any? = unwrap(this).getBackgroundStyle()

      /**
       * The border style configuration of a free-form layout element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-borderstyle)
       */
      override fun borderStyle(): Any? = unwrap(this).getBorderStyle()

      /**
       * A unique identifier for an element within a free-form layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-elementid)
       */
      override fun elementId(): String = unwrap(this).getElementId()

      /**
       * The type of element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-elementtype)
       */
      override fun elementType(): String = unwrap(this).getElementType()

      /**
       * The height of an element within a free-form layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-height)
       */
      override fun height(): String = unwrap(this).getHeight()

      /**
       * The loading animation configuration of a free-form layout element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-loadinganimation)
       */
      override fun loadingAnimation(): Any? = unwrap(this).getLoadingAnimation()

      /**
       * The rendering rules that determine when an element should be displayed within a free-form
       * layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-renderingrules)
       */
      override fun renderingRules(): Any? = unwrap(this).getRenderingRules()

      /**
       * The border style configuration of a free-form layout element.
       *
       * This border style is used when the element is selected.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-selectedborderstyle)
       */
      override fun selectedBorderStyle(): Any? = unwrap(this).getSelectedBorderStyle()

      /**
       * The visibility of an element within a free-form layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-visibility)
       */
      override fun visibility(): String? = unwrap(this).getVisibility()

      /**
       * The width of an element within a free-form layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-width)
       */
      override fun width(): String = unwrap(this).getWidth()

      /**
       * The x-axis coordinate of the element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-xaxislocation)
       */
      override fun xAxisLocation(): String = unwrap(this).getXAxisLocation()

      /**
       * The y-axis coordinate of the element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-yaxislocation)
       */
      override fun yAxisLocation(): String = unwrap(this).getYAxisLocation()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FreeFormLayoutElementProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementProperty):
          FreeFormLayoutElementProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormLayoutElementProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FreeFormLayoutElementProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface BoxPlotSortConfigurationProperty {
    /**
     * The sort configuration of a group by fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotsortconfiguration.html#cfn-quicksight-analysis-boxplotsortconfiguration-categorysort)
     */
    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    /**
     * The pagination configuration of a table visual or box plot.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotsortconfiguration.html#cfn-quicksight-analysis-boxplotsortconfiguration-paginationconfiguration)
     */
    public fun paginationConfiguration(): Any? = unwrap(this).getPaginationConfiguration()

    /**
     * A builder for [BoxPlotSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categorySort The sort configuration of a group by fields.
       */
      public fun categorySort(categorySort: IResolvable)

      /**
       * @param categorySort The sort configuration of a group by fields.
       */
      public fun categorySort(categorySort: List<Any>)

      /**
       * @param categorySort The sort configuration of a group by fields.
       */
      public fun categorySort(vararg categorySort: Any)

      /**
       * @param paginationConfiguration The pagination configuration of a table visual or box plot.
       */
      public fun paginationConfiguration(paginationConfiguration: IResolvable)

      /**
       * @param paginationConfiguration The pagination configuration of a table visual or box plot.
       */
      public fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty)

      /**
       * @param paginationConfiguration The pagination configuration of a table visual or box plot.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("94f1e86e277b41765c7e60a4499745fa11d4488660b9e767666abc806b27b1e3")
      public
          fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotSortConfigurationProperty.builder()

      /**
       * @param categorySort The sort configuration of a group by fields.
       */
      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      /**
       * @param categorySort The sort configuration of a group by fields.
       */
      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      /**
       * @param categorySort The sort configuration of a group by fields.
       */
      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      /**
       * @param paginationConfiguration The pagination configuration of a table visual or box plot.
       */
      override fun paginationConfiguration(paginationConfiguration: IResolvable) {
        cdkBuilder.paginationConfiguration(paginationConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param paginationConfiguration The pagination configuration of a table visual or box plot.
       */
      override
          fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty) {
        cdkBuilder.paginationConfiguration(paginationConfiguration.let(PaginationConfigurationProperty::unwrap))
      }

      /**
       * @param paginationConfiguration The pagination configuration of a table visual or box plot.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("94f1e86e277b41765c7e60a4499745fa11d4488660b9e767666abc806b27b1e3")
      override
          fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty.Builder.() -> Unit):
          Unit = paginationConfiguration(PaginationConfigurationProperty(paginationConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotSortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotSortConfigurationProperty,
    ) : BoxPlotSortConfigurationProperty {
      /**
       * The sort configuration of a group by fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotsortconfiguration.html#cfn-quicksight-analysis-boxplotsortconfiguration-categorysort)
       */
      override fun categorySort(): Any? = unwrap(this).getCategorySort()

      /**
       * The pagination configuration of a table visual or box plot.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotsortconfiguration.html#cfn-quicksight-analysis-boxplotsortconfiguration-paginationconfiguration)
       */
      override fun paginationConfiguration(): Any? = unwrap(this).getPaginationConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): BoxPlotSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotSortConfigurationProperty):
          BoxPlotSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BoxPlotSortConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface SheetControlLayoutConfigurationProperty {
    /**
     * The configuration that determines the elements and canvas size options of sheet control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrollayoutconfiguration.html#cfn-quicksight-analysis-sheetcontrollayoutconfiguration-gridlayout)
     */
    public fun gridLayout(): Any? = unwrap(this).getGridLayout()

    /**
     * A builder for [SheetControlLayoutConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param gridLayout The configuration that determines the elements and canvas size options of
       * sheet control.
       */
      public fun gridLayout(gridLayout: IResolvable)

      /**
       * @param gridLayout The configuration that determines the elements and canvas size options of
       * sheet control.
       */
      public fun gridLayout(gridLayout: GridLayoutConfigurationProperty)

      /**
       * @param gridLayout The configuration that determines the elements and canvas size options of
       * sheet control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b238458cb9f3a9ed8fab8b871134df63d04656fa691ccf5b5566dd5af9d7e595")
      public fun gridLayout(gridLayout: GridLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlLayoutConfigurationProperty.builder()

      /**
       * @param gridLayout The configuration that determines the elements and canvas size options of
       * sheet control.
       */
      override fun gridLayout(gridLayout: IResolvable) {
        cdkBuilder.gridLayout(gridLayout.let(IResolvable::unwrap))
      }

      /**
       * @param gridLayout The configuration that determines the elements and canvas size options of
       * sheet control.
       */
      override fun gridLayout(gridLayout: GridLayoutConfigurationProperty) {
        cdkBuilder.gridLayout(gridLayout.let(GridLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param gridLayout The configuration that determines the elements and canvas size options of
       * sheet control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b238458cb9f3a9ed8fab8b871134df63d04656fa691ccf5b5566dd5af9d7e595")
      override fun gridLayout(gridLayout: GridLayoutConfigurationProperty.Builder.() -> Unit): Unit
          = gridLayout(GridLayoutConfigurationProperty(gridLayout))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlLayoutConfigurationProperty,
    ) : SheetControlLayoutConfigurationProperty {
      /**
       * The configuration that determines the elements and canvas size options of sheet control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrollayoutconfiguration.html#cfn-quicksight-analysis-sheetcontrollayoutconfiguration-gridlayout)
       */
      override fun gridLayout(): Any? = unwrap(this).getGridLayout()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SheetControlLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlLayoutConfigurationProperty):
          SheetControlLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetControlLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetControlLayoutConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface ParametersProperty {
    /**
     * The parameters that have a data type of date-time.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html#cfn-quicksight-analysis-parameters-datetimeparameters)
     */
    public fun dateTimeParameters(): Any? = unwrap(this).getDateTimeParameters()

    /**
     * The parameters that have a data type of decimal.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html#cfn-quicksight-analysis-parameters-decimalparameters)
     */
    public fun decimalParameters(): Any? = unwrap(this).getDecimalParameters()

    /**
     * The parameters that have a data type of integer.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html#cfn-quicksight-analysis-parameters-integerparameters)
     */
    public fun integerParameters(): Any? = unwrap(this).getIntegerParameters()

    /**
     * The parameters that have a data type of string.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html#cfn-quicksight-analysis-parameters-stringparameters)
     */
    public fun stringParameters(): Any? = unwrap(this).getStringParameters()

    /**
     * A builder for [ParametersProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dateTimeParameters The parameters that have a data type of date-time.
       */
      public fun dateTimeParameters(dateTimeParameters: IResolvable)

      /**
       * @param dateTimeParameters The parameters that have a data type of date-time.
       */
      public fun dateTimeParameters(dateTimeParameters: List<Any>)

      /**
       * @param dateTimeParameters The parameters that have a data type of date-time.
       */
      public fun dateTimeParameters(vararg dateTimeParameters: Any)

      /**
       * @param decimalParameters The parameters that have a data type of decimal.
       */
      public fun decimalParameters(decimalParameters: IResolvable)

      /**
       * @param decimalParameters The parameters that have a data type of decimal.
       */
      public fun decimalParameters(decimalParameters: List<Any>)

      /**
       * @param decimalParameters The parameters that have a data type of decimal.
       */
      public fun decimalParameters(vararg decimalParameters: Any)

      /**
       * @param integerParameters The parameters that have a data type of integer.
       */
      public fun integerParameters(integerParameters: IResolvable)

      /**
       * @param integerParameters The parameters that have a data type of integer.
       */
      public fun integerParameters(integerParameters: List<Any>)

      /**
       * @param integerParameters The parameters that have a data type of integer.
       */
      public fun integerParameters(vararg integerParameters: Any)

      /**
       * @param stringParameters The parameters that have a data type of string.
       */
      public fun stringParameters(stringParameters: IResolvable)

      /**
       * @param stringParameters The parameters that have a data type of string.
       */
      public fun stringParameters(stringParameters: List<Any>)

      /**
       * @param stringParameters The parameters that have a data type of string.
       */
      public fun stringParameters(vararg stringParameters: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParametersProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParametersProperty.builder()

      /**
       * @param dateTimeParameters The parameters that have a data type of date-time.
       */
      override fun dateTimeParameters(dateTimeParameters: IResolvable) {
        cdkBuilder.dateTimeParameters(dateTimeParameters.let(IResolvable::unwrap))
      }

      /**
       * @param dateTimeParameters The parameters that have a data type of date-time.
       */
      override fun dateTimeParameters(dateTimeParameters: List<Any>) {
        cdkBuilder.dateTimeParameters(dateTimeParameters)
      }

      /**
       * @param dateTimeParameters The parameters that have a data type of date-time.
       */
      override fun dateTimeParameters(vararg dateTimeParameters: Any): Unit =
          dateTimeParameters(dateTimeParameters.toList())

      /**
       * @param decimalParameters The parameters that have a data type of decimal.
       */
      override fun decimalParameters(decimalParameters: IResolvable) {
        cdkBuilder.decimalParameters(decimalParameters.let(IResolvable::unwrap))
      }

      /**
       * @param decimalParameters The parameters that have a data type of decimal.
       */
      override fun decimalParameters(decimalParameters: List<Any>) {
        cdkBuilder.decimalParameters(decimalParameters)
      }

      /**
       * @param decimalParameters The parameters that have a data type of decimal.
       */
      override fun decimalParameters(vararg decimalParameters: Any): Unit =
          decimalParameters(decimalParameters.toList())

      /**
       * @param integerParameters The parameters that have a data type of integer.
       */
      override fun integerParameters(integerParameters: IResolvable) {
        cdkBuilder.integerParameters(integerParameters.let(IResolvable::unwrap))
      }

      /**
       * @param integerParameters The parameters that have a data type of integer.
       */
      override fun integerParameters(integerParameters: List<Any>) {
        cdkBuilder.integerParameters(integerParameters)
      }

      /**
       * @param integerParameters The parameters that have a data type of integer.
       */
      override fun integerParameters(vararg integerParameters: Any): Unit =
          integerParameters(integerParameters.toList())

      /**
       * @param stringParameters The parameters that have a data type of string.
       */
      override fun stringParameters(stringParameters: IResolvable) {
        cdkBuilder.stringParameters(stringParameters.let(IResolvable::unwrap))
      }

      /**
       * @param stringParameters The parameters that have a data type of string.
       */
      override fun stringParameters(stringParameters: List<Any>) {
        cdkBuilder.stringParameters(stringParameters)
      }

      /**
       * @param stringParameters The parameters that have a data type of string.
       */
      override fun stringParameters(vararg stringParameters: Any): Unit =
          stringParameters(stringParameters.toList())

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.ParametersProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParametersProperty,
    ) : ParametersProperty {
      /**
       * The parameters that have a data type of date-time.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html#cfn-quicksight-analysis-parameters-datetimeparameters)
       */
      override fun dateTimeParameters(): Any? = unwrap(this).getDateTimeParameters()

      /**
       * The parameters that have a data type of decimal.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html#cfn-quicksight-analysis-parameters-decimalparameters)
       */
      override fun decimalParameters(): Any? = unwrap(this).getDecimalParameters()

      /**
       * The parameters that have a data type of integer.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html#cfn-quicksight-analysis-parameters-integerparameters)
       */
      override fun integerParameters(): Any? = unwrap(this).getIntegerParameters()

      /**
       * The parameters that have a data type of string.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html#cfn-quicksight-analysis-parameters-stringparameters)
       */
      override fun stringParameters(): Any? = unwrap(this).getStringParameters()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ParametersProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ParametersProperty):
          ParametersProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParametersProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ParametersProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface DataFieldSeriesItemProperty {
    /**
     * The axis that you are binding the field to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html#cfn-quicksight-analysis-datafieldseriesitem-axisbinding)
     */
    public fun axisBinding(): String

    /**
     * The field ID of the field that you are setting the axis binding to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html#cfn-quicksight-analysis-datafieldseriesitem-fieldid)
     */
    public fun fieldId(): String

    /**
     * The field value of the field that you are setting the axis binding to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html#cfn-quicksight-analysis-datafieldseriesitem-fieldvalue)
     */
    public fun fieldValue(): String? = unwrap(this).getFieldValue()

    /**
     * The options that determine the presentation of line series associated to the field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html#cfn-quicksight-analysis-datafieldseriesitem-settings)
     */
    public fun settings(): Any? = unwrap(this).getSettings()

    /**
     * A builder for [DataFieldSeriesItemProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param axisBinding The axis that you are binding the field to. 
       */
      public fun axisBinding(axisBinding: String)

      /**
       * @param fieldId The field ID of the field that you are setting the axis binding to. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param fieldValue The field value of the field that you are setting the axis binding to.
       */
      public fun fieldValue(fieldValue: String)

      /**
       * @param settings The options that determine the presentation of line series associated to
       * the field.
       */
      public fun tings(settings: IResolvable)

      /**
       * @param settings The options that determine the presentation of line series associated to
       * the field.
       */
      public fun tings(settings: LineChartSeriesSettingsProperty)

      /**
       * @param settings The options that determine the presentation of line series associated to
       * the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("571703fecfae31262d3cdc90936fdc44bc077241c2325b743db5b69a79d13630")
      public fun tings(settings: LineChartSeriesSettingsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataFieldSeriesItemProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataFieldSeriesItemProperty.builder()

      /**
       * @param axisBinding The axis that you are binding the field to. 
       */
      override fun axisBinding(axisBinding: String) {
        cdkBuilder.axisBinding(axisBinding)
      }

      /**
       * @param fieldId The field ID of the field that you are setting the axis binding to. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param fieldValue The field value of the field that you are setting the axis binding to.
       */
      override fun fieldValue(fieldValue: String) {
        cdkBuilder.fieldValue(fieldValue)
      }

      /**
       * @param settings The options that determine the presentation of line series associated to
       * the field.
       */
      override fun tings(settings: IResolvable) {
        cdkBuilder.settings(settings.let(IResolvable::unwrap))
      }

      /**
       * @param settings The options that determine the presentation of line series associated to
       * the field.
       */
      override fun tings(settings: LineChartSeriesSettingsProperty) {
        cdkBuilder.settings(settings.let(LineChartSeriesSettingsProperty::unwrap))
      }

      /**
       * @param settings The options that determine the presentation of line series associated to
       * the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("571703fecfae31262d3cdc90936fdc44bc077241c2325b743db5b69a79d13630")
      override fun tings(settings: LineChartSeriesSettingsProperty.Builder.() -> Unit): Unit =
          tings(LineChartSeriesSettingsProperty(settings))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataFieldSeriesItemProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataFieldSeriesItemProperty,
    ) : DataFieldSeriesItemProperty {
      /**
       * The axis that you are binding the field to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html#cfn-quicksight-analysis-datafieldseriesitem-axisbinding)
       */
      override fun axisBinding(): String = unwrap(this).getAxisBinding()

      /**
       * The field ID of the field that you are setting the axis binding to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html#cfn-quicksight-analysis-datafieldseriesitem-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The field value of the field that you are setting the axis binding to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html#cfn-quicksight-analysis-datafieldseriesitem-fieldvalue)
       */
      override fun fieldValue(): String? = unwrap(this).getFieldValue()

      /**
       * The options that determine the presentation of line series associated to the field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html#cfn-quicksight-analysis-datafieldseriesitem-settings)
       */
      override fun settings(): Any? = unwrap(this).getSettings()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DataFieldSeriesItemProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DataFieldSeriesItemProperty):
          DataFieldSeriesItemProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataFieldSeriesItemProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataFieldSeriesItemProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface AnalysisErrorProperty {
    /**
     * The message associated with the analysis error.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysiserror.html#cfn-quicksight-analysis-analysiserror-message)
     */
    public fun message(): String? = unwrap(this).getMessage()

    /**
     * The type of the analysis error.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysiserror.html#cfn-quicksight-analysis-analysiserror-type)
     */
    public fun type(): String? = unwrap(this).getType()

    /**
     * Lists the violated entities that caused the analysis error.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysiserror.html#cfn-quicksight-analysis-analysiserror-violatedentities)
     */
    public fun violatedEntities(): Any? = unwrap(this).getViolatedEntities()

    /**
     * A builder for [AnalysisErrorProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param message The message associated with the analysis error.
       */
      public fun message(message: String)

      /**
       * @param type The type of the analysis error.
       */
      public fun type(type: String)

      /**
       * @param violatedEntities Lists the violated entities that caused the analysis error.
       */
      public fun violatedEntities(violatedEntities: IResolvable)

      /**
       * @param violatedEntities Lists the violated entities that caused the analysis error.
       */
      public fun violatedEntities(violatedEntities: List<Any>)

      /**
       * @param violatedEntities Lists the violated entities that caused the analysis error.
       */
      public fun violatedEntities(vararg violatedEntities: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisErrorProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisErrorProperty.builder()

      /**
       * @param message The message associated with the analysis error.
       */
      override fun message(message: String) {
        cdkBuilder.message(message)
      }

      /**
       * @param type The type of the analysis error.
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      /**
       * @param violatedEntities Lists the violated entities that caused the analysis error.
       */
      override fun violatedEntities(violatedEntities: IResolvable) {
        cdkBuilder.violatedEntities(violatedEntities.let(IResolvable::unwrap))
      }

      /**
       * @param violatedEntities Lists the violated entities that caused the analysis error.
       */
      override fun violatedEntities(violatedEntities: List<Any>) {
        cdkBuilder.violatedEntities(violatedEntities)
      }

      /**
       * @param violatedEntities Lists the violated entities that caused the analysis error.
       */
      override fun violatedEntities(vararg violatedEntities: Any): Unit =
          violatedEntities(violatedEntities.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisErrorProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisErrorProperty,
    ) : AnalysisErrorProperty {
      /**
       * The message associated with the analysis error.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysiserror.html#cfn-quicksight-analysis-analysiserror-message)
       */
      override fun message(): String? = unwrap(this).getMessage()

      /**
       * The type of the analysis error.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysiserror.html#cfn-quicksight-analysis-analysiserror-type)
       */
      override fun type(): String? = unwrap(this).getType()

      /**
       * Lists the violated entities that caused the analysis error.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysiserror.html#cfn-quicksight-analysis-analysiserror-violatedentities)
       */
      override fun violatedEntities(): Any? = unwrap(this).getViolatedEntities()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): AnalysisErrorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisErrorProperty):
          AnalysisErrorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AnalysisErrorProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.AnalysisErrorProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface UnaggregatedFieldProperty {
    /**
     * The column that is used in the `UnaggregatedField` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-unaggregatedfield.html#cfn-quicksight-analysis-unaggregatedfield-column)
     */
    public fun column(): Any

    /**
     * The custom field ID.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-unaggregatedfield.html#cfn-quicksight-analysis-unaggregatedfield-fieldid)
     */
    public fun fieldId(): String

    /**
     * The format configuration of the field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-unaggregatedfield.html#cfn-quicksight-analysis-unaggregatedfield-formatconfiguration)
     */
    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    /**
     * A builder for [UnaggregatedFieldProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param column The column that is used in the `UnaggregatedField` . 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that is used in the `UnaggregatedField` . 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that is used in the `UnaggregatedField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ce4be5578553a9a28b459043520f9575caee49860334215cbda1999b14c9a51")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param fieldId The custom field ID. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: IResolvable)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: FormatConfigurationProperty)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("467be9caa3c47f26bc99997856b1c10aa1b33fca86a3bcb13f50505eced76ac0")
      public
          fun formatConfiguration(formatConfiguration: FormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.UnaggregatedFieldProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.UnaggregatedFieldProperty.builder()

      /**
       * @param column The column that is used in the `UnaggregatedField` . 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that is used in the `UnaggregatedField` . 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that is used in the `UnaggregatedField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ce4be5578553a9a28b459043520f9575caee49860334215cbda1999b14c9a51")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param fieldId The custom field ID. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: FormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(FormatConfigurationProperty::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("467be9caa3c47f26bc99997856b1c10aa1b33fca86a3bcb13f50505eced76ac0")
      override
          fun formatConfiguration(formatConfiguration: FormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(FormatConfigurationProperty(formatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.UnaggregatedFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.UnaggregatedFieldProperty,
    ) : UnaggregatedFieldProperty {
      /**
       * The column that is used in the `UnaggregatedField` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-unaggregatedfield.html#cfn-quicksight-analysis-unaggregatedfield-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The custom field ID.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-unaggregatedfield.html#cfn-quicksight-analysis-unaggregatedfield-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The format configuration of the field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-unaggregatedfield.html#cfn-quicksight-analysis-unaggregatedfield-formatconfiguration)
       */
      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): UnaggregatedFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.UnaggregatedFieldProperty):
          UnaggregatedFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: UnaggregatedFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.UnaggregatedFieldProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface KPIVisualLayoutOptionsProperty {
    /**
     * The standard layout of the KPI visual.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisuallayoutoptions.html#cfn-quicksight-analysis-kpivisuallayoutoptions-standardlayout)
     */
    public fun standardLayout(): Any? = unwrap(this).getStandardLayout()

    /**
     * A builder for [KPIVisualLayoutOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param standardLayout The standard layout of the KPI visual.
       */
      public fun standardLayout(standardLayout: IResolvable)

      /**
       * @param standardLayout The standard layout of the KPI visual.
       */
      public fun standardLayout(standardLayout: KPIVisualStandardLayoutProperty)

      /**
       * @param standardLayout The standard layout of the KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ac79017ffff1fd0c5ad3c96d47e615991aa6d54ddf61fddd0ebf57b6c8b6194")
      public fun standardLayout(standardLayout: KPIVisualStandardLayoutProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualLayoutOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualLayoutOptionsProperty.builder()

      /**
       * @param standardLayout The standard layout of the KPI visual.
       */
      override fun standardLayout(standardLayout: IResolvable) {
        cdkBuilder.standardLayout(standardLayout.let(IResolvable::unwrap))
      }

      /**
       * @param standardLayout The standard layout of the KPI visual.
       */
      override fun standardLayout(standardLayout: KPIVisualStandardLayoutProperty) {
        cdkBuilder.standardLayout(standardLayout.let(KPIVisualStandardLayoutProperty::unwrap))
      }

      /**
       * @param standardLayout The standard layout of the KPI visual.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ac79017ffff1fd0c5ad3c96d47e615991aa6d54ddf61fddd0ebf57b6c8b6194")
      override
          fun standardLayout(standardLayout: KPIVisualStandardLayoutProperty.Builder.() -> Unit):
          Unit = standardLayout(KPIVisualStandardLayoutProperty(standardLayout))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualLayoutOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualLayoutOptionsProperty,
    ) : KPIVisualLayoutOptionsProperty {
      /**
       * The standard layout of the KPI visual.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisuallayoutoptions.html#cfn-quicksight-analysis-kpivisuallayoutoptions-standardlayout)
       */
      override fun standardLayout(): Any? = unwrap(this).getStandardLayout()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): KPIVisualLayoutOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualLayoutOptionsProperty):
          KPIVisualLayoutOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIVisualLayoutOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.KPIVisualLayoutOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface SheetElementRenderingRuleProperty {
    /**
     * The override configuration of the rendering rules of a sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementrenderingrule.html#cfn-quicksight-analysis-sheetelementrenderingrule-configurationoverrides)
     */
    public fun configurationOverrides(): Any

    /**
     * The expression of the rendering rules of a sheet.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementrenderingrule.html#cfn-quicksight-analysis-sheetelementrenderingrule-expression)
     */
    public fun expression(): String

    /**
     * A builder for [SheetElementRenderingRuleProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param configurationOverrides The override configuration of the rendering rules of a sheet.
       * 
       */
      public fun configurationOverrides(configurationOverrides: IResolvable)

      /**
       * @param configurationOverrides The override configuration of the rendering rules of a sheet.
       * 
       */
      public
          fun configurationOverrides(configurationOverrides: SheetElementConfigurationOverridesProperty)

      /**
       * @param configurationOverrides The override configuration of the rendering rules of a sheet.
       * 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("246303cde9f567fb4a15cfbe543dde290330f4fb5bd81a2954517640f4272e13")
      public
          fun configurationOverrides(configurationOverrides: SheetElementConfigurationOverridesProperty.Builder.() -> Unit)

      /**
       * @param expression The expression of the rendering rules of a sheet. 
       */
      public fun expression(expression: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetElementRenderingRuleProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetElementRenderingRuleProperty.builder()

      /**
       * @param configurationOverrides The override configuration of the rendering rules of a sheet.
       * 
       */
      override fun configurationOverrides(configurationOverrides: IResolvable) {
        cdkBuilder.configurationOverrides(configurationOverrides.let(IResolvable::unwrap))
      }

      /**
       * @param configurationOverrides The override configuration of the rendering rules of a sheet.
       * 
       */
      override
          fun configurationOverrides(configurationOverrides: SheetElementConfigurationOverridesProperty) {
        cdkBuilder.configurationOverrides(configurationOverrides.let(SheetElementConfigurationOverridesProperty::unwrap))
      }

      /**
       * @param configurationOverrides The override configuration of the rendering rules of a sheet.
       * 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("246303cde9f567fb4a15cfbe543dde290330f4fb5bd81a2954517640f4272e13")
      override
          fun configurationOverrides(configurationOverrides: SheetElementConfigurationOverridesProperty.Builder.() -> Unit):
          Unit =
          configurationOverrides(SheetElementConfigurationOverridesProperty(configurationOverrides))

      /**
       * @param expression The expression of the rendering rules of a sheet. 
       */
      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetElementRenderingRuleProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetElementRenderingRuleProperty,
    ) : SheetElementRenderingRuleProperty {
      /**
       * The override configuration of the rendering rules of a sheet.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementrenderingrule.html#cfn-quicksight-analysis-sheetelementrenderingrule-configurationoverrides)
       */
      override fun configurationOverrides(): Any = unwrap(this).getConfigurationOverrides()

      /**
       * The expression of the rendering rules of a sheet.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementrenderingrule.html#cfn-quicksight-analysis-sheetelementrenderingrule-expression)
       */
      override fun expression(): String = unwrap(this).getExpression()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          SheetElementRenderingRuleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetElementRenderingRuleProperty):
          SheetElementRenderingRuleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetElementRenderingRuleProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SheetElementRenderingRuleProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface DataPathColorProperty {
    /**
     * The color that needs to be applied to the element.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathcolor.html#cfn-quicksight-analysis-datapathcolor-color)
     */
    public fun color(): String

    /**
     * The element that the color needs to be applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathcolor.html#cfn-quicksight-analysis-datapathcolor-element)
     */
    public fun element(): Any

    /**
     * The time granularity of the field that the color needs to be applied to.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathcolor.html#cfn-quicksight-analysis-datapathcolor-timegranularity)
     */
    public fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

    /**
     * A builder for [DataPathColorProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color The color that needs to be applied to the element. 
       */
      public fun color(color: String)

      /**
       * @param element The element that the color needs to be applied to. 
       */
      public fun element(element: IResolvable)

      /**
       * @param element The element that the color needs to be applied to. 
       */
      public fun element(element: DataPathValueProperty)

      /**
       * @param element The element that the color needs to be applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d34916594971180a83c72408e6211a615a8c3ee3040dddf863071039a7e40bfa")
      public fun element(element: DataPathValueProperty.Builder.() -> Unit)

      /**
       * @param timeGranularity The time granularity of the field that the color needs to be applied
       * to.
       */
      public fun timeGranularity(timeGranularity: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathColorProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathColorProperty.builder()

      /**
       * @param color The color that needs to be applied to the element. 
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      /**
       * @param element The element that the color needs to be applied to. 
       */
      override fun element(element: IResolvable) {
        cdkBuilder.element(element.let(IResolvable::unwrap))
      }

      /**
       * @param element The element that the color needs to be applied to. 
       */
      override fun element(element: DataPathValueProperty) {
        cdkBuilder.element(element.let(DataPathValueProperty::unwrap))
      }

      /**
       * @param element The element that the color needs to be applied to. 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d34916594971180a83c72408e6211a615a8c3ee3040dddf863071039a7e40bfa")
      override fun element(element: DataPathValueProperty.Builder.() -> Unit): Unit =
          element(DataPathValueProperty(element))

      /**
       * @param timeGranularity The time granularity of the field that the color needs to be applied
       * to.
       */
      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathColorProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathColorProperty,
    ) : DataPathColorProperty {
      /**
       * The color that needs to be applied to the element.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathcolor.html#cfn-quicksight-analysis-datapathcolor-color)
       */
      override fun color(): String = unwrap(this).getColor()

      /**
       * The element that the color needs to be applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathcolor.html#cfn-quicksight-analysis-datapathcolor-element)
       */
      override fun element(): Any = unwrap(this).getElement()

      /**
       * The time granularity of the field that the color needs to be applied to.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathcolor.html#cfn-quicksight-analysis-datapathcolor-timegranularity)
       */
      override fun timeGranularity(): String? = unwrap(this).getTimeGranularity()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DataPathColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathColorProperty):
          DataPathColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataPathColorProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DataPathColorProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface ComputationProperty {
    /**
     * The forecast computation configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-forecast)
     */
    public fun forecast(): Any? = unwrap(this).getForecast()

    /**
     * The growth rate computation configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-growthrate)
     */
    public fun growthRate(): Any? = unwrap(this).getGrowthRate()

    /**
     * The maximum and minimum computation configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-maximumminimum)
     */
    public fun maximumMinimum(): Any? = unwrap(this).getMaximumMinimum()

    /**
     * The metric comparison computation configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-metriccomparison)
     */
    public fun metricComparison(): Any? = unwrap(this).getMetricComparison()

    /**
     * The period over period computation configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-periodoverperiod)
     */
    public fun periodOverPeriod(): Any? = unwrap(this).getPeriodOverPeriod()

    /**
     * The period to `DataSetIdentifier` computation configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-periodtodate)
     */
    public fun periodToDate(): Any? = unwrap(this).getPeriodToDate()

    /**
     * The top movers and bottom movers computation configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-topbottommovers)
     */
    public fun topBottomMovers(): Any? = unwrap(this).getTopBottomMovers()

    /**
     * The top ranked and bottom ranked computation configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-topbottomranked)
     */
    public fun topBottomRanked(): Any? = unwrap(this).getTopBottomRanked()

    /**
     * The total aggregation computation configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-totalaggregation)
     */
    public fun totalAggregation(): Any? = unwrap(this).getTotalAggregation()

    /**
     * The unique values computation configuration.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-uniquevalues)
     */
    public fun uniqueValues(): Any? = unwrap(this).getUniqueValues()

    /**
     * A builder for [ComputationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param forecast The forecast computation configuration.
       */
      public fun forecast(forecast: IResolvable)

      /**
       * @param forecast The forecast computation configuration.
       */
      public fun forecast(forecast: ForecastComputationProperty)

      /**
       * @param forecast The forecast computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d110f6919ce37cb494b15b50f243ecedea20cdb7c2e4f5b2f00fd353e12005a6")
      public fun forecast(forecast: ForecastComputationProperty.Builder.() -> Unit)

      /**
       * @param growthRate The growth rate computation configuration.
       */
      public fun growthRate(growthRate: IResolvable)

      /**
       * @param growthRate The growth rate computation configuration.
       */
      public fun growthRate(growthRate: GrowthRateComputationProperty)

      /**
       * @param growthRate The growth rate computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c41a7b89fd62004b64a9d1814f217aaf4d6b0c7d372fbc6f98c44b70cb64db4a")
      public fun growthRate(growthRate: GrowthRateComputationProperty.Builder.() -> Unit)

      /**
       * @param maximumMinimum The maximum and minimum computation configuration.
       */
      public fun maximumMinimum(maximumMinimum: IResolvable)

      /**
       * @param maximumMinimum The maximum and minimum computation configuration.
       */
      public fun maximumMinimum(maximumMinimum: MaximumMinimumComputationProperty)

      /**
       * @param maximumMinimum The maximum and minimum computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("efea6586d648095de96d3c7e5947963cce75dd0fbee476d0c7b1b94003ad0b51")
      public
          fun maximumMinimum(maximumMinimum: MaximumMinimumComputationProperty.Builder.() -> Unit)

      /**
       * @param metricComparison The metric comparison computation configuration.
       */
      public fun metricComparison(metricComparison: IResolvable)

      /**
       * @param metricComparison The metric comparison computation configuration.
       */
      public fun metricComparison(metricComparison: MetricComparisonComputationProperty)

      /**
       * @param metricComparison The metric comparison computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6a0b1bb9d9b5ea77bf782b2b2994be009bfefc0bf1ab658387668ebec96e6205")
      public
          fun metricComparison(metricComparison: MetricComparisonComputationProperty.Builder.() -> Unit)

      /**
       * @param periodOverPeriod The period over period computation configuration.
       */
      public fun periodOverPeriod(periodOverPeriod: IResolvable)

      /**
       * @param periodOverPeriod The period over period computation configuration.
       */
      public fun periodOverPeriod(periodOverPeriod: PeriodOverPeriodComputationProperty)

      /**
       * @param periodOverPeriod The period over period computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("107e360775ec7dd2ff53b890de92ac35726e8ec43247d1e1f0e71a336838cf7e")
      public
          fun periodOverPeriod(periodOverPeriod: PeriodOverPeriodComputationProperty.Builder.() -> Unit)

      /**
       * @param periodToDate The period to `DataSetIdentifier` computation configuration.
       */
      public fun periodToDate(periodToDate: IResolvable)

      /**
       * @param periodToDate The period to `DataSetIdentifier` computation configuration.
       */
      public fun periodToDate(periodToDate: PeriodToDateComputationProperty)

      /**
       * @param periodToDate The period to `DataSetIdentifier` computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a2bfa1ded0d1e8abb8a6d5b6513ed7c9ab75e2e768f903ff7a1069f933606f4c")
      public fun periodToDate(periodToDate: PeriodToDateComputationProperty.Builder.() -> Unit)

      /**
       * @param topBottomMovers The top movers and bottom movers computation configuration.
       */
      public fun topBottomMovers(topBottomMovers: IResolvable)

      /**
       * @param topBottomMovers The top movers and bottom movers computation configuration.
       */
      public fun topBottomMovers(topBottomMovers: TopBottomMoversComputationProperty)

      /**
       * @param topBottomMovers The top movers and bottom movers computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fee9c8f4b815ef0ff401fe0c35abcf619254cb4431cef5a9db98ef746548e9f0")
      public
          fun topBottomMovers(topBottomMovers: TopBottomMoversComputationProperty.Builder.() -> Unit)

      /**
       * @param topBottomRanked The top ranked and bottom ranked computation configuration.
       */
      public fun topBottomRanked(topBottomRanked: IResolvable)

      /**
       * @param topBottomRanked The top ranked and bottom ranked computation configuration.
       */
      public fun topBottomRanked(topBottomRanked: TopBottomRankedComputationProperty)

      /**
       * @param topBottomRanked The top ranked and bottom ranked computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0288f482931a5f54b0afb3e87f094c6a7f8d5794d9ad4e84a04afa46449393fb")
      public
          fun topBottomRanked(topBottomRanked: TopBottomRankedComputationProperty.Builder.() -> Unit)

      /**
       * @param totalAggregation The total aggregation computation configuration.
       */
      public fun totalAggregation(totalAggregation: IResolvable)

      /**
       * @param totalAggregation The total aggregation computation configuration.
       */
      public fun totalAggregation(totalAggregation: TotalAggregationComputationProperty)

      /**
       * @param totalAggregation The total aggregation computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1ba9b3a843d456a312255cd78a2e2a35c871aa3ec3b7f522c1e6b72f59840d9f")
      public
          fun totalAggregation(totalAggregation: TotalAggregationComputationProperty.Builder.() -> Unit)

      /**
       * @param uniqueValues The unique values computation configuration.
       */
      public fun uniqueValues(uniqueValues: IResolvable)

      /**
       * @param uniqueValues The unique values computation configuration.
       */
      public fun uniqueValues(uniqueValues: UniqueValuesComputationProperty)

      /**
       * @param uniqueValues The unique values computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("633551dbfa34ce6291b1073f332fe4dac7a182cf6f1224672e0b1ec5b9b82611")
      public fun uniqueValues(uniqueValues: UniqueValuesComputationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComputationProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComputationProperty.builder()

      /**
       * @param forecast The forecast computation configuration.
       */
      override fun forecast(forecast: IResolvable) {
        cdkBuilder.forecast(forecast.let(IResolvable::unwrap))
      }

      /**
       * @param forecast The forecast computation configuration.
       */
      override fun forecast(forecast: ForecastComputationProperty) {
        cdkBuilder.forecast(forecast.let(ForecastComputationProperty::unwrap))
      }

      /**
       * @param forecast The forecast computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d110f6919ce37cb494b15b50f243ecedea20cdb7c2e4f5b2f00fd353e12005a6")
      override fun forecast(forecast: ForecastComputationProperty.Builder.() -> Unit): Unit =
          forecast(ForecastComputationProperty(forecast))

      /**
       * @param growthRate The growth rate computation configuration.
       */
      override fun growthRate(growthRate: IResolvable) {
        cdkBuilder.growthRate(growthRate.let(IResolvable::unwrap))
      }

      /**
       * @param growthRate The growth rate computation configuration.
       */
      override fun growthRate(growthRate: GrowthRateComputationProperty) {
        cdkBuilder.growthRate(growthRate.let(GrowthRateComputationProperty::unwrap))
      }

      /**
       * @param growthRate The growth rate computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c41a7b89fd62004b64a9d1814f217aaf4d6b0c7d372fbc6f98c44b70cb64db4a")
      override fun growthRate(growthRate: GrowthRateComputationProperty.Builder.() -> Unit): Unit =
          growthRate(GrowthRateComputationProperty(growthRate))

      /**
       * @param maximumMinimum The maximum and minimum computation configuration.
       */
      override fun maximumMinimum(maximumMinimum: IResolvable) {
        cdkBuilder.maximumMinimum(maximumMinimum.let(IResolvable::unwrap))
      }

      /**
       * @param maximumMinimum The maximum and minimum computation configuration.
       */
      override fun maximumMinimum(maximumMinimum: MaximumMinimumComputationProperty) {
        cdkBuilder.maximumMinimum(maximumMinimum.let(MaximumMinimumComputationProperty::unwrap))
      }

      /**
       * @param maximumMinimum The maximum and minimum computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("efea6586d648095de96d3c7e5947963cce75dd0fbee476d0c7b1b94003ad0b51")
      override
          fun maximumMinimum(maximumMinimum: MaximumMinimumComputationProperty.Builder.() -> Unit):
          Unit = maximumMinimum(MaximumMinimumComputationProperty(maximumMinimum))

      /**
       * @param metricComparison The metric comparison computation configuration.
       */
      override fun metricComparison(metricComparison: IResolvable) {
        cdkBuilder.metricComparison(metricComparison.let(IResolvable::unwrap))
      }

      /**
       * @param metricComparison The metric comparison computation configuration.
       */
      override fun metricComparison(metricComparison: MetricComparisonComputationProperty) {
        cdkBuilder.metricComparison(metricComparison.let(MetricComparisonComputationProperty::unwrap))
      }

      /**
       * @param metricComparison The metric comparison computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6a0b1bb9d9b5ea77bf782b2b2994be009bfefc0bf1ab658387668ebec96e6205")
      override
          fun metricComparison(metricComparison: MetricComparisonComputationProperty.Builder.() -> Unit):
          Unit = metricComparison(MetricComparisonComputationProperty(metricComparison))

      /**
       * @param periodOverPeriod The period over period computation configuration.
       */
      override fun periodOverPeriod(periodOverPeriod: IResolvable) {
        cdkBuilder.periodOverPeriod(periodOverPeriod.let(IResolvable::unwrap))
      }

      /**
       * @param periodOverPeriod The period over period computation configuration.
       */
      override fun periodOverPeriod(periodOverPeriod: PeriodOverPeriodComputationProperty) {
        cdkBuilder.periodOverPeriod(periodOverPeriod.let(PeriodOverPeriodComputationProperty::unwrap))
      }

      /**
       * @param periodOverPeriod The period over period computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("107e360775ec7dd2ff53b890de92ac35726e8ec43247d1e1f0e71a336838cf7e")
      override
          fun periodOverPeriod(periodOverPeriod: PeriodOverPeriodComputationProperty.Builder.() -> Unit):
          Unit = periodOverPeriod(PeriodOverPeriodComputationProperty(periodOverPeriod))

      /**
       * @param periodToDate The period to `DataSetIdentifier` computation configuration.
       */
      override fun periodToDate(periodToDate: IResolvable) {
        cdkBuilder.periodToDate(periodToDate.let(IResolvable::unwrap))
      }

      /**
       * @param periodToDate The period to `DataSetIdentifier` computation configuration.
       */
      override fun periodToDate(periodToDate: PeriodToDateComputationProperty) {
        cdkBuilder.periodToDate(periodToDate.let(PeriodToDateComputationProperty::unwrap))
      }

      /**
       * @param periodToDate The period to `DataSetIdentifier` computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a2bfa1ded0d1e8abb8a6d5b6513ed7c9ab75e2e768f903ff7a1069f933606f4c")
      override fun periodToDate(periodToDate: PeriodToDateComputationProperty.Builder.() -> Unit):
          Unit = periodToDate(PeriodToDateComputationProperty(periodToDate))

      /**
       * @param topBottomMovers The top movers and bottom movers computation configuration.
       */
      override fun topBottomMovers(topBottomMovers: IResolvable) {
        cdkBuilder.topBottomMovers(topBottomMovers.let(IResolvable::unwrap))
      }

      /**
       * @param topBottomMovers The top movers and bottom movers computation configuration.
       */
      override fun topBottomMovers(topBottomMovers: TopBottomMoversComputationProperty) {
        cdkBuilder.topBottomMovers(topBottomMovers.let(TopBottomMoversComputationProperty::unwrap))
      }

      /**
       * @param topBottomMovers The top movers and bottom movers computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fee9c8f4b815ef0ff401fe0c35abcf619254cb4431cef5a9db98ef746548e9f0")
      override
          fun topBottomMovers(topBottomMovers: TopBottomMoversComputationProperty.Builder.() -> Unit):
          Unit = topBottomMovers(TopBottomMoversComputationProperty(topBottomMovers))

      /**
       * @param topBottomRanked The top ranked and bottom ranked computation configuration.
       */
      override fun topBottomRanked(topBottomRanked: IResolvable) {
        cdkBuilder.topBottomRanked(topBottomRanked.let(IResolvable::unwrap))
      }

      /**
       * @param topBottomRanked The top ranked and bottom ranked computation configuration.
       */
      override fun topBottomRanked(topBottomRanked: TopBottomRankedComputationProperty) {
        cdkBuilder.topBottomRanked(topBottomRanked.let(TopBottomRankedComputationProperty::unwrap))
      }

      /**
       * @param topBottomRanked The top ranked and bottom ranked computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0288f482931a5f54b0afb3e87f094c6a7f8d5794d9ad4e84a04afa46449393fb")
      override
          fun topBottomRanked(topBottomRanked: TopBottomRankedComputationProperty.Builder.() -> Unit):
          Unit = topBottomRanked(TopBottomRankedComputationProperty(topBottomRanked))

      /**
       * @param totalAggregation The total aggregation computation configuration.
       */
      override fun totalAggregation(totalAggregation: IResolvable) {
        cdkBuilder.totalAggregation(totalAggregation.let(IResolvable::unwrap))
      }

      /**
       * @param totalAggregation The total aggregation computation configuration.
       */
      override fun totalAggregation(totalAggregation: TotalAggregationComputationProperty) {
        cdkBuilder.totalAggregation(totalAggregation.let(TotalAggregationComputationProperty::unwrap))
      }

      /**
       * @param totalAggregation The total aggregation computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1ba9b3a843d456a312255cd78a2e2a35c871aa3ec3b7f522c1e6b72f59840d9f")
      override
          fun totalAggregation(totalAggregation: TotalAggregationComputationProperty.Builder.() -> Unit):
          Unit = totalAggregation(TotalAggregationComputationProperty(totalAggregation))

      /**
       * @param uniqueValues The unique values computation configuration.
       */
      override fun uniqueValues(uniqueValues: IResolvable) {
        cdkBuilder.uniqueValues(uniqueValues.let(IResolvable::unwrap))
      }

      /**
       * @param uniqueValues The unique values computation configuration.
       */
      override fun uniqueValues(uniqueValues: UniqueValuesComputationProperty) {
        cdkBuilder.uniqueValues(uniqueValues.let(UniqueValuesComputationProperty::unwrap))
      }

      /**
       * @param uniqueValues The unique values computation configuration.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("633551dbfa34ce6291b1073f332fe4dac7a182cf6f1224672e0b1ec5b9b82611")
      override fun uniqueValues(uniqueValues: UniqueValuesComputationProperty.Builder.() -> Unit):
          Unit = uniqueValues(UniqueValuesComputationProperty(uniqueValues))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.ComputationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComputationProperty,
    ) : ComputationProperty {
      /**
       * The forecast computation configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-forecast)
       */
      override fun forecast(): Any? = unwrap(this).getForecast()

      /**
       * The growth rate computation configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-growthrate)
       */
      override fun growthRate(): Any? = unwrap(this).getGrowthRate()

      /**
       * The maximum and minimum computation configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-maximumminimum)
       */
      override fun maximumMinimum(): Any? = unwrap(this).getMaximumMinimum()

      /**
       * The metric comparison computation configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-metriccomparison)
       */
      override fun metricComparison(): Any? = unwrap(this).getMetricComparison()

      /**
       * The period over period computation configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-periodoverperiod)
       */
      override fun periodOverPeriod(): Any? = unwrap(this).getPeriodOverPeriod()

      /**
       * The period to `DataSetIdentifier` computation configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-periodtodate)
       */
      override fun periodToDate(): Any? = unwrap(this).getPeriodToDate()

      /**
       * The top movers and bottom movers computation configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-topbottommovers)
       */
      override fun topBottomMovers(): Any? = unwrap(this).getTopBottomMovers()

      /**
       * The top ranked and bottom ranked computation configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-topbottomranked)
       */
      override fun topBottomRanked(): Any? = unwrap(this).getTopBottomRanked()

      /**
       * The total aggregation computation configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-totalaggregation)
       */
      override fun totalAggregation(): Any? = unwrap(this).getTotalAggregation()

      /**
       * The unique values computation configuration.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-uniquevalues)
       */
      override fun uniqueValues(): Any? = unwrap(this).getUniqueValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ComputationProperty):
          ComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ComputationProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface FunnelChartAggregatedFieldWellsProperty {
    /**
     * The category field wells of a funnel chart.
     *
     * Values are grouped by category fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartaggregatedfieldwells.html#cfn-quicksight-analysis-funnelchartaggregatedfieldwells-category)
     */
    public fun category(): Any? = unwrap(this).getCategory()

    /**
     * The value field wells of a funnel chart.
     *
     * Values are aggregated based on categories.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartaggregatedfieldwells.html#cfn-quicksight-analysis-funnelchartaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [FunnelChartAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param category The category field wells of a funnel chart.
       * Values are grouped by category fields.
       */
      public fun category(category: IResolvable)

      /**
       * @param category The category field wells of a funnel chart.
       * Values are grouped by category fields.
       */
      public fun category(category: List<Any>)

      /**
       * @param category The category field wells of a funnel chart.
       * Values are grouped by category fields.
       */
      public fun category(vararg category: Any)

      /**
       * @param values The value field wells of a funnel chart.
       * Values are aggregated based on categories.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The value field wells of a funnel chart.
       * Values are aggregated based on categories.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The value field wells of a funnel chart.
       * Values are aggregated based on categories.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartAggregatedFieldWellsProperty.builder()

      /**
       * @param category The category field wells of a funnel chart.
       * Values are grouped by category fields.
       */
      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      /**
       * @param category The category field wells of a funnel chart.
       * Values are grouped by category fields.
       */
      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      /**
       * @param category The category field wells of a funnel chart.
       * Values are grouped by category fields.
       */
      override fun category(vararg category: Any): Unit = category(category.toList())

      /**
       * @param values The value field wells of a funnel chart.
       * Values are aggregated based on categories.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The value field wells of a funnel chart.
       * Values are aggregated based on categories.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The value field wells of a funnel chart.
       * Values are aggregated based on categories.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartAggregatedFieldWellsProperty,
    ) : FunnelChartAggregatedFieldWellsProperty {
      /**
       * The category field wells of a funnel chart.
       *
       * Values are grouped by category fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartaggregatedfieldwells.html#cfn-quicksight-analysis-funnelchartaggregatedfieldwells-category)
       */
      override fun category(): Any? = unwrap(this).getCategory()

      /**
       * The value field wells of a funnel chart.
       *
       * Values are aggregated based on categories.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartaggregatedfieldwells.html#cfn-quicksight-analysis-funnelchartaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FunnelChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartAggregatedFieldWellsProperty):
          FunnelChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FunnelChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FunnelChartAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FormatConfigurationProperty {
    /**
     * Formatting configuration for `DateTime` fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-formatconfiguration.html#cfn-quicksight-analysis-formatconfiguration-datetimeformatconfiguration)
     */
    public fun dateTimeFormatConfiguration(): Any? = unwrap(this).getDateTimeFormatConfiguration()

    /**
     * Formatting configuration for number fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-formatconfiguration.html#cfn-quicksight-analysis-formatconfiguration-numberformatconfiguration)
     */
    public fun numberFormatConfiguration(): Any? = unwrap(this).getNumberFormatConfiguration()

    /**
     * Formatting configuration for string fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-formatconfiguration.html#cfn-quicksight-analysis-formatconfiguration-stringformatconfiguration)
     */
    public fun stringFormatConfiguration(): Any? = unwrap(this).getStringFormatConfiguration()

    /**
     * A builder for [FormatConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dateTimeFormatConfiguration Formatting configuration for `DateTime` fields.
       */
      public fun dateTimeFormatConfiguration(dateTimeFormatConfiguration: IResolvable)

      /**
       * @param dateTimeFormatConfiguration Formatting configuration for `DateTime` fields.
       */
      public
          fun dateTimeFormatConfiguration(dateTimeFormatConfiguration: DateTimeFormatConfigurationProperty)

      /**
       * @param dateTimeFormatConfiguration Formatting configuration for `DateTime` fields.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b9a659915927f1e18ae003e88a431587c80e8369faa3ac650e0f7993926ea190")
      public
          fun dateTimeFormatConfiguration(dateTimeFormatConfiguration: DateTimeFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param numberFormatConfiguration Formatting configuration for number fields.
       */
      public fun numberFormatConfiguration(numberFormatConfiguration: IResolvable)

      /**
       * @param numberFormatConfiguration Formatting configuration for number fields.
       */
      public
          fun numberFormatConfiguration(numberFormatConfiguration: NumberFormatConfigurationProperty)

      /**
       * @param numberFormatConfiguration Formatting configuration for number fields.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cb72cc87103501579e6cb166019b367748503492f2674bd20033929a4bc94690")
      public
          fun numberFormatConfiguration(numberFormatConfiguration: NumberFormatConfigurationProperty.Builder.() -> Unit)

      /**
       * @param stringFormatConfiguration Formatting configuration for string fields.
       */
      public fun stringFormatConfiguration(stringFormatConfiguration: IResolvable)

      /**
       * @param stringFormatConfiguration Formatting configuration for string fields.
       */
      public
          fun stringFormatConfiguration(stringFormatConfiguration: StringFormatConfigurationProperty)

      /**
       * @param stringFormatConfiguration Formatting configuration for string fields.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("89279c814f4cafea8119c20c95d0fdccfbe009461aa93d7b55c4245bd723e38b")
      public
          fun stringFormatConfiguration(stringFormatConfiguration: StringFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FormatConfigurationProperty.builder()

      /**
       * @param dateTimeFormatConfiguration Formatting configuration for `DateTime` fields.
       */
      override fun dateTimeFormatConfiguration(dateTimeFormatConfiguration: IResolvable) {
        cdkBuilder.dateTimeFormatConfiguration(dateTimeFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param dateTimeFormatConfiguration Formatting configuration for `DateTime` fields.
       */
      override
          fun dateTimeFormatConfiguration(dateTimeFormatConfiguration: DateTimeFormatConfigurationProperty) {
        cdkBuilder.dateTimeFormatConfiguration(dateTimeFormatConfiguration.let(DateTimeFormatConfigurationProperty::unwrap))
      }

      /**
       * @param dateTimeFormatConfiguration Formatting configuration for `DateTime` fields.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b9a659915927f1e18ae003e88a431587c80e8369faa3ac650e0f7993926ea190")
      override
          fun dateTimeFormatConfiguration(dateTimeFormatConfiguration: DateTimeFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty(dateTimeFormatConfiguration))

      /**
       * @param numberFormatConfiguration Formatting configuration for number fields.
       */
      override fun numberFormatConfiguration(numberFormatConfiguration: IResolvable) {
        cdkBuilder.numberFormatConfiguration(numberFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param numberFormatConfiguration Formatting configuration for number fields.
       */
      override
          fun numberFormatConfiguration(numberFormatConfiguration: NumberFormatConfigurationProperty) {
        cdkBuilder.numberFormatConfiguration(numberFormatConfiguration.let(NumberFormatConfigurationProperty::unwrap))
      }

      /**
       * @param numberFormatConfiguration Formatting configuration for number fields.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cb72cc87103501579e6cb166019b367748503492f2674bd20033929a4bc94690")
      override
          fun numberFormatConfiguration(numberFormatConfiguration: NumberFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          numberFormatConfiguration(NumberFormatConfigurationProperty(numberFormatConfiguration))

      /**
       * @param stringFormatConfiguration Formatting configuration for string fields.
       */
      override fun stringFormatConfiguration(stringFormatConfiguration: IResolvable) {
        cdkBuilder.stringFormatConfiguration(stringFormatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param stringFormatConfiguration Formatting configuration for string fields.
       */
      override
          fun stringFormatConfiguration(stringFormatConfiguration: StringFormatConfigurationProperty) {
        cdkBuilder.stringFormatConfiguration(stringFormatConfiguration.let(StringFormatConfigurationProperty::unwrap))
      }

      /**
       * @param stringFormatConfiguration Formatting configuration for string fields.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("89279c814f4cafea8119c20c95d0fdccfbe009461aa93d7b55c4245bd723e38b")
      override
          fun stringFormatConfiguration(stringFormatConfiguration: StringFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          stringFormatConfiguration(StringFormatConfigurationProperty(stringFormatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FormatConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FormatConfigurationProperty,
    ) : FormatConfigurationProperty {
      /**
       * Formatting configuration for `DateTime` fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-formatconfiguration.html#cfn-quicksight-analysis-formatconfiguration-datetimeformatconfiguration)
       */
      override fun dateTimeFormatConfiguration(): Any? =
          unwrap(this).getDateTimeFormatConfiguration()

      /**
       * Formatting configuration for number fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-formatconfiguration.html#cfn-quicksight-analysis-formatconfiguration-numberformatconfiguration)
       */
      override fun numberFormatConfiguration(): Any? = unwrap(this).getNumberFormatConfiguration()

      /**
       * Formatting configuration for string fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-formatconfiguration.html#cfn-quicksight-analysis-formatconfiguration-stringformatconfiguration)
       */
      override fun stringFormatConfiguration(): Any? = unwrap(this).getStringFormatConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FormatConfigurationProperty):
          FormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FormatConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface BodySectionContentProperty {
    /**
     * The layout configuration of a body section.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectioncontent.html#cfn-quicksight-analysis-bodysectioncontent-layout)
     */
    public fun layout(): Any? = unwrap(this).getLayout()

    /**
     * A builder for [BodySectionContentProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param layout The layout configuration of a body section.
       */
      public fun layout(layout: IResolvable)

      /**
       * @param layout The layout configuration of a body section.
       */
      public fun layout(layout: SectionLayoutConfigurationProperty)

      /**
       * @param layout The layout configuration of a body section.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c31ac59ddff64d7eb91f273682d3deb27fd3c0a11da9d58e6227084e6a3b968d")
      public fun layout(layout: SectionLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BodySectionContentProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BodySectionContentProperty.builder()

      /**
       * @param layout The layout configuration of a body section.
       */
      override fun layout(layout: IResolvable) {
        cdkBuilder.layout(layout.let(IResolvable::unwrap))
      }

      /**
       * @param layout The layout configuration of a body section.
       */
      override fun layout(layout: SectionLayoutConfigurationProperty) {
        cdkBuilder.layout(layout.let(SectionLayoutConfigurationProperty::unwrap))
      }

      /**
       * @param layout The layout configuration of a body section.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c31ac59ddff64d7eb91f273682d3deb27fd3c0a11da9d58e6227084e6a3b968d")
      override fun layout(layout: SectionLayoutConfigurationProperty.Builder.() -> Unit): Unit =
          layout(SectionLayoutConfigurationProperty(layout))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BodySectionContentProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BodySectionContentProperty,
    ) : BodySectionContentProperty {
      /**
       * The layout configuration of a body section.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectioncontent.html#cfn-quicksight-analysis-bodysectioncontent-layout)
       */
      override fun layout(): Any? = unwrap(this).getLayout()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): BodySectionContentProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.BodySectionContentProperty):
          BodySectionContentProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BodySectionContentProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.BodySectionContentProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface NumericalMeasureFieldProperty {
    /**
     * The aggregation function of the measure field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html#cfn-quicksight-analysis-numericalmeasurefield-aggregationfunction)
     */
    public fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

    /**
     * The column that is used in the `NumericalMeasureField` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html#cfn-quicksight-analysis-numericalmeasurefield-column)
     */
    public fun column(): Any

    /**
     * The custom field ID.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html#cfn-quicksight-analysis-numericalmeasurefield-fieldid)
     */
    public fun fieldId(): String

    /**
     * The format configuration of the field.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html#cfn-quicksight-analysis-numericalmeasurefield-formatconfiguration)
     */
    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    /**
     * A builder for [NumericalMeasureFieldProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param aggregationFunction The aggregation function of the measure field.
       */
      public fun aggregationFunction(aggregationFunction: IResolvable)

      /**
       * @param aggregationFunction The aggregation function of the measure field.
       */
      public fun aggregationFunction(aggregationFunction: NumericalAggregationFunctionProperty)

      /**
       * @param aggregationFunction The aggregation function of the measure field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("73ba9a744f0d7ceef8497c8bbbd979d30e6bab2b76c52a27325029e7876a61aa")
      public
          fun aggregationFunction(aggregationFunction: NumericalAggregationFunctionProperty.Builder.() -> Unit)

      /**
       * @param column The column that is used in the `NumericalMeasureField` . 
       */
      public fun column(column: IResolvable)

      /**
       * @param column The column that is used in the `NumericalMeasureField` . 
       */
      public fun column(column: ColumnIdentifierProperty)

      /**
       * @param column The column that is used in the `NumericalMeasureField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a67f72400c8064193df506d87abda020d53cec2e16c8d041445fd5607bdac98b")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      /**
       * @param fieldId The custom field ID. 
       */
      public fun fieldId(fieldId: String)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: IResolvable)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      public fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty)

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f3688a4e358751e90f083b8018b934778105d51fb0432d6c0b398b12c63f78a7")
      public
          fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalMeasureFieldProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalMeasureFieldProperty.builder()

      /**
       * @param aggregationFunction The aggregation function of the measure field.
       */
      override fun aggregationFunction(aggregationFunction: IResolvable) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(IResolvable::unwrap))
      }

      /**
       * @param aggregationFunction The aggregation function of the measure field.
       */
      override fun aggregationFunction(aggregationFunction: NumericalAggregationFunctionProperty) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(NumericalAggregationFunctionProperty::unwrap))
      }

      /**
       * @param aggregationFunction The aggregation function of the measure field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("73ba9a744f0d7ceef8497c8bbbd979d30e6bab2b76c52a27325029e7876a61aa")
      override
          fun aggregationFunction(aggregationFunction: NumericalAggregationFunctionProperty.Builder.() -> Unit):
          Unit = aggregationFunction(NumericalAggregationFunctionProperty(aggregationFunction))

      /**
       * @param column The column that is used in the `NumericalMeasureField` . 
       */
      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      /**
       * @param column The column that is used in the `NumericalMeasureField` . 
       */
      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      /**
       * @param column The column that is used in the `NumericalMeasureField` . 
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a67f72400c8064193df506d87abda020d53cec2e16c8d041445fd5607bdac98b")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      /**
       * @param fieldId The custom field ID. 
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      override fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(NumberFormatConfigurationProperty::unwrap))
      }

      /**
       * @param formatConfiguration The format configuration of the field.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f3688a4e358751e90f083b8018b934778105d51fb0432d6c0b398b12c63f78a7")
      override
          fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(NumberFormatConfigurationProperty(formatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalMeasureFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalMeasureFieldProperty,
    ) : NumericalMeasureFieldProperty {
      /**
       * The aggregation function of the measure field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html#cfn-quicksight-analysis-numericalmeasurefield-aggregationfunction)
       */
      override fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

      /**
       * The column that is used in the `NumericalMeasureField` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html#cfn-quicksight-analysis-numericalmeasurefield-column)
       */
      override fun column(): Any = unwrap(this).getColumn()

      /**
       * The custom field ID.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html#cfn-quicksight-analysis-numericalmeasurefield-fieldid)
       */
      override fun fieldId(): String = unwrap(this).getFieldId()

      /**
       * The format configuration of the field.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html#cfn-quicksight-analysis-numericalmeasurefield-formatconfiguration)
       */
      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): NumericalMeasureFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalMeasureFieldProperty):
          NumericalMeasureFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericalMeasureFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.NumericalMeasureFieldProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilledMapSortConfigurationProperty {
    /**
     * The sort configuration of the location fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapsortconfiguration.html#cfn-quicksight-analysis-filledmapsortconfiguration-categorysort)
     */
    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    /**
     * A builder for [FilledMapSortConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categorySort The sort configuration of the location fields.
       */
      public fun categorySort(categorySort: IResolvable)

      /**
       * @param categorySort The sort configuration of the location fields.
       */
      public fun categorySort(categorySort: List<Any>)

      /**
       * @param categorySort The sort configuration of the location fields.
       */
      public fun categorySort(vararg categorySort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapSortConfigurationProperty.builder()

      /**
       * @param categorySort The sort configuration of the location fields.
       */
      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      /**
       * @param categorySort The sort configuration of the location fields.
       */
      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      /**
       * @param categorySort The sort configuration of the location fields.
       */
      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapSortConfigurationProperty,
    ) : FilledMapSortConfigurationProperty {
      /**
       * The sort configuration of the location fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapsortconfiguration.html#cfn-quicksight-analysis-filledmapsortconfiguration-categorysort)
       */
      override fun categorySort(): Any? = unwrap(this).getCategorySort()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilledMapSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapSortConfigurationProperty):
          FilledMapSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilledMapSortConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilterDropDownControlProperty {
    /**
     * The values that are displayed in a control can be configured to only show values that are
     * valid based on what's selected in other controls.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-cascadingcontrolconfiguration)
     */
    public fun cascadingControlConfiguration(): Any? =
        unwrap(this).getCascadingControlConfiguration()

    /**
     * The display options of the `FilterDropDownControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The ID of the `FilterDropDownControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-filtercontrolid)
     */
    public fun filterControlId(): String

    /**
     * A list of selectable values that are used in a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-selectablevalues)
     */
    public fun selectableValues(): Any? = unwrap(this).getSelectableValues()

    /**
     * The source filter ID of the `FilterDropDownControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-sourcefilterid)
     */
    public fun sourceFilterId(): String

    /**
     * The title of the `FilterDropDownControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-title)
     */
    public fun title(): String

    /**
     * The type of the `FilterDropDownControl` . Choose one of the following options:.
     *
     * * `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
     * * `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-type)
     */
    public fun type(): String? = unwrap(this).getType()

    /**
     * A builder for [FilterDropDownControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      public fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable)

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty)

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3941f4c3e1cb9093e2b130ded33e776c2df511002e8ffc54ee3b9d8fe1458df8")
      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit)

      /**
       * @param displayOptions The display options of the `FilterDropDownControl` .
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of the `FilterDropDownControl` .
       */
      public fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of the `FilterDropDownControl` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fb94e98b68f469fca8843eb0072727ffc80dc69da1d2b53afccd58ab4da032f4")
      public
          fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param filterControlId The ID of the `FilterDropDownControl` . 
       */
      public fun filterControlId(filterControlId: String)

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      public fun selectableValues(selectableValues: IResolvable)

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      public fun selectableValues(selectableValues: FilterSelectableValuesProperty)

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("96916f57999f25833dd1c6fa7857863cb745aff6b3888cb8a1f1084fafc4afdd")
      public
          fun selectableValues(selectableValues: FilterSelectableValuesProperty.Builder.() -> Unit)

      /**
       * @param sourceFilterId The source filter ID of the `FilterDropDownControl` . 
       */
      public fun sourceFilterId(sourceFilterId: String)

      /**
       * @param title The title of the `FilterDropDownControl` . 
       */
      public fun title(title: String)

      /**
       * @param type The type of the `FilterDropDownControl` . Choose one of the following options:.
       * * `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
       * * `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
       */
      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterDropDownControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterDropDownControlProperty.builder()

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      override fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(CascadingControlConfigurationProperty::unwrap))
      }

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3941f4c3e1cb9093e2b130ded33e776c2df511002e8ffc54ee3b9d8fe1458df8")
      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit):
          Unit =
          cascadingControlConfiguration(CascadingControlConfigurationProperty(cascadingControlConfiguration))

      /**
       * @param displayOptions The display options of the `FilterDropDownControl` .
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of the `FilterDropDownControl` .
       */
      override fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(DropDownControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of the `FilterDropDownControl` .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fb94e98b68f469fca8843eb0072727ffc80dc69da1d2b53afccd58ab4da032f4")
      override
          fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(DropDownControlDisplayOptionsProperty(displayOptions))

      /**
       * @param filterControlId The ID of the `FilterDropDownControl` . 
       */
      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      override fun selectableValues(selectableValues: IResolvable) {
        cdkBuilder.selectableValues(selectableValues.let(IResolvable::unwrap))
      }

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      override fun selectableValues(selectableValues: FilterSelectableValuesProperty) {
        cdkBuilder.selectableValues(selectableValues.let(FilterSelectableValuesProperty::unwrap))
      }

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("96916f57999f25833dd1c6fa7857863cb745aff6b3888cb8a1f1084fafc4afdd")
      override
          fun selectableValues(selectableValues: FilterSelectableValuesProperty.Builder.() -> Unit):
          Unit = selectableValues(FilterSelectableValuesProperty(selectableValues))

      /**
       * @param sourceFilterId The source filter ID of the `FilterDropDownControl` . 
       */
      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      /**
       * @param title The title of the `FilterDropDownControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      /**
       * @param type The type of the `FilterDropDownControl` . Choose one of the following options:.
       * * `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
       * * `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterDropDownControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterDropDownControlProperty,
    ) : FilterDropDownControlProperty {
      /**
       * The values that are displayed in a control can be configured to only show values that are
       * valid based on what's selected in other controls.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-cascadingcontrolconfiguration)
       */
      override fun cascadingControlConfiguration(): Any? =
          unwrap(this).getCascadingControlConfiguration()

      /**
       * The display options of the `FilterDropDownControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The ID of the `FilterDropDownControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-filtercontrolid)
       */
      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      /**
       * A list of selectable values that are used in a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-selectablevalues)
       */
      override fun selectableValues(): Any? = unwrap(this).getSelectableValues()

      /**
       * The source filter ID of the `FilterDropDownControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-sourcefilterid)
       */
      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      /**
       * The title of the `FilterDropDownControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()

      /**
       * The type of the `FilterDropDownControl` . Choose one of the following options:.
       *
       * * `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
       * * `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-type)
       */
      override fun type(): String? = unwrap(this).getType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilterDropDownControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterDropDownControlProperty):
          FilterDropDownControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterDropDownControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterDropDownControlProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface HistogramConfigurationProperty {
    /**
     * The options that determine the presentation of histogram bins.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-binoptions)
     */
    public fun binOptions(): Any? = unwrap(this).getBinOptions()

    /**
     * The data label configuration of a histogram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-datalabels)
     */
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    /**
     * The field well configuration of a histogram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-fieldwells)
     */
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    /**
     * The tooltip configuration of a histogram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-tooltip)
     */
    public fun tooltip(): Any? = unwrap(this).getTooltip()

    /**
     * The visual palette configuration of a histogram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-visualpalette)
     */
    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    /**
     * The options that determine the presentation of the x-axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-xaxisdisplayoptions)
     */
    public fun xAxisDisplayOptions(): Any? = unwrap(this).getXAxisDisplayOptions()

    /**
     * The options that determine the presentation of the x-axis label.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-xaxislabeloptions)
     */
    public fun xAxisLabelOptions(): Any? = unwrap(this).getXAxisLabelOptions()

    /**
     * The options that determine the presentation of the y-axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-yaxisdisplayoptions)
     */
    public fun yAxisDisplayOptions(): Any? = unwrap(this).getYAxisDisplayOptions()

    /**
     * A builder for [HistogramConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param binOptions The options that determine the presentation of histogram bins.
       */
      public fun binOptions(binOptions: IResolvable)

      /**
       * @param binOptions The options that determine the presentation of histogram bins.
       */
      public fun binOptions(binOptions: HistogramBinOptionsProperty)

      /**
       * @param binOptions The options that determine the presentation of histogram bins.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("63f899aee00c1df0b16798a0fb63247c5e98a4a9e9be95d50b0cd972cce5ec63")
      public fun binOptions(binOptions: HistogramBinOptionsProperty.Builder.() -> Unit)

      /**
       * @param dataLabels The data label configuration of a histogram.
       */
      public fun dataLabels(dataLabels: IResolvable)

      /**
       * @param dataLabels The data label configuration of a histogram.
       */
      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      /**
       * @param dataLabels The data label configuration of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d52257cd7827c74a7e1657c8d95f0a4fc7fd93f7c6836f7877e8d1ccba8021ed")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param fieldWells The field well configuration of a histogram.
       */
      public fun fieldWells(fieldWells: IResolvable)

      /**
       * @param fieldWells The field well configuration of a histogram.
       */
      public fun fieldWells(fieldWells: HistogramFieldWellsProperty)

      /**
       * @param fieldWells The field well configuration of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1bcdadd76c76e2104a500f63948da0f56df4df4f3beb6a3cc9dcb7fed532fb2e")
      public fun fieldWells(fieldWells: HistogramFieldWellsProperty.Builder.() -> Unit)

      /**
       * @param tooltip The tooltip configuration of a histogram.
       */
      public fun tooltip(tooltip: IResolvable)

      /**
       * @param tooltip The tooltip configuration of a histogram.
       */
      public fun tooltip(tooltip: TooltipOptionsProperty)

      /**
       * @param tooltip The tooltip configuration of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c74adbbc77faafafc9807fdb8d56ef9102272b58867cb50b748bf2a49394118")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      /**
       * @param visualPalette The visual palette configuration of a histogram.
       */
      public fun visualPalette(visualPalette: IResolvable)

      /**
       * @param visualPalette The visual palette configuration of a histogram.
       */
      public fun visualPalette(visualPalette: VisualPaletteProperty)

      /**
       * @param visualPalette The visual palette configuration of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1f17203b0b329d2cd3a8db07649443c76687bb41921b56bc7bd70ad5f37420d7")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)

      /**
       * @param xAxisDisplayOptions The options that determine the presentation of the x-axis.
       */
      public fun xAxisDisplayOptions(xAxisDisplayOptions: IResolvable)

      /**
       * @param xAxisDisplayOptions The options that determine the presentation of the x-axis.
       */
      public fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty)

      /**
       * @param xAxisDisplayOptions The options that determine the presentation of the x-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("46380979e78fb5f32e9a74acacee7504c5281b4a9f3050c0855e38db020be387")
      public
          fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param xAxisLabelOptions The options that determine the presentation of the x-axis label.
       */
      public fun xAxisLabelOptions(xAxisLabelOptions: IResolvable)

      /**
       * @param xAxisLabelOptions The options that determine the presentation of the x-axis label.
       */
      public fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty)

      /**
       * @param xAxisLabelOptions The options that determine the presentation of the x-axis label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("44ddc933d019ccb9973c0837bea0986e2660d282d1b314bfd40b0fa4dc22e7b4")
      public
          fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param yAxisDisplayOptions The options that determine the presentation of the y-axis.
       */
      public fun yAxisDisplayOptions(yAxisDisplayOptions: IResolvable)

      /**
       * @param yAxisDisplayOptions The options that determine the presentation of the y-axis.
       */
      public fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty)

      /**
       * @param yAxisDisplayOptions The options that determine the presentation of the y-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4d465cf517e4d200048294b5967d01c84dc7d84bbf2dd16ac98f66ccabd9d97b")
      public
          fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramConfigurationProperty.builder()

      /**
       * @param binOptions The options that determine the presentation of histogram bins.
       */
      override fun binOptions(binOptions: IResolvable) {
        cdkBuilder.binOptions(binOptions.let(IResolvable::unwrap))
      }

      /**
       * @param binOptions The options that determine the presentation of histogram bins.
       */
      override fun binOptions(binOptions: HistogramBinOptionsProperty) {
        cdkBuilder.binOptions(binOptions.let(HistogramBinOptionsProperty::unwrap))
      }

      /**
       * @param binOptions The options that determine the presentation of histogram bins.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("63f899aee00c1df0b16798a0fb63247c5e98a4a9e9be95d50b0cd972cce5ec63")
      override fun binOptions(binOptions: HistogramBinOptionsProperty.Builder.() -> Unit): Unit =
          binOptions(HistogramBinOptionsProperty(binOptions))

      /**
       * @param dataLabels The data label configuration of a histogram.
       */
      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      /**
       * @param dataLabels The data label configuration of a histogram.
       */
      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      /**
       * @param dataLabels The data label configuration of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d52257cd7827c74a7e1657c8d95f0a4fc7fd93f7c6836f7877e8d1ccba8021ed")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      /**
       * @param fieldWells The field well configuration of a histogram.
       */
      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a histogram.
       */
      override fun fieldWells(fieldWells: HistogramFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(HistogramFieldWellsProperty::unwrap))
      }

      /**
       * @param fieldWells The field well configuration of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1bcdadd76c76e2104a500f63948da0f56df4df4f3beb6a3cc9dcb7fed532fb2e")
      override fun fieldWells(fieldWells: HistogramFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(HistogramFieldWellsProperty(fieldWells))

      /**
       * @param tooltip The tooltip configuration of a histogram.
       */
      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      /**
       * @param tooltip The tooltip configuration of a histogram.
       */
      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      /**
       * @param tooltip The tooltip configuration of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c74adbbc77faafafc9807fdb8d56ef9102272b58867cb50b748bf2a49394118")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      /**
       * @param visualPalette The visual palette configuration of a histogram.
       */
      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      /**
       * @param visualPalette The visual palette configuration of a histogram.
       */
      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      /**
       * @param visualPalette The visual palette configuration of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1f17203b0b329d2cd3a8db07649443c76687bb41921b56bc7bd70ad5f37420d7")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      /**
       * @param xAxisDisplayOptions The options that determine the presentation of the x-axis.
       */
      override fun xAxisDisplayOptions(xAxisDisplayOptions: IResolvable) {
        cdkBuilder.xAxisDisplayOptions(xAxisDisplayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param xAxisDisplayOptions The options that determine the presentation of the x-axis.
       */
      override fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.xAxisDisplayOptions(xAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param xAxisDisplayOptions The options that determine the presentation of the x-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("46380979e78fb5f32e9a74acacee7504c5281b4a9f3050c0855e38db020be387")
      override
          fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = xAxisDisplayOptions(AxisDisplayOptionsProperty(xAxisDisplayOptions))

      /**
       * @param xAxisLabelOptions The options that determine the presentation of the x-axis label.
       */
      override fun xAxisLabelOptions(xAxisLabelOptions: IResolvable) {
        cdkBuilder.xAxisLabelOptions(xAxisLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param xAxisLabelOptions The options that determine the presentation of the x-axis label.
       */
      override fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.xAxisLabelOptions(xAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      /**
       * @param xAxisLabelOptions The options that determine the presentation of the x-axis label.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("44ddc933d019ccb9973c0837bea0986e2660d282d1b314bfd40b0fa4dc22e7b4")
      override
          fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = xAxisLabelOptions(ChartAxisLabelOptionsProperty(xAxisLabelOptions))

      /**
       * @param yAxisDisplayOptions The options that determine the presentation of the y-axis.
       */
      override fun yAxisDisplayOptions(yAxisDisplayOptions: IResolvable) {
        cdkBuilder.yAxisDisplayOptions(yAxisDisplayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param yAxisDisplayOptions The options that determine the presentation of the y-axis.
       */
      override fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.yAxisDisplayOptions(yAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      /**
       * @param yAxisDisplayOptions The options that determine the presentation of the y-axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4d465cf517e4d200048294b5967d01c84dc7d84bbf2dd16ac98f66ccabd9d97b")
      override
          fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = yAxisDisplayOptions(AxisDisplayOptionsProperty(yAxisDisplayOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramConfigurationProperty,
    ) : HistogramConfigurationProperty {
      /**
       * The options that determine the presentation of histogram bins.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-binoptions)
       */
      override fun binOptions(): Any? = unwrap(this).getBinOptions()

      /**
       * The data label configuration of a histogram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-datalabels)
       */
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      /**
       * The field well configuration of a histogram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-fieldwells)
       */
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      /**
       * The tooltip configuration of a histogram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-tooltip)
       */
      override fun tooltip(): Any? = unwrap(this).getTooltip()

      /**
       * The visual palette configuration of a histogram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-visualpalette)
       */
      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()

      /**
       * The options that determine the presentation of the x-axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-xaxisdisplayoptions)
       */
      override fun xAxisDisplayOptions(): Any? = unwrap(this).getXAxisDisplayOptions()

      /**
       * The options that determine the presentation of the x-axis label.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-xaxislabeloptions)
       */
      override fun xAxisLabelOptions(): Any? = unwrap(this).getXAxisLabelOptions()

      /**
       * The options that determine the presentation of the y-axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-yaxisdisplayoptions)
       */
      override fun yAxisDisplayOptions(): Any? = unwrap(this).getYAxisDisplayOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): HistogramConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramConfigurationProperty):
          HistogramConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HistogramConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramConfigurationProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface TooltipItemProperty {
    /**
     * The tooltip item for the columns that are not part of a field well.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipitem.html#cfn-quicksight-analysis-tooltipitem-columntooltipitem)
     */
    public fun columnTooltipItem(): Any? = unwrap(this).getColumnTooltipItem()

    /**
     * The tooltip item for the fields.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipitem.html#cfn-quicksight-analysis-tooltipitem-fieldtooltipitem)
     */
    public fun fieldTooltipItem(): Any? = unwrap(this).getFieldTooltipItem()

    /**
     * A builder for [TooltipItemProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param columnTooltipItem The tooltip item for the columns that are not part of a field
       * well.
       */
      public fun columnTooltipItem(columnTooltipItem: IResolvable)

      /**
       * @param columnTooltipItem The tooltip item for the columns that are not part of a field
       * well.
       */
      public fun columnTooltipItem(columnTooltipItem: ColumnTooltipItemProperty)

      /**
       * @param columnTooltipItem The tooltip item for the columns that are not part of a field
       * well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be2a22226638781efd5316e91fc1604ed21f3d133b51d65e97239afbd5a1ef93")
      public fun columnTooltipItem(columnTooltipItem: ColumnTooltipItemProperty.Builder.() -> Unit)

      /**
       * @param fieldTooltipItem The tooltip item for the fields.
       */
      public fun fieldTooltipItem(fieldTooltipItem: IResolvable)

      /**
       * @param fieldTooltipItem The tooltip item for the fields.
       */
      public fun fieldTooltipItem(fieldTooltipItem: FieldTooltipItemProperty)

      /**
       * @param fieldTooltipItem The tooltip item for the fields.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de3faae44248a400e12a0927af3b3b1da8066b47dc5b5d8b8db00060aa76ada5")
      public fun fieldTooltipItem(fieldTooltipItem: FieldTooltipItemProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TooltipItemProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TooltipItemProperty.builder()

      /**
       * @param columnTooltipItem The tooltip item for the columns that are not part of a field
       * well.
       */
      override fun columnTooltipItem(columnTooltipItem: IResolvable) {
        cdkBuilder.columnTooltipItem(columnTooltipItem.let(IResolvable::unwrap))
      }

      /**
       * @param columnTooltipItem The tooltip item for the columns that are not part of a field
       * well.
       */
      override fun columnTooltipItem(columnTooltipItem: ColumnTooltipItemProperty) {
        cdkBuilder.columnTooltipItem(columnTooltipItem.let(ColumnTooltipItemProperty::unwrap))
      }

      /**
       * @param columnTooltipItem The tooltip item for the columns that are not part of a field
       * well.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be2a22226638781efd5316e91fc1604ed21f3d133b51d65e97239afbd5a1ef93")
      override
          fun columnTooltipItem(columnTooltipItem: ColumnTooltipItemProperty.Builder.() -> Unit):
          Unit = columnTooltipItem(ColumnTooltipItemProperty(columnTooltipItem))

      /**
       * @param fieldTooltipItem The tooltip item for the fields.
       */
      override fun fieldTooltipItem(fieldTooltipItem: IResolvable) {
        cdkBuilder.fieldTooltipItem(fieldTooltipItem.let(IResolvable::unwrap))
      }

      /**
       * @param fieldTooltipItem The tooltip item for the fields.
       */
      override fun fieldTooltipItem(fieldTooltipItem: FieldTooltipItemProperty) {
        cdkBuilder.fieldTooltipItem(fieldTooltipItem.let(FieldTooltipItemProperty::unwrap))
      }

      /**
       * @param fieldTooltipItem The tooltip item for the fields.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de3faae44248a400e12a0927af3b3b1da8066b47dc5b5d8b8db00060aa76ada5")
      override fun fieldTooltipItem(fieldTooltipItem: FieldTooltipItemProperty.Builder.() -> Unit):
          Unit = fieldTooltipItem(FieldTooltipItemProperty(fieldTooltipItem))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.TooltipItemProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TooltipItemProperty,
    ) : TooltipItemProperty {
      /**
       * The tooltip item for the columns that are not part of a field well.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipitem.html#cfn-quicksight-analysis-tooltipitem-columntooltipitem)
       */
      override fun columnTooltipItem(): Any? = unwrap(this).getColumnTooltipItem()

      /**
       * The tooltip item for the fields.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipitem.html#cfn-quicksight-analysis-tooltipitem-fieldtooltipitem)
       */
      override fun fieldTooltipItem(): Any? = unwrap(this).getFieldTooltipItem()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): TooltipItemProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.TooltipItemProperty):
          TooltipItemProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TooltipItemProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.TooltipItemProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface HistogramBinOptionsProperty {
    /**
     * The options that determine the bin count of a histogram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html#cfn-quicksight-analysis-histogrambinoptions-bincount)
     */
    public fun binCount(): Any? = unwrap(this).getBinCount()

    /**
     * The options that determine the bin width of a histogram.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html#cfn-quicksight-analysis-histogrambinoptions-binwidth)
     */
    public fun binWidth(): Any? = unwrap(this).getBinWidth()

    /**
     * The options that determine the selected bin type.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html#cfn-quicksight-analysis-histogrambinoptions-selectedbintype)
     */
    public fun selectedBinType(): String? = unwrap(this).getSelectedBinType()

    /**
     * The options that determine the bin start value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html#cfn-quicksight-analysis-histogrambinoptions-startvalue)
     */
    public fun startValue(): Number? = unwrap(this).getStartValue()

    /**
     * A builder for [HistogramBinOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param binCount The options that determine the bin count of a histogram.
       */
      public fun binCount(binCount: IResolvable)

      /**
       * @param binCount The options that determine the bin count of a histogram.
       */
      public fun binCount(binCount: BinCountOptionsProperty)

      /**
       * @param binCount The options that determine the bin count of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e1cd17313bf4203828689f76ca102cd8009c337125ffe0d66897066328a581fb")
      public fun binCount(binCount: BinCountOptionsProperty.Builder.() -> Unit)

      /**
       * @param binWidth The options that determine the bin width of a histogram.
       */
      public fun binWidth(binWidth: IResolvable)

      /**
       * @param binWidth The options that determine the bin width of a histogram.
       */
      public fun binWidth(binWidth: BinWidthOptionsProperty)

      /**
       * @param binWidth The options that determine the bin width of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47fe15b78e19976a2c2d4e245340007a9dfb4547e7d572c9242107ba8c34c197")
      public fun binWidth(binWidth: BinWidthOptionsProperty.Builder.() -> Unit)

      /**
       * @param selectedBinType The options that determine the selected bin type.
       */
      public fun selectedBinType(selectedBinType: String)

      /**
       * @param startValue The options that determine the bin start value.
       */
      public fun startValue(startValue: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramBinOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramBinOptionsProperty.builder()

      /**
       * @param binCount The options that determine the bin count of a histogram.
       */
      override fun binCount(binCount: IResolvable) {
        cdkBuilder.binCount(binCount.let(IResolvable::unwrap))
      }

      /**
       * @param binCount The options that determine the bin count of a histogram.
       */
      override fun binCount(binCount: BinCountOptionsProperty) {
        cdkBuilder.binCount(binCount.let(BinCountOptionsProperty::unwrap))
      }

      /**
       * @param binCount The options that determine the bin count of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e1cd17313bf4203828689f76ca102cd8009c337125ffe0d66897066328a581fb")
      override fun binCount(binCount: BinCountOptionsProperty.Builder.() -> Unit): Unit =
          binCount(BinCountOptionsProperty(binCount))

      /**
       * @param binWidth The options that determine the bin width of a histogram.
       */
      override fun binWidth(binWidth: IResolvable) {
        cdkBuilder.binWidth(binWidth.let(IResolvable::unwrap))
      }

      /**
       * @param binWidth The options that determine the bin width of a histogram.
       */
      override fun binWidth(binWidth: BinWidthOptionsProperty) {
        cdkBuilder.binWidth(binWidth.let(BinWidthOptionsProperty::unwrap))
      }

      /**
       * @param binWidth The options that determine the bin width of a histogram.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47fe15b78e19976a2c2d4e245340007a9dfb4547e7d572c9242107ba8c34c197")
      override fun binWidth(binWidth: BinWidthOptionsProperty.Builder.() -> Unit): Unit =
          binWidth(BinWidthOptionsProperty(binWidth))

      /**
       * @param selectedBinType The options that determine the selected bin type.
       */
      override fun selectedBinType(selectedBinType: String) {
        cdkBuilder.selectedBinType(selectedBinType)
      }

      /**
       * @param startValue The options that determine the bin start value.
       */
      override fun startValue(startValue: Number) {
        cdkBuilder.startValue(startValue)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramBinOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramBinOptionsProperty,
    ) : HistogramBinOptionsProperty {
      /**
       * The options that determine the bin count of a histogram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html#cfn-quicksight-analysis-histogrambinoptions-bincount)
       */
      override fun binCount(): Any? = unwrap(this).getBinCount()

      /**
       * The options that determine the bin width of a histogram.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html#cfn-quicksight-analysis-histogrambinoptions-binwidth)
       */
      override fun binWidth(): Any? = unwrap(this).getBinWidth()

      /**
       * The options that determine the selected bin type.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html#cfn-quicksight-analysis-histogrambinoptions-selectedbintype)
       */
      override fun selectedBinType(): String? = unwrap(this).getSelectedBinType()

      /**
       * The options that determine the bin start value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html#cfn-quicksight-analysis-histogrambinoptions-startvalue)
       */
      override fun startValue(): Number? = unwrap(this).getStartValue()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): HistogramBinOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramBinOptionsProperty):
          HistogramBinOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HistogramBinOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.HistogramBinOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface WordCloudFieldWellsProperty {
    /**
     * The aggregated field wells of a word cloud.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudfieldwells.html#cfn-quicksight-analysis-wordcloudfieldwells-wordcloudaggregatedfieldwells)
     */
    public fun wordCloudAggregatedFieldWells(): Any? =
        unwrap(this).getWordCloudAggregatedFieldWells()

    /**
     * A builder for [WordCloudFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param wordCloudAggregatedFieldWells The aggregated field wells of a word cloud.
       */
      public fun wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells: IResolvable)

      /**
       * @param wordCloudAggregatedFieldWells The aggregated field wells of a word cloud.
       */
      public
          fun wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells: WordCloudAggregatedFieldWellsProperty)

      /**
       * @param wordCloudAggregatedFieldWells The aggregated field wells of a word cloud.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a6643d9c896be8cdca4ee4916b78863f0e4d325cd7ea1c650e244d4abca07099")
      public
          fun wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells: WordCloudAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudFieldWellsProperty.builder()

      /**
       * @param wordCloudAggregatedFieldWells The aggregated field wells of a word cloud.
       */
      override fun wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells: IResolvable) {
        cdkBuilder.wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells.let(IResolvable::unwrap))
      }

      /**
       * @param wordCloudAggregatedFieldWells The aggregated field wells of a word cloud.
       */
      override
          fun wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells: WordCloudAggregatedFieldWellsProperty) {
        cdkBuilder.wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells.let(WordCloudAggregatedFieldWellsProperty::unwrap))
      }

      /**
       * @param wordCloudAggregatedFieldWells The aggregated field wells of a word cloud.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a6643d9c896be8cdca4ee4916b78863f0e4d325cd7ea1c650e244d4abca07099")
      override
          fun wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells: WordCloudAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          wordCloudAggregatedFieldWells(WordCloudAggregatedFieldWellsProperty(wordCloudAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudFieldWellsProperty,
    ) : WordCloudFieldWellsProperty {
      /**
       * The aggregated field wells of a word cloud.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudfieldwells.html#cfn-quicksight-analysis-wordcloudfieldwells-wordcloudaggregatedfieldwells)
       */
      override fun wordCloudAggregatedFieldWells(): Any? =
          unwrap(this).getWordCloudAggregatedFieldWells()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): WordCloudFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudFieldWellsProperty):
          WordCloudFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WordCloudFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.WordCloudFieldWellsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface PieChartAggregatedFieldWellsProperty {
    /**
     * The category (group/color) field wells of a pie chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartaggregatedfieldwells.html#cfn-quicksight-analysis-piechartaggregatedfieldwells-category)
     */
    public fun category(): Any? = unwrap(this).getCategory()

    /**
     * The small multiples field well of a pie chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartaggregatedfieldwells.html#cfn-quicksight-analysis-piechartaggregatedfieldwells-smallmultiples)
     */
    public fun smallMultiples(): Any? = unwrap(this).getSmallMultiples()

    /**
     * The value field wells of a pie chart.
     *
     * Values are aggregated based on categories.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartaggregatedfieldwells.html#cfn-quicksight-analysis-piechartaggregatedfieldwells-values)
     */
    public fun values(): Any? = unwrap(this).getValues()

    /**
     * A builder for [PieChartAggregatedFieldWellsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param category The category (group/color) field wells of a pie chart.
       */
      public fun category(category: IResolvable)

      /**
       * @param category The category (group/color) field wells of a pie chart.
       */
      public fun category(category: List<Any>)

      /**
       * @param category The category (group/color) field wells of a pie chart.
       */
      public fun category(vararg category: Any)

      /**
       * @param smallMultiples The small multiples field well of a pie chart.
       */
      public fun smallMultiples(smallMultiples: IResolvable)

      /**
       * @param smallMultiples The small multiples field well of a pie chart.
       */
      public fun smallMultiples(smallMultiples: List<Any>)

      /**
       * @param smallMultiples The small multiples field well of a pie chart.
       */
      public fun smallMultiples(vararg smallMultiples: Any)

      /**
       * @param values The value field wells of a pie chart.
       * Values are aggregated based on categories.
       */
      public fun values(values: IResolvable)

      /**
       * @param values The value field wells of a pie chart.
       * Values are aggregated based on categories.
       */
      public fun values(values: List<Any>)

      /**
       * @param values The value field wells of a pie chart.
       * Values are aggregated based on categories.
       */
      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartAggregatedFieldWellsProperty.builder()

      /**
       * @param category The category (group/color) field wells of a pie chart.
       */
      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      /**
       * @param category The category (group/color) field wells of a pie chart.
       */
      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      /**
       * @param category The category (group/color) field wells of a pie chart.
       */
      override fun category(vararg category: Any): Unit = category(category.toList())

      /**
       * @param smallMultiples The small multiples field well of a pie chart.
       */
      override fun smallMultiples(smallMultiples: IResolvable) {
        cdkBuilder.smallMultiples(smallMultiples.let(IResolvable::unwrap))
      }

      /**
       * @param smallMultiples The small multiples field well of a pie chart.
       */
      override fun smallMultiples(smallMultiples: List<Any>) {
        cdkBuilder.smallMultiples(smallMultiples)
      }

      /**
       * @param smallMultiples The small multiples field well of a pie chart.
       */
      override fun smallMultiples(vararg smallMultiples: Any): Unit =
          smallMultiples(smallMultiples.toList())

      /**
       * @param values The value field wells of a pie chart.
       * Values are aggregated based on categories.
       */
      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      /**
       * @param values The value field wells of a pie chart.
       * Values are aggregated based on categories.
       */
      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      /**
       * @param values The value field wells of a pie chart.
       * Values are aggregated based on categories.
       */
      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartAggregatedFieldWellsProperty,
    ) : PieChartAggregatedFieldWellsProperty {
      /**
       * The category (group/color) field wells of a pie chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartaggregatedfieldwells.html#cfn-quicksight-analysis-piechartaggregatedfieldwells-category)
       */
      override fun category(): Any? = unwrap(this).getCategory()

      /**
       * The small multiples field well of a pie chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartaggregatedfieldwells.html#cfn-quicksight-analysis-piechartaggregatedfieldwells-smallmultiples)
       */
      override fun smallMultiples(): Any? = unwrap(this).getSmallMultiples()

      /**
       * The value field wells of a pie chart.
       *
       * Values are aggregated based on categories.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartaggregatedfieldwells.html#cfn-quicksight-analysis-piechartaggregatedfieldwells-values)
       */
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PieChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartAggregatedFieldWellsProperty):
          PieChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PieChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PieChartAggregatedFieldWellsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DateTimeDefaultValuesProperty {
    /**
     * The dynamic value of the `DataTimeDefaultValues` .
     *
     * Different defaults are displayed according to users, groups, and values mapping.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimedefaultvalues.html#cfn-quicksight-analysis-datetimedefaultvalues-dynamicvalue)
     */
    public fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

    /**
     * The rolling date of the `DataTimeDefaultValues` .
     *
     * The date is determined from the dataset based on input expression.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimedefaultvalues.html#cfn-quicksight-analysis-datetimedefaultvalues-rollingdate)
     */
    public fun rollingDate(): Any? = unwrap(this).getRollingDate()

    /**
     * The static values of the `DataTimeDefaultValues` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimedefaultvalues.html#cfn-quicksight-analysis-datetimedefaultvalues-staticvalues)
     */
    public fun staticValues(): List<String> = unwrap(this).getStaticValues() ?: emptyList()

    /**
     * A builder for [DateTimeDefaultValuesProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dynamicValue The dynamic value of the `DataTimeDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      public fun dynamicValue(dynamicValue: IResolvable)

      /**
       * @param dynamicValue The dynamic value of the `DataTimeDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty)

      /**
       * @param dynamicValue The dynamic value of the `DataTimeDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("30cb6ec4194eeee8f9f9bcc13f2790f321397c0ff428aa85211ffc12c1efea5d")
      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit)

      /**
       * @param rollingDate The rolling date of the `DataTimeDefaultValues` .
       * The date is determined from the dataset based on input expression.
       */
      public fun rollingDate(rollingDate: IResolvable)

      /**
       * @param rollingDate The rolling date of the `DataTimeDefaultValues` .
       * The date is determined from the dataset based on input expression.
       */
      public fun rollingDate(rollingDate: RollingDateConfigurationProperty)

      /**
       * @param rollingDate The rolling date of the `DataTimeDefaultValues` .
       * The date is determined from the dataset based on input expression.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("07a78bf23cfdc96afc2123693a042ca459bdc784321853231f730cce3a2d1be3")
      public fun rollingDate(rollingDate: RollingDateConfigurationProperty.Builder.() -> Unit)

      /**
       * @param staticValues The static values of the `DataTimeDefaultValues` .
       */
      public fun staticValues(staticValues: List<String>)

      /**
       * @param staticValues The static values of the `DataTimeDefaultValues` .
       */
      public fun staticValues(vararg staticValues: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeDefaultValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeDefaultValuesProperty.builder()

      /**
       * @param dynamicValue The dynamic value of the `DataTimeDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      override fun dynamicValue(dynamicValue: IResolvable) {
        cdkBuilder.dynamicValue(dynamicValue.let(IResolvable::unwrap))
      }

      /**
       * @param dynamicValue The dynamic value of the `DataTimeDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty) {
        cdkBuilder.dynamicValue(dynamicValue.let(DynamicDefaultValueProperty::unwrap))
      }

      /**
       * @param dynamicValue The dynamic value of the `DataTimeDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("30cb6ec4194eeee8f9f9bcc13f2790f321397c0ff428aa85211ffc12c1efea5d")
      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit): Unit
          = dynamicValue(DynamicDefaultValueProperty(dynamicValue))

      /**
       * @param rollingDate The rolling date of the `DataTimeDefaultValues` .
       * The date is determined from the dataset based on input expression.
       */
      override fun rollingDate(rollingDate: IResolvable) {
        cdkBuilder.rollingDate(rollingDate.let(IResolvable::unwrap))
      }

      /**
       * @param rollingDate The rolling date of the `DataTimeDefaultValues` .
       * The date is determined from the dataset based on input expression.
       */
      override fun rollingDate(rollingDate: RollingDateConfigurationProperty) {
        cdkBuilder.rollingDate(rollingDate.let(RollingDateConfigurationProperty::unwrap))
      }

      /**
       * @param rollingDate The rolling date of the `DataTimeDefaultValues` .
       * The date is determined from the dataset based on input expression.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("07a78bf23cfdc96afc2123693a042ca459bdc784321853231f730cce3a2d1be3")
      override fun rollingDate(rollingDate: RollingDateConfigurationProperty.Builder.() -> Unit):
          Unit = rollingDate(RollingDateConfigurationProperty(rollingDate))

      /**
       * @param staticValues The static values of the `DataTimeDefaultValues` .
       */
      override fun staticValues(staticValues: List<String>) {
        cdkBuilder.staticValues(staticValues)
      }

      /**
       * @param staticValues The static values of the `DataTimeDefaultValues` .
       */
      override fun staticValues(vararg staticValues: String): Unit =
          staticValues(staticValues.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeDefaultValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeDefaultValuesProperty,
    ) : DateTimeDefaultValuesProperty {
      /**
       * The dynamic value of the `DataTimeDefaultValues` .
       *
       * Different defaults are displayed according to users, groups, and values mapping.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimedefaultvalues.html#cfn-quicksight-analysis-datetimedefaultvalues-dynamicvalue)
       */
      override fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

      /**
       * The rolling date of the `DataTimeDefaultValues` .
       *
       * The date is determined from the dataset based on input expression.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimedefaultvalues.html#cfn-quicksight-analysis-datetimedefaultvalues-rollingdate)
       */
      override fun rollingDate(): Any? = unwrap(this).getRollingDate()

      /**
       * The static values of the `DataTimeDefaultValues` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimedefaultvalues.html#cfn-quicksight-analysis-datetimedefaultvalues-staticvalues)
       */
      override fun staticValues(): List<String> = unwrap(this).getStaticValues() ?: emptyList()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DateTimeDefaultValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeDefaultValuesProperty):
          DateTimeDefaultValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimeDefaultValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeDefaultValuesProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface DecimalDefaultValuesProperty {
    /**
     * The dynamic value of the `DecimalDefaultValues` .
     *
     * Different defaults are displayed according to users, groups, and values mapping.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimaldefaultvalues.html#cfn-quicksight-analysis-decimaldefaultvalues-dynamicvalue)
     */
    public fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

    /**
     * The static values of the `DecimalDefaultValues` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimaldefaultvalues.html#cfn-quicksight-analysis-decimaldefaultvalues-staticvalues)
     */
    public fun staticValues(): Any? = unwrap(this).getStaticValues()

    /**
     * A builder for [DecimalDefaultValuesProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dynamicValue The dynamic value of the `DecimalDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      public fun dynamicValue(dynamicValue: IResolvable)

      /**
       * @param dynamicValue The dynamic value of the `DecimalDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty)

      /**
       * @param dynamicValue The dynamic value of the `DecimalDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9ea5d9f92624c22dcf5b616732a4dd0c0611d60a0ac00dc69bc19adad69657d1")
      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit)

      /**
       * @param staticValues The static values of the `DecimalDefaultValues` .
       */
      public fun staticValues(staticValues: IResolvable)

      /**
       * @param staticValues The static values of the `DecimalDefaultValues` .
       */
      public fun staticValues(staticValues: List<Number>)

      /**
       * @param staticValues The static values of the `DecimalDefaultValues` .
       */
      public fun staticValues(vararg staticValues: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalDefaultValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalDefaultValuesProperty.builder()

      /**
       * @param dynamicValue The dynamic value of the `DecimalDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      override fun dynamicValue(dynamicValue: IResolvable) {
        cdkBuilder.dynamicValue(dynamicValue.let(IResolvable::unwrap))
      }

      /**
       * @param dynamicValue The dynamic value of the `DecimalDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty) {
        cdkBuilder.dynamicValue(dynamicValue.let(DynamicDefaultValueProperty::unwrap))
      }

      /**
       * @param dynamicValue The dynamic value of the `DecimalDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9ea5d9f92624c22dcf5b616732a4dd0c0611d60a0ac00dc69bc19adad69657d1")
      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit): Unit
          = dynamicValue(DynamicDefaultValueProperty(dynamicValue))

      /**
       * @param staticValues The static values of the `DecimalDefaultValues` .
       */
      override fun staticValues(staticValues: IResolvable) {
        cdkBuilder.staticValues(staticValues.let(IResolvable::unwrap))
      }

      /**
       * @param staticValues The static values of the `DecimalDefaultValues` .
       */
      override fun staticValues(staticValues: List<Number>) {
        cdkBuilder.staticValues(staticValues)
      }

      /**
       * @param staticValues The static values of the `DecimalDefaultValues` .
       */
      override fun staticValues(vararg staticValues: Number): Unit =
          staticValues(staticValues.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalDefaultValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalDefaultValuesProperty,
    ) : DecimalDefaultValuesProperty {
      /**
       * The dynamic value of the `DecimalDefaultValues` .
       *
       * Different defaults are displayed according to users, groups, and values mapping.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimaldefaultvalues.html#cfn-quicksight-analysis-decimaldefaultvalues-dynamicvalue)
       */
      override fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

      /**
       * The static values of the `DecimalDefaultValues` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimaldefaultvalues.html#cfn-quicksight-analysis-decimaldefaultvalues-staticvalues)
       */
      override fun staticValues(): Any? = unwrap(this).getStaticValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DecimalDefaultValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalDefaultValuesProperty):
          DecimalDefaultValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DecimalDefaultValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DecimalDefaultValuesProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilterListControlProperty {
    /**
     * The values that are displayed in a control can be configured to only show values that are
     * valid based on what's selected in other controls.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-cascadingcontrolconfiguration)
     */
    public fun cascadingControlConfiguration(): Any? =
        unwrap(this).getCascadingControlConfiguration()

    /**
     * The display options of a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-displayoptions)
     */
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    /**
     * The ID of the `FilterListControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-filtercontrolid)
     */
    public fun filterControlId(): String

    /**
     * A list of selectable values that are used in a control.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-selectablevalues)
     */
    public fun selectableValues(): Any? = unwrap(this).getSelectableValues()

    /**
     * The source filter ID of the `FilterListControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-sourcefilterid)
     */
    public fun sourceFilterId(): String

    /**
     * The title of the `FilterListControl` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-title)
     */
    public fun title(): String

    /**
     * The type of `FilterListControl` . Choose one of the following options:.
     *
     * * `MULTI_SELECT` : The user can select multiple entries from the list.
     * * `SINGLE_SELECT` : The user can select a single entry from the list.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-type)
     */
    public fun type(): String? = unwrap(this).getType()

    /**
     * A builder for [FilterListControlProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      public fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable)

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty)

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1cbf5f223f138f6f99a075ee2157e8750416a2aad5c8d49f960ce11297199889")
      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: IResolvable)

      /**
       * @param displayOptions The display options of a control.
       */
      public fun displayOptions(displayOptions: ListControlDisplayOptionsProperty)

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7e52dfd97ce39be6abfad28e46bb42cbcc26e8b6d40994a36e12c0d6ae2731ce")
      public
          fun displayOptions(displayOptions: ListControlDisplayOptionsProperty.Builder.() -> Unit)

      /**
       * @param filterControlId The ID of the `FilterListControl` . 
       */
      public fun filterControlId(filterControlId: String)

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      public fun selectableValues(selectableValues: IResolvable)

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      public fun selectableValues(selectableValues: FilterSelectableValuesProperty)

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de61ae3b1909ac3a7af70ec29901046e86309c410129adf7a107f73c51225675")
      public
          fun selectableValues(selectableValues: FilterSelectableValuesProperty.Builder.() -> Unit)

      /**
       * @param sourceFilterId The source filter ID of the `FilterListControl` . 
       */
      public fun sourceFilterId(sourceFilterId: String)

      /**
       * @param title The title of the `FilterListControl` . 
       */
      public fun title(title: String)

      /**
       * @param type The type of `FilterListControl` . Choose one of the following options:.
       * * `MULTI_SELECT` : The user can select multiple entries from the list.
       * * `SINGLE_SELECT` : The user can select a single entry from the list.
       */
      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterListControlProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterListControlProperty.builder()

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      override fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(CascadingControlConfigurationProperty::unwrap))
      }

      /**
       * @param cascadingControlConfiguration The values that are displayed in a control can be
       * configured to only show values that are valid based on what's selected in other controls.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1cbf5f223f138f6f99a075ee2157e8750416a2aad5c8d49f960ce11297199889")
      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit):
          Unit =
          cascadingControlConfiguration(CascadingControlConfigurationProperty(cascadingControlConfiguration))

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      override fun displayOptions(displayOptions: ListControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(ListControlDisplayOptionsProperty::unwrap))
      }

      /**
       * @param displayOptions The display options of a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7e52dfd97ce39be6abfad28e46bb42cbcc26e8b6d40994a36e12c0d6ae2731ce")
      override
          fun displayOptions(displayOptions: ListControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(ListControlDisplayOptionsProperty(displayOptions))

      /**
       * @param filterControlId The ID of the `FilterListControl` . 
       */
      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      override fun selectableValues(selectableValues: IResolvable) {
        cdkBuilder.selectableValues(selectableValues.let(IResolvable::unwrap))
      }

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      override fun selectableValues(selectableValues: FilterSelectableValuesProperty) {
        cdkBuilder.selectableValues(selectableValues.let(FilterSelectableValuesProperty::unwrap))
      }

      /**
       * @param selectableValues A list of selectable values that are used in a control.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de61ae3b1909ac3a7af70ec29901046e86309c410129adf7a107f73c51225675")
      override
          fun selectableValues(selectableValues: FilterSelectableValuesProperty.Builder.() -> Unit):
          Unit = selectableValues(FilterSelectableValuesProperty(selectableValues))

      /**
       * @param sourceFilterId The source filter ID of the `FilterListControl` . 
       */
      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      /**
       * @param title The title of the `FilterListControl` . 
       */
      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      /**
       * @param type The type of `FilterListControl` . Choose one of the following options:.
       * * `MULTI_SELECT` : The user can select multiple entries from the list.
       * * `SINGLE_SELECT` : The user can select a single entry from the list.
       */
      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterListControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterListControlProperty,
    ) : FilterListControlProperty {
      /**
       * The values that are displayed in a control can be configured to only show values that are
       * valid based on what's selected in other controls.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-cascadingcontrolconfiguration)
       */
      override fun cascadingControlConfiguration(): Any? =
          unwrap(this).getCascadingControlConfiguration()

      /**
       * The display options of a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-displayoptions)
       */
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      /**
       * The ID of the `FilterListControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-filtercontrolid)
       */
      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      /**
       * A list of selectable values that are used in a control.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-selectablevalues)
       */
      override fun selectableValues(): Any? = unwrap(this).getSelectableValues()

      /**
       * The source filter ID of the `FilterListControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-sourcefilterid)
       */
      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      /**
       * The title of the `FilterListControl` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-title)
       */
      override fun title(): String = unwrap(this).getTitle()

      /**
       * The type of `FilterListControl` . Choose one of the following options:.
       *
       * * `MULTI_SELECT` : The user can select multiple entries from the list.
       * * `SINGLE_SELECT` : The user can select a single entry from the list.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-type)
       */
      override fun type(): String? = unwrap(this).getType()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilterListControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterListControlProperty):
          FilterListControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterListControlProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterListControlProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface FilterProperty {
    /**
     * A `CategoryFilter` filters text values.
     *
     * For more information, see [Adding text
     * filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html) in
     * the *Amazon QuickSight User Guide* .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-categoryfilter)
     */
    public fun categoryFilter(): Any? = unwrap(this).getCategoryFilter()

    /**
     * A `NumericEqualityFilter` filters numeric values that equal or do not equal a given numeric
     * value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-numericequalityfilter)
     */
    public fun numericEqualityFilter(): Any? = unwrap(this).getNumericEqualityFilter()

    /**
     * A `NumericRangeFilter` filters numeric values that are either inside or outside a given
     * numeric range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-numericrangefilter)
     */
    public fun numericRangeFilter(): Any? = unwrap(this).getNumericRangeFilter()

    /**
     * A `RelativeDatesFilter` filters date values that are relative to a given date.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-relativedatesfilter)
     */
    public fun relativeDatesFilter(): Any? = unwrap(this).getRelativeDatesFilter()

    /**
     * A `TimeEqualityFilter` filters date-time values that equal or do not equal a given date/time
     * value.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-timeequalityfilter)
     */
    public fun timeEqualityFilter(): Any? = unwrap(this).getTimeEqualityFilter()

    /**
     * A `TimeRangeFilter` filters date-time values that are either inside or outside a given
     * date/time range.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-timerangefilter)
     */
    public fun timeRangeFilter(): Any? = unwrap(this).getTimeRangeFilter()

    /**
     * A `TopBottomFilter` filters data to the top or bottom values for a given column.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-topbottomfilter)
     */
    public fun topBottomFilter(): Any? = unwrap(this).getTopBottomFilter()

    /**
     * A builder for [FilterProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param categoryFilter A `CategoryFilter` filters text values.
       * For more information, see [Adding text
       * filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html)
       * in the *Amazon QuickSight User Guide* .
       */
      public fun categoryFilter(categoryFilter: IResolvable)

      /**
       * @param categoryFilter A `CategoryFilter` filters text values.
       * For more information, see [Adding text
       * filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html)
       * in the *Amazon QuickSight User Guide* .
       */
      public fun categoryFilter(categoryFilter: CategoryFilterProperty)

      /**
       * @param categoryFilter A `CategoryFilter` filters text values.
       * For more information, see [Adding text
       * filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html)
       * in the *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2a60e3fbd70346c759da687f52e6d96054ca72927a7ed6777f40998fec67f8e2")
      public fun categoryFilter(categoryFilter: CategoryFilterProperty.Builder.() -> Unit)

      /**
       * @param numericEqualityFilter A `NumericEqualityFilter` filters numeric values that equal or
       * do not equal a given numeric value.
       */
      public fun numericEqualityFilter(numericEqualityFilter: IResolvable)

      /**
       * @param numericEqualityFilter A `NumericEqualityFilter` filters numeric values that equal or
       * do not equal a given numeric value.
       */
      public fun numericEqualityFilter(numericEqualityFilter: NumericEqualityFilterProperty)

      /**
       * @param numericEqualityFilter A `NumericEqualityFilter` filters numeric values that equal or
       * do not equal a given numeric value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fe1a444334efaded4d27bb91514c6416950d76e21a77c65c49cbf6f0de9e7882")
      public
          fun numericEqualityFilter(numericEqualityFilter: NumericEqualityFilterProperty.Builder.() -> Unit)

      /**
       * @param numericRangeFilter A `NumericRangeFilter` filters numeric values that are either
       * inside or outside a given numeric range.
       */
      public fun numericRangeFilter(numericRangeFilter: IResolvable)

      /**
       * @param numericRangeFilter A `NumericRangeFilter` filters numeric values that are either
       * inside or outside a given numeric range.
       */
      public fun numericRangeFilter(numericRangeFilter: NumericRangeFilterProperty)

      /**
       * @param numericRangeFilter A `NumericRangeFilter` filters numeric values that are either
       * inside or outside a given numeric range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1564963c57edcfddb981e3ed465f3acfd05836073d0a626316959fc0f8aaa65b")
      public
          fun numericRangeFilter(numericRangeFilter: NumericRangeFilterProperty.Builder.() -> Unit)

      /**
       * @param relativeDatesFilter A `RelativeDatesFilter` filters date values that are relative to
       * a given date.
       */
      public fun relativeDatesFilter(relativeDatesFilter: IResolvable)

      /**
       * @param relativeDatesFilter A `RelativeDatesFilter` filters date values that are relative to
       * a given date.
       */
      public fun relativeDatesFilter(relativeDatesFilter: RelativeDatesFilterProperty)

      /**
       * @param relativeDatesFilter A `RelativeDatesFilter` filters date values that are relative to
       * a given date.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d9db15354463f0e6655f4bf85dd7c2ebb013bb26993675f7953e2223146dca13")
      public
          fun relativeDatesFilter(relativeDatesFilter: RelativeDatesFilterProperty.Builder.() -> Unit)

      /**
       * @param timeEqualityFilter A `TimeEqualityFilter` filters date-time values that equal or do
       * not equal a given date/time value.
       */
      public fun timeEqualityFilter(timeEqualityFilter: IResolvable)

      /**
       * @param timeEqualityFilter A `TimeEqualityFilter` filters date-time values that equal or do
       * not equal a given date/time value.
       */
      public fun timeEqualityFilter(timeEqualityFilter: TimeEqualityFilterProperty)

      /**
       * @param timeEqualityFilter A `TimeEqualityFilter` filters date-time values that equal or do
       * not equal a given date/time value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5fef148392f8c494baeeb2e6638a717e7965d762b3c239b5cd0e46bc2c4d4ad8")
      public
          fun timeEqualityFilter(timeEqualityFilter: TimeEqualityFilterProperty.Builder.() -> Unit)

      /**
       * @param timeRangeFilter A `TimeRangeFilter` filters date-time values that are either inside
       * or outside a given date/time range.
       */
      public fun timeRangeFilter(timeRangeFilter: IResolvable)

      /**
       * @param timeRangeFilter A `TimeRangeFilter` filters date-time values that are either inside
       * or outside a given date/time range.
       */
      public fun timeRangeFilter(timeRangeFilter: TimeRangeFilterProperty)

      /**
       * @param timeRangeFilter A `TimeRangeFilter` filters date-time values that are either inside
       * or outside a given date/time range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c9a475a38500f82f6d60ebef6114417827d9ce302dc3a59786627357af31043")
      public fun timeRangeFilter(timeRangeFilter: TimeRangeFilterProperty.Builder.() -> Unit)

      /**
       * @param topBottomFilter A `TopBottomFilter` filters data to the top or bottom values for a
       * given column.
       */
      public fun topBottomFilter(topBottomFilter: IResolvable)

      /**
       * @param topBottomFilter A `TopBottomFilter` filters data to the top or bottom values for a
       * given column.
       */
      public fun topBottomFilter(topBottomFilter: TopBottomFilterProperty)

      /**
       * @param topBottomFilter A `TopBottomFilter` filters data to the top or bottom values for a
       * given column.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("41a005b05c2179fbb653045bdc35ef58908c52d46b0a274bdafc7bc309af00c8")
      public fun topBottomFilter(topBottomFilter: TopBottomFilterProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterProperty.builder()

      /**
       * @param categoryFilter A `CategoryFilter` filters text values.
       * For more information, see [Adding text
       * filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html)
       * in the *Amazon QuickSight User Guide* .
       */
      override fun categoryFilter(categoryFilter: IResolvable) {
        cdkBuilder.categoryFilter(categoryFilter.let(IResolvable::unwrap))
      }

      /**
       * @param categoryFilter A `CategoryFilter` filters text values.
       * For more information, see [Adding text
       * filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html)
       * in the *Amazon QuickSight User Guide* .
       */
      override fun categoryFilter(categoryFilter: CategoryFilterProperty) {
        cdkBuilder.categoryFilter(categoryFilter.let(CategoryFilterProperty::unwrap))
      }

      /**
       * @param categoryFilter A `CategoryFilter` filters text values.
       * For more information, see [Adding text
       * filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html)
       * in the *Amazon QuickSight User Guide* .
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2a60e3fbd70346c759da687f52e6d96054ca72927a7ed6777f40998fec67f8e2")
      override fun categoryFilter(categoryFilter: CategoryFilterProperty.Builder.() -> Unit): Unit =
          categoryFilter(CategoryFilterProperty(categoryFilter))

      /**
       * @param numericEqualityFilter A `NumericEqualityFilter` filters numeric values that equal or
       * do not equal a given numeric value.
       */
      override fun numericEqualityFilter(numericEqualityFilter: IResolvable) {
        cdkBuilder.numericEqualityFilter(numericEqualityFilter.let(IResolvable::unwrap))
      }

      /**
       * @param numericEqualityFilter A `NumericEqualityFilter` filters numeric values that equal or
       * do not equal a given numeric value.
       */
      override fun numericEqualityFilter(numericEqualityFilter: NumericEqualityFilterProperty) {
        cdkBuilder.numericEqualityFilter(numericEqualityFilter.let(NumericEqualityFilterProperty::unwrap))
      }

      /**
       * @param numericEqualityFilter A `NumericEqualityFilter` filters numeric values that equal or
       * do not equal a given numeric value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fe1a444334efaded4d27bb91514c6416950d76e21a77c65c49cbf6f0de9e7882")
      override
          fun numericEqualityFilter(numericEqualityFilter: NumericEqualityFilterProperty.Builder.() -> Unit):
          Unit = numericEqualityFilter(NumericEqualityFilterProperty(numericEqualityFilter))

      /**
       * @param numericRangeFilter A `NumericRangeFilter` filters numeric values that are either
       * inside or outside a given numeric range.
       */
      override fun numericRangeFilter(numericRangeFilter: IResolvable) {
        cdkBuilder.numericRangeFilter(numericRangeFilter.let(IResolvable::unwrap))
      }

      /**
       * @param numericRangeFilter A `NumericRangeFilter` filters numeric values that are either
       * inside or outside a given numeric range.
       */
      override fun numericRangeFilter(numericRangeFilter: NumericRangeFilterProperty) {
        cdkBuilder.numericRangeFilter(numericRangeFilter.let(NumericRangeFilterProperty::unwrap))
      }

      /**
       * @param numericRangeFilter A `NumericRangeFilter` filters numeric values that are either
       * inside or outside a given numeric range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1564963c57edcfddb981e3ed465f3acfd05836073d0a626316959fc0f8aaa65b")
      override
          fun numericRangeFilter(numericRangeFilter: NumericRangeFilterProperty.Builder.() -> Unit):
          Unit = numericRangeFilter(NumericRangeFilterProperty(numericRangeFilter))

      /**
       * @param relativeDatesFilter A `RelativeDatesFilter` filters date values that are relative to
       * a given date.
       */
      override fun relativeDatesFilter(relativeDatesFilter: IResolvable) {
        cdkBuilder.relativeDatesFilter(relativeDatesFilter.let(IResolvable::unwrap))
      }

      /**
       * @param relativeDatesFilter A `RelativeDatesFilter` filters date values that are relative to
       * a given date.
       */
      override fun relativeDatesFilter(relativeDatesFilter: RelativeDatesFilterProperty) {
        cdkBuilder.relativeDatesFilter(relativeDatesFilter.let(RelativeDatesFilterProperty::unwrap))
      }

      /**
       * @param relativeDatesFilter A `RelativeDatesFilter` filters date values that are relative to
       * a given date.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d9db15354463f0e6655f4bf85dd7c2ebb013bb26993675f7953e2223146dca13")
      override
          fun relativeDatesFilter(relativeDatesFilter: RelativeDatesFilterProperty.Builder.() -> Unit):
          Unit = relativeDatesFilter(RelativeDatesFilterProperty(relativeDatesFilter))

      /**
       * @param timeEqualityFilter A `TimeEqualityFilter` filters date-time values that equal or do
       * not equal a given date/time value.
       */
      override fun timeEqualityFilter(timeEqualityFilter: IResolvable) {
        cdkBuilder.timeEqualityFilter(timeEqualityFilter.let(IResolvable::unwrap))
      }

      /**
       * @param timeEqualityFilter A `TimeEqualityFilter` filters date-time values that equal or do
       * not equal a given date/time value.
       */
      override fun timeEqualityFilter(timeEqualityFilter: TimeEqualityFilterProperty) {
        cdkBuilder.timeEqualityFilter(timeEqualityFilter.let(TimeEqualityFilterProperty::unwrap))
      }

      /**
       * @param timeEqualityFilter A `TimeEqualityFilter` filters date-time values that equal or do
       * not equal a given date/time value.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5fef148392f8c494baeeb2e6638a717e7965d762b3c239b5cd0e46bc2c4d4ad8")
      override
          fun timeEqualityFilter(timeEqualityFilter: TimeEqualityFilterProperty.Builder.() -> Unit):
          Unit = timeEqualityFilter(TimeEqualityFilterProperty(timeEqualityFilter))

      /**
       * @param timeRangeFilter A `TimeRangeFilter` filters date-time values that are either inside
       * or outside a given date/time range.
       */
      override fun timeRangeFilter(timeRangeFilter: IResolvable) {
        cdkBuilder.timeRangeFilter(timeRangeFilter.let(IResolvable::unwrap))
      }

      /**
       * @param timeRangeFilter A `TimeRangeFilter` filters date-time values that are either inside
       * or outside a given date/time range.
       */
      override fun timeRangeFilter(timeRangeFilter: TimeRangeFilterProperty) {
        cdkBuilder.timeRangeFilter(timeRangeFilter.let(TimeRangeFilterProperty::unwrap))
      }

      /**
       * @param timeRangeFilter A `TimeRangeFilter` filters date-time values that are either inside
       * or outside a given date/time range.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c9a475a38500f82f6d60ebef6114417827d9ce302dc3a59786627357af31043")
      override fun timeRangeFilter(timeRangeFilter: TimeRangeFilterProperty.Builder.() -> Unit):
          Unit = timeRangeFilter(TimeRangeFilterProperty(timeRangeFilter))

      /**
       * @param topBottomFilter A `TopBottomFilter` filters data to the top or bottom values for a
       * given column.
       */
      override fun topBottomFilter(topBottomFilter: IResolvable) {
        cdkBuilder.topBottomFilter(topBottomFilter.let(IResolvable::unwrap))
      }

      /**
       * @param topBottomFilter A `TopBottomFilter` filters data to the top or bottom values for a
       * given column.
       */
      override fun topBottomFilter(topBottomFilter: TopBottomFilterProperty) {
        cdkBuilder.topBottomFilter(topBottomFilter.let(TopBottomFilterProperty::unwrap))
      }

      /**
       * @param topBottomFilter A `TopBottomFilter` filters data to the top or bottom values for a
       * given column.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("41a005b05c2179fbb653045bdc35ef58908c52d46b0a274bdafc7bc309af00c8")
      override fun topBottomFilter(topBottomFilter: TopBottomFilterProperty.Builder.() -> Unit):
          Unit = topBottomFilter(TopBottomFilterProperty(topBottomFilter))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterProperty,
    ) : FilterProperty {
      /**
       * A `CategoryFilter` filters text values.
       *
       * For more information, see [Adding text
       * filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html)
       * in the *Amazon QuickSight User Guide* .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-categoryfilter)
       */
      override fun categoryFilter(): Any? = unwrap(this).getCategoryFilter()

      /**
       * A `NumericEqualityFilter` filters numeric values that equal or do not equal a given numeric
       * value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-numericequalityfilter)
       */
      override fun numericEqualityFilter(): Any? = unwrap(this).getNumericEqualityFilter()

      /**
       * A `NumericRangeFilter` filters numeric values that are either inside or outside a given
       * numeric range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-numericrangefilter)
       */
      override fun numericRangeFilter(): Any? = unwrap(this).getNumericRangeFilter()

      /**
       * A `RelativeDatesFilter` filters date values that are relative to a given date.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-relativedatesfilter)
       */
      override fun relativeDatesFilter(): Any? = unwrap(this).getRelativeDatesFilter()

      /**
       * A `TimeEqualityFilter` filters date-time values that equal or do not equal a given
       * date/time value.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-timeequalityfilter)
       */
      override fun timeEqualityFilter(): Any? = unwrap(this).getTimeEqualityFilter()

      /**
       * A `TimeRangeFilter` filters date-time values that are either inside or outside a given
       * date/time range.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-timerangefilter)
       */
      override fun timeRangeFilter(): Any? = unwrap(this).getTimeRangeFilter()

      /**
       * A `TopBottomFilter` filters data to the top or bottom values for a given column.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-topbottomfilter)
       */
      override fun topBottomFilter(): Any? = unwrap(this).getTopBottomFilter()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): FilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterProperty):
          FilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.FilterProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface DateTimePickerControlDisplayOptionsProperty {
    /**
     * Customize how dates are formatted in controls.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimepickercontroldisplayoptions.html#cfn-quicksight-analysis-datetimepickercontroldisplayoptions-datetimeformat)
     */
    public fun dateTimeFormat(): String? = unwrap(this).getDateTimeFormat()

    /**
     * The configuration of info icon label options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimepickercontroldisplayoptions.html#cfn-quicksight-analysis-datetimepickercontroldisplayoptions-infoiconlabeloptions)
     */
    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    /**
     * The options to configure the title visibility, name, and font size.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimepickercontroldisplayoptions.html#cfn-quicksight-analysis-datetimepickercontroldisplayoptions-titleoptions)
     */
    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    /**
     * A builder for [DateTimePickerControlDisplayOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dateTimeFormat Customize how dates are formatted in controls.
       */
      public fun dateTimeFormat(dateTimeFormat: String)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bbf1fee8611fe1228f7152bf7f7e50a89f9565d0e18fdebbe7b74fc12919aef2")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: IResolvable)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      public fun titleOptions(titleOptions: LabelOptionsProperty)

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e324fe5f8799a438164ef7cf5e82cf41d0b86c463bc898b8a85e4950fb0666c")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimePickerControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimePickerControlDisplayOptionsProperty.builder()

      /**
       * @param dateTimeFormat Customize how dates are formatted in controls.
       */
      override fun dateTimeFormat(dateTimeFormat: String) {
        cdkBuilder.dateTimeFormat(dateTimeFormat)
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      /**
       * @param infoIconLabelOptions The configuration of info icon label options.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bbf1fee8611fe1228f7152bf7f7e50a89f9565d0e18fdebbe7b74fc12919aef2")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      /**
       * @param titleOptions The options to configure the title visibility, name, and font size.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e324fe5f8799a438164ef7cf5e82cf41d0b86c463bc898b8a85e4950fb0666c")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimePickerControlDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimePickerControlDisplayOptionsProperty,
    ) : DateTimePickerControlDisplayOptionsProperty {
      /**
       * Customize how dates are formatted in controls.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimepickercontroldisplayoptions.html#cfn-quicksight-analysis-datetimepickercontroldisplayoptions-datetimeformat)
       */
      override fun dateTimeFormat(): String? = unwrap(this).getDateTimeFormat()

      /**
       * The configuration of info icon label options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimepickercontroldisplayoptions.html#cfn-quicksight-analysis-datetimepickercontroldisplayoptions-infoiconlabeloptions)
       */
      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      /**
       * The options to configure the title visibility, name, and font size.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimepickercontroldisplayoptions.html#cfn-quicksight-analysis-datetimepickercontroldisplayoptions-titleoptions)
       */
      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          DateTimePickerControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimePickerControlDisplayOptionsProperty):
          DateTimePickerControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimePickerControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimePickerControlDisplayOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface SmallMultiplesOptionsProperty {
    /**
     * Sets the maximum number of visible columns to display in the grid of small multiples panels.
     *
     * The default is `Auto` , which automatically adjusts the columns in the grid to fit the
     * overall layout and size of the given chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-maxvisiblecolumns)
     */
    public fun maxVisibleColumns(): Number? = unwrap(this).getMaxVisibleColumns()

    /**
     * Sets the maximum number of visible rows to display in the grid of small multiples panels.
     *
     * The default value is `Auto` , which automatically adjusts the rows in the grid to fit the
     * overall layout and size of the given chart.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-maxvisiblerows)
     */
    public fun maxVisibleRows(): Number? = unwrap(this).getMaxVisibleRows()

    /**
     * Configures the display options for each small multiples panel.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-panelconfiguration)
     */
    public fun panelConfiguration(): Any? = unwrap(this).getPanelConfiguration()

    /**
     * The properties of a small multiples X axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-xaxis)
     */
    public fun xAxis(): Any? = unwrap(this).getXAxis()

    /**
     * The properties of a small multiples Y axis.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-yaxis)
     */
    public fun yAxis(): Any? = unwrap(this).getYAxis()

    /**
     * A builder for [SmallMultiplesOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param maxVisibleColumns Sets the maximum number of visible columns to display in the grid
       * of small multiples panels.
       * The default is `Auto` , which automatically adjusts the columns in the grid to fit the
       * overall layout and size of the given chart.
       */
      public fun maxVisibleColumns(maxVisibleColumns: Number)

      /**
       * @param maxVisibleRows Sets the maximum number of visible rows to display in the grid of
       * small multiples panels.
       * The default value is `Auto` , which automatically adjusts the rows in the grid to fit the
       * overall layout and size of the given chart.
       */
      public fun maxVisibleRows(maxVisibleRows: Number)

      /**
       * @param panelConfiguration Configures the display options for each small multiples panel.
       */
      public fun panelConfiguration(panelConfiguration: IResolvable)

      /**
       * @param panelConfiguration Configures the display options for each small multiples panel.
       */
      public fun panelConfiguration(panelConfiguration: PanelConfigurationProperty)

      /**
       * @param panelConfiguration Configures the display options for each small multiples panel.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("deef02466ea1d03ed0451430abff8f04fdd037dedc5f4e24e70184a2123e8020")
      public
          fun panelConfiguration(panelConfiguration: PanelConfigurationProperty.Builder.() -> Unit)

      /**
       * @param xAxis The properties of a small multiples X axis.
       */
      public fun xAxis(xAxis: IResolvable)

      /**
       * @param xAxis The properties of a small multiples X axis.
       */
      public fun xAxis(xAxis: SmallMultiplesAxisPropertiesProperty)

      /**
       * @param xAxis The properties of a small multiples X axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("503d9feadb3cfc71b5da677049833bfc900ef46e821c758b7e13926de0e1d0c8")
      public fun xAxis(xAxis: SmallMultiplesAxisPropertiesProperty.Builder.() -> Unit)

      /**
       * @param yAxis The properties of a small multiples Y axis.
       */
      public fun yAxis(yAxis: IResolvable)

      /**
       * @param yAxis The properties of a small multiples Y axis.
       */
      public fun yAxis(yAxis: SmallMultiplesAxisPropertiesProperty)

      /**
       * @param yAxis The properties of a small multiples Y axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e968d2b46c53f4e89d001898391e0c6f09d7777c20c8d8b9ff6059a2287257fb")
      public fun yAxis(yAxis: SmallMultiplesAxisPropertiesProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SmallMultiplesOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SmallMultiplesOptionsProperty.builder()

      /**
       * @param maxVisibleColumns Sets the maximum number of visible columns to display in the grid
       * of small multiples panels.
       * The default is `Auto` , which automatically adjusts the columns in the grid to fit the
       * overall layout and size of the given chart.
       */
      override fun maxVisibleColumns(maxVisibleColumns: Number) {
        cdkBuilder.maxVisibleColumns(maxVisibleColumns)
      }

      /**
       * @param maxVisibleRows Sets the maximum number of visible rows to display in the grid of
       * small multiples panels.
       * The default value is `Auto` , which automatically adjusts the rows in the grid to fit the
       * overall layout and size of the given chart.
       */
      override fun maxVisibleRows(maxVisibleRows: Number) {
        cdkBuilder.maxVisibleRows(maxVisibleRows)
      }

      /**
       * @param panelConfiguration Configures the display options for each small multiples panel.
       */
      override fun panelConfiguration(panelConfiguration: IResolvable) {
        cdkBuilder.panelConfiguration(panelConfiguration.let(IResolvable::unwrap))
      }

      /**
       * @param panelConfiguration Configures the display options for each small multiples panel.
       */
      override fun panelConfiguration(panelConfiguration: PanelConfigurationProperty) {
        cdkBuilder.panelConfiguration(panelConfiguration.let(PanelConfigurationProperty::unwrap))
      }

      /**
       * @param panelConfiguration Configures the display options for each small multiples panel.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("deef02466ea1d03ed0451430abff8f04fdd037dedc5f4e24e70184a2123e8020")
      override
          fun panelConfiguration(panelConfiguration: PanelConfigurationProperty.Builder.() -> Unit):
          Unit = panelConfiguration(PanelConfigurationProperty(panelConfiguration))

      /**
       * @param xAxis The properties of a small multiples X axis.
       */
      override fun xAxis(xAxis: IResolvable) {
        cdkBuilder.xAxis(xAxis.let(IResolvable::unwrap))
      }

      /**
       * @param xAxis The properties of a small multiples X axis.
       */
      override fun xAxis(xAxis: SmallMultiplesAxisPropertiesProperty) {
        cdkBuilder.xAxis(xAxis.let(SmallMultiplesAxisPropertiesProperty::unwrap))
      }

      /**
       * @param xAxis The properties of a small multiples X axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("503d9feadb3cfc71b5da677049833bfc900ef46e821c758b7e13926de0e1d0c8")
      override fun xAxis(xAxis: SmallMultiplesAxisPropertiesProperty.Builder.() -> Unit): Unit =
          xAxis(SmallMultiplesAxisPropertiesProperty(xAxis))

      /**
       * @param yAxis The properties of a small multiples Y axis.
       */
      override fun yAxis(yAxis: IResolvable) {
        cdkBuilder.yAxis(yAxis.let(IResolvable::unwrap))
      }

      /**
       * @param yAxis The properties of a small multiples Y axis.
       */
      override fun yAxis(yAxis: SmallMultiplesAxisPropertiesProperty) {
        cdkBuilder.yAxis(yAxis.let(SmallMultiplesAxisPropertiesProperty::unwrap))
      }

      /**
       * @param yAxis The properties of a small multiples Y axis.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e968d2b46c53f4e89d001898391e0c6f09d7777c20c8d8b9ff6059a2287257fb")
      override fun yAxis(yAxis: SmallMultiplesAxisPropertiesProperty.Builder.() -> Unit): Unit =
          yAxis(SmallMultiplesAxisPropertiesProperty(yAxis))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SmallMultiplesOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SmallMultiplesOptionsProperty,
    ) : SmallMultiplesOptionsProperty {
      /**
       * Sets the maximum number of visible columns to display in the grid of small multiples
       * panels.
       *
       * The default is `Auto` , which automatically adjusts the columns in the grid to fit the
       * overall layout and size of the given chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-maxvisiblecolumns)
       */
      override fun maxVisibleColumns(): Number? = unwrap(this).getMaxVisibleColumns()

      /**
       * Sets the maximum number of visible rows to display in the grid of small multiples panels.
       *
       * The default value is `Auto` , which automatically adjusts the rows in the grid to fit the
       * overall layout and size of the given chart.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-maxvisiblerows)
       */
      override fun maxVisibleRows(): Number? = unwrap(this).getMaxVisibleRows()

      /**
       * Configures the display options for each small multiples panel.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-panelconfiguration)
       */
      override fun panelConfiguration(): Any? = unwrap(this).getPanelConfiguration()

      /**
       * The properties of a small multiples X axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-xaxis)
       */
      override fun xAxis(): Any? = unwrap(this).getXAxis()

      /**
       * The properties of a small multiples Y axis.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-yaxis)
       */
      override fun yAxis(): Any? = unwrap(this).getYAxis()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): SmallMultiplesOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.SmallMultiplesOptionsProperty):
          SmallMultiplesOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SmallMultiplesOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.SmallMultiplesOptionsProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GradientColorProperty {
    /**
     * The list of gradient color stops.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientcolor.html#cfn-quicksight-analysis-gradientcolor-stops)
     */
    public fun stops(): Any? = unwrap(this).getStops()

    /**
     * A builder for [GradientColorProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param stops The list of gradient color stops.
       */
      public fun stops(stops: IResolvable)

      /**
       * @param stops The list of gradient color stops.
       */
      public fun stops(stops: List<Any>)

      /**
       * @param stops The list of gradient color stops.
       */
      public fun stops(vararg stops: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GradientColorProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GradientColorProperty.builder()

      /**
       * @param stops The list of gradient color stops.
       */
      override fun stops(stops: IResolvable) {
        cdkBuilder.stops(stops.let(IResolvable::unwrap))
      }

      /**
       * @param stops The list of gradient color stops.
       */
      override fun stops(stops: List<Any>) {
        cdkBuilder.stops(stops)
      }

      /**
       * @param stops The list of gradient color stops.
       */
      override fun stops(vararg stops: Any): Unit = stops(stops.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GradientColorProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GradientColorProperty,
    ) : GradientColorProperty {
      /**
       * The list of gradient color stops.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientcolor.html#cfn-quicksight-analysis-gradientcolor-stops)
       */
      override fun stops(): Any? = unwrap(this).getStops()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): GradientColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GradientColorProperty):
          GradientColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GradientColorProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GradientColorProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface ReferenceLineStyleConfigurationProperty {
    /**
     * The hex color of the reference line.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestyleconfiguration.html#cfn-quicksight-analysis-referencelinestyleconfiguration-color)
     */
    public fun color(): String? = unwrap(this).getColor()

    /**
     * The pattern type of the line style. Choose one of the following options:.
     *
     * * `SOLID`
     * * `DASHED`
     * * `DOTTED`
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestyleconfiguration.html#cfn-quicksight-analysis-referencelinestyleconfiguration-pattern)
     */
    public fun pattern(): String? = unwrap(this).getPattern()

    /**
     * A builder for [ReferenceLineStyleConfigurationProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param color The hex color of the reference line.
       */
      public fun color(color: String)

      /**
       * @param pattern The pattern type of the line style. Choose one of the following options:.
       * * `SOLID`
       * * `DASHED`
       * * `DOTTED`
       */
      public fun pattern(pattern: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineStyleConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineStyleConfigurationProperty.builder()

      /**
       * @param color The hex color of the reference line.
       */
      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      /**
       * @param pattern The pattern type of the line style. Choose one of the following options:.
       * * `SOLID`
       * * `DASHED`
       * * `DOTTED`
       */
      override fun pattern(pattern: String) {
        cdkBuilder.pattern(pattern)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineStyleConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineStyleConfigurationProperty,
    ) : ReferenceLineStyleConfigurationProperty {
      /**
       * The hex color of the reference line.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestyleconfiguration.html#cfn-quicksight-analysis-referencelinestyleconfiguration-color)
       */
      override fun color(): String? = unwrap(this).getColor()

      /**
       * The pattern type of the line style. Choose one of the following options:.
       *
       * * `SOLID`
       * * `DASHED`
       * * `DOTTED`
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestyleconfiguration.html#cfn-quicksight-analysis-referencelinestyleconfiguration-pattern)
       */
      override fun pattern(): String? = unwrap(this).getPattern()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineStyleConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineStyleConfigurationProperty):
          ReferenceLineStyleConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineStyleConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ReferenceLineStyleConfigurationProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface DateTimeHierarchyProperty {
    /**
     * The option that determines the drill down filters for the `DateTime` hierarchy.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimehierarchy.html#cfn-quicksight-analysis-datetimehierarchy-drilldownfilters)
     */
    public fun drillDownFilters(): Any? = unwrap(this).getDrillDownFilters()

    /**
     * The hierarchy ID of the `DateTime` hierarchy.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimehierarchy.html#cfn-quicksight-analysis-datetimehierarchy-hierarchyid)
     */
    public fun hierarchyId(): String

    /**
     * A builder for [DateTimeHierarchyProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param drillDownFilters The option that determines the drill down filters for the
       * `DateTime` hierarchy.
       */
      public fun drillDownFilters(drillDownFilters: IResolvable)

      /**
       * @param drillDownFilters The option that determines the drill down filters for the
       * `DateTime` hierarchy.
       */
      public fun drillDownFilters(drillDownFilters: List<Any>)

      /**
       * @param drillDownFilters The option that determines the drill down filters for the
       * `DateTime` hierarchy.
       */
      public fun drillDownFilters(vararg drillDownFilters: Any)

      /**
       * @param hierarchyId The hierarchy ID of the `DateTime` hierarchy. 
       */
      public fun hierarchyId(hierarchyId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeHierarchyProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeHierarchyProperty.builder()

      /**
       * @param drillDownFilters The option that determines the drill down filters for the
       * `DateTime` hierarchy.
       */
      override fun drillDownFilters(drillDownFilters: IResolvable) {
        cdkBuilder.drillDownFilters(drillDownFilters.let(IResolvable::unwrap))
      }

      /**
       * @param drillDownFilters The option that determines the drill down filters for the
       * `DateTime` hierarchy.
       */
      override fun drillDownFilters(drillDownFilters: List<Any>) {
        cdkBuilder.drillDownFilters(drillDownFilters)
      }

      /**
       * @param drillDownFilters The option that determines the drill down filters for the
       * `DateTime` hierarchy.
       */
      override fun drillDownFilters(vararg drillDownFilters: Any): Unit =
          drillDownFilters(drillDownFilters.toList())

      /**
       * @param hierarchyId The hierarchy ID of the `DateTime` hierarchy. 
       */
      override fun hierarchyId(hierarchyId: String) {
        cdkBuilder.hierarchyId(hierarchyId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeHierarchyProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeHierarchyProperty,
    ) : DateTimeHierarchyProperty {
      /**
       * The option that determines the drill down filters for the `DateTime` hierarchy.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimehierarchy.html#cfn-quicksight-analysis-datetimehierarchy-drilldownfilters)
       */
      override fun drillDownFilters(): Any? = unwrap(this).getDrillDownFilters()

      /**
       * The hierarchy ID of the `DateTime` hierarchy.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimehierarchy.html#cfn-quicksight-analysis-datetimehierarchy-hierarchyid)
       */
      override fun hierarchyId(): String = unwrap(this).getHierarchyId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): DateTimeHierarchyProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeHierarchyProperty):
          DateTimeHierarchyProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimeHierarchyProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.DateTimeHierarchyProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface ClusterMarkerProperty {
    /**
     * The simple cluster marker of the cluster marker.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-clustermarker.html#cfn-quicksight-analysis-clustermarker-simpleclustermarker)
     */
    public fun simpleClusterMarker(): Any? = unwrap(this).getSimpleClusterMarker()

    /**
     * A builder for [ClusterMarkerProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param simpleClusterMarker The simple cluster marker of the cluster marker.
       */
      public fun simpleClusterMarker(simpleClusterMarker: IResolvable)

      /**
       * @param simpleClusterMarker The simple cluster marker of the cluster marker.
       */
      public fun simpleClusterMarker(simpleClusterMarker: SimpleClusterMarkerProperty)

      /**
       * @param simpleClusterMarker The simple cluster marker of the cluster marker.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ebef5daf373a80fc31fcc28cc681d81b9f36a068c1c83ed700a54a60bb8c8d1")
      public
          fun simpleClusterMarker(simpleClusterMarker: SimpleClusterMarkerProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ClusterMarkerProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ClusterMarkerProperty.builder()

      /**
       * @param simpleClusterMarker The simple cluster marker of the cluster marker.
       */
      override fun simpleClusterMarker(simpleClusterMarker: IResolvable) {
        cdkBuilder.simpleClusterMarker(simpleClusterMarker.let(IResolvable::unwrap))
      }

      /**
       * @param simpleClusterMarker The simple cluster marker of the cluster marker.
       */
      override fun simpleClusterMarker(simpleClusterMarker: SimpleClusterMarkerProperty) {
        cdkBuilder.simpleClusterMarker(simpleClusterMarker.let(SimpleClusterMarkerProperty::unwrap))
      }

      /**
       * @param simpleClusterMarker The simple cluster marker of the cluster marker.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ebef5daf373a80fc31fcc28cc681d81b9f36a068c1c83ed700a54a60bb8c8d1")
      override
          fun simpleClusterMarker(simpleClusterMarker: SimpleClusterMarkerProperty.Builder.() -> Unit):
          Unit = simpleClusterMarker(SimpleClusterMarkerProperty(simpleClusterMarker))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ClusterMarkerProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ClusterMarkerProperty,
    ) : ClusterMarkerProperty {
      /**
       * The simple cluster marker of the cluster marker.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-clustermarker.html#cfn-quicksight-analysis-clustermarker-simpleclustermarker)
       */
      override fun simpleClusterMarker(): Any? = unwrap(this).getSimpleClusterMarker()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): ClusterMarkerProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.ClusterMarkerProperty):
          ClusterMarkerProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ClusterMarkerProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.ClusterMarkerProperty = (wrapped as
          Wrapper).cdkObject
    }
  }

  public interface VisualCustomActionProperty {
    /**
     * A list of `VisualCustomActionOperations` .
     *
     * This is a union type structure. For this structure to be valid, only one of the attributes
     * can be defined.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-actionoperations)
     */
    public fun actionOperations(): Any

    /**
     * The ID of the `VisualCustomAction` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-customactionid)
     */
    public fun customActionId(): String

    /**
     * The name of the `VisualCustomAction` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-name)
     */
    public fun name(): String

    /**
     * The status of the `VisualCustomAction` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-status)
     */
    public fun status(): String? = unwrap(this).getStatus()

    /**
     * The trigger of the `VisualCustomAction` .
     *
     * Valid values are defined as follows:
     *
     * * `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
     * * `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-trigger)
     */
    public fun trigger(): String

    /**
     * A builder for [VisualCustomActionProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param actionOperations A list of `VisualCustomActionOperations` . 
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       */
      public fun actionOperations(actionOperations: IResolvable)

      /**
       * @param actionOperations A list of `VisualCustomActionOperations` . 
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       */
      public fun actionOperations(actionOperations: List<Any>)

      /**
       * @param actionOperations A list of `VisualCustomActionOperations` . 
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       */
      public fun actionOperations(vararg actionOperations: Any)

      /**
       * @param customActionId The ID of the `VisualCustomAction` . 
       */
      public fun customActionId(customActionId: String)

      /**
       * @param name The name of the `VisualCustomAction` . 
       */
      public fun name(name: String)

      /**
       * @param status The status of the `VisualCustomAction` .
       */
      public fun status(status: String)

      /**
       * @param trigger The trigger of the `VisualCustomAction` . 
       * Valid values are defined as follows:
       *
       * * `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
       * * `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
       */
      public fun trigger(trigger: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualCustomActionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualCustomActionProperty.builder()

      /**
       * @param actionOperations A list of `VisualCustomActionOperations` . 
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       */
      override fun actionOperations(actionOperations: IResolvable) {
        cdkBuilder.actionOperations(actionOperations.let(IResolvable::unwrap))
      }

      /**
       * @param actionOperations A list of `VisualCustomActionOperations` . 
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       */
      override fun actionOperations(actionOperations: List<Any>) {
        cdkBuilder.actionOperations(actionOperations)
      }

      /**
       * @param actionOperations A list of `VisualCustomActionOperations` . 
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       */
      override fun actionOperations(vararg actionOperations: Any): Unit =
          actionOperations(actionOperations.toList())

      /**
       * @param customActionId The ID of the `VisualCustomAction` . 
       */
      override fun customActionId(customActionId: String) {
        cdkBuilder.customActionId(customActionId)
      }

      /**
       * @param name The name of the `VisualCustomAction` . 
       */
      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      /**
       * @param status The status of the `VisualCustomAction` .
       */
      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      /**
       * @param trigger The trigger of the `VisualCustomAction` . 
       * Valid values are defined as follows:
       *
       * * `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
       * * `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
       */
      override fun trigger(trigger: String) {
        cdkBuilder.trigger(trigger)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualCustomActionProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualCustomActionProperty,
    ) : VisualCustomActionProperty {
      /**
       * A list of `VisualCustomActionOperations` .
       *
       * This is a union type structure. For this structure to be valid, only one of the attributes
       * can be defined.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-actionoperations)
       */
      override fun actionOperations(): Any = unwrap(this).getActionOperations()

      /**
       * The ID of the `VisualCustomAction` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-customactionid)
       */
      override fun customActionId(): String = unwrap(this).getCustomActionId()

      /**
       * The name of the `VisualCustomAction` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-name)
       */
      override fun name(): String = unwrap(this).getName()

      /**
       * The status of the `VisualCustomAction` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-status)
       */
      override fun status(): String? = unwrap(this).getStatus()

      /**
       * The trigger of the `VisualCustomAction` .
       *
       * Valid values are defined as follows:
       *
       * * `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
       * * `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-trigger)
       */
      override fun trigger(): String = unwrap(this).getTrigger()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): VisualCustomActionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualCustomActionProperty):
          VisualCustomActionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisualCustomActionProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.VisualCustomActionProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GeospatialHeatmapColorScaleProperty {
    /**
     * The list of colors to be used in heatmap point style.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapcolorscale.html#cfn-quicksight-analysis-geospatialheatmapcolorscale-colors)
     */
    public fun colors(): Any? = unwrap(this).getColors()

    /**
     * A builder for [GeospatialHeatmapColorScaleProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param colors The list of colors to be used in heatmap point style.
       */
      public fun colors(colors: IResolvable)

      /**
       * @param colors The list of colors to be used in heatmap point style.
       */
      public fun colors(colors: List<Any>)

      /**
       * @param colors The list of colors to be used in heatmap point style.
       */
      public fun colors(vararg colors: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapColorScaleProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapColorScaleProperty.builder()

      /**
       * @param colors The list of colors to be used in heatmap point style.
       */
      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      /**
       * @param colors The list of colors to be used in heatmap point style.
       */
      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      /**
       * @param colors The list of colors to be used in heatmap point style.
       */
      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapColorScaleProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapColorScaleProperty,
    ) : GeospatialHeatmapColorScaleProperty {
      /**
       * The list of colors to be used in heatmap point style.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapcolorscale.html#cfn-quicksight-analysis-geospatialheatmapcolorscale-colors)
       */
      override fun colors(): Any? = unwrap(this).getColors()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialHeatmapColorScaleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapColorScaleProperty):
          GeospatialHeatmapColorScaleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialHeatmapColorScaleProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GeospatialHeatmapColorScaleProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface IntegerDefaultValuesProperty {
    /**
     * The dynamic value of the `IntegerDefaultValues` .
     *
     * Different defaults are displayed according to users, groups, and values mapping.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerdefaultvalues.html#cfn-quicksight-analysis-integerdefaultvalues-dynamicvalue)
     */
    public fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

    /**
     * The static values of the `IntegerDefaultValues` .
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerdefaultvalues.html#cfn-quicksight-analysis-integerdefaultvalues-staticvalues)
     */
    public fun staticValues(): Any? = unwrap(this).getStaticValues()

    /**
     * A builder for [IntegerDefaultValuesProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param dynamicValue The dynamic value of the `IntegerDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      public fun dynamicValue(dynamicValue: IResolvable)

      /**
       * @param dynamicValue The dynamic value of the `IntegerDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty)

      /**
       * @param dynamicValue The dynamic value of the `IntegerDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8609dca290af6330eb0a27586dbcb5263a701c05759072fefd83f9c1e4c8d35f")
      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit)

      /**
       * @param staticValues The static values of the `IntegerDefaultValues` .
       */
      public fun staticValues(staticValues: IResolvable)

      /**
       * @param staticValues The static values of the `IntegerDefaultValues` .
       */
      public fun staticValues(staticValues: List<Number>)

      /**
       * @param staticValues The static values of the `IntegerDefaultValues` .
       */
      public fun staticValues(vararg staticValues: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerDefaultValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerDefaultValuesProperty.builder()

      /**
       * @param dynamicValue The dynamic value of the `IntegerDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      override fun dynamicValue(dynamicValue: IResolvable) {
        cdkBuilder.dynamicValue(dynamicValue.let(IResolvable::unwrap))
      }

      /**
       * @param dynamicValue The dynamic value of the `IntegerDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty) {
        cdkBuilder.dynamicValue(dynamicValue.let(DynamicDefaultValueProperty::unwrap))
      }

      /**
       * @param dynamicValue The dynamic value of the `IntegerDefaultValues` .
       * Different defaults are displayed according to users, groups, and values mapping.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8609dca290af6330eb0a27586dbcb5263a701c05759072fefd83f9c1e4c8d35f")
      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit): Unit
          = dynamicValue(DynamicDefaultValueProperty(dynamicValue))

      /**
       * @param staticValues The static values of the `IntegerDefaultValues` .
       */
      override fun staticValues(staticValues: IResolvable) {
        cdkBuilder.staticValues(staticValues.let(IResolvable::unwrap))
      }

      /**
       * @param staticValues The static values of the `IntegerDefaultValues` .
       */
      override fun staticValues(staticValues: List<Number>) {
        cdkBuilder.staticValues(staticValues)
      }

      /**
       * @param staticValues The static values of the `IntegerDefaultValues` .
       */
      override fun staticValues(vararg staticValues: Number): Unit =
          staticValues(staticValues.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerDefaultValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerDefaultValuesProperty,
    ) : IntegerDefaultValuesProperty {
      /**
       * The dynamic value of the `IntegerDefaultValues` .
       *
       * Different defaults are displayed according to users, groups, and values mapping.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerdefaultvalues.html#cfn-quicksight-analysis-integerdefaultvalues-dynamicvalue)
       */
      override fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

      /**
       * The static values of the `IntegerDefaultValues` .
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerdefaultvalues.html#cfn-quicksight-analysis-integerdefaultvalues-staticvalues)
       */
      override fun staticValues(): Any? = unwrap(this).getStaticValues()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}): IntegerDefaultValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerDefaultValuesProperty):
          IntegerDefaultValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: IntegerDefaultValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.IntegerDefaultValuesProperty =
          (wrapped as Wrapper).cdkObject
    }
  }

  public interface GridLayoutCanvasSizeOptionsProperty {
    /**
     * The options that determine the sizing of the canvas used in a grid layout.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutcanvassizeoptions.html#cfn-quicksight-analysis-gridlayoutcanvassizeoptions-screencanvassizeoptions)
     */
    public fun screenCanvasSizeOptions(): Any? = unwrap(this).getScreenCanvasSizeOptions()

    /**
     * A builder for [GridLayoutCanvasSizeOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param screenCanvasSizeOptions The options that determine the sizing of the canvas used in
       * a grid layout.
       */
      public fun screenCanvasSizeOptions(screenCanvasSizeOptions: IResolvable)

      /**
       * @param screenCanvasSizeOptions The options that determine the sizing of the canvas used in
       * a grid layout.
       */
      public
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: GridLayoutScreenCanvasSizeOptionsProperty)

      /**
       * @param screenCanvasSizeOptions The options that determine the sizing of the canvas used in
       * a grid layout.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b917277787a178d1fe53f97e681d2cad46bdb7d5395f78f6a3795d9bd2a6eb3b")
      public
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: GridLayoutScreenCanvasSizeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutCanvasSizeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutCanvasSizeOptionsProperty.builder()

      /**
       * @param screenCanvasSizeOptions The options that determine the sizing of the canvas used in
       * a grid layout.
       */
      override fun screenCanvasSizeOptions(screenCanvasSizeOptions: IResolvable) {
        cdkBuilder.screenCanvasSizeOptions(screenCanvasSizeOptions.let(IResolvable::unwrap))
      }

      /**
       * @param screenCanvasSizeOptions The options that determine the sizing of the canvas used in
       * a grid layout.
       */
      override
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: GridLayoutScreenCanvasSizeOptionsProperty) {
        cdkBuilder.screenCanvasSizeOptions(screenCanvasSizeOptions.let(GridLayoutScreenCanvasSizeOptionsProperty::unwrap))
      }

      /**
       * @param screenCanvasSizeOptions The options that determine the sizing of the canvas used in
       * a grid layout.
       */
      @Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b917277787a178d1fe53f97e681d2cad46bdb7d5395f78f6a3795d9bd2a6eb3b")
      override
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: GridLayoutScreenCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit =
          screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty(screenCanvasSizeOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutCanvasSizeOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutCanvasSizeOptionsProperty,
    ) : GridLayoutCanvasSizeOptionsProperty {
      /**
       * The options that determine the sizing of the canvas used in a grid layout.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutcanvassizeoptions.html#cfn-quicksight-analysis-gridlayoutcanvassizeoptions-screencanvassizeoptions)
       */
      override fun screenCanvasSizeOptions(): Any? = unwrap(this).getScreenCanvasSizeOptions()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          GridLayoutCanvasSizeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutCanvasSizeOptionsProperty):
          GridLayoutCanvasSizeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GridLayoutCanvasSizeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.GridLayoutCanvasSizeOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }

  public interface PivotTableFieldSubtotalOptionsProperty {
    /**
     * The field ID of the subtotal options.
     *
     * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldsubtotaloptions.html#cfn-quicksight-analysis-pivottablefieldsubtotaloptions-fieldid)
     */
    public fun fieldId(): String? = unwrap(this).getFieldId()

    /**
     * A builder for [PivotTableFieldSubtotalOptionsProperty]
     */
    @CdkDslMarker
    public interface Builder {
      /**
       * @param fieldId The field ID of the subtotal options.
       */
      public fun fieldId(fieldId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldSubtotalOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldSubtotalOptionsProperty.builder()

      /**
       * @param fieldId The field ID of the subtotal options.
       */
      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldSubtotalOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper internal constructor(
      internal val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldSubtotalOptionsProperty,
    ) : PivotTableFieldSubtotalOptionsProperty {
      /**
       * The field ID of the subtotal options.
       *
       * [Documentation](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldsubtotaloptions.html#cfn-quicksight-analysis-pivottablefieldsubtotaloptions-fieldid)
       */
      override fun fieldId(): String? = unwrap(this).getFieldId()
    }

    public companion object {
      init {

      }

      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableFieldSubtotalOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldSubtotalOptionsProperty):
          PivotTableFieldSubtotalOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableFieldSubtotalOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnAnalysis.PivotTableFieldSubtotalOptionsProperty
          = (wrapped as Wrapper).cdkObject
    }
  }
}
