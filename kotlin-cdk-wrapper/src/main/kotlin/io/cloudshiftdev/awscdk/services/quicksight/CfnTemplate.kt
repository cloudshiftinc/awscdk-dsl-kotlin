@file:Suppress("RedundantVisibilityModifier","RedundantUnitReturnType","RemoveRedundantQualifierName","unused","UnusedImport","ClassName","REDUNDANT_PROJECTION","DEPRECATION")

package io.cloudshiftdev.awscdk.services.quicksight

import io.cloudshiftdev.awscdk.CfnResource
import io.cloudshiftdev.awscdk.CfnTag
import io.cloudshiftdev.awscdk.IInspectable
import io.cloudshiftdev.awscdk.IResolvable
import io.cloudshiftdev.awscdk.ITaggable
import io.cloudshiftdev.awscdk.TagManager
import io.cloudshiftdev.awscdk.TreeInspector
import io.cloudshiftdev.awscdk.common.CdkDslMarker
import io.cloudshiftdev.awscdk.common.CdkObject
import kotlin.Any
import kotlin.Boolean
import kotlin.Number
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmName
import io.cloudshiftdev.constructs.Construct as CloudshiftdevConstructsConstruct
import software.constructs.Construct as SoftwareConstructsConstruct

public open class CfnTemplate internal constructor(
  internal override val cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate,
) : CfnResource(cdkObject), IInspectable, ITaggable {
  public open fun attrArn(): String = unwrap(this).getAttrArn()

  public open fun attrCreatedTime(): String = unwrap(this).getAttrCreatedTime()

  public open fun attrLastUpdatedTime(): String = unwrap(this).getAttrLastUpdatedTime()

  public open fun attrVersion(): IResolvable = unwrap(this).getAttrVersion().let(IResolvable::wrap)

  public open fun attrVersionCreatedTime(): String = unwrap(this).getAttrVersionCreatedTime()

  public open fun attrVersionDataSetConfigurations(): IResolvable =
      unwrap(this).getAttrVersionDataSetConfigurations().let(IResolvable::wrap)

  public open fun attrVersionDescription(): String = unwrap(this).getAttrVersionDescription()

  public open fun attrVersionErrors(): IResolvable =
      unwrap(this).getAttrVersionErrors().let(IResolvable::wrap)

  public open fun attrVersionSheets(): IResolvable =
      unwrap(this).getAttrVersionSheets().let(IResolvable::wrap)

  public open fun attrVersionSourceEntityArn(): String =
      unwrap(this).getAttrVersionSourceEntityArn()

  public open fun attrVersionStatus(): String = unwrap(this).getAttrVersionStatus()

  public open fun attrVersionThemeArn(): String = unwrap(this).getAttrVersionThemeArn()

  public open fun attrVersionVersionNumber(): IResolvable =
      unwrap(this).getAttrVersionVersionNumber().let(IResolvable::wrap)

  public open fun awsAccountId(): String = unwrap(this).getAwsAccountId()

  public open fun awsAccountId(`value`: String) {
    unwrap(this).setAwsAccountId(`value`)
  }

  public open fun definition(): Any? = unwrap(this).getDefinition()

  public open fun definition(`value`: IResolvable) {
    unwrap(this).setDefinition(`value`.let(IResolvable::unwrap))
  }

  public open fun definition(`value`: TemplateVersionDefinitionProperty) {
    unwrap(this).setDefinition(`value`.let(TemplateVersionDefinitionProperty::unwrap))
  }

  @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
  @JvmName("45214f5aad27982cff6c3bc489ea02025a0433cb0f1513b1ce76aed4d7fcde9b")
  public open fun definition(`value`: TemplateVersionDefinitionProperty.Builder.() -> Unit): Unit =
      definition(TemplateVersionDefinitionProperty(`value`))

  public override fun inspect(inspector: TreeInspector) {
    unwrap(this).inspect(inspector.let(TreeInspector::unwrap))
  }

  public open fun name(): String? = unwrap(this).getName()

  public open fun name(`value`: String) {
    unwrap(this).setName(`value`)
  }

  public open fun permissions(): Any? = unwrap(this).getPermissions()

  public open fun permissions(`value`: IResolvable) {
    unwrap(this).setPermissions(`value`.let(IResolvable::unwrap))
  }

  public open fun permissions(__idx_ac66f0: List<Any>) {
    unwrap(this).setPermissions(__idx_ac66f0)
  }

  public open fun permissions(vararg __idx_ac66f0: Any): Unit = permissions(__idx_ac66f0.toList())

  public open fun sourceEntity(): Any? = unwrap(this).getSourceEntity()

  public open fun sourceEntity(`value`: IResolvable) {
    unwrap(this).setSourceEntity(`value`.let(IResolvable::unwrap))
  }

  public open fun sourceEntity(`value`: TemplateSourceEntityProperty) {
    unwrap(this).setSourceEntity(`value`.let(TemplateSourceEntityProperty::unwrap))
  }

  @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
  @JvmName("bfe0b57e25ab7f9d05e17846e6b949bb6bdbc2733e7b8aa807138576fea6bc68")
  public open fun sourceEntity(`value`: TemplateSourceEntityProperty.Builder.() -> Unit): Unit =
      sourceEntity(TemplateSourceEntityProperty(`value`))

  public override fun tags(): TagManager = unwrap(this).getTags().let(TagManager::wrap)

  public open fun tagsRaw(): List<CfnTag> = unwrap(this).getTagsRaw()?.map(CfnTag::wrap) ?:
      emptyList()

  public open fun tagsRaw(`value`: List<CfnTag>) {
    unwrap(this).setTagsRaw(`value`.map(CfnTag::unwrap))
  }

  public open fun tagsRaw(vararg `value`: CfnTag): Unit = tagsRaw(`value`.toList())

  public open fun templateId(): String = unwrap(this).getTemplateId()

  public open fun templateId(`value`: String) {
    unwrap(this).setTemplateId(`value`)
  }

  public open fun validationStrategy(): Any? = unwrap(this).getValidationStrategy()

  public open fun validationStrategy(`value`: IResolvable) {
    unwrap(this).setValidationStrategy(`value`.let(IResolvable::unwrap))
  }

  public open fun validationStrategy(`value`: ValidationStrategyProperty) {
    unwrap(this).setValidationStrategy(`value`.let(ValidationStrategyProperty::unwrap))
  }

  @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
  @JvmName("4867390dcebbfef67a8b612f83446d53cf727b88283fafebbe2f67300ff512f9")
  public open fun validationStrategy(`value`: ValidationStrategyProperty.Builder.() -> Unit): Unit =
      validationStrategy(ValidationStrategyProperty(`value`))

  public open fun versionDescription(): String? = unwrap(this).getVersionDescription()

  public open fun versionDescription(`value`: String) {
    unwrap(this).setVersionDescription(`value`)
  }

  @CdkDslMarker
  public interface Builder {
    public fun awsAccountId(awsAccountId: String)

    public fun definition(definition: IResolvable)

    public fun definition(definition: TemplateVersionDefinitionProperty)

    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("816b0649318bb8f97dae1842c2b08a802edeb4f71b616d1ad5851d9cae8ee6bb")
    public fun definition(definition: TemplateVersionDefinitionProperty.Builder.() -> Unit)

    public fun name(name: String)

    public fun permissions(permissions: IResolvable)

    public fun permissions(permissions: List<Any>)

    public fun permissions(vararg permissions: Any)

    public fun sourceEntity(sourceEntity: IResolvable)

    public fun sourceEntity(sourceEntity: TemplateSourceEntityProperty)

    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("fa8965bc71fac8ca035dbe8b267c9564a0ec5a48839c7b576a35eb65e029847b")
    public fun sourceEntity(sourceEntity: TemplateSourceEntityProperty.Builder.() -> Unit)

    public fun tags(tags: List<CfnTag>)

    public fun tags(vararg tags: CfnTag)

    public fun templateId(templateId: String)

    public fun validationStrategy(validationStrategy: IResolvable)

    public fun validationStrategy(validationStrategy: ValidationStrategyProperty)

    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("95879a03cef636fe5ea476fbf3217c2d0c4174e2de1674cef6def2a7b0f5845c")
    public fun validationStrategy(validationStrategy: ValidationStrategyProperty.Builder.() -> Unit)

    public fun versionDescription(versionDescription: String)
  }

  private class BuilderImpl(
    scope: SoftwareConstructsConstruct,
    id: String,
  ) : Builder {
    private val cdkBuilder: software.amazon.awscdk.services.quicksight.CfnTemplate.Builder =
        software.amazon.awscdk.services.quicksight.CfnTemplate.Builder.create(scope, id)

    override fun awsAccountId(awsAccountId: String) {
      cdkBuilder.awsAccountId(awsAccountId)
    }

    override fun definition(definition: IResolvable) {
      cdkBuilder.definition(definition.let(IResolvable::unwrap))
    }

    override fun definition(definition: TemplateVersionDefinitionProperty) {
      cdkBuilder.definition(definition.let(TemplateVersionDefinitionProperty::unwrap))
    }

    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("816b0649318bb8f97dae1842c2b08a802edeb4f71b616d1ad5851d9cae8ee6bb")
    override fun definition(definition: TemplateVersionDefinitionProperty.Builder.() -> Unit): Unit
        = definition(TemplateVersionDefinitionProperty(definition))

    override fun name(name: String) {
      cdkBuilder.name(name)
    }

    override fun permissions(permissions: IResolvable) {
      cdkBuilder.permissions(permissions.let(IResolvable::unwrap))
    }

    override fun permissions(permissions: List<Any>) {
      cdkBuilder.permissions(permissions)
    }

    override fun permissions(vararg permissions: Any): Unit = permissions(permissions.toList())

    override fun sourceEntity(sourceEntity: IResolvable) {
      cdkBuilder.sourceEntity(sourceEntity.let(IResolvable::unwrap))
    }

    override fun sourceEntity(sourceEntity: TemplateSourceEntityProperty) {
      cdkBuilder.sourceEntity(sourceEntity.let(TemplateSourceEntityProperty::unwrap))
    }

    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("fa8965bc71fac8ca035dbe8b267c9564a0ec5a48839c7b576a35eb65e029847b")
    override fun sourceEntity(sourceEntity: TemplateSourceEntityProperty.Builder.() -> Unit): Unit =
        sourceEntity(TemplateSourceEntityProperty(sourceEntity))

    override fun tags(tags: List<CfnTag>) {
      cdkBuilder.tags(tags.map(CfnTag::unwrap))
    }

    override fun tags(vararg tags: CfnTag): Unit = tags(tags.toList())

    override fun templateId(templateId: String) {
      cdkBuilder.templateId(templateId)
    }

    override fun validationStrategy(validationStrategy: IResolvable) {
      cdkBuilder.validationStrategy(validationStrategy.let(IResolvable::unwrap))
    }

    override fun validationStrategy(validationStrategy: ValidationStrategyProperty) {
      cdkBuilder.validationStrategy(validationStrategy.let(ValidationStrategyProperty::unwrap))
    }

    @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
    @JvmName("95879a03cef636fe5ea476fbf3217c2d0c4174e2de1674cef6def2a7b0f5845c")
    override
        fun validationStrategy(validationStrategy: ValidationStrategyProperty.Builder.() -> Unit):
        Unit = validationStrategy(ValidationStrategyProperty(validationStrategy))

    override fun versionDescription(versionDescription: String) {
      cdkBuilder.versionDescription(versionDescription)
    }

    public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate = cdkBuilder.build()
  }

  public companion object {
    public val CFN_RESOURCE_TYPE_NAME: String =
        software.amazon.awscdk.services.quicksight.CfnTemplate.CFN_RESOURCE_TYPE_NAME

    public operator fun invoke(
      scope: CloudshiftdevConstructsConstruct,
      id: String,
      block: Builder.() -> Unit = {},
    ): CfnTemplate {
      val builderImpl = BuilderImpl(CloudshiftdevConstructsConstruct.unwrap(scope), id)
      return CfnTemplate(builderImpl.apply(block).build())
    }

    internal fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate):
        CfnTemplate = CfnTemplate(cdkObject)

    internal fun unwrap(wrapped: CfnTemplate):
        software.amazon.awscdk.services.quicksight.CfnTemplate = wrapped.cdkObject
  }

  public interface TopBottomRankedComputationProperty {
    public fun category(): Any? = unwrap(this).getCategory()

    public fun computationId(): String

    public fun name(): String? = unwrap(this).getName()

    public fun resultSize(): Number? = unwrap(this).getResultSize()

    public fun type(): String

    public fun `value`(): Any? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun category(category: IResolvable)

      public fun category(category: DimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9341265885f1ff4cd11b3bfa35164521a1c9f488ca7c9cc9bb55f12896b623f7")
      public fun category(category: DimensionFieldProperty.Builder.() -> Unit)

      public fun computationId(computationId: String)

      public fun name(name: String)

      public fun resultSize(resultSize: Number)

      public fun type(type: String)

      public fun `value`(`value`: IResolvable)

      public fun `value`(`value`: MeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1041ac54488fa5367b9c8c2b35411c6130324f02b77f68b6c97c7fe57e022a7d")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomRankedComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomRankedComputationProperty.builder()

      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      override fun category(category: DimensionFieldProperty) {
        cdkBuilder.category(category.let(DimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9341265885f1ff4cd11b3bfa35164521a1c9f488ca7c9cc9bb55f12896b623f7")
      override fun category(category: DimensionFieldProperty.Builder.() -> Unit): Unit =
          category(DimensionFieldProperty(category))

      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun resultSize(resultSize: Number) {
        cdkBuilder.resultSize(resultSize)
      }

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1041ac54488fa5367b9c8c2b35411c6130324f02b77f68b6c97c7fe57e022a7d")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomRankedComputationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomRankedComputationProperty,
    ) : CdkObject(cdkObject), TopBottomRankedComputationProperty {
      override fun category(): Any? = unwrap(this).getCategory()

      override fun computationId(): String = unwrap(this).getComputationId()

      override fun name(): String? = unwrap(this).getName()

      override fun resultSize(): Number? = unwrap(this).getResultSize()

      override fun type(): String = unwrap(this).getType()

      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TopBottomRankedComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomRankedComputationProperty):
          TopBottomRankedComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TopBottomRankedComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomRankedComputationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomRankedComputationProperty
    }
  }

  public interface NumericRangeFilterValueProperty {
    public fun parameter(): String? = unwrap(this).getParameter()

    public fun staticValue(): Number? = unwrap(this).getStaticValue()

    @CdkDslMarker
    public interface Builder {
      public fun parameter(parameter: String)

      public fun staticValue(staticValue: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterValueProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterValueProperty.builder()

      override fun parameter(parameter: String) {
        cdkBuilder.parameter(parameter)
      }

      override fun staticValue(staticValue: Number) {
        cdkBuilder.staticValue(staticValue)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterValueProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterValueProperty,
    ) : CdkObject(cdkObject), NumericRangeFilterValueProperty {
      override fun parameter(): String? = unwrap(this).getParameter()

      override fun staticValue(): Number? = unwrap(this).getStaticValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): NumericRangeFilterValueProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterValueProperty):
          NumericRangeFilterValueProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericRangeFilterValueProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterValueProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterValueProperty
    }
  }

  public interface BodySectionContentProperty {
    public fun layout(): Any? = unwrap(this).getLayout()

    @CdkDslMarker
    public interface Builder {
      public fun layout(layout: IResolvable)

      public fun layout(layout: SectionLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("681941481a29d80970ef95eb3686fc369671a255e9c64655103e6b50bf70964e")
      public fun layout(layout: SectionLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionContentProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionContentProperty.builder()

      override fun layout(layout: IResolvable) {
        cdkBuilder.layout(layout.let(IResolvable::unwrap))
      }

      override fun layout(layout: SectionLayoutConfigurationProperty) {
        cdkBuilder.layout(layout.let(SectionLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("681941481a29d80970ef95eb3686fc369671a255e9c64655103e6b50bf70964e")
      override fun layout(layout: SectionLayoutConfigurationProperty.Builder.() -> Unit): Unit =
          layout(SectionLayoutConfigurationProperty(layout))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionContentProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionContentProperty,
    ) : CdkObject(cdkObject), BodySectionContentProperty {
      override fun layout(): Any? = unwrap(this).getLayout()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): BodySectionContentProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionContentProperty):
          BodySectionContentProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BodySectionContentProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionContentProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionContentProperty
    }
  }

  public interface StringDefaultValuesProperty {
    public fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

    public fun staticValues(): List<String> = unwrap(this).getStaticValues() ?: emptyList()

    @CdkDslMarker
    public interface Builder {
      public fun dynamicValue(dynamicValue: IResolvable)

      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bbc160d569c071ef8ecb4ada508862aa026d09a7cb5f797c082a92b564a7b532")
      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit)

      public fun staticValues(staticValues: List<String>)

      public fun staticValues(vararg staticValues: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringDefaultValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringDefaultValuesProperty.builder()

      override fun dynamicValue(dynamicValue: IResolvable) {
        cdkBuilder.dynamicValue(dynamicValue.let(IResolvable::unwrap))
      }

      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty) {
        cdkBuilder.dynamicValue(dynamicValue.let(DynamicDefaultValueProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bbc160d569c071ef8ecb4ada508862aa026d09a7cb5f797c082a92b564a7b532")
      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit): Unit
          = dynamicValue(DynamicDefaultValueProperty(dynamicValue))

      override fun staticValues(staticValues: List<String>) {
        cdkBuilder.staticValues(staticValues)
      }

      override fun staticValues(vararg staticValues: String): Unit =
          staticValues(staticValues.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringDefaultValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringDefaultValuesProperty,
    ) : CdkObject(cdkObject), StringDefaultValuesProperty {
      override fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

      override fun staticValues(): List<String> = unwrap(this).getStaticValues() ?: emptyList()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): StringDefaultValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.StringDefaultValuesProperty):
          StringDefaultValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: StringDefaultValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringDefaultValuesProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringDefaultValuesProperty
    }
  }

  public interface ConditionalFormattingSolidColorProperty {
    public fun color(): String? = unwrap(this).getColor()

    public fun expression(): String

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)

      public fun expression(expression: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingSolidColorProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingSolidColorProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingSolidColorProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingSolidColorProperty,
    ) : CdkObject(cdkObject), ConditionalFormattingSolidColorProperty {
      override fun color(): String? = unwrap(this).getColor()

      override fun expression(): String = unwrap(this).getExpression()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingSolidColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingSolidColorProperty):
          ConditionalFormattingSolidColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingSolidColorProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingSolidColorProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingSolidColorProperty
    }
  }

  public interface FilterTextFieldControlProperty {
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun filterControlId(): String

    public fun sourceFilterId(): String

    public fun title(): String

    @CdkDslMarker
    public interface Builder {
      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b796c2383e554409c5e9e5c53776576fa673a26216b37e0e11726afcda6002c3")
      public
          fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun filterControlId(filterControlId: String)

      public fun sourceFilterId(sourceFilterId: String)

      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextFieldControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextFieldControlProperty.builder()

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(TextFieldControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b796c2383e554409c5e9e5c53776576fa673a26216b37e0e11726afcda6002c3")
      override
          fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(TextFieldControlDisplayOptionsProperty(displayOptions))

      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextFieldControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextFieldControlProperty,
    ) : CdkObject(cdkObject), FilterTextFieldControlProperty {
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilterTextFieldControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextFieldControlProperty):
          FilterTextFieldControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterTextFieldControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextFieldControlProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextFieldControlProperty
    }
  }

  public interface KPIVisualLayoutOptionsProperty {
    public fun standardLayout(): Any? = unwrap(this).getStandardLayout()

    @CdkDslMarker
    public interface Builder {
      public fun standardLayout(standardLayout: IResolvable)

      public fun standardLayout(standardLayout: KPIVisualStandardLayoutProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2af1f17a5ab7d35b0d297765207fb825bd4591be297f718ecb87712dcee1a068")
      public fun standardLayout(standardLayout: KPIVisualStandardLayoutProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualLayoutOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualLayoutOptionsProperty.builder()

      override fun standardLayout(standardLayout: IResolvable) {
        cdkBuilder.standardLayout(standardLayout.let(IResolvable::unwrap))
      }

      override fun standardLayout(standardLayout: KPIVisualStandardLayoutProperty) {
        cdkBuilder.standardLayout(standardLayout.let(KPIVisualStandardLayoutProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2af1f17a5ab7d35b0d297765207fb825bd4591be297f718ecb87712dcee1a068")
      override
          fun standardLayout(standardLayout: KPIVisualStandardLayoutProperty.Builder.() -> Unit):
          Unit = standardLayout(KPIVisualStandardLayoutProperty(standardLayout))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualLayoutOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualLayoutOptionsProperty,
    ) : CdkObject(cdkObject), KPIVisualLayoutOptionsProperty {
      override fun standardLayout(): Any? = unwrap(this).getStandardLayout()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): KPIVisualLayoutOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualLayoutOptionsProperty):
          KPIVisualLayoutOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIVisualLayoutOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualLayoutOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualLayoutOptionsProperty
    }
  }

  public interface KPIFieldWellsProperty {
    public fun targetValues(): Any? = unwrap(this).getTargetValues()

    public fun trendGroups(): Any? = unwrap(this).getTrendGroups()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun targetValues(targetValues: IResolvable)

      public fun targetValues(targetValues: List<Any>)

      public fun targetValues(vararg targetValues: Any)

      public fun trendGroups(trendGroups: IResolvable)

      public fun trendGroups(trendGroups: List<Any>)

      public fun trendGroups(vararg trendGroups: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIFieldWellsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIFieldWellsProperty.builder()

      override fun targetValues(targetValues: IResolvable) {
        cdkBuilder.targetValues(targetValues.let(IResolvable::unwrap))
      }

      override fun targetValues(targetValues: List<Any>) {
        cdkBuilder.targetValues(targetValues)
      }

      override fun targetValues(vararg targetValues: Any): Unit =
          targetValues(targetValues.toList())

      override fun trendGroups(trendGroups: IResolvable) {
        cdkBuilder.trendGroups(trendGroups.let(IResolvable::unwrap))
      }

      override fun trendGroups(trendGroups: List<Any>) {
        cdkBuilder.trendGroups(trendGroups)
      }

      override fun trendGroups(vararg trendGroups: Any): Unit = trendGroups(trendGroups.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIFieldWellsProperty,
    ) : CdkObject(cdkObject), KPIFieldWellsProperty {
      override fun targetValues(): Any? = unwrap(this).getTargetValues()

      override fun trendGroups(): Any? = unwrap(this).getTrendGroups()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): KPIFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPIFieldWellsProperty):
          KPIFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIFieldWellsProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIFieldWellsProperty
    }
  }

  public interface TableFieldImageConfigurationProperty {
    public fun sizingOptions(): Any? = unwrap(this).getSizingOptions()

    @CdkDslMarker
    public interface Builder {
      public fun sizingOptions(sizingOptions: IResolvable)

      public fun sizingOptions(sizingOptions: TableCellImageSizingConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("69fedee23f1c4c141227575a82496a600d397c4e7ad4a7d044d7c94e3c8e7d9e")
      public
          fun sizingOptions(sizingOptions: TableCellImageSizingConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldImageConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldImageConfigurationProperty.builder()

      override fun sizingOptions(sizingOptions: IResolvable) {
        cdkBuilder.sizingOptions(sizingOptions.let(IResolvable::unwrap))
      }

      override fun sizingOptions(sizingOptions: TableCellImageSizingConfigurationProperty) {
        cdkBuilder.sizingOptions(sizingOptions.let(TableCellImageSizingConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("69fedee23f1c4c141227575a82496a600d397c4e7ad4a7d044d7c94e3c8e7d9e")
      override
          fun sizingOptions(sizingOptions: TableCellImageSizingConfigurationProperty.Builder.() -> Unit):
          Unit = sizingOptions(TableCellImageSizingConfigurationProperty(sizingOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldImageConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldImageConfigurationProperty,
    ) : CdkObject(cdkObject), TableFieldImageConfigurationProperty {
      override fun sizingOptions(): Any? = unwrap(this).getSizingOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableFieldImageConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldImageConfigurationProperty):
          TableFieldImageConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldImageConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldImageConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldImageConfigurationProperty
    }
  }

  public interface CustomColorProperty {
    public fun color(): String

    public fun fieldValue(): String? = unwrap(this).getFieldValue()

    public fun specialValue(): String? = unwrap(this).getSpecialValue()

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)

      public fun fieldValue(fieldValue: String)

      public fun specialValue(specialValue: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomColorProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomColorProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      override fun fieldValue(fieldValue: String) {
        cdkBuilder.fieldValue(fieldValue)
      }

      override fun specialValue(specialValue: String) {
        cdkBuilder.specialValue(specialValue)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.CustomColorProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomColorProperty,
    ) : CdkObject(cdkObject), CustomColorProperty {
      override fun color(): String = unwrap(this).getColor()

      override fun fieldValue(): String? = unwrap(this).getFieldValue()

      override fun specialValue(): String? = unwrap(this).getSpecialValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): CustomColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CustomColorProperty):
          CustomColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomColorProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomColorProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomColorProperty
    }
  }

  public interface DrillDownFilterProperty {
    public fun categoryFilter(): Any? = unwrap(this).getCategoryFilter()

    public fun numericEqualityFilter(): Any? = unwrap(this).getNumericEqualityFilter()

    public fun timeRangeFilter(): Any? = unwrap(this).getTimeRangeFilter()

    @CdkDslMarker
    public interface Builder {
      public fun categoryFilter(categoryFilter: IResolvable)

      public fun categoryFilter(categoryFilter: CategoryDrillDownFilterProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("96e174ee8fbb67a41d402342b6313d5c26049b57fc7c8664b085132170b11601")
      public fun categoryFilter(categoryFilter: CategoryDrillDownFilterProperty.Builder.() -> Unit)

      public fun numericEqualityFilter(numericEqualityFilter: IResolvable)

      public
          fun numericEqualityFilter(numericEqualityFilter: NumericEqualityDrillDownFilterProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b0d9855b717e13ddc3d397bd853f484f090fd72147bdf14f11d03eda23c6ec7")
      public
          fun numericEqualityFilter(numericEqualityFilter: NumericEqualityDrillDownFilterProperty.Builder.() -> Unit)

      public fun timeRangeFilter(timeRangeFilter: IResolvable)

      public fun timeRangeFilter(timeRangeFilter: TimeRangeDrillDownFilterProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("25262fc40eaf099ff06c95cb3af29fa71df6b9396fd4717d03fe275654119226")
      public
          fun timeRangeFilter(timeRangeFilter: TimeRangeDrillDownFilterProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DrillDownFilterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DrillDownFilterProperty.builder()

      override fun categoryFilter(categoryFilter: IResolvable) {
        cdkBuilder.categoryFilter(categoryFilter.let(IResolvable::unwrap))
      }

      override fun categoryFilter(categoryFilter: CategoryDrillDownFilterProperty) {
        cdkBuilder.categoryFilter(categoryFilter.let(CategoryDrillDownFilterProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("96e174ee8fbb67a41d402342b6313d5c26049b57fc7c8664b085132170b11601")
      override
          fun categoryFilter(categoryFilter: CategoryDrillDownFilterProperty.Builder.() -> Unit):
          Unit = categoryFilter(CategoryDrillDownFilterProperty(categoryFilter))

      override fun numericEqualityFilter(numericEqualityFilter: IResolvable) {
        cdkBuilder.numericEqualityFilter(numericEqualityFilter.let(IResolvable::unwrap))
      }

      override
          fun numericEqualityFilter(numericEqualityFilter: NumericEqualityDrillDownFilterProperty) {
        cdkBuilder.numericEqualityFilter(numericEqualityFilter.let(NumericEqualityDrillDownFilterProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b0d9855b717e13ddc3d397bd853f484f090fd72147bdf14f11d03eda23c6ec7")
      override
          fun numericEqualityFilter(numericEqualityFilter: NumericEqualityDrillDownFilterProperty.Builder.() -> Unit):
          Unit =
          numericEqualityFilter(NumericEqualityDrillDownFilterProperty(numericEqualityFilter))

      override fun timeRangeFilter(timeRangeFilter: IResolvable) {
        cdkBuilder.timeRangeFilter(timeRangeFilter.let(IResolvable::unwrap))
      }

      override fun timeRangeFilter(timeRangeFilter: TimeRangeDrillDownFilterProperty) {
        cdkBuilder.timeRangeFilter(timeRangeFilter.let(TimeRangeDrillDownFilterProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("25262fc40eaf099ff06c95cb3af29fa71df6b9396fd4717d03fe275654119226")
      override
          fun timeRangeFilter(timeRangeFilter: TimeRangeDrillDownFilterProperty.Builder.() -> Unit):
          Unit = timeRangeFilter(TimeRangeDrillDownFilterProperty(timeRangeFilter))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DrillDownFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DrillDownFilterProperty,
    ) : CdkObject(cdkObject), DrillDownFilterProperty {
      override fun categoryFilter(): Any? = unwrap(this).getCategoryFilter()

      override fun numericEqualityFilter(): Any? = unwrap(this).getNumericEqualityFilter()

      override fun timeRangeFilter(): Any? = unwrap(this).getTimeRangeFilter()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DrillDownFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DrillDownFilterProperty):
          DrillDownFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DrillDownFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DrillDownFilterProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DrillDownFilterProperty
    }
  }

  public interface TableFieldOptionProperty {
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    public fun fieldId(): String

    public fun urlStyling(): Any? = unwrap(this).getUrlStyling()

    public fun visibility(): String? = unwrap(this).getVisibility()

    public fun width(): String? = unwrap(this).getWidth()

    @CdkDslMarker
    public interface Builder {
      public fun customLabel(customLabel: String)

      public fun fieldId(fieldId: String)

      public fun urlStyling(urlStyling: IResolvable)

      public fun urlStyling(urlStyling: TableFieldURLConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("701b3a81615bc349acbed52367230a6de6b0e5008d70d5b5a76b79c585ba5f4a")
      public fun urlStyling(urlStyling: TableFieldURLConfigurationProperty.Builder.() -> Unit)

      public fun visibility(visibility: String)

      public fun width(width: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionProperty.builder()

      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun urlStyling(urlStyling: IResolvable) {
        cdkBuilder.urlStyling(urlStyling.let(IResolvable::unwrap))
      }

      override fun urlStyling(urlStyling: TableFieldURLConfigurationProperty) {
        cdkBuilder.urlStyling(urlStyling.let(TableFieldURLConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("701b3a81615bc349acbed52367230a6de6b0e5008d70d5b5a76b79c585ba5f4a")
      override fun urlStyling(urlStyling: TableFieldURLConfigurationProperty.Builder.() -> Unit):
          Unit = urlStyling(TableFieldURLConfigurationProperty(urlStyling))

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      override fun width(width: String) {
        cdkBuilder.width(width)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionProperty,
    ) : CdkObject(cdkObject), TableFieldOptionProperty {
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun urlStyling(): Any? = unwrap(this).getUrlStyling()

      override fun visibility(): String? = unwrap(this).getVisibility()

      override fun width(): String? = unwrap(this).getWidth()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TableFieldOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionProperty):
          TableFieldOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionProperty
    }
  }

  public interface TrendArrowOptionsProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TrendArrowOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TrendArrowOptionsProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TrendArrowOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TrendArrowOptionsProperty,
    ) : CdkObject(cdkObject), TrendArrowOptionsProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TrendArrowOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TrendArrowOptionsProperty):
          TrendArrowOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TrendArrowOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TrendArrowOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TrendArrowOptionsProperty
    }
  }

  public interface CategoricalDimensionFieldProperty {
    public fun column(): Any

    public fun fieldId(): String

    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    public fun hierarchyId(): String? = unwrap(this).getHierarchyId()

    @CdkDslMarker
    public interface Builder {
      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bfc03987290c073709c3dfde60340a1100f07989bc329e7cbee133684aeaf1d6")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun fieldId(fieldId: String)

      public fun formatConfiguration(formatConfiguration: IResolvable)

      public fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4e72c794ed303ce9d53a9bf2bbcdfc910bdd2845e929d90ef99aff2353044249")
      public
          fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty.Builder.() -> Unit)

      public fun hierarchyId(hierarchyId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalDimensionFieldProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalDimensionFieldProperty.builder()

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bfc03987290c073709c3dfde60340a1100f07989bc329e7cbee133684aeaf1d6")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      override fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(StringFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4e72c794ed303ce9d53a9bf2bbcdfc910bdd2845e929d90ef99aff2353044249")
      override
          fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(StringFormatConfigurationProperty(formatConfiguration))

      override fun hierarchyId(hierarchyId: String) {
        cdkBuilder.hierarchyId(hierarchyId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalDimensionFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalDimensionFieldProperty,
    ) : CdkObject(cdkObject), CategoricalDimensionFieldProperty {
      override fun column(): Any = unwrap(this).getColumn()

      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

      override fun hierarchyId(): String? = unwrap(this).getHierarchyId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          CategoricalDimensionFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalDimensionFieldProperty):
          CategoricalDimensionFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CategoricalDimensionFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalDimensionFieldProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalDimensionFieldProperty
    }
  }

  public interface DefaultSectionBasedLayoutConfigurationProperty {
    public fun canvasSizeOptions(): Any

    @CdkDslMarker
    public interface Builder {
      public fun canvasSizeOptions(canvasSizeOptions: IResolvable)

      public fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("361726cf1d4ddb690c7600fd3c7800fec28ed7cab319d0410d4279d23eb627b1")
      public
          fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultSectionBasedLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultSectionBasedLayoutConfigurationProperty.builder()

      override fun canvasSizeOptions(canvasSizeOptions: IResolvable) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(IResolvable::unwrap))
      }

      override
          fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(SectionBasedLayoutCanvasSizeOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("361726cf1d4ddb690c7600fd3c7800fec28ed7cab319d0410d4279d23eb627b1")
      override
          fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit = canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty(canvasSizeOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultSectionBasedLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultSectionBasedLayoutConfigurationProperty,
    ) : CdkObject(cdkObject), DefaultSectionBasedLayoutConfigurationProperty {
      override fun canvasSizeOptions(): Any = unwrap(this).getCanvasSizeOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DefaultSectionBasedLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultSectionBasedLayoutConfigurationProperty):
          DefaultSectionBasedLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DefaultSectionBasedLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultSectionBasedLayoutConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultSectionBasedLayoutConfigurationProperty
    }
  }

  public interface AnalysisDefaultsProperty {
    public fun defaultNewSheetConfiguration(): Any

    @CdkDslMarker
    public interface Builder {
      public fun defaultNewSheetConfiguration(defaultNewSheetConfiguration: IResolvable)

      public
          fun defaultNewSheetConfiguration(defaultNewSheetConfiguration: DefaultNewSheetConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4918a131423c50ab626f87986a322419a50bf024ab384eb73d94116a985f633f")
      public
          fun defaultNewSheetConfiguration(defaultNewSheetConfiguration: DefaultNewSheetConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AnalysisDefaultsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AnalysisDefaultsProperty.builder()

      override fun defaultNewSheetConfiguration(defaultNewSheetConfiguration: IResolvable) {
        cdkBuilder.defaultNewSheetConfiguration(defaultNewSheetConfiguration.let(IResolvable::unwrap))
      }

      override
          fun defaultNewSheetConfiguration(defaultNewSheetConfiguration: DefaultNewSheetConfigurationProperty) {
        cdkBuilder.defaultNewSheetConfiguration(defaultNewSheetConfiguration.let(DefaultNewSheetConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4918a131423c50ab626f87986a322419a50bf024ab384eb73d94116a985f633f")
      override
          fun defaultNewSheetConfiguration(defaultNewSheetConfiguration: DefaultNewSheetConfigurationProperty.Builder.() -> Unit):
          Unit =
          defaultNewSheetConfiguration(DefaultNewSheetConfigurationProperty(defaultNewSheetConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AnalysisDefaultsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AnalysisDefaultsProperty,
    ) : CdkObject(cdkObject), AnalysisDefaultsProperty {
      override fun defaultNewSheetConfiguration(): Any =
          unwrap(this).getDefaultNewSheetConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AnalysisDefaultsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AnalysisDefaultsProperty):
          AnalysisDefaultsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AnalysisDefaultsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AnalysisDefaultsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AnalysisDefaultsProperty
    }
  }

  public interface KPIOptionsProperty {
    public fun comparison(): Any? = unwrap(this).getComparison()

    public fun primaryValueDisplayType(): String? = unwrap(this).getPrimaryValueDisplayType()

    public fun primaryValueFontConfiguration(): Any? =
        unwrap(this).getPrimaryValueFontConfiguration()

    public fun progressBar(): Any? = unwrap(this).getProgressBar()

    public fun secondaryValue(): Any? = unwrap(this).getSecondaryValue()

    public fun secondaryValueFontConfiguration(): Any? =
        unwrap(this).getSecondaryValueFontConfiguration()

    public fun sparkline(): Any? = unwrap(this).getSparkline()

    public fun trendArrows(): Any? = unwrap(this).getTrendArrows()

    public fun visualLayoutOptions(): Any? = unwrap(this).getVisualLayoutOptions()

    @CdkDslMarker
    public interface Builder {
      public fun comparison(comparison: IResolvable)

      public fun comparison(comparison: ComparisonConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("69f315534df98931b1441706ba78f080b894f767a7a1d597b246906aa183c7f4")
      public fun comparison(comparison: ComparisonConfigurationProperty.Builder.() -> Unit)

      public fun primaryValueDisplayType(primaryValueDisplayType: String)

      public fun primaryValueFontConfiguration(primaryValueFontConfiguration: IResolvable)

      public
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("668857f64c014bf8949dbd07747ac33a23912c0dbf339491e8bad779ffb0585d")
      public
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      public fun progressBar(progressBar: IResolvable)

      public fun progressBar(progressBar: ProgressBarOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0a8028007519f312fe0f464dc53409b7af3938ae0c219a1ac508eda212a1f293")
      public fun progressBar(progressBar: ProgressBarOptionsProperty.Builder.() -> Unit)

      public fun secondaryValue(secondaryValue: IResolvable)

      public fun secondaryValue(secondaryValue: SecondaryValueOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8f580bf357d36ce55043ecfb8110c3dc7ba2f92e5ab11e19f53d61dbf05530c9")
      public fun secondaryValue(secondaryValue: SecondaryValueOptionsProperty.Builder.() -> Unit)

      public fun secondaryValueFontConfiguration(secondaryValueFontConfiguration: IResolvable)

      public
          fun secondaryValueFontConfiguration(secondaryValueFontConfiguration: FontConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f3a27929532462b4b366dab5c6d6171597e69e336a7456282c8eefc9c4936f8a")
      public
          fun secondaryValueFontConfiguration(secondaryValueFontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      public fun sparkline(sparkline: IResolvable)

      public fun sparkline(sparkline: KPISparklineOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2dd49f9fb5635009c7eef91902f52d2333ad622e7aefe866680cc6b4edfef05")
      public fun sparkline(sparkline: KPISparklineOptionsProperty.Builder.() -> Unit)

      public fun trendArrows(trendArrows: IResolvable)

      public fun trendArrows(trendArrows: TrendArrowOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47d416f5d71e8cc47a11cbe50998d7ff27edf4d16db4b0f5fc197d47a9089119")
      public fun trendArrows(trendArrows: TrendArrowOptionsProperty.Builder.() -> Unit)

      public fun visualLayoutOptions(visualLayoutOptions: IResolvable)

      public fun visualLayoutOptions(visualLayoutOptions: KPIVisualLayoutOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d6b6df0ef865fbe8f719bdba090362d336351678f0d117a8ff4e7e3a013e6bec")
      public
          fun visualLayoutOptions(visualLayoutOptions: KPIVisualLayoutOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIOptionsProperty.builder()

      override fun comparison(comparison: IResolvable) {
        cdkBuilder.comparison(comparison.let(IResolvable::unwrap))
      }

      override fun comparison(comparison: ComparisonConfigurationProperty) {
        cdkBuilder.comparison(comparison.let(ComparisonConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("69f315534df98931b1441706ba78f080b894f767a7a1d597b246906aa183c7f4")
      override fun comparison(comparison: ComparisonConfigurationProperty.Builder.() -> Unit): Unit
          = comparison(ComparisonConfigurationProperty(comparison))

      override fun primaryValueDisplayType(primaryValueDisplayType: String) {
        cdkBuilder.primaryValueDisplayType(primaryValueDisplayType)
      }

      override fun primaryValueFontConfiguration(primaryValueFontConfiguration: IResolvable) {
        cdkBuilder.primaryValueFontConfiguration(primaryValueFontConfiguration.let(IResolvable::unwrap))
      }

      override
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty) {
        cdkBuilder.primaryValueFontConfiguration(primaryValueFontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("668857f64c014bf8949dbd07747ac33a23912c0dbf339491e8bad779ffb0585d")
      override
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit =
          primaryValueFontConfiguration(FontConfigurationProperty(primaryValueFontConfiguration))

      override fun progressBar(progressBar: IResolvable) {
        cdkBuilder.progressBar(progressBar.let(IResolvable::unwrap))
      }

      override fun progressBar(progressBar: ProgressBarOptionsProperty) {
        cdkBuilder.progressBar(progressBar.let(ProgressBarOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0a8028007519f312fe0f464dc53409b7af3938ae0c219a1ac508eda212a1f293")
      override fun progressBar(progressBar: ProgressBarOptionsProperty.Builder.() -> Unit): Unit =
          progressBar(ProgressBarOptionsProperty(progressBar))

      override fun secondaryValue(secondaryValue: IResolvable) {
        cdkBuilder.secondaryValue(secondaryValue.let(IResolvable::unwrap))
      }

      override fun secondaryValue(secondaryValue: SecondaryValueOptionsProperty) {
        cdkBuilder.secondaryValue(secondaryValue.let(SecondaryValueOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8f580bf357d36ce55043ecfb8110c3dc7ba2f92e5ab11e19f53d61dbf05530c9")
      override fun secondaryValue(secondaryValue: SecondaryValueOptionsProperty.Builder.() -> Unit):
          Unit = secondaryValue(SecondaryValueOptionsProperty(secondaryValue))

      override fun secondaryValueFontConfiguration(secondaryValueFontConfiguration: IResolvable) {
        cdkBuilder.secondaryValueFontConfiguration(secondaryValueFontConfiguration.let(IResolvable::unwrap))
      }

      override
          fun secondaryValueFontConfiguration(secondaryValueFontConfiguration: FontConfigurationProperty) {
        cdkBuilder.secondaryValueFontConfiguration(secondaryValueFontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f3a27929532462b4b366dab5c6d6171597e69e336a7456282c8eefc9c4936f8a")
      override
          fun secondaryValueFontConfiguration(secondaryValueFontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit =
          secondaryValueFontConfiguration(FontConfigurationProperty(secondaryValueFontConfiguration))

      override fun sparkline(sparkline: IResolvable) {
        cdkBuilder.sparkline(sparkline.let(IResolvable::unwrap))
      }

      override fun sparkline(sparkline: KPISparklineOptionsProperty) {
        cdkBuilder.sparkline(sparkline.let(KPISparklineOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2dd49f9fb5635009c7eef91902f52d2333ad622e7aefe866680cc6b4edfef05")
      override fun sparkline(sparkline: KPISparklineOptionsProperty.Builder.() -> Unit): Unit =
          sparkline(KPISparklineOptionsProperty(sparkline))

      override fun trendArrows(trendArrows: IResolvable) {
        cdkBuilder.trendArrows(trendArrows.let(IResolvable::unwrap))
      }

      override fun trendArrows(trendArrows: TrendArrowOptionsProperty) {
        cdkBuilder.trendArrows(trendArrows.let(TrendArrowOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47d416f5d71e8cc47a11cbe50998d7ff27edf4d16db4b0f5fc197d47a9089119")
      override fun trendArrows(trendArrows: TrendArrowOptionsProperty.Builder.() -> Unit): Unit =
          trendArrows(TrendArrowOptionsProperty(trendArrows))

      override fun visualLayoutOptions(visualLayoutOptions: IResolvable) {
        cdkBuilder.visualLayoutOptions(visualLayoutOptions.let(IResolvable::unwrap))
      }

      override fun visualLayoutOptions(visualLayoutOptions: KPIVisualLayoutOptionsProperty) {
        cdkBuilder.visualLayoutOptions(visualLayoutOptions.let(KPIVisualLayoutOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d6b6df0ef865fbe8f719bdba090362d336351678f0d117a8ff4e7e3a013e6bec")
      override
          fun visualLayoutOptions(visualLayoutOptions: KPIVisualLayoutOptionsProperty.Builder.() -> Unit):
          Unit = visualLayoutOptions(KPIVisualLayoutOptionsProperty(visualLayoutOptions))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.KPIOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIOptionsProperty,
    ) : CdkObject(cdkObject), KPIOptionsProperty {
      override fun comparison(): Any? = unwrap(this).getComparison()

      override fun primaryValueDisplayType(): String? = unwrap(this).getPrimaryValueDisplayType()

      override fun primaryValueFontConfiguration(): Any? =
          unwrap(this).getPrimaryValueFontConfiguration()

      override fun progressBar(): Any? = unwrap(this).getProgressBar()

      override fun secondaryValue(): Any? = unwrap(this).getSecondaryValue()

      override fun secondaryValueFontConfiguration(): Any? =
          unwrap(this).getSecondaryValueFontConfiguration()

      override fun sparkline(): Any? = unwrap(this).getSparkline()

      override fun trendArrows(): Any? = unwrap(this).getTrendArrows()

      override fun visualLayoutOptions(): Any? = unwrap(this).getVisualLayoutOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): KPIOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPIOptionsProperty):
          KPIOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIOptionsProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIOptionsProperty
    }
  }

  public interface DateTimeValueWhenUnsetConfigurationProperty {
    public fun customValue(): String? = unwrap(this).getCustomValue()

    public fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()

    @CdkDslMarker
    public interface Builder {
      public fun customValue(customValue: String)

      public fun valueWhenUnsetOption(valueWhenUnsetOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeValueWhenUnsetConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeValueWhenUnsetConfigurationProperty.builder()

      override fun customValue(customValue: String) {
        cdkBuilder.customValue(customValue)
      }

      override fun valueWhenUnsetOption(valueWhenUnsetOption: String) {
        cdkBuilder.valueWhenUnsetOption(valueWhenUnsetOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeValueWhenUnsetConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeValueWhenUnsetConfigurationProperty,
    ) : CdkObject(cdkObject), DateTimeValueWhenUnsetConfigurationProperty {
      override fun customValue(): String? = unwrap(this).getCustomValue()

      override fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DateTimeValueWhenUnsetConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeValueWhenUnsetConfigurationProperty):
          DateTimeValueWhenUnsetConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimeValueWhenUnsetConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeValueWhenUnsetConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeValueWhenUnsetConfigurationProperty
    }
  }

  public interface VisualProperty {
    public fun barChartVisual(): Any? = unwrap(this).getBarChartVisual()

    public fun boxPlotVisual(): Any? = unwrap(this).getBoxPlotVisual()

    public fun comboChartVisual(): Any? = unwrap(this).getComboChartVisual()

    public fun customContentVisual(): Any? = unwrap(this).getCustomContentVisual()

    public fun emptyVisual(): Any? = unwrap(this).getEmptyVisual()

    public fun filledMapVisual(): Any? = unwrap(this).getFilledMapVisual()

    public fun funnelChartVisual(): Any? = unwrap(this).getFunnelChartVisual()

    public fun gaugeChartVisual(): Any? = unwrap(this).getGaugeChartVisual()

    public fun geospatialMapVisual(): Any? = unwrap(this).getGeospatialMapVisual()

    public fun heatMapVisual(): Any? = unwrap(this).getHeatMapVisual()

    public fun histogramVisual(): Any? = unwrap(this).getHistogramVisual()

    public fun insightVisual(): Any? = unwrap(this).getInsightVisual()

    public fun kpiVisual(): Any? = unwrap(this).getKpiVisual()

    public fun lineChartVisual(): Any? = unwrap(this).getLineChartVisual()

    public fun pieChartVisual(): Any? = unwrap(this).getPieChartVisual()

    public fun pivotTableVisual(): Any? = unwrap(this).getPivotTableVisual()

    public fun radarChartVisual(): Any? = unwrap(this).getRadarChartVisual()

    public fun sankeyDiagramVisual(): Any? = unwrap(this).getSankeyDiagramVisual()

    public fun scatterPlotVisual(): Any? = unwrap(this).getScatterPlotVisual()

    public fun tableVisual(): Any? = unwrap(this).getTableVisual()

    public fun treeMapVisual(): Any? = unwrap(this).getTreeMapVisual()

    public fun waterfallVisual(): Any? = unwrap(this).getWaterfallVisual()

    public fun wordCloudVisual(): Any? = unwrap(this).getWordCloudVisual()

    @CdkDslMarker
    public interface Builder {
      public fun barChartVisual(barChartVisual: IResolvable)

      public fun barChartVisual(barChartVisual: BarChartVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f1d33423003bf04729cd8416bd5c0a3c77bf051f7e48a90a49bbded9cb2b5d07")
      public fun barChartVisual(barChartVisual: BarChartVisualProperty.Builder.() -> Unit)

      public fun boxPlotVisual(boxPlotVisual: IResolvable)

      public fun boxPlotVisual(boxPlotVisual: BoxPlotVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f94bc2e4e72250ebcc34556df9d6e75f1ca3c8d9197d6aadf76c7c1d904dfcc")
      public fun boxPlotVisual(boxPlotVisual: BoxPlotVisualProperty.Builder.() -> Unit)

      public fun comboChartVisual(comboChartVisual: IResolvable)

      public fun comboChartVisual(comboChartVisual: ComboChartVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e480368f6aa4a12092ad4b4ca6234d9a06002fa7d40360f70021ffb01d14001e")
      public fun comboChartVisual(comboChartVisual: ComboChartVisualProperty.Builder.() -> Unit)

      public fun customContentVisual(customContentVisual: IResolvable)

      public fun customContentVisual(customContentVisual: CustomContentVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3137c4fd8f325cad1412cca00f0764f3707bb76ddcb3d02eb72a021f865cefe9")
      public
          fun customContentVisual(customContentVisual: CustomContentVisualProperty.Builder.() -> Unit)

      public fun emptyVisual(emptyVisual: IResolvable)

      public fun emptyVisual(emptyVisual: EmptyVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b115c44628badc394e35649138602e03d7884ee166618bdadfe501cdbb7a8633")
      public fun emptyVisual(emptyVisual: EmptyVisualProperty.Builder.() -> Unit)

      public fun filledMapVisual(filledMapVisual: IResolvable)

      public fun filledMapVisual(filledMapVisual: FilledMapVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a30252ca823180bacb80944df4f2c769f3c742a1afb8f9daddc3e19f446e6085")
      public fun filledMapVisual(filledMapVisual: FilledMapVisualProperty.Builder.() -> Unit)

      public fun funnelChartVisual(funnelChartVisual: IResolvable)

      public fun funnelChartVisual(funnelChartVisual: FunnelChartVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c5b7c5da6f152d897227db19bfec55e2c3858fc3e1809f91a74fc275e42fbc2d")
      public fun funnelChartVisual(funnelChartVisual: FunnelChartVisualProperty.Builder.() -> Unit)

      public fun gaugeChartVisual(gaugeChartVisual: IResolvable)

      public fun gaugeChartVisual(gaugeChartVisual: GaugeChartVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6598e5d6ef1a61225823747d436c9afec01e305be47e8127602c9e743e63ff14")
      public fun gaugeChartVisual(gaugeChartVisual: GaugeChartVisualProperty.Builder.() -> Unit)

      public fun geospatialMapVisual(geospatialMapVisual: IResolvable)

      public fun geospatialMapVisual(geospatialMapVisual: GeospatialMapVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("45b146578781a17498f12dafcdae0dc000ac66767323ba5d9868d50f1bc05620")
      public
          fun geospatialMapVisual(geospatialMapVisual: GeospatialMapVisualProperty.Builder.() -> Unit)

      public fun heatMapVisual(heatMapVisual: IResolvable)

      public fun heatMapVisual(heatMapVisual: HeatMapVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fb3963081edb0b5f57b197f6cd63469a1b3a1e2f383cbd40e2837cbd4d362a64")
      public fun heatMapVisual(heatMapVisual: HeatMapVisualProperty.Builder.() -> Unit)

      public fun histogramVisual(histogramVisual: IResolvable)

      public fun histogramVisual(histogramVisual: HistogramVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e0787a4cbd194c6755f9de8fbd069b95d01aa105f58a89edd3ae4e99bed15168")
      public fun histogramVisual(histogramVisual: HistogramVisualProperty.Builder.() -> Unit)

      public fun insightVisual(insightVisual: IResolvable)

      public fun insightVisual(insightVisual: InsightVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8d2fae6d25f67cbec4aedb24dcb5b408daf298aaca73afec1cffb6c3ec5765ce")
      public fun insightVisual(insightVisual: InsightVisualProperty.Builder.() -> Unit)

      public fun kpiVisual(kpiVisual: IResolvable)

      public fun kpiVisual(kpiVisual: KPIVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eb6acb313f0c3bb112e890c392413819be6c40751a36a424847071da0162c110")
      public fun kpiVisual(kpiVisual: KPIVisualProperty.Builder.() -> Unit)

      public fun lineChartVisual(lineChartVisual: IResolvable)

      public fun lineChartVisual(lineChartVisual: LineChartVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d4d94e392aacdb4cde5272ece53b15cb3d4eb99875edb3e6313024f02930b940")
      public fun lineChartVisual(lineChartVisual: LineChartVisualProperty.Builder.() -> Unit)

      public fun pieChartVisual(pieChartVisual: IResolvable)

      public fun pieChartVisual(pieChartVisual: PieChartVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2ffc681e885063005f6d5b74f0ad4ee2d8dba1de535bd5110d78eb2077dfcbf0")
      public fun pieChartVisual(pieChartVisual: PieChartVisualProperty.Builder.() -> Unit)

      public fun pivotTableVisual(pivotTableVisual: IResolvable)

      public fun pivotTableVisual(pivotTableVisual: PivotTableVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("af40d77d2aacd696f286edb59b1ea69012321fb5b7ad68adb3ea3e3976e4cfd6")
      public fun pivotTableVisual(pivotTableVisual: PivotTableVisualProperty.Builder.() -> Unit)

      public fun radarChartVisual(radarChartVisual: IResolvable)

      public fun radarChartVisual(radarChartVisual: RadarChartVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f4b49f7985358e2bb79c79200de78853cad1c404ca1bb85ec02dea51f8c542a9")
      public fun radarChartVisual(radarChartVisual: RadarChartVisualProperty.Builder.() -> Unit)

      public fun sankeyDiagramVisual(sankeyDiagramVisual: IResolvable)

      public fun sankeyDiagramVisual(sankeyDiagramVisual: SankeyDiagramVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("52a3852dd4f12e47d8b66301743124a6f15b9eda90d1107c324c46fdb5908024")
      public
          fun sankeyDiagramVisual(sankeyDiagramVisual: SankeyDiagramVisualProperty.Builder.() -> Unit)

      public fun scatterPlotVisual(scatterPlotVisual: IResolvable)

      public fun scatterPlotVisual(scatterPlotVisual: ScatterPlotVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d6b3048903f05881f32cd7cb47d9bc1a013f3ab7f45792f11ee6b210ae93d9b8")
      public fun scatterPlotVisual(scatterPlotVisual: ScatterPlotVisualProperty.Builder.() -> Unit)

      public fun tableVisual(tableVisual: IResolvable)

      public fun tableVisual(tableVisual: TableVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b0e551c8f24166b2605f8689f4136acbebacb3f30bd598250f810132e7fbc87")
      public fun tableVisual(tableVisual: TableVisualProperty.Builder.() -> Unit)

      public fun treeMapVisual(treeMapVisual: IResolvable)

      public fun treeMapVisual(treeMapVisual: TreeMapVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("db475a73beec38c8f75866924adc3d03563e0397438d65ca4fd77e38eadcd154")
      public fun treeMapVisual(treeMapVisual: TreeMapVisualProperty.Builder.() -> Unit)

      public fun waterfallVisual(waterfallVisual: IResolvable)

      public fun waterfallVisual(waterfallVisual: WaterfallVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1c18ca236a25be9a658c2571ceb931d353b457179517a0ae93a3796dc1841f1c")
      public fun waterfallVisual(waterfallVisual: WaterfallVisualProperty.Builder.() -> Unit)

      public fun wordCloudVisual(wordCloudVisual: IResolvable)

      public fun wordCloudVisual(wordCloudVisual: WordCloudVisualProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f8e4c94adc7353d15bb938e119e3a952487adda3a02a9f26d5727d9f68a375d7")
      public fun wordCloudVisual(wordCloudVisual: WordCloudVisualProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualProperty.builder()

      override fun barChartVisual(barChartVisual: IResolvable) {
        cdkBuilder.barChartVisual(barChartVisual.let(IResolvable::unwrap))
      }

      override fun barChartVisual(barChartVisual: BarChartVisualProperty) {
        cdkBuilder.barChartVisual(barChartVisual.let(BarChartVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f1d33423003bf04729cd8416bd5c0a3c77bf051f7e48a90a49bbded9cb2b5d07")
      override fun barChartVisual(barChartVisual: BarChartVisualProperty.Builder.() -> Unit): Unit =
          barChartVisual(BarChartVisualProperty(barChartVisual))

      override fun boxPlotVisual(boxPlotVisual: IResolvable) {
        cdkBuilder.boxPlotVisual(boxPlotVisual.let(IResolvable::unwrap))
      }

      override fun boxPlotVisual(boxPlotVisual: BoxPlotVisualProperty) {
        cdkBuilder.boxPlotVisual(boxPlotVisual.let(BoxPlotVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f94bc2e4e72250ebcc34556df9d6e75f1ca3c8d9197d6aadf76c7c1d904dfcc")
      override fun boxPlotVisual(boxPlotVisual: BoxPlotVisualProperty.Builder.() -> Unit): Unit =
          boxPlotVisual(BoxPlotVisualProperty(boxPlotVisual))

      override fun comboChartVisual(comboChartVisual: IResolvable) {
        cdkBuilder.comboChartVisual(comboChartVisual.let(IResolvable::unwrap))
      }

      override fun comboChartVisual(comboChartVisual: ComboChartVisualProperty) {
        cdkBuilder.comboChartVisual(comboChartVisual.let(ComboChartVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e480368f6aa4a12092ad4b4ca6234d9a06002fa7d40360f70021ffb01d14001e")
      override fun comboChartVisual(comboChartVisual: ComboChartVisualProperty.Builder.() -> Unit):
          Unit = comboChartVisual(ComboChartVisualProperty(comboChartVisual))

      override fun customContentVisual(customContentVisual: IResolvable) {
        cdkBuilder.customContentVisual(customContentVisual.let(IResolvable::unwrap))
      }

      override fun customContentVisual(customContentVisual: CustomContentVisualProperty) {
        cdkBuilder.customContentVisual(customContentVisual.let(CustomContentVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3137c4fd8f325cad1412cca00f0764f3707bb76ddcb3d02eb72a021f865cefe9")
      override
          fun customContentVisual(customContentVisual: CustomContentVisualProperty.Builder.() -> Unit):
          Unit = customContentVisual(CustomContentVisualProperty(customContentVisual))

      override fun emptyVisual(emptyVisual: IResolvable) {
        cdkBuilder.emptyVisual(emptyVisual.let(IResolvable::unwrap))
      }

      override fun emptyVisual(emptyVisual: EmptyVisualProperty) {
        cdkBuilder.emptyVisual(emptyVisual.let(EmptyVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b115c44628badc394e35649138602e03d7884ee166618bdadfe501cdbb7a8633")
      override fun emptyVisual(emptyVisual: EmptyVisualProperty.Builder.() -> Unit): Unit =
          emptyVisual(EmptyVisualProperty(emptyVisual))

      override fun filledMapVisual(filledMapVisual: IResolvable) {
        cdkBuilder.filledMapVisual(filledMapVisual.let(IResolvable::unwrap))
      }

      override fun filledMapVisual(filledMapVisual: FilledMapVisualProperty) {
        cdkBuilder.filledMapVisual(filledMapVisual.let(FilledMapVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a30252ca823180bacb80944df4f2c769f3c742a1afb8f9daddc3e19f446e6085")
      override fun filledMapVisual(filledMapVisual: FilledMapVisualProperty.Builder.() -> Unit):
          Unit = filledMapVisual(FilledMapVisualProperty(filledMapVisual))

      override fun funnelChartVisual(funnelChartVisual: IResolvable) {
        cdkBuilder.funnelChartVisual(funnelChartVisual.let(IResolvable::unwrap))
      }

      override fun funnelChartVisual(funnelChartVisual: FunnelChartVisualProperty) {
        cdkBuilder.funnelChartVisual(funnelChartVisual.let(FunnelChartVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c5b7c5da6f152d897227db19bfec55e2c3858fc3e1809f91a74fc275e42fbc2d")
      override
          fun funnelChartVisual(funnelChartVisual: FunnelChartVisualProperty.Builder.() -> Unit):
          Unit = funnelChartVisual(FunnelChartVisualProperty(funnelChartVisual))

      override fun gaugeChartVisual(gaugeChartVisual: IResolvable) {
        cdkBuilder.gaugeChartVisual(gaugeChartVisual.let(IResolvable::unwrap))
      }

      override fun gaugeChartVisual(gaugeChartVisual: GaugeChartVisualProperty) {
        cdkBuilder.gaugeChartVisual(gaugeChartVisual.let(GaugeChartVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6598e5d6ef1a61225823747d436c9afec01e305be47e8127602c9e743e63ff14")
      override fun gaugeChartVisual(gaugeChartVisual: GaugeChartVisualProperty.Builder.() -> Unit):
          Unit = gaugeChartVisual(GaugeChartVisualProperty(gaugeChartVisual))

      override fun geospatialMapVisual(geospatialMapVisual: IResolvable) {
        cdkBuilder.geospatialMapVisual(geospatialMapVisual.let(IResolvable::unwrap))
      }

      override fun geospatialMapVisual(geospatialMapVisual: GeospatialMapVisualProperty) {
        cdkBuilder.geospatialMapVisual(geospatialMapVisual.let(GeospatialMapVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("45b146578781a17498f12dafcdae0dc000ac66767323ba5d9868d50f1bc05620")
      override
          fun geospatialMapVisual(geospatialMapVisual: GeospatialMapVisualProperty.Builder.() -> Unit):
          Unit = geospatialMapVisual(GeospatialMapVisualProperty(geospatialMapVisual))

      override fun heatMapVisual(heatMapVisual: IResolvable) {
        cdkBuilder.heatMapVisual(heatMapVisual.let(IResolvable::unwrap))
      }

      override fun heatMapVisual(heatMapVisual: HeatMapVisualProperty) {
        cdkBuilder.heatMapVisual(heatMapVisual.let(HeatMapVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fb3963081edb0b5f57b197f6cd63469a1b3a1e2f383cbd40e2837cbd4d362a64")
      override fun heatMapVisual(heatMapVisual: HeatMapVisualProperty.Builder.() -> Unit): Unit =
          heatMapVisual(HeatMapVisualProperty(heatMapVisual))

      override fun histogramVisual(histogramVisual: IResolvable) {
        cdkBuilder.histogramVisual(histogramVisual.let(IResolvable::unwrap))
      }

      override fun histogramVisual(histogramVisual: HistogramVisualProperty) {
        cdkBuilder.histogramVisual(histogramVisual.let(HistogramVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e0787a4cbd194c6755f9de8fbd069b95d01aa105f58a89edd3ae4e99bed15168")
      override fun histogramVisual(histogramVisual: HistogramVisualProperty.Builder.() -> Unit):
          Unit = histogramVisual(HistogramVisualProperty(histogramVisual))

      override fun insightVisual(insightVisual: IResolvable) {
        cdkBuilder.insightVisual(insightVisual.let(IResolvable::unwrap))
      }

      override fun insightVisual(insightVisual: InsightVisualProperty) {
        cdkBuilder.insightVisual(insightVisual.let(InsightVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8d2fae6d25f67cbec4aedb24dcb5b408daf298aaca73afec1cffb6c3ec5765ce")
      override fun insightVisual(insightVisual: InsightVisualProperty.Builder.() -> Unit): Unit =
          insightVisual(InsightVisualProperty(insightVisual))

      override fun kpiVisual(kpiVisual: IResolvable) {
        cdkBuilder.kpiVisual(kpiVisual.let(IResolvable::unwrap))
      }

      override fun kpiVisual(kpiVisual: KPIVisualProperty) {
        cdkBuilder.kpiVisual(kpiVisual.let(KPIVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eb6acb313f0c3bb112e890c392413819be6c40751a36a424847071da0162c110")
      override fun kpiVisual(kpiVisual: KPIVisualProperty.Builder.() -> Unit): Unit =
          kpiVisual(KPIVisualProperty(kpiVisual))

      override fun lineChartVisual(lineChartVisual: IResolvable) {
        cdkBuilder.lineChartVisual(lineChartVisual.let(IResolvable::unwrap))
      }

      override fun lineChartVisual(lineChartVisual: LineChartVisualProperty) {
        cdkBuilder.lineChartVisual(lineChartVisual.let(LineChartVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d4d94e392aacdb4cde5272ece53b15cb3d4eb99875edb3e6313024f02930b940")
      override fun lineChartVisual(lineChartVisual: LineChartVisualProperty.Builder.() -> Unit):
          Unit = lineChartVisual(LineChartVisualProperty(lineChartVisual))

      override fun pieChartVisual(pieChartVisual: IResolvable) {
        cdkBuilder.pieChartVisual(pieChartVisual.let(IResolvable::unwrap))
      }

      override fun pieChartVisual(pieChartVisual: PieChartVisualProperty) {
        cdkBuilder.pieChartVisual(pieChartVisual.let(PieChartVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2ffc681e885063005f6d5b74f0ad4ee2d8dba1de535bd5110d78eb2077dfcbf0")
      override fun pieChartVisual(pieChartVisual: PieChartVisualProperty.Builder.() -> Unit): Unit =
          pieChartVisual(PieChartVisualProperty(pieChartVisual))

      override fun pivotTableVisual(pivotTableVisual: IResolvable) {
        cdkBuilder.pivotTableVisual(pivotTableVisual.let(IResolvable::unwrap))
      }

      override fun pivotTableVisual(pivotTableVisual: PivotTableVisualProperty) {
        cdkBuilder.pivotTableVisual(pivotTableVisual.let(PivotTableVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("af40d77d2aacd696f286edb59b1ea69012321fb5b7ad68adb3ea3e3976e4cfd6")
      override fun pivotTableVisual(pivotTableVisual: PivotTableVisualProperty.Builder.() -> Unit):
          Unit = pivotTableVisual(PivotTableVisualProperty(pivotTableVisual))

      override fun radarChartVisual(radarChartVisual: IResolvable) {
        cdkBuilder.radarChartVisual(radarChartVisual.let(IResolvable::unwrap))
      }

      override fun radarChartVisual(radarChartVisual: RadarChartVisualProperty) {
        cdkBuilder.radarChartVisual(radarChartVisual.let(RadarChartVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f4b49f7985358e2bb79c79200de78853cad1c404ca1bb85ec02dea51f8c542a9")
      override fun radarChartVisual(radarChartVisual: RadarChartVisualProperty.Builder.() -> Unit):
          Unit = radarChartVisual(RadarChartVisualProperty(radarChartVisual))

      override fun sankeyDiagramVisual(sankeyDiagramVisual: IResolvable) {
        cdkBuilder.sankeyDiagramVisual(sankeyDiagramVisual.let(IResolvable::unwrap))
      }

      override fun sankeyDiagramVisual(sankeyDiagramVisual: SankeyDiagramVisualProperty) {
        cdkBuilder.sankeyDiagramVisual(sankeyDiagramVisual.let(SankeyDiagramVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("52a3852dd4f12e47d8b66301743124a6f15b9eda90d1107c324c46fdb5908024")
      override
          fun sankeyDiagramVisual(sankeyDiagramVisual: SankeyDiagramVisualProperty.Builder.() -> Unit):
          Unit = sankeyDiagramVisual(SankeyDiagramVisualProperty(sankeyDiagramVisual))

      override fun scatterPlotVisual(scatterPlotVisual: IResolvable) {
        cdkBuilder.scatterPlotVisual(scatterPlotVisual.let(IResolvable::unwrap))
      }

      override fun scatterPlotVisual(scatterPlotVisual: ScatterPlotVisualProperty) {
        cdkBuilder.scatterPlotVisual(scatterPlotVisual.let(ScatterPlotVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d6b3048903f05881f32cd7cb47d9bc1a013f3ab7f45792f11ee6b210ae93d9b8")
      override
          fun scatterPlotVisual(scatterPlotVisual: ScatterPlotVisualProperty.Builder.() -> Unit):
          Unit = scatterPlotVisual(ScatterPlotVisualProperty(scatterPlotVisual))

      override fun tableVisual(tableVisual: IResolvable) {
        cdkBuilder.tableVisual(tableVisual.let(IResolvable::unwrap))
      }

      override fun tableVisual(tableVisual: TableVisualProperty) {
        cdkBuilder.tableVisual(tableVisual.let(TableVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b0e551c8f24166b2605f8689f4136acbebacb3f30bd598250f810132e7fbc87")
      override fun tableVisual(tableVisual: TableVisualProperty.Builder.() -> Unit): Unit =
          tableVisual(TableVisualProperty(tableVisual))

      override fun treeMapVisual(treeMapVisual: IResolvable) {
        cdkBuilder.treeMapVisual(treeMapVisual.let(IResolvable::unwrap))
      }

      override fun treeMapVisual(treeMapVisual: TreeMapVisualProperty) {
        cdkBuilder.treeMapVisual(treeMapVisual.let(TreeMapVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("db475a73beec38c8f75866924adc3d03563e0397438d65ca4fd77e38eadcd154")
      override fun treeMapVisual(treeMapVisual: TreeMapVisualProperty.Builder.() -> Unit): Unit =
          treeMapVisual(TreeMapVisualProperty(treeMapVisual))

      override fun waterfallVisual(waterfallVisual: IResolvable) {
        cdkBuilder.waterfallVisual(waterfallVisual.let(IResolvable::unwrap))
      }

      override fun waterfallVisual(waterfallVisual: WaterfallVisualProperty) {
        cdkBuilder.waterfallVisual(waterfallVisual.let(WaterfallVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1c18ca236a25be9a658c2571ceb931d353b457179517a0ae93a3796dc1841f1c")
      override fun waterfallVisual(waterfallVisual: WaterfallVisualProperty.Builder.() -> Unit):
          Unit = waterfallVisual(WaterfallVisualProperty(waterfallVisual))

      override fun wordCloudVisual(wordCloudVisual: IResolvable) {
        cdkBuilder.wordCloudVisual(wordCloudVisual.let(IResolvable::unwrap))
      }

      override fun wordCloudVisual(wordCloudVisual: WordCloudVisualProperty) {
        cdkBuilder.wordCloudVisual(wordCloudVisual.let(WordCloudVisualProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f8e4c94adc7353d15bb938e119e3a952487adda3a02a9f26d5727d9f68a375d7")
      override fun wordCloudVisual(wordCloudVisual: WordCloudVisualProperty.Builder.() -> Unit):
          Unit = wordCloudVisual(WordCloudVisualProperty(wordCloudVisual))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.VisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.VisualProperty,
    ) : CdkObject(cdkObject), VisualProperty {
      override fun barChartVisual(): Any? = unwrap(this).getBarChartVisual()

      override fun boxPlotVisual(): Any? = unwrap(this).getBoxPlotVisual()

      override fun comboChartVisual(): Any? = unwrap(this).getComboChartVisual()

      override fun customContentVisual(): Any? = unwrap(this).getCustomContentVisual()

      override fun emptyVisual(): Any? = unwrap(this).getEmptyVisual()

      override fun filledMapVisual(): Any? = unwrap(this).getFilledMapVisual()

      override fun funnelChartVisual(): Any? = unwrap(this).getFunnelChartVisual()

      override fun gaugeChartVisual(): Any? = unwrap(this).getGaugeChartVisual()

      override fun geospatialMapVisual(): Any? = unwrap(this).getGeospatialMapVisual()

      override fun heatMapVisual(): Any? = unwrap(this).getHeatMapVisual()

      override fun histogramVisual(): Any? = unwrap(this).getHistogramVisual()

      override fun insightVisual(): Any? = unwrap(this).getInsightVisual()

      override fun kpiVisual(): Any? = unwrap(this).getKpiVisual()

      override fun lineChartVisual(): Any? = unwrap(this).getLineChartVisual()

      override fun pieChartVisual(): Any? = unwrap(this).getPieChartVisual()

      override fun pivotTableVisual(): Any? = unwrap(this).getPivotTableVisual()

      override fun radarChartVisual(): Any? = unwrap(this).getRadarChartVisual()

      override fun sankeyDiagramVisual(): Any? = unwrap(this).getSankeyDiagramVisual()

      override fun scatterPlotVisual(): Any? = unwrap(this).getScatterPlotVisual()

      override fun tableVisual(): Any? = unwrap(this).getTableVisual()

      override fun treeMapVisual(): Any? = unwrap(this).getTreeMapVisual()

      override fun waterfallVisual(): Any? = unwrap(this).getWaterfallVisual()

      override fun wordCloudVisual(): Any? = unwrap(this).getWordCloudVisual()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): VisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.VisualProperty):
          VisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualProperty
    }
  }

  public interface PivotTableAggregatedFieldWellsProperty {
    public fun columns(): Any? = unwrap(this).getColumns()

    public fun rows(): Any? = unwrap(this).getRows()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun columns(columns: IResolvable)

      public fun columns(columns: List<Any>)

      public fun columns(vararg columns: Any)

      public fun rows(rows: IResolvable)

      public fun rows(rows: List<Any>)

      public fun rows(vararg rows: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableAggregatedFieldWellsProperty.builder()

      override fun columns(columns: IResolvable) {
        cdkBuilder.columns(columns.let(IResolvable::unwrap))
      }

      override fun columns(columns: List<Any>) {
        cdkBuilder.columns(columns)
      }

      override fun columns(vararg columns: Any): Unit = columns(columns.toList())

      override fun rows(rows: IResolvable) {
        cdkBuilder.rows(rows.let(IResolvable::unwrap))
      }

      override fun rows(rows: List<Any>) {
        cdkBuilder.rows(rows)
      }

      override fun rows(vararg rows: Any): Unit = rows(rows.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), PivotTableAggregatedFieldWellsProperty {
      override fun columns(): Any? = unwrap(this).getColumns()

      override fun rows(): Any? = unwrap(this).getRows()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableAggregatedFieldWellsProperty):
          PivotTableAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableAggregatedFieldWellsProperty
    }
  }

  public interface DestinationParameterValueConfigurationProperty {
    public fun customValuesConfiguration(): Any? = unwrap(this).getCustomValuesConfiguration()

    public fun selectAllValueOptions(): String? = unwrap(this).getSelectAllValueOptions()

    public fun sourceColumn(): Any? = unwrap(this).getSourceColumn()

    public fun sourceField(): String? = unwrap(this).getSourceField()

    public fun sourceParameterName(): String? = unwrap(this).getSourceParameterName()

    @CdkDslMarker
    public interface Builder {
      public fun customValuesConfiguration(customValuesConfiguration: IResolvable)

      public
          fun customValuesConfiguration(customValuesConfiguration: CustomValuesConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c5dcf21e03529f21e7625982bbdd85fdf47f0301df120bd42dbd62ab4ef9bdeb")
      public
          fun customValuesConfiguration(customValuesConfiguration: CustomValuesConfigurationProperty.Builder.() -> Unit)

      public fun selectAllValueOptions(selectAllValueOptions: String)

      public fun sourceColumn(sourceColumn: IResolvable)

      public fun sourceColumn(sourceColumn: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0bf598fd0acf4b96f87af4fc1a5fdd8b148a904bb4314b4d00c8167da3dc5f47")
      public fun sourceColumn(sourceColumn: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun sourceField(sourceField: String)

      public fun sourceParameterName(sourceParameterName: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DestinationParameterValueConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DestinationParameterValueConfigurationProperty.builder()

      override fun customValuesConfiguration(customValuesConfiguration: IResolvable) {
        cdkBuilder.customValuesConfiguration(customValuesConfiguration.let(IResolvable::unwrap))
      }

      override
          fun customValuesConfiguration(customValuesConfiguration: CustomValuesConfigurationProperty) {
        cdkBuilder.customValuesConfiguration(customValuesConfiguration.let(CustomValuesConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c5dcf21e03529f21e7625982bbdd85fdf47f0301df120bd42dbd62ab4ef9bdeb")
      override
          fun customValuesConfiguration(customValuesConfiguration: CustomValuesConfigurationProperty.Builder.() -> Unit):
          Unit =
          customValuesConfiguration(CustomValuesConfigurationProperty(customValuesConfiguration))

      override fun selectAllValueOptions(selectAllValueOptions: String) {
        cdkBuilder.selectAllValueOptions(selectAllValueOptions)
      }

      override fun sourceColumn(sourceColumn: IResolvable) {
        cdkBuilder.sourceColumn(sourceColumn.let(IResolvable::unwrap))
      }

      override fun sourceColumn(sourceColumn: ColumnIdentifierProperty) {
        cdkBuilder.sourceColumn(sourceColumn.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0bf598fd0acf4b96f87af4fc1a5fdd8b148a904bb4314b4d00c8167da3dc5f47")
      override fun sourceColumn(sourceColumn: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          sourceColumn(ColumnIdentifierProperty(sourceColumn))

      override fun sourceField(sourceField: String) {
        cdkBuilder.sourceField(sourceField)
      }

      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DestinationParameterValueConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DestinationParameterValueConfigurationProperty,
    ) : CdkObject(cdkObject), DestinationParameterValueConfigurationProperty {
      override fun customValuesConfiguration(): Any? = unwrap(this).getCustomValuesConfiguration()

      override fun selectAllValueOptions(): String? = unwrap(this).getSelectAllValueOptions()

      override fun sourceColumn(): Any? = unwrap(this).getSourceColumn()

      override fun sourceField(): String? = unwrap(this).getSourceField()

      override fun sourceParameterName(): String? = unwrap(this).getSourceParameterName()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DestinationParameterValueConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DestinationParameterValueConfigurationProperty):
          DestinationParameterValueConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DestinationParameterValueConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DestinationParameterValueConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DestinationParameterValueConfigurationProperty
    }
  }

  public interface GradientStopProperty {
    public fun color(): String? = unwrap(this).getColor()

    public fun dataValue(): Number? = unwrap(this).getDataValue()

    public fun gradientOffset(): Number

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)

      public fun dataValue(dataValue: Number)

      public fun gradientOffset(gradientOffset: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GradientStopProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GradientStopProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      override fun dataValue(dataValue: Number) {
        cdkBuilder.dataValue(dataValue)
      }

      override fun gradientOffset(gradientOffset: Number) {
        cdkBuilder.gradientOffset(gradientOffset)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GradientStopProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GradientStopProperty,
    ) : CdkObject(cdkObject), GradientStopProperty {
      override fun color(): String? = unwrap(this).getColor()

      override fun dataValue(): Number? = unwrap(this).getDataValue()

      override fun gradientOffset(): Number = unwrap(this).getGradientOffset()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GradientStopProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GradientStopProperty):
          GradientStopProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GradientStopProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GradientStopProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GradientStopProperty
    }
  }

  public interface ClusterMarkerProperty {
    public fun simpleClusterMarker(): Any? = unwrap(this).getSimpleClusterMarker()

    @CdkDslMarker
    public interface Builder {
      public fun simpleClusterMarker(simpleClusterMarker: IResolvable)

      public fun simpleClusterMarker(simpleClusterMarker: SimpleClusterMarkerProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("224dad9b21b5eeb01c5573eab583348a008dbbc8e083caca6355ca9d5e8d8ae7")
      public
          fun simpleClusterMarker(simpleClusterMarker: SimpleClusterMarkerProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerProperty.builder()

      override fun simpleClusterMarker(simpleClusterMarker: IResolvable) {
        cdkBuilder.simpleClusterMarker(simpleClusterMarker.let(IResolvable::unwrap))
      }

      override fun simpleClusterMarker(simpleClusterMarker: SimpleClusterMarkerProperty) {
        cdkBuilder.simpleClusterMarker(simpleClusterMarker.let(SimpleClusterMarkerProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("224dad9b21b5eeb01c5573eab583348a008dbbc8e083caca6355ca9d5e8d8ae7")
      override
          fun simpleClusterMarker(simpleClusterMarker: SimpleClusterMarkerProperty.Builder.() -> Unit):
          Unit = simpleClusterMarker(SimpleClusterMarkerProperty(simpleClusterMarker))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerProperty,
    ) : CdkObject(cdkObject), ClusterMarkerProperty {
      override fun simpleClusterMarker(): Any? = unwrap(this).getSimpleClusterMarker()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ClusterMarkerProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerProperty):
          ClusterMarkerProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ClusterMarkerProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerProperty
    }
  }

  public interface FormatConfigurationProperty {
    public fun dateTimeFormatConfiguration(): Any? = unwrap(this).getDateTimeFormatConfiguration()

    public fun numberFormatConfiguration(): Any? = unwrap(this).getNumberFormatConfiguration()

    public fun stringFormatConfiguration(): Any? = unwrap(this).getStringFormatConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun dateTimeFormatConfiguration(dateTimeFormatConfiguration: IResolvable)

      public
          fun dateTimeFormatConfiguration(dateTimeFormatConfiguration: DateTimeFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("95272928a05cd43dd3d1cda84413965f6af2c0923a9439f6ba27c0ef4e0486b0")
      public
          fun dateTimeFormatConfiguration(dateTimeFormatConfiguration: DateTimeFormatConfigurationProperty.Builder.() -> Unit)

      public fun numberFormatConfiguration(numberFormatConfiguration: IResolvable)

      public
          fun numberFormatConfiguration(numberFormatConfiguration: NumberFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("103b2ddd6997434240bbafe03ce8c46e3ffe244f353330583078b3eb0fb604b6")
      public
          fun numberFormatConfiguration(numberFormatConfiguration: NumberFormatConfigurationProperty.Builder.() -> Unit)

      public fun stringFormatConfiguration(stringFormatConfiguration: IResolvable)

      public
          fun stringFormatConfiguration(stringFormatConfiguration: StringFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("706a85c8abc06da7645616635058532097214dde1075c234a009c5db79a75831")
      public
          fun stringFormatConfiguration(stringFormatConfiguration: StringFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FormatConfigurationProperty.builder()

      override fun dateTimeFormatConfiguration(dateTimeFormatConfiguration: IResolvable) {
        cdkBuilder.dateTimeFormatConfiguration(dateTimeFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun dateTimeFormatConfiguration(dateTimeFormatConfiguration: DateTimeFormatConfigurationProperty) {
        cdkBuilder.dateTimeFormatConfiguration(dateTimeFormatConfiguration.let(DateTimeFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("95272928a05cd43dd3d1cda84413965f6af2c0923a9439f6ba27c0ef4e0486b0")
      override
          fun dateTimeFormatConfiguration(dateTimeFormatConfiguration: DateTimeFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          dateTimeFormatConfiguration(DateTimeFormatConfigurationProperty(dateTimeFormatConfiguration))

      override fun numberFormatConfiguration(numberFormatConfiguration: IResolvable) {
        cdkBuilder.numberFormatConfiguration(numberFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun numberFormatConfiguration(numberFormatConfiguration: NumberFormatConfigurationProperty) {
        cdkBuilder.numberFormatConfiguration(numberFormatConfiguration.let(NumberFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("103b2ddd6997434240bbafe03ce8c46e3ffe244f353330583078b3eb0fb604b6")
      override
          fun numberFormatConfiguration(numberFormatConfiguration: NumberFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          numberFormatConfiguration(NumberFormatConfigurationProperty(numberFormatConfiguration))

      override fun stringFormatConfiguration(stringFormatConfiguration: IResolvable) {
        cdkBuilder.stringFormatConfiguration(stringFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun stringFormatConfiguration(stringFormatConfiguration: StringFormatConfigurationProperty) {
        cdkBuilder.stringFormatConfiguration(stringFormatConfiguration.let(StringFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("706a85c8abc06da7645616635058532097214dde1075c234a009c5db79a75831")
      override
          fun stringFormatConfiguration(stringFormatConfiguration: StringFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          stringFormatConfiguration(StringFormatConfigurationProperty(stringFormatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FormatConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FormatConfigurationProperty,
    ) : CdkObject(cdkObject), FormatConfigurationProperty {
      override fun dateTimeFormatConfiguration(): Any? =
          unwrap(this).getDateTimeFormatConfiguration()

      override fun numberFormatConfiguration(): Any? = unwrap(this).getNumberFormatConfiguration()

      override fun stringFormatConfiguration(): Any? = unwrap(this).getStringFormatConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FormatConfigurationProperty):
          FormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FormatConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FormatConfigurationProperty
    }
  }

  public interface GaugeChartConfigurationProperty {
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun gaugeChartOptions(): Any? = unwrap(this).getGaugeChartOptions()

    public fun tooltipOptions(): Any? = unwrap(this).getTooltipOptions()

    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    @CdkDslMarker
    public interface Builder {
      public fun dataLabels(dataLabels: IResolvable)

      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("82c37eb498a85633df29d200decf4edd030c39c524664c4c73ad494d4321e3e5")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: GaugeChartFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ca271e8216731d0ec738519993ac20ff8f25a4912f4c0fc48ba6da897ef7c44")
      public fun fieldWells(fieldWells: GaugeChartFieldWellsProperty.Builder.() -> Unit)

      public fun gaugeChartOptions(gaugeChartOptions: IResolvable)

      public fun gaugeChartOptions(gaugeChartOptions: GaugeChartOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b0f2cebe49654ca9d7af9bd019548f90a0688e132cc732159d855e552244862")
      public fun gaugeChartOptions(gaugeChartOptions: GaugeChartOptionsProperty.Builder.() -> Unit)

      public fun tooltipOptions(tooltipOptions: IResolvable)

      public fun tooltipOptions(tooltipOptions: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("31a25f9768ddeaef8d9292cba29816b4a401033a0cacbeff98a20c87bfd2b332")
      public fun tooltipOptions(tooltipOptions: TooltipOptionsProperty.Builder.() -> Unit)

      public fun visualPalette(visualPalette: IResolvable)

      public fun visualPalette(visualPalette: VisualPaletteProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("43b49d7cf361a9df6088344cb495cdf0a47d4f0c4ddaf2a1f5a59acf9b8049f1")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConfigurationProperty.builder()

      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("82c37eb498a85633df29d200decf4edd030c39c524664c4c73ad494d4321e3e5")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: GaugeChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(GaugeChartFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ca271e8216731d0ec738519993ac20ff8f25a4912f4c0fc48ba6da897ef7c44")
      override fun fieldWells(fieldWells: GaugeChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(GaugeChartFieldWellsProperty(fieldWells))

      override fun gaugeChartOptions(gaugeChartOptions: IResolvable) {
        cdkBuilder.gaugeChartOptions(gaugeChartOptions.let(IResolvable::unwrap))
      }

      override fun gaugeChartOptions(gaugeChartOptions: GaugeChartOptionsProperty) {
        cdkBuilder.gaugeChartOptions(gaugeChartOptions.let(GaugeChartOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b0f2cebe49654ca9d7af9bd019548f90a0688e132cc732159d855e552244862")
      override
          fun gaugeChartOptions(gaugeChartOptions: GaugeChartOptionsProperty.Builder.() -> Unit):
          Unit = gaugeChartOptions(GaugeChartOptionsProperty(gaugeChartOptions))

      override fun tooltipOptions(tooltipOptions: IResolvable) {
        cdkBuilder.tooltipOptions(tooltipOptions.let(IResolvable::unwrap))
      }

      override fun tooltipOptions(tooltipOptions: TooltipOptionsProperty) {
        cdkBuilder.tooltipOptions(tooltipOptions.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("31a25f9768ddeaef8d9292cba29816b4a401033a0cacbeff98a20c87bfd2b332")
      override fun tooltipOptions(tooltipOptions: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltipOptions(TooltipOptionsProperty(tooltipOptions))

      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("43b49d7cf361a9df6088344cb495cdf0a47d4f0c4ddaf2a1f5a59acf9b8049f1")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConfigurationProperty,
    ) : CdkObject(cdkObject), GaugeChartConfigurationProperty {
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun gaugeChartOptions(): Any? = unwrap(this).getGaugeChartOptions()

      override fun tooltipOptions(): Any? = unwrap(this).getTooltipOptions()

      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GaugeChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConfigurationProperty):
          GaugeChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConfigurationProperty
    }
  }

  public interface WaterfallVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: WaterfallChartConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("796a467dc8eadd00bcda1317a5f8c466f8c07f15479c0412d2ad8fd3498a3367")
      public
          fun chartConfiguration(chartConfiguration: WaterfallChartConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d83b711e4db2cbb6fbf23260cacbebc3e5ab1d4d546af1cf88dadcd3405c26bf")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("12caddf68434e2a296e2ea8a4187571826f2aa2155d4df19b5cf99048117643f")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: WaterfallChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(WaterfallChartConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("796a467dc8eadd00bcda1317a5f8c466f8c07f15479c0412d2ad8fd3498a3367")
      override
          fun chartConfiguration(chartConfiguration: WaterfallChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(WaterfallChartConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d83b711e4db2cbb6fbf23260cacbebc3e5ab1d4d546af1cf88dadcd3405c26bf")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("12caddf68434e2a296e2ea8a4187571826f2aa2155d4df19b5cf99048117643f")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallVisualProperty,
    ) : CdkObject(cdkObject), WaterfallVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): WaterfallVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallVisualProperty):
          WaterfallVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WaterfallVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallVisualProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallVisualProperty
    }
  }

  public interface SpacingProperty {
    public fun bottom(): String? = unwrap(this).getBottom()

    public fun left(): String? = unwrap(this).getLeft()

    public fun right(): String? = unwrap(this).getRight()

    public fun top(): String? = unwrap(this).getTop()

    @CdkDslMarker
    public interface Builder {
      public fun bottom(bottom: String)

      public fun left(left: String)

      public fun right(right: String)

      public fun top(top: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SpacingProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SpacingProperty.builder()

      override fun bottom(bottom: String) {
        cdkBuilder.bottom(bottom)
      }

      override fun left(left: String) {
        cdkBuilder.left(left)
      }

      override fun right(right: String) {
        cdkBuilder.right(right)
      }

      override fun top(top: String) {
        cdkBuilder.top(top)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.SpacingProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SpacingProperty,
    ) : CdkObject(cdkObject), SpacingProperty {
      override fun bottom(): String? = unwrap(this).getBottom()

      override fun left(): String? = unwrap(this).getLeft()

      override fun right(): String? = unwrap(this).getRight()

      override fun top(): String? = unwrap(this).getTop()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SpacingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SpacingProperty):
          SpacingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SpacingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SpacingProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SpacingProperty
    }
  }

  public interface TimeRangeFilterProperty {
    public fun column(): Any

    public fun excludePeriodConfiguration(): Any? = unwrap(this).getExcludePeriodConfiguration()

    public fun filterId(): String

    public fun includeMaximum(): Any? = unwrap(this).getIncludeMaximum()

    public fun includeMinimum(): Any? = unwrap(this).getIncludeMinimum()

    public fun nullOption(): String

    public fun rangeMaximumValue(): Any? = unwrap(this).getRangeMaximumValue()

    public fun rangeMinimumValue(): Any? = unwrap(this).getRangeMinimumValue()

    public fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

    @CdkDslMarker
    public interface Builder {
      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f6bcacc559943ad2dc4984c54690a40415082f2e038a1071cdb8fcfacdb7355c")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun excludePeriodConfiguration(excludePeriodConfiguration: IResolvable)

      public
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c6a4e7f5f07894037d223e1bbcfc804613c819151db2989fc8c074119ab6d9a2")
      public
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty.Builder.() -> Unit)

      public fun filterId(filterId: String)

      public fun includeMaximum(includeMaximum: Boolean)

      public fun includeMaximum(includeMaximum: IResolvable)

      public fun includeMinimum(includeMinimum: Boolean)

      public fun includeMinimum(includeMinimum: IResolvable)

      public fun nullOption(nullOption: String)

      public fun rangeMaximumValue(rangeMaximumValue: IResolvable)

      public fun rangeMaximumValue(rangeMaximumValue: TimeRangeFilterValueProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("416f000d5f471c77813e26c079b5a1a78e6f59a1a4746d21a0e69494eff052d4")
      public
          fun rangeMaximumValue(rangeMaximumValue: TimeRangeFilterValueProperty.Builder.() -> Unit)

      public fun rangeMinimumValue(rangeMinimumValue: IResolvable)

      public fun rangeMinimumValue(rangeMinimumValue: TimeRangeFilterValueProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ad2ffddf6a27297b1125bf7b285d53fdde577dfe2cab980977cb5e5fe5aa6d57")
      public
          fun rangeMinimumValue(rangeMinimumValue: TimeRangeFilterValueProperty.Builder.() -> Unit)

      public fun timeGranularity(timeGranularity: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterProperty.builder()

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f6bcacc559943ad2dc4984c54690a40415082f2e038a1071cdb8fcfacdb7355c")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun excludePeriodConfiguration(excludePeriodConfiguration: IResolvable) {
        cdkBuilder.excludePeriodConfiguration(excludePeriodConfiguration.let(IResolvable::unwrap))
      }

      override
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty) {
        cdkBuilder.excludePeriodConfiguration(excludePeriodConfiguration.let(ExcludePeriodConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c6a4e7f5f07894037d223e1bbcfc804613c819151db2989fc8c074119ab6d9a2")
      override
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty.Builder.() -> Unit):
          Unit =
          excludePeriodConfiguration(ExcludePeriodConfigurationProperty(excludePeriodConfiguration))

      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      override fun includeMaximum(includeMaximum: Boolean) {
        cdkBuilder.includeMaximum(includeMaximum)
      }

      override fun includeMaximum(includeMaximum: IResolvable) {
        cdkBuilder.includeMaximum(includeMaximum.let(IResolvable::unwrap))
      }

      override fun includeMinimum(includeMinimum: Boolean) {
        cdkBuilder.includeMinimum(includeMinimum)
      }

      override fun includeMinimum(includeMinimum: IResolvable) {
        cdkBuilder.includeMinimum(includeMinimum.let(IResolvable::unwrap))
      }

      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      override fun rangeMaximumValue(rangeMaximumValue: IResolvable) {
        cdkBuilder.rangeMaximumValue(rangeMaximumValue.let(IResolvable::unwrap))
      }

      override fun rangeMaximumValue(rangeMaximumValue: TimeRangeFilterValueProperty) {
        cdkBuilder.rangeMaximumValue(rangeMaximumValue.let(TimeRangeFilterValueProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("416f000d5f471c77813e26c079b5a1a78e6f59a1a4746d21a0e69494eff052d4")
      override
          fun rangeMaximumValue(rangeMaximumValue: TimeRangeFilterValueProperty.Builder.() -> Unit):
          Unit = rangeMaximumValue(TimeRangeFilterValueProperty(rangeMaximumValue))

      override fun rangeMinimumValue(rangeMinimumValue: IResolvable) {
        cdkBuilder.rangeMinimumValue(rangeMinimumValue.let(IResolvable::unwrap))
      }

      override fun rangeMinimumValue(rangeMinimumValue: TimeRangeFilterValueProperty) {
        cdkBuilder.rangeMinimumValue(rangeMinimumValue.let(TimeRangeFilterValueProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ad2ffddf6a27297b1125bf7b285d53fdde577dfe2cab980977cb5e5fe5aa6d57")
      override
          fun rangeMinimumValue(rangeMinimumValue: TimeRangeFilterValueProperty.Builder.() -> Unit):
          Unit = rangeMinimumValue(TimeRangeFilterValueProperty(rangeMinimumValue))

      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterProperty,
    ) : CdkObject(cdkObject), TimeRangeFilterProperty {
      override fun column(): Any = unwrap(this).getColumn()

      override fun excludePeriodConfiguration(): Any? = unwrap(this).getExcludePeriodConfiguration()

      override fun filterId(): String = unwrap(this).getFilterId()

      override fun includeMaximum(): Any? = unwrap(this).getIncludeMaximum()

      override fun includeMinimum(): Any? = unwrap(this).getIncludeMinimum()

      override fun nullOption(): String = unwrap(this).getNullOption()

      override fun rangeMaximumValue(): Any? = unwrap(this).getRangeMaximumValue()

      override fun rangeMinimumValue(): Any? = unwrap(this).getRangeMinimumValue()

      override fun timeGranularity(): String? = unwrap(this).getTimeGranularity()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TimeRangeFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterProperty):
          TimeRangeFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TimeRangeFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterProperty
    }
  }

  public interface PivotTableFieldWellsProperty {
    public fun pivotTableAggregatedFieldWells(): Any? =
        unwrap(this).getPivotTableAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells: IResolvable)

      public
          fun pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells: PivotTableAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9d901f99ee892a78c42bc3b5ca6706998c0d2c17d5fa2f5379a6248ba2e0fef1")
      public
          fun pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells: PivotTableAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldWellsProperty.builder()

      override fun pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells: IResolvable) {
        cdkBuilder.pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells: PivotTableAggregatedFieldWellsProperty) {
        cdkBuilder.pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells.let(PivotTableAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9d901f99ee892a78c42bc3b5ca6706998c0d2c17d5fa2f5379a6248ba2e0fef1")
      override
          fun pivotTableAggregatedFieldWells(pivotTableAggregatedFieldWells: PivotTableAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          pivotTableAggregatedFieldWells(PivotTableAggregatedFieldWellsProperty(pivotTableAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldWellsProperty,
    ) : CdkObject(cdkObject), PivotTableFieldWellsProperty {
      override fun pivotTableAggregatedFieldWells(): Any? =
          unwrap(this).getPivotTableAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldWellsProperty):
          PivotTableFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldWellsProperty
    }
  }

  public interface DateTimeFormatConfigurationProperty {
    public fun dateTimeFormat(): String? = unwrap(this).getDateTimeFormat()

    public fun nullValueFormatConfiguration(): Any? = unwrap(this).getNullValueFormatConfiguration()

    public fun numericFormatConfiguration(): Any? = unwrap(this).getNumericFormatConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun dateTimeFormat(dateTimeFormat: String)

      public fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable)

      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("baf1982de6c5374e91c4f1f65f60e86affa1e66f8887d12d426154fd21e319ed")
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit)

      public fun numericFormatConfiguration(numericFormatConfiguration: IResolvable)

      public
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("32ee414750135b9b17773daa75ddf3f3706cf90fefe56f1d1ac8ad7fb14852f3")
      public
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeFormatConfigurationProperty.builder()

      override fun dateTimeFormat(dateTimeFormat: String) {
        cdkBuilder.dateTimeFormat(dateTimeFormat)
      }

      override fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(NullValueFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("baf1982de6c5374e91c4f1f65f60e86affa1e66f8887d12d426154fd21e319ed")
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          nullValueFormatConfiguration(NullValueFormatConfigurationProperty(nullValueFormatConfiguration))

      override fun numericFormatConfiguration(numericFormatConfiguration: IResolvable) {
        cdkBuilder.numericFormatConfiguration(numericFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty) {
        cdkBuilder.numericFormatConfiguration(numericFormatConfiguration.let(NumericFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("32ee414750135b9b17773daa75ddf3f3706cf90fefe56f1d1ac8ad7fb14852f3")
      override
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          numericFormatConfiguration(NumericFormatConfigurationProperty(numericFormatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeFormatConfigurationProperty,
    ) : CdkObject(cdkObject), DateTimeFormatConfigurationProperty {
      override fun dateTimeFormat(): String? = unwrap(this).getDateTimeFormat()

      override fun nullValueFormatConfiguration(): Any? =
          unwrap(this).getNullValueFormatConfiguration()

      override fun numericFormatConfiguration(): Any? = unwrap(this).getNumericFormatConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DateTimeFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeFormatConfigurationProperty):
          DateTimeFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimeFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeFormatConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeFormatConfigurationProperty
    }
  }

  public interface SmallMultiplesOptionsProperty {
    public fun maxVisibleColumns(): Number? = unwrap(this).getMaxVisibleColumns()

    public fun maxVisibleRows(): Number? = unwrap(this).getMaxVisibleRows()

    public fun panelConfiguration(): Any? = unwrap(this).getPanelConfiguration()

    public fun xAxis(): Any? = unwrap(this).getXAxis()

    public fun yAxis(): Any? = unwrap(this).getYAxis()

    @CdkDslMarker
    public interface Builder {
      public fun maxVisibleColumns(maxVisibleColumns: Number)

      public fun maxVisibleRows(maxVisibleRows: Number)

      public fun panelConfiguration(panelConfiguration: IResolvable)

      public fun panelConfiguration(panelConfiguration: PanelConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de364330cd6f11144b070fe9073399d19b2ecd3934bcb266ceb632ae2c9c2fa2")
      public
          fun panelConfiguration(panelConfiguration: PanelConfigurationProperty.Builder.() -> Unit)

      public fun xAxis(xAxis: IResolvable)

      public fun xAxis(xAxis: SmallMultiplesAxisPropertiesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("82573aa592e9990a86052f8f84c19388517c9d8010dccee43916c5ed81807a64")
      public fun xAxis(xAxis: SmallMultiplesAxisPropertiesProperty.Builder.() -> Unit)

      public fun yAxis(yAxis: IResolvable)

      public fun yAxis(yAxis: SmallMultiplesAxisPropertiesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5e76b69aa3cb21c37c4cad1ca13d5c7c5b41427c7f3049fb6d34bb9930afacf7")
      public fun yAxis(yAxis: SmallMultiplesAxisPropertiesProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesOptionsProperty.builder()

      override fun maxVisibleColumns(maxVisibleColumns: Number) {
        cdkBuilder.maxVisibleColumns(maxVisibleColumns)
      }

      override fun maxVisibleRows(maxVisibleRows: Number) {
        cdkBuilder.maxVisibleRows(maxVisibleRows)
      }

      override fun panelConfiguration(panelConfiguration: IResolvable) {
        cdkBuilder.panelConfiguration(panelConfiguration.let(IResolvable::unwrap))
      }

      override fun panelConfiguration(panelConfiguration: PanelConfigurationProperty) {
        cdkBuilder.panelConfiguration(panelConfiguration.let(PanelConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de364330cd6f11144b070fe9073399d19b2ecd3934bcb266ceb632ae2c9c2fa2")
      override
          fun panelConfiguration(panelConfiguration: PanelConfigurationProperty.Builder.() -> Unit):
          Unit = panelConfiguration(PanelConfigurationProperty(panelConfiguration))

      override fun xAxis(xAxis: IResolvable) {
        cdkBuilder.xAxis(xAxis.let(IResolvable::unwrap))
      }

      override fun xAxis(xAxis: SmallMultiplesAxisPropertiesProperty) {
        cdkBuilder.xAxis(xAxis.let(SmallMultiplesAxisPropertiesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("82573aa592e9990a86052f8f84c19388517c9d8010dccee43916c5ed81807a64")
      override fun xAxis(xAxis: SmallMultiplesAxisPropertiesProperty.Builder.() -> Unit): Unit =
          xAxis(SmallMultiplesAxisPropertiesProperty(xAxis))

      override fun yAxis(yAxis: IResolvable) {
        cdkBuilder.yAxis(yAxis.let(IResolvable::unwrap))
      }

      override fun yAxis(yAxis: SmallMultiplesAxisPropertiesProperty) {
        cdkBuilder.yAxis(yAxis.let(SmallMultiplesAxisPropertiesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5e76b69aa3cb21c37c4cad1ca13d5c7c5b41427c7f3049fb6d34bb9930afacf7")
      override fun yAxis(yAxis: SmallMultiplesAxisPropertiesProperty.Builder.() -> Unit): Unit =
          yAxis(SmallMultiplesAxisPropertiesProperty(yAxis))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesOptionsProperty,
    ) : CdkObject(cdkObject), SmallMultiplesOptionsProperty {
      override fun maxVisibleColumns(): Number? = unwrap(this).getMaxVisibleColumns()

      override fun maxVisibleRows(): Number? = unwrap(this).getMaxVisibleRows()

      override fun panelConfiguration(): Any? = unwrap(this).getPanelConfiguration()

      override fun xAxis(): Any? = unwrap(this).getXAxis()

      override fun yAxis(): Any? = unwrap(this).getYAxis()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SmallMultiplesOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesOptionsProperty):
          SmallMultiplesOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SmallMultiplesOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesOptionsProperty
    }
  }

  public interface ComboChartAggregatedFieldWellsProperty {
    public fun barValues(): Any? = unwrap(this).getBarValues()

    public fun category(): Any? = unwrap(this).getCategory()

    public fun colors(): Any? = unwrap(this).getColors()

    public fun lineValues(): Any? = unwrap(this).getLineValues()

    @CdkDslMarker
    public interface Builder {
      public fun barValues(barValues: IResolvable)

      public fun barValues(barValues: List<Any>)

      public fun barValues(vararg barValues: Any)

      public fun category(category: IResolvable)

      public fun category(category: List<Any>)

      public fun category(vararg category: Any)

      public fun colors(colors: IResolvable)

      public fun colors(colors: List<Any>)

      public fun colors(vararg colors: Any)

      public fun lineValues(lineValues: IResolvable)

      public fun lineValues(lineValues: List<Any>)

      public fun lineValues(vararg lineValues: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartAggregatedFieldWellsProperty.builder()

      override fun barValues(barValues: IResolvable) {
        cdkBuilder.barValues(barValues.let(IResolvable::unwrap))
      }

      override fun barValues(barValues: List<Any>) {
        cdkBuilder.barValues(barValues)
      }

      override fun barValues(vararg barValues: Any): Unit = barValues(barValues.toList())

      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      override fun category(vararg category: Any): Unit = category(category.toList())

      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      override fun lineValues(lineValues: IResolvable) {
        cdkBuilder.lineValues(lineValues.let(IResolvable::unwrap))
      }

      override fun lineValues(lineValues: List<Any>) {
        cdkBuilder.lineValues(lineValues)
      }

      override fun lineValues(vararg lineValues: Any): Unit = lineValues(lineValues.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), ComboChartAggregatedFieldWellsProperty {
      override fun barValues(): Any? = unwrap(this).getBarValues()

      override fun category(): Any? = unwrap(this).getCategory()

      override fun colors(): Any? = unwrap(this).getColors()

      override fun lineValues(): Any? = unwrap(this).getLineValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ComboChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartAggregatedFieldWellsProperty):
          ComboChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComboChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartAggregatedFieldWellsProperty
    }
  }

  public interface ConditionalFormattingIconDisplayConfigurationProperty {
    public fun iconDisplayOption(): String? = unwrap(this).getIconDisplayOption()

    @CdkDslMarker
    public interface Builder {
      public fun iconDisplayOption(iconDisplayOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconDisplayConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconDisplayConfigurationProperty.builder()

      override fun iconDisplayOption(iconDisplayOption: String) {
        cdkBuilder.iconDisplayOption(iconDisplayOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconDisplayConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconDisplayConfigurationProperty,
    ) : CdkObject(cdkObject), ConditionalFormattingIconDisplayConfigurationProperty {
      override fun iconDisplayOption(): String? = unwrap(this).getIconDisplayOption()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingIconDisplayConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconDisplayConfigurationProperty):
          ConditionalFormattingIconDisplayConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingIconDisplayConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconDisplayConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconDisplayConfigurationProperty
    }
  }

  public interface GeospatialCoordinateBoundsProperty {
    public fun east(): Number

    public fun north(): Number

    public fun south(): Number

    public fun west(): Number

    @CdkDslMarker
    public interface Builder {
      public fun east(east: Number)

      public fun north(north: Number)

      public fun south(south: Number)

      public fun west(west: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialCoordinateBoundsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialCoordinateBoundsProperty.builder()

      override fun east(east: Number) {
        cdkBuilder.east(east)
      }

      override fun north(north: Number) {
        cdkBuilder.north(north)
      }

      override fun south(south: Number) {
        cdkBuilder.south(south)
      }

      override fun west(west: Number) {
        cdkBuilder.west(west)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialCoordinateBoundsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialCoordinateBoundsProperty,
    ) : CdkObject(cdkObject), GeospatialCoordinateBoundsProperty {
      override fun east(): Number = unwrap(this).getEast()

      override fun north(): Number = unwrap(this).getNorth()

      override fun south(): Number = unwrap(this).getSouth()

      override fun west(): Number = unwrap(this).getWest()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialCoordinateBoundsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialCoordinateBoundsProperty):
          GeospatialCoordinateBoundsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialCoordinateBoundsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialCoordinateBoundsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialCoordinateBoundsProperty
    }
  }

  public interface CustomActionSetParametersOperationProperty {
    public fun parameterValueConfigurations(): Any

    @CdkDslMarker
    public interface Builder {
      public fun parameterValueConfigurations(parameterValueConfigurations: IResolvable)

      public fun parameterValueConfigurations(parameterValueConfigurations: List<Any>)

      public fun parameterValueConfigurations(vararg parameterValueConfigurations: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionSetParametersOperationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionSetParametersOperationProperty.builder()

      override fun parameterValueConfigurations(parameterValueConfigurations: IResolvable) {
        cdkBuilder.parameterValueConfigurations(parameterValueConfigurations.let(IResolvable::unwrap))
      }

      override fun parameterValueConfigurations(parameterValueConfigurations: List<Any>) {
        cdkBuilder.parameterValueConfigurations(parameterValueConfigurations)
      }

      override fun parameterValueConfigurations(vararg parameterValueConfigurations: Any): Unit =
          parameterValueConfigurations(parameterValueConfigurations.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionSetParametersOperationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionSetParametersOperationProperty,
    ) : CdkObject(cdkObject), CustomActionSetParametersOperationProperty {
      override fun parameterValueConfigurations(): Any =
          unwrap(this).getParameterValueConfigurations()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomActionSetParametersOperationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionSetParametersOperationProperty):
          CustomActionSetParametersOperationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomActionSetParametersOperationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionSetParametersOperationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionSetParametersOperationProperty
    }
  }

  public interface TableFieldWellsProperty {
    public fun tableAggregatedFieldWells(): Any? = unwrap(this).getTableAggregatedFieldWells()

    public fun tableUnaggregatedFieldWells(): Any? = unwrap(this).getTableUnaggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun tableAggregatedFieldWells(tableAggregatedFieldWells: IResolvable)

      public
          fun tableAggregatedFieldWells(tableAggregatedFieldWells: TableAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0707f1c6ec65e07b97b569cff8594befc81efdf4bc74d4dd273e52dde7c6b744")
      public
          fun tableAggregatedFieldWells(tableAggregatedFieldWells: TableAggregatedFieldWellsProperty.Builder.() -> Unit)

      public fun tableUnaggregatedFieldWells(tableUnaggregatedFieldWells: IResolvable)

      public
          fun tableUnaggregatedFieldWells(tableUnaggregatedFieldWells: TableUnaggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("db0bd0d4565513fdc743da407bfa82a83e019447666e72ca4a7b1ee1ed476dc0")
      public
          fun tableUnaggregatedFieldWells(tableUnaggregatedFieldWells: TableUnaggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldWellsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldWellsProperty.builder()

      override fun tableAggregatedFieldWells(tableAggregatedFieldWells: IResolvable) {
        cdkBuilder.tableAggregatedFieldWells(tableAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun tableAggregatedFieldWells(tableAggregatedFieldWells: TableAggregatedFieldWellsProperty) {
        cdkBuilder.tableAggregatedFieldWells(tableAggregatedFieldWells.let(TableAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0707f1c6ec65e07b97b569cff8594befc81efdf4bc74d4dd273e52dde7c6b744")
      override
          fun tableAggregatedFieldWells(tableAggregatedFieldWells: TableAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          tableAggregatedFieldWells(TableAggregatedFieldWellsProperty(tableAggregatedFieldWells))

      override fun tableUnaggregatedFieldWells(tableUnaggregatedFieldWells: IResolvable) {
        cdkBuilder.tableUnaggregatedFieldWells(tableUnaggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun tableUnaggregatedFieldWells(tableUnaggregatedFieldWells: TableUnaggregatedFieldWellsProperty) {
        cdkBuilder.tableUnaggregatedFieldWells(tableUnaggregatedFieldWells.let(TableUnaggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("db0bd0d4565513fdc743da407bfa82a83e019447666e72ca4a7b1ee1ed476dc0")
      override
          fun tableUnaggregatedFieldWells(tableUnaggregatedFieldWells: TableUnaggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          tableUnaggregatedFieldWells(TableUnaggregatedFieldWellsProperty(tableUnaggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldWellsProperty,
    ) : CdkObject(cdkObject), TableFieldWellsProperty {
      override fun tableAggregatedFieldWells(): Any? = unwrap(this).getTableAggregatedFieldWells()

      override fun tableUnaggregatedFieldWells(): Any? =
          unwrap(this).getTableUnaggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TableFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldWellsProperty):
          TableFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldWellsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldWellsProperty
    }
  }

  public interface ConditionalFormattingIconSetProperty {
    public fun expression(): String

    public fun iconSetType(): String? = unwrap(this).getIconSetType()

    @CdkDslMarker
    public interface Builder {
      public fun expression(expression: String)

      public fun iconSetType(iconSetType: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconSetProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconSetProperty.builder()

      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      override fun iconSetType(iconSetType: String) {
        cdkBuilder.iconSetType(iconSetType)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconSetProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconSetProperty,
    ) : CdkObject(cdkObject), ConditionalFormattingIconSetProperty {
      override fun expression(): String = unwrap(this).getExpression()

      override fun iconSetType(): String? = unwrap(this).getIconSetType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingIconSetProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconSetProperty):
          ConditionalFormattingIconSetProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingIconSetProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconSetProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconSetProperty
    }
  }

  public interface GrowthRateComputationProperty {
    public fun computationId(): String

    public fun name(): String? = unwrap(this).getName()

    public fun periodSize(): Number? = unwrap(this).getPeriodSize()

    public fun time(): Any? = unwrap(this).getTime()

    public fun `value`(): Any? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun computationId(computationId: String)

      public fun name(name: String)

      public fun periodSize(periodSize: Number)

      public fun time(time: IResolvable)

      public fun time(time: DimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6addce1f106112728ad3d18a6eb024a80f81f142330abbb980bef8373fe5f291")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)

      public fun `value`(`value`: IResolvable)

      public fun `value`(`value`: MeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("668acb017e0fdfac7b15d931e8b9d78b2c2de84a99e599dd51837c937fea5aa3")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GrowthRateComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GrowthRateComputationProperty.builder()

      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun periodSize(periodSize: Number) {
        cdkBuilder.periodSize(periodSize)
      }

      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6addce1f106112728ad3d18a6eb024a80f81f142330abbb980bef8373fe5f291")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("668acb017e0fdfac7b15d931e8b9d78b2c2de84a99e599dd51837c937fea5aa3")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GrowthRateComputationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GrowthRateComputationProperty,
    ) : CdkObject(cdkObject), GrowthRateComputationProperty {
      override fun computationId(): String = unwrap(this).getComputationId()

      override fun name(): String? = unwrap(this).getName()

      override fun periodSize(): Number? = unwrap(this).getPeriodSize()

      override fun time(): Any? = unwrap(this).getTime()

      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GrowthRateComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GrowthRateComputationProperty):
          GrowthRateComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GrowthRateComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GrowthRateComputationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GrowthRateComputationProperty
    }
  }

  public interface DataFieldSeriesItemProperty {
    public fun axisBinding(): String

    public fun fieldId(): String

    public fun fieldValue(): String? = unwrap(this).getFieldValue()

    public fun settings(): Any? = unwrap(this).getSettings()

    @CdkDslMarker
    public interface Builder {
      public fun axisBinding(axisBinding: String)

      public fun fieldId(fieldId: String)

      public fun fieldValue(fieldValue: String)

      public fun tings(settings: IResolvable)

      public fun tings(settings: LineChartSeriesSettingsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c92e28f1aa02567f8ea842b8fe0b4ecc95e477ff770255ed24afdf5ba86a3ed")
      public fun tings(settings: LineChartSeriesSettingsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataFieldSeriesItemProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataFieldSeriesItemProperty.builder()

      override fun axisBinding(axisBinding: String) {
        cdkBuilder.axisBinding(axisBinding)
      }

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun fieldValue(fieldValue: String) {
        cdkBuilder.fieldValue(fieldValue)
      }

      override fun tings(settings: IResolvable) {
        cdkBuilder.settings(settings.let(IResolvable::unwrap))
      }

      override fun tings(settings: LineChartSeriesSettingsProperty) {
        cdkBuilder.settings(settings.let(LineChartSeriesSettingsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c92e28f1aa02567f8ea842b8fe0b4ecc95e477ff770255ed24afdf5ba86a3ed")
      override fun tings(settings: LineChartSeriesSettingsProperty.Builder.() -> Unit): Unit =
          tings(LineChartSeriesSettingsProperty(settings))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataFieldSeriesItemProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataFieldSeriesItemProperty,
    ) : CdkObject(cdkObject), DataFieldSeriesItemProperty {
      override fun axisBinding(): String = unwrap(this).getAxisBinding()

      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun fieldValue(): String? = unwrap(this).getFieldValue()

      override fun settings(): Any? = unwrap(this).getSettings()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataFieldSeriesItemProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataFieldSeriesItemProperty):
          DataFieldSeriesItemProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataFieldSeriesItemProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataFieldSeriesItemProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataFieldSeriesItemProperty
    }
  }

  public interface TableSideBorderOptionsProperty {
    public fun bottom(): Any? = unwrap(this).getBottom()

    public fun innerHorizontal(): Any? = unwrap(this).getInnerHorizontal()

    public fun innerVertical(): Any? = unwrap(this).getInnerVertical()

    public fun left(): Any? = unwrap(this).getLeft()

    public fun right(): Any? = unwrap(this).getRight()

    public fun top(): Any? = unwrap(this).getTop()

    @CdkDslMarker
    public interface Builder {
      public fun bottom(bottom: IResolvable)

      public fun bottom(bottom: TableBorderOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f93a848d73bcb1ba84045d5dc155e457476151f46f3bd94553daaf0266856113")
      public fun bottom(bottom: TableBorderOptionsProperty.Builder.() -> Unit)

      public fun innerHorizontal(innerHorizontal: IResolvable)

      public fun innerHorizontal(innerHorizontal: TableBorderOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("25e2ce07a16c8ae22087ba9bc89173d2741db77634d7f22ac7e4c902369779a8")
      public fun innerHorizontal(innerHorizontal: TableBorderOptionsProperty.Builder.() -> Unit)

      public fun innerVertical(innerVertical: IResolvable)

      public fun innerVertical(innerVertical: TableBorderOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e0df85a9edb5c5d1980ca01fd40c50c98c2815548267c0ea6f6f019c68656efb")
      public fun innerVertical(innerVertical: TableBorderOptionsProperty.Builder.() -> Unit)

      public fun left(left: IResolvable)

      public fun left(left: TableBorderOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0539a23dfcd71dbffe27b97cad24040247737c00102495e21ded90347fb5a706")
      public fun left(left: TableBorderOptionsProperty.Builder.() -> Unit)

      public fun right(right: IResolvable)

      public fun right(right: TableBorderOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d01310a7660eafc50d3246b78b3609c8da3a355df6d0eaeac577796de2bfe916")
      public fun right(right: TableBorderOptionsProperty.Builder.() -> Unit)

      public fun top(top: IResolvable)

      public fun top(top: TableBorderOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ce4c2358b68ed637a4a7bce4e43ca7551b3565e8934571a3d17287cb630518d")
      public fun top(top: TableBorderOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableSideBorderOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableSideBorderOptionsProperty.builder()

      override fun bottom(bottom: IResolvable) {
        cdkBuilder.bottom(bottom.let(IResolvable::unwrap))
      }

      override fun bottom(bottom: TableBorderOptionsProperty) {
        cdkBuilder.bottom(bottom.let(TableBorderOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f93a848d73bcb1ba84045d5dc155e457476151f46f3bd94553daaf0266856113")
      override fun bottom(bottom: TableBorderOptionsProperty.Builder.() -> Unit): Unit =
          bottom(TableBorderOptionsProperty(bottom))

      override fun innerHorizontal(innerHorizontal: IResolvable) {
        cdkBuilder.innerHorizontal(innerHorizontal.let(IResolvable::unwrap))
      }

      override fun innerHorizontal(innerHorizontal: TableBorderOptionsProperty) {
        cdkBuilder.innerHorizontal(innerHorizontal.let(TableBorderOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("25e2ce07a16c8ae22087ba9bc89173d2741db77634d7f22ac7e4c902369779a8")
      override fun innerHorizontal(innerHorizontal: TableBorderOptionsProperty.Builder.() -> Unit):
          Unit = innerHorizontal(TableBorderOptionsProperty(innerHorizontal))

      override fun innerVertical(innerVertical: IResolvable) {
        cdkBuilder.innerVertical(innerVertical.let(IResolvable::unwrap))
      }

      override fun innerVertical(innerVertical: TableBorderOptionsProperty) {
        cdkBuilder.innerVertical(innerVertical.let(TableBorderOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e0df85a9edb5c5d1980ca01fd40c50c98c2815548267c0ea6f6f019c68656efb")
      override fun innerVertical(innerVertical: TableBorderOptionsProperty.Builder.() -> Unit): Unit
          = innerVertical(TableBorderOptionsProperty(innerVertical))

      override fun left(left: IResolvable) {
        cdkBuilder.left(left.let(IResolvable::unwrap))
      }

      override fun left(left: TableBorderOptionsProperty) {
        cdkBuilder.left(left.let(TableBorderOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0539a23dfcd71dbffe27b97cad24040247737c00102495e21ded90347fb5a706")
      override fun left(left: TableBorderOptionsProperty.Builder.() -> Unit): Unit =
          left(TableBorderOptionsProperty(left))

      override fun right(right: IResolvable) {
        cdkBuilder.right(right.let(IResolvable::unwrap))
      }

      override fun right(right: TableBorderOptionsProperty) {
        cdkBuilder.right(right.let(TableBorderOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d01310a7660eafc50d3246b78b3609c8da3a355df6d0eaeac577796de2bfe916")
      override fun right(right: TableBorderOptionsProperty.Builder.() -> Unit): Unit =
          right(TableBorderOptionsProperty(right))

      override fun top(top: IResolvable) {
        cdkBuilder.top(top.let(IResolvable::unwrap))
      }

      override fun top(top: TableBorderOptionsProperty) {
        cdkBuilder.top(top.let(TableBorderOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ce4c2358b68ed637a4a7bce4e43ca7551b3565e8934571a3d17287cb630518d")
      override fun top(top: TableBorderOptionsProperty.Builder.() -> Unit): Unit =
          top(TableBorderOptionsProperty(top))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableSideBorderOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableSideBorderOptionsProperty,
    ) : CdkObject(cdkObject), TableSideBorderOptionsProperty {
      override fun bottom(): Any? = unwrap(this).getBottom()

      override fun innerHorizontal(): Any? = unwrap(this).getInnerHorizontal()

      override fun innerVertical(): Any? = unwrap(this).getInnerVertical()

      override fun left(): Any? = unwrap(this).getLeft()

      override fun right(): Any? = unwrap(this).getRight()

      override fun top(): Any? = unwrap(this).getTop()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TableSideBorderOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableSideBorderOptionsProperty):
          TableSideBorderOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableSideBorderOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableSideBorderOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableSideBorderOptionsProperty
    }
  }

  public interface KPISparklineOptionsProperty {
    public fun color(): String? = unwrap(this).getColor()

    public fun tooltipVisibility(): String? = unwrap(this).getTooltipVisibility()

    public fun type(): String

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)

      public fun tooltipVisibility(tooltipVisibility: String)

      public fun type(type: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPISparklineOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPISparklineOptionsProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      override fun tooltipVisibility(tooltipVisibility: String) {
        cdkBuilder.tooltipVisibility(tooltipVisibility)
      }

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPISparklineOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPISparklineOptionsProperty,
    ) : CdkObject(cdkObject), KPISparklineOptionsProperty {
      override fun color(): String? = unwrap(this).getColor()

      override fun tooltipVisibility(): String? = unwrap(this).getTooltipVisibility()

      override fun type(): String = unwrap(this).getType()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): KPISparklineOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPISparklineOptionsProperty):
          KPISparklineOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPISparklineOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPISparklineOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPISparklineOptionsProperty
    }
  }

  public interface FilterSelectableValuesProperty {
    public fun values(): List<String> = unwrap(this).getValues() ?: emptyList()

    @CdkDslMarker
    public interface Builder {
      public fun values(values: List<String>)

      public fun values(vararg values: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSelectableValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSelectableValuesProperty.builder()

      override fun values(values: List<String>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: String): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSelectableValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSelectableValuesProperty,
    ) : CdkObject(cdkObject), FilterSelectableValuesProperty {
      override fun values(): List<String> = unwrap(this).getValues() ?: emptyList()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilterSelectableValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSelectableValuesProperty):
          FilterSelectableValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterSelectableValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSelectableValuesProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSelectableValuesProperty
    }
  }

  public interface FilledMapConditionalFormattingProperty {
    public fun conditionalFormattingOptions(): Any

    @CdkDslMarker
    public interface Builder {
      public fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable)

      public fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>)

      public fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingProperty.builder()

      override fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions.let(IResolvable::unwrap))
      }

      override fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions)
      }

      override fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any): Unit =
          conditionalFormattingOptions(conditionalFormattingOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingProperty,
    ) : CdkObject(cdkObject), FilledMapConditionalFormattingProperty {
      override fun conditionalFormattingOptions(): Any =
          unwrap(this).getConditionalFormattingOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilledMapConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingProperty):
          FilledMapConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingProperty
    }
  }

  public interface ExcludePeriodConfigurationProperty {
    public fun amount(): Number

    public fun granularity(): String

    public fun status(): String? = unwrap(this).getStatus()

    @CdkDslMarker
    public interface Builder {
      public fun amount(amount: Number)

      public fun granularity(granularity: String)

      public fun status(status: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ExcludePeriodConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ExcludePeriodConfigurationProperty.builder()

      override fun amount(amount: Number) {
        cdkBuilder.amount(amount)
      }

      override fun granularity(granularity: String) {
        cdkBuilder.granularity(granularity)
      }

      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ExcludePeriodConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ExcludePeriodConfigurationProperty,
    ) : CdkObject(cdkObject), ExcludePeriodConfigurationProperty {
      override fun amount(): Number = unwrap(this).getAmount()

      override fun granularity(): String = unwrap(this).getGranularity()

      override fun status(): String? = unwrap(this).getStatus()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ExcludePeriodConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ExcludePeriodConfigurationProperty):
          ExcludePeriodConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ExcludePeriodConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ExcludePeriodConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ExcludePeriodConfigurationProperty
    }
  }

  public interface ShortFormatTextProperty {
    public fun plainText(): String? = unwrap(this).getPlainText()

    public fun richText(): String? = unwrap(this).getRichText()

    @CdkDslMarker
    public interface Builder {
      public fun plainText(plainText: String)

      public fun richText(richText: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ShortFormatTextProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ShortFormatTextProperty.builder()

      override fun plainText(plainText: String) {
        cdkBuilder.plainText(plainText)
      }

      override fun richText(richText: String) {
        cdkBuilder.richText(richText)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ShortFormatTextProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ShortFormatTextProperty,
    ) : CdkObject(cdkObject), ShortFormatTextProperty {
      override fun plainText(): String? = unwrap(this).getPlainText()

      override fun richText(): String? = unwrap(this).getRichText()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ShortFormatTextProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ShortFormatTextProperty):
          ShortFormatTextProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ShortFormatTextProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ShortFormatTextProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ShortFormatTextProperty
    }
  }

  public interface BoxPlotStyleOptionsProperty {
    public fun fillStyle(): String? = unwrap(this).getFillStyle()

    @CdkDslMarker
    public interface Builder {
      public fun fillStyle(fillStyle: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotStyleOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotStyleOptionsProperty.builder()

      override fun fillStyle(fillStyle: String) {
        cdkBuilder.fillStyle(fillStyle)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotStyleOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotStyleOptionsProperty,
    ) : CdkObject(cdkObject), BoxPlotStyleOptionsProperty {
      override fun fillStyle(): String? = unwrap(this).getFillStyle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): BoxPlotStyleOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotStyleOptionsProperty):
          BoxPlotStyleOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotStyleOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotStyleOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotStyleOptionsProperty
    }
  }

  public interface RadarChartAggregatedFieldWellsProperty {
    public fun category(): Any? = unwrap(this).getCategory()

    public fun color(): Any? = unwrap(this).getColor()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun category(category: IResolvable)

      public fun category(category: List<Any>)

      public fun category(vararg category: Any)

      public fun color(color: IResolvable)

      public fun color(color: List<Any>)

      public fun color(vararg color: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAggregatedFieldWellsProperty.builder()

      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      override fun category(vararg category: Any): Unit = category(category.toList())

      override fun color(color: IResolvable) {
        cdkBuilder.color(color.let(IResolvable::unwrap))
      }

      override fun color(color: List<Any>) {
        cdkBuilder.color(color)
      }

      override fun color(vararg color: Any): Unit = color(color.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), RadarChartAggregatedFieldWellsProperty {
      override fun category(): Any? = unwrap(this).getCategory()

      override fun color(): Any? = unwrap(this).getColor()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          RadarChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAggregatedFieldWellsProperty):
          RadarChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAggregatedFieldWellsProperty
    }
  }

  public interface VisualTitleLabelOptionsProperty {
    public fun formatText(): Any? = unwrap(this).getFormatText()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun formatText(formatText: IResolvable)

      public fun formatText(formatText: ShortFormatTextProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6d56f81c8b128e10903b9f2d30405671c958e3ad7881e0a433a0569de34be8ac")
      public fun formatText(formatText: ShortFormatTextProperty.Builder.() -> Unit)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualTitleLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualTitleLabelOptionsProperty.builder()

      override fun formatText(formatText: IResolvable) {
        cdkBuilder.formatText(formatText.let(IResolvable::unwrap))
      }

      override fun formatText(formatText: ShortFormatTextProperty) {
        cdkBuilder.formatText(formatText.let(ShortFormatTextProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6d56f81c8b128e10903b9f2d30405671c958e3ad7881e0a433a0569de34be8ac")
      override fun formatText(formatText: ShortFormatTextProperty.Builder.() -> Unit): Unit =
          formatText(ShortFormatTextProperty(formatText))

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualTitleLabelOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualTitleLabelOptionsProperty,
    ) : CdkObject(cdkObject), VisualTitleLabelOptionsProperty {
      override fun formatText(): Any? = unwrap(this).getFormatText()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): VisualTitleLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.VisualTitleLabelOptionsProperty):
          VisualTitleLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisualTitleLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualTitleLabelOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualTitleLabelOptionsProperty
    }
  }

  public interface LayoutProperty {
    public fun configuration(): Any

    @CdkDslMarker
    public interface Builder {
      public fun configuration(configuration: IResolvable)

      public fun configuration(configuration: LayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("084857e039d0169ebf6ebf6cb52152dc6bc2205ab03f5799efd31208cfe82db9")
      public fun configuration(configuration: LayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutProperty.builder()

      override fun configuration(configuration: IResolvable) {
        cdkBuilder.configuration(configuration.let(IResolvable::unwrap))
      }

      override fun configuration(configuration: LayoutConfigurationProperty) {
        cdkBuilder.configuration(configuration.let(LayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("084857e039d0169ebf6ebf6cb52152dc6bc2205ab03f5799efd31208cfe82db9")
      override fun configuration(configuration: LayoutConfigurationProperty.Builder.() -> Unit):
          Unit = configuration(LayoutConfigurationProperty(configuration))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutProperty,
    ) : CdkObject(cdkObject), LayoutProperty {
      override fun configuration(): Any = unwrap(this).getConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): LayoutProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutProperty):
          LayoutProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LayoutProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutProperty
    }
  }

  public interface ArcAxisDisplayRangeProperty {
    public fun max(): Number? = unwrap(this).getMax()

    public fun min(): Number? = unwrap(this).getMin()

    @CdkDslMarker
    public interface Builder {
      public fun max(max: Number)

      public fun min(min: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisDisplayRangeProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisDisplayRangeProperty.builder()

      override fun max(max: Number) {
        cdkBuilder.max(max)
      }

      override fun min(min: Number) {
        cdkBuilder.min(min)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisDisplayRangeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisDisplayRangeProperty,
    ) : CdkObject(cdkObject), ArcAxisDisplayRangeProperty {
      override fun max(): Number? = unwrap(this).getMax()

      override fun min(): Number? = unwrap(this).getMin()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ArcAxisDisplayRangeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisDisplayRangeProperty):
          ArcAxisDisplayRangeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ArcAxisDisplayRangeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisDisplayRangeProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisDisplayRangeProperty
    }
  }

  public interface DataSetConfigurationProperty {
    public fun columnGroupSchemaList(): Any? = unwrap(this).getColumnGroupSchemaList()

    public fun dataSetSchema(): Any? = unwrap(this).getDataSetSchema()

    public fun placeholder(): String? = unwrap(this).getPlaceholder()

    @CdkDslMarker
    public interface Builder {
      public fun columnGroupSchemaList(columnGroupSchemaList: IResolvable)

      public fun columnGroupSchemaList(columnGroupSchemaList: List<Any>)

      public fun columnGroupSchemaList(vararg columnGroupSchemaList: Any)

      public fun dataSetSchema(dataSetSchema: IResolvable)

      public fun dataSetSchema(dataSetSchema: DataSetSchemaProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f5c4d17d03c8314b22c5f968e5c47956256e40fd9dc088bdaa8efbbd46a5de96")
      public fun dataSetSchema(dataSetSchema: DataSetSchemaProperty.Builder.() -> Unit)

      public fun placeholder(placeholder: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetConfigurationProperty.builder()

      override fun columnGroupSchemaList(columnGroupSchemaList: IResolvable) {
        cdkBuilder.columnGroupSchemaList(columnGroupSchemaList.let(IResolvable::unwrap))
      }

      override fun columnGroupSchemaList(columnGroupSchemaList: List<Any>) {
        cdkBuilder.columnGroupSchemaList(columnGroupSchemaList)
      }

      override fun columnGroupSchemaList(vararg columnGroupSchemaList: Any): Unit =
          columnGroupSchemaList(columnGroupSchemaList.toList())

      override fun dataSetSchema(dataSetSchema: IResolvable) {
        cdkBuilder.dataSetSchema(dataSetSchema.let(IResolvable::unwrap))
      }

      override fun dataSetSchema(dataSetSchema: DataSetSchemaProperty) {
        cdkBuilder.dataSetSchema(dataSetSchema.let(DataSetSchemaProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f5c4d17d03c8314b22c5f968e5c47956256e40fd9dc088bdaa8efbbd46a5de96")
      override fun dataSetSchema(dataSetSchema: DataSetSchemaProperty.Builder.() -> Unit): Unit =
          dataSetSchema(DataSetSchemaProperty(dataSetSchema))

      override fun placeholder(placeholder: String) {
        cdkBuilder.placeholder(placeholder)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetConfigurationProperty,
    ) : CdkObject(cdkObject), DataSetConfigurationProperty {
      override fun columnGroupSchemaList(): Any? = unwrap(this).getColumnGroupSchemaList()

      override fun dataSetSchema(): Any? = unwrap(this).getDataSetSchema()

      override fun placeholder(): String? = unwrap(this).getPlaceholder()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataSetConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetConfigurationProperty):
          DataSetConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataSetConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetConfigurationProperty
    }
  }

  public interface BoxPlotVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: BoxPlotChartConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d5a26c8d0a5a0c0abe0b9ff0f72f3a08bf2537aec2bcef25cca505ac23ca5fd4")
      public
          fun chartConfiguration(chartConfiguration: BoxPlotChartConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bcc3419f13549f86ddf4e4b9d152710a2eeb1848f3c261ce077cd462a7a8b005")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b333958a3ad0ed8e7dccbe13d0eec4bfb0d91a65e231e472048dbb583a7b2754")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: BoxPlotChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(BoxPlotChartConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d5a26c8d0a5a0c0abe0b9ff0f72f3a08bf2537aec2bcef25cca505ac23ca5fd4")
      override
          fun chartConfiguration(chartConfiguration: BoxPlotChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(BoxPlotChartConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bcc3419f13549f86ddf4e4b9d152710a2eeb1848f3c261ce077cd462a7a8b005")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b333958a3ad0ed8e7dccbe13d0eec4bfb0d91a65e231e472048dbb583a7b2754")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotVisualProperty,
    ) : CdkObject(cdkObject), BoxPlotVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): BoxPlotVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotVisualProperty):
          BoxPlotVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotVisualProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotVisualProperty
    }
  }

  public interface ComboChartVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: ComboChartConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b658126f002abccc4f2e8ef18ae19bd1b3142938e57cb5d43adc9a3cc5ba9279")
      public
          fun chartConfiguration(chartConfiguration: ComboChartConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c0e527cb2afe4232f3d6cf7b4074e797343de9750151d900366ab5595fa3c68")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("157ef5ecc1fcdce9ec0298c360b22c9987e571e243e06e4bac992908038d9953")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: ComboChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(ComboChartConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b658126f002abccc4f2e8ef18ae19bd1b3142938e57cb5d43adc9a3cc5ba9279")
      override
          fun chartConfiguration(chartConfiguration: ComboChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(ComboChartConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c0e527cb2afe4232f3d6cf7b4074e797343de9750151d900366ab5595fa3c68")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("157ef5ecc1fcdce9ec0298c360b22c9987e571e243e06e4bac992908038d9953")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartVisualProperty,
    ) : CdkObject(cdkObject), ComboChartVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ComboChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartVisualProperty):
          ComboChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComboChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartVisualProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartVisualProperty
    }
  }

  public interface LineChartMarkerStyleSettingsProperty {
    public fun markerColor(): String? = unwrap(this).getMarkerColor()

    public fun markerShape(): String? = unwrap(this).getMarkerShape()

    public fun markerSize(): String? = unwrap(this).getMarkerSize()

    public fun markerVisibility(): String? = unwrap(this).getMarkerVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun markerColor(markerColor: String)

      public fun markerShape(markerShape: String)

      public fun markerSize(markerSize: String)

      public fun markerVisibility(markerVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartMarkerStyleSettingsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartMarkerStyleSettingsProperty.builder()

      override fun markerColor(markerColor: String) {
        cdkBuilder.markerColor(markerColor)
      }

      override fun markerShape(markerShape: String) {
        cdkBuilder.markerShape(markerShape)
      }

      override fun markerSize(markerSize: String) {
        cdkBuilder.markerSize(markerSize)
      }

      override fun markerVisibility(markerVisibility: String) {
        cdkBuilder.markerVisibility(markerVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartMarkerStyleSettingsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartMarkerStyleSettingsProperty,
    ) : CdkObject(cdkObject), LineChartMarkerStyleSettingsProperty {
      override fun markerColor(): String? = unwrap(this).getMarkerColor()

      override fun markerShape(): String? = unwrap(this).getMarkerShape()

      override fun markerSize(): String? = unwrap(this).getMarkerSize()

      override fun markerVisibility(): String? = unwrap(this).getMarkerVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          LineChartMarkerStyleSettingsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartMarkerStyleSettingsProperty):
          LineChartMarkerStyleSettingsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartMarkerStyleSettingsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartMarkerStyleSettingsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartMarkerStyleSettingsProperty
    }
  }

  public interface PivotTotalOptionsProperty {
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    public fun metricHeaderCellStyle(): Any? = unwrap(this).getMetricHeaderCellStyle()

    public fun placement(): String? = unwrap(this).getPlacement()

    public fun scrollStatus(): String? = unwrap(this).getScrollStatus()

    public fun totalAggregationOptions(): Any? = unwrap(this).getTotalAggregationOptions()

    public fun totalCellStyle(): Any? = unwrap(this).getTotalCellStyle()

    public fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

    public fun valueCellStyle(): Any? = unwrap(this).getValueCellStyle()

    @CdkDslMarker
    public interface Builder {
      public fun customLabel(customLabel: String)

      public fun metricHeaderCellStyle(metricHeaderCellStyle: IResolvable)

      public fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3f769b637174884b35a855d5b356dc3fedff4afc046a9303c6b2367bd0ab469d")
      public
          fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty.Builder.() -> Unit)

      public fun placement(placement: String)

      public fun scrollStatus(scrollStatus: String)

      public fun totalAggregationOptions(totalAggregationOptions: IResolvable)

      public fun totalAggregationOptions(totalAggregationOptions: List<Any>)

      public fun totalAggregationOptions(vararg totalAggregationOptions: Any)

      public fun totalCellStyle(totalCellStyle: IResolvable)

      public fun totalCellStyle(totalCellStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f7a0c84bc3e58dca48066cbc85052083978a84646457790a38cf3e4cf9397a39")
      public fun totalCellStyle(totalCellStyle: TableCellStyleProperty.Builder.() -> Unit)

      public fun totalsVisibility(totalsVisibility: String)

      public fun valueCellStyle(valueCellStyle: IResolvable)

      public fun valueCellStyle(valueCellStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4b7450e6ab3e8859a65e776631d7b770192795f941797ed5e914cb2602f0fc3b")
      public fun valueCellStyle(valueCellStyle: TableCellStyleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTotalOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTotalOptionsProperty.builder()

      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      override fun metricHeaderCellStyle(metricHeaderCellStyle: IResolvable) {
        cdkBuilder.metricHeaderCellStyle(metricHeaderCellStyle.let(IResolvable::unwrap))
      }

      override fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty) {
        cdkBuilder.metricHeaderCellStyle(metricHeaderCellStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3f769b637174884b35a855d5b356dc3fedff4afc046a9303c6b2367bd0ab469d")
      override
          fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty.Builder.() -> Unit):
          Unit = metricHeaderCellStyle(TableCellStyleProperty(metricHeaderCellStyle))

      override fun placement(placement: String) {
        cdkBuilder.placement(placement)
      }

      override fun scrollStatus(scrollStatus: String) {
        cdkBuilder.scrollStatus(scrollStatus)
      }

      override fun totalAggregationOptions(totalAggregationOptions: IResolvable) {
        cdkBuilder.totalAggregationOptions(totalAggregationOptions.let(IResolvable::unwrap))
      }

      override fun totalAggregationOptions(totalAggregationOptions: List<Any>) {
        cdkBuilder.totalAggregationOptions(totalAggregationOptions)
      }

      override fun totalAggregationOptions(vararg totalAggregationOptions: Any): Unit =
          totalAggregationOptions(totalAggregationOptions.toList())

      override fun totalCellStyle(totalCellStyle: IResolvable) {
        cdkBuilder.totalCellStyle(totalCellStyle.let(IResolvable::unwrap))
      }

      override fun totalCellStyle(totalCellStyle: TableCellStyleProperty) {
        cdkBuilder.totalCellStyle(totalCellStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f7a0c84bc3e58dca48066cbc85052083978a84646457790a38cf3e4cf9397a39")
      override fun totalCellStyle(totalCellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          totalCellStyle(TableCellStyleProperty(totalCellStyle))

      override fun totalsVisibility(totalsVisibility: String) {
        cdkBuilder.totalsVisibility(totalsVisibility)
      }

      override fun valueCellStyle(valueCellStyle: IResolvable) {
        cdkBuilder.valueCellStyle(valueCellStyle.let(IResolvable::unwrap))
      }

      override fun valueCellStyle(valueCellStyle: TableCellStyleProperty) {
        cdkBuilder.valueCellStyle(valueCellStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4b7450e6ab3e8859a65e776631d7b770192795f941797ed5e914cb2602f0fc3b")
      override fun valueCellStyle(valueCellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          valueCellStyle(TableCellStyleProperty(valueCellStyle))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTotalOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTotalOptionsProperty,
    ) : CdkObject(cdkObject), PivotTotalOptionsProperty {
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      override fun metricHeaderCellStyle(): Any? = unwrap(this).getMetricHeaderCellStyle()

      override fun placement(): String? = unwrap(this).getPlacement()

      override fun scrollStatus(): String? = unwrap(this).getScrollStatus()

      override fun totalAggregationOptions(): Any? = unwrap(this).getTotalAggregationOptions()

      override fun totalCellStyle(): Any? = unwrap(this).getTotalCellStyle()

      override fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

      override fun valueCellStyle(): Any? = unwrap(this).getValueCellStyle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTotalOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTotalOptionsProperty):
          PivotTotalOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTotalOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTotalOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTotalOptionsProperty
    }
  }

  public interface BinWidthOptionsProperty {
    public fun binCountLimit(): Number? = unwrap(this).getBinCountLimit()

    public fun `value`(): Number? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun binCountLimit(binCountLimit: Number)

      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BinWidthOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BinWidthOptionsProperty.builder()

      override fun binCountLimit(binCountLimit: Number) {
        cdkBuilder.binCountLimit(binCountLimit)
      }

      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BinWidthOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BinWidthOptionsProperty,
    ) : CdkObject(cdkObject), BinWidthOptionsProperty {
      override fun binCountLimit(): Number? = unwrap(this).getBinCountLimit()

      override fun `value`(): Number? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): BinWidthOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BinWidthOptionsProperty):
          BinWidthOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BinWidthOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BinWidthOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BinWidthOptionsProperty
    }
  }

  public interface DecimalValueWhenUnsetConfigurationProperty {
    public fun customValue(): Number? = unwrap(this).getCustomValue()

    public fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()

    @CdkDslMarker
    public interface Builder {
      public fun customValue(customValue: Number)

      public fun valueWhenUnsetOption(valueWhenUnsetOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalValueWhenUnsetConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalValueWhenUnsetConfigurationProperty.builder()

      override fun customValue(customValue: Number) {
        cdkBuilder.customValue(customValue)
      }

      override fun valueWhenUnsetOption(valueWhenUnsetOption: String) {
        cdkBuilder.valueWhenUnsetOption(valueWhenUnsetOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalValueWhenUnsetConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalValueWhenUnsetConfigurationProperty,
    ) : CdkObject(cdkObject), DecimalValueWhenUnsetConfigurationProperty {
      override fun customValue(): Number? = unwrap(this).getCustomValue()

      override fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DecimalValueWhenUnsetConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalValueWhenUnsetConfigurationProperty):
          DecimalValueWhenUnsetConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DecimalValueWhenUnsetConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalValueWhenUnsetConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalValueWhenUnsetConfigurationProperty
    }
  }

  public interface FunnelChartAggregatedFieldWellsProperty {
    public fun category(): Any? = unwrap(this).getCategory()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun category(category: IResolvable)

      public fun category(category: List<Any>)

      public fun category(vararg category: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartAggregatedFieldWellsProperty.builder()

      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      override fun category(vararg category: Any): Unit = category(category.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), FunnelChartAggregatedFieldWellsProperty {
      override fun category(): Any? = unwrap(this).getCategory()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FunnelChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartAggregatedFieldWellsProperty):
          FunnelChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FunnelChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartAggregatedFieldWellsProperty
    }
  }

  public interface ArcAxisConfigurationProperty {
    public fun range(): Any? = unwrap(this).getRange()

    public fun reserveRange(): Number? = unwrap(this).getReserveRange()

    @CdkDslMarker
    public interface Builder {
      public fun range(range: IResolvable)

      public fun range(range: ArcAxisDisplayRangeProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ae6712e9cace00cc965fb5d7e933ae868b6199803b712d1b001ab6243f549c23")
      public fun range(range: ArcAxisDisplayRangeProperty.Builder.() -> Unit)

      public fun reserveRange(reserveRange: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisConfigurationProperty.builder()

      override fun range(range: IResolvable) {
        cdkBuilder.range(range.let(IResolvable::unwrap))
      }

      override fun range(range: ArcAxisDisplayRangeProperty) {
        cdkBuilder.range(range.let(ArcAxisDisplayRangeProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ae6712e9cace00cc965fb5d7e933ae868b6199803b712d1b001ab6243f549c23")
      override fun range(range: ArcAxisDisplayRangeProperty.Builder.() -> Unit): Unit =
          range(ArcAxisDisplayRangeProperty(range))

      override fun reserveRange(reserveRange: Number) {
        cdkBuilder.reserveRange(reserveRange)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisConfigurationProperty,
    ) : CdkObject(cdkObject), ArcAxisConfigurationProperty {
      override fun range(): Any? = unwrap(this).getRange()

      override fun reserveRange(): Number? = unwrap(this).getReserveRange()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ArcAxisConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisConfigurationProperty):
          ArcAxisConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ArcAxisConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcAxisConfigurationProperty
    }
  }

  public interface TimeRangeFilterValueProperty {
    public fun parameter(): String? = unwrap(this).getParameter()

    public fun rollingDate(): Any? = unwrap(this).getRollingDate()

    public fun staticValue(): String? = unwrap(this).getStaticValue()

    @CdkDslMarker
    public interface Builder {
      public fun parameter(parameter: String)

      public fun rollingDate(rollingDate: IResolvable)

      public fun rollingDate(rollingDate: RollingDateConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("20a689ffa7440b1757f67553e4f95b35a84eb1b6bfd455f4677442683c815626")
      public fun rollingDate(rollingDate: RollingDateConfigurationProperty.Builder.() -> Unit)

      public fun staticValue(staticValue: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterValueProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterValueProperty.builder()

      override fun parameter(parameter: String) {
        cdkBuilder.parameter(parameter)
      }

      override fun rollingDate(rollingDate: IResolvable) {
        cdkBuilder.rollingDate(rollingDate.let(IResolvable::unwrap))
      }

      override fun rollingDate(rollingDate: RollingDateConfigurationProperty) {
        cdkBuilder.rollingDate(rollingDate.let(RollingDateConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("20a689ffa7440b1757f67553e4f95b35a84eb1b6bfd455f4677442683c815626")
      override fun rollingDate(rollingDate: RollingDateConfigurationProperty.Builder.() -> Unit):
          Unit = rollingDate(RollingDateConfigurationProperty(rollingDate))

      override fun staticValue(staticValue: String) {
        cdkBuilder.staticValue(staticValue)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterValueProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterValueProperty,
    ) : CdkObject(cdkObject), TimeRangeFilterValueProperty {
      override fun parameter(): String? = unwrap(this).getParameter()

      override fun rollingDate(): Any? = unwrap(this).getRollingDate()

      override fun staticValue(): String? = unwrap(this).getStaticValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TimeRangeFilterValueProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterValueProperty):
          TimeRangeFilterValueProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TimeRangeFilterValueProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterValueProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeFilterValueProperty
    }
  }

  public interface AssetOptionsProperty {
    public fun timezone(): String? = unwrap(this).getTimezone()

    public fun weekStart(): String? = unwrap(this).getWeekStart()

    @CdkDslMarker
    public interface Builder {
      public fun timezone(timezone: String)

      public fun weekStart(weekStart: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AssetOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AssetOptionsProperty.builder()

      override fun timezone(timezone: String) {
        cdkBuilder.timezone(timezone)
      }

      override fun weekStart(weekStart: String) {
        cdkBuilder.weekStart(weekStart)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AssetOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AssetOptionsProperty,
    ) : CdkObject(cdkObject), AssetOptionsProperty {
      override fun timezone(): String? = unwrap(this).getTimezone()

      override fun weekStart(): String? = unwrap(this).getWeekStart()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AssetOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AssetOptionsProperty):
          AssetOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AssetOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AssetOptionsProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AssetOptionsProperty
    }
  }

  public interface TemplateVersionProperty {
    public fun createdTime(): String? = unwrap(this).getCreatedTime()

    public fun dataSetConfigurations(): Any? = unwrap(this).getDataSetConfigurations()

    public fun description(): String? = unwrap(this).getDescription()

    public fun errors(): Any? = unwrap(this).getErrors()

    public fun sheets(): Any? = unwrap(this).getSheets()

    public fun sourceEntityArn(): String? = unwrap(this).getSourceEntityArn()

    public fun status(): String? = unwrap(this).getStatus()

    public fun themeArn(): String? = unwrap(this).getThemeArn()

    public fun versionNumber(): Number? = unwrap(this).getVersionNumber()

    @CdkDslMarker
    public interface Builder {
      public fun createdTime(createdTime: String)

      public fun dataSetConfigurations(dataSetConfigurations: IResolvable)

      public fun dataSetConfigurations(dataSetConfigurations: List<Any>)

      public fun dataSetConfigurations(vararg dataSetConfigurations: Any)

      public fun description(description: String)

      public fun errors(errors: IResolvable)

      public fun errors(errors: List<Any>)

      public fun errors(vararg errors: Any)

      public fun sheets(sheets: IResolvable)

      public fun sheets(sheets: List<Any>)

      public fun sheets(vararg sheets: Any)

      public fun sourceEntityArn(sourceEntityArn: String)

      public fun status(status: String)

      public fun themeArn(themeArn: String)

      public fun versionNumber(versionNumber: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionProperty.builder()

      override fun createdTime(createdTime: String) {
        cdkBuilder.createdTime(createdTime)
      }

      override fun dataSetConfigurations(dataSetConfigurations: IResolvable) {
        cdkBuilder.dataSetConfigurations(dataSetConfigurations.let(IResolvable::unwrap))
      }

      override fun dataSetConfigurations(dataSetConfigurations: List<Any>) {
        cdkBuilder.dataSetConfigurations(dataSetConfigurations)
      }

      override fun dataSetConfigurations(vararg dataSetConfigurations: Any): Unit =
          dataSetConfigurations(dataSetConfigurations.toList())

      override fun description(description: String) {
        cdkBuilder.description(description)
      }

      override fun errors(errors: IResolvable) {
        cdkBuilder.errors(errors.let(IResolvable::unwrap))
      }

      override fun errors(errors: List<Any>) {
        cdkBuilder.errors(errors)
      }

      override fun errors(vararg errors: Any): Unit = errors(errors.toList())

      override fun sheets(sheets: IResolvable) {
        cdkBuilder.sheets(sheets.let(IResolvable::unwrap))
      }

      override fun sheets(sheets: List<Any>) {
        cdkBuilder.sheets(sheets)
      }

      override fun sheets(vararg sheets: Any): Unit = sheets(sheets.toList())

      override fun sourceEntityArn(sourceEntityArn: String) {
        cdkBuilder.sourceEntityArn(sourceEntityArn)
      }

      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      override fun themeArn(themeArn: String) {
        cdkBuilder.themeArn(themeArn)
      }

      override fun versionNumber(versionNumber: Number) {
        cdkBuilder.versionNumber(versionNumber)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionProperty,
    ) : CdkObject(cdkObject), TemplateVersionProperty {
      override fun createdTime(): String? = unwrap(this).getCreatedTime()

      override fun dataSetConfigurations(): Any? = unwrap(this).getDataSetConfigurations()

      override fun description(): String? = unwrap(this).getDescription()

      override fun errors(): Any? = unwrap(this).getErrors()

      override fun sheets(): Any? = unwrap(this).getSheets()

      override fun sourceEntityArn(): String? = unwrap(this).getSourceEntityArn()

      override fun status(): String? = unwrap(this).getStatus()

      override fun themeArn(): String? = unwrap(this).getThemeArn()

      override fun versionNumber(): Number? = unwrap(this).getVersionNumber()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TemplateVersionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionProperty):
          TemplateVersionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TemplateVersionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionProperty
    }
  }

  public interface LineChartVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: LineChartConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c786208d45b900de6b4dfd98cc1d4aec850aa67b34fa5f9e5ced75de6299153")
      public
          fun chartConfiguration(chartConfiguration: LineChartConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("72128523daa8e144977845bf59e00d5aab395f67a7e6dfa785b047f7ded10010")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9862ebce6c8f408420c8bb6de1cfa9624b28fbe06c6bce3274d01a406340c374")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: LineChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(LineChartConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c786208d45b900de6b4dfd98cc1d4aec850aa67b34fa5f9e5ced75de6299153")
      override
          fun chartConfiguration(chartConfiguration: LineChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(LineChartConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("72128523daa8e144977845bf59e00d5aab395f67a7e6dfa785b047f7ded10010")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9862ebce6c8f408420c8bb6de1cfa9624b28fbe06c6bce3274d01a406340c374")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartVisualProperty,
    ) : CdkObject(cdkObject), LineChartVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): LineChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartVisualProperty):
          LineChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartVisualProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartVisualProperty
    }
  }

  public interface ColumnTooltipItemProperty {
    public fun aggregation(): Any? = unwrap(this).getAggregation()

    public fun column(): Any

    public fun label(): String? = unwrap(this).getLabel()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun aggregation(aggregation: IResolvable)

      public fun aggregation(aggregation: AggregationFunctionProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3294505bf378e5c60ab5312886ede2286db1e4be51ded976aa1dd15414103730")
      public fun aggregation(aggregation: AggregationFunctionProperty.Builder.() -> Unit)

      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7af96bdf00801f6c91c914c94b2c18335165233dc5a156da0d4515e3f54e83c0")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun label(label: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnTooltipItemProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnTooltipItemProperty.builder()

      override fun aggregation(aggregation: IResolvable) {
        cdkBuilder.aggregation(aggregation.let(IResolvable::unwrap))
      }

      override fun aggregation(aggregation: AggregationFunctionProperty) {
        cdkBuilder.aggregation(aggregation.let(AggregationFunctionProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3294505bf378e5c60ab5312886ede2286db1e4be51ded976aa1dd15414103730")
      override fun aggregation(aggregation: AggregationFunctionProperty.Builder.() -> Unit): Unit =
          aggregation(AggregationFunctionProperty(aggregation))

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7af96bdf00801f6c91c914c94b2c18335165233dc5a156da0d4515e3f54e83c0")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun label(label: String) {
        cdkBuilder.label(label)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnTooltipItemProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnTooltipItemProperty,
    ) : CdkObject(cdkObject), ColumnTooltipItemProperty {
      override fun aggregation(): Any? = unwrap(this).getAggregation()

      override fun column(): Any = unwrap(this).getColumn()

      override fun label(): String? = unwrap(this).getLabel()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnTooltipItemProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnTooltipItemProperty):
          ColumnTooltipItemProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnTooltipItemProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnTooltipItemProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnTooltipItemProperty
    }
  }

  public interface SectionAfterPageBreakProperty {
    public fun status(): String? = unwrap(this).getStatus()

    @CdkDslMarker
    public interface Builder {
      public fun status(status: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionAfterPageBreakProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionAfterPageBreakProperty.builder()

      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionAfterPageBreakProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionAfterPageBreakProperty,
    ) : CdkObject(cdkObject), SectionAfterPageBreakProperty {
      override fun status(): String? = unwrap(this).getStatus()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SectionAfterPageBreakProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SectionAfterPageBreakProperty):
          SectionAfterPageBreakProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionAfterPageBreakProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionAfterPageBreakProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionAfterPageBreakProperty
    }
  }

  public interface LocalNavigationConfigurationProperty {
    public fun targetSheetId(): String

    @CdkDslMarker
    public interface Builder {
      public fun targetSheetId(targetSheetId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LocalNavigationConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LocalNavigationConfigurationProperty.builder()

      override fun targetSheetId(targetSheetId: String) {
        cdkBuilder.targetSheetId(targetSheetId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LocalNavigationConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LocalNavigationConfigurationProperty,
    ) : CdkObject(cdkObject), LocalNavigationConfigurationProperty {
      override fun targetSheetId(): String = unwrap(this).getTargetSheetId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          LocalNavigationConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LocalNavigationConfigurationProperty):
          LocalNavigationConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LocalNavigationConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LocalNavigationConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LocalNavigationConfigurationProperty
    }
  }

  public interface ColumnSchemaProperty {
    public fun dataType(): String? = unwrap(this).getDataType()

    public fun geographicRole(): String? = unwrap(this).getGeographicRole()

    public fun name(): String? = unwrap(this).getName()

    @CdkDslMarker
    public interface Builder {
      public fun dataType(dataType: String)

      public fun geographicRole(geographicRole: String)

      public fun name(name: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSchemaProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSchemaProperty.builder()

      override fun dataType(dataType: String) {
        cdkBuilder.dataType(dataType)
      }

      override fun geographicRole(geographicRole: String) {
        cdkBuilder.geographicRole(geographicRole)
      }

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSchemaProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSchemaProperty,
    ) : CdkObject(cdkObject), ColumnSchemaProperty {
      override fun dataType(): String? = unwrap(this).getDataType()

      override fun geographicRole(): String? = unwrap(this).getGeographicRole()

      override fun name(): String? = unwrap(this).getName()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnSchemaProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSchemaProperty):
          ColumnSchemaProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnSchemaProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSchemaProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSchemaProperty
    }
  }

  public interface SectionPageBreakConfigurationProperty {
    public fun after(): Any? = unwrap(this).getAfter()

    @CdkDslMarker
    public interface Builder {
      public fun after(after: IResolvable)

      public fun after(after: SectionAfterPageBreakProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4d33de880f85946a24fcabae98168207a3084359b9c02f1d20406814265521c4")
      public fun after(after: SectionAfterPageBreakProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionPageBreakConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionPageBreakConfigurationProperty.builder()

      override fun after(after: IResolvable) {
        cdkBuilder.after(after.let(IResolvable::unwrap))
      }

      override fun after(after: SectionAfterPageBreakProperty) {
        cdkBuilder.after(after.let(SectionAfterPageBreakProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4d33de880f85946a24fcabae98168207a3084359b9c02f1d20406814265521c4")
      override fun after(after: SectionAfterPageBreakProperty.Builder.() -> Unit): Unit =
          after(SectionAfterPageBreakProperty(after))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionPageBreakConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionPageBreakConfigurationProperty,
    ) : CdkObject(cdkObject), SectionPageBreakConfigurationProperty {
      override fun after(): Any? = unwrap(this).getAfter()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SectionPageBreakConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SectionPageBreakConfigurationProperty):
          SectionPageBreakConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionPageBreakConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionPageBreakConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionPageBreakConfigurationProperty
    }
  }

  public interface FilterGroupProperty {
    public fun crossDataset(): String

    public fun filterGroupId(): String

    public fun filters(): Any

    public fun scopeConfiguration(): Any

    public fun status(): String? = unwrap(this).getStatus()

    @CdkDslMarker
    public interface Builder {
      public fun crossDataset(crossDataset: String)

      public fun filterGroupId(filterGroupId: String)

      public fun filters(filters: IResolvable)

      public fun filters(filters: List<Any>)

      public fun filters(vararg filters: Any)

      public fun scopeConfiguration(scopeConfiguration: IResolvable)

      public fun scopeConfiguration(scopeConfiguration: FilterScopeConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("772d04e8db9bf822b54c9e3c2b4cbdebebf81c30a66c550479660c8b8d449a53")
      public
          fun scopeConfiguration(scopeConfiguration: FilterScopeConfigurationProperty.Builder.() -> Unit)

      public fun status(status: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterGroupProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterGroupProperty.builder()

      override fun crossDataset(crossDataset: String) {
        cdkBuilder.crossDataset(crossDataset)
      }

      override fun filterGroupId(filterGroupId: String) {
        cdkBuilder.filterGroupId(filterGroupId)
      }

      override fun filters(filters: IResolvable) {
        cdkBuilder.filters(filters.let(IResolvable::unwrap))
      }

      override fun filters(filters: List<Any>) {
        cdkBuilder.filters(filters)
      }

      override fun filters(vararg filters: Any): Unit = filters(filters.toList())

      override fun scopeConfiguration(scopeConfiguration: IResolvable) {
        cdkBuilder.scopeConfiguration(scopeConfiguration.let(IResolvable::unwrap))
      }

      override fun scopeConfiguration(scopeConfiguration: FilterScopeConfigurationProperty) {
        cdkBuilder.scopeConfiguration(scopeConfiguration.let(FilterScopeConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("772d04e8db9bf822b54c9e3c2b4cbdebebf81c30a66c550479660c8b8d449a53")
      override
          fun scopeConfiguration(scopeConfiguration: FilterScopeConfigurationProperty.Builder.() -> Unit):
          Unit = scopeConfiguration(FilterScopeConfigurationProperty(scopeConfiguration))

      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.FilterGroupProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterGroupProperty,
    ) : CdkObject(cdkObject), FilterGroupProperty {
      override fun crossDataset(): String = unwrap(this).getCrossDataset()

      override fun filterGroupId(): String = unwrap(this).getFilterGroupId()

      override fun filters(): Any = unwrap(this).getFilters()

      override fun scopeConfiguration(): Any = unwrap(this).getScopeConfiguration()

      override fun status(): String? = unwrap(this).getStatus()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilterGroupProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterGroupProperty):
          FilterGroupProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterGroupProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterGroupProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterGroupProperty
    }
  }

  public interface HistogramFieldWellsProperty {
    public fun histogramAggregatedFieldWells(): Any? =
        unwrap(this).getHistogramAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun histogramAggregatedFieldWells(histogramAggregatedFieldWells: IResolvable)

      public
          fun histogramAggregatedFieldWells(histogramAggregatedFieldWells: HistogramAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1a81f3f1adde4358a217c81df59099b7e3eae6feff5e116e973dc81d7d4b8e1d")
      public
          fun histogramAggregatedFieldWells(histogramAggregatedFieldWells: HistogramAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramFieldWellsProperty.builder()

      override fun histogramAggregatedFieldWells(histogramAggregatedFieldWells: IResolvable) {
        cdkBuilder.histogramAggregatedFieldWells(histogramAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun histogramAggregatedFieldWells(histogramAggregatedFieldWells: HistogramAggregatedFieldWellsProperty) {
        cdkBuilder.histogramAggregatedFieldWells(histogramAggregatedFieldWells.let(HistogramAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1a81f3f1adde4358a217c81df59099b7e3eae6feff5e116e973dc81d7d4b8e1d")
      override
          fun histogramAggregatedFieldWells(histogramAggregatedFieldWells: HistogramAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          histogramAggregatedFieldWells(HistogramAggregatedFieldWellsProperty(histogramAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramFieldWellsProperty,
    ) : CdkObject(cdkObject), HistogramFieldWellsProperty {
      override fun histogramAggregatedFieldWells(): Any? =
          unwrap(this).getHistogramAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): HistogramFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramFieldWellsProperty):
          HistogramFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HistogramFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramFieldWellsProperty
    }
  }

  public interface DonutOptionsProperty {
    public fun arcOptions(): Any? = unwrap(this).getArcOptions()

    public fun donutCenterOptions(): Any? = unwrap(this).getDonutCenterOptions()

    @CdkDslMarker
    public interface Builder {
      public fun arcOptions(arcOptions: IResolvable)

      public fun arcOptions(arcOptions: ArcOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7d00ed0db99f9f43b362ae2f4d05c318c9ecfefcfa5bbd0192e05556058b2a6c")
      public fun arcOptions(arcOptions: ArcOptionsProperty.Builder.() -> Unit)

      public fun donutCenterOptions(donutCenterOptions: IResolvable)

      public fun donutCenterOptions(donutCenterOptions: DonutCenterOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("60650495c671845d753c59f22cb648345817d8bdeea81e205f05d01719344fe8")
      public
          fun donutCenterOptions(donutCenterOptions: DonutCenterOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DonutOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DonutOptionsProperty.builder()

      override fun arcOptions(arcOptions: IResolvable) {
        cdkBuilder.arcOptions(arcOptions.let(IResolvable::unwrap))
      }

      override fun arcOptions(arcOptions: ArcOptionsProperty) {
        cdkBuilder.arcOptions(arcOptions.let(ArcOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7d00ed0db99f9f43b362ae2f4d05c318c9ecfefcfa5bbd0192e05556058b2a6c")
      override fun arcOptions(arcOptions: ArcOptionsProperty.Builder.() -> Unit): Unit =
          arcOptions(ArcOptionsProperty(arcOptions))

      override fun donutCenterOptions(donutCenterOptions: IResolvable) {
        cdkBuilder.donutCenterOptions(donutCenterOptions.let(IResolvable::unwrap))
      }

      override fun donutCenterOptions(donutCenterOptions: DonutCenterOptionsProperty) {
        cdkBuilder.donutCenterOptions(donutCenterOptions.let(DonutCenterOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("60650495c671845d753c59f22cb648345817d8bdeea81e205f05d01719344fe8")
      override
          fun donutCenterOptions(donutCenterOptions: DonutCenterOptionsProperty.Builder.() -> Unit):
          Unit = donutCenterOptions(DonutCenterOptionsProperty(donutCenterOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DonutOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DonutOptionsProperty,
    ) : CdkObject(cdkObject), DonutOptionsProperty {
      override fun arcOptions(): Any? = unwrap(this).getArcOptions()

      override fun donutCenterOptions(): Any? = unwrap(this).getDonutCenterOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DonutOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DonutOptionsProperty):
          DonutOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DonutOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DonutOptionsProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DonutOptionsProperty
    }
  }

  public interface MissingDataConfigurationProperty {
    public fun treatmentOption(): String? = unwrap(this).getTreatmentOption()

    @CdkDslMarker
    public interface Builder {
      public fun treatmentOption(treatmentOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MissingDataConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.MissingDataConfigurationProperty.builder()

      override fun treatmentOption(treatmentOption: String) {
        cdkBuilder.treatmentOption(treatmentOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.MissingDataConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MissingDataConfigurationProperty,
    ) : CdkObject(cdkObject), MissingDataConfigurationProperty {
      override fun treatmentOption(): String? = unwrap(this).getTreatmentOption()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): MissingDataConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.MissingDataConfigurationProperty):
          MissingDataConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MissingDataConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.MissingDataConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.MissingDataConfigurationProperty
    }
  }

  public interface CategoryFilterConfigurationProperty {
    public fun customFilterConfiguration(): Any? = unwrap(this).getCustomFilterConfiguration()

    public fun customFilterListConfiguration(): Any? =
        unwrap(this).getCustomFilterListConfiguration()

    public fun filterListConfiguration(): Any? = unwrap(this).getFilterListConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun customFilterConfiguration(customFilterConfiguration: IResolvable)

      public
          fun customFilterConfiguration(customFilterConfiguration: CustomFilterConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("602bb778ce98dd9404df96875557215b9abf721bf8f3656a77e2adf666829126")
      public
          fun customFilterConfiguration(customFilterConfiguration: CustomFilterConfigurationProperty.Builder.() -> Unit)

      public fun customFilterListConfiguration(customFilterListConfiguration: IResolvable)

      public
          fun customFilterListConfiguration(customFilterListConfiguration: CustomFilterListConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8f720b1132cebc0259a310ba6699908c51f8d10cb4a36e971efeae5bd2eddbfa")
      public
          fun customFilterListConfiguration(customFilterListConfiguration: CustomFilterListConfigurationProperty.Builder.() -> Unit)

      public fun filterListConfiguration(filterListConfiguration: IResolvable)

      public fun filterListConfiguration(filterListConfiguration: FilterListConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd3701b90b807d16134ea67033871c085ed208d85254cd93987a1faaff986eff")
      public
          fun filterListConfiguration(filterListConfiguration: FilterListConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterConfigurationProperty.builder()

      override fun customFilterConfiguration(customFilterConfiguration: IResolvable) {
        cdkBuilder.customFilterConfiguration(customFilterConfiguration.let(IResolvable::unwrap))
      }

      override
          fun customFilterConfiguration(customFilterConfiguration: CustomFilterConfigurationProperty) {
        cdkBuilder.customFilterConfiguration(customFilterConfiguration.let(CustomFilterConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("602bb778ce98dd9404df96875557215b9abf721bf8f3656a77e2adf666829126")
      override
          fun customFilterConfiguration(customFilterConfiguration: CustomFilterConfigurationProperty.Builder.() -> Unit):
          Unit =
          customFilterConfiguration(CustomFilterConfigurationProperty(customFilterConfiguration))

      override fun customFilterListConfiguration(customFilterListConfiguration: IResolvable) {
        cdkBuilder.customFilterListConfiguration(customFilterListConfiguration.let(IResolvable::unwrap))
      }

      override
          fun customFilterListConfiguration(customFilterListConfiguration: CustomFilterListConfigurationProperty) {
        cdkBuilder.customFilterListConfiguration(customFilterListConfiguration.let(CustomFilterListConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8f720b1132cebc0259a310ba6699908c51f8d10cb4a36e971efeae5bd2eddbfa")
      override
          fun customFilterListConfiguration(customFilterListConfiguration: CustomFilterListConfigurationProperty.Builder.() -> Unit):
          Unit =
          customFilterListConfiguration(CustomFilterListConfigurationProperty(customFilterListConfiguration))

      override fun filterListConfiguration(filterListConfiguration: IResolvable) {
        cdkBuilder.filterListConfiguration(filterListConfiguration.let(IResolvable::unwrap))
      }

      override
          fun filterListConfiguration(filterListConfiguration: FilterListConfigurationProperty) {
        cdkBuilder.filterListConfiguration(filterListConfiguration.let(FilterListConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd3701b90b807d16134ea67033871c085ed208d85254cd93987a1faaff986eff")
      override
          fun filterListConfiguration(filterListConfiguration: FilterListConfigurationProperty.Builder.() -> Unit):
          Unit = filterListConfiguration(FilterListConfigurationProperty(filterListConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterConfigurationProperty,
    ) : CdkObject(cdkObject), CategoryFilterConfigurationProperty {
      override fun customFilterConfiguration(): Any? = unwrap(this).getCustomFilterConfiguration()

      override fun customFilterListConfiguration(): Any? =
          unwrap(this).getCustomFilterListConfiguration()

      override fun filterListConfiguration(): Any? = unwrap(this).getFilterListConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          CategoryFilterConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterConfigurationProperty):
          CategoryFilterConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CategoryFilterConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterConfigurationProperty
    }
  }

  public interface ChartAxisLabelOptionsProperty {
    public fun axisLabelOptions(): Any? = unwrap(this).getAxisLabelOptions()

    public fun sortIconVisibility(): String? = unwrap(this).getSortIconVisibility()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun axisLabelOptions(axisLabelOptions: IResolvable)

      public fun axisLabelOptions(axisLabelOptions: List<Any>)

      public fun axisLabelOptions(vararg axisLabelOptions: Any)

      public fun sortIconVisibility(sortIconVisibility: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ChartAxisLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ChartAxisLabelOptionsProperty.builder()

      override fun axisLabelOptions(axisLabelOptions: IResolvable) {
        cdkBuilder.axisLabelOptions(axisLabelOptions.let(IResolvable::unwrap))
      }

      override fun axisLabelOptions(axisLabelOptions: List<Any>) {
        cdkBuilder.axisLabelOptions(axisLabelOptions)
      }

      override fun axisLabelOptions(vararg axisLabelOptions: Any): Unit =
          axisLabelOptions(axisLabelOptions.toList())

      override fun sortIconVisibility(sortIconVisibility: String) {
        cdkBuilder.sortIconVisibility(sortIconVisibility)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ChartAxisLabelOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ChartAxisLabelOptionsProperty,
    ) : CdkObject(cdkObject), ChartAxisLabelOptionsProperty {
      override fun axisLabelOptions(): Any? = unwrap(this).getAxisLabelOptions()

      override fun sortIconVisibility(): String? = unwrap(this).getSortIconVisibility()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ChartAxisLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ChartAxisLabelOptionsProperty):
          ChartAxisLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ChartAxisLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ChartAxisLabelOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ChartAxisLabelOptionsProperty
    }
  }

  public interface FreeFormLayoutScreenCanvasSizeOptionsProperty {
    public fun optimizedViewPortWidth(): String

    @CdkDslMarker
    public interface Builder {
      public fun optimizedViewPortWidth(optimizedViewPortWidth: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutScreenCanvasSizeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutScreenCanvasSizeOptionsProperty.builder()

      override fun optimizedViewPortWidth(optimizedViewPortWidth: String) {
        cdkBuilder.optimizedViewPortWidth(optimizedViewPortWidth)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutScreenCanvasSizeOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutScreenCanvasSizeOptionsProperty,
    ) : CdkObject(cdkObject), FreeFormLayoutScreenCanvasSizeOptionsProperty {
      override fun optimizedViewPortWidth(): String = unwrap(this).getOptimizedViewPortWidth()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FreeFormLayoutScreenCanvasSizeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutScreenCanvasSizeOptionsProperty):
          FreeFormLayoutScreenCanvasSizeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormLayoutScreenCanvasSizeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutScreenCanvasSizeOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutScreenCanvasSizeOptionsProperty
    }
  }

  public interface GradientColorProperty {
    public fun stops(): Any? = unwrap(this).getStops()

    @CdkDslMarker
    public interface Builder {
      public fun stops(stops: IResolvable)

      public fun stops(stops: List<Any>)

      public fun stops(vararg stops: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GradientColorProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GradientColorProperty.builder()

      override fun stops(stops: IResolvable) {
        cdkBuilder.stops(stops.let(IResolvable::unwrap))
      }

      override fun stops(stops: List<Any>) {
        cdkBuilder.stops(stops)
      }

      override fun stops(vararg stops: Any): Unit = stops(stops.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GradientColorProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GradientColorProperty,
    ) : CdkObject(cdkObject), GradientColorProperty {
      override fun stops(): Any? = unwrap(this).getStops()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GradientColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GradientColorProperty):
          GradientColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GradientColorProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GradientColorProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GradientColorProperty
    }
  }

  public interface KPIConfigurationProperty {
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun kpiOptions(): Any? = unwrap(this).getKpiOptions()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: KPIFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("71d731ffde39fcf4c4c7841b0f179aafcacb1ff439870b1bae1e17965e4024e2")
      public fun fieldWells(fieldWells: KPIFieldWellsProperty.Builder.() -> Unit)

      public fun kpiOptions(kpiOptions: IResolvable)

      public fun kpiOptions(kpiOptions: KPIOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9fe9c5feca5c0b241e1c4f4bc348b61759e728e2bc99c33dd900ef5bf4d33b52")
      public fun kpiOptions(kpiOptions: KPIOptionsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: KPISortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("48c67a00d4b9a5510038cbb0477118a6870cb31afa9c8a0341fb32c8ef432d82")
      public
          fun sortConfiguration(sortConfiguration: KPISortConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConfigurationProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConfigurationProperty.builder()

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: KPIFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(KPIFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("71d731ffde39fcf4c4c7841b0f179aafcacb1ff439870b1bae1e17965e4024e2")
      override fun fieldWells(fieldWells: KPIFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(KPIFieldWellsProperty(fieldWells))

      override fun kpiOptions(kpiOptions: IResolvable) {
        cdkBuilder.kpiOptions(kpiOptions.let(IResolvable::unwrap))
      }

      override fun kpiOptions(kpiOptions: KPIOptionsProperty) {
        cdkBuilder.kpiOptions(kpiOptions.let(KPIOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9fe9c5feca5c0b241e1c4f4bc348b61759e728e2bc99c33dd900ef5bf4d33b52")
      override fun kpiOptions(kpiOptions: KPIOptionsProperty.Builder.() -> Unit): Unit =
          kpiOptions(KPIOptionsProperty(kpiOptions))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: KPISortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(KPISortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("48c67a00d4b9a5510038cbb0477118a6870cb31afa9c8a0341fb32c8ef432d82")
      override
          fun sortConfiguration(sortConfiguration: KPISortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(KPISortConfigurationProperty(sortConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConfigurationProperty,
    ) : CdkObject(cdkObject), KPIConfigurationProperty {
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun kpiOptions(): Any? = unwrap(this).getKpiOptions()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): KPIConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConfigurationProperty):
          KPIConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConfigurationProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConfigurationProperty
    }
  }

  public interface LineChartSortConfigurationProperty {
    public fun categoryItemsLimitConfiguration(): Any? =
        unwrap(this).getCategoryItemsLimitConfiguration()

    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    public fun colorItemsLimitConfiguration(): Any? = unwrap(this).getColorItemsLimitConfiguration()

    public fun smallMultiplesLimitConfiguration(): Any? =
        unwrap(this).getSmallMultiplesLimitConfiguration()

    public fun smallMultiplesSort(): Any? = unwrap(this).getSmallMultiplesSort()

    @CdkDslMarker
    public interface Builder {
      public fun categoryItemsLimitConfiguration(categoryItemsLimitConfiguration: IResolvable)

      public
          fun categoryItemsLimitConfiguration(categoryItemsLimitConfiguration: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f4a66d98e1a48dc1e0d1275fff3ed39e53b498a0d0e00ebdea836ccac4f0281a")
      public
          fun categoryItemsLimitConfiguration(categoryItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun categorySort(categorySort: IResolvable)

      public fun categorySort(categorySort: List<Any>)

      public fun categorySort(vararg categorySort: Any)

      public fun colorItemsLimitConfiguration(colorItemsLimitConfiguration: IResolvable)

      public
          fun colorItemsLimitConfiguration(colorItemsLimitConfiguration: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("06a3ce0a900e8471a9d9a470dadb1aaeb8a5ff7c1a71dea668e69c563dfcf61c")
      public
          fun colorItemsLimitConfiguration(colorItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: IResolvable)

      public
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ec6cb9c50aba6dc83d9b480231131df5f54fc317c0ad34f8211de3d362dc5d0b")
      public
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun smallMultiplesSort(smallMultiplesSort: IResolvable)

      public fun smallMultiplesSort(smallMultiplesSort: List<Any>)

      public fun smallMultiplesSort(vararg smallMultiplesSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSortConfigurationProperty.builder()

      override fun categoryItemsLimitConfiguration(categoryItemsLimitConfiguration: IResolvable) {
        cdkBuilder.categoryItemsLimitConfiguration(categoryItemsLimitConfiguration.let(IResolvable::unwrap))
      }

      override
          fun categoryItemsLimitConfiguration(categoryItemsLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimitConfiguration(categoryItemsLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f4a66d98e1a48dc1e0d1275fff3ed39e53b498a0d0e00ebdea836ccac4f0281a")
      override
          fun categoryItemsLimitConfiguration(categoryItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          categoryItemsLimitConfiguration(ItemsLimitConfigurationProperty(categoryItemsLimitConfiguration))

      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      override fun colorItemsLimitConfiguration(colorItemsLimitConfiguration: IResolvable) {
        cdkBuilder.colorItemsLimitConfiguration(colorItemsLimitConfiguration.let(IResolvable::unwrap))
      }

      override
          fun colorItemsLimitConfiguration(colorItemsLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.colorItemsLimitConfiguration(colorItemsLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("06a3ce0a900e8471a9d9a470dadb1aaeb8a5ff7c1a71dea668e69c563dfcf61c")
      override
          fun colorItemsLimitConfiguration(colorItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          colorItemsLimitConfiguration(ItemsLimitConfigurationProperty(colorItemsLimitConfiguration))

      override fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: IResolvable) {
        cdkBuilder.smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration.let(IResolvable::unwrap))
      }

      override
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ec6cb9c50aba6dc83d9b480231131df5f54fc317c0ad34f8211de3d362dc5d0b")
      override
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty(smallMultiplesLimitConfiguration))

      override fun smallMultiplesSort(smallMultiplesSort: IResolvable) {
        cdkBuilder.smallMultiplesSort(smallMultiplesSort.let(IResolvable::unwrap))
      }

      override fun smallMultiplesSort(smallMultiplesSort: List<Any>) {
        cdkBuilder.smallMultiplesSort(smallMultiplesSort)
      }

      override fun smallMultiplesSort(vararg smallMultiplesSort: Any): Unit =
          smallMultiplesSort(smallMultiplesSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSortConfigurationProperty,
    ) : CdkObject(cdkObject), LineChartSortConfigurationProperty {
      override fun categoryItemsLimitConfiguration(): Any? =
          unwrap(this).getCategoryItemsLimitConfiguration()

      override fun categorySort(): Any? = unwrap(this).getCategorySort()

      override fun colorItemsLimitConfiguration(): Any? =
          unwrap(this).getColorItemsLimitConfiguration()

      override fun smallMultiplesLimitConfiguration(): Any? =
          unwrap(this).getSmallMultiplesLimitConfiguration()

      override fun smallMultiplesSort(): Any? = unwrap(this).getSmallMultiplesSort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          LineChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSortConfigurationProperty):
          LineChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSortConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSortConfigurationProperty
    }
  }

  public interface KPIComparisonValueConditionalFormattingProperty {
    public fun icon(): Any? = unwrap(this).getIcon()

    public fun textColor(): Any? = unwrap(this).getTextColor()

    @CdkDslMarker
    public interface Builder {
      public fun icon(icon: IResolvable)

      public fun icon(icon: ConditionalFormattingIconProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a49265066e2f0d529570fd90359ffc7a27762c5e9453d167993115008a23c904")
      public fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit)

      public fun textColor(textColor: IResolvable)

      public fun textColor(textColor: ConditionalFormattingColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47600c1aa7d470c6da1fcebe5bb1d20f3358204bc81fba7c18dbf859ba582a41")
      public fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIComparisonValueConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIComparisonValueConditionalFormattingProperty.builder()

      override fun icon(icon: IResolvable) {
        cdkBuilder.icon(icon.let(IResolvable::unwrap))
      }

      override fun icon(icon: ConditionalFormattingIconProperty) {
        cdkBuilder.icon(icon.let(ConditionalFormattingIconProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a49265066e2f0d529570fd90359ffc7a27762c5e9453d167993115008a23c904")
      override fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit): Unit =
          icon(ConditionalFormattingIconProperty(icon))

      override fun textColor(textColor: IResolvable) {
        cdkBuilder.textColor(textColor.let(IResolvable::unwrap))
      }

      override fun textColor(textColor: ConditionalFormattingColorProperty) {
        cdkBuilder.textColor(textColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47600c1aa7d470c6da1fcebe5bb1d20f3358204bc81fba7c18dbf859ba582a41")
      override fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit): Unit
          = textColor(ConditionalFormattingColorProperty(textColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIComparisonValueConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIComparisonValueConditionalFormattingProperty,
    ) : CdkObject(cdkObject), KPIComparisonValueConditionalFormattingProperty {
      override fun icon(): Any? = unwrap(this).getIcon()

      override fun textColor(): Any? = unwrap(this).getTextColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          KPIComparisonValueConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPIComparisonValueConditionalFormattingProperty):
          KPIComparisonValueConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIComparisonValueConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIComparisonValueConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIComparisonValueConditionalFormattingProperty
    }
  }

  public interface LineChartSeriesSettingsProperty {
    public fun lineStyleSettings(): Any? = unwrap(this).getLineStyleSettings()

    public fun markerStyleSettings(): Any? = unwrap(this).getMarkerStyleSettings()

    @CdkDslMarker
    public interface Builder {
      public fun lineStyleSettings(lineStyleSettings: IResolvable)

      public fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f3cefa4d1aba9374562454d4d36a34dcccb81dffe31d78968e862d2880e103d")
      public
          fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty.Builder.() -> Unit)

      public fun markerStyleSettings(markerStyleSettings: IResolvable)

      public fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d491a9e45f0730a349131e9b3ee28cb5e04b52ba0713ccb822c3aedfa08b6014")
      public
          fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSeriesSettingsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSeriesSettingsProperty.builder()

      override fun lineStyleSettings(lineStyleSettings: IResolvable) {
        cdkBuilder.lineStyleSettings(lineStyleSettings.let(IResolvable::unwrap))
      }

      override fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty) {
        cdkBuilder.lineStyleSettings(lineStyleSettings.let(LineChartLineStyleSettingsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f3cefa4d1aba9374562454d4d36a34dcccb81dffe31d78968e862d2880e103d")
      override
          fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty.Builder.() -> Unit):
          Unit = lineStyleSettings(LineChartLineStyleSettingsProperty(lineStyleSettings))

      override fun markerStyleSettings(markerStyleSettings: IResolvable) {
        cdkBuilder.markerStyleSettings(markerStyleSettings.let(IResolvable::unwrap))
      }

      override fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty) {
        cdkBuilder.markerStyleSettings(markerStyleSettings.let(LineChartMarkerStyleSettingsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d491a9e45f0730a349131e9b3ee28cb5e04b52ba0713ccb822c3aedfa08b6014")
      override
          fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty.Builder.() -> Unit):
          Unit = markerStyleSettings(LineChartMarkerStyleSettingsProperty(markerStyleSettings))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSeriesSettingsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSeriesSettingsProperty,
    ) : CdkObject(cdkObject), LineChartSeriesSettingsProperty {
      override fun lineStyleSettings(): Any? = unwrap(this).getLineStyleSettings()

      override fun markerStyleSettings(): Any? = unwrap(this).getMarkerStyleSettings()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): LineChartSeriesSettingsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSeriesSettingsProperty):
          LineChartSeriesSettingsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartSeriesSettingsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSeriesSettingsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartSeriesSettingsProperty
    }
  }

  public interface FunnelChartFieldWellsProperty {
    public fun funnelChartAggregatedFieldWells(): Any? =
        unwrap(this).getFunnelChartAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells: IResolvable)

      public
          fun funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells: FunnelChartAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a12686e06b72fa9489af7c80b83dc44bc03cd6f1f4f5799c979b3a6a374a1f2a")
      public
          fun funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells: FunnelChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartFieldWellsProperty.builder()

      override fun funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells: FunnelChartAggregatedFieldWellsProperty) {
        cdkBuilder.funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells.let(FunnelChartAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a12686e06b72fa9489af7c80b83dc44bc03cd6f1f4f5799c979b3a6a374a1f2a")
      override
          fun funnelChartAggregatedFieldWells(funnelChartAggregatedFieldWells: FunnelChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          funnelChartAggregatedFieldWells(FunnelChartAggregatedFieldWellsProperty(funnelChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartFieldWellsProperty,
    ) : CdkObject(cdkObject), FunnelChartFieldWellsProperty {
      override fun funnelChartAggregatedFieldWells(): Any? =
          unwrap(this).getFunnelChartAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FunnelChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartFieldWellsProperty):
          FunnelChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FunnelChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartFieldWellsProperty
    }
  }

  public interface NumericalMeasureFieldProperty {
    public fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

    public fun column(): Any

    public fun fieldId(): String

    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun aggregationFunction(aggregationFunction: IResolvable)

      public fun aggregationFunction(aggregationFunction: NumericalAggregationFunctionProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47d3205a1479321c118227484a5dbd7f096b80bc2164610ac1223922c14fc87b")
      public
          fun aggregationFunction(aggregationFunction: NumericalAggregationFunctionProperty.Builder.() -> Unit)

      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5cc73e41805ffb646d3817ce8330549ad5a294605eec487bb90686bbd3441b87")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun fieldId(fieldId: String)

      public fun formatConfiguration(formatConfiguration: IResolvable)

      public fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0927c7ba00c5e5a2a6bd3caaf1c581d5e4d78bb4d3666134b84781e6f2dfc669")
      public
          fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalMeasureFieldProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalMeasureFieldProperty.builder()

      override fun aggregationFunction(aggregationFunction: IResolvable) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(IResolvable::unwrap))
      }

      override fun aggregationFunction(aggregationFunction: NumericalAggregationFunctionProperty) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(NumericalAggregationFunctionProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47d3205a1479321c118227484a5dbd7f096b80bc2164610ac1223922c14fc87b")
      override
          fun aggregationFunction(aggregationFunction: NumericalAggregationFunctionProperty.Builder.() -> Unit):
          Unit = aggregationFunction(NumericalAggregationFunctionProperty(aggregationFunction))

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5cc73e41805ffb646d3817ce8330549ad5a294605eec487bb90686bbd3441b87")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      override fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(NumberFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0927c7ba00c5e5a2a6bd3caaf1c581d5e4d78bb4d3666134b84781e6f2dfc669")
      override
          fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(NumberFormatConfigurationProperty(formatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalMeasureFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalMeasureFieldProperty,
    ) : CdkObject(cdkObject), NumericalMeasureFieldProperty {
      override fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

      override fun column(): Any = unwrap(this).getColumn()

      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): NumericalMeasureFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalMeasureFieldProperty):
          NumericalMeasureFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericalMeasureFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalMeasureFieldProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalMeasureFieldProperty
    }
  }

  public interface FreeFormLayoutElementProperty {
    public fun backgroundStyle(): Any? = unwrap(this).getBackgroundStyle()

    public fun borderStyle(): Any? = unwrap(this).getBorderStyle()

    public fun elementId(): String

    public fun elementType(): String

    public fun height(): String

    public fun loadingAnimation(): Any? = unwrap(this).getLoadingAnimation()

    public fun renderingRules(): Any? = unwrap(this).getRenderingRules()

    public fun selectedBorderStyle(): Any? = unwrap(this).getSelectedBorderStyle()

    public fun visibility(): String? = unwrap(this).getVisibility()

    public fun width(): String

    public fun xAxisLocation(): String

    public fun yAxisLocation(): String

    @CdkDslMarker
    public interface Builder {
      public fun backgroundStyle(backgroundStyle: IResolvable)

      public fun backgroundStyle(backgroundStyle: FreeFormLayoutElementBackgroundStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("822f11fea2c66f7ccb181359c0ccf9831fb3aea40d8d35d2f8baac2ce1b278a6")
      public
          fun backgroundStyle(backgroundStyle: FreeFormLayoutElementBackgroundStyleProperty.Builder.() -> Unit)

      public fun borderStyle(borderStyle: IResolvable)

      public fun borderStyle(borderStyle: FreeFormLayoutElementBorderStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fed34ab5b8d5d79b425862b3d9c634bc1697c80a5cc76a5658e10a63389d6d9d")
      public
          fun borderStyle(borderStyle: FreeFormLayoutElementBorderStyleProperty.Builder.() -> Unit)

      public fun elementId(elementId: String)

      public fun elementType(elementType: String)

      public fun height(height: String)

      public fun loadingAnimation(loadingAnimation: IResolvable)

      public fun loadingAnimation(loadingAnimation: LoadingAnimationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c5ee03b3d16d6ecb93b418a57e393db0d324c66592a27b6ad388cf909bb7fc9f")
      public fun loadingAnimation(loadingAnimation: LoadingAnimationProperty.Builder.() -> Unit)

      public fun renderingRules(renderingRules: IResolvable)

      public fun renderingRules(renderingRules: List<Any>)

      public fun renderingRules(vararg renderingRules: Any)

      public fun selectedBorderStyle(selectedBorderStyle: IResolvable)

      public fun selectedBorderStyle(selectedBorderStyle: FreeFormLayoutElementBorderStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("45c8c7f876f40300cb063291abfa34172139cbe8df66b7a1f26d991a493795e9")
      public
          fun selectedBorderStyle(selectedBorderStyle: FreeFormLayoutElementBorderStyleProperty.Builder.() -> Unit)

      public fun visibility(visibility: String)

      public fun width(width: String)

      public fun xAxisLocation(xAxisLocation: String)

      public fun yAxisLocation(yAxisLocation: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementProperty.builder()

      override fun backgroundStyle(backgroundStyle: IResolvable) {
        cdkBuilder.backgroundStyle(backgroundStyle.let(IResolvable::unwrap))
      }

      override fun backgroundStyle(backgroundStyle: FreeFormLayoutElementBackgroundStyleProperty) {
        cdkBuilder.backgroundStyle(backgroundStyle.let(FreeFormLayoutElementBackgroundStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("822f11fea2c66f7ccb181359c0ccf9831fb3aea40d8d35d2f8baac2ce1b278a6")
      override
          fun backgroundStyle(backgroundStyle: FreeFormLayoutElementBackgroundStyleProperty.Builder.() -> Unit):
          Unit = backgroundStyle(FreeFormLayoutElementBackgroundStyleProperty(backgroundStyle))

      override fun borderStyle(borderStyle: IResolvable) {
        cdkBuilder.borderStyle(borderStyle.let(IResolvable::unwrap))
      }

      override fun borderStyle(borderStyle: FreeFormLayoutElementBorderStyleProperty) {
        cdkBuilder.borderStyle(borderStyle.let(FreeFormLayoutElementBorderStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fed34ab5b8d5d79b425862b3d9c634bc1697c80a5cc76a5658e10a63389d6d9d")
      override
          fun borderStyle(borderStyle: FreeFormLayoutElementBorderStyleProperty.Builder.() -> Unit):
          Unit = borderStyle(FreeFormLayoutElementBorderStyleProperty(borderStyle))

      override fun elementId(elementId: String) {
        cdkBuilder.elementId(elementId)
      }

      override fun elementType(elementType: String) {
        cdkBuilder.elementType(elementType)
      }

      override fun height(height: String) {
        cdkBuilder.height(height)
      }

      override fun loadingAnimation(loadingAnimation: IResolvable) {
        cdkBuilder.loadingAnimation(loadingAnimation.let(IResolvable::unwrap))
      }

      override fun loadingAnimation(loadingAnimation: LoadingAnimationProperty) {
        cdkBuilder.loadingAnimation(loadingAnimation.let(LoadingAnimationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c5ee03b3d16d6ecb93b418a57e393db0d324c66592a27b6ad388cf909bb7fc9f")
      override fun loadingAnimation(loadingAnimation: LoadingAnimationProperty.Builder.() -> Unit):
          Unit = loadingAnimation(LoadingAnimationProperty(loadingAnimation))

      override fun renderingRules(renderingRules: IResolvable) {
        cdkBuilder.renderingRules(renderingRules.let(IResolvable::unwrap))
      }

      override fun renderingRules(renderingRules: List<Any>) {
        cdkBuilder.renderingRules(renderingRules)
      }

      override fun renderingRules(vararg renderingRules: Any): Unit =
          renderingRules(renderingRules.toList())

      override fun selectedBorderStyle(selectedBorderStyle: IResolvable) {
        cdkBuilder.selectedBorderStyle(selectedBorderStyle.let(IResolvable::unwrap))
      }

      override
          fun selectedBorderStyle(selectedBorderStyle: FreeFormLayoutElementBorderStyleProperty) {
        cdkBuilder.selectedBorderStyle(selectedBorderStyle.let(FreeFormLayoutElementBorderStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("45c8c7f876f40300cb063291abfa34172139cbe8df66b7a1f26d991a493795e9")
      override
          fun selectedBorderStyle(selectedBorderStyle: FreeFormLayoutElementBorderStyleProperty.Builder.() -> Unit):
          Unit = selectedBorderStyle(FreeFormLayoutElementBorderStyleProperty(selectedBorderStyle))

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      override fun width(width: String) {
        cdkBuilder.width(width)
      }

      override fun xAxisLocation(xAxisLocation: String) {
        cdkBuilder.xAxisLocation(xAxisLocation)
      }

      override fun yAxisLocation(yAxisLocation: String) {
        cdkBuilder.yAxisLocation(yAxisLocation)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementProperty,
    ) : CdkObject(cdkObject), FreeFormLayoutElementProperty {
      override fun backgroundStyle(): Any? = unwrap(this).getBackgroundStyle()

      override fun borderStyle(): Any? = unwrap(this).getBorderStyle()

      override fun elementId(): String = unwrap(this).getElementId()

      override fun elementType(): String = unwrap(this).getElementType()

      override fun height(): String = unwrap(this).getHeight()

      override fun loadingAnimation(): Any? = unwrap(this).getLoadingAnimation()

      override fun renderingRules(): Any? = unwrap(this).getRenderingRules()

      override fun selectedBorderStyle(): Any? = unwrap(this).getSelectedBorderStyle()

      override fun visibility(): String? = unwrap(this).getVisibility()

      override fun width(): String = unwrap(this).getWidth()

      override fun xAxisLocation(): String = unwrap(this).getXAxisLocation()

      override fun yAxisLocation(): String = unwrap(this).getYAxisLocation()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FreeFormLayoutElementProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementProperty):
          FreeFormLayoutElementProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormLayoutElementProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementProperty
    }
  }

  public interface CalculatedMeasureFieldProperty {
    public fun expression(): String

    public fun fieldId(): String

    @CdkDslMarker
    public interface Builder {
      public fun expression(expression: String)

      public fun fieldId(fieldId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedMeasureFieldProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedMeasureFieldProperty.builder()

      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedMeasureFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedMeasureFieldProperty,
    ) : CdkObject(cdkObject), CalculatedMeasureFieldProperty {
      override fun expression(): String = unwrap(this).getExpression()

      override fun fieldId(): String = unwrap(this).getFieldId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): CalculatedMeasureFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedMeasureFieldProperty):
          CalculatedMeasureFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CalculatedMeasureFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedMeasureFieldProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedMeasureFieldProperty
    }
  }

  public interface HeatMapAggregatedFieldWellsProperty {
    public fun columns(): Any? = unwrap(this).getColumns()

    public fun rows(): Any? = unwrap(this).getRows()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun columns(columns: IResolvable)

      public fun columns(columns: List<Any>)

      public fun columns(vararg columns: Any)

      public fun rows(rows: IResolvable)

      public fun rows(rows: List<Any>)

      public fun rows(vararg rows: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapAggregatedFieldWellsProperty.builder()

      override fun columns(columns: IResolvable) {
        cdkBuilder.columns(columns.let(IResolvable::unwrap))
      }

      override fun columns(columns: List<Any>) {
        cdkBuilder.columns(columns)
      }

      override fun columns(vararg columns: Any): Unit = columns(columns.toList())

      override fun rows(rows: IResolvable) {
        cdkBuilder.rows(rows.let(IResolvable::unwrap))
      }

      override fun rows(rows: List<Any>) {
        cdkBuilder.rows(rows)
      }

      override fun rows(vararg rows: Any): Unit = rows(rows.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), HeatMapAggregatedFieldWellsProperty {
      override fun columns(): Any? = unwrap(this).getColumns()

      override fun rows(): Any? = unwrap(this).getRows()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          HeatMapAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapAggregatedFieldWellsProperty):
          HeatMapAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HeatMapAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapAggregatedFieldWellsProperty
    }
  }

  public interface DimensionFieldProperty {
    public fun categoricalDimensionField(): Any? = unwrap(this).getCategoricalDimensionField()

    public fun dateDimensionField(): Any? = unwrap(this).getDateDimensionField()

    public fun numericalDimensionField(): Any? = unwrap(this).getNumericalDimensionField()

    @CdkDslMarker
    public interface Builder {
      public fun categoricalDimensionField(categoricalDimensionField: IResolvable)

      public
          fun categoricalDimensionField(categoricalDimensionField: CategoricalDimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fc8d06166ed7d51d53690ba59f1c90f2a5f1430518c6200d3186cd5ff7a293aa")
      public
          fun categoricalDimensionField(categoricalDimensionField: CategoricalDimensionFieldProperty.Builder.() -> Unit)

      public fun dateDimensionField(dateDimensionField: IResolvable)

      public fun dateDimensionField(dateDimensionField: DateDimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("99a8416a79de88ba7f6d1da409a9d4c3347228f468d7260361ccc96808f17bd6")
      public
          fun dateDimensionField(dateDimensionField: DateDimensionFieldProperty.Builder.() -> Unit)

      public fun numericalDimensionField(numericalDimensionField: IResolvable)

      public fun numericalDimensionField(numericalDimensionField: NumericalDimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cf3d015390e5774b6d3be1cfcb31e57104b0c35a383e6a4e15e5003ce214ebee")
      public
          fun numericalDimensionField(numericalDimensionField: NumericalDimensionFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DimensionFieldProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DimensionFieldProperty.builder()

      override fun categoricalDimensionField(categoricalDimensionField: IResolvable) {
        cdkBuilder.categoricalDimensionField(categoricalDimensionField.let(IResolvable::unwrap))
      }

      override
          fun categoricalDimensionField(categoricalDimensionField: CategoricalDimensionFieldProperty) {
        cdkBuilder.categoricalDimensionField(categoricalDimensionField.let(CategoricalDimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fc8d06166ed7d51d53690ba59f1c90f2a5f1430518c6200d3186cd5ff7a293aa")
      override
          fun categoricalDimensionField(categoricalDimensionField: CategoricalDimensionFieldProperty.Builder.() -> Unit):
          Unit =
          categoricalDimensionField(CategoricalDimensionFieldProperty(categoricalDimensionField))

      override fun dateDimensionField(dateDimensionField: IResolvable) {
        cdkBuilder.dateDimensionField(dateDimensionField.let(IResolvable::unwrap))
      }

      override fun dateDimensionField(dateDimensionField: DateDimensionFieldProperty) {
        cdkBuilder.dateDimensionField(dateDimensionField.let(DateDimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("99a8416a79de88ba7f6d1da409a9d4c3347228f468d7260361ccc96808f17bd6")
      override
          fun dateDimensionField(dateDimensionField: DateDimensionFieldProperty.Builder.() -> Unit):
          Unit = dateDimensionField(DateDimensionFieldProperty(dateDimensionField))

      override fun numericalDimensionField(numericalDimensionField: IResolvable) {
        cdkBuilder.numericalDimensionField(numericalDimensionField.let(IResolvable::unwrap))
      }

      override
          fun numericalDimensionField(numericalDimensionField: NumericalDimensionFieldProperty) {
        cdkBuilder.numericalDimensionField(numericalDimensionField.let(NumericalDimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cf3d015390e5774b6d3be1cfcb31e57104b0c35a383e6a4e15e5003ce214ebee")
      override
          fun numericalDimensionField(numericalDimensionField: NumericalDimensionFieldProperty.Builder.() -> Unit):
          Unit = numericalDimensionField(NumericalDimensionFieldProperty(numericalDimensionField))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DimensionFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DimensionFieldProperty,
    ) : CdkObject(cdkObject), DimensionFieldProperty {
      override fun categoricalDimensionField(): Any? = unwrap(this).getCategoricalDimensionField()

      override fun dateDimensionField(): Any? = unwrap(this).getDateDimensionField()

      override fun numericalDimensionField(): Any? = unwrap(this).getNumericalDimensionField()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DimensionFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DimensionFieldProperty):
          DimensionFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DimensionFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DimensionFieldProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DimensionFieldProperty
    }
  }

  public interface GeospatialPointStyleOptionsProperty {
    public fun clusterMarkerConfiguration(): Any? = unwrap(this).getClusterMarkerConfiguration()

    public fun heatmapConfiguration(): Any? = unwrap(this).getHeatmapConfiguration()

    public fun selectedPointStyle(): String? = unwrap(this).getSelectedPointStyle()

    @CdkDslMarker
    public interface Builder {
      public fun clusterMarkerConfiguration(clusterMarkerConfiguration: IResolvable)

      public
          fun clusterMarkerConfiguration(clusterMarkerConfiguration: ClusterMarkerConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("af225a8fa1595839bd9c43153d91a5d2d4e27cd5884a7e996928309c8e78c4d4")
      public
          fun clusterMarkerConfiguration(clusterMarkerConfiguration: ClusterMarkerConfigurationProperty.Builder.() -> Unit)

      public fun heatmapConfiguration(heatmapConfiguration: IResolvable)

      public fun heatmapConfiguration(heatmapConfiguration: GeospatialHeatmapConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aa28beeca4153720b3316041ebaff98674ca10797b16177e98274cc40530071a")
      public
          fun heatmapConfiguration(heatmapConfiguration: GeospatialHeatmapConfigurationProperty.Builder.() -> Unit)

      public fun selectedPointStyle(selectedPointStyle: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialPointStyleOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialPointStyleOptionsProperty.builder()

      override fun clusterMarkerConfiguration(clusterMarkerConfiguration: IResolvable) {
        cdkBuilder.clusterMarkerConfiguration(clusterMarkerConfiguration.let(IResolvable::unwrap))
      }

      override
          fun clusterMarkerConfiguration(clusterMarkerConfiguration: ClusterMarkerConfigurationProperty) {
        cdkBuilder.clusterMarkerConfiguration(clusterMarkerConfiguration.let(ClusterMarkerConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("af225a8fa1595839bd9c43153d91a5d2d4e27cd5884a7e996928309c8e78c4d4")
      override
          fun clusterMarkerConfiguration(clusterMarkerConfiguration: ClusterMarkerConfigurationProperty.Builder.() -> Unit):
          Unit =
          clusterMarkerConfiguration(ClusterMarkerConfigurationProperty(clusterMarkerConfiguration))

      override fun heatmapConfiguration(heatmapConfiguration: IResolvable) {
        cdkBuilder.heatmapConfiguration(heatmapConfiguration.let(IResolvable::unwrap))
      }

      override
          fun heatmapConfiguration(heatmapConfiguration: GeospatialHeatmapConfigurationProperty) {
        cdkBuilder.heatmapConfiguration(heatmapConfiguration.let(GeospatialHeatmapConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aa28beeca4153720b3316041ebaff98674ca10797b16177e98274cc40530071a")
      override
          fun heatmapConfiguration(heatmapConfiguration: GeospatialHeatmapConfigurationProperty.Builder.() -> Unit):
          Unit = heatmapConfiguration(GeospatialHeatmapConfigurationProperty(heatmapConfiguration))

      override fun selectedPointStyle(selectedPointStyle: String) {
        cdkBuilder.selectedPointStyle(selectedPointStyle)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialPointStyleOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialPointStyleOptionsProperty,
    ) : CdkObject(cdkObject), GeospatialPointStyleOptionsProperty {
      override fun clusterMarkerConfiguration(): Any? = unwrap(this).getClusterMarkerConfiguration()

      override fun heatmapConfiguration(): Any? = unwrap(this).getHeatmapConfiguration()

      override fun selectedPointStyle(): String? = unwrap(this).getSelectedPointStyle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialPointStyleOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialPointStyleOptionsProperty):
          GeospatialPointStyleOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialPointStyleOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialPointStyleOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialPointStyleOptionsProperty
    }
  }

  public interface PieChartFieldWellsProperty {
    public fun pieChartAggregatedFieldWells(): Any? = unwrap(this).getPieChartAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun pieChartAggregatedFieldWells(pieChartAggregatedFieldWells: IResolvable)

      public
          fun pieChartAggregatedFieldWells(pieChartAggregatedFieldWells: PieChartAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("91ca2b0159c10666e19d0fa1086703534bf09c63b1151927ea87633ced89881e")
      public
          fun pieChartAggregatedFieldWells(pieChartAggregatedFieldWells: PieChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartFieldWellsProperty.builder()

      override fun pieChartAggregatedFieldWells(pieChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.pieChartAggregatedFieldWells(pieChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun pieChartAggregatedFieldWells(pieChartAggregatedFieldWells: PieChartAggregatedFieldWellsProperty) {
        cdkBuilder.pieChartAggregatedFieldWells(pieChartAggregatedFieldWells.let(PieChartAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("91ca2b0159c10666e19d0fa1086703534bf09c63b1151927ea87633ced89881e")
      override
          fun pieChartAggregatedFieldWells(pieChartAggregatedFieldWells: PieChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          pieChartAggregatedFieldWells(PieChartAggregatedFieldWellsProperty(pieChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartFieldWellsProperty,
    ) : CdkObject(cdkObject), PieChartFieldWellsProperty {
      override fun pieChartAggregatedFieldWells(): Any? =
          unwrap(this).getPieChartAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PieChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartFieldWellsProperty):
          PieChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PieChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartFieldWellsProperty
    }
  }

  public interface PivotTablePaginatedReportOptionsProperty {
    public fun overflowColumnHeaderVisibility(): String? =
        unwrap(this).getOverflowColumnHeaderVisibility()

    public fun verticalOverflowVisibility(): String? = unwrap(this).getVerticalOverflowVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun overflowColumnHeaderVisibility(overflowColumnHeaderVisibility: String)

      public fun verticalOverflowVisibility(verticalOverflowVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTablePaginatedReportOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTablePaginatedReportOptionsProperty.builder()

      override fun overflowColumnHeaderVisibility(overflowColumnHeaderVisibility: String) {
        cdkBuilder.overflowColumnHeaderVisibility(overflowColumnHeaderVisibility)
      }

      override fun verticalOverflowVisibility(verticalOverflowVisibility: String) {
        cdkBuilder.verticalOverflowVisibility(verticalOverflowVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTablePaginatedReportOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTablePaginatedReportOptionsProperty,
    ) : CdkObject(cdkObject), PivotTablePaginatedReportOptionsProperty {
      override fun overflowColumnHeaderVisibility(): String? =
          unwrap(this).getOverflowColumnHeaderVisibility()

      override fun verticalOverflowVisibility(): String? =
          unwrap(this).getVerticalOverflowVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTablePaginatedReportOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTablePaginatedReportOptionsProperty):
          PivotTablePaginatedReportOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTablePaginatedReportOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTablePaginatedReportOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTablePaginatedReportOptionsProperty
    }
  }

  public interface SetParameterValueConfigurationProperty {
    public fun destinationParameterName(): String

    public fun `value`(): Any

    @CdkDslMarker
    public interface Builder {
      public fun destinationParameterName(destinationParameterName: String)

      public fun `value`(`value`: IResolvable)

      public fun `value`(`value`: DestinationParameterValueConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c3d87f880affe70e423e0a493a204b4804ecc9faa7f7a5b2fd922480affdd7e")
      public fun `value`(`value`: DestinationParameterValueConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SetParameterValueConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SetParameterValueConfigurationProperty.builder()

      override fun destinationParameterName(destinationParameterName: String) {
        cdkBuilder.destinationParameterName(destinationParameterName)
      }

      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      override fun `value`(`value`: DestinationParameterValueConfigurationProperty) {
        cdkBuilder.`value`(`value`.let(DestinationParameterValueConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5c3d87f880affe70e423e0a493a204b4804ecc9faa7f7a5b2fd922480affdd7e")
      override
          fun `value`(`value`: DestinationParameterValueConfigurationProperty.Builder.() -> Unit):
          Unit = `value`(DestinationParameterValueConfigurationProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SetParameterValueConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SetParameterValueConfigurationProperty,
    ) : CdkObject(cdkObject), SetParameterValueConfigurationProperty {
      override fun destinationParameterName(): String = unwrap(this).getDestinationParameterName()

      override fun `value`(): Any = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SetParameterValueConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SetParameterValueConfigurationProperty):
          SetParameterValueConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SetParameterValueConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SetParameterValueConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SetParameterValueConfigurationProperty
    }
  }

  public interface TotalAggregationOptionProperty {
    public fun fieldId(): String

    public fun totalAggregationFunction(): Any

    @CdkDslMarker
    public interface Builder {
      public fun fieldId(fieldId: String)

      public fun totalAggregationFunction(totalAggregationFunction: IResolvable)

      public
          fun totalAggregationFunction(totalAggregationFunction: TotalAggregationFunctionProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("70491446eddfb3c774be897e25da32f874a0db4d8cfd9f10fd45ee2a4ffcb8d2")
      public
          fun totalAggregationFunction(totalAggregationFunction: TotalAggregationFunctionProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationOptionProperty.builder()

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun totalAggregationFunction(totalAggregationFunction: IResolvable) {
        cdkBuilder.totalAggregationFunction(totalAggregationFunction.let(IResolvable::unwrap))
      }

      override
          fun totalAggregationFunction(totalAggregationFunction: TotalAggregationFunctionProperty) {
        cdkBuilder.totalAggregationFunction(totalAggregationFunction.let(TotalAggregationFunctionProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("70491446eddfb3c774be897e25da32f874a0db4d8cfd9f10fd45ee2a4ffcb8d2")
      override
          fun totalAggregationFunction(totalAggregationFunction: TotalAggregationFunctionProperty.Builder.() -> Unit):
          Unit =
          totalAggregationFunction(TotalAggregationFunctionProperty(totalAggregationFunction))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationOptionProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationOptionProperty,
    ) : CdkObject(cdkObject), TotalAggregationOptionProperty {
      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun totalAggregationFunction(): Any = unwrap(this).getTotalAggregationFunction()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TotalAggregationOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationOptionProperty):
          TotalAggregationOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TotalAggregationOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationOptionProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationOptionProperty
    }
  }

  public interface ConditionalFormattingIconProperty {
    public fun customCondition(): Any? = unwrap(this).getCustomCondition()

    public fun iconSet(): Any? = unwrap(this).getIconSet()

    @CdkDslMarker
    public interface Builder {
      public fun customCondition(customCondition: IResolvable)

      public fun customCondition(customCondition: ConditionalFormattingCustomIconConditionProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ee08f6044d520fbce81a118ba30809df75eda6a73c30c7f4232635d36846890b")
      public
          fun customCondition(customCondition: ConditionalFormattingCustomIconConditionProperty.Builder.() -> Unit)

      public fun iconSet(iconSet: IResolvable)

      public fun iconSet(iconSet: ConditionalFormattingIconSetProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1dd788563782b95b55c639ca2faf28c61130f574070ac224bb7cefc98e37d824")
      public fun iconSet(iconSet: ConditionalFormattingIconSetProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconProperty.builder()

      override fun customCondition(customCondition: IResolvable) {
        cdkBuilder.customCondition(customCondition.let(IResolvable::unwrap))
      }

      override
          fun customCondition(customCondition: ConditionalFormattingCustomIconConditionProperty) {
        cdkBuilder.customCondition(customCondition.let(ConditionalFormattingCustomIconConditionProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ee08f6044d520fbce81a118ba30809df75eda6a73c30c7f4232635d36846890b")
      override
          fun customCondition(customCondition: ConditionalFormattingCustomIconConditionProperty.Builder.() -> Unit):
          Unit = customCondition(ConditionalFormattingCustomIconConditionProperty(customCondition))

      override fun iconSet(iconSet: IResolvable) {
        cdkBuilder.iconSet(iconSet.let(IResolvable::unwrap))
      }

      override fun iconSet(iconSet: ConditionalFormattingIconSetProperty) {
        cdkBuilder.iconSet(iconSet.let(ConditionalFormattingIconSetProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1dd788563782b95b55c639ca2faf28c61130f574070ac224bb7cefc98e37d824")
      override fun iconSet(iconSet: ConditionalFormattingIconSetProperty.Builder.() -> Unit): Unit =
          iconSet(ConditionalFormattingIconSetProperty(iconSet))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconProperty,
    ) : CdkObject(cdkObject), ConditionalFormattingIconProperty {
      override fun customCondition(): Any? = unwrap(this).getCustomCondition()

      override fun iconSet(): Any? = unwrap(this).getIconSet()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingIconProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconProperty):
          ConditionalFormattingIconProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingIconProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingIconProperty
    }
  }

  public interface LoadingAnimationProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LoadingAnimationProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LoadingAnimationProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LoadingAnimationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LoadingAnimationProperty,
    ) : CdkObject(cdkObject), LoadingAnimationProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): LoadingAnimationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LoadingAnimationProperty):
          LoadingAnimationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LoadingAnimationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LoadingAnimationProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LoadingAnimationProperty
    }
  }

  public interface GeospatialHeatmapConfigurationProperty {
    public fun heatmapColor(): Any? = unwrap(this).getHeatmapColor()

    @CdkDslMarker
    public interface Builder {
      public fun heatmapColor(heatmapColor: IResolvable)

      public fun heatmapColor(heatmapColor: GeospatialHeatmapColorScaleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("73d255a619fed9f7dec37060e325a958e1975ec2b933e3e5048dbff10ade9a14")
      public fun heatmapColor(heatmapColor: GeospatialHeatmapColorScaleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapConfigurationProperty.builder()

      override fun heatmapColor(heatmapColor: IResolvable) {
        cdkBuilder.heatmapColor(heatmapColor.let(IResolvable::unwrap))
      }

      override fun heatmapColor(heatmapColor: GeospatialHeatmapColorScaleProperty) {
        cdkBuilder.heatmapColor(heatmapColor.let(GeospatialHeatmapColorScaleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("73d255a619fed9f7dec37060e325a958e1975ec2b933e3e5048dbff10ade9a14")
      override
          fun heatmapColor(heatmapColor: GeospatialHeatmapColorScaleProperty.Builder.() -> Unit):
          Unit = heatmapColor(GeospatialHeatmapColorScaleProperty(heatmapColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapConfigurationProperty,
    ) : CdkObject(cdkObject), GeospatialHeatmapConfigurationProperty {
      override fun heatmapColor(): Any? = unwrap(this).getHeatmapColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialHeatmapConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapConfigurationProperty):
          GeospatialHeatmapConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialHeatmapConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapConfigurationProperty
    }
  }

  public interface ListControlSelectAllOptionsProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSelectAllOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSelectAllOptionsProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSelectAllOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSelectAllOptionsProperty,
    ) : CdkObject(cdkObject), ListControlSelectAllOptionsProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ListControlSelectAllOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSelectAllOptionsProperty):
          ListControlSelectAllOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ListControlSelectAllOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSelectAllOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSelectAllOptionsProperty
    }
  }

  public interface AxisDataOptionsProperty {
    public fun dateAxisOptions(): Any? = unwrap(this).getDateAxisOptions()

    public fun numericAxisOptions(): Any? = unwrap(this).getNumericAxisOptions()

    @CdkDslMarker
    public interface Builder {
      public fun dateAxisOptions(dateAxisOptions: IResolvable)

      public fun dateAxisOptions(dateAxisOptions: DateAxisOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d532744f25d9034b5ef25d36931ee7f4d8f54adfacdd75bf7ee04dcb87db2aa4")
      public fun dateAxisOptions(dateAxisOptions: DateAxisOptionsProperty.Builder.() -> Unit)

      public fun numericAxisOptions(numericAxisOptions: IResolvable)

      public fun numericAxisOptions(numericAxisOptions: NumericAxisOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("05d6ea9ff32d5f93e8b5603b4a87a2932c328dbd5d23bedf990e9837a8c38b64")
      public
          fun numericAxisOptions(numericAxisOptions: NumericAxisOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDataOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDataOptionsProperty.builder()

      override fun dateAxisOptions(dateAxisOptions: IResolvable) {
        cdkBuilder.dateAxisOptions(dateAxisOptions.let(IResolvable::unwrap))
      }

      override fun dateAxisOptions(dateAxisOptions: DateAxisOptionsProperty) {
        cdkBuilder.dateAxisOptions(dateAxisOptions.let(DateAxisOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d532744f25d9034b5ef25d36931ee7f4d8f54adfacdd75bf7ee04dcb87db2aa4")
      override fun dateAxisOptions(dateAxisOptions: DateAxisOptionsProperty.Builder.() -> Unit):
          Unit = dateAxisOptions(DateAxisOptionsProperty(dateAxisOptions))

      override fun numericAxisOptions(numericAxisOptions: IResolvable) {
        cdkBuilder.numericAxisOptions(numericAxisOptions.let(IResolvable::unwrap))
      }

      override fun numericAxisOptions(numericAxisOptions: NumericAxisOptionsProperty) {
        cdkBuilder.numericAxisOptions(numericAxisOptions.let(NumericAxisOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("05d6ea9ff32d5f93e8b5603b4a87a2932c328dbd5d23bedf990e9837a8c38b64")
      override
          fun numericAxisOptions(numericAxisOptions: NumericAxisOptionsProperty.Builder.() -> Unit):
          Unit = numericAxisOptions(NumericAxisOptionsProperty(numericAxisOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDataOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDataOptionsProperty,
    ) : CdkObject(cdkObject), AxisDataOptionsProperty {
      override fun dateAxisOptions(): Any? = unwrap(this).getDateAxisOptions()

      override fun numericAxisOptions(): Any? = unwrap(this).getNumericAxisOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AxisDataOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDataOptionsProperty):
          AxisDataOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisDataOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDataOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDataOptionsProperty
    }
  }

  public interface NumberDisplayFormatConfigurationProperty {
    public fun decimalPlacesConfiguration(): Any? = unwrap(this).getDecimalPlacesConfiguration()

    public fun negativeValueConfiguration(): Any? = unwrap(this).getNegativeValueConfiguration()

    public fun nullValueFormatConfiguration(): Any? = unwrap(this).getNullValueFormatConfiguration()

    public fun numberScale(): String? = unwrap(this).getNumberScale()

    public fun prefix(): String? = unwrap(this).getPrefix()

    public fun separatorConfiguration(): Any? = unwrap(this).getSeparatorConfiguration()

    public fun suffix(): String? = unwrap(this).getSuffix()

    @CdkDslMarker
    public interface Builder {
      public fun decimalPlacesConfiguration(decimalPlacesConfiguration: IResolvable)

      public
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("290bda7fba479dacf0a93c14de608897462c7e0d9a3992f2ce9efcbab7cce4c0")
      public
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty.Builder.() -> Unit)

      public fun negativeValueConfiguration(negativeValueConfiguration: IResolvable)

      public
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1cca53f370d6fc254d5f47ac9541fae49e5f878bb2363e3844ec09d94dc80fb9")
      public
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty.Builder.() -> Unit)

      public fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable)

      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5bf2c4c8ce805723fe6f3652b209540c18bdfab9adabf5750e2a4687e885a22b")
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit)

      public fun numberScale(numberScale: String)

      public fun prefix(prefix: String)

      public fun separatorConfiguration(separatorConfiguration: IResolvable)

      public
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d7fa803b01a0a156fca83caf2e2d54abcc7ee124342cd9ed10da9f99a9c7b751")
      public
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty.Builder.() -> Unit)

      public fun suffix(suffix: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumberDisplayFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumberDisplayFormatConfigurationProperty.builder()

      override fun decimalPlacesConfiguration(decimalPlacesConfiguration: IResolvable) {
        cdkBuilder.decimalPlacesConfiguration(decimalPlacesConfiguration.let(IResolvable::unwrap))
      }

      override
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty) {
        cdkBuilder.decimalPlacesConfiguration(decimalPlacesConfiguration.let(DecimalPlacesConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("290bda7fba479dacf0a93c14de608897462c7e0d9a3992f2ce9efcbab7cce4c0")
      override
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty.Builder.() -> Unit):
          Unit =
          decimalPlacesConfiguration(DecimalPlacesConfigurationProperty(decimalPlacesConfiguration))

      override fun negativeValueConfiguration(negativeValueConfiguration: IResolvable) {
        cdkBuilder.negativeValueConfiguration(negativeValueConfiguration.let(IResolvable::unwrap))
      }

      override
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty) {
        cdkBuilder.negativeValueConfiguration(negativeValueConfiguration.let(NegativeValueConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1cca53f370d6fc254d5f47ac9541fae49e5f878bb2363e3844ec09d94dc80fb9")
      override
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty.Builder.() -> Unit):
          Unit =
          negativeValueConfiguration(NegativeValueConfigurationProperty(negativeValueConfiguration))

      override fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(NullValueFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5bf2c4c8ce805723fe6f3652b209540c18bdfab9adabf5750e2a4687e885a22b")
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          nullValueFormatConfiguration(NullValueFormatConfigurationProperty(nullValueFormatConfiguration))

      override fun numberScale(numberScale: String) {
        cdkBuilder.numberScale(numberScale)
      }

      override fun prefix(prefix: String) {
        cdkBuilder.prefix(prefix)
      }

      override fun separatorConfiguration(separatorConfiguration: IResolvable) {
        cdkBuilder.separatorConfiguration(separatorConfiguration.let(IResolvable::unwrap))
      }

      override
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty) {
        cdkBuilder.separatorConfiguration(separatorConfiguration.let(NumericSeparatorConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d7fa803b01a0a156fca83caf2e2d54abcc7ee124342cd9ed10da9f99a9c7b751")
      override
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty.Builder.() -> Unit):
          Unit =
          separatorConfiguration(NumericSeparatorConfigurationProperty(separatorConfiguration))

      override fun suffix(suffix: String) {
        cdkBuilder.suffix(suffix)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumberDisplayFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumberDisplayFormatConfigurationProperty,
    ) : CdkObject(cdkObject), NumberDisplayFormatConfigurationProperty {
      override fun decimalPlacesConfiguration(): Any? = unwrap(this).getDecimalPlacesConfiguration()

      override fun negativeValueConfiguration(): Any? = unwrap(this).getNegativeValueConfiguration()

      override fun nullValueFormatConfiguration(): Any? =
          unwrap(this).getNullValueFormatConfiguration()

      override fun numberScale(): String? = unwrap(this).getNumberScale()

      override fun prefix(): String? = unwrap(this).getPrefix()

      override fun separatorConfiguration(): Any? = unwrap(this).getSeparatorConfiguration()

      override fun suffix(): String? = unwrap(this).getSuffix()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          NumberDisplayFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NumberDisplayFormatConfigurationProperty):
          NumberDisplayFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumberDisplayFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumberDisplayFormatConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumberDisplayFormatConfigurationProperty
    }
  }

  public interface PieChartVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: PieChartConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("87f05ef3774a91effde30db1d9494bab690671b4decb639f149cce032baac431")
      public
          fun chartConfiguration(chartConfiguration: PieChartConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1e8ddc96a8ce27ecb01098a5e406ce1dcd74c32c51735e83c088676e7883866b")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f4473cf24231f42f2928b44eb8757cd046dfa6d9dc905fcb548e711a15e2090f")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: PieChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(PieChartConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("87f05ef3774a91effde30db1d9494bab690671b4decb639f149cce032baac431")
      override
          fun chartConfiguration(chartConfiguration: PieChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(PieChartConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1e8ddc96a8ce27ecb01098a5e406ce1dcd74c32c51735e83c088676e7883866b")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f4473cf24231f42f2928b44eb8757cd046dfa6d9dc905fcb548e711a15e2090f")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartVisualProperty,
    ) : CdkObject(cdkObject), PieChartVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PieChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartVisualProperty):
          PieChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PieChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartVisualProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartVisualProperty
    }
  }

  public interface PercentVisibleRangeProperty {
    public fun from(): Number? = unwrap(this).getFrom()

    public fun to(): Number? = unwrap(this).getTo()

    @CdkDslMarker
    public interface Builder {
      public fun from(from: Number)

      public fun to(to: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentVisibleRangeProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentVisibleRangeProperty.builder()

      override fun from(from: Number) {
        cdkBuilder.from(from)
      }

      override fun to(to: Number) {
        cdkBuilder.to(to)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentVisibleRangeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentVisibleRangeProperty,
    ) : CdkObject(cdkObject), PercentVisibleRangeProperty {
      override fun from(): Number? = unwrap(this).getFrom()

      override fun to(): Number? = unwrap(this).getTo()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PercentVisibleRangeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PercentVisibleRangeProperty):
          PercentVisibleRangeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PercentVisibleRangeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentVisibleRangeProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentVisibleRangeProperty
    }
  }

  public interface IntegerValueWhenUnsetConfigurationProperty {
    public fun customValue(): Number? = unwrap(this).getCustomValue()

    public fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()

    @CdkDslMarker
    public interface Builder {
      public fun customValue(customValue: Number)

      public fun valueWhenUnsetOption(valueWhenUnsetOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerValueWhenUnsetConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerValueWhenUnsetConfigurationProperty.builder()

      override fun customValue(customValue: Number) {
        cdkBuilder.customValue(customValue)
      }

      override fun valueWhenUnsetOption(valueWhenUnsetOption: String) {
        cdkBuilder.valueWhenUnsetOption(valueWhenUnsetOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerValueWhenUnsetConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerValueWhenUnsetConfigurationProperty,
    ) : CdkObject(cdkObject), IntegerValueWhenUnsetConfigurationProperty {
      override fun customValue(): Number? = unwrap(this).getCustomValue()

      override fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          IntegerValueWhenUnsetConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerValueWhenUnsetConfigurationProperty):
          IntegerValueWhenUnsetConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: IntegerValueWhenUnsetConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerValueWhenUnsetConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerValueWhenUnsetConfigurationProperty
    }
  }

  public interface FreeFormLayoutElementBackgroundStyleProperty {
    public fun color(): String? = unwrap(this).getColor()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBackgroundStyleProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBackgroundStyleProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBackgroundStyleProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBackgroundStyleProperty,
    ) : CdkObject(cdkObject), FreeFormLayoutElementBackgroundStyleProperty {
      override fun color(): String? = unwrap(this).getColor()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FreeFormLayoutElementBackgroundStyleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBackgroundStyleProperty):
          FreeFormLayoutElementBackgroundStyleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormLayoutElementBackgroundStyleProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBackgroundStyleProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBackgroundStyleProperty
    }
  }

  public interface GaugeChartConditionalFormattingOptionProperty {
    public fun arc(): Any? = unwrap(this).getArc()

    public fun primaryValue(): Any? = unwrap(this).getPrimaryValue()

    @CdkDslMarker
    public interface Builder {
      public fun arc(arc: IResolvable)

      public fun arc(arc: GaugeChartArcConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5475ab53a73bfbcea3289c3de3cca7e2e81633b165e413ee0a2b6e63ed719339")
      public fun arc(arc: GaugeChartArcConditionalFormattingProperty.Builder.() -> Unit)

      public fun primaryValue(primaryValue: IResolvable)

      public fun primaryValue(primaryValue: GaugeChartPrimaryValueConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e5d0978f4ca7fdc778e5ae83b503d9db4ae13c81c124c881653cc28adddaa68c")
      public
          fun primaryValue(primaryValue: GaugeChartPrimaryValueConditionalFormattingProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingOptionProperty.builder()

      override fun arc(arc: IResolvable) {
        cdkBuilder.arc(arc.let(IResolvable::unwrap))
      }

      override fun arc(arc: GaugeChartArcConditionalFormattingProperty) {
        cdkBuilder.arc(arc.let(GaugeChartArcConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5475ab53a73bfbcea3289c3de3cca7e2e81633b165e413ee0a2b6e63ed719339")
      override fun arc(arc: GaugeChartArcConditionalFormattingProperty.Builder.() -> Unit): Unit =
          arc(GaugeChartArcConditionalFormattingProperty(arc))

      override fun primaryValue(primaryValue: IResolvable) {
        cdkBuilder.primaryValue(primaryValue.let(IResolvable::unwrap))
      }

      override fun primaryValue(primaryValue: GaugeChartPrimaryValueConditionalFormattingProperty) {
        cdkBuilder.primaryValue(primaryValue.let(GaugeChartPrimaryValueConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e5d0978f4ca7fdc778e5ae83b503d9db4ae13c81c124c881653cc28adddaa68c")
      override
          fun primaryValue(primaryValue: GaugeChartPrimaryValueConditionalFormattingProperty.Builder.() -> Unit):
          Unit = primaryValue(GaugeChartPrimaryValueConditionalFormattingProperty(primaryValue))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingOptionProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingOptionProperty,
    ) : CdkObject(cdkObject), GaugeChartConditionalFormattingOptionProperty {
      override fun arc(): Any? = unwrap(this).getArc()

      override fun primaryValue(): Any? = unwrap(this).getPrimaryValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GaugeChartConditionalFormattingOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingOptionProperty):
          GaugeChartConditionalFormattingOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartConditionalFormattingOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingOptionProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingOptionProperty
    }
  }

  public interface HistogramVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: HistogramConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ca58f9b04cf907cd0b0c1efa78f4dd2873a857f055d026f28dd51d65bbaba939")
      public
          fun chartConfiguration(chartConfiguration: HistogramConfigurationProperty.Builder.() -> Unit)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9c8f1e4d43ea72304989454580c8a47c4f89c14cb3986495064d08d528c37530")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c98830f4405fd940ca7cf155f9da045ebae7b2d14b3d641123a66bebbb8be358")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: HistogramConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(HistogramConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ca58f9b04cf907cd0b0c1efa78f4dd2873a857f055d026f28dd51d65bbaba939")
      override
          fun chartConfiguration(chartConfiguration: HistogramConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(HistogramConfigurationProperty(chartConfiguration))

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9c8f1e4d43ea72304989454580c8a47c4f89c14cb3986495064d08d528c37530")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c98830f4405fd940ca7cf155f9da045ebae7b2d14b3d641123a66bebbb8be358")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramVisualProperty,
    ) : CdkObject(cdkObject), HistogramVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): HistogramVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramVisualProperty):
          HistogramVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HistogramVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramVisualProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramVisualProperty
    }
  }

  public interface LineChartAggregatedFieldWellsProperty {
    public fun category(): Any? = unwrap(this).getCategory()

    public fun colors(): Any? = unwrap(this).getColors()

    public fun smallMultiples(): Any? = unwrap(this).getSmallMultiples()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun category(category: IResolvable)

      public fun category(category: List<Any>)

      public fun category(vararg category: Any)

      public fun colors(colors: IResolvable)

      public fun colors(colors: List<Any>)

      public fun colors(vararg colors: Any)

      public fun smallMultiples(smallMultiples: IResolvable)

      public fun smallMultiples(smallMultiples: List<Any>)

      public fun smallMultiples(vararg smallMultiples: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartAggregatedFieldWellsProperty.builder()

      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      override fun category(vararg category: Any): Unit = category(category.toList())

      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      override fun smallMultiples(smallMultiples: IResolvable) {
        cdkBuilder.smallMultiples(smallMultiples.let(IResolvable::unwrap))
      }

      override fun smallMultiples(smallMultiples: List<Any>) {
        cdkBuilder.smallMultiples(smallMultiples)
      }

      override fun smallMultiples(vararg smallMultiples: Any): Unit =
          smallMultiples(smallMultiples.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), LineChartAggregatedFieldWellsProperty {
      override fun category(): Any? = unwrap(this).getCategory()

      override fun colors(): Any? = unwrap(this).getColors()

      override fun smallMultiples(): Any? = unwrap(this).getSmallMultiples()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          LineChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartAggregatedFieldWellsProperty):
          LineChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartAggregatedFieldWellsProperty
    }
  }

  public interface KPIProgressBarConditionalFormattingProperty {
    public fun foregroundColor(): Any? = unwrap(this).getForegroundColor()

    @CdkDslMarker
    public interface Builder {
      public fun foregroundColor(foregroundColor: IResolvable)

      public fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f1cd80127a7c5bee80e7bab11b781c42404a2ff5531a6a9898246df6cf42933b")
      public
          fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIProgressBarConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIProgressBarConditionalFormattingProperty.builder()

      override fun foregroundColor(foregroundColor: IResolvable) {
        cdkBuilder.foregroundColor(foregroundColor.let(IResolvable::unwrap))
      }

      override fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty) {
        cdkBuilder.foregroundColor(foregroundColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f1cd80127a7c5bee80e7bab11b781c42404a2ff5531a6a9898246df6cf42933b")
      override
          fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit):
          Unit = foregroundColor(ConditionalFormattingColorProperty(foregroundColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIProgressBarConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIProgressBarConditionalFormattingProperty,
    ) : CdkObject(cdkObject), KPIProgressBarConditionalFormattingProperty {
      override fun foregroundColor(): Any? = unwrap(this).getForegroundColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          KPIProgressBarConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPIProgressBarConditionalFormattingProperty):
          KPIProgressBarConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIProgressBarConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIProgressBarConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIProgressBarConditionalFormattingProperty
    }
  }

  public interface AggregationSortConfigurationProperty {
    public fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

    public fun column(): Any

    public fun sortDirection(): String

    @CdkDslMarker
    public interface Builder {
      public fun aggregationFunction(aggregationFunction: IResolvable)

      public fun aggregationFunction(aggregationFunction: AggregationFunctionProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("00db538f5865191ae51c65aa3c1353fd720c41d342ad1a0505b7cad5bceb8e9d")
      public
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit)

      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8e5439aa5ee1a29b97a0630918f8bbfeb98987b508815204ef75596a6dc02e11")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun sortDirection(sortDirection: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationSortConfigurationProperty.builder()

      override fun aggregationFunction(aggregationFunction: IResolvable) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(IResolvable::unwrap))
      }

      override fun aggregationFunction(aggregationFunction: AggregationFunctionProperty) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(AggregationFunctionProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("00db538f5865191ae51c65aa3c1353fd720c41d342ad1a0505b7cad5bceb8e9d")
      override
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit):
          Unit = aggregationFunction(AggregationFunctionProperty(aggregationFunction))

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8e5439aa5ee1a29b97a0630918f8bbfeb98987b508815204ef75596a6dc02e11")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun sortDirection(sortDirection: String) {
        cdkBuilder.sortDirection(sortDirection)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationSortConfigurationProperty,
    ) : CdkObject(cdkObject), AggregationSortConfigurationProperty {
      override fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

      override fun column(): Any = unwrap(this).getColumn()

      override fun sortDirection(): String = unwrap(this).getSortDirection()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          AggregationSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationSortConfigurationProperty):
          AggregationSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AggregationSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationSortConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationSortConfigurationProperty
    }
  }

  public interface ReferenceLineCustomLabelConfigurationProperty {
    public fun customLabel(): String

    @CdkDslMarker
    public interface Builder {
      public fun customLabel(customLabel: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineCustomLabelConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineCustomLabelConfigurationProperty.builder()

      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineCustomLabelConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineCustomLabelConfigurationProperty,
    ) : CdkObject(cdkObject), ReferenceLineCustomLabelConfigurationProperty {
      override fun customLabel(): String = unwrap(this).getCustomLabel()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineCustomLabelConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineCustomLabelConfigurationProperty):
          ReferenceLineCustomLabelConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineCustomLabelConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineCustomLabelConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineCustomLabelConfigurationProperty
    }
  }

  public interface GaugeChartPrimaryValueConditionalFormattingProperty {
    public fun icon(): Any? = unwrap(this).getIcon()

    public fun textColor(): Any? = unwrap(this).getTextColor()

    @CdkDslMarker
    public interface Builder {
      public fun icon(icon: IResolvable)

      public fun icon(icon: ConditionalFormattingIconProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a9ba129e0247378ffaae6c68c8a8110f02d1114ef85919fd36c77512c4f031d1")
      public fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit)

      public fun textColor(textColor: IResolvable)

      public fun textColor(textColor: ConditionalFormattingColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b30848fea803ecc8d9bd105b1221de2b21982e821db3ea6af2f0d14110247c4c")
      public fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartPrimaryValueConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartPrimaryValueConditionalFormattingProperty.builder()

      override fun icon(icon: IResolvable) {
        cdkBuilder.icon(icon.let(IResolvable::unwrap))
      }

      override fun icon(icon: ConditionalFormattingIconProperty) {
        cdkBuilder.icon(icon.let(ConditionalFormattingIconProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a9ba129e0247378ffaae6c68c8a8110f02d1114ef85919fd36c77512c4f031d1")
      override fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit): Unit =
          icon(ConditionalFormattingIconProperty(icon))

      override fun textColor(textColor: IResolvable) {
        cdkBuilder.textColor(textColor.let(IResolvable::unwrap))
      }

      override fun textColor(textColor: ConditionalFormattingColorProperty) {
        cdkBuilder.textColor(textColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b30848fea803ecc8d9bd105b1221de2b21982e821db3ea6af2f0d14110247c4c")
      override fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit): Unit
          = textColor(ConditionalFormattingColorProperty(textColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartPrimaryValueConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartPrimaryValueConditionalFormattingProperty,
    ) : CdkObject(cdkObject), GaugeChartPrimaryValueConditionalFormattingProperty {
      override fun icon(): Any? = unwrap(this).getIcon()

      override fun textColor(): Any? = unwrap(this).getTextColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GaugeChartPrimaryValueConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartPrimaryValueConditionalFormattingProperty):
          GaugeChartPrimaryValueConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartPrimaryValueConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartPrimaryValueConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartPrimaryValueConditionalFormattingProperty
    }
  }

  public interface TablePinnedFieldOptionsProperty {
    public fun pinnedLeftFields(): List<String> = unwrap(this).getPinnedLeftFields() ?: emptyList()

    @CdkDslMarker
    public interface Builder {
      public fun pinnedLeftFields(pinnedLeftFields: List<String>)

      public fun pinnedLeftFields(vararg pinnedLeftFields: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TablePinnedFieldOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TablePinnedFieldOptionsProperty.builder()

      override fun pinnedLeftFields(pinnedLeftFields: List<String>) {
        cdkBuilder.pinnedLeftFields(pinnedLeftFields)
      }

      override fun pinnedLeftFields(vararg pinnedLeftFields: String): Unit =
          pinnedLeftFields(pinnedLeftFields.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TablePinnedFieldOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TablePinnedFieldOptionsProperty,
    ) : CdkObject(cdkObject), TablePinnedFieldOptionsProperty {
      override fun pinnedLeftFields(): List<String> = unwrap(this).getPinnedLeftFields() ?:
          emptyList()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TablePinnedFieldOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TablePinnedFieldOptionsProperty):
          TablePinnedFieldOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TablePinnedFieldOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TablePinnedFieldOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TablePinnedFieldOptionsProperty
    }
  }

  public interface TableFieldLinkConfigurationProperty {
    public fun content(): Any

    public fun target(): String

    @CdkDslMarker
    public interface Builder {
      public fun content(content: IResolvable)

      public fun content(content: TableFieldLinkContentConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c611ad3cb3820afcbef7bfe83bf7d22ccf73bc7179c85827ce2916079dece29e")
      public fun content(content: TableFieldLinkContentConfigurationProperty.Builder.() -> Unit)

      public fun target(target: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkConfigurationProperty.builder()

      override fun content(content: IResolvable) {
        cdkBuilder.content(content.let(IResolvable::unwrap))
      }

      override fun content(content: TableFieldLinkContentConfigurationProperty) {
        cdkBuilder.content(content.let(TableFieldLinkContentConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c611ad3cb3820afcbef7bfe83bf7d22ccf73bc7179c85827ce2916079dece29e")
      override fun content(content: TableFieldLinkContentConfigurationProperty.Builder.() -> Unit):
          Unit = content(TableFieldLinkContentConfigurationProperty(content))

      override fun target(target: String) {
        cdkBuilder.target(target)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkConfigurationProperty,
    ) : CdkObject(cdkObject), TableFieldLinkConfigurationProperty {
      override fun content(): Any = unwrap(this).getContent()

      override fun target(): String = unwrap(this).getTarget()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableFieldLinkConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkConfigurationProperty):
          TableFieldLinkConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldLinkConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkConfigurationProperty
    }
  }

  public interface SliderControlDisplayOptionsProperty {
    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    @CdkDslMarker
    public interface Builder {
      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e9a46980ee454b1b3ede5637fc7fee23885d7e45a26a359f2945c29679f30570")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      public fun titleOptions(titleOptions: IResolvable)

      public fun titleOptions(titleOptions: LabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3c78d5864134c068292d690688ad3b3f9e86b8b6b544552f44308f04524255fc")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SliderControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SliderControlDisplayOptionsProperty.builder()

      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e9a46980ee454b1b3ede5637fc7fee23885d7e45a26a359f2945c29679f30570")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3c78d5864134c068292d690688ad3b3f9e86b8b6b544552f44308f04524255fc")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SliderControlDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SliderControlDisplayOptionsProperty,
    ) : CdkObject(cdkObject), SliderControlDisplayOptionsProperty {
      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SliderControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SliderControlDisplayOptionsProperty):
          SliderControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SliderControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SliderControlDisplayOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SliderControlDisplayOptionsProperty
    }
  }

  public interface TimeRangeDrillDownFilterProperty {
    public fun column(): Any

    public fun rangeMaximum(): String

    public fun rangeMinimum(): String

    public fun timeGranularity(): String

    @CdkDslMarker
    public interface Builder {
      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("07cff000ff784fd628b3d597b0e35cdbe94bf4486797998b93e1f40fc1b03a29")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun rangeMaximum(rangeMaximum: String)

      public fun rangeMinimum(rangeMinimum: String)

      public fun timeGranularity(timeGranularity: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeDrillDownFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeDrillDownFilterProperty.builder()

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("07cff000ff784fd628b3d597b0e35cdbe94bf4486797998b93e1f40fc1b03a29")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun rangeMaximum(rangeMaximum: String) {
        cdkBuilder.rangeMaximum(rangeMaximum)
      }

      override fun rangeMinimum(rangeMinimum: String) {
        cdkBuilder.rangeMinimum(rangeMinimum)
      }

      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeDrillDownFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeDrillDownFilterProperty,
    ) : CdkObject(cdkObject), TimeRangeDrillDownFilterProperty {
      override fun column(): Any = unwrap(this).getColumn()

      override fun rangeMaximum(): String = unwrap(this).getRangeMaximum()

      override fun rangeMinimum(): String = unwrap(this).getRangeMinimum()

      override fun timeGranularity(): String = unwrap(this).getTimeGranularity()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TimeRangeDrillDownFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeDrillDownFilterProperty):
          TimeRangeDrillDownFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TimeRangeDrillDownFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeDrillDownFilterProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeRangeDrillDownFilterProperty
    }
  }

  public interface SimpleClusterMarkerProperty {
    public fun color(): String? = unwrap(this).getColor()

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SimpleClusterMarkerProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SimpleClusterMarkerProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SimpleClusterMarkerProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SimpleClusterMarkerProperty,
    ) : CdkObject(cdkObject), SimpleClusterMarkerProperty {
      override fun color(): String? = unwrap(this).getColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SimpleClusterMarkerProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SimpleClusterMarkerProperty):
          SimpleClusterMarkerProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SimpleClusterMarkerProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SimpleClusterMarkerProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SimpleClusterMarkerProperty
    }
  }

  public interface RadarChartFieldWellsProperty {
    public fun radarChartAggregatedFieldWells(): Any? =
        unwrap(this).getRadarChartAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun radarChartAggregatedFieldWells(radarChartAggregatedFieldWells: IResolvable)

      public
          fun radarChartAggregatedFieldWells(radarChartAggregatedFieldWells: RadarChartAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("54e60b650be82169a6485f6a66efd3e2961551122173fe9b8b98511a5848bafc")
      public
          fun radarChartAggregatedFieldWells(radarChartAggregatedFieldWells: RadarChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartFieldWellsProperty.builder()

      override fun radarChartAggregatedFieldWells(radarChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.radarChartAggregatedFieldWells(radarChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun radarChartAggregatedFieldWells(radarChartAggregatedFieldWells: RadarChartAggregatedFieldWellsProperty) {
        cdkBuilder.radarChartAggregatedFieldWells(radarChartAggregatedFieldWells.let(RadarChartAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("54e60b650be82169a6485f6a66efd3e2961551122173fe9b8b98511a5848bafc")
      override
          fun radarChartAggregatedFieldWells(radarChartAggregatedFieldWells: RadarChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          radarChartAggregatedFieldWells(RadarChartAggregatedFieldWellsProperty(radarChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartFieldWellsProperty,
    ) : CdkObject(cdkObject), RadarChartFieldWellsProperty {
      override fun radarChartAggregatedFieldWells(): Any? =
          unwrap(this).getRadarChartAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): RadarChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartFieldWellsProperty):
          RadarChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartFieldWellsProperty
    }
  }

  public interface SectionLayoutConfigurationProperty {
    public fun freeFormLayout(): Any

    @CdkDslMarker
    public interface Builder {
      public fun freeFormLayout(freeFormLayout: IResolvable)

      public fun freeFormLayout(freeFormLayout: FreeFormSectionLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7bbff773784b7421d0ebe6398e6795aeb50dff6d8669e837dad8325c7695850c")
      public
          fun freeFormLayout(freeFormLayout: FreeFormSectionLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionLayoutConfigurationProperty.builder()

      override fun freeFormLayout(freeFormLayout: IResolvable) {
        cdkBuilder.freeFormLayout(freeFormLayout.let(IResolvable::unwrap))
      }

      override fun freeFormLayout(freeFormLayout: FreeFormSectionLayoutConfigurationProperty) {
        cdkBuilder.freeFormLayout(freeFormLayout.let(FreeFormSectionLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7bbff773784b7421d0ebe6398e6795aeb50dff6d8669e837dad8325c7695850c")
      override
          fun freeFormLayout(freeFormLayout: FreeFormSectionLayoutConfigurationProperty.Builder.() -> Unit):
          Unit = freeFormLayout(FreeFormSectionLayoutConfigurationProperty(freeFormLayout))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionLayoutConfigurationProperty,
    ) : CdkObject(cdkObject), SectionLayoutConfigurationProperty {
      override fun freeFormLayout(): Any = unwrap(this).getFreeFormLayout()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SectionLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SectionLayoutConfigurationProperty):
          SectionLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionLayoutConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionLayoutConfigurationProperty
    }
  }

  public interface TextAreaControlDisplayOptionsProperty {
    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    public fun placeholderOptions(): Any? = unwrap(this).getPlaceholderOptions()

    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    @CdkDslMarker
    public interface Builder {
      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd409f388aaf0478c7abce6544e1823c35e328a7e213b766ca91bea16cac6ae6")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      public fun placeholderOptions(placeholderOptions: IResolvable)

      public fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e7122bbfd33575e3fd3cc4f2c8388e30978b28ed622ac8d0e83bf7ca91c5dc1b")
      public
          fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty.Builder.() -> Unit)

      public fun titleOptions(titleOptions: IResolvable)

      public fun titleOptions(titleOptions: LabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("28a5eca6ff38307bafdbd68c951dd0e48bdf9af966d25a18c3ed3bb709d08872")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextAreaControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextAreaControlDisplayOptionsProperty.builder()

      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd409f388aaf0478c7abce6544e1823c35e328a7e213b766ca91bea16cac6ae6")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      override fun placeholderOptions(placeholderOptions: IResolvable) {
        cdkBuilder.placeholderOptions(placeholderOptions.let(IResolvable::unwrap))
      }

      override fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty) {
        cdkBuilder.placeholderOptions(placeholderOptions.let(TextControlPlaceholderOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e7122bbfd33575e3fd3cc4f2c8388e30978b28ed622ac8d0e83bf7ca91c5dc1b")
      override
          fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty.Builder.() -> Unit):
          Unit = placeholderOptions(TextControlPlaceholderOptionsProperty(placeholderOptions))

      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("28a5eca6ff38307bafdbd68c951dd0e48bdf9af966d25a18c3ed3bb709d08872")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextAreaControlDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextAreaControlDisplayOptionsProperty,
    ) : CdkObject(cdkObject), TextAreaControlDisplayOptionsProperty {
      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      override fun placeholderOptions(): Any? = unwrap(this).getPlaceholderOptions()

      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TextAreaControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TextAreaControlDisplayOptionsProperty):
          TextAreaControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TextAreaControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextAreaControlDisplayOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextAreaControlDisplayOptionsProperty
    }
  }

  public interface BarChartSortConfigurationProperty {
    public fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    public fun colorItemsLimit(): Any? = unwrap(this).getColorItemsLimit()

    public fun colorSort(): Any? = unwrap(this).getColorSort()

    public fun smallMultiplesLimitConfiguration(): Any? =
        unwrap(this).getSmallMultiplesLimitConfiguration()

    public fun smallMultiplesSort(): Any? = unwrap(this).getSmallMultiplesSort()

    @CdkDslMarker
    public interface Builder {
      public fun categoryItemsLimit(categoryItemsLimit: IResolvable)

      public fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1f9497c48b0a7cfa077828e188ef71fb8cd61546e2c237d0964e20b7de70c3c7")
      public
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun categorySort(categorySort: IResolvable)

      public fun categorySort(categorySort: List<Any>)

      public fun categorySort(vararg categorySort: Any)

      public fun colorItemsLimit(colorItemsLimit: IResolvable)

      public fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ead55b15f71f67a5af2f2b098604ab977f6458a2cbca913aab11682c875a4ce4")
      public
          fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun colorSort(colorSort: IResolvable)

      public fun colorSort(colorSort: List<Any>)

      public fun colorSort(vararg colorSort: Any)

      public fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: IResolvable)

      public
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3f9f8b2502d99ae023f96c55754e1a100c52916689ecd286765e82b1dd9cea99")
      public
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun smallMultiplesSort(smallMultiplesSort: IResolvable)

      public fun smallMultiplesSort(smallMultiplesSort: List<Any>)

      public fun smallMultiplesSort(vararg smallMultiplesSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartSortConfigurationProperty.builder()

      override fun categoryItemsLimit(categoryItemsLimit: IResolvable) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(IResolvable::unwrap))
      }

      override fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1f9497c48b0a7cfa077828e188ef71fb8cd61546e2c237d0964e20b7de70c3c7")
      override
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = categoryItemsLimit(ItemsLimitConfigurationProperty(categoryItemsLimit))

      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      override fun colorItemsLimit(colorItemsLimit: IResolvable) {
        cdkBuilder.colorItemsLimit(colorItemsLimit.let(IResolvable::unwrap))
      }

      override fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.colorItemsLimit(colorItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ead55b15f71f67a5af2f2b098604ab977f6458a2cbca913aab11682c875a4ce4")
      override
          fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = colorItemsLimit(ItemsLimitConfigurationProperty(colorItemsLimit))

      override fun colorSort(colorSort: IResolvable) {
        cdkBuilder.colorSort(colorSort.let(IResolvable::unwrap))
      }

      override fun colorSort(colorSort: List<Any>) {
        cdkBuilder.colorSort(colorSort)
      }

      override fun colorSort(vararg colorSort: Any): Unit = colorSort(colorSort.toList())

      override fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: IResolvable) {
        cdkBuilder.smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration.let(IResolvable::unwrap))
      }

      override
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3f9f8b2502d99ae023f96c55754e1a100c52916689ecd286765e82b1dd9cea99")
      override
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty(smallMultiplesLimitConfiguration))

      override fun smallMultiplesSort(smallMultiplesSort: IResolvable) {
        cdkBuilder.smallMultiplesSort(smallMultiplesSort.let(IResolvable::unwrap))
      }

      override fun smallMultiplesSort(smallMultiplesSort: List<Any>) {
        cdkBuilder.smallMultiplesSort(smallMultiplesSort)
      }

      override fun smallMultiplesSort(vararg smallMultiplesSort: Any): Unit =
          smallMultiplesSort(smallMultiplesSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartSortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartSortConfigurationProperty,
    ) : CdkObject(cdkObject), BarChartSortConfigurationProperty {
      override fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

      override fun categorySort(): Any? = unwrap(this).getCategorySort()

      override fun colorItemsLimit(): Any? = unwrap(this).getColorItemsLimit()

      override fun colorSort(): Any? = unwrap(this).getColorSort()

      override fun smallMultiplesLimitConfiguration(): Any? =
          unwrap(this).getSmallMultiplesLimitConfiguration()

      override fun smallMultiplesSort(): Any? = unwrap(this).getSmallMultiplesSort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          BarChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartSortConfigurationProperty):
          BarChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BarChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartSortConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartSortConfigurationProperty
    }
  }

  public interface FilledMapShapeConditionalFormattingProperty {
    public fun fieldId(): String

    public fun format(): Any? = unwrap(this).getFormat()

    @CdkDslMarker
    public interface Builder {
      public fun fieldId(fieldId: String)

      public fun format(format: IResolvable)

      public fun format(format: ShapeConditionalFormatProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("68782a79409db74f676e1cf2faba91fff63acbd6be345b7fbe96d2166a1d53b7")
      public fun format(format: ShapeConditionalFormatProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapShapeConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapShapeConditionalFormattingProperty.builder()

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun format(format: IResolvable) {
        cdkBuilder.format(format.let(IResolvable::unwrap))
      }

      override fun format(format: ShapeConditionalFormatProperty) {
        cdkBuilder.format(format.let(ShapeConditionalFormatProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("68782a79409db74f676e1cf2faba91fff63acbd6be345b7fbe96d2166a1d53b7")
      override fun format(format: ShapeConditionalFormatProperty.Builder.() -> Unit): Unit =
          format(ShapeConditionalFormatProperty(format))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapShapeConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapShapeConditionalFormattingProperty,
    ) : CdkObject(cdkObject), FilledMapShapeConditionalFormattingProperty {
      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun format(): Any? = unwrap(this).getFormat()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilledMapShapeConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapShapeConditionalFormattingProperty):
          FilledMapShapeConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapShapeConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapShapeConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapShapeConditionalFormattingProperty
    }
  }

  public interface DateTimeDefaultValuesProperty {
    public fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

    public fun rollingDate(): Any? = unwrap(this).getRollingDate()

    public fun staticValues(): List<String> = unwrap(this).getStaticValues() ?: emptyList()

    @CdkDslMarker
    public interface Builder {
      public fun dynamicValue(dynamicValue: IResolvable)

      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8a8bfc80003498e13b184830fed4d359365aeda47b3b0ffefa3b10e1dc1cf5e3")
      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit)

      public fun rollingDate(rollingDate: IResolvable)

      public fun rollingDate(rollingDate: RollingDateConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("46b716e374c386a6fd152dadbed2679a37e0aaaf8b115fc82f8812e02dfdae53")
      public fun rollingDate(rollingDate: RollingDateConfigurationProperty.Builder.() -> Unit)

      public fun staticValues(staticValues: List<String>)

      public fun staticValues(vararg staticValues: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeDefaultValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeDefaultValuesProperty.builder()

      override fun dynamicValue(dynamicValue: IResolvable) {
        cdkBuilder.dynamicValue(dynamicValue.let(IResolvable::unwrap))
      }

      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty) {
        cdkBuilder.dynamicValue(dynamicValue.let(DynamicDefaultValueProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8a8bfc80003498e13b184830fed4d359365aeda47b3b0ffefa3b10e1dc1cf5e3")
      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit): Unit
          = dynamicValue(DynamicDefaultValueProperty(dynamicValue))

      override fun rollingDate(rollingDate: IResolvable) {
        cdkBuilder.rollingDate(rollingDate.let(IResolvable::unwrap))
      }

      override fun rollingDate(rollingDate: RollingDateConfigurationProperty) {
        cdkBuilder.rollingDate(rollingDate.let(RollingDateConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("46b716e374c386a6fd152dadbed2679a37e0aaaf8b115fc82f8812e02dfdae53")
      override fun rollingDate(rollingDate: RollingDateConfigurationProperty.Builder.() -> Unit):
          Unit = rollingDate(RollingDateConfigurationProperty(rollingDate))

      override fun staticValues(staticValues: List<String>) {
        cdkBuilder.staticValues(staticValues)
      }

      override fun staticValues(vararg staticValues: String): Unit =
          staticValues(staticValues.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeDefaultValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeDefaultValuesProperty,
    ) : CdkObject(cdkObject), DateTimeDefaultValuesProperty {
      override fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

      override fun rollingDate(): Any? = unwrap(this).getRollingDate()

      override fun staticValues(): List<String> = unwrap(this).getStaticValues() ?: emptyList()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DateTimeDefaultValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeDefaultValuesProperty):
          DateTimeDefaultValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimeDefaultValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeDefaultValuesProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeDefaultValuesProperty
    }
  }

  public interface LineChartDefaultSeriesSettingsProperty {
    public fun axisBinding(): String? = unwrap(this).getAxisBinding()

    public fun lineStyleSettings(): Any? = unwrap(this).getLineStyleSettings()

    public fun markerStyleSettings(): Any? = unwrap(this).getMarkerStyleSettings()

    @CdkDslMarker
    public interface Builder {
      public fun axisBinding(axisBinding: String)

      public fun lineStyleSettings(lineStyleSettings: IResolvable)

      public fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("37695881faa05fdc852aa195347a935eadd9893ce3a75b2bc52361bdc175b27d")
      public
          fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty.Builder.() -> Unit)

      public fun markerStyleSettings(markerStyleSettings: IResolvable)

      public fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6842fdc8a4cee1d46c7b2c952c8771461d004e4800bb8cf999c0e003b20084f8")
      public
          fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartDefaultSeriesSettingsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartDefaultSeriesSettingsProperty.builder()

      override fun axisBinding(axisBinding: String) {
        cdkBuilder.axisBinding(axisBinding)
      }

      override fun lineStyleSettings(lineStyleSettings: IResolvable) {
        cdkBuilder.lineStyleSettings(lineStyleSettings.let(IResolvable::unwrap))
      }

      override fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty) {
        cdkBuilder.lineStyleSettings(lineStyleSettings.let(LineChartLineStyleSettingsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("37695881faa05fdc852aa195347a935eadd9893ce3a75b2bc52361bdc175b27d")
      override
          fun lineStyleSettings(lineStyleSettings: LineChartLineStyleSettingsProperty.Builder.() -> Unit):
          Unit = lineStyleSettings(LineChartLineStyleSettingsProperty(lineStyleSettings))

      override fun markerStyleSettings(markerStyleSettings: IResolvable) {
        cdkBuilder.markerStyleSettings(markerStyleSettings.let(IResolvable::unwrap))
      }

      override fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty) {
        cdkBuilder.markerStyleSettings(markerStyleSettings.let(LineChartMarkerStyleSettingsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6842fdc8a4cee1d46c7b2c952c8771461d004e4800bb8cf999c0e003b20084f8")
      override
          fun markerStyleSettings(markerStyleSettings: LineChartMarkerStyleSettingsProperty.Builder.() -> Unit):
          Unit = markerStyleSettings(LineChartMarkerStyleSettingsProperty(markerStyleSettings))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartDefaultSeriesSettingsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartDefaultSeriesSettingsProperty,
    ) : CdkObject(cdkObject), LineChartDefaultSeriesSettingsProperty {
      override fun axisBinding(): String? = unwrap(this).getAxisBinding()

      override fun lineStyleSettings(): Any? = unwrap(this).getLineStyleSettings()

      override fun markerStyleSettings(): Any? = unwrap(this).getMarkerStyleSettings()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          LineChartDefaultSeriesSettingsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartDefaultSeriesSettingsProperty):
          LineChartDefaultSeriesSettingsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartDefaultSeriesSettingsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartDefaultSeriesSettingsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartDefaultSeriesSettingsProperty
    }
  }

  public interface SeriesItemProperty {
    public fun dataFieldSeriesItem(): Any? = unwrap(this).getDataFieldSeriesItem()

    public fun fieldSeriesItem(): Any? = unwrap(this).getFieldSeriesItem()

    @CdkDslMarker
    public interface Builder {
      public fun dataFieldSeriesItem(dataFieldSeriesItem: IResolvable)

      public fun dataFieldSeriesItem(dataFieldSeriesItem: DataFieldSeriesItemProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e77e82372ed9cba90db0583e220f70ecc602fbc857bf18a2af81e15f95625e81")
      public
          fun dataFieldSeriesItem(dataFieldSeriesItem: DataFieldSeriesItemProperty.Builder.() -> Unit)

      public fun fieldSeriesItem(fieldSeriesItem: IResolvable)

      public fun fieldSeriesItem(fieldSeriesItem: FieldSeriesItemProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a08beb6cdb63d20aa8d54ba3448203fe83b7986306410d3795e61cab86a21b65")
      public fun fieldSeriesItem(fieldSeriesItem: FieldSeriesItemProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SeriesItemProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SeriesItemProperty.builder()

      override fun dataFieldSeriesItem(dataFieldSeriesItem: IResolvable) {
        cdkBuilder.dataFieldSeriesItem(dataFieldSeriesItem.let(IResolvable::unwrap))
      }

      override fun dataFieldSeriesItem(dataFieldSeriesItem: DataFieldSeriesItemProperty) {
        cdkBuilder.dataFieldSeriesItem(dataFieldSeriesItem.let(DataFieldSeriesItemProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e77e82372ed9cba90db0583e220f70ecc602fbc857bf18a2af81e15f95625e81")
      override
          fun dataFieldSeriesItem(dataFieldSeriesItem: DataFieldSeriesItemProperty.Builder.() -> Unit):
          Unit = dataFieldSeriesItem(DataFieldSeriesItemProperty(dataFieldSeriesItem))

      override fun fieldSeriesItem(fieldSeriesItem: IResolvable) {
        cdkBuilder.fieldSeriesItem(fieldSeriesItem.let(IResolvable::unwrap))
      }

      override fun fieldSeriesItem(fieldSeriesItem: FieldSeriesItemProperty) {
        cdkBuilder.fieldSeriesItem(fieldSeriesItem.let(FieldSeriesItemProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a08beb6cdb63d20aa8d54ba3448203fe83b7986306410d3795e61cab86a21b65")
      override fun fieldSeriesItem(fieldSeriesItem: FieldSeriesItemProperty.Builder.() -> Unit):
          Unit = fieldSeriesItem(FieldSeriesItemProperty(fieldSeriesItem))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.SeriesItemProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SeriesItemProperty,
    ) : CdkObject(cdkObject), SeriesItemProperty {
      override fun dataFieldSeriesItem(): Any? = unwrap(this).getDataFieldSeriesItem()

      override fun fieldSeriesItem(): Any? = unwrap(this).getFieldSeriesItem()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SeriesItemProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SeriesItemProperty):
          SeriesItemProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SeriesItemProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SeriesItemProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SeriesItemProperty
    }
  }

  public interface PivotTableConfigurationProperty {
    public fun fieldOptions(): Any? = unwrap(this).getFieldOptions()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun paginatedReportOptions(): Any? = unwrap(this).getPaginatedReportOptions()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun tableOptions(): Any? = unwrap(this).getTableOptions()

    public fun totalOptions(): Any? = unwrap(this).getTotalOptions()

    @CdkDslMarker
    public interface Builder {
      public fun fieldOptions(fieldOptions: IResolvable)

      public fun fieldOptions(fieldOptions: PivotTableFieldOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b8a2ee9fafea453ec74950f343d7363bfb4d7c92b0c266d5d38fb351d8089f0")
      public fun fieldOptions(fieldOptions: PivotTableFieldOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: PivotTableFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("162aa607d3e95acab046040ef114b14a1c7522cb2d3b006e9d49e1e080203e38")
      public fun fieldWells(fieldWells: PivotTableFieldWellsProperty.Builder.() -> Unit)

      public fun paginatedReportOptions(paginatedReportOptions: IResolvable)

      public
          fun paginatedReportOptions(paginatedReportOptions: PivotTablePaginatedReportOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("770145eba99d547d0a26e039756b914908e6b63c6f81bd616f4fe68fefa37778")
      public
          fun paginatedReportOptions(paginatedReportOptions: PivotTablePaginatedReportOptionsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: PivotTableSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("329456db2ef0b091c0ec73e2e6e91d8402594d481d2426ee49843bb28c93b78c")
      public
          fun sortConfiguration(sortConfiguration: PivotTableSortConfigurationProperty.Builder.() -> Unit)

      public fun tableOptions(tableOptions: IResolvable)

      public fun tableOptions(tableOptions: PivotTableOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f0518a5b1c7b86d0eb9b5a8d9bc659affb978c842786360a984658523dbd4a25")
      public fun tableOptions(tableOptions: PivotTableOptionsProperty.Builder.() -> Unit)

      public fun totalOptions(totalOptions: IResolvable)

      public fun totalOptions(totalOptions: PivotTableTotalOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("50e885bbf6ca201d862e78f4645c64e3d74a2bf9b2f7efca408efae4ba7d9e76")
      public fun totalOptions(totalOptions: PivotTableTotalOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConfigurationProperty.builder()

      override fun fieldOptions(fieldOptions: IResolvable) {
        cdkBuilder.fieldOptions(fieldOptions.let(IResolvable::unwrap))
      }

      override fun fieldOptions(fieldOptions: PivotTableFieldOptionsProperty) {
        cdkBuilder.fieldOptions(fieldOptions.let(PivotTableFieldOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b8a2ee9fafea453ec74950f343d7363bfb4d7c92b0c266d5d38fb351d8089f0")
      override fun fieldOptions(fieldOptions: PivotTableFieldOptionsProperty.Builder.() -> Unit):
          Unit = fieldOptions(PivotTableFieldOptionsProperty(fieldOptions))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: PivotTableFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(PivotTableFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("162aa607d3e95acab046040ef114b14a1c7522cb2d3b006e9d49e1e080203e38")
      override fun fieldWells(fieldWells: PivotTableFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(PivotTableFieldWellsProperty(fieldWells))

      override fun paginatedReportOptions(paginatedReportOptions: IResolvable) {
        cdkBuilder.paginatedReportOptions(paginatedReportOptions.let(IResolvable::unwrap))
      }

      override
          fun paginatedReportOptions(paginatedReportOptions: PivotTablePaginatedReportOptionsProperty) {
        cdkBuilder.paginatedReportOptions(paginatedReportOptions.let(PivotTablePaginatedReportOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("770145eba99d547d0a26e039756b914908e6b63c6f81bd616f4fe68fefa37778")
      override
          fun paginatedReportOptions(paginatedReportOptions: PivotTablePaginatedReportOptionsProperty.Builder.() -> Unit):
          Unit =
          paginatedReportOptions(PivotTablePaginatedReportOptionsProperty(paginatedReportOptions))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: PivotTableSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(PivotTableSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("329456db2ef0b091c0ec73e2e6e91d8402594d481d2426ee49843bb28c93b78c")
      override
          fun sortConfiguration(sortConfiguration: PivotTableSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(PivotTableSortConfigurationProperty(sortConfiguration))

      override fun tableOptions(tableOptions: IResolvable) {
        cdkBuilder.tableOptions(tableOptions.let(IResolvable::unwrap))
      }

      override fun tableOptions(tableOptions: PivotTableOptionsProperty) {
        cdkBuilder.tableOptions(tableOptions.let(PivotTableOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f0518a5b1c7b86d0eb9b5a8d9bc659affb978c842786360a984658523dbd4a25")
      override fun tableOptions(tableOptions: PivotTableOptionsProperty.Builder.() -> Unit): Unit =
          tableOptions(PivotTableOptionsProperty(tableOptions))

      override fun totalOptions(totalOptions: IResolvable) {
        cdkBuilder.totalOptions(totalOptions.let(IResolvable::unwrap))
      }

      override fun totalOptions(totalOptions: PivotTableTotalOptionsProperty) {
        cdkBuilder.totalOptions(totalOptions.let(PivotTableTotalOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("50e885bbf6ca201d862e78f4645c64e3d74a2bf9b2f7efca408efae4ba7d9e76")
      override fun totalOptions(totalOptions: PivotTableTotalOptionsProperty.Builder.() -> Unit):
          Unit = totalOptions(PivotTableTotalOptionsProperty(totalOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConfigurationProperty,
    ) : CdkObject(cdkObject), PivotTableConfigurationProperty {
      override fun fieldOptions(): Any? = unwrap(this).getFieldOptions()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun paginatedReportOptions(): Any? = unwrap(this).getPaginatedReportOptions()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun tableOptions(): Any? = unwrap(this).getTableOptions()

      override fun totalOptions(): Any? = unwrap(this).getTotalOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConfigurationProperty):
          PivotTableConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConfigurationProperty
    }
  }

  public interface PivotTableDataPathOptionProperty {
    public fun dataPathList(): Any

    public fun width(): String? = unwrap(this).getWidth()

    @CdkDslMarker
    public interface Builder {
      public fun dataPathList(dataPathList: IResolvable)

      public fun dataPathList(dataPathList: List<Any>)

      public fun dataPathList(vararg dataPathList: Any)

      public fun width(width: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableDataPathOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableDataPathOptionProperty.builder()

      override fun dataPathList(dataPathList: IResolvable) {
        cdkBuilder.dataPathList(dataPathList.let(IResolvable::unwrap))
      }

      override fun dataPathList(dataPathList: List<Any>) {
        cdkBuilder.dataPathList(dataPathList)
      }

      override fun dataPathList(vararg dataPathList: Any): Unit =
          dataPathList(dataPathList.toList())

      override fun width(width: String) {
        cdkBuilder.width(width)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableDataPathOptionProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableDataPathOptionProperty,
    ) : CdkObject(cdkObject), PivotTableDataPathOptionProperty {
      override fun dataPathList(): Any = unwrap(this).getDataPathList()

      override fun width(): String? = unwrap(this).getWidth()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableDataPathOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableDataPathOptionProperty):
          PivotTableDataPathOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableDataPathOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableDataPathOptionProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableDataPathOptionProperty
    }
  }

  public interface ConditionalFormattingGradientColorProperty {
    public fun color(): Any

    public fun expression(): String

    @CdkDslMarker
    public interface Builder {
      public fun color(color: IResolvable)

      public fun color(color: GradientColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("962d8be37b295c349b8415fec39c36c397a5d76cd8fc84380197059675cc63be")
      public fun color(color: GradientColorProperty.Builder.() -> Unit)

      public fun expression(expression: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingGradientColorProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingGradientColorProperty.builder()

      override fun color(color: IResolvable) {
        cdkBuilder.color(color.let(IResolvable::unwrap))
      }

      override fun color(color: GradientColorProperty) {
        cdkBuilder.color(color.let(GradientColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("962d8be37b295c349b8415fec39c36c397a5d76cd8fc84380197059675cc63be")
      override fun color(color: GradientColorProperty.Builder.() -> Unit): Unit =
          color(GradientColorProperty(color))

      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingGradientColorProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingGradientColorProperty,
    ) : CdkObject(cdkObject), ConditionalFormattingGradientColorProperty {
      override fun color(): Any = unwrap(this).getColor()

      override fun expression(): String = unwrap(this).getExpression()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingGradientColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingGradientColorProperty):
          ConditionalFormattingGradientColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingGradientColorProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingGradientColorProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingGradientColorProperty
    }
  }

  public interface AxisDisplayMinMaxRangeProperty {
    public fun maximum(): Number? = unwrap(this).getMaximum()

    public fun minimum(): Number? = unwrap(this).getMinimum()

    @CdkDslMarker
    public interface Builder {
      public fun maximum(maximum: Number)

      public fun minimum(minimum: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayMinMaxRangeProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayMinMaxRangeProperty.builder()

      override fun maximum(maximum: Number) {
        cdkBuilder.maximum(maximum)
      }

      override fun minimum(minimum: Number) {
        cdkBuilder.minimum(minimum)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayMinMaxRangeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayMinMaxRangeProperty,
    ) : CdkObject(cdkObject), AxisDisplayMinMaxRangeProperty {
      override fun maximum(): Number? = unwrap(this).getMaximum()

      override fun minimum(): Number? = unwrap(this).getMinimum()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AxisDisplayMinMaxRangeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayMinMaxRangeProperty):
          AxisDisplayMinMaxRangeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisDisplayMinMaxRangeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayMinMaxRangeProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayMinMaxRangeProperty
    }
  }

  public interface PivotTableOptionsProperty {
    public fun cellStyle(): Any? = unwrap(this).getCellStyle()

    public fun collapsedRowDimensionsVisibility(): String? =
        unwrap(this).getCollapsedRowDimensionsVisibility()

    public fun columnHeaderStyle(): Any? = unwrap(this).getColumnHeaderStyle()

    public fun columnNamesVisibility(): String? = unwrap(this).getColumnNamesVisibility()

    public fun defaultCellWidth(): String? = unwrap(this).getDefaultCellWidth()

    public fun metricPlacement(): String? = unwrap(this).getMetricPlacement()

    public fun rowAlternateColorOptions(): Any? = unwrap(this).getRowAlternateColorOptions()

    public fun rowFieldNamesStyle(): Any? = unwrap(this).getRowFieldNamesStyle()

    public fun rowHeaderStyle(): Any? = unwrap(this).getRowHeaderStyle()

    public fun rowsLabelOptions(): Any? = unwrap(this).getRowsLabelOptions()

    public fun rowsLayout(): String? = unwrap(this).getRowsLayout()

    public fun singleMetricVisibility(): String? = unwrap(this).getSingleMetricVisibility()

    public fun toggleButtonsVisibility(): String? = unwrap(this).getToggleButtonsVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun cellStyle(cellStyle: IResolvable)

      public fun cellStyle(cellStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e553c2a1f8fe45cc1834a23a0fca06f787d374dcb30cec14490285e02884b42")
      public fun cellStyle(cellStyle: TableCellStyleProperty.Builder.() -> Unit)

      public fun collapsedRowDimensionsVisibility(collapsedRowDimensionsVisibility: String)

      public fun columnHeaderStyle(columnHeaderStyle: IResolvable)

      public fun columnHeaderStyle(columnHeaderStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9059cc841752b48d51c3e711e6697ab0a8bfdef09b2f1bc05b255b6672352204")
      public fun columnHeaderStyle(columnHeaderStyle: TableCellStyleProperty.Builder.() -> Unit)

      public fun columnNamesVisibility(columnNamesVisibility: String)

      public fun defaultCellWidth(defaultCellWidth: String)

      public fun metricPlacement(metricPlacement: String)

      public fun rowAlternateColorOptions(rowAlternateColorOptions: IResolvable)

      public
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("783b241d78ad6c1b212afbf8fb44b3cd894753590379625845bd0a5c50933d03")
      public
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty.Builder.() -> Unit)

      public fun rowFieldNamesStyle(rowFieldNamesStyle: IResolvable)

      public fun rowFieldNamesStyle(rowFieldNamesStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cf81328f840cde16a8cbc8572ac123a1b8aef9592abe5e6649df1b4b3787c013")
      public fun rowFieldNamesStyle(rowFieldNamesStyle: TableCellStyleProperty.Builder.() -> Unit)

      public fun rowHeaderStyle(rowHeaderStyle: IResolvable)

      public fun rowHeaderStyle(rowHeaderStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b3be2f5f0fd5f446e3c16247fbda7a9b1a3fa439d72801774e28c66d795316ff")
      public fun rowHeaderStyle(rowHeaderStyle: TableCellStyleProperty.Builder.() -> Unit)

      public fun rowsLabelOptions(rowsLabelOptions: IResolvable)

      public fun rowsLabelOptions(rowsLabelOptions: PivotTableRowsLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6fc6166027f3f0bf605979993e355ce111f6e1b6100c3406871826b153e9a831")
      public
          fun rowsLabelOptions(rowsLabelOptions: PivotTableRowsLabelOptionsProperty.Builder.() -> Unit)

      public fun rowsLayout(rowsLayout: String)

      public fun singleMetricVisibility(singleMetricVisibility: String)

      public fun toggleButtonsVisibility(toggleButtonsVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableOptionsProperty.builder()

      override fun cellStyle(cellStyle: IResolvable) {
        cdkBuilder.cellStyle(cellStyle.let(IResolvable::unwrap))
      }

      override fun cellStyle(cellStyle: TableCellStyleProperty) {
        cdkBuilder.cellStyle(cellStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e553c2a1f8fe45cc1834a23a0fca06f787d374dcb30cec14490285e02884b42")
      override fun cellStyle(cellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          cellStyle(TableCellStyleProperty(cellStyle))

      override fun collapsedRowDimensionsVisibility(collapsedRowDimensionsVisibility: String) {
        cdkBuilder.collapsedRowDimensionsVisibility(collapsedRowDimensionsVisibility)
      }

      override fun columnHeaderStyle(columnHeaderStyle: IResolvable) {
        cdkBuilder.columnHeaderStyle(columnHeaderStyle.let(IResolvable::unwrap))
      }

      override fun columnHeaderStyle(columnHeaderStyle: TableCellStyleProperty) {
        cdkBuilder.columnHeaderStyle(columnHeaderStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9059cc841752b48d51c3e711e6697ab0a8bfdef09b2f1bc05b255b6672352204")
      override fun columnHeaderStyle(columnHeaderStyle: TableCellStyleProperty.Builder.() -> Unit):
          Unit = columnHeaderStyle(TableCellStyleProperty(columnHeaderStyle))

      override fun columnNamesVisibility(columnNamesVisibility: String) {
        cdkBuilder.columnNamesVisibility(columnNamesVisibility)
      }

      override fun defaultCellWidth(defaultCellWidth: String) {
        cdkBuilder.defaultCellWidth(defaultCellWidth)
      }

      override fun metricPlacement(metricPlacement: String) {
        cdkBuilder.metricPlacement(metricPlacement)
      }

      override fun rowAlternateColorOptions(rowAlternateColorOptions: IResolvable) {
        cdkBuilder.rowAlternateColorOptions(rowAlternateColorOptions.let(IResolvable::unwrap))
      }

      override
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty) {
        cdkBuilder.rowAlternateColorOptions(rowAlternateColorOptions.let(RowAlternateColorOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("783b241d78ad6c1b212afbf8fb44b3cd894753590379625845bd0a5c50933d03")
      override
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty.Builder.() -> Unit):
          Unit =
          rowAlternateColorOptions(RowAlternateColorOptionsProperty(rowAlternateColorOptions))

      override fun rowFieldNamesStyle(rowFieldNamesStyle: IResolvable) {
        cdkBuilder.rowFieldNamesStyle(rowFieldNamesStyle.let(IResolvable::unwrap))
      }

      override fun rowFieldNamesStyle(rowFieldNamesStyle: TableCellStyleProperty) {
        cdkBuilder.rowFieldNamesStyle(rowFieldNamesStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cf81328f840cde16a8cbc8572ac123a1b8aef9592abe5e6649df1b4b3787c013")
      override
          fun rowFieldNamesStyle(rowFieldNamesStyle: TableCellStyleProperty.Builder.() -> Unit):
          Unit = rowFieldNamesStyle(TableCellStyleProperty(rowFieldNamesStyle))

      override fun rowHeaderStyle(rowHeaderStyle: IResolvable) {
        cdkBuilder.rowHeaderStyle(rowHeaderStyle.let(IResolvable::unwrap))
      }

      override fun rowHeaderStyle(rowHeaderStyle: TableCellStyleProperty) {
        cdkBuilder.rowHeaderStyle(rowHeaderStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b3be2f5f0fd5f446e3c16247fbda7a9b1a3fa439d72801774e28c66d795316ff")
      override fun rowHeaderStyle(rowHeaderStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          rowHeaderStyle(TableCellStyleProperty(rowHeaderStyle))

      override fun rowsLabelOptions(rowsLabelOptions: IResolvable) {
        cdkBuilder.rowsLabelOptions(rowsLabelOptions.let(IResolvable::unwrap))
      }

      override fun rowsLabelOptions(rowsLabelOptions: PivotTableRowsLabelOptionsProperty) {
        cdkBuilder.rowsLabelOptions(rowsLabelOptions.let(PivotTableRowsLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6fc6166027f3f0bf605979993e355ce111f6e1b6100c3406871826b153e9a831")
      override
          fun rowsLabelOptions(rowsLabelOptions: PivotTableRowsLabelOptionsProperty.Builder.() -> Unit):
          Unit = rowsLabelOptions(PivotTableRowsLabelOptionsProperty(rowsLabelOptions))

      override fun rowsLayout(rowsLayout: String) {
        cdkBuilder.rowsLayout(rowsLayout)
      }

      override fun singleMetricVisibility(singleMetricVisibility: String) {
        cdkBuilder.singleMetricVisibility(singleMetricVisibility)
      }

      override fun toggleButtonsVisibility(toggleButtonsVisibility: String) {
        cdkBuilder.toggleButtonsVisibility(toggleButtonsVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableOptionsProperty,
    ) : CdkObject(cdkObject), PivotTableOptionsProperty {
      override fun cellStyle(): Any? = unwrap(this).getCellStyle()

      override fun collapsedRowDimensionsVisibility(): String? =
          unwrap(this).getCollapsedRowDimensionsVisibility()

      override fun columnHeaderStyle(): Any? = unwrap(this).getColumnHeaderStyle()

      override fun columnNamesVisibility(): String? = unwrap(this).getColumnNamesVisibility()

      override fun defaultCellWidth(): String? = unwrap(this).getDefaultCellWidth()

      override fun metricPlacement(): String? = unwrap(this).getMetricPlacement()

      override fun rowAlternateColorOptions(): Any? = unwrap(this).getRowAlternateColorOptions()

      override fun rowFieldNamesStyle(): Any? = unwrap(this).getRowFieldNamesStyle()

      override fun rowHeaderStyle(): Any? = unwrap(this).getRowHeaderStyle()

      override fun rowsLabelOptions(): Any? = unwrap(this).getRowsLabelOptions()

      override fun rowsLayout(): String? = unwrap(this).getRowsLayout()

      override fun singleMetricVisibility(): String? = unwrap(this).getSingleMetricVisibility()

      override fun toggleButtonsVisibility(): String? = unwrap(this).getToggleButtonsVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableOptionsProperty):
          PivotTableOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableOptionsProperty
    }
  }

  public interface TableConditionalFormattingOptionProperty {
    public fun cell(): Any? = unwrap(this).getCell()

    public fun row(): Any? = unwrap(this).getRow()

    @CdkDslMarker
    public interface Builder {
      public fun cell(cell: IResolvable)

      public fun cell(cell: TableCellConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2ace6651f82704a9cfb1a1a58e06febb41501e7736bf997d1c69fa3a06bf3285")
      public fun cell(cell: TableCellConditionalFormattingProperty.Builder.() -> Unit)

      public fun row(row: IResolvable)

      public fun row(row: TableRowConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1ec56ba6759ae5bb9b1a44af4042b0eea8d9b3d3426dc68ea4476341f3f6e400")
      public fun row(row: TableRowConditionalFormattingProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingOptionProperty.builder()

      override fun cell(cell: IResolvable) {
        cdkBuilder.cell(cell.let(IResolvable::unwrap))
      }

      override fun cell(cell: TableCellConditionalFormattingProperty) {
        cdkBuilder.cell(cell.let(TableCellConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2ace6651f82704a9cfb1a1a58e06febb41501e7736bf997d1c69fa3a06bf3285")
      override fun cell(cell: TableCellConditionalFormattingProperty.Builder.() -> Unit): Unit =
          cell(TableCellConditionalFormattingProperty(cell))

      override fun row(row: IResolvable) {
        cdkBuilder.row(row.let(IResolvable::unwrap))
      }

      override fun row(row: TableRowConditionalFormattingProperty) {
        cdkBuilder.row(row.let(TableRowConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1ec56ba6759ae5bb9b1a44af4042b0eea8d9b3d3426dc68ea4476341f3f6e400")
      override fun row(row: TableRowConditionalFormattingProperty.Builder.() -> Unit): Unit =
          row(TableRowConditionalFormattingProperty(row))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingOptionProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingOptionProperty,
    ) : CdkObject(cdkObject), TableConditionalFormattingOptionProperty {
      override fun cell(): Any? = unwrap(this).getCell()

      override fun row(): Any? = unwrap(this).getRow()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableConditionalFormattingOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingOptionProperty):
          TableConditionalFormattingOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableConditionalFormattingOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingOptionProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingOptionProperty
    }
  }

  public interface BoxPlotAggregatedFieldWellsProperty {
    public fun groupBy(): Any? = unwrap(this).getGroupBy()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun groupBy(groupBy: IResolvable)

      public fun groupBy(groupBy: List<Any>)

      public fun groupBy(vararg groupBy: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotAggregatedFieldWellsProperty.builder()

      override fun groupBy(groupBy: IResolvable) {
        cdkBuilder.groupBy(groupBy.let(IResolvable::unwrap))
      }

      override fun groupBy(groupBy: List<Any>) {
        cdkBuilder.groupBy(groupBy)
      }

      override fun groupBy(vararg groupBy: Any): Unit = groupBy(groupBy.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), BoxPlotAggregatedFieldWellsProperty {
      override fun groupBy(): Any? = unwrap(this).getGroupBy()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          BoxPlotAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotAggregatedFieldWellsProperty):
          BoxPlotAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotAggregatedFieldWellsProperty
    }
  }

  public interface GeospatialMapFieldWellsProperty {
    public fun geospatialMapAggregatedFieldWells(): Any? =
        unwrap(this).getGeospatialMapAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells: IResolvable)

      public
          fun geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells: GeospatialMapAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0239447b261753fdd687a4f6cfe24fb45bd7df9c383bf4f63477b0ffdf39e128")
      public
          fun geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells: GeospatialMapAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapFieldWellsProperty.builder()

      override
          fun geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells: IResolvable) {
        cdkBuilder.geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells: GeospatialMapAggregatedFieldWellsProperty) {
        cdkBuilder.geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells.let(GeospatialMapAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0239447b261753fdd687a4f6cfe24fb45bd7df9c383bf4f63477b0ffdf39e128")
      override
          fun geospatialMapAggregatedFieldWells(geospatialMapAggregatedFieldWells: GeospatialMapAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          geospatialMapAggregatedFieldWells(GeospatialMapAggregatedFieldWellsProperty(geospatialMapAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapFieldWellsProperty,
    ) : CdkObject(cdkObject), GeospatialMapFieldWellsProperty {
      override fun geospatialMapAggregatedFieldWells(): Any? =
          unwrap(this).getGeospatialMapAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GeospatialMapFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapFieldWellsProperty):
          GeospatialMapFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialMapFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapFieldWellsProperty
    }
  }

  public interface PeriodOverPeriodComputationProperty {
    public fun computationId(): String

    public fun name(): String? = unwrap(this).getName()

    public fun time(): Any? = unwrap(this).getTime()

    public fun `value`(): Any? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun computationId(computationId: String)

      public fun name(name: String)

      public fun time(time: IResolvable)

      public fun time(time: DimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fcc4ae29d75fd61925f2b66f6280191786dc51d2417a1ecf5eabbfa41772de00")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)

      public fun `value`(`value`: IResolvable)

      public fun `value`(`value`: MeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2944f99d2510012674285e0c76f91e2554812e8418a20e9d4727e9a307efa0be")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodOverPeriodComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodOverPeriodComputationProperty.builder()

      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fcc4ae29d75fd61925f2b66f6280191786dc51d2417a1ecf5eabbfa41772de00")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2944f99d2510012674285e0c76f91e2554812e8418a20e9d4727e9a307efa0be")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodOverPeriodComputationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodOverPeriodComputationProperty,
    ) : CdkObject(cdkObject), PeriodOverPeriodComputationProperty {
      override fun computationId(): String = unwrap(this).getComputationId()

      override fun name(): String? = unwrap(this).getName()

      override fun time(): Any? = unwrap(this).getTime()

      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PeriodOverPeriodComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodOverPeriodComputationProperty):
          PeriodOverPeriodComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PeriodOverPeriodComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodOverPeriodComputationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodOverPeriodComputationProperty
    }
  }

  public interface CustomContentConfigurationProperty {
    public fun contentType(): String? = unwrap(this).getContentType()

    public fun contentUrl(): String? = unwrap(this).getContentUrl()

    public fun imageScaling(): String? = unwrap(this).getImageScaling()

    @CdkDslMarker
    public interface Builder {
      public fun contentType(contentType: String)

      public fun contentUrl(contentUrl: String)

      public fun imageScaling(imageScaling: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentConfigurationProperty.builder()

      override fun contentType(contentType: String) {
        cdkBuilder.contentType(contentType)
      }

      override fun contentUrl(contentUrl: String) {
        cdkBuilder.contentUrl(contentUrl)
      }

      override fun imageScaling(imageScaling: String) {
        cdkBuilder.imageScaling(imageScaling)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentConfigurationProperty,
    ) : CdkObject(cdkObject), CustomContentConfigurationProperty {
      override fun contentType(): String? = unwrap(this).getContentType()

      override fun contentUrl(): String? = unwrap(this).getContentUrl()

      override fun imageScaling(): String? = unwrap(this).getImageScaling()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomContentConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentConfigurationProperty):
          CustomContentConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomContentConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentConfigurationProperty
    }
  }

  public interface RadarChartSortConfigurationProperty {
    public fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    public fun colorItemsLimit(): Any? = unwrap(this).getColorItemsLimit()

    public fun colorSort(): Any? = unwrap(this).getColorSort()

    @CdkDslMarker
    public interface Builder {
      public fun categoryItemsLimit(categoryItemsLimit: IResolvable)

      public fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("13b16a130d5a8bb3371be117acd4d144f4dd7f0fc9523cf18eb846f827a8aeb6")
      public
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun categorySort(categorySort: IResolvable)

      public fun categorySort(categorySort: List<Any>)

      public fun categorySort(vararg categorySort: Any)

      public fun colorItemsLimit(colorItemsLimit: IResolvable)

      public fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3a6e9479428ac3a0b885003de50081de3ea1e55cfbaa7e01bf1a07a0a12671d0")
      public
          fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun colorSort(colorSort: IResolvable)

      public fun colorSort(colorSort: List<Any>)

      public fun colorSort(vararg colorSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSortConfigurationProperty.builder()

      override fun categoryItemsLimit(categoryItemsLimit: IResolvable) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(IResolvable::unwrap))
      }

      override fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("13b16a130d5a8bb3371be117acd4d144f4dd7f0fc9523cf18eb846f827a8aeb6")
      override
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = categoryItemsLimit(ItemsLimitConfigurationProperty(categoryItemsLimit))

      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      override fun colorItemsLimit(colorItemsLimit: IResolvable) {
        cdkBuilder.colorItemsLimit(colorItemsLimit.let(IResolvable::unwrap))
      }

      override fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.colorItemsLimit(colorItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3a6e9479428ac3a0b885003de50081de3ea1e55cfbaa7e01bf1a07a0a12671d0")
      override
          fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = colorItemsLimit(ItemsLimitConfigurationProperty(colorItemsLimit))

      override fun colorSort(colorSort: IResolvable) {
        cdkBuilder.colorSort(colorSort.let(IResolvable::unwrap))
      }

      override fun colorSort(colorSort: List<Any>) {
        cdkBuilder.colorSort(colorSort)
      }

      override fun colorSort(vararg colorSort: Any): Unit = colorSort(colorSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSortConfigurationProperty,
    ) : CdkObject(cdkObject), RadarChartSortConfigurationProperty {
      override fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

      override fun categorySort(): Any? = unwrap(this).getCategorySort()

      override fun colorItemsLimit(): Any? = unwrap(this).getColorItemsLimit()

      override fun colorSort(): Any? = unwrap(this).getColorSort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          RadarChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSortConfigurationProperty):
          RadarChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSortConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSortConfigurationProperty
    }
  }

  public interface ComputationProperty {
    public fun forecast(): Any? = unwrap(this).getForecast()

    public fun growthRate(): Any? = unwrap(this).getGrowthRate()

    public fun maximumMinimum(): Any? = unwrap(this).getMaximumMinimum()

    public fun metricComparison(): Any? = unwrap(this).getMetricComparison()

    public fun periodOverPeriod(): Any? = unwrap(this).getPeriodOverPeriod()

    public fun periodToDate(): Any? = unwrap(this).getPeriodToDate()

    public fun topBottomMovers(): Any? = unwrap(this).getTopBottomMovers()

    public fun topBottomRanked(): Any? = unwrap(this).getTopBottomRanked()

    public fun totalAggregation(): Any? = unwrap(this).getTotalAggregation()

    public fun uniqueValues(): Any? = unwrap(this).getUniqueValues()

    @CdkDslMarker
    public interface Builder {
      public fun forecast(forecast: IResolvable)

      public fun forecast(forecast: ForecastComputationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ecf46c8bb4fe3dda53c4ddbae3eff1369e60ba877f2ca982d9b964721905e68")
      public fun forecast(forecast: ForecastComputationProperty.Builder.() -> Unit)

      public fun growthRate(growthRate: IResolvable)

      public fun growthRate(growthRate: GrowthRateComputationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4d9a3cb18ac8dd6dbe85835fb31e673a61461f23bb3cd557be785b8e50b5610a")
      public fun growthRate(growthRate: GrowthRateComputationProperty.Builder.() -> Unit)

      public fun maximumMinimum(maximumMinimum: IResolvable)

      public fun maximumMinimum(maximumMinimum: MaximumMinimumComputationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ed6d0660c4e1260cfd41f62889ee1364b1eaf01dab8cc9382da14e3035f5fdb5")
      public
          fun maximumMinimum(maximumMinimum: MaximumMinimumComputationProperty.Builder.() -> Unit)

      public fun metricComparison(metricComparison: IResolvable)

      public fun metricComparison(metricComparison: MetricComparisonComputationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("609822686aa6ab8d82209f2b335eb34fa0c1ec7cc796405676d7f72d1f261720")
      public
          fun metricComparison(metricComparison: MetricComparisonComputationProperty.Builder.() -> Unit)

      public fun periodOverPeriod(periodOverPeriod: IResolvable)

      public fun periodOverPeriod(periodOverPeriod: PeriodOverPeriodComputationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b982490576fc423051295e426c65877e7065a9e44bab4033d0f9a2466ad29de0")
      public
          fun periodOverPeriod(periodOverPeriod: PeriodOverPeriodComputationProperty.Builder.() -> Unit)

      public fun periodToDate(periodToDate: IResolvable)

      public fun periodToDate(periodToDate: PeriodToDateComputationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1b88faa8eafa8c7ebd6913ae693579ee43e76edc55c9968d6e8e8dacb452b0c6")
      public fun periodToDate(periodToDate: PeriodToDateComputationProperty.Builder.() -> Unit)

      public fun topBottomMovers(topBottomMovers: IResolvable)

      public fun topBottomMovers(topBottomMovers: TopBottomMoversComputationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f374c617795f5cca0df30ea17f4c5f6f82b8ebd5a868eeac020a61102eac947")
      public
          fun topBottomMovers(topBottomMovers: TopBottomMoversComputationProperty.Builder.() -> Unit)

      public fun topBottomRanked(topBottomRanked: IResolvable)

      public fun topBottomRanked(topBottomRanked: TopBottomRankedComputationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("60e66e21ced2c9d6d03e7b2eefd13c2fe3f62895301bf2ab798e4281b50d70b3")
      public
          fun topBottomRanked(topBottomRanked: TopBottomRankedComputationProperty.Builder.() -> Unit)

      public fun totalAggregation(totalAggregation: IResolvable)

      public fun totalAggregation(totalAggregation: TotalAggregationComputationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("096fd8e06c9b4e7bfdc2aa9f9c32a94285fd66f379973c585e2c7b0ca006e4dd")
      public
          fun totalAggregation(totalAggregation: TotalAggregationComputationProperty.Builder.() -> Unit)

      public fun uniqueValues(uniqueValues: IResolvable)

      public fun uniqueValues(uniqueValues: UniqueValuesComputationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4d0511cf30ab667dab324891fd4ed1b29e10505257dfa811856c1ee391af5ca6")
      public fun uniqueValues(uniqueValues: UniqueValuesComputationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComputationProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComputationProperty.builder()

      override fun forecast(forecast: IResolvable) {
        cdkBuilder.forecast(forecast.let(IResolvable::unwrap))
      }

      override fun forecast(forecast: ForecastComputationProperty) {
        cdkBuilder.forecast(forecast.let(ForecastComputationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ecf46c8bb4fe3dda53c4ddbae3eff1369e60ba877f2ca982d9b964721905e68")
      override fun forecast(forecast: ForecastComputationProperty.Builder.() -> Unit): Unit =
          forecast(ForecastComputationProperty(forecast))

      override fun growthRate(growthRate: IResolvable) {
        cdkBuilder.growthRate(growthRate.let(IResolvable::unwrap))
      }

      override fun growthRate(growthRate: GrowthRateComputationProperty) {
        cdkBuilder.growthRate(growthRate.let(GrowthRateComputationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4d9a3cb18ac8dd6dbe85835fb31e673a61461f23bb3cd557be785b8e50b5610a")
      override fun growthRate(growthRate: GrowthRateComputationProperty.Builder.() -> Unit): Unit =
          growthRate(GrowthRateComputationProperty(growthRate))

      override fun maximumMinimum(maximumMinimum: IResolvable) {
        cdkBuilder.maximumMinimum(maximumMinimum.let(IResolvable::unwrap))
      }

      override fun maximumMinimum(maximumMinimum: MaximumMinimumComputationProperty) {
        cdkBuilder.maximumMinimum(maximumMinimum.let(MaximumMinimumComputationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ed6d0660c4e1260cfd41f62889ee1364b1eaf01dab8cc9382da14e3035f5fdb5")
      override
          fun maximumMinimum(maximumMinimum: MaximumMinimumComputationProperty.Builder.() -> Unit):
          Unit = maximumMinimum(MaximumMinimumComputationProperty(maximumMinimum))

      override fun metricComparison(metricComparison: IResolvable) {
        cdkBuilder.metricComparison(metricComparison.let(IResolvable::unwrap))
      }

      override fun metricComparison(metricComparison: MetricComparisonComputationProperty) {
        cdkBuilder.metricComparison(metricComparison.let(MetricComparisonComputationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("609822686aa6ab8d82209f2b335eb34fa0c1ec7cc796405676d7f72d1f261720")
      override
          fun metricComparison(metricComparison: MetricComparisonComputationProperty.Builder.() -> Unit):
          Unit = metricComparison(MetricComparisonComputationProperty(metricComparison))

      override fun periodOverPeriod(periodOverPeriod: IResolvable) {
        cdkBuilder.periodOverPeriod(periodOverPeriod.let(IResolvable::unwrap))
      }

      override fun periodOverPeriod(periodOverPeriod: PeriodOverPeriodComputationProperty) {
        cdkBuilder.periodOverPeriod(periodOverPeriod.let(PeriodOverPeriodComputationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b982490576fc423051295e426c65877e7065a9e44bab4033d0f9a2466ad29de0")
      override
          fun periodOverPeriod(periodOverPeriod: PeriodOverPeriodComputationProperty.Builder.() -> Unit):
          Unit = periodOverPeriod(PeriodOverPeriodComputationProperty(periodOverPeriod))

      override fun periodToDate(periodToDate: IResolvable) {
        cdkBuilder.periodToDate(periodToDate.let(IResolvable::unwrap))
      }

      override fun periodToDate(periodToDate: PeriodToDateComputationProperty) {
        cdkBuilder.periodToDate(periodToDate.let(PeriodToDateComputationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1b88faa8eafa8c7ebd6913ae693579ee43e76edc55c9968d6e8e8dacb452b0c6")
      override fun periodToDate(periodToDate: PeriodToDateComputationProperty.Builder.() -> Unit):
          Unit = periodToDate(PeriodToDateComputationProperty(periodToDate))

      override fun topBottomMovers(topBottomMovers: IResolvable) {
        cdkBuilder.topBottomMovers(topBottomMovers.let(IResolvable::unwrap))
      }

      override fun topBottomMovers(topBottomMovers: TopBottomMoversComputationProperty) {
        cdkBuilder.topBottomMovers(topBottomMovers.let(TopBottomMoversComputationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f374c617795f5cca0df30ea17f4c5f6f82b8ebd5a868eeac020a61102eac947")
      override
          fun topBottomMovers(topBottomMovers: TopBottomMoversComputationProperty.Builder.() -> Unit):
          Unit = topBottomMovers(TopBottomMoversComputationProperty(topBottomMovers))

      override fun topBottomRanked(topBottomRanked: IResolvable) {
        cdkBuilder.topBottomRanked(topBottomRanked.let(IResolvable::unwrap))
      }

      override fun topBottomRanked(topBottomRanked: TopBottomRankedComputationProperty) {
        cdkBuilder.topBottomRanked(topBottomRanked.let(TopBottomRankedComputationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("60e66e21ced2c9d6d03e7b2eefd13c2fe3f62895301bf2ab798e4281b50d70b3")
      override
          fun topBottomRanked(topBottomRanked: TopBottomRankedComputationProperty.Builder.() -> Unit):
          Unit = topBottomRanked(TopBottomRankedComputationProperty(topBottomRanked))

      override fun totalAggregation(totalAggregation: IResolvable) {
        cdkBuilder.totalAggregation(totalAggregation.let(IResolvable::unwrap))
      }

      override fun totalAggregation(totalAggregation: TotalAggregationComputationProperty) {
        cdkBuilder.totalAggregation(totalAggregation.let(TotalAggregationComputationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("096fd8e06c9b4e7bfdc2aa9f9c32a94285fd66f379973c585e2c7b0ca006e4dd")
      override
          fun totalAggregation(totalAggregation: TotalAggregationComputationProperty.Builder.() -> Unit):
          Unit = totalAggregation(TotalAggregationComputationProperty(totalAggregation))

      override fun uniqueValues(uniqueValues: IResolvable) {
        cdkBuilder.uniqueValues(uniqueValues.let(IResolvable::unwrap))
      }

      override fun uniqueValues(uniqueValues: UniqueValuesComputationProperty) {
        cdkBuilder.uniqueValues(uniqueValues.let(UniqueValuesComputationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4d0511cf30ab667dab324891fd4ed1b29e10505257dfa811856c1ee391af5ca6")
      override fun uniqueValues(uniqueValues: UniqueValuesComputationProperty.Builder.() -> Unit):
          Unit = uniqueValues(UniqueValuesComputationProperty(uniqueValues))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.ComputationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComputationProperty,
    ) : CdkObject(cdkObject), ComputationProperty {
      override fun forecast(): Any? = unwrap(this).getForecast()

      override fun growthRate(): Any? = unwrap(this).getGrowthRate()

      override fun maximumMinimum(): Any? = unwrap(this).getMaximumMinimum()

      override fun metricComparison(): Any? = unwrap(this).getMetricComparison()

      override fun periodOverPeriod(): Any? = unwrap(this).getPeriodOverPeriod()

      override fun periodToDate(): Any? = unwrap(this).getPeriodToDate()

      override fun topBottomMovers(): Any? = unwrap(this).getTopBottomMovers()

      override fun topBottomRanked(): Any? = unwrap(this).getTopBottomRanked()

      override fun totalAggregation(): Any? = unwrap(this).getTotalAggregation()

      override fun uniqueValues(): Any? = unwrap(this).getUniqueValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ComputationProperty):
          ComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComputationProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComputationProperty
    }
  }

  public interface DropDownControlDisplayOptionsProperty {
    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    public fun selectAllOptions(): Any? = unwrap(this).getSelectAllOptions()

    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    @CdkDslMarker
    public interface Builder {
      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("33303c5fb2579df6e913ba830b8c8615064e37555c8340945a1fef47f85efb93")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      public fun selectAllOptions(selectAllOptions: IResolvable)

      public fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a83274ed2ecee49437cf285607a438885a247bcc0718fac733aa55d71ded6770")
      public
          fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty.Builder.() -> Unit)

      public fun titleOptions(titleOptions: IResolvable)

      public fun titleOptions(titleOptions: LabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("794d4e07c8f0d78a86b38c82bb9f7527be7e2e88c04dfae43acd76b68a9c57ec")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DropDownControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DropDownControlDisplayOptionsProperty.builder()

      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("33303c5fb2579df6e913ba830b8c8615064e37555c8340945a1fef47f85efb93")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      override fun selectAllOptions(selectAllOptions: IResolvable) {
        cdkBuilder.selectAllOptions(selectAllOptions.let(IResolvable::unwrap))
      }

      override fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty) {
        cdkBuilder.selectAllOptions(selectAllOptions.let(ListControlSelectAllOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a83274ed2ecee49437cf285607a438885a247bcc0718fac733aa55d71ded6770")
      override
          fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty.Builder.() -> Unit):
          Unit = selectAllOptions(ListControlSelectAllOptionsProperty(selectAllOptions))

      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("794d4e07c8f0d78a86b38c82bb9f7527be7e2e88c04dfae43acd76b68a9c57ec")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DropDownControlDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DropDownControlDisplayOptionsProperty,
    ) : CdkObject(cdkObject), DropDownControlDisplayOptionsProperty {
      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      override fun selectAllOptions(): Any? = unwrap(this).getSelectAllOptions()

      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DropDownControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DropDownControlDisplayOptionsProperty):
          DropDownControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DropDownControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DropDownControlDisplayOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DropDownControlDisplayOptionsProperty
    }
  }

  public interface TotalAggregationComputationProperty {
    public fun computationId(): String

    public fun name(): String? = unwrap(this).getName()

    public fun `value`(): Any? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun computationId(computationId: String)

      public fun name(name: String)

      public fun `value`(`value`: IResolvable)

      public fun `value`(`value`: MeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("53da1f389866a6ae856f06c3b9e05d94d169ade56462d639ee45abe2204fd38c")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationComputationProperty.builder()

      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("53da1f389866a6ae856f06c3b9e05d94d169ade56462d639ee45abe2204fd38c")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationComputationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationComputationProperty,
    ) : CdkObject(cdkObject), TotalAggregationComputationProperty {
      override fun computationId(): String = unwrap(this).getComputationId()

      override fun name(): String? = unwrap(this).getName()

      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TotalAggregationComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationComputationProperty):
          TotalAggregationComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TotalAggregationComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationComputationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationComputationProperty
    }
  }

  public interface ScrollBarOptionsProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    public fun visibleRange(): Any? = unwrap(this).getVisibleRange()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)

      public fun visibleRange(visibleRange: IResolvable)

      public fun visibleRange(visibleRange: VisibleRangeOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ab79e375524327bd629b4ebb780c425e4f809a4f286e6dd27036ec2df4814697")
      public fun visibleRange(visibleRange: VisibleRangeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScrollBarOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScrollBarOptionsProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      override fun visibleRange(visibleRange: IResolvable) {
        cdkBuilder.visibleRange(visibleRange.let(IResolvable::unwrap))
      }

      override fun visibleRange(visibleRange: VisibleRangeOptionsProperty) {
        cdkBuilder.visibleRange(visibleRange.let(VisibleRangeOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ab79e375524327bd629b4ebb780c425e4f809a4f286e6dd27036ec2df4814697")
      override fun visibleRange(visibleRange: VisibleRangeOptionsProperty.Builder.() -> Unit): Unit
          = visibleRange(VisibleRangeOptionsProperty(visibleRange))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScrollBarOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScrollBarOptionsProperty,
    ) : CdkObject(cdkObject), ScrollBarOptionsProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()

      override fun visibleRange(): Any? = unwrap(this).getVisibleRange()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ScrollBarOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ScrollBarOptionsProperty):
          ScrollBarOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ScrollBarOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScrollBarOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScrollBarOptionsProperty
    }
  }

  public interface HeatMapConfigurationProperty {
    public fun colorScale(): Any? = unwrap(this).getColorScale()

    public fun columnLabelOptions(): Any? = unwrap(this).getColumnLabelOptions()

    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun legend(): Any? = unwrap(this).getLegend()

    public fun rowLabelOptions(): Any? = unwrap(this).getRowLabelOptions()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun tooltip(): Any? = unwrap(this).getTooltip()

    @CdkDslMarker
    public interface Builder {
      public fun colorScale(colorScale: IResolvable)

      public fun colorScale(colorScale: ColorScaleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("54055ea0dc3d133fae2acc33b21b9f47454b6972e1694c543615549687ef8ed7")
      public fun colorScale(colorScale: ColorScaleProperty.Builder.() -> Unit)

      public fun columnLabelOptions(columnLabelOptions: IResolvable)

      public fun columnLabelOptions(columnLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7117e73f9e09b080495d7a416503b3173893a92e85263df2138d503e5db3595a")
      public
          fun columnLabelOptions(columnLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun dataLabels(dataLabels: IResolvable)

      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2f218b48cb6fc7c747f0290badcf801dea122b82dd43aa9c0b6d740f62872c14")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: HeatMapFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e004a93bcc0f2b8325de7677ebf502759d35dc6ec3ec3c764aee6b4edb6ef24b")
      public fun fieldWells(fieldWells: HeatMapFieldWellsProperty.Builder.() -> Unit)

      public fun legend(legend: IResolvable)

      public fun legend(legend: LegendOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ff9fef2aa75db47ebb7bd43266e56af5a49db7fb512665d3c71c5aa1b45b447a")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      public fun rowLabelOptions(rowLabelOptions: IResolvable)

      public fun rowLabelOptions(rowLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2210f760ab75a5fdd7d2ec8465c16df9c352c54077994a41607d2bbaffde81a3")
      public fun rowLabelOptions(rowLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: HeatMapSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("19628ff06ea7a60694340b6b90cf0819d6f54c74921dcd7182c027ab1ac88d13")
      public
          fun sortConfiguration(sortConfiguration: HeatMapSortConfigurationProperty.Builder.() -> Unit)

      public fun tooltip(tooltip: IResolvable)

      public fun tooltip(tooltip: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ecb30958768388ae83b36f07ded9191992a4aca0b3aaff1fd79b7e8640abe765")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapConfigurationProperty.builder()

      override fun colorScale(colorScale: IResolvable) {
        cdkBuilder.colorScale(colorScale.let(IResolvable::unwrap))
      }

      override fun colorScale(colorScale: ColorScaleProperty) {
        cdkBuilder.colorScale(colorScale.let(ColorScaleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("54055ea0dc3d133fae2acc33b21b9f47454b6972e1694c543615549687ef8ed7")
      override fun colorScale(colorScale: ColorScaleProperty.Builder.() -> Unit): Unit =
          colorScale(ColorScaleProperty(colorScale))

      override fun columnLabelOptions(columnLabelOptions: IResolvable) {
        cdkBuilder.columnLabelOptions(columnLabelOptions.let(IResolvable::unwrap))
      }

      override fun columnLabelOptions(columnLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.columnLabelOptions(columnLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7117e73f9e09b080495d7a416503b3173893a92e85263df2138d503e5db3595a")
      override
          fun columnLabelOptions(columnLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = columnLabelOptions(ChartAxisLabelOptionsProperty(columnLabelOptions))

      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2f218b48cb6fc7c747f0290badcf801dea122b82dd43aa9c0b6d740f62872c14")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: HeatMapFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(HeatMapFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e004a93bcc0f2b8325de7677ebf502759d35dc6ec3ec3c764aee6b4edb6ef24b")
      override fun fieldWells(fieldWells: HeatMapFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(HeatMapFieldWellsProperty(fieldWells))

      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ff9fef2aa75db47ebb7bd43266e56af5a49db7fb512665d3c71c5aa1b45b447a")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      override fun rowLabelOptions(rowLabelOptions: IResolvable) {
        cdkBuilder.rowLabelOptions(rowLabelOptions.let(IResolvable::unwrap))
      }

      override fun rowLabelOptions(rowLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.rowLabelOptions(rowLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2210f760ab75a5fdd7d2ec8465c16df9c352c54077994a41607d2bbaffde81a3")
      override
          fun rowLabelOptions(rowLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = rowLabelOptions(ChartAxisLabelOptionsProperty(rowLabelOptions))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: HeatMapSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(HeatMapSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("19628ff06ea7a60694340b6b90cf0819d6f54c74921dcd7182c027ab1ac88d13")
      override
          fun sortConfiguration(sortConfiguration: HeatMapSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(HeatMapSortConfigurationProperty(sortConfiguration))

      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ecb30958768388ae83b36f07ded9191992a4aca0b3aaff1fd79b7e8640abe765")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapConfigurationProperty,
    ) : CdkObject(cdkObject), HeatMapConfigurationProperty {
      override fun colorScale(): Any? = unwrap(this).getColorScale()

      override fun columnLabelOptions(): Any? = unwrap(this).getColumnLabelOptions()

      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun legend(): Any? = unwrap(this).getLegend()

      override fun rowLabelOptions(): Any? = unwrap(this).getRowLabelOptions()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun tooltip(): Any? = unwrap(this).getTooltip()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): HeatMapConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapConfigurationProperty):
          HeatMapConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HeatMapConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapConfigurationProperty
    }
  }

  public interface SheetControlLayoutProperty {
    public fun configuration(): Any

    @CdkDslMarker
    public interface Builder {
      public fun configuration(configuration: IResolvable)

      public fun configuration(configuration: SheetControlLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9422fd9aea28e5d580e9036733a6ca662e54d6f658db5ce40a44e19f53392987")
      public
          fun configuration(configuration: SheetControlLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutProperty.builder()

      override fun configuration(configuration: IResolvable) {
        cdkBuilder.configuration(configuration.let(IResolvable::unwrap))
      }

      override fun configuration(configuration: SheetControlLayoutConfigurationProperty) {
        cdkBuilder.configuration(configuration.let(SheetControlLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9422fd9aea28e5d580e9036733a6ca662e54d6f658db5ce40a44e19f53392987")
      override
          fun configuration(configuration: SheetControlLayoutConfigurationProperty.Builder.() -> Unit):
          Unit = configuration(SheetControlLayoutConfigurationProperty(configuration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutProperty,
    ) : CdkObject(cdkObject), SheetControlLayoutProperty {
      override fun configuration(): Any = unwrap(this).getConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SheetControlLayoutProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutProperty):
          SheetControlLayoutProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetControlLayoutProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutProperty
    }
  }

  public interface FilledMapAggregatedFieldWellsProperty {
    public fun geospatial(): Any? = unwrap(this).getGeospatial()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun geospatial(geospatial: IResolvable)

      public fun geospatial(geospatial: List<Any>)

      public fun geospatial(vararg geospatial: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapAggregatedFieldWellsProperty.builder()

      override fun geospatial(geospatial: IResolvable) {
        cdkBuilder.geospatial(geospatial.let(IResolvable::unwrap))
      }

      override fun geospatial(geospatial: List<Any>) {
        cdkBuilder.geospatial(geospatial)
      }

      override fun geospatial(vararg geospatial: Any): Unit = geospatial(geospatial.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), FilledMapAggregatedFieldWellsProperty {
      override fun geospatial(): Any? = unwrap(this).getGeospatial()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilledMapAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapAggregatedFieldWellsProperty):
          FilledMapAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapAggregatedFieldWellsProperty
    }
  }

  public interface FilterProperty {
    public fun categoryFilter(): Any? = unwrap(this).getCategoryFilter()

    public fun numericEqualityFilter(): Any? = unwrap(this).getNumericEqualityFilter()

    public fun numericRangeFilter(): Any? = unwrap(this).getNumericRangeFilter()

    public fun relativeDatesFilter(): Any? = unwrap(this).getRelativeDatesFilter()

    public fun timeEqualityFilter(): Any? = unwrap(this).getTimeEqualityFilter()

    public fun timeRangeFilter(): Any? = unwrap(this).getTimeRangeFilter()

    public fun topBottomFilter(): Any? = unwrap(this).getTopBottomFilter()

    @CdkDslMarker
    public interface Builder {
      public fun categoryFilter(categoryFilter: IResolvable)

      public fun categoryFilter(categoryFilter: CategoryFilterProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d78ac721a93329d5ffb4e572d5a51193b1fdfcd72ae145ad5d76e77bf5c0a7fd")
      public fun categoryFilter(categoryFilter: CategoryFilterProperty.Builder.() -> Unit)

      public fun numericEqualityFilter(numericEqualityFilter: IResolvable)

      public fun numericEqualityFilter(numericEqualityFilter: NumericEqualityFilterProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7862efc51bf70e7d3ae40e2f144113d672c8f4a154cf754f58b1f02eab790723")
      public
          fun numericEqualityFilter(numericEqualityFilter: NumericEqualityFilterProperty.Builder.() -> Unit)

      public fun numericRangeFilter(numericRangeFilter: IResolvable)

      public fun numericRangeFilter(numericRangeFilter: NumericRangeFilterProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e18a327b3bf44f7917e63b2ac91d52b5eb46a30d505f06fada33e4c344ebaba")
      public
          fun numericRangeFilter(numericRangeFilter: NumericRangeFilterProperty.Builder.() -> Unit)

      public fun relativeDatesFilter(relativeDatesFilter: IResolvable)

      public fun relativeDatesFilter(relativeDatesFilter: RelativeDatesFilterProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("457edcffd18e1cbc6af7edd97836bf6064939bacbd569e8757e82dc716b78598")
      public
          fun relativeDatesFilter(relativeDatesFilter: RelativeDatesFilterProperty.Builder.() -> Unit)

      public fun timeEqualityFilter(timeEqualityFilter: IResolvable)

      public fun timeEqualityFilter(timeEqualityFilter: TimeEqualityFilterProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e24d647b7ac6d3c5f2cd29375ae627883bd470dac67013462428b4f5a60d962")
      public
          fun timeEqualityFilter(timeEqualityFilter: TimeEqualityFilterProperty.Builder.() -> Unit)

      public fun timeRangeFilter(timeRangeFilter: IResolvable)

      public fun timeRangeFilter(timeRangeFilter: TimeRangeFilterProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c228510f7ee4a91da21ace8242dcdad729d9344530c7d0dcb81e21699508d608")
      public fun timeRangeFilter(timeRangeFilter: TimeRangeFilterProperty.Builder.() -> Unit)

      public fun topBottomFilter(topBottomFilter: IResolvable)

      public fun topBottomFilter(topBottomFilter: TopBottomFilterProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bffd32ae7c516f41a31985621dae0cb82e2ce963ea415722db2b42aa9138d69d")
      public fun topBottomFilter(topBottomFilter: TopBottomFilterProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterProperty.builder()

      override fun categoryFilter(categoryFilter: IResolvable) {
        cdkBuilder.categoryFilter(categoryFilter.let(IResolvable::unwrap))
      }

      override fun categoryFilter(categoryFilter: CategoryFilterProperty) {
        cdkBuilder.categoryFilter(categoryFilter.let(CategoryFilterProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d78ac721a93329d5ffb4e572d5a51193b1fdfcd72ae145ad5d76e77bf5c0a7fd")
      override fun categoryFilter(categoryFilter: CategoryFilterProperty.Builder.() -> Unit): Unit =
          categoryFilter(CategoryFilterProperty(categoryFilter))

      override fun numericEqualityFilter(numericEqualityFilter: IResolvable) {
        cdkBuilder.numericEqualityFilter(numericEqualityFilter.let(IResolvable::unwrap))
      }

      override fun numericEqualityFilter(numericEqualityFilter: NumericEqualityFilterProperty) {
        cdkBuilder.numericEqualityFilter(numericEqualityFilter.let(NumericEqualityFilterProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7862efc51bf70e7d3ae40e2f144113d672c8f4a154cf754f58b1f02eab790723")
      override
          fun numericEqualityFilter(numericEqualityFilter: NumericEqualityFilterProperty.Builder.() -> Unit):
          Unit = numericEqualityFilter(NumericEqualityFilterProperty(numericEqualityFilter))

      override fun numericRangeFilter(numericRangeFilter: IResolvable) {
        cdkBuilder.numericRangeFilter(numericRangeFilter.let(IResolvable::unwrap))
      }

      override fun numericRangeFilter(numericRangeFilter: NumericRangeFilterProperty) {
        cdkBuilder.numericRangeFilter(numericRangeFilter.let(NumericRangeFilterProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e18a327b3bf44f7917e63b2ac91d52b5eb46a30d505f06fada33e4c344ebaba")
      override
          fun numericRangeFilter(numericRangeFilter: NumericRangeFilterProperty.Builder.() -> Unit):
          Unit = numericRangeFilter(NumericRangeFilterProperty(numericRangeFilter))

      override fun relativeDatesFilter(relativeDatesFilter: IResolvable) {
        cdkBuilder.relativeDatesFilter(relativeDatesFilter.let(IResolvable::unwrap))
      }

      override fun relativeDatesFilter(relativeDatesFilter: RelativeDatesFilterProperty) {
        cdkBuilder.relativeDatesFilter(relativeDatesFilter.let(RelativeDatesFilterProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("457edcffd18e1cbc6af7edd97836bf6064939bacbd569e8757e82dc716b78598")
      override
          fun relativeDatesFilter(relativeDatesFilter: RelativeDatesFilterProperty.Builder.() -> Unit):
          Unit = relativeDatesFilter(RelativeDatesFilterProperty(relativeDatesFilter))

      override fun timeEqualityFilter(timeEqualityFilter: IResolvable) {
        cdkBuilder.timeEqualityFilter(timeEqualityFilter.let(IResolvable::unwrap))
      }

      override fun timeEqualityFilter(timeEqualityFilter: TimeEqualityFilterProperty) {
        cdkBuilder.timeEqualityFilter(timeEqualityFilter.let(TimeEqualityFilterProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0e24d647b7ac6d3c5f2cd29375ae627883bd470dac67013462428b4f5a60d962")
      override
          fun timeEqualityFilter(timeEqualityFilter: TimeEqualityFilterProperty.Builder.() -> Unit):
          Unit = timeEqualityFilter(TimeEqualityFilterProperty(timeEqualityFilter))

      override fun timeRangeFilter(timeRangeFilter: IResolvable) {
        cdkBuilder.timeRangeFilter(timeRangeFilter.let(IResolvable::unwrap))
      }

      override fun timeRangeFilter(timeRangeFilter: TimeRangeFilterProperty) {
        cdkBuilder.timeRangeFilter(timeRangeFilter.let(TimeRangeFilterProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c228510f7ee4a91da21ace8242dcdad729d9344530c7d0dcb81e21699508d608")
      override fun timeRangeFilter(timeRangeFilter: TimeRangeFilterProperty.Builder.() -> Unit):
          Unit = timeRangeFilter(TimeRangeFilterProperty(timeRangeFilter))

      override fun topBottomFilter(topBottomFilter: IResolvable) {
        cdkBuilder.topBottomFilter(topBottomFilter.let(IResolvable::unwrap))
      }

      override fun topBottomFilter(topBottomFilter: TopBottomFilterProperty) {
        cdkBuilder.topBottomFilter(topBottomFilter.let(TopBottomFilterProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bffd32ae7c516f41a31985621dae0cb82e2ce963ea415722db2b42aa9138d69d")
      override fun topBottomFilter(topBottomFilter: TopBottomFilterProperty.Builder.() -> Unit):
          Unit = topBottomFilter(TopBottomFilterProperty(topBottomFilter))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.FilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterProperty,
    ) : CdkObject(cdkObject), FilterProperty {
      override fun categoryFilter(): Any? = unwrap(this).getCategoryFilter()

      override fun numericEqualityFilter(): Any? = unwrap(this).getNumericEqualityFilter()

      override fun numericRangeFilter(): Any? = unwrap(this).getNumericRangeFilter()

      override fun relativeDatesFilter(): Any? = unwrap(this).getRelativeDatesFilter()

      override fun timeEqualityFilter(): Any? = unwrap(this).getTimeEqualityFilter()

      override fun timeRangeFilter(): Any? = unwrap(this).getTimeRangeFilter()

      override fun topBottomFilter(): Any? = unwrap(this).getTopBottomFilter()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterProperty):
          FilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterProperty
    }
  }

  public interface FilledMapFieldWellsProperty {
    public fun filledMapAggregatedFieldWells(): Any? =
        unwrap(this).getFilledMapAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun filledMapAggregatedFieldWells(filledMapAggregatedFieldWells: IResolvable)

      public
          fun filledMapAggregatedFieldWells(filledMapAggregatedFieldWells: FilledMapAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e245edb6b01d41e896b00dd60764296986c9c86a1e8bc445d10258b542b94ece")
      public
          fun filledMapAggregatedFieldWells(filledMapAggregatedFieldWells: FilledMapAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapFieldWellsProperty.builder()

      override fun filledMapAggregatedFieldWells(filledMapAggregatedFieldWells: IResolvable) {
        cdkBuilder.filledMapAggregatedFieldWells(filledMapAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun filledMapAggregatedFieldWells(filledMapAggregatedFieldWells: FilledMapAggregatedFieldWellsProperty) {
        cdkBuilder.filledMapAggregatedFieldWells(filledMapAggregatedFieldWells.let(FilledMapAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e245edb6b01d41e896b00dd60764296986c9c86a1e8bc445d10258b542b94ece")
      override
          fun filledMapAggregatedFieldWells(filledMapAggregatedFieldWells: FilledMapAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          filledMapAggregatedFieldWells(FilledMapAggregatedFieldWellsProperty(filledMapAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapFieldWellsProperty,
    ) : CdkObject(cdkObject), FilledMapFieldWellsProperty {
      override fun filledMapAggregatedFieldWells(): Any? =
          unwrap(this).getFilledMapAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilledMapFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapFieldWellsProperty):
          FilledMapFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapFieldWellsProperty
    }
  }

  public interface ColorScaleProperty {
    public fun colorFillType(): String

    public fun colors(): Any

    public fun nullValueColor(): Any? = unwrap(this).getNullValueColor()

    @CdkDslMarker
    public interface Builder {
      public fun colorFillType(colorFillType: String)

      public fun colors(colors: IResolvable)

      public fun colors(colors: List<Any>)

      public fun colors(vararg colors: Any)

      public fun nullValueColor(nullValueColor: IResolvable)

      public fun nullValueColor(nullValueColor: DataColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("25c245de489722510d21c5f2400d1b7d053a067f40aa9266e8bf9014115b14ef")
      public fun nullValueColor(nullValueColor: DataColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColorScaleProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColorScaleProperty.builder()

      override fun colorFillType(colorFillType: String) {
        cdkBuilder.colorFillType(colorFillType)
      }

      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      override fun nullValueColor(nullValueColor: IResolvable) {
        cdkBuilder.nullValueColor(nullValueColor.let(IResolvable::unwrap))
      }

      override fun nullValueColor(nullValueColor: DataColorProperty) {
        cdkBuilder.nullValueColor(nullValueColor.let(DataColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("25c245de489722510d21c5f2400d1b7d053a067f40aa9266e8bf9014115b14ef")
      override fun nullValueColor(nullValueColor: DataColorProperty.Builder.() -> Unit): Unit =
          nullValueColor(DataColorProperty(nullValueColor))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.ColorScaleProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColorScaleProperty,
    ) : CdkObject(cdkObject), ColorScaleProperty {
      override fun colorFillType(): String = unwrap(this).getColorFillType()

      override fun colors(): Any = unwrap(this).getColors()

      override fun nullValueColor(): Any? = unwrap(this).getNullValueColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ColorScaleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ColorScaleProperty):
          ColorScaleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColorScaleProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColorScaleProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColorScaleProperty
    }
  }

  public interface TimeEqualityFilterProperty {
    public fun column(): Any

    public fun filterId(): String

    public fun parameterName(): String? = unwrap(this).getParameterName()

    public fun rollingDate(): Any? = unwrap(this).getRollingDate()

    public fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

    public fun `value`(): String? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7a51b903f2f31dad16d62f1f09216fdc1bf1b93e1fa3b71a257d84d9d159a32c")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun filterId(filterId: String)

      public fun parameterName(parameterName: String)

      public fun rollingDate(rollingDate: IResolvable)

      public fun rollingDate(rollingDate: RollingDateConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bb178ded5e9ae5082b411421dfedd52e78d8795d9db6b2a98faef71e282a3b14")
      public fun rollingDate(rollingDate: RollingDateConfigurationProperty.Builder.() -> Unit)

      public fun timeGranularity(timeGranularity: String)

      public fun `value`(`value`: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeEqualityFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeEqualityFilterProperty.builder()

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7a51b903f2f31dad16d62f1f09216fdc1bf1b93e1fa3b71a257d84d9d159a32c")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      override fun parameterName(parameterName: String) {
        cdkBuilder.parameterName(parameterName)
      }

      override fun rollingDate(rollingDate: IResolvable) {
        cdkBuilder.rollingDate(rollingDate.let(IResolvable::unwrap))
      }

      override fun rollingDate(rollingDate: RollingDateConfigurationProperty) {
        cdkBuilder.rollingDate(rollingDate.let(RollingDateConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bb178ded5e9ae5082b411421dfedd52e78d8795d9db6b2a98faef71e282a3b14")
      override fun rollingDate(rollingDate: RollingDateConfigurationProperty.Builder.() -> Unit):
          Unit = rollingDate(RollingDateConfigurationProperty(rollingDate))

      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      override fun `value`(`value`: String) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeEqualityFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeEqualityFilterProperty,
    ) : CdkObject(cdkObject), TimeEqualityFilterProperty {
      override fun column(): Any = unwrap(this).getColumn()

      override fun filterId(): String = unwrap(this).getFilterId()

      override fun parameterName(): String? = unwrap(this).getParameterName()

      override fun rollingDate(): Any? = unwrap(this).getRollingDate()

      override fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

      override fun `value`(): String? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TimeEqualityFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TimeEqualityFilterProperty):
          TimeEqualityFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TimeEqualityFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeEqualityFilterProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeEqualityFilterProperty
    }
  }

  public interface TableConditionalFormattingProperty {
    public fun conditionalFormattingOptions(): Any? = unwrap(this).getConditionalFormattingOptions()

    @CdkDslMarker
    public interface Builder {
      public fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable)

      public fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>)

      public fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingProperty.builder()

      override fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions.let(IResolvable::unwrap))
      }

      override fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions)
      }

      override fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any): Unit =
          conditionalFormattingOptions(conditionalFormattingOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingProperty,
    ) : CdkObject(cdkObject), TableConditionalFormattingProperty {
      override fun conditionalFormattingOptions(): Any? =
          unwrap(this).getConditionalFormattingOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingProperty):
          TableConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConditionalFormattingProperty
    }
  }

  public interface NegativeValueConfigurationProperty {
    public fun displayMode(): String

    @CdkDslMarker
    public interface Builder {
      public fun displayMode(displayMode: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NegativeValueConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NegativeValueConfigurationProperty.builder()

      override fun displayMode(displayMode: String) {
        cdkBuilder.displayMode(displayMode)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NegativeValueConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NegativeValueConfigurationProperty,
    ) : CdkObject(cdkObject), NegativeValueConfigurationProperty {
      override fun displayMode(): String = unwrap(this).getDisplayMode()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          NegativeValueConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NegativeValueConfigurationProperty):
          NegativeValueConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NegativeValueConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NegativeValueConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NegativeValueConfigurationProperty
    }
  }

  public interface InsightVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun dataSetIdentifier(): String

    public fun insightConfiguration(): Any? = unwrap(this).getInsightConfiguration()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun dataSetIdentifier(dataSetIdentifier: String)

      public fun insightConfiguration(insightConfiguration: IResolvable)

      public fun insightConfiguration(insightConfiguration: InsightConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3251598b6a55b3485138d75bb4e1543e3e906e5913875a1e87f031cb893228ae")
      public
          fun insightConfiguration(insightConfiguration: InsightConfigurationProperty.Builder.() -> Unit)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f0f7202cf0023a32375e8f83ad79f3d8affa6d5b76bd50ed71e9c0f9f8f8bbdc")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6b9e82dcf15a654838c5a6675cfc37ea4b458339d8e542d110a5cfb624ce50da")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.InsightVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.InsightVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      override fun insightConfiguration(insightConfiguration: IResolvable) {
        cdkBuilder.insightConfiguration(insightConfiguration.let(IResolvable::unwrap))
      }

      override fun insightConfiguration(insightConfiguration: InsightConfigurationProperty) {
        cdkBuilder.insightConfiguration(insightConfiguration.let(InsightConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3251598b6a55b3485138d75bb4e1543e3e906e5913875a1e87f031cb893228ae")
      override
          fun insightConfiguration(insightConfiguration: InsightConfigurationProperty.Builder.() -> Unit):
          Unit = insightConfiguration(InsightConfigurationProperty(insightConfiguration))

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f0f7202cf0023a32375e8f83ad79f3d8affa6d5b76bd50ed71e9c0f9f8f8bbdc")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6b9e82dcf15a654838c5a6675cfc37ea4b458339d8e542d110a5cfb624ce50da")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.InsightVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.InsightVisualProperty,
    ) : CdkObject(cdkObject), InsightVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun dataSetIdentifier(): String = unwrap(this).getDataSetIdentifier()

      override fun insightConfiguration(): Any? = unwrap(this).getInsightConfiguration()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): InsightVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.InsightVisualProperty):
          InsightVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: InsightVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.InsightVisualProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.InsightVisualProperty
    }
  }

  public interface WordCloudFieldWellsProperty {
    public fun wordCloudAggregatedFieldWells(): Any? =
        unwrap(this).getWordCloudAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells: IResolvable)

      public
          fun wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells: WordCloudAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aa93bcef95f0e16b48cbc97a155ec195415e0c93681e22966166c0787b669606")
      public
          fun wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells: WordCloudAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudFieldWellsProperty.builder()

      override fun wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells: IResolvable) {
        cdkBuilder.wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells: WordCloudAggregatedFieldWellsProperty) {
        cdkBuilder.wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells.let(WordCloudAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aa93bcef95f0e16b48cbc97a155ec195415e0c93681e22966166c0787b669606")
      override
          fun wordCloudAggregatedFieldWells(wordCloudAggregatedFieldWells: WordCloudAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          wordCloudAggregatedFieldWells(WordCloudAggregatedFieldWellsProperty(wordCloudAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudFieldWellsProperty,
    ) : CdkObject(cdkObject), WordCloudFieldWellsProperty {
      override fun wordCloudAggregatedFieldWells(): Any? =
          unwrap(this).getWordCloudAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): WordCloudFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudFieldWellsProperty):
          WordCloudFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WordCloudFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudFieldWellsProperty
    }
  }

  public interface StringFormatConfigurationProperty {
    public fun nullValueFormatConfiguration(): Any? = unwrap(this).getNullValueFormatConfiguration()

    public fun numericFormatConfiguration(): Any? = unwrap(this).getNumericFormatConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable)

      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0093aa4bb313c4bedc3b7791a4fa7412e124f285e30cd47df903b9d67702b016")
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit)

      public fun numericFormatConfiguration(numericFormatConfiguration: IResolvable)

      public
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("337d4f772a549bdc4e35e7337a3f3bedfd6e105d9b148445a169b18594d68d5b")
      public
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringFormatConfigurationProperty.builder()

      override fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(NullValueFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0093aa4bb313c4bedc3b7791a4fa7412e124f285e30cd47df903b9d67702b016")
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          nullValueFormatConfiguration(NullValueFormatConfigurationProperty(nullValueFormatConfiguration))

      override fun numericFormatConfiguration(numericFormatConfiguration: IResolvable) {
        cdkBuilder.numericFormatConfiguration(numericFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty) {
        cdkBuilder.numericFormatConfiguration(numericFormatConfiguration.let(NumericFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("337d4f772a549bdc4e35e7337a3f3bedfd6e105d9b148445a169b18594d68d5b")
      override
          fun numericFormatConfiguration(numericFormatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          numericFormatConfiguration(NumericFormatConfigurationProperty(numericFormatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringFormatConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringFormatConfigurationProperty,
    ) : CdkObject(cdkObject), StringFormatConfigurationProperty {
      override fun nullValueFormatConfiguration(): Any? =
          unwrap(this).getNullValueFormatConfiguration()

      override fun numericFormatConfiguration(): Any? = unwrap(this).getNumericFormatConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          StringFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.StringFormatConfigurationProperty):
          StringFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: StringFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringFormatConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringFormatConfigurationProperty
    }
  }

  public interface PivotFieldSortOptionsProperty {
    public fun fieldId(): String

    public fun sortBy(): Any

    @CdkDslMarker
    public interface Builder {
      public fun fieldId(fieldId: String)

      public fun sortBy(sortBy: IResolvable)

      public fun sortBy(sortBy: PivotTableSortByProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("785266e70bc50e751679a39d69300e5996b653174b27c43d143cb195a51ec599")
      public fun sortBy(sortBy: PivotTableSortByProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotFieldSortOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotFieldSortOptionsProperty.builder()

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun sortBy(sortBy: IResolvable) {
        cdkBuilder.sortBy(sortBy.let(IResolvable::unwrap))
      }

      override fun sortBy(sortBy: PivotTableSortByProperty) {
        cdkBuilder.sortBy(sortBy.let(PivotTableSortByProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("785266e70bc50e751679a39d69300e5996b653174b27c43d143cb195a51ec599")
      override fun sortBy(sortBy: PivotTableSortByProperty.Builder.() -> Unit): Unit =
          sortBy(PivotTableSortByProperty(sortBy))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotFieldSortOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotFieldSortOptionsProperty,
    ) : CdkObject(cdkObject), PivotFieldSortOptionsProperty {
      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun sortBy(): Any = unwrap(this).getSortBy()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PivotFieldSortOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotFieldSortOptionsProperty):
          PivotFieldSortOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotFieldSortOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotFieldSortOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotFieldSortOptionsProperty
    }
  }

  public interface DataPathTypeProperty {
    public fun pivotTableDataPathType(): String? = unwrap(this).getPivotTableDataPathType()

    @CdkDslMarker
    public interface Builder {
      public fun pivotTableDataPathType(pivotTableDataPathType: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathTypeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathTypeProperty.builder()

      override fun pivotTableDataPathType(pivotTableDataPathType: String) {
        cdkBuilder.pivotTableDataPathType(pivotTableDataPathType)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathTypeProperty,
    ) : CdkObject(cdkObject), DataPathTypeProperty {
      override fun pivotTableDataPathType(): String? = unwrap(this).getPivotTableDataPathType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataPathTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathTypeProperty):
          DataPathTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataPathTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathTypeProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathTypeProperty
    }
  }

  public interface SubtotalOptionsProperty {
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    public fun fieldLevel(): String? = unwrap(this).getFieldLevel()

    public fun fieldLevelOptions(): Any? = unwrap(this).getFieldLevelOptions()

    public fun metricHeaderCellStyle(): Any? = unwrap(this).getMetricHeaderCellStyle()

    public fun styleTargets(): Any? = unwrap(this).getStyleTargets()

    public fun totalCellStyle(): Any? = unwrap(this).getTotalCellStyle()

    public fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

    public fun valueCellStyle(): Any? = unwrap(this).getValueCellStyle()

    @CdkDslMarker
    public interface Builder {
      public fun customLabel(customLabel: String)

      public fun fieldLevel(fieldLevel: String)

      public fun fieldLevelOptions(fieldLevelOptions: IResolvable)

      public fun fieldLevelOptions(fieldLevelOptions: List<Any>)

      public fun fieldLevelOptions(vararg fieldLevelOptions: Any)

      public fun metricHeaderCellStyle(metricHeaderCellStyle: IResolvable)

      public fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ef25ff7d95f2301d75797615088869b65c5c7a416fe5cd8382692c060c8ec3cf")
      public
          fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty.Builder.() -> Unit)

      public fun styleTargets(styleTargets: IResolvable)

      public fun styleTargets(styleTargets: List<Any>)

      public fun styleTargets(vararg styleTargets: Any)

      public fun totalCellStyle(totalCellStyle: IResolvable)

      public fun totalCellStyle(totalCellStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4d227c1d55f637dd31ad5d07fcfb328be9896730705b8c7ba266eecef60bddef")
      public fun totalCellStyle(totalCellStyle: TableCellStyleProperty.Builder.() -> Unit)

      public fun totalsVisibility(totalsVisibility: String)

      public fun valueCellStyle(valueCellStyle: IResolvable)

      public fun valueCellStyle(valueCellStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1eae6aeff9c084e573d1eaf6f5d22abdd02dbf5acfb6a2080ea3c3e6ff8c6189")
      public fun valueCellStyle(valueCellStyle: TableCellStyleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SubtotalOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SubtotalOptionsProperty.builder()

      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      override fun fieldLevel(fieldLevel: String) {
        cdkBuilder.fieldLevel(fieldLevel)
      }

      override fun fieldLevelOptions(fieldLevelOptions: IResolvable) {
        cdkBuilder.fieldLevelOptions(fieldLevelOptions.let(IResolvable::unwrap))
      }

      override fun fieldLevelOptions(fieldLevelOptions: List<Any>) {
        cdkBuilder.fieldLevelOptions(fieldLevelOptions)
      }

      override fun fieldLevelOptions(vararg fieldLevelOptions: Any): Unit =
          fieldLevelOptions(fieldLevelOptions.toList())

      override fun metricHeaderCellStyle(metricHeaderCellStyle: IResolvable) {
        cdkBuilder.metricHeaderCellStyle(metricHeaderCellStyle.let(IResolvable::unwrap))
      }

      override fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty) {
        cdkBuilder.metricHeaderCellStyle(metricHeaderCellStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ef25ff7d95f2301d75797615088869b65c5c7a416fe5cd8382692c060c8ec3cf")
      override
          fun metricHeaderCellStyle(metricHeaderCellStyle: TableCellStyleProperty.Builder.() -> Unit):
          Unit = metricHeaderCellStyle(TableCellStyleProperty(metricHeaderCellStyle))

      override fun styleTargets(styleTargets: IResolvable) {
        cdkBuilder.styleTargets(styleTargets.let(IResolvable::unwrap))
      }

      override fun styleTargets(styleTargets: List<Any>) {
        cdkBuilder.styleTargets(styleTargets)
      }

      override fun styleTargets(vararg styleTargets: Any): Unit =
          styleTargets(styleTargets.toList())

      override fun totalCellStyle(totalCellStyle: IResolvable) {
        cdkBuilder.totalCellStyle(totalCellStyle.let(IResolvable::unwrap))
      }

      override fun totalCellStyle(totalCellStyle: TableCellStyleProperty) {
        cdkBuilder.totalCellStyle(totalCellStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4d227c1d55f637dd31ad5d07fcfb328be9896730705b8c7ba266eecef60bddef")
      override fun totalCellStyle(totalCellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          totalCellStyle(TableCellStyleProperty(totalCellStyle))

      override fun totalsVisibility(totalsVisibility: String) {
        cdkBuilder.totalsVisibility(totalsVisibility)
      }

      override fun valueCellStyle(valueCellStyle: IResolvable) {
        cdkBuilder.valueCellStyle(valueCellStyle.let(IResolvable::unwrap))
      }

      override fun valueCellStyle(valueCellStyle: TableCellStyleProperty) {
        cdkBuilder.valueCellStyle(valueCellStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1eae6aeff9c084e573d1eaf6f5d22abdd02dbf5acfb6a2080ea3c3e6ff8c6189")
      override fun valueCellStyle(valueCellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          valueCellStyle(TableCellStyleProperty(valueCellStyle))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SubtotalOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SubtotalOptionsProperty,
    ) : CdkObject(cdkObject), SubtotalOptionsProperty {
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      override fun fieldLevel(): String? = unwrap(this).getFieldLevel()

      override fun fieldLevelOptions(): Any? = unwrap(this).getFieldLevelOptions()

      override fun metricHeaderCellStyle(): Any? = unwrap(this).getMetricHeaderCellStyle()

      override fun styleTargets(): Any? = unwrap(this).getStyleTargets()

      override fun totalCellStyle(): Any? = unwrap(this).getTotalCellStyle()

      override fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

      override fun valueCellStyle(): Any? = unwrap(this).getValueCellStyle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SubtotalOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SubtotalOptionsProperty):
          SubtotalOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SubtotalOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SubtotalOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SubtotalOptionsProperty
    }
  }

  public interface PeriodToDateComputationProperty {
    public fun computationId(): String

    public fun name(): String? = unwrap(this).getName()

    public fun periodTimeGranularity(): String? = unwrap(this).getPeriodTimeGranularity()

    public fun time(): Any? = unwrap(this).getTime()

    public fun `value`(): Any? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun computationId(computationId: String)

      public fun name(name: String)

      public fun periodTimeGranularity(periodTimeGranularity: String)

      public fun time(time: IResolvable)

      public fun time(time: DimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fa56ccaa04d5db1b09474498e7a1e9cd868b9a75302860340fed870765fbd9c2")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)

      public fun `value`(`value`: IResolvable)

      public fun `value`(`value`: MeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("41f5460ee2974069bea17cff0295b8ae66227e1e13722c277d2473ccbe70048c")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodToDateComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodToDateComputationProperty.builder()

      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun periodTimeGranularity(periodTimeGranularity: String) {
        cdkBuilder.periodTimeGranularity(periodTimeGranularity)
      }

      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fa56ccaa04d5db1b09474498e7a1e9cd868b9a75302860340fed870765fbd9c2")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("41f5460ee2974069bea17cff0295b8ae66227e1e13722c277d2473ccbe70048c")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodToDateComputationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodToDateComputationProperty,
    ) : CdkObject(cdkObject), PeriodToDateComputationProperty {
      override fun computationId(): String = unwrap(this).getComputationId()

      override fun name(): String? = unwrap(this).getName()

      override fun periodTimeGranularity(): String? = unwrap(this).getPeriodTimeGranularity()

      override fun time(): Any? = unwrap(this).getTime()

      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PeriodToDateComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodToDateComputationProperty):
          PeriodToDateComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PeriodToDateComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodToDateComputationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PeriodToDateComputationProperty
    }
  }

  public interface FieldLabelTypeProperty {
    public fun fieldId(): String? = unwrap(this).getFieldId()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun fieldId(fieldId: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldLabelTypeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldLabelTypeProperty.builder()

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldLabelTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldLabelTypeProperty,
    ) : CdkObject(cdkObject), FieldLabelTypeProperty {
      override fun fieldId(): String? = unwrap(this).getFieldId()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FieldLabelTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FieldLabelTypeProperty):
          FieldLabelTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FieldLabelTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldLabelTypeProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldLabelTypeProperty
    }
  }

  public interface TemplateSourceEntityProperty {
    public fun sourceAnalysis(): Any? = unwrap(this).getSourceAnalysis()

    public fun sourceTemplate(): Any? = unwrap(this).getSourceTemplate()

    @CdkDslMarker
    public interface Builder {
      public fun sourceAnalysis(sourceAnalysis: IResolvable)

      public fun sourceAnalysis(sourceAnalysis: TemplateSourceAnalysisProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("73abf2f3b6f274db551a20893bb39f8679712964d11992bc2e8aecd5995e992b")
      public fun sourceAnalysis(sourceAnalysis: TemplateSourceAnalysisProperty.Builder.() -> Unit)

      public fun sourceTemplate(sourceTemplate: IResolvable)

      public fun sourceTemplate(sourceTemplate: TemplateSourceTemplateProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ae8d7a41a9494c8e8655e74476d1bc6ff5120426c6762843cfab51c8f7d1a578")
      public fun sourceTemplate(sourceTemplate: TemplateSourceTemplateProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceEntityProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceEntityProperty.builder()

      override fun sourceAnalysis(sourceAnalysis: IResolvable) {
        cdkBuilder.sourceAnalysis(sourceAnalysis.let(IResolvable::unwrap))
      }

      override fun sourceAnalysis(sourceAnalysis: TemplateSourceAnalysisProperty) {
        cdkBuilder.sourceAnalysis(sourceAnalysis.let(TemplateSourceAnalysisProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("73abf2f3b6f274db551a20893bb39f8679712964d11992bc2e8aecd5995e992b")
      override
          fun sourceAnalysis(sourceAnalysis: TemplateSourceAnalysisProperty.Builder.() -> Unit):
          Unit = sourceAnalysis(TemplateSourceAnalysisProperty(sourceAnalysis))

      override fun sourceTemplate(sourceTemplate: IResolvable) {
        cdkBuilder.sourceTemplate(sourceTemplate.let(IResolvable::unwrap))
      }

      override fun sourceTemplate(sourceTemplate: TemplateSourceTemplateProperty) {
        cdkBuilder.sourceTemplate(sourceTemplate.let(TemplateSourceTemplateProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ae8d7a41a9494c8e8655e74476d1bc6ff5120426c6762843cfab51c8f7d1a578")
      override
          fun sourceTemplate(sourceTemplate: TemplateSourceTemplateProperty.Builder.() -> Unit):
          Unit = sourceTemplate(TemplateSourceTemplateProperty(sourceTemplate))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceEntityProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceEntityProperty,
    ) : CdkObject(cdkObject), TemplateSourceEntityProperty {
      override fun sourceAnalysis(): Any? = unwrap(this).getSourceAnalysis()

      override fun sourceTemplate(): Any? = unwrap(this).getSourceTemplate()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TemplateSourceEntityProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceEntityProperty):
          TemplateSourceEntityProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TemplateSourceEntityProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceEntityProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceEntityProperty
    }
  }

  public interface GeospatialWindowOptionsProperty {
    public fun bounds(): Any? = unwrap(this).getBounds()

    public fun mapZoomMode(): String? = unwrap(this).getMapZoomMode()

    @CdkDslMarker
    public interface Builder {
      public fun bounds(bounds: IResolvable)

      public fun bounds(bounds: GeospatialCoordinateBoundsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1bbe823db083ebbf21e6681588cbff7bfafc0c375780939a5cc9fb29a765b3e4")
      public fun bounds(bounds: GeospatialCoordinateBoundsProperty.Builder.() -> Unit)

      public fun mapZoomMode(mapZoomMode: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialWindowOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialWindowOptionsProperty.builder()

      override fun bounds(bounds: IResolvable) {
        cdkBuilder.bounds(bounds.let(IResolvable::unwrap))
      }

      override fun bounds(bounds: GeospatialCoordinateBoundsProperty) {
        cdkBuilder.bounds(bounds.let(GeospatialCoordinateBoundsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1bbe823db083ebbf21e6681588cbff7bfafc0c375780939a5cc9fb29a765b3e4")
      override fun bounds(bounds: GeospatialCoordinateBoundsProperty.Builder.() -> Unit): Unit =
          bounds(GeospatialCoordinateBoundsProperty(bounds))

      override fun mapZoomMode(mapZoomMode: String) {
        cdkBuilder.mapZoomMode(mapZoomMode)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialWindowOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialWindowOptionsProperty,
    ) : CdkObject(cdkObject), GeospatialWindowOptionsProperty {
      override fun bounds(): Any? = unwrap(this).getBounds()

      override fun mapZoomMode(): String? = unwrap(this).getMapZoomMode()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GeospatialWindowOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialWindowOptionsProperty):
          GeospatialWindowOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialWindowOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialWindowOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialWindowOptionsProperty
    }
  }

  public interface HeaderFooterSectionConfigurationProperty {
    public fun layout(): Any

    public fun sectionId(): String

    public fun style(): Any? = unwrap(this).getStyle()

    @CdkDslMarker
    public interface Builder {
      public fun layout(layout: IResolvable)

      public fun layout(layout: SectionLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dc56da8f7db29e0f658b52302170dbc183bff373c2f1f075fb2f21cb528f5b5c")
      public fun layout(layout: SectionLayoutConfigurationProperty.Builder.() -> Unit)

      public fun sectionId(sectionId: String)

      public fun style(style: IResolvable)

      public fun style(style: SectionStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("262a86b1bc837cc4f982a40c5807f1ed36729c0787f7823951b84313e4a5869f")
      public fun style(style: SectionStyleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeaderFooterSectionConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeaderFooterSectionConfigurationProperty.builder()

      override fun layout(layout: IResolvable) {
        cdkBuilder.layout(layout.let(IResolvable::unwrap))
      }

      override fun layout(layout: SectionLayoutConfigurationProperty) {
        cdkBuilder.layout(layout.let(SectionLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dc56da8f7db29e0f658b52302170dbc183bff373c2f1f075fb2f21cb528f5b5c")
      override fun layout(layout: SectionLayoutConfigurationProperty.Builder.() -> Unit): Unit =
          layout(SectionLayoutConfigurationProperty(layout))

      override fun sectionId(sectionId: String) {
        cdkBuilder.sectionId(sectionId)
      }

      override fun style(style: IResolvable) {
        cdkBuilder.style(style.let(IResolvable::unwrap))
      }

      override fun style(style: SectionStyleProperty) {
        cdkBuilder.style(style.let(SectionStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("262a86b1bc837cc4f982a40c5807f1ed36729c0787f7823951b84313e4a5869f")
      override fun style(style: SectionStyleProperty.Builder.() -> Unit): Unit =
          style(SectionStyleProperty(style))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeaderFooterSectionConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeaderFooterSectionConfigurationProperty,
    ) : CdkObject(cdkObject), HeaderFooterSectionConfigurationProperty {
      override fun layout(): Any = unwrap(this).getLayout()

      override fun sectionId(): String = unwrap(this).getSectionId()

      override fun style(): Any? = unwrap(this).getStyle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          HeaderFooterSectionConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.HeaderFooterSectionConfigurationProperty):
          HeaderFooterSectionConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HeaderFooterSectionConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeaderFooterSectionConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeaderFooterSectionConfigurationProperty
    }
  }

  public interface SheetElementRenderingRuleProperty {
    public fun configurationOverrides(): Any

    public fun expression(): String

    @CdkDslMarker
    public interface Builder {
      public fun configurationOverrides(configurationOverrides: IResolvable)

      public
          fun configurationOverrides(configurationOverrides: SheetElementConfigurationOverridesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ecdc696ea4924cbe40fdce269f49adc1f86b158dee7e3564b1ed0f9be7ed410")
      public
          fun configurationOverrides(configurationOverrides: SheetElementConfigurationOverridesProperty.Builder.() -> Unit)

      public fun expression(expression: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementRenderingRuleProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementRenderingRuleProperty.builder()

      override fun configurationOverrides(configurationOverrides: IResolvable) {
        cdkBuilder.configurationOverrides(configurationOverrides.let(IResolvable::unwrap))
      }

      override
          fun configurationOverrides(configurationOverrides: SheetElementConfigurationOverridesProperty) {
        cdkBuilder.configurationOverrides(configurationOverrides.let(SheetElementConfigurationOverridesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ecdc696ea4924cbe40fdce269f49adc1f86b158dee7e3564b1ed0f9be7ed410")
      override
          fun configurationOverrides(configurationOverrides: SheetElementConfigurationOverridesProperty.Builder.() -> Unit):
          Unit =
          configurationOverrides(SheetElementConfigurationOverridesProperty(configurationOverrides))

      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementRenderingRuleProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementRenderingRuleProperty,
    ) : CdkObject(cdkObject), SheetElementRenderingRuleProperty {
      override fun configurationOverrides(): Any = unwrap(this).getConfigurationOverrides()

      override fun expression(): String = unwrap(this).getExpression()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SheetElementRenderingRuleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementRenderingRuleProperty):
          SheetElementRenderingRuleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetElementRenderingRuleProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementRenderingRuleProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementRenderingRuleProperty
    }
  }

  public interface EntityProperty {
    public fun path(): String? = unwrap(this).getPath()

    @CdkDslMarker
    public interface Builder {
      public fun path(path: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.EntityProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.EntityProperty.builder()

      override fun path(path: String) {
        cdkBuilder.path(path)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.EntityProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.EntityProperty,
    ) : CdkObject(cdkObject), EntityProperty {
      override fun path(): String? = unwrap(this).getPath()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): EntityProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.EntityProperty):
          EntityProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: EntityProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.EntityProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.EntityProperty
    }
  }

  public interface GaugeChartConditionalFormattingProperty {
    public fun conditionalFormattingOptions(): Any? = unwrap(this).getConditionalFormattingOptions()

    @CdkDslMarker
    public interface Builder {
      public fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable)

      public fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>)

      public fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingProperty.builder()

      override fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions.let(IResolvable::unwrap))
      }

      override fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions)
      }

      override fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any): Unit =
          conditionalFormattingOptions(conditionalFormattingOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingProperty,
    ) : CdkObject(cdkObject), GaugeChartConditionalFormattingProperty {
      override fun conditionalFormattingOptions(): Any? =
          unwrap(this).getConditionalFormattingOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GaugeChartConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingProperty):
          GaugeChartConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartConditionalFormattingProperty
    }
  }

  public interface TableBorderOptionsProperty {
    public fun color(): String? = unwrap(this).getColor()

    public fun style(): String? = unwrap(this).getStyle()

    public fun thickness(): Number? = unwrap(this).getThickness()

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)

      public fun style(style: String)

      public fun thickness(thickness: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableBorderOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableBorderOptionsProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      override fun style(style: String) {
        cdkBuilder.style(style)
      }

      override fun thickness(thickness: Number) {
        cdkBuilder.thickness(thickness)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableBorderOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableBorderOptionsProperty,
    ) : CdkObject(cdkObject), TableBorderOptionsProperty {
      override fun color(): String? = unwrap(this).getColor()

      override fun style(): String? = unwrap(this).getStyle()

      override fun thickness(): Number? = unwrap(this).getThickness()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TableBorderOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableBorderOptionsProperty):
          TableBorderOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableBorderOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableBorderOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableBorderOptionsProperty
    }
  }

  public interface GaugeChartFieldWellsProperty {
    public fun targetValues(): Any? = unwrap(this).getTargetValues()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun targetValues(targetValues: IResolvable)

      public fun targetValues(targetValues: List<Any>)

      public fun targetValues(vararg targetValues: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartFieldWellsProperty.builder()

      override fun targetValues(targetValues: IResolvable) {
        cdkBuilder.targetValues(targetValues.let(IResolvable::unwrap))
      }

      override fun targetValues(targetValues: List<Any>) {
        cdkBuilder.targetValues(targetValues)
      }

      override fun targetValues(vararg targetValues: Any): Unit =
          targetValues(targetValues.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartFieldWellsProperty,
    ) : CdkObject(cdkObject), GaugeChartFieldWellsProperty {
      override fun targetValues(): Any? = unwrap(this).getTargetValues()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GaugeChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartFieldWellsProperty):
          GaugeChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartFieldWellsProperty
    }
  }

  public interface ScatterPlotCategoricallyAggregatedFieldWellsProperty {
    public fun category(): Any? = unwrap(this).getCategory()

    public fun label(): Any? = unwrap(this).getLabel()

    public fun size(): Any? = unwrap(this).getSize()

    public fun xAxis(): Any? = unwrap(this).getXAxis()

    public fun yAxis(): Any? = unwrap(this).getYAxis()

    @CdkDslMarker
    public interface Builder {
      public fun category(category: IResolvable)

      public fun category(category: List<Any>)

      public fun category(vararg category: Any)

      public fun label(label: IResolvable)

      public fun label(label: List<Any>)

      public fun label(vararg label: Any)

      public fun size(size: IResolvable)

      public fun size(size: List<Any>)

      public fun size(vararg size: Any)

      public fun xAxis(xAxis: IResolvable)

      public fun xAxis(xAxis: List<Any>)

      public fun xAxis(vararg xAxis: Any)

      public fun yAxis(yAxis: IResolvable)

      public fun yAxis(yAxis: List<Any>)

      public fun yAxis(vararg yAxis: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotCategoricallyAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotCategoricallyAggregatedFieldWellsProperty.builder()

      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      override fun category(vararg category: Any): Unit = category(category.toList())

      override fun label(label: IResolvable) {
        cdkBuilder.label(label.let(IResolvable::unwrap))
      }

      override fun label(label: List<Any>) {
        cdkBuilder.label(label)
      }

      override fun label(vararg label: Any): Unit = label(label.toList())

      override fun size(size: IResolvable) {
        cdkBuilder.size(size.let(IResolvable::unwrap))
      }

      override fun size(size: List<Any>) {
        cdkBuilder.size(size)
      }

      override fun size(vararg size: Any): Unit = size(size.toList())

      override fun xAxis(xAxis: IResolvable) {
        cdkBuilder.xAxis(xAxis.let(IResolvable::unwrap))
      }

      override fun xAxis(xAxis: List<Any>) {
        cdkBuilder.xAxis(xAxis)
      }

      override fun xAxis(vararg xAxis: Any): Unit = xAxis(xAxis.toList())

      override fun yAxis(yAxis: IResolvable) {
        cdkBuilder.yAxis(yAxis.let(IResolvable::unwrap))
      }

      override fun yAxis(yAxis: List<Any>) {
        cdkBuilder.yAxis(yAxis)
      }

      override fun yAxis(vararg yAxis: Any): Unit = yAxis(yAxis.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotCategoricallyAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotCategoricallyAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), ScatterPlotCategoricallyAggregatedFieldWellsProperty {
      override fun category(): Any? = unwrap(this).getCategory()

      override fun label(): Any? = unwrap(this).getLabel()

      override fun size(): Any? = unwrap(this).getSize()

      override fun xAxis(): Any? = unwrap(this).getXAxis()

      override fun yAxis(): Any? = unwrap(this).getYAxis()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ScatterPlotCategoricallyAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotCategoricallyAggregatedFieldWellsProperty):
          ScatterPlotCategoricallyAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ScatterPlotCategoricallyAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotCategoricallyAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotCategoricallyAggregatedFieldWellsProperty
    }
  }

  public interface GaugeChartVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: GaugeChartConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ee6b159e80e7388e339176316f266787353b4e01309a740694e30a753133821")
      public
          fun chartConfiguration(chartConfiguration: GaugeChartConfigurationProperty.Builder.() -> Unit)

      public fun conditionalFormatting(conditionalFormatting: IResolvable)

      public
          fun conditionalFormatting(conditionalFormatting: GaugeChartConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dc1bb63a33346e78faf5ec79dc19dc4bee98e716ab93cadca95b926044df08ad")
      public
          fun conditionalFormatting(conditionalFormatting: GaugeChartConditionalFormattingProperty.Builder.() -> Unit)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7234f0bb3ce9908ed5655ee3d8f76c033c4cc1a491c1166613459b8e7e67b9cf")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e1a6639eb650d7b3d83765cb9dad05032c34691b18a0deba2ce0e002991498bd")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: GaugeChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(GaugeChartConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ee6b159e80e7388e339176316f266787353b4e01309a740694e30a753133821")
      override
          fun chartConfiguration(chartConfiguration: GaugeChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(GaugeChartConfigurationProperty(chartConfiguration))

      override fun conditionalFormatting(conditionalFormatting: IResolvable) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(IResolvable::unwrap))
      }

      override
          fun conditionalFormatting(conditionalFormatting: GaugeChartConditionalFormattingProperty) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(GaugeChartConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dc1bb63a33346e78faf5ec79dc19dc4bee98e716ab93cadca95b926044df08ad")
      override
          fun conditionalFormatting(conditionalFormatting: GaugeChartConditionalFormattingProperty.Builder.() -> Unit):
          Unit =
          conditionalFormatting(GaugeChartConditionalFormattingProperty(conditionalFormatting))

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7234f0bb3ce9908ed5655ee3d8f76c033c4cc1a491c1166613459b8e7e67b9cf")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e1a6639eb650d7b3d83765cb9dad05032c34691b18a0deba2ce0e002991498bd")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartVisualProperty,
    ) : CdkObject(cdkObject), GaugeChartVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GaugeChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartVisualProperty):
          GaugeChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartVisualProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartVisualProperty
    }
  }

  public interface NumericEqualityDrillDownFilterProperty {
    public fun column(): Any

    public fun `value`(): Number

    @CdkDslMarker
    public interface Builder {
      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f204a775d2ef8aecef0784d5e3bad39077efe2b8b2c91b3edf7b91af9c8a52c")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityDrillDownFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityDrillDownFilterProperty.builder()

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f204a775d2ef8aecef0784d5e3bad39077efe2b8b2c91b3edf7b91af9c8a52c")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityDrillDownFilterProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityDrillDownFilterProperty,
    ) : CdkObject(cdkObject), NumericEqualityDrillDownFilterProperty {
      override fun column(): Any = unwrap(this).getColumn()

      override fun `value`(): Number = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          NumericEqualityDrillDownFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityDrillDownFilterProperty):
          NumericEqualityDrillDownFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericEqualityDrillDownFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityDrillDownFilterProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityDrillDownFilterProperty
    }
  }

  public interface ProgressBarOptionsProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ProgressBarOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ProgressBarOptionsProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ProgressBarOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ProgressBarOptionsProperty,
    ) : CdkObject(cdkObject), ProgressBarOptionsProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ProgressBarOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ProgressBarOptionsProperty):
          ProgressBarOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ProgressBarOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ProgressBarOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ProgressBarOptionsProperty
    }
  }

  public interface SheetControlInfoIconLabelOptionsProperty {
    public fun infoIconText(): String? = unwrap(this).getInfoIconText()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun infoIconText(infoIconText: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlInfoIconLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlInfoIconLabelOptionsProperty.builder()

      override fun infoIconText(infoIconText: String) {
        cdkBuilder.infoIconText(infoIconText)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlInfoIconLabelOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlInfoIconLabelOptionsProperty,
    ) : CdkObject(cdkObject), SheetControlInfoIconLabelOptionsProperty {
      override fun infoIconText(): String? = unwrap(this).getInfoIconText()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SheetControlInfoIconLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlInfoIconLabelOptionsProperty):
          SheetControlInfoIconLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetControlInfoIconLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlInfoIconLabelOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlInfoIconLabelOptionsProperty
    }
  }

  public interface ReferenceLineStaticDataConfigurationProperty {
    public fun `value`(): Number

    @CdkDslMarker
    public interface Builder {
      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStaticDataConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStaticDataConfigurationProperty.builder()

      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStaticDataConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStaticDataConfigurationProperty,
    ) : CdkObject(cdkObject), ReferenceLineStaticDataConfigurationProperty {
      override fun `value`(): Number = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineStaticDataConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStaticDataConfigurationProperty):
          ReferenceLineStaticDataConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineStaticDataConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStaticDataConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStaticDataConfigurationProperty
    }
  }

  public interface RowAlternateColorOptionsProperty {
    public fun rowAlternateColors(): List<String> = unwrap(this).getRowAlternateColors() ?:
        emptyList()

    public fun status(): String? = unwrap(this).getStatus()

    public fun usePrimaryBackgroundColor(): String? = unwrap(this).getUsePrimaryBackgroundColor()

    @CdkDslMarker
    public interface Builder {
      public fun rowAlternateColors(rowAlternateColors: List<String>)

      public fun rowAlternateColors(vararg rowAlternateColors: String)

      public fun status(status: String)

      public fun usePrimaryBackgroundColor(usePrimaryBackgroundColor: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RowAlternateColorOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.RowAlternateColorOptionsProperty.builder()

      override fun rowAlternateColors(rowAlternateColors: List<String>) {
        cdkBuilder.rowAlternateColors(rowAlternateColors)
      }

      override fun rowAlternateColors(vararg rowAlternateColors: String): Unit =
          rowAlternateColors(rowAlternateColors.toList())

      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      override fun usePrimaryBackgroundColor(usePrimaryBackgroundColor: String) {
        cdkBuilder.usePrimaryBackgroundColor(usePrimaryBackgroundColor)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.RowAlternateColorOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RowAlternateColorOptionsProperty,
    ) : CdkObject(cdkObject), RowAlternateColorOptionsProperty {
      override fun rowAlternateColors(): List<String> = unwrap(this).getRowAlternateColors() ?:
          emptyList()

      override fun status(): String? = unwrap(this).getStatus()

      override fun usePrimaryBackgroundColor(): String? =
          unwrap(this).getUsePrimaryBackgroundColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): RowAlternateColorOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.RowAlternateColorOptionsProperty):
          RowAlternateColorOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RowAlternateColorOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.RowAlternateColorOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.RowAlternateColorOptionsProperty
    }
  }

  public interface PieChartAggregatedFieldWellsProperty {
    public fun category(): Any? = unwrap(this).getCategory()

    public fun smallMultiples(): Any? = unwrap(this).getSmallMultiples()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun category(category: IResolvable)

      public fun category(category: List<Any>)

      public fun category(vararg category: Any)

      public fun smallMultiples(smallMultiples: IResolvable)

      public fun smallMultiples(smallMultiples: List<Any>)

      public fun smallMultiples(vararg smallMultiples: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartAggregatedFieldWellsProperty.builder()

      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      override fun category(vararg category: Any): Unit = category(category.toList())

      override fun smallMultiples(smallMultiples: IResolvable) {
        cdkBuilder.smallMultiples(smallMultiples.let(IResolvable::unwrap))
      }

      override fun smallMultiples(smallMultiples: List<Any>) {
        cdkBuilder.smallMultiples(smallMultiples)
      }

      override fun smallMultiples(vararg smallMultiples: Any): Unit =
          smallMultiples(smallMultiples.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), PieChartAggregatedFieldWellsProperty {
      override fun category(): Any? = unwrap(this).getCategory()

      override fun smallMultiples(): Any? = unwrap(this).getSmallMultiples()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PieChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartAggregatedFieldWellsProperty):
          PieChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PieChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartAggregatedFieldWellsProperty
    }
  }

  public interface PivotTableCellConditionalFormattingProperty {
    public fun fieldId(): String

    public fun scope(): Any? = unwrap(this).getScope()

    public fun scopes(): Any? = unwrap(this).getScopes()

    public fun textFormat(): Any? = unwrap(this).getTextFormat()

    @CdkDslMarker
    public interface Builder {
      public fun fieldId(fieldId: String)

      public fun scope(scope: IResolvable)

      public fun scope(scope: PivotTableConditionalFormattingScopeProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("19a2c8c3516b3554d97d13139389be1b66a2229a864f3560d73c83778af37b36")
      public fun scope(scope: PivotTableConditionalFormattingScopeProperty.Builder.() -> Unit)

      public fun scopes(scopes: IResolvable)

      public fun scopes(scopes: List<Any>)

      public fun scopes(vararg scopes: Any)

      public fun textFormat(textFormat: IResolvable)

      public fun textFormat(textFormat: TextConditionalFormatProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fcdb186fc7e38e4655af5bf34a47abd0596f957587ddf70104e9b8aa5f879254")
      public fun textFormat(textFormat: TextConditionalFormatProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableCellConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableCellConditionalFormattingProperty.builder()

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun scope(scope: IResolvable) {
        cdkBuilder.scope(scope.let(IResolvable::unwrap))
      }

      override fun scope(scope: PivotTableConditionalFormattingScopeProperty) {
        cdkBuilder.scope(scope.let(PivotTableConditionalFormattingScopeProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("19a2c8c3516b3554d97d13139389be1b66a2229a864f3560d73c83778af37b36")
      override fun scope(scope: PivotTableConditionalFormattingScopeProperty.Builder.() -> Unit):
          Unit = scope(PivotTableConditionalFormattingScopeProperty(scope))

      override fun scopes(scopes: IResolvable) {
        cdkBuilder.scopes(scopes.let(IResolvable::unwrap))
      }

      override fun scopes(scopes: List<Any>) {
        cdkBuilder.scopes(scopes)
      }

      override fun scopes(vararg scopes: Any): Unit = scopes(scopes.toList())

      override fun textFormat(textFormat: IResolvable) {
        cdkBuilder.textFormat(textFormat.let(IResolvable::unwrap))
      }

      override fun textFormat(textFormat: TextConditionalFormatProperty) {
        cdkBuilder.textFormat(textFormat.let(TextConditionalFormatProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fcdb186fc7e38e4655af5bf34a47abd0596f957587ddf70104e9b8aa5f879254")
      override fun textFormat(textFormat: TextConditionalFormatProperty.Builder.() -> Unit): Unit =
          textFormat(TextConditionalFormatProperty(textFormat))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableCellConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableCellConditionalFormattingProperty,
    ) : CdkObject(cdkObject), PivotTableCellConditionalFormattingProperty {
      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun scope(): Any? = unwrap(this).getScope()

      override fun scopes(): Any? = unwrap(this).getScopes()

      override fun textFormat(): Any? = unwrap(this).getTextFormat()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableCellConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableCellConditionalFormattingProperty):
          PivotTableCellConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableCellConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableCellConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableCellConditionalFormattingProperty
    }
  }

  public interface ListControlSearchOptionsProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSearchOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSearchOptionsProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSearchOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSearchOptionsProperty,
    ) : CdkObject(cdkObject), ListControlSearchOptionsProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ListControlSearchOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSearchOptionsProperty):
          ListControlSearchOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ListControlSearchOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSearchOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlSearchOptionsProperty
    }
  }

  public interface ParameterDateTimePickerControlProperty {
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun parameterControlId(): String

    public fun sourceParameterName(): String

    public fun title(): String

    @CdkDslMarker
    public interface Builder {
      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e13b6d77fce9e4b15585dd3fd0dd025e52c3d512b18e8fcccbe164d1201fd176")
      public
          fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun parameterControlId(parameterControlId: String)

      public fun sourceParameterName(sourceParameterName: String)

      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDateTimePickerControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDateTimePickerControlProperty.builder()

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(DateTimePickerControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e13b6d77fce9e4b15585dd3fd0dd025e52c3d512b18e8fcccbe164d1201fd176")
      override
          fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(DateTimePickerControlDisplayOptionsProperty(displayOptions))

      override fun parameterControlId(parameterControlId: String) {
        cdkBuilder.parameterControlId(parameterControlId)
      }

      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDateTimePickerControlProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDateTimePickerControlProperty,
    ) : CdkObject(cdkObject), ParameterDateTimePickerControlProperty {
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun parameterControlId(): String = unwrap(this).getParameterControlId()

      override fun sourceParameterName(): String = unwrap(this).getSourceParameterName()

      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ParameterDateTimePickerControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDateTimePickerControlProperty):
          ParameterDateTimePickerControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterDateTimePickerControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDateTimePickerControlProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDateTimePickerControlProperty
    }
  }

  public interface FilterRelativeDateTimeControlProperty {
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun filterControlId(): String

    public fun sourceFilterId(): String

    public fun title(): String

    @CdkDslMarker
    public interface Builder {
      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: RelativeDateTimeControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("803a4672bfe35253b17035fe5553bcecde5929c51ba912a6add57ef2e31c0bbd")
      public
          fun displayOptions(displayOptions: RelativeDateTimeControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun filterControlId(filterControlId: String)

      public fun sourceFilterId(sourceFilterId: String)

      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterRelativeDateTimeControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterRelativeDateTimeControlProperty.builder()

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: RelativeDateTimeControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(RelativeDateTimeControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("803a4672bfe35253b17035fe5553bcecde5929c51ba912a6add57ef2e31c0bbd")
      override
          fun displayOptions(displayOptions: RelativeDateTimeControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(RelativeDateTimeControlDisplayOptionsProperty(displayOptions))

      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterRelativeDateTimeControlProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterRelativeDateTimeControlProperty,
    ) : CdkObject(cdkObject), FilterRelativeDateTimeControlProperty {
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilterRelativeDateTimeControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterRelativeDateTimeControlProperty):
          FilterRelativeDateTimeControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterRelativeDateTimeControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterRelativeDateTimeControlProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterRelativeDateTimeControlProperty
    }
  }

  public interface DateTimePickerControlDisplayOptionsProperty {
    public fun dateTimeFormat(): String? = unwrap(this).getDateTimeFormat()

    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    @CdkDslMarker
    public interface Builder {
      public fun dateTimeFormat(dateTimeFormat: String)

      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bebd386dd2aa7ab276340c51d1723e6f05961a0002605cd961783f4166927608")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      public fun titleOptions(titleOptions: IResolvable)

      public fun titleOptions(titleOptions: LabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aa1dcd2f66f7b623658d8dfcabaf05a5e5682533049b66a7297c8fc4112aa8ac")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimePickerControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimePickerControlDisplayOptionsProperty.builder()

      override fun dateTimeFormat(dateTimeFormat: String) {
        cdkBuilder.dateTimeFormat(dateTimeFormat)
      }

      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bebd386dd2aa7ab276340c51d1723e6f05961a0002605cd961783f4166927608")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aa1dcd2f66f7b623658d8dfcabaf05a5e5682533049b66a7297c8fc4112aa8ac")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimePickerControlDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimePickerControlDisplayOptionsProperty,
    ) : CdkObject(cdkObject), DateTimePickerControlDisplayOptionsProperty {
      override fun dateTimeFormat(): String? = unwrap(this).getDateTimeFormat()

      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DateTimePickerControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimePickerControlDisplayOptionsProperty):
          DateTimePickerControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimePickerControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimePickerControlDisplayOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimePickerControlDisplayOptionsProperty
    }
  }

  public interface SameSheetTargetVisualConfigurationProperty {
    public fun targetVisualOptions(): String? = unwrap(this).getTargetVisualOptions()

    public fun targetVisuals(): List<String> = unwrap(this).getTargetVisuals() ?: emptyList()

    @CdkDslMarker
    public interface Builder {
      public fun targetVisualOptions(targetVisualOptions: String)

      public fun targetVisuals(targetVisuals: List<String>)

      public fun targetVisuals(vararg targetVisuals: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SameSheetTargetVisualConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SameSheetTargetVisualConfigurationProperty.builder()

      override fun targetVisualOptions(targetVisualOptions: String) {
        cdkBuilder.targetVisualOptions(targetVisualOptions)
      }

      override fun targetVisuals(targetVisuals: List<String>) {
        cdkBuilder.targetVisuals(targetVisuals)
      }

      override fun targetVisuals(vararg targetVisuals: String): Unit =
          targetVisuals(targetVisuals.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SameSheetTargetVisualConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SameSheetTargetVisualConfigurationProperty,
    ) : CdkObject(cdkObject), SameSheetTargetVisualConfigurationProperty {
      override fun targetVisualOptions(): String? = unwrap(this).getTargetVisualOptions()

      override fun targetVisuals(): List<String> = unwrap(this).getTargetVisuals() ?: emptyList()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SameSheetTargetVisualConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SameSheetTargetVisualConfigurationProperty):
          SameSheetTargetVisualConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SameSheetTargetVisualConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SameSheetTargetVisualConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SameSheetTargetVisualConfigurationProperty
    }
  }

  public interface FilterSliderControlProperty {
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun filterControlId(): String

    public fun maximumValue(): Number

    public fun minimumValue(): Number

    public fun sourceFilterId(): String

    public fun stepSize(): Number

    public fun title(): String

    public fun type(): String? = unwrap(this).getType()

    @CdkDslMarker
    public interface Builder {
      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("885634c8c900fd8c6e9cc7b05ad3c9ef8a3a5ed68afa240947c71b8dc49882c6")
      public
          fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun filterControlId(filterControlId: String)

      public fun maximumValue(maximumValue: Number)

      public fun minimumValue(minimumValue: Number)

      public fun sourceFilterId(sourceFilterId: String)

      public fun stepSize(stepSize: Number)

      public fun title(title: String)

      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSliderControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSliderControlProperty.builder()

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(SliderControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("885634c8c900fd8c6e9cc7b05ad3c9ef8a3a5ed68afa240947c71b8dc49882c6")
      override
          fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(SliderControlDisplayOptionsProperty(displayOptions))

      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      override fun maximumValue(maximumValue: Number) {
        cdkBuilder.maximumValue(maximumValue)
      }

      override fun minimumValue(minimumValue: Number) {
        cdkBuilder.minimumValue(minimumValue)
      }

      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      override fun stepSize(stepSize: Number) {
        cdkBuilder.stepSize(stepSize)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSliderControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSliderControlProperty,
    ) : CdkObject(cdkObject), FilterSliderControlProperty {
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      override fun maximumValue(): Number = unwrap(this).getMaximumValue()

      override fun minimumValue(): Number = unwrap(this).getMinimumValue()

      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      override fun stepSize(): Number = unwrap(this).getStepSize()

      override fun title(): String = unwrap(this).getTitle()

      override fun type(): String? = unwrap(this).getType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilterSliderControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSliderControlProperty):
          FilterSliderControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterSliderControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSliderControlProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterSliderControlProperty
    }
  }

  public interface FilledMapConditionalFormattingOptionProperty {
    public fun shape(): Any

    @CdkDslMarker
    public interface Builder {
      public fun shape(shape: IResolvable)

      public fun shape(shape: FilledMapShapeConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9b283b027f548383e999e8a229eb9144722e10d7ed06e1de109801a1de4228f9")
      public fun shape(shape: FilledMapShapeConditionalFormattingProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingOptionProperty.builder()

      override fun shape(shape: IResolvable) {
        cdkBuilder.shape(shape.let(IResolvable::unwrap))
      }

      override fun shape(shape: FilledMapShapeConditionalFormattingProperty) {
        cdkBuilder.shape(shape.let(FilledMapShapeConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9b283b027f548383e999e8a229eb9144722e10d7ed06e1de109801a1de4228f9")
      override fun shape(shape: FilledMapShapeConditionalFormattingProperty.Builder.() -> Unit):
          Unit = shape(FilledMapShapeConditionalFormattingProperty(shape))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingOptionProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingOptionProperty,
    ) : CdkObject(cdkObject), FilledMapConditionalFormattingOptionProperty {
      override fun shape(): Any = unwrap(this).getShape()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilledMapConditionalFormattingOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingOptionProperty):
          FilledMapConditionalFormattingOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapConditionalFormattingOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingOptionProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConditionalFormattingOptionProperty
    }
  }

  public interface PivotTableFieldCollapseStateOptionProperty {
    public fun state(): String? = unwrap(this).getState()

    public fun target(): Any

    @CdkDslMarker
    public interface Builder {
      public fun state(state: String)

      public fun target(target: IResolvable)

      public fun target(target: PivotTableFieldCollapseStateTargetProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c7f8d97d2726a1d8ddf630730296f09d9176ab2cf3073a1292df73b91f76cbe7")
      public fun target(target: PivotTableFieldCollapseStateTargetProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateOptionProperty.builder()

      override fun state(state: String) {
        cdkBuilder.state(state)
      }

      override fun target(target: IResolvable) {
        cdkBuilder.target(target.let(IResolvable::unwrap))
      }

      override fun target(target: PivotTableFieldCollapseStateTargetProperty) {
        cdkBuilder.target(target.let(PivotTableFieldCollapseStateTargetProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c7f8d97d2726a1d8ddf630730296f09d9176ab2cf3073a1292df73b91f76cbe7")
      override fun target(target: PivotTableFieldCollapseStateTargetProperty.Builder.() -> Unit):
          Unit = target(PivotTableFieldCollapseStateTargetProperty(target))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateOptionProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateOptionProperty,
    ) : CdkObject(cdkObject), PivotTableFieldCollapseStateOptionProperty {
      override fun state(): String? = unwrap(this).getState()

      override fun target(): Any = unwrap(this).getTarget()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableFieldCollapseStateOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateOptionProperty):
          PivotTableFieldCollapseStateOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableFieldCollapseStateOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateOptionProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateOptionProperty
    }
  }

  public interface TableFieldURLConfigurationProperty {
    public fun imageConfiguration(): Any? = unwrap(this).getImageConfiguration()

    public fun linkConfiguration(): Any? = unwrap(this).getLinkConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun imageConfiguration(imageConfiguration: IResolvable)

      public fun imageConfiguration(imageConfiguration: TableFieldImageConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a96d4f5694bb6b36655380251e945f02de0bf3ccff19c4c200e92bb489d2517d")
      public
          fun imageConfiguration(imageConfiguration: TableFieldImageConfigurationProperty.Builder.() -> Unit)

      public fun linkConfiguration(linkConfiguration: IResolvable)

      public fun linkConfiguration(linkConfiguration: TableFieldLinkConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("948303a07e659278911d6f03cc4c0e23590c128eb502a4a5b5333c68d58d918a")
      public
          fun linkConfiguration(linkConfiguration: TableFieldLinkConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldURLConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldURLConfigurationProperty.builder()

      override fun imageConfiguration(imageConfiguration: IResolvable) {
        cdkBuilder.imageConfiguration(imageConfiguration.let(IResolvable::unwrap))
      }

      override fun imageConfiguration(imageConfiguration: TableFieldImageConfigurationProperty) {
        cdkBuilder.imageConfiguration(imageConfiguration.let(TableFieldImageConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a96d4f5694bb6b36655380251e945f02de0bf3ccff19c4c200e92bb489d2517d")
      override
          fun imageConfiguration(imageConfiguration: TableFieldImageConfigurationProperty.Builder.() -> Unit):
          Unit = imageConfiguration(TableFieldImageConfigurationProperty(imageConfiguration))

      override fun linkConfiguration(linkConfiguration: IResolvable) {
        cdkBuilder.linkConfiguration(linkConfiguration.let(IResolvable::unwrap))
      }

      override fun linkConfiguration(linkConfiguration: TableFieldLinkConfigurationProperty) {
        cdkBuilder.linkConfiguration(linkConfiguration.let(TableFieldLinkConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("948303a07e659278911d6f03cc4c0e23590c128eb502a4a5b5333c68d58d918a")
      override
          fun linkConfiguration(linkConfiguration: TableFieldLinkConfigurationProperty.Builder.() -> Unit):
          Unit = linkConfiguration(TableFieldLinkConfigurationProperty(linkConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldURLConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldURLConfigurationProperty,
    ) : CdkObject(cdkObject), TableFieldURLConfigurationProperty {
      override fun imageConfiguration(): Any? = unwrap(this).getImageConfiguration()

      override fun linkConfiguration(): Any? = unwrap(this).getLinkConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableFieldURLConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldURLConfigurationProperty):
          TableFieldURLConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldURLConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldURLConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldURLConfigurationProperty
    }
  }

  public interface FunnelChartConfigurationProperty {
    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    public fun dataLabelOptions(): Any? = unwrap(this).getDataLabelOptions()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun tooltip(): Any? = unwrap(this).getTooltip()

    public fun valueLabelOptions(): Any? = unwrap(this).getValueLabelOptions()

    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    @CdkDslMarker
    public interface Builder {
      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("266da4974103465b7feac1fdf926d539eb25d2ab3a98cf9ec7d31f03702bd028")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun dataLabelOptions(dataLabelOptions: IResolvable)

      public fun dataLabelOptions(dataLabelOptions: FunnelChartDataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("161eea72818a4a99240bb47540efa19afca4e47ecf7f6ddcfad8ee27d92d9811")
      public
          fun dataLabelOptions(dataLabelOptions: FunnelChartDataLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: FunnelChartFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5889a0009e11e8ccdf40a45ec0ba72431eee7e38ec616de036fc4221ed6b5443")
      public fun fieldWells(fieldWells: FunnelChartFieldWellsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: FunnelChartSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f11ed325319bb3b05a81e9b5ffd71bf2a064e22a94daf13f3cc8efa9247939da")
      public
          fun sortConfiguration(sortConfiguration: FunnelChartSortConfigurationProperty.Builder.() -> Unit)

      public fun tooltip(tooltip: IResolvable)

      public fun tooltip(tooltip: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b2e1e600b52322ee10c8158d38705fabe6795ae1c453bf1c7cbc587ce3dfbd1a")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      public fun valueLabelOptions(valueLabelOptions: IResolvable)

      public fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0908a4d0e9149002668906c46a5b6da6a25bfaab68d0f926c5b62f1c0be2327a")
      public
          fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun visualPalette(visualPalette: IResolvable)

      public fun visualPalette(visualPalette: VisualPaletteProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6eb4be504d02ffc070225c9f7718d3dab500ad13ccc8698d1f258ccf3eaa0f4b")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartConfigurationProperty.builder()

      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("266da4974103465b7feac1fdf926d539eb25d2ab3a98cf9ec7d31f03702bd028")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      override fun dataLabelOptions(dataLabelOptions: IResolvable) {
        cdkBuilder.dataLabelOptions(dataLabelOptions.let(IResolvable::unwrap))
      }

      override fun dataLabelOptions(dataLabelOptions: FunnelChartDataLabelOptionsProperty) {
        cdkBuilder.dataLabelOptions(dataLabelOptions.let(FunnelChartDataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("161eea72818a4a99240bb47540efa19afca4e47ecf7f6ddcfad8ee27d92d9811")
      override
          fun dataLabelOptions(dataLabelOptions: FunnelChartDataLabelOptionsProperty.Builder.() -> Unit):
          Unit = dataLabelOptions(FunnelChartDataLabelOptionsProperty(dataLabelOptions))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: FunnelChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(FunnelChartFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5889a0009e11e8ccdf40a45ec0ba72431eee7e38ec616de036fc4221ed6b5443")
      override fun fieldWells(fieldWells: FunnelChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(FunnelChartFieldWellsProperty(fieldWells))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: FunnelChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(FunnelChartSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f11ed325319bb3b05a81e9b5ffd71bf2a064e22a94daf13f3cc8efa9247939da")
      override
          fun sortConfiguration(sortConfiguration: FunnelChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(FunnelChartSortConfigurationProperty(sortConfiguration))

      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b2e1e600b52322ee10c8158d38705fabe6795ae1c453bf1c7cbc587ce3dfbd1a")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      override fun valueLabelOptions(valueLabelOptions: IResolvable) {
        cdkBuilder.valueLabelOptions(valueLabelOptions.let(IResolvable::unwrap))
      }

      override fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.valueLabelOptions(valueLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0908a4d0e9149002668906c46a5b6da6a25bfaab68d0f926c5b62f1c0be2327a")
      override
          fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = valueLabelOptions(ChartAxisLabelOptionsProperty(valueLabelOptions))

      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6eb4be504d02ffc070225c9f7718d3dab500ad13ccc8698d1f258ccf3eaa0f4b")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartConfigurationProperty,
    ) : CdkObject(cdkObject), FunnelChartConfigurationProperty {
      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      override fun dataLabelOptions(): Any? = unwrap(this).getDataLabelOptions()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun tooltip(): Any? = unwrap(this).getTooltip()

      override fun valueLabelOptions(): Any? = unwrap(this).getValueLabelOptions()

      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FunnelChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartConfigurationProperty):
          FunnelChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FunnelChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartConfigurationProperty
    }
  }

  public interface GaugeChartOptionsProperty {
    public fun arc(): Any? = unwrap(this).getArc()

    public fun arcAxis(): Any? = unwrap(this).getArcAxis()

    public fun comparison(): Any? = unwrap(this).getComparison()

    public fun primaryValueDisplayType(): String? = unwrap(this).getPrimaryValueDisplayType()

    public fun primaryValueFontConfiguration(): Any? =
        unwrap(this).getPrimaryValueFontConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun arc(arc: IResolvable)

      public fun arc(arc: ArcConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("59bc8ef23a0dac9f4582295b7c80e35b87077e10341f8f342fcdaf01d271ad22")
      public fun arc(arc: ArcConfigurationProperty.Builder.() -> Unit)

      public fun arcAxis(arcAxis: IResolvable)

      public fun arcAxis(arcAxis: ArcAxisConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a7716f6b6abcaffaba758f68685f460ec4e48c02a6e29badcd950b35153fa6db")
      public fun arcAxis(arcAxis: ArcAxisConfigurationProperty.Builder.() -> Unit)

      public fun comparison(comparison: IResolvable)

      public fun comparison(comparison: ComparisonConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b14f27281ccc78dafa4b2478a6e682ebed259765967b3c9e1f11cd8d93f396f5")
      public fun comparison(comparison: ComparisonConfigurationProperty.Builder.() -> Unit)

      public fun primaryValueDisplayType(primaryValueDisplayType: String)

      public fun primaryValueFontConfiguration(primaryValueFontConfiguration: IResolvable)

      public
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("734a1ae4c0e4bc16ae8c27014ea35b9b0fac1f0b91f16763ff8225d735c5341b")
      public
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartOptionsProperty.builder()

      override fun arc(arc: IResolvable) {
        cdkBuilder.arc(arc.let(IResolvable::unwrap))
      }

      override fun arc(arc: ArcConfigurationProperty) {
        cdkBuilder.arc(arc.let(ArcConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("59bc8ef23a0dac9f4582295b7c80e35b87077e10341f8f342fcdaf01d271ad22")
      override fun arc(arc: ArcConfigurationProperty.Builder.() -> Unit): Unit =
          arc(ArcConfigurationProperty(arc))

      override fun arcAxis(arcAxis: IResolvable) {
        cdkBuilder.arcAxis(arcAxis.let(IResolvable::unwrap))
      }

      override fun arcAxis(arcAxis: ArcAxisConfigurationProperty) {
        cdkBuilder.arcAxis(arcAxis.let(ArcAxisConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a7716f6b6abcaffaba758f68685f460ec4e48c02a6e29badcd950b35153fa6db")
      override fun arcAxis(arcAxis: ArcAxisConfigurationProperty.Builder.() -> Unit): Unit =
          arcAxis(ArcAxisConfigurationProperty(arcAxis))

      override fun comparison(comparison: IResolvable) {
        cdkBuilder.comparison(comparison.let(IResolvable::unwrap))
      }

      override fun comparison(comparison: ComparisonConfigurationProperty) {
        cdkBuilder.comparison(comparison.let(ComparisonConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b14f27281ccc78dafa4b2478a6e682ebed259765967b3c9e1f11cd8d93f396f5")
      override fun comparison(comparison: ComparisonConfigurationProperty.Builder.() -> Unit): Unit
          = comparison(ComparisonConfigurationProperty(comparison))

      override fun primaryValueDisplayType(primaryValueDisplayType: String) {
        cdkBuilder.primaryValueDisplayType(primaryValueDisplayType)
      }

      override fun primaryValueFontConfiguration(primaryValueFontConfiguration: IResolvable) {
        cdkBuilder.primaryValueFontConfiguration(primaryValueFontConfiguration.let(IResolvable::unwrap))
      }

      override
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty) {
        cdkBuilder.primaryValueFontConfiguration(primaryValueFontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("734a1ae4c0e4bc16ae8c27014ea35b9b0fac1f0b91f16763ff8225d735c5341b")
      override
          fun primaryValueFontConfiguration(primaryValueFontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit =
          primaryValueFontConfiguration(FontConfigurationProperty(primaryValueFontConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartOptionsProperty,
    ) : CdkObject(cdkObject), GaugeChartOptionsProperty {
      override fun arc(): Any? = unwrap(this).getArc()

      override fun arcAxis(): Any? = unwrap(this).getArcAxis()

      override fun comparison(): Any? = unwrap(this).getComparison()

      override fun primaryValueDisplayType(): String? = unwrap(this).getPrimaryValueDisplayType()

      override fun primaryValueFontConfiguration(): Any? =
          unwrap(this).getPrimaryValueFontConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GaugeChartOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartOptionsProperty):
          GaugeChartOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartOptionsProperty
    }
  }

  public interface ParameterDeclarationProperty {
    public fun dateTimeParameterDeclaration(): Any? = unwrap(this).getDateTimeParameterDeclaration()

    public fun decimalParameterDeclaration(): Any? = unwrap(this).getDecimalParameterDeclaration()

    public fun integerParameterDeclaration(): Any? = unwrap(this).getIntegerParameterDeclaration()

    public fun stringParameterDeclaration(): Any? = unwrap(this).getStringParameterDeclaration()

    @CdkDslMarker
    public interface Builder {
      public fun dateTimeParameterDeclaration(dateTimeParameterDeclaration: IResolvable)

      public
          fun dateTimeParameterDeclaration(dateTimeParameterDeclaration: DateTimeParameterDeclarationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("35c0a23ef9e23db472f6dde99b930b6031350ec7bf21cd9858e8215ebf56003f")
      public
          fun dateTimeParameterDeclaration(dateTimeParameterDeclaration: DateTimeParameterDeclarationProperty.Builder.() -> Unit)

      public fun decimalParameterDeclaration(decimalParameterDeclaration: IResolvable)

      public
          fun decimalParameterDeclaration(decimalParameterDeclaration: DecimalParameterDeclarationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("309b7fa5251808229eab8e7d046967624c68bc11a9711c1521f9142f1b108587")
      public
          fun decimalParameterDeclaration(decimalParameterDeclaration: DecimalParameterDeclarationProperty.Builder.() -> Unit)

      public fun integerParameterDeclaration(integerParameterDeclaration: IResolvable)

      public
          fun integerParameterDeclaration(integerParameterDeclaration: IntegerParameterDeclarationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("37774648bd8a6b8bb4ddfc383a44683e89f35ec23f7f4e843077851d54ea02a8")
      public
          fun integerParameterDeclaration(integerParameterDeclaration: IntegerParameterDeclarationProperty.Builder.() -> Unit)

      public fun stringParameterDeclaration(stringParameterDeclaration: IResolvable)

      public
          fun stringParameterDeclaration(stringParameterDeclaration: StringParameterDeclarationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("35ade06a167ab268badc80dcfc7479b048bbbd5b06d1061bceecc1e12d2a2de0")
      public
          fun stringParameterDeclaration(stringParameterDeclaration: StringParameterDeclarationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDeclarationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDeclarationProperty.builder()

      override fun dateTimeParameterDeclaration(dateTimeParameterDeclaration: IResolvable) {
        cdkBuilder.dateTimeParameterDeclaration(dateTimeParameterDeclaration.let(IResolvable::unwrap))
      }

      override
          fun dateTimeParameterDeclaration(dateTimeParameterDeclaration: DateTimeParameterDeclarationProperty) {
        cdkBuilder.dateTimeParameterDeclaration(dateTimeParameterDeclaration.let(DateTimeParameterDeclarationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("35c0a23ef9e23db472f6dde99b930b6031350ec7bf21cd9858e8215ebf56003f")
      override
          fun dateTimeParameterDeclaration(dateTimeParameterDeclaration: DateTimeParameterDeclarationProperty.Builder.() -> Unit):
          Unit =
          dateTimeParameterDeclaration(DateTimeParameterDeclarationProperty(dateTimeParameterDeclaration))

      override fun decimalParameterDeclaration(decimalParameterDeclaration: IResolvable) {
        cdkBuilder.decimalParameterDeclaration(decimalParameterDeclaration.let(IResolvable::unwrap))
      }

      override
          fun decimalParameterDeclaration(decimalParameterDeclaration: DecimalParameterDeclarationProperty) {
        cdkBuilder.decimalParameterDeclaration(decimalParameterDeclaration.let(DecimalParameterDeclarationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("309b7fa5251808229eab8e7d046967624c68bc11a9711c1521f9142f1b108587")
      override
          fun decimalParameterDeclaration(decimalParameterDeclaration: DecimalParameterDeclarationProperty.Builder.() -> Unit):
          Unit =
          decimalParameterDeclaration(DecimalParameterDeclarationProperty(decimalParameterDeclaration))

      override fun integerParameterDeclaration(integerParameterDeclaration: IResolvable) {
        cdkBuilder.integerParameterDeclaration(integerParameterDeclaration.let(IResolvable::unwrap))
      }

      override
          fun integerParameterDeclaration(integerParameterDeclaration: IntegerParameterDeclarationProperty) {
        cdkBuilder.integerParameterDeclaration(integerParameterDeclaration.let(IntegerParameterDeclarationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("37774648bd8a6b8bb4ddfc383a44683e89f35ec23f7f4e843077851d54ea02a8")
      override
          fun integerParameterDeclaration(integerParameterDeclaration: IntegerParameterDeclarationProperty.Builder.() -> Unit):
          Unit =
          integerParameterDeclaration(IntegerParameterDeclarationProperty(integerParameterDeclaration))

      override fun stringParameterDeclaration(stringParameterDeclaration: IResolvable) {
        cdkBuilder.stringParameterDeclaration(stringParameterDeclaration.let(IResolvable::unwrap))
      }

      override
          fun stringParameterDeclaration(stringParameterDeclaration: StringParameterDeclarationProperty) {
        cdkBuilder.stringParameterDeclaration(stringParameterDeclaration.let(StringParameterDeclarationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("35ade06a167ab268badc80dcfc7479b048bbbd5b06d1061bceecc1e12d2a2de0")
      override
          fun stringParameterDeclaration(stringParameterDeclaration: StringParameterDeclarationProperty.Builder.() -> Unit):
          Unit =
          stringParameterDeclaration(StringParameterDeclarationProperty(stringParameterDeclaration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDeclarationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDeclarationProperty,
    ) : CdkObject(cdkObject), ParameterDeclarationProperty {
      override fun dateTimeParameterDeclaration(): Any? =
          unwrap(this).getDateTimeParameterDeclaration()

      override fun decimalParameterDeclaration(): Any? =
          unwrap(this).getDecimalParameterDeclaration()

      override fun integerParameterDeclaration(): Any? =
          unwrap(this).getIntegerParameterDeclaration()

      override fun stringParameterDeclaration(): Any? = unwrap(this).getStringParameterDeclaration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ParameterDeclarationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDeclarationProperty):
          ParameterDeclarationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterDeclarationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDeclarationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDeclarationProperty
    }
  }

  public interface CustomActionNavigationOperationProperty {
    public fun localNavigationConfiguration(): Any? = unwrap(this).getLocalNavigationConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun localNavigationConfiguration(localNavigationConfiguration: IResolvable)

      public
          fun localNavigationConfiguration(localNavigationConfiguration: LocalNavigationConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d28f097442951c44460e379589e95d7a61c81e2be7366fa86c553a6252853fd1")
      public
          fun localNavigationConfiguration(localNavigationConfiguration: LocalNavigationConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionNavigationOperationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionNavigationOperationProperty.builder()

      override fun localNavigationConfiguration(localNavigationConfiguration: IResolvable) {
        cdkBuilder.localNavigationConfiguration(localNavigationConfiguration.let(IResolvable::unwrap))
      }

      override
          fun localNavigationConfiguration(localNavigationConfiguration: LocalNavigationConfigurationProperty) {
        cdkBuilder.localNavigationConfiguration(localNavigationConfiguration.let(LocalNavigationConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d28f097442951c44460e379589e95d7a61c81e2be7366fa86c553a6252853fd1")
      override
          fun localNavigationConfiguration(localNavigationConfiguration: LocalNavigationConfigurationProperty.Builder.() -> Unit):
          Unit =
          localNavigationConfiguration(LocalNavigationConfigurationProperty(localNavigationConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionNavigationOperationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionNavigationOperationProperty,
    ) : CdkObject(cdkObject), CustomActionNavigationOperationProperty {
      override fun localNavigationConfiguration(): Any? =
          unwrap(this).getLocalNavigationConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomActionNavigationOperationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionNavigationOperationProperty):
          CustomActionNavigationOperationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomActionNavigationOperationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionNavigationOperationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionNavigationOperationProperty
    }
  }

  public interface DecimalPlacesConfigurationProperty {
    public fun decimalPlaces(): Number

    @CdkDslMarker
    public interface Builder {
      public fun decimalPlaces(decimalPlaces: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalPlacesConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalPlacesConfigurationProperty.builder()

      override fun decimalPlaces(decimalPlaces: Number) {
        cdkBuilder.decimalPlaces(decimalPlaces)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalPlacesConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalPlacesConfigurationProperty,
    ) : CdkObject(cdkObject), DecimalPlacesConfigurationProperty {
      override fun decimalPlaces(): Number = unwrap(this).getDecimalPlaces()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DecimalPlacesConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalPlacesConfigurationProperty):
          DecimalPlacesConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DecimalPlacesConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalPlacesConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalPlacesConfigurationProperty
    }
  }

  public interface RelativeDateTimeControlDisplayOptionsProperty {
    public fun dateTimeFormat(): String? = unwrap(this).getDateTimeFormat()

    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    @CdkDslMarker
    public interface Builder {
      public fun dateTimeFormat(dateTimeFormat: String)

      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c1af03fc7e696f2e8d1d2d66bbaaa63bcb271975ab920b931b6a7dc2d15c85fb")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      public fun titleOptions(titleOptions: IResolvable)

      public fun titleOptions(titleOptions: LabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c1aed2130e53971a49f3e036f1dc0b4559bd8c408b24b164e17c65b9b4126cce")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDateTimeControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDateTimeControlDisplayOptionsProperty.builder()

      override fun dateTimeFormat(dateTimeFormat: String) {
        cdkBuilder.dateTimeFormat(dateTimeFormat)
      }

      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c1af03fc7e696f2e8d1d2d66bbaaa63bcb271975ab920b931b6a7dc2d15c85fb")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c1aed2130e53971a49f3e036f1dc0b4559bd8c408b24b164e17c65b9b4126cce")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDateTimeControlDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDateTimeControlDisplayOptionsProperty,
    ) : CdkObject(cdkObject), RelativeDateTimeControlDisplayOptionsProperty {
      override fun dateTimeFormat(): String? = unwrap(this).getDateTimeFormat()

      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          RelativeDateTimeControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDateTimeControlDisplayOptionsProperty):
          RelativeDateTimeControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RelativeDateTimeControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDateTimeControlDisplayOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDateTimeControlDisplayOptionsProperty
    }
  }

  public interface TableVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: TableConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("502b5873d60bbe83a380409bac62a844344de4a5433e6b578c4dceddbaab0e43")
      public
          fun chartConfiguration(chartConfiguration: TableConfigurationProperty.Builder.() -> Unit)

      public fun conditionalFormatting(conditionalFormatting: IResolvable)

      public fun conditionalFormatting(conditionalFormatting: TableConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("827da6c46b8b7e3937a984396b409b4c138ed677be70272f0d3ea4bba870a8a3")
      public
          fun conditionalFormatting(conditionalFormatting: TableConditionalFormattingProperty.Builder.() -> Unit)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d02225deb5eac1bd666709601cc4be091186c7975136c10e8bec1b7874e49650")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("108a251a4312a04b6f3c228d91cf9c4a076dd5b20aa0163a85c708646415234c")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: TableConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(TableConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("502b5873d60bbe83a380409bac62a844344de4a5433e6b578c4dceddbaab0e43")
      override
          fun chartConfiguration(chartConfiguration: TableConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(TableConfigurationProperty(chartConfiguration))

      override fun conditionalFormatting(conditionalFormatting: IResolvable) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(IResolvable::unwrap))
      }

      override
          fun conditionalFormatting(conditionalFormatting: TableConditionalFormattingProperty) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(TableConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("827da6c46b8b7e3937a984396b409b4c138ed677be70272f0d3ea4bba870a8a3")
      override
          fun conditionalFormatting(conditionalFormatting: TableConditionalFormattingProperty.Builder.() -> Unit):
          Unit = conditionalFormatting(TableConditionalFormattingProperty(conditionalFormatting))

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d02225deb5eac1bd666709601cc4be091186c7975136c10e8bec1b7874e49650")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("108a251a4312a04b6f3c228d91cf9c4a076dd5b20aa0163a85c708646415234c")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.TableVisualProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableVisualProperty,
    ) : CdkObject(cdkObject), TableVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TableVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableVisualProperty):
          TableVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableVisualProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableVisualProperty
    }
  }

  public interface TimeBasedForecastPropertiesProperty {
    public fun lowerBoundary(): Number? = unwrap(this).getLowerBoundary()

    public fun periodsBackward(): Number? = unwrap(this).getPeriodsBackward()

    public fun periodsForward(): Number? = unwrap(this).getPeriodsForward()

    public fun predictionInterval(): Number? = unwrap(this).getPredictionInterval()

    public fun seasonality(): Number? = unwrap(this).getSeasonality()

    public fun upperBoundary(): Number? = unwrap(this).getUpperBoundary()

    @CdkDslMarker
    public interface Builder {
      public fun lowerBoundary(lowerBoundary: Number)

      public fun periodsBackward(periodsBackward: Number)

      public fun periodsForward(periodsForward: Number)

      public fun predictionInterval(predictionInterval: Number)

      public fun seasonality(seasonality: Number)

      public fun upperBoundary(upperBoundary: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeBasedForecastPropertiesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeBasedForecastPropertiesProperty.builder()

      override fun lowerBoundary(lowerBoundary: Number) {
        cdkBuilder.lowerBoundary(lowerBoundary)
      }

      override fun periodsBackward(periodsBackward: Number) {
        cdkBuilder.periodsBackward(periodsBackward)
      }

      override fun periodsForward(periodsForward: Number) {
        cdkBuilder.periodsForward(periodsForward)
      }

      override fun predictionInterval(predictionInterval: Number) {
        cdkBuilder.predictionInterval(predictionInterval)
      }

      override fun seasonality(seasonality: Number) {
        cdkBuilder.seasonality(seasonality)
      }

      override fun upperBoundary(upperBoundary: Number) {
        cdkBuilder.upperBoundary(upperBoundary)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeBasedForecastPropertiesProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeBasedForecastPropertiesProperty,
    ) : CdkObject(cdkObject), TimeBasedForecastPropertiesProperty {
      override fun lowerBoundary(): Number? = unwrap(this).getLowerBoundary()

      override fun periodsBackward(): Number? = unwrap(this).getPeriodsBackward()

      override fun periodsForward(): Number? = unwrap(this).getPeriodsForward()

      override fun predictionInterval(): Number? = unwrap(this).getPredictionInterval()

      override fun seasonality(): Number? = unwrap(this).getSeasonality()

      override fun upperBoundary(): Number? = unwrap(this).getUpperBoundary()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TimeBasedForecastPropertiesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TimeBasedForecastPropertiesProperty):
          TimeBasedForecastPropertiesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TimeBasedForecastPropertiesProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeBasedForecastPropertiesProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TimeBasedForecastPropertiesProperty
    }
  }

  public interface MaximumLabelTypeProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumLabelTypeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumLabelTypeProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumLabelTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumLabelTypeProperty,
    ) : CdkObject(cdkObject), MaximumLabelTypeProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): MaximumLabelTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumLabelTypeProperty):
          MaximumLabelTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MaximumLabelTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumLabelTypeProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumLabelTypeProperty
    }
  }

  public interface TooltipItemProperty {
    public fun columnTooltipItem(): Any? = unwrap(this).getColumnTooltipItem()

    public fun fieldTooltipItem(): Any? = unwrap(this).getFieldTooltipItem()

    @CdkDslMarker
    public interface Builder {
      public fun columnTooltipItem(columnTooltipItem: IResolvable)

      public fun columnTooltipItem(columnTooltipItem: ColumnTooltipItemProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b71a5996e6b0558cf934c9ba77f70941ad5bfb93fcfd467a5b8906303a4d9cb2")
      public fun columnTooltipItem(columnTooltipItem: ColumnTooltipItemProperty.Builder.() -> Unit)

      public fun fieldTooltipItem(fieldTooltipItem: IResolvable)

      public fun fieldTooltipItem(fieldTooltipItem: FieldTooltipItemProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("66dd454eddd80474c3c8ef2e1543d26e6cee524abc56ed35075608b641529343")
      public fun fieldTooltipItem(fieldTooltipItem: FieldTooltipItemProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipItemProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipItemProperty.builder()

      override fun columnTooltipItem(columnTooltipItem: IResolvable) {
        cdkBuilder.columnTooltipItem(columnTooltipItem.let(IResolvable::unwrap))
      }

      override fun columnTooltipItem(columnTooltipItem: ColumnTooltipItemProperty) {
        cdkBuilder.columnTooltipItem(columnTooltipItem.let(ColumnTooltipItemProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b71a5996e6b0558cf934c9ba77f70941ad5bfb93fcfd467a5b8906303a4d9cb2")
      override
          fun columnTooltipItem(columnTooltipItem: ColumnTooltipItemProperty.Builder.() -> Unit):
          Unit = columnTooltipItem(ColumnTooltipItemProperty(columnTooltipItem))

      override fun fieldTooltipItem(fieldTooltipItem: IResolvable) {
        cdkBuilder.fieldTooltipItem(fieldTooltipItem.let(IResolvable::unwrap))
      }

      override fun fieldTooltipItem(fieldTooltipItem: FieldTooltipItemProperty) {
        cdkBuilder.fieldTooltipItem(fieldTooltipItem.let(FieldTooltipItemProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("66dd454eddd80474c3c8ef2e1543d26e6cee524abc56ed35075608b641529343")
      override fun fieldTooltipItem(fieldTooltipItem: FieldTooltipItemProperty.Builder.() -> Unit):
          Unit = fieldTooltipItem(FieldTooltipItemProperty(fieldTooltipItem))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipItemProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipItemProperty,
    ) : CdkObject(cdkObject), TooltipItemProperty {
      override fun columnTooltipItem(): Any? = unwrap(this).getColumnTooltipItem()

      override fun fieldTooltipItem(): Any? = unwrap(this).getFieldTooltipItem()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TooltipItemProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipItemProperty):
          TooltipItemProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TooltipItemProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipItemProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipItemProperty
    }
  }

  public interface TemplateVersionDefinitionProperty {
    public fun analysisDefaults(): Any? = unwrap(this).getAnalysisDefaults()

    public fun calculatedFields(): Any? = unwrap(this).getCalculatedFields()

    public fun columnConfigurations(): Any? = unwrap(this).getColumnConfigurations()

    public fun dataSetConfigurations(): Any

    public fun filterGroups(): Any? = unwrap(this).getFilterGroups()

    public fun options(): Any? = unwrap(this).getOptions()

    public fun parameterDeclarations(): Any? = unwrap(this).getParameterDeclarations()

    public fun sheets(): Any? = unwrap(this).getSheets()

    @CdkDslMarker
    public interface Builder {
      public fun analysisDefaults(analysisDefaults: IResolvable)

      public fun analysisDefaults(analysisDefaults: AnalysisDefaultsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("48c1f5ba3f1c49c901dd25128faa71ce41ca711e79c2ebdd523d002d02deeac4")
      public fun analysisDefaults(analysisDefaults: AnalysisDefaultsProperty.Builder.() -> Unit)

      public fun calculatedFields(calculatedFields: IResolvable)

      public fun calculatedFields(calculatedFields: List<Any>)

      public fun calculatedFields(vararg calculatedFields: Any)

      public fun columnConfigurations(columnConfigurations: IResolvable)

      public fun columnConfigurations(columnConfigurations: List<Any>)

      public fun columnConfigurations(vararg columnConfigurations: Any)

      public fun dataSetConfigurations(dataSetConfigurations: IResolvable)

      public fun dataSetConfigurations(dataSetConfigurations: List<Any>)

      public fun dataSetConfigurations(vararg dataSetConfigurations: Any)

      public fun filterGroups(filterGroups: IResolvable)

      public fun filterGroups(filterGroups: List<Any>)

      public fun filterGroups(vararg filterGroups: Any)

      public fun options(options: IResolvable)

      public fun options(options: AssetOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c9ab5a8b1560b6c452cd19e2c41bb68c01ab5c4542aa4bca54ba8fa781e972b5")
      public fun options(options: AssetOptionsProperty.Builder.() -> Unit)

      public fun parameterDeclarations(parameterDeclarations: IResolvable)

      public fun parameterDeclarations(parameterDeclarations: List<Any>)

      public fun parameterDeclarations(vararg parameterDeclarations: Any)

      public fun sheets(sheets: IResolvable)

      public fun sheets(sheets: List<Any>)

      public fun sheets(vararg sheets: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionDefinitionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionDefinitionProperty.builder()

      override fun analysisDefaults(analysisDefaults: IResolvable) {
        cdkBuilder.analysisDefaults(analysisDefaults.let(IResolvable::unwrap))
      }

      override fun analysisDefaults(analysisDefaults: AnalysisDefaultsProperty) {
        cdkBuilder.analysisDefaults(analysisDefaults.let(AnalysisDefaultsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("48c1f5ba3f1c49c901dd25128faa71ce41ca711e79c2ebdd523d002d02deeac4")
      override fun analysisDefaults(analysisDefaults: AnalysisDefaultsProperty.Builder.() -> Unit):
          Unit = analysisDefaults(AnalysisDefaultsProperty(analysisDefaults))

      override fun calculatedFields(calculatedFields: IResolvable) {
        cdkBuilder.calculatedFields(calculatedFields.let(IResolvable::unwrap))
      }

      override fun calculatedFields(calculatedFields: List<Any>) {
        cdkBuilder.calculatedFields(calculatedFields)
      }

      override fun calculatedFields(vararg calculatedFields: Any): Unit =
          calculatedFields(calculatedFields.toList())

      override fun columnConfigurations(columnConfigurations: IResolvable) {
        cdkBuilder.columnConfigurations(columnConfigurations.let(IResolvable::unwrap))
      }

      override fun columnConfigurations(columnConfigurations: List<Any>) {
        cdkBuilder.columnConfigurations(columnConfigurations)
      }

      override fun columnConfigurations(vararg columnConfigurations: Any): Unit =
          columnConfigurations(columnConfigurations.toList())

      override fun dataSetConfigurations(dataSetConfigurations: IResolvable) {
        cdkBuilder.dataSetConfigurations(dataSetConfigurations.let(IResolvable::unwrap))
      }

      override fun dataSetConfigurations(dataSetConfigurations: List<Any>) {
        cdkBuilder.dataSetConfigurations(dataSetConfigurations)
      }

      override fun dataSetConfigurations(vararg dataSetConfigurations: Any): Unit =
          dataSetConfigurations(dataSetConfigurations.toList())

      override fun filterGroups(filterGroups: IResolvable) {
        cdkBuilder.filterGroups(filterGroups.let(IResolvable::unwrap))
      }

      override fun filterGroups(filterGroups: List<Any>) {
        cdkBuilder.filterGroups(filterGroups)
      }

      override fun filterGroups(vararg filterGroups: Any): Unit =
          filterGroups(filterGroups.toList())

      override fun options(options: IResolvable) {
        cdkBuilder.options(options.let(IResolvable::unwrap))
      }

      override fun options(options: AssetOptionsProperty) {
        cdkBuilder.options(options.let(AssetOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c9ab5a8b1560b6c452cd19e2c41bb68c01ab5c4542aa4bca54ba8fa781e972b5")
      override fun options(options: AssetOptionsProperty.Builder.() -> Unit): Unit =
          options(AssetOptionsProperty(options))

      override fun parameterDeclarations(parameterDeclarations: IResolvable) {
        cdkBuilder.parameterDeclarations(parameterDeclarations.let(IResolvable::unwrap))
      }

      override fun parameterDeclarations(parameterDeclarations: List<Any>) {
        cdkBuilder.parameterDeclarations(parameterDeclarations)
      }

      override fun parameterDeclarations(vararg parameterDeclarations: Any): Unit =
          parameterDeclarations(parameterDeclarations.toList())

      override fun sheets(sheets: IResolvable) {
        cdkBuilder.sheets(sheets.let(IResolvable::unwrap))
      }

      override fun sheets(sheets: List<Any>) {
        cdkBuilder.sheets(sheets)
      }

      override fun sheets(vararg sheets: Any): Unit = sheets(sheets.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionDefinitionProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionDefinitionProperty,
    ) : CdkObject(cdkObject), TemplateVersionDefinitionProperty {
      override fun analysisDefaults(): Any? = unwrap(this).getAnalysisDefaults()

      override fun calculatedFields(): Any? = unwrap(this).getCalculatedFields()

      override fun columnConfigurations(): Any? = unwrap(this).getColumnConfigurations()

      override fun dataSetConfigurations(): Any = unwrap(this).getDataSetConfigurations()

      override fun filterGroups(): Any? = unwrap(this).getFilterGroups()

      override fun options(): Any? = unwrap(this).getOptions()

      override fun parameterDeclarations(): Any? = unwrap(this).getParameterDeclarations()

      override fun sheets(): Any? = unwrap(this).getSheets()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TemplateVersionDefinitionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionDefinitionProperty):
          TemplateVersionDefinitionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TemplateVersionDefinitionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionDefinitionProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateVersionDefinitionProperty
    }
  }

  public interface CustomActionFilterOperationProperty {
    public fun selectedFieldsConfiguration(): Any

    public fun targetVisualsConfiguration(): Any

    @CdkDslMarker
    public interface Builder {
      public fun selectedFieldsConfiguration(selectedFieldsConfiguration: IResolvable)

      public
          fun selectedFieldsConfiguration(selectedFieldsConfiguration: FilterOperationSelectedFieldsConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a1e7e4c646c1cdb10299b6a674e1ec54ae29c48e9712ab275c398a509782345f")
      public
          fun selectedFieldsConfiguration(selectedFieldsConfiguration: FilterOperationSelectedFieldsConfigurationProperty.Builder.() -> Unit)

      public fun targetVisualsConfiguration(targetVisualsConfiguration: IResolvable)

      public
          fun targetVisualsConfiguration(targetVisualsConfiguration: FilterOperationTargetVisualsConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8a2d33e51f71cb5a7b38440d76236daeb9d14f7303a460e2048892d756ce3d73")
      public
          fun targetVisualsConfiguration(targetVisualsConfiguration: FilterOperationTargetVisualsConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionFilterOperationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionFilterOperationProperty.builder()

      override fun selectedFieldsConfiguration(selectedFieldsConfiguration: IResolvable) {
        cdkBuilder.selectedFieldsConfiguration(selectedFieldsConfiguration.let(IResolvable::unwrap))
      }

      override
          fun selectedFieldsConfiguration(selectedFieldsConfiguration: FilterOperationSelectedFieldsConfigurationProperty) {
        cdkBuilder.selectedFieldsConfiguration(selectedFieldsConfiguration.let(FilterOperationSelectedFieldsConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a1e7e4c646c1cdb10299b6a674e1ec54ae29c48e9712ab275c398a509782345f")
      override
          fun selectedFieldsConfiguration(selectedFieldsConfiguration: FilterOperationSelectedFieldsConfigurationProperty.Builder.() -> Unit):
          Unit =
          selectedFieldsConfiguration(FilterOperationSelectedFieldsConfigurationProperty(selectedFieldsConfiguration))

      override fun targetVisualsConfiguration(targetVisualsConfiguration: IResolvable) {
        cdkBuilder.targetVisualsConfiguration(targetVisualsConfiguration.let(IResolvable::unwrap))
      }

      override
          fun targetVisualsConfiguration(targetVisualsConfiguration: FilterOperationTargetVisualsConfigurationProperty) {
        cdkBuilder.targetVisualsConfiguration(targetVisualsConfiguration.let(FilterOperationTargetVisualsConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8a2d33e51f71cb5a7b38440d76236daeb9d14f7303a460e2048892d756ce3d73")
      override
          fun targetVisualsConfiguration(targetVisualsConfiguration: FilterOperationTargetVisualsConfigurationProperty.Builder.() -> Unit):
          Unit =
          targetVisualsConfiguration(FilterOperationTargetVisualsConfigurationProperty(targetVisualsConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionFilterOperationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionFilterOperationProperty,
    ) : CdkObject(cdkObject), CustomActionFilterOperationProperty {
      override fun selectedFieldsConfiguration(): Any =
          unwrap(this).getSelectedFieldsConfiguration()

      override fun targetVisualsConfiguration(): Any = unwrap(this).getTargetVisualsConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomActionFilterOperationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionFilterOperationProperty):
          CustomActionFilterOperationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomActionFilterOperationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionFilterOperationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionFilterOperationProperty
    }
  }

  public interface GridLayoutCanvasSizeOptionsProperty {
    public fun screenCanvasSizeOptions(): Any? = unwrap(this).getScreenCanvasSizeOptions()

    @CdkDslMarker
    public interface Builder {
      public fun screenCanvasSizeOptions(screenCanvasSizeOptions: IResolvable)

      public
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: GridLayoutScreenCanvasSizeOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a566f19c8e81e20291bc1661bbc43df2e714953c2dda4fbdafb95db75c0d1268")
      public
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: GridLayoutScreenCanvasSizeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutCanvasSizeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutCanvasSizeOptionsProperty.builder()

      override fun screenCanvasSizeOptions(screenCanvasSizeOptions: IResolvable) {
        cdkBuilder.screenCanvasSizeOptions(screenCanvasSizeOptions.let(IResolvable::unwrap))
      }

      override
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: GridLayoutScreenCanvasSizeOptionsProperty) {
        cdkBuilder.screenCanvasSizeOptions(screenCanvasSizeOptions.let(GridLayoutScreenCanvasSizeOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a566f19c8e81e20291bc1661bbc43df2e714953c2dda4fbdafb95db75c0d1268")
      override
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: GridLayoutScreenCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit =
          screenCanvasSizeOptions(GridLayoutScreenCanvasSizeOptionsProperty(screenCanvasSizeOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutCanvasSizeOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutCanvasSizeOptionsProperty,
    ) : CdkObject(cdkObject), GridLayoutCanvasSizeOptionsProperty {
      override fun screenCanvasSizeOptions(): Any? = unwrap(this).getScreenCanvasSizeOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GridLayoutCanvasSizeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutCanvasSizeOptionsProperty):
          GridLayoutCanvasSizeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GridLayoutCanvasSizeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutCanvasSizeOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutCanvasSizeOptionsProperty
    }
  }

  public interface VisualCustomActionProperty {
    public fun actionOperations(): Any

    public fun customActionId(): String

    public fun name(): String

    public fun status(): String? = unwrap(this).getStatus()

    public fun trigger(): String

    @CdkDslMarker
    public interface Builder {
      public fun actionOperations(actionOperations: IResolvable)

      public fun actionOperations(actionOperations: List<Any>)

      public fun actionOperations(vararg actionOperations: Any)

      public fun customActionId(customActionId: String)

      public fun name(name: String)

      public fun status(status: String)

      public fun trigger(trigger: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionProperty.builder()

      override fun actionOperations(actionOperations: IResolvable) {
        cdkBuilder.actionOperations(actionOperations.let(IResolvable::unwrap))
      }

      override fun actionOperations(actionOperations: List<Any>) {
        cdkBuilder.actionOperations(actionOperations)
      }

      override fun actionOperations(vararg actionOperations: Any): Unit =
          actionOperations(actionOperations.toList())

      override fun customActionId(customActionId: String) {
        cdkBuilder.customActionId(customActionId)
      }

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      override fun trigger(trigger: String) {
        cdkBuilder.trigger(trigger)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionProperty,
    ) : CdkObject(cdkObject), VisualCustomActionProperty {
      override fun actionOperations(): Any = unwrap(this).getActionOperations()

      override fun customActionId(): String = unwrap(this).getCustomActionId()

      override fun name(): String = unwrap(this).getName()

      override fun status(): String? = unwrap(this).getStatus()

      override fun trigger(): String = unwrap(this).getTrigger()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): VisualCustomActionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionProperty):
          VisualCustomActionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisualCustomActionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionProperty
    }
  }

  public interface FreeFormLayoutConfigurationProperty {
    public fun canvasSizeOptions(): Any? = unwrap(this).getCanvasSizeOptions()

    public fun elements(): Any

    @CdkDslMarker
    public interface Builder {
      public fun canvasSizeOptions(canvasSizeOptions: IResolvable)

      public fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5ace9d39edc624503b1882bf51167676579a331b761d715b7845e0dec3265d30")
      public
          fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty.Builder.() -> Unit)

      public fun elements(elements: IResolvable)

      public fun elements(elements: List<Any>)

      public fun elements(vararg elements: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutConfigurationProperty.builder()

      override fun canvasSizeOptions(canvasSizeOptions: IResolvable) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(IResolvable::unwrap))
      }

      override fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(FreeFormLayoutCanvasSizeOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5ace9d39edc624503b1882bf51167676579a331b761d715b7845e0dec3265d30")
      override
          fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit = canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty(canvasSizeOptions))

      override fun elements(elements: IResolvable) {
        cdkBuilder.elements(elements.let(IResolvable::unwrap))
      }

      override fun elements(elements: List<Any>) {
        cdkBuilder.elements(elements)
      }

      override fun elements(vararg elements: Any): Unit = elements(elements.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutConfigurationProperty,
    ) : CdkObject(cdkObject), FreeFormLayoutConfigurationProperty {
      override fun canvasSizeOptions(): Any? = unwrap(this).getCanvasSizeOptions()

      override fun elements(): Any = unwrap(this).getElements()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FreeFormLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutConfigurationProperty):
          FreeFormLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutConfigurationProperty
    }
  }

  public interface BoxPlotFieldWellsProperty {
    public fun boxPlotAggregatedFieldWells(): Any? = unwrap(this).getBoxPlotAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells: IResolvable)

      public
          fun boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells: BoxPlotAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ed428499aa5d31a1416218c2984c242976b5c8186ce3b7240423631d2910c86")
      public
          fun boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells: BoxPlotAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotFieldWellsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotFieldWellsProperty.builder()

      override fun boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells: IResolvable) {
        cdkBuilder.boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells: BoxPlotAggregatedFieldWellsProperty) {
        cdkBuilder.boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells.let(BoxPlotAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ed428499aa5d31a1416218c2984c242976b5c8186ce3b7240423631d2910c86")
      override
          fun boxPlotAggregatedFieldWells(boxPlotAggregatedFieldWells: BoxPlotAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          boxPlotAggregatedFieldWells(BoxPlotAggregatedFieldWellsProperty(boxPlotAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotFieldWellsProperty,
    ) : CdkObject(cdkObject), BoxPlotFieldWellsProperty {
      override fun boxPlotAggregatedFieldWells(): Any? =
          unwrap(this).getBoxPlotAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): BoxPlotFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotFieldWellsProperty):
          BoxPlotFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotFieldWellsProperty
    }
  }

  public interface TableCellConditionalFormattingProperty {
    public fun fieldId(): String

    public fun textFormat(): Any? = unwrap(this).getTextFormat()

    @CdkDslMarker
    public interface Builder {
      public fun fieldId(fieldId: String)

      public fun textFormat(textFormat: IResolvable)

      public fun textFormat(textFormat: TextConditionalFormatProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("abde746388972b314b26d94e75ba6b8ffd660b4dbfcd55243c76f1bb6e3e728d")
      public fun textFormat(textFormat: TextConditionalFormatProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellConditionalFormattingProperty.builder()

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun textFormat(textFormat: IResolvable) {
        cdkBuilder.textFormat(textFormat.let(IResolvable::unwrap))
      }

      override fun textFormat(textFormat: TextConditionalFormatProperty) {
        cdkBuilder.textFormat(textFormat.let(TextConditionalFormatProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("abde746388972b314b26d94e75ba6b8ffd660b4dbfcd55243c76f1bb6e3e728d")
      override fun textFormat(textFormat: TextConditionalFormatProperty.Builder.() -> Unit): Unit =
          textFormat(TextConditionalFormatProperty(textFormat))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellConditionalFormattingProperty,
    ) : CdkObject(cdkObject), TableCellConditionalFormattingProperty {
      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun textFormat(): Any? = unwrap(this).getTextFormat()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableCellConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellConditionalFormattingProperty):
          TableCellConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableCellConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellConditionalFormattingProperty
    }
  }

  public interface PivotTableFieldSubtotalOptionsProperty {
    public fun fieldId(): String? = unwrap(this).getFieldId()

    @CdkDslMarker
    public interface Builder {
      public fun fieldId(fieldId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldSubtotalOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldSubtotalOptionsProperty.builder()

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldSubtotalOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldSubtotalOptionsProperty,
    ) : CdkObject(cdkObject), PivotTableFieldSubtotalOptionsProperty {
      override fun fieldId(): String? = unwrap(this).getFieldId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableFieldSubtotalOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldSubtotalOptionsProperty):
          PivotTableFieldSubtotalOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableFieldSubtotalOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldSubtotalOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldSubtotalOptionsProperty
    }
  }

  public interface LayoutConfigurationProperty {
    public fun freeFormLayout(): Any? = unwrap(this).getFreeFormLayout()

    public fun gridLayout(): Any? = unwrap(this).getGridLayout()

    public fun sectionBasedLayout(): Any? = unwrap(this).getSectionBasedLayout()

    @CdkDslMarker
    public interface Builder {
      public fun freeFormLayout(freeFormLayout: IResolvable)

      public fun freeFormLayout(freeFormLayout: FreeFormLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("34338425aa8c2b6124d1b8a52368cf292dcd5a3ecc6430931aecf0d7b85210fd")
      public
          fun freeFormLayout(freeFormLayout: FreeFormLayoutConfigurationProperty.Builder.() -> Unit)

      public fun gridLayout(gridLayout: IResolvable)

      public fun gridLayout(gridLayout: GridLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0dfa58d49485362d8a29cd26a1c9f696d1e0320e97a6d87095942185e73a2e9b")
      public fun gridLayout(gridLayout: GridLayoutConfigurationProperty.Builder.() -> Unit)

      public fun sectionBasedLayout(sectionBasedLayout: IResolvable)

      public fun sectionBasedLayout(sectionBasedLayout: SectionBasedLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2499b486f83a1661a448c3022f62751cc88673b19f02a459da18982320d1cb8e")
      public
          fun sectionBasedLayout(sectionBasedLayout: SectionBasedLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutConfigurationProperty.builder()

      override fun freeFormLayout(freeFormLayout: IResolvable) {
        cdkBuilder.freeFormLayout(freeFormLayout.let(IResolvable::unwrap))
      }

      override fun freeFormLayout(freeFormLayout: FreeFormLayoutConfigurationProperty) {
        cdkBuilder.freeFormLayout(freeFormLayout.let(FreeFormLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("34338425aa8c2b6124d1b8a52368cf292dcd5a3ecc6430931aecf0d7b85210fd")
      override
          fun freeFormLayout(freeFormLayout: FreeFormLayoutConfigurationProperty.Builder.() -> Unit):
          Unit = freeFormLayout(FreeFormLayoutConfigurationProperty(freeFormLayout))

      override fun gridLayout(gridLayout: IResolvable) {
        cdkBuilder.gridLayout(gridLayout.let(IResolvable::unwrap))
      }

      override fun gridLayout(gridLayout: GridLayoutConfigurationProperty) {
        cdkBuilder.gridLayout(gridLayout.let(GridLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0dfa58d49485362d8a29cd26a1c9f696d1e0320e97a6d87095942185e73a2e9b")
      override fun gridLayout(gridLayout: GridLayoutConfigurationProperty.Builder.() -> Unit): Unit
          = gridLayout(GridLayoutConfigurationProperty(gridLayout))

      override fun sectionBasedLayout(sectionBasedLayout: IResolvable) {
        cdkBuilder.sectionBasedLayout(sectionBasedLayout.let(IResolvable::unwrap))
      }

      override fun sectionBasedLayout(sectionBasedLayout: SectionBasedLayoutConfigurationProperty) {
        cdkBuilder.sectionBasedLayout(sectionBasedLayout.let(SectionBasedLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2499b486f83a1661a448c3022f62751cc88673b19f02a459da18982320d1cb8e")
      override
          fun sectionBasedLayout(sectionBasedLayout: SectionBasedLayoutConfigurationProperty.Builder.() -> Unit):
          Unit = sectionBasedLayout(SectionBasedLayoutConfigurationProperty(sectionBasedLayout))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutConfigurationProperty,
    ) : CdkObject(cdkObject), LayoutConfigurationProperty {
      override fun freeFormLayout(): Any? = unwrap(this).getFreeFormLayout()

      override fun gridLayout(): Any? = unwrap(this).getGridLayout()

      override fun sectionBasedLayout(): Any? = unwrap(this).getSectionBasedLayout()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): LayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutConfigurationProperty):
          LayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LayoutConfigurationProperty
    }
  }

  public interface NumericalDimensionFieldProperty {
    public fun column(): Any

    public fun fieldId(): String

    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    public fun hierarchyId(): String? = unwrap(this).getHierarchyId()

    @CdkDslMarker
    public interface Builder {
      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d650b4041b41345ec8ac7589449f1025911152b2a4802a93e4f709e3266b23b3")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun fieldId(fieldId: String)

      public fun formatConfiguration(formatConfiguration: IResolvable)

      public fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("77c97ce875b32724a6b66b0ba8f17f9f8e87676b799248a7c1c8941684dabfde")
      public
          fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty.Builder.() -> Unit)

      public fun hierarchyId(hierarchyId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalDimensionFieldProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalDimensionFieldProperty.builder()

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d650b4041b41345ec8ac7589449f1025911152b2a4802a93e4f709e3266b23b3")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      override fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(NumberFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("77c97ce875b32724a6b66b0ba8f17f9f8e87676b799248a7c1c8941684dabfde")
      override
          fun formatConfiguration(formatConfiguration: NumberFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(NumberFormatConfigurationProperty(formatConfiguration))

      override fun hierarchyId(hierarchyId: String) {
        cdkBuilder.hierarchyId(hierarchyId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalDimensionFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalDimensionFieldProperty,
    ) : CdkObject(cdkObject), NumericalDimensionFieldProperty {
      override fun column(): Any = unwrap(this).getColumn()

      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

      override fun hierarchyId(): String? = unwrap(this).getHierarchyId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): NumericalDimensionFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalDimensionFieldProperty):
          NumericalDimensionFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericalDimensionFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalDimensionFieldProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalDimensionFieldProperty
    }
  }

  public interface AxisLinearScaleProperty {
    public fun stepCount(): Number? = unwrap(this).getStepCount()

    public fun stepSize(): Number? = unwrap(this).getStepSize()

    @CdkDslMarker
    public interface Builder {
      public fun stepCount(stepCount: Number)

      public fun stepSize(stepSize: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLinearScaleProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLinearScaleProperty.builder()

      override fun stepCount(stepCount: Number) {
        cdkBuilder.stepCount(stepCount)
      }

      override fun stepSize(stepSize: Number) {
        cdkBuilder.stepSize(stepSize)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLinearScaleProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLinearScaleProperty,
    ) : CdkObject(cdkObject), AxisLinearScaleProperty {
      override fun stepCount(): Number? = unwrap(this).getStepCount()

      override fun stepSize(): Number? = unwrap(this).getStepSize()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AxisLinearScaleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLinearScaleProperty):
          AxisLinearScaleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisLinearScaleProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLinearScaleProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLinearScaleProperty
    }
  }

  public interface CurrencyDisplayFormatConfigurationProperty {
    public fun decimalPlacesConfiguration(): Any? = unwrap(this).getDecimalPlacesConfiguration()

    public fun negativeValueConfiguration(): Any? = unwrap(this).getNegativeValueConfiguration()

    public fun nullValueFormatConfiguration(): Any? = unwrap(this).getNullValueFormatConfiguration()

    public fun numberScale(): String? = unwrap(this).getNumberScale()

    public fun prefix(): String? = unwrap(this).getPrefix()

    public fun separatorConfiguration(): Any? = unwrap(this).getSeparatorConfiguration()

    public fun suffix(): String? = unwrap(this).getSuffix()

    public fun symbol(): String? = unwrap(this).getSymbol()

    @CdkDslMarker
    public interface Builder {
      public fun decimalPlacesConfiguration(decimalPlacesConfiguration: IResolvable)

      public
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("54918766250369ffbbeea1af45ec410caee98f35c8c26f0c39304b02d85cdaac")
      public
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty.Builder.() -> Unit)

      public fun negativeValueConfiguration(negativeValueConfiguration: IResolvable)

      public
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("068db92e8c2336541a303e83cabdf3e72f14e9b017e789097b3874aed5eb9db1")
      public
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty.Builder.() -> Unit)

      public fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable)

      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cd76e4c9053b3138089480ed402c905d320027aa18fd11661470e80fa2ca46ce")
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit)

      public fun numberScale(numberScale: String)

      public fun prefix(prefix: String)

      public fun separatorConfiguration(separatorConfiguration: IResolvable)

      public
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1c488ed12c7ac580adde685ac29d35ffae0165b8c435e5f29224cf51754a9b8a")
      public
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty.Builder.() -> Unit)

      public fun suffix(suffix: String)

      public fun symbol(symbol: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CurrencyDisplayFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CurrencyDisplayFormatConfigurationProperty.builder()

      override fun decimalPlacesConfiguration(decimalPlacesConfiguration: IResolvable) {
        cdkBuilder.decimalPlacesConfiguration(decimalPlacesConfiguration.let(IResolvable::unwrap))
      }

      override
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty) {
        cdkBuilder.decimalPlacesConfiguration(decimalPlacesConfiguration.let(DecimalPlacesConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("54918766250369ffbbeea1af45ec410caee98f35c8c26f0c39304b02d85cdaac")
      override
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty.Builder.() -> Unit):
          Unit =
          decimalPlacesConfiguration(DecimalPlacesConfigurationProperty(decimalPlacesConfiguration))

      override fun negativeValueConfiguration(negativeValueConfiguration: IResolvable) {
        cdkBuilder.negativeValueConfiguration(negativeValueConfiguration.let(IResolvable::unwrap))
      }

      override
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty) {
        cdkBuilder.negativeValueConfiguration(negativeValueConfiguration.let(NegativeValueConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("068db92e8c2336541a303e83cabdf3e72f14e9b017e789097b3874aed5eb9db1")
      override
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty.Builder.() -> Unit):
          Unit =
          negativeValueConfiguration(NegativeValueConfigurationProperty(negativeValueConfiguration))

      override fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(NullValueFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cd76e4c9053b3138089480ed402c905d320027aa18fd11661470e80fa2ca46ce")
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          nullValueFormatConfiguration(NullValueFormatConfigurationProperty(nullValueFormatConfiguration))

      override fun numberScale(numberScale: String) {
        cdkBuilder.numberScale(numberScale)
      }

      override fun prefix(prefix: String) {
        cdkBuilder.prefix(prefix)
      }

      override fun separatorConfiguration(separatorConfiguration: IResolvable) {
        cdkBuilder.separatorConfiguration(separatorConfiguration.let(IResolvable::unwrap))
      }

      override
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty) {
        cdkBuilder.separatorConfiguration(separatorConfiguration.let(NumericSeparatorConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1c488ed12c7ac580adde685ac29d35ffae0165b8c435e5f29224cf51754a9b8a")
      override
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty.Builder.() -> Unit):
          Unit =
          separatorConfiguration(NumericSeparatorConfigurationProperty(separatorConfiguration))

      override fun suffix(suffix: String) {
        cdkBuilder.suffix(suffix)
      }

      override fun symbol(symbol: String) {
        cdkBuilder.symbol(symbol)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CurrencyDisplayFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CurrencyDisplayFormatConfigurationProperty,
    ) : CdkObject(cdkObject), CurrencyDisplayFormatConfigurationProperty {
      override fun decimalPlacesConfiguration(): Any? = unwrap(this).getDecimalPlacesConfiguration()

      override fun negativeValueConfiguration(): Any? = unwrap(this).getNegativeValueConfiguration()

      override fun nullValueFormatConfiguration(): Any? =
          unwrap(this).getNullValueFormatConfiguration()

      override fun numberScale(): String? = unwrap(this).getNumberScale()

      override fun prefix(): String? = unwrap(this).getPrefix()

      override fun separatorConfiguration(): Any? = unwrap(this).getSeparatorConfiguration()

      override fun suffix(): String? = unwrap(this).getSuffix()

      override fun symbol(): String? = unwrap(this).getSymbol()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          CurrencyDisplayFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CurrencyDisplayFormatConfigurationProperty):
          CurrencyDisplayFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CurrencyDisplayFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CurrencyDisplayFormatConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CurrencyDisplayFormatConfigurationProperty
    }
  }

  public interface NullValueFormatConfigurationProperty {
    public fun nullString(): String

    @CdkDslMarker
    public interface Builder {
      public fun nullString(nullString: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NullValueFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NullValueFormatConfigurationProperty.builder()

      override fun nullString(nullString: String) {
        cdkBuilder.nullString(nullString)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NullValueFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NullValueFormatConfigurationProperty,
    ) : CdkObject(cdkObject), NullValueFormatConfigurationProperty {
      override fun nullString(): String = unwrap(this).getNullString()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          NullValueFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NullValueFormatConfigurationProperty):
          NullValueFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NullValueFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NullValueFormatConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NullValueFormatConfigurationProperty
    }
  }

  public interface SecondaryValueOptionsProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SecondaryValueOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SecondaryValueOptionsProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SecondaryValueOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SecondaryValueOptionsProperty,
    ) : CdkObject(cdkObject), SecondaryValueOptionsProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SecondaryValueOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SecondaryValueOptionsProperty):
          SecondaryValueOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SecondaryValueOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SecondaryValueOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SecondaryValueOptionsProperty
    }
  }

  public interface WaterfallChartFieldWellsProperty {
    public fun waterfallChartAggregatedFieldWells(): Any? =
        unwrap(this).getWaterfallChartAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells: IResolvable)

      public
          fun waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells: WaterfallChartAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f1e97134a339ae02f82aa5f48cfa5dec06209c6f31956d1fd9b72e1ff984d0b")
      public
          fun waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells: WaterfallChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartFieldWellsProperty.builder()

      override
          fun waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells: WaterfallChartAggregatedFieldWellsProperty) {
        cdkBuilder.waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells.let(WaterfallChartAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f1e97134a339ae02f82aa5f48cfa5dec06209c6f31956d1fd9b72e1ff984d0b")
      override
          fun waterfallChartAggregatedFieldWells(waterfallChartAggregatedFieldWells: WaterfallChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          waterfallChartAggregatedFieldWells(WaterfallChartAggregatedFieldWellsProperty(waterfallChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartFieldWellsProperty,
    ) : CdkObject(cdkObject), WaterfallChartFieldWellsProperty {
      override fun waterfallChartAggregatedFieldWells(): Any? =
          unwrap(this).getWaterfallChartAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): WaterfallChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartFieldWellsProperty):
          WaterfallChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WaterfallChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartFieldWellsProperty
    }
  }

  public interface TreeMapVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: TreeMapConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("adf7aa0c408295c18d689d3e4502c2ff527f05eb168c93eec3df578f99e99937")
      public
          fun chartConfiguration(chartConfiguration: TreeMapConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7167b2bdc7431039253a4c65a3763753766dc4b458159985dfa4bfeb002bdd0b")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f644c9538ae794ee2bb9ab7fd0c9bea2d40a09f22a876038a28aa05308620356")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: TreeMapConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(TreeMapConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("adf7aa0c408295c18d689d3e4502c2ff527f05eb168c93eec3df578f99e99937")
      override
          fun chartConfiguration(chartConfiguration: TreeMapConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(TreeMapConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7167b2bdc7431039253a4c65a3763753766dc4b458159985dfa4bfeb002bdd0b")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f644c9538ae794ee2bb9ab7fd0c9bea2d40a09f22a876038a28aa05308620356")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapVisualProperty,
    ) : CdkObject(cdkObject), TreeMapVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TreeMapVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapVisualProperty):
          TreeMapVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TreeMapVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapVisualProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapVisualProperty
    }
  }

  public interface FunnelChartSortConfigurationProperty {
    public fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    @CdkDslMarker
    public interface Builder {
      public fun categoryItemsLimit(categoryItemsLimit: IResolvable)

      public fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5238a93733f5f0d169221ea68e2e9f5466afd6ff7ab4caaeca6e3c8877c45ed7")
      public
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun categorySort(categorySort: IResolvable)

      public fun categorySort(categorySort: List<Any>)

      public fun categorySort(vararg categorySort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartSortConfigurationProperty.builder()

      override fun categoryItemsLimit(categoryItemsLimit: IResolvable) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(IResolvable::unwrap))
      }

      override fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5238a93733f5f0d169221ea68e2e9f5466afd6ff7ab4caaeca6e3c8877c45ed7")
      override
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = categoryItemsLimit(ItemsLimitConfigurationProperty(categoryItemsLimit))

      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartSortConfigurationProperty,
    ) : CdkObject(cdkObject), FunnelChartSortConfigurationProperty {
      override fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

      override fun categorySort(): Any? = unwrap(this).getCategorySort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FunnelChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartSortConfigurationProperty):
          FunnelChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FunnelChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartSortConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartSortConfigurationProperty
    }
  }

  public interface ResourcePermissionProperty {
    public fun actions(): List<String>

    public fun principal(): String

    public fun resource(): String? = unwrap(this).getResource()

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: List<String>)

      public fun actions(vararg actions: String)

      public fun principal(principal: String)

      public fun resource(resource: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ResourcePermissionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ResourcePermissionProperty.builder()

      override fun actions(actions: List<String>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: String): Unit = actions(actions.toList())

      override fun principal(principal: String) {
        cdkBuilder.principal(principal)
      }

      override fun resource(resource: String) {
        cdkBuilder.resource(resource)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ResourcePermissionProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ResourcePermissionProperty,
    ) : CdkObject(cdkObject), ResourcePermissionProperty {
      override fun actions(): List<String> = unwrap(this).getActions()

      override fun principal(): String = unwrap(this).getPrincipal()

      override fun resource(): String? = unwrap(this).getResource()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ResourcePermissionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ResourcePermissionProperty):
          ResourcePermissionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ResourcePermissionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ResourcePermissionProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ResourcePermissionProperty
    }
  }

  public interface ReferenceLineProperty {
    public fun dataConfiguration(): Any

    public fun labelConfiguration(): Any? = unwrap(this).getLabelConfiguration()

    public fun status(): String? = unwrap(this).getStatus()

    public fun styleConfiguration(): Any? = unwrap(this).getStyleConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun dataConfiguration(dataConfiguration: IResolvable)

      public fun dataConfiguration(dataConfiguration: ReferenceLineDataConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("595ee5758fc201d4b8d066776e5390f7415aeef64cc361764759e1eb858aff6c")
      public
          fun dataConfiguration(dataConfiguration: ReferenceLineDataConfigurationProperty.Builder.() -> Unit)

      public fun labelConfiguration(labelConfiguration: IResolvable)

      public fun labelConfiguration(labelConfiguration: ReferenceLineLabelConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8dbdaf4fe2d05002e57ee5180008f7810f261472db2057b79ef04cf56c869722")
      public
          fun labelConfiguration(labelConfiguration: ReferenceLineLabelConfigurationProperty.Builder.() -> Unit)

      public fun status(status: String)

      public fun styleConfiguration(styleConfiguration: IResolvable)

      public fun styleConfiguration(styleConfiguration: ReferenceLineStyleConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c50b7b49eb21be65ab9fd88007b3cd4ad85f7be254432e1f16b9e00cd7ad053")
      public
          fun styleConfiguration(styleConfiguration: ReferenceLineStyleConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineProperty.builder()

      override fun dataConfiguration(dataConfiguration: IResolvable) {
        cdkBuilder.dataConfiguration(dataConfiguration.let(IResolvable::unwrap))
      }

      override fun dataConfiguration(dataConfiguration: ReferenceLineDataConfigurationProperty) {
        cdkBuilder.dataConfiguration(dataConfiguration.let(ReferenceLineDataConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("595ee5758fc201d4b8d066776e5390f7415aeef64cc361764759e1eb858aff6c")
      override
          fun dataConfiguration(dataConfiguration: ReferenceLineDataConfigurationProperty.Builder.() -> Unit):
          Unit = dataConfiguration(ReferenceLineDataConfigurationProperty(dataConfiguration))

      override fun labelConfiguration(labelConfiguration: IResolvable) {
        cdkBuilder.labelConfiguration(labelConfiguration.let(IResolvable::unwrap))
      }

      override fun labelConfiguration(labelConfiguration: ReferenceLineLabelConfigurationProperty) {
        cdkBuilder.labelConfiguration(labelConfiguration.let(ReferenceLineLabelConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8dbdaf4fe2d05002e57ee5180008f7810f261472db2057b79ef04cf56c869722")
      override
          fun labelConfiguration(labelConfiguration: ReferenceLineLabelConfigurationProperty.Builder.() -> Unit):
          Unit = labelConfiguration(ReferenceLineLabelConfigurationProperty(labelConfiguration))

      override fun status(status: String) {
        cdkBuilder.status(status)
      }

      override fun styleConfiguration(styleConfiguration: IResolvable) {
        cdkBuilder.styleConfiguration(styleConfiguration.let(IResolvable::unwrap))
      }

      override fun styleConfiguration(styleConfiguration: ReferenceLineStyleConfigurationProperty) {
        cdkBuilder.styleConfiguration(styleConfiguration.let(ReferenceLineStyleConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c50b7b49eb21be65ab9fd88007b3cd4ad85f7be254432e1f16b9e00cd7ad053")
      override
          fun styleConfiguration(styleConfiguration: ReferenceLineStyleConfigurationProperty.Builder.() -> Unit):
          Unit = styleConfiguration(ReferenceLineStyleConfigurationProperty(styleConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineProperty,
    ) : CdkObject(cdkObject), ReferenceLineProperty {
      override fun dataConfiguration(): Any = unwrap(this).getDataConfiguration()

      override fun labelConfiguration(): Any? = unwrap(this).getLabelConfiguration()

      override fun status(): String? = unwrap(this).getStatus()

      override fun styleConfiguration(): Any? = unwrap(this).getStyleConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ReferenceLineProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineProperty):
          ReferenceLineProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineProperty
    }
  }

  public interface ColorsConfigurationProperty {
    public fun customColors(): Any? = unwrap(this).getCustomColors()

    @CdkDslMarker
    public interface Builder {
      public fun customColors(customColors: IResolvable)

      public fun customColors(customColors: List<Any>)

      public fun customColors(vararg customColors: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColorsConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColorsConfigurationProperty.builder()

      override fun customColors(customColors: IResolvable) {
        cdkBuilder.customColors(customColors.let(IResolvable::unwrap))
      }

      override fun customColors(customColors: List<Any>) {
        cdkBuilder.customColors(customColors)
      }

      override fun customColors(vararg customColors: Any): Unit =
          customColors(customColors.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColorsConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColorsConfigurationProperty,
    ) : CdkObject(cdkObject), ColorsConfigurationProperty {
      override fun customColors(): Any? = unwrap(this).getCustomColors()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ColorsConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ColorsConfigurationProperty):
          ColorsConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColorsConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColorsConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColorsConfigurationProperty
    }
  }

  public interface ComboChartSortConfigurationProperty {
    public fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    public fun colorItemsLimit(): Any? = unwrap(this).getColorItemsLimit()

    public fun colorSort(): Any? = unwrap(this).getColorSort()

    @CdkDslMarker
    public interface Builder {
      public fun categoryItemsLimit(categoryItemsLimit: IResolvable)

      public fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5785285cbaec2940eb7827b42870f27f7486f8fbd4469cac14fca5881e571bea")
      public
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun categorySort(categorySort: IResolvable)

      public fun categorySort(categorySort: List<Any>)

      public fun categorySort(vararg categorySort: Any)

      public fun colorItemsLimit(colorItemsLimit: IResolvable)

      public fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("707316e606f9d26e16f6251f2bbfbfde0e30af01f781066a0d1f9e5f5aa3f79c")
      public
          fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun colorSort(colorSort: IResolvable)

      public fun colorSort(colorSort: List<Any>)

      public fun colorSort(vararg colorSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartSortConfigurationProperty.builder()

      override fun categoryItemsLimit(categoryItemsLimit: IResolvable) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(IResolvable::unwrap))
      }

      override fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5785285cbaec2940eb7827b42870f27f7486f8fbd4469cac14fca5881e571bea")
      override
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = categoryItemsLimit(ItemsLimitConfigurationProperty(categoryItemsLimit))

      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      override fun colorItemsLimit(colorItemsLimit: IResolvable) {
        cdkBuilder.colorItemsLimit(colorItemsLimit.let(IResolvable::unwrap))
      }

      override fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.colorItemsLimit(colorItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("707316e606f9d26e16f6251f2bbfbfde0e30af01f781066a0d1f9e5f5aa3f79c")
      override
          fun colorItemsLimit(colorItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = colorItemsLimit(ItemsLimitConfigurationProperty(colorItemsLimit))

      override fun colorSort(colorSort: IResolvable) {
        cdkBuilder.colorSort(colorSort.let(IResolvable::unwrap))
      }

      override fun colorSort(colorSort: List<Any>) {
        cdkBuilder.colorSort(colorSort)
      }

      override fun colorSort(vararg colorSort: Any): Unit = colorSort(colorSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartSortConfigurationProperty,
    ) : CdkObject(cdkObject), ComboChartSortConfigurationProperty {
      override fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

      override fun categorySort(): Any? = unwrap(this).getCategorySort()

      override fun colorItemsLimit(): Any? = unwrap(this).getColorItemsLimit()

      override fun colorSort(): Any? = unwrap(this).getColorSort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ComboChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartSortConfigurationProperty):
          ComboChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComboChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartSortConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartSortConfigurationProperty
    }
  }

  public interface PivotTableFieldOptionsProperty {
    public fun collapseStateOptions(): Any? = unwrap(this).getCollapseStateOptions()

    public fun dataPathOptions(): Any? = unwrap(this).getDataPathOptions()

    public fun selectedFieldOptions(): Any? = unwrap(this).getSelectedFieldOptions()

    @CdkDslMarker
    public interface Builder {
      public fun collapseStateOptions(collapseStateOptions: IResolvable)

      public fun collapseStateOptions(collapseStateOptions: List<Any>)

      public fun collapseStateOptions(vararg collapseStateOptions: Any)

      public fun dataPathOptions(dataPathOptions: IResolvable)

      public fun dataPathOptions(dataPathOptions: List<Any>)

      public fun dataPathOptions(vararg dataPathOptions: Any)

      public fun selectedFieldOptions(selectedFieldOptions: IResolvable)

      public fun selectedFieldOptions(selectedFieldOptions: List<Any>)

      public fun selectedFieldOptions(vararg selectedFieldOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionsProperty.builder()

      override fun collapseStateOptions(collapseStateOptions: IResolvable) {
        cdkBuilder.collapseStateOptions(collapseStateOptions.let(IResolvable::unwrap))
      }

      override fun collapseStateOptions(collapseStateOptions: List<Any>) {
        cdkBuilder.collapseStateOptions(collapseStateOptions)
      }

      override fun collapseStateOptions(vararg collapseStateOptions: Any): Unit =
          collapseStateOptions(collapseStateOptions.toList())

      override fun dataPathOptions(dataPathOptions: IResolvable) {
        cdkBuilder.dataPathOptions(dataPathOptions.let(IResolvable::unwrap))
      }

      override fun dataPathOptions(dataPathOptions: List<Any>) {
        cdkBuilder.dataPathOptions(dataPathOptions)
      }

      override fun dataPathOptions(vararg dataPathOptions: Any): Unit =
          dataPathOptions(dataPathOptions.toList())

      override fun selectedFieldOptions(selectedFieldOptions: IResolvable) {
        cdkBuilder.selectedFieldOptions(selectedFieldOptions.let(IResolvable::unwrap))
      }

      override fun selectedFieldOptions(selectedFieldOptions: List<Any>) {
        cdkBuilder.selectedFieldOptions(selectedFieldOptions)
      }

      override fun selectedFieldOptions(vararg selectedFieldOptions: Any): Unit =
          selectedFieldOptions(selectedFieldOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionsProperty,
    ) : CdkObject(cdkObject), PivotTableFieldOptionsProperty {
      override fun collapseStateOptions(): Any? = unwrap(this).getCollapseStateOptions()

      override fun dataPathOptions(): Any? = unwrap(this).getDataPathOptions()

      override fun selectedFieldOptions(): Any? = unwrap(this).getSelectedFieldOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableFieldOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionsProperty):
          PivotTableFieldOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableFieldOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionsProperty
    }
  }

  public interface FilterOperationSelectedFieldsConfigurationProperty {
    public fun selectedColumns(): Any? = unwrap(this).getSelectedColumns()

    public fun selectedFieldOptions(): String? = unwrap(this).getSelectedFieldOptions()

    public fun selectedFields(): List<String> = unwrap(this).getSelectedFields() ?: emptyList()

    @CdkDslMarker
    public interface Builder {
      public fun selectedColumns(selectedColumns: IResolvable)

      public fun selectedColumns(selectedColumns: List<Any>)

      public fun selectedColumns(vararg selectedColumns: Any)

      public fun selectedFieldOptions(selectedFieldOptions: String)

      public fun selectedFields(selectedFields: List<String>)

      public fun selectedFields(vararg selectedFields: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationSelectedFieldsConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationSelectedFieldsConfigurationProperty.builder()

      override fun selectedColumns(selectedColumns: IResolvable) {
        cdkBuilder.selectedColumns(selectedColumns.let(IResolvable::unwrap))
      }

      override fun selectedColumns(selectedColumns: List<Any>) {
        cdkBuilder.selectedColumns(selectedColumns)
      }

      override fun selectedColumns(vararg selectedColumns: Any): Unit =
          selectedColumns(selectedColumns.toList())

      override fun selectedFieldOptions(selectedFieldOptions: String) {
        cdkBuilder.selectedFieldOptions(selectedFieldOptions)
      }

      override fun selectedFields(selectedFields: List<String>) {
        cdkBuilder.selectedFields(selectedFields)
      }

      override fun selectedFields(vararg selectedFields: String): Unit =
          selectedFields(selectedFields.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationSelectedFieldsConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationSelectedFieldsConfigurationProperty,
    ) : CdkObject(cdkObject), FilterOperationSelectedFieldsConfigurationProperty {
      override fun selectedColumns(): Any? = unwrap(this).getSelectedColumns()

      override fun selectedFieldOptions(): String? = unwrap(this).getSelectedFieldOptions()

      override fun selectedFields(): List<String> = unwrap(this).getSelectedFields() ?: emptyList()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilterOperationSelectedFieldsConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationSelectedFieldsConfigurationProperty):
          FilterOperationSelectedFieldsConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterOperationSelectedFieldsConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationSelectedFieldsConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationSelectedFieldsConfigurationProperty
    }
  }

  public interface UnaggregatedFieldProperty {
    public fun column(): Any

    public fun fieldId(): String

    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("12595e1107d29e890a4c3915a1fc2275354caa7d3b16d42cfa81c87e0c83de92")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun fieldId(fieldId: String)

      public fun formatConfiguration(formatConfiguration: IResolvable)

      public fun formatConfiguration(formatConfiguration: FormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("568ce19ef66ba2d07302d8107a7b7ec96a9c3afcda199d9e133319b843fcd516")
      public
          fun formatConfiguration(formatConfiguration: FormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.UnaggregatedFieldProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.UnaggregatedFieldProperty.builder()

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("12595e1107d29e890a4c3915a1fc2275354caa7d3b16d42cfa81c87e0c83de92")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      override fun formatConfiguration(formatConfiguration: FormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(FormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("568ce19ef66ba2d07302d8107a7b7ec96a9c3afcda199d9e133319b843fcd516")
      override
          fun formatConfiguration(formatConfiguration: FormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(FormatConfigurationProperty(formatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.UnaggregatedFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.UnaggregatedFieldProperty,
    ) : CdkObject(cdkObject), UnaggregatedFieldProperty {
      override fun column(): Any = unwrap(this).getColumn()

      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): UnaggregatedFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.UnaggregatedFieldProperty):
          UnaggregatedFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: UnaggregatedFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.UnaggregatedFieldProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.UnaggregatedFieldProperty
    }
  }

  public interface ScatterPlotFieldWellsProperty {
    public fun scatterPlotCategoricallyAggregatedFieldWells(): Any? =
        unwrap(this).getScatterPlotCategoricallyAggregatedFieldWells()

    public fun scatterPlotUnaggregatedFieldWells(): Any? =
        unwrap(this).getScatterPlotUnaggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public
          fun scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells: IResolvable)

      public
          fun scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells: ScatterPlotCategoricallyAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("533620fa5b4cf3b96acaeca16a2bf5dfce4b20fcd18dc4b34e9119c774ca2e9b")
      public
          fun scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells: ScatterPlotCategoricallyAggregatedFieldWellsProperty.Builder.() -> Unit)

      public fun scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells: IResolvable)

      public
          fun scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells: ScatterPlotUnaggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7e3267b343e385ad1d3c735e04dd022d5abc39f430b4393ea1f33e03715951ca")
      public
          fun scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells: ScatterPlotUnaggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotFieldWellsProperty.builder()

      override
          fun scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells: IResolvable) {
        cdkBuilder.scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells: ScatterPlotCategoricallyAggregatedFieldWellsProperty) {
        cdkBuilder.scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells.let(ScatterPlotCategoricallyAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("533620fa5b4cf3b96acaeca16a2bf5dfce4b20fcd18dc4b34e9119c774ca2e9b")
      override
          fun scatterPlotCategoricallyAggregatedFieldWells(scatterPlotCategoricallyAggregatedFieldWells: ScatterPlotCategoricallyAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          scatterPlotCategoricallyAggregatedFieldWells(ScatterPlotCategoricallyAggregatedFieldWellsProperty(scatterPlotCategoricallyAggregatedFieldWells))

      override
          fun scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells: IResolvable) {
        cdkBuilder.scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells: ScatterPlotUnaggregatedFieldWellsProperty) {
        cdkBuilder.scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells.let(ScatterPlotUnaggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7e3267b343e385ad1d3c735e04dd022d5abc39f430b4393ea1f33e03715951ca")
      override
          fun scatterPlotUnaggregatedFieldWells(scatterPlotUnaggregatedFieldWells: ScatterPlotUnaggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          scatterPlotUnaggregatedFieldWells(ScatterPlotUnaggregatedFieldWellsProperty(scatterPlotUnaggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotFieldWellsProperty,
    ) : CdkObject(cdkObject), ScatterPlotFieldWellsProperty {
      override fun scatterPlotCategoricallyAggregatedFieldWells(): Any? =
          unwrap(this).getScatterPlotCategoricallyAggregatedFieldWells()

      override fun scatterPlotUnaggregatedFieldWells(): Any? =
          unwrap(this).getScatterPlotUnaggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ScatterPlotFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotFieldWellsProperty):
          ScatterPlotFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ScatterPlotFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotFieldWellsProperty
    }
  }

  public interface BoxPlotSortConfigurationProperty {
    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    public fun paginationConfiguration(): Any? = unwrap(this).getPaginationConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun categorySort(categorySort: IResolvable)

      public fun categorySort(categorySort: List<Any>)

      public fun categorySort(vararg categorySort: Any)

      public fun paginationConfiguration(paginationConfiguration: IResolvable)

      public fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd275ed2c0096c8ce8ab8470fca109fba4203c07041726bb3bad7d7c62553d58")
      public
          fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotSortConfigurationProperty.builder()

      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      override fun paginationConfiguration(paginationConfiguration: IResolvable) {
        cdkBuilder.paginationConfiguration(paginationConfiguration.let(IResolvable::unwrap))
      }

      override
          fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty) {
        cdkBuilder.paginationConfiguration(paginationConfiguration.let(PaginationConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd275ed2c0096c8ce8ab8470fca109fba4203c07041726bb3bad7d7c62553d58")
      override
          fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty.Builder.() -> Unit):
          Unit = paginationConfiguration(PaginationConfigurationProperty(paginationConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotSortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotSortConfigurationProperty,
    ) : CdkObject(cdkObject), BoxPlotSortConfigurationProperty {
      override fun categorySort(): Any? = unwrap(this).getCategorySort()

      override fun paginationConfiguration(): Any? = unwrap(this).getPaginationConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): BoxPlotSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotSortConfigurationProperty):
          BoxPlotSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotSortConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotSortConfigurationProperty
    }
  }

  public interface CustomContentVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun dataSetIdentifier(): String

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: CustomContentConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("02bdd1ffa70614ae7d61ed205d20f78d8a4f5a9ce13ace0739b94e86eaf955d1")
      public
          fun chartConfiguration(chartConfiguration: CustomContentConfigurationProperty.Builder.() -> Unit)

      public fun dataSetIdentifier(dataSetIdentifier: String)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("12bfe4d978ced6ac4910cd986d7bdaf3a571e0968918f124531d1d572eadb720")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6ee372f10ae15ee868d50e829763e20cf563151b7392d40a68e934fcd61bcd02")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentVisualProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: CustomContentConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(CustomContentConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("02bdd1ffa70614ae7d61ed205d20f78d8a4f5a9ce13ace0739b94e86eaf955d1")
      override
          fun chartConfiguration(chartConfiguration: CustomContentConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(CustomContentConfigurationProperty(chartConfiguration))

      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("12bfe4d978ced6ac4910cd986d7bdaf3a571e0968918f124531d1d572eadb720")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6ee372f10ae15ee868d50e829763e20cf563151b7392d40a68e934fcd61bcd02")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentVisualProperty,
    ) : CdkObject(cdkObject), CustomContentVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun dataSetIdentifier(): String = unwrap(this).getDataSetIdentifier()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): CustomContentVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentVisualProperty):
          CustomContentVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomContentVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentVisualProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomContentVisualProperty
    }
  }

  public interface NumericFormatConfigurationProperty {
    public fun currencyDisplayFormatConfiguration(): Any? =
        unwrap(this).getCurrencyDisplayFormatConfiguration()

    public fun numberDisplayFormatConfiguration(): Any? =
        unwrap(this).getNumberDisplayFormatConfiguration()

    public fun percentageDisplayFormatConfiguration(): Any? =
        unwrap(this).getPercentageDisplayFormatConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration: IResolvable)

      public
          fun currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration: CurrencyDisplayFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ea4e3ccc6d56076970776058ad7d1a625e9fb4be23ed736853d3fd85e43fdba")
      public
          fun currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration: CurrencyDisplayFormatConfigurationProperty.Builder.() -> Unit)

      public fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: IResolvable)

      public
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ad3eb89d8d883fe4f97b50409cbf66c672d823084876604ac0e757c465bdae16")
      public
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty.Builder.() -> Unit)

      public
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: IResolvable)

      public
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("50189b77cf9238a1f53625f0c310c3374bff5fc2600116e914a12a60e05d2e62")
      public
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericFormatConfigurationProperty.builder()

      override
          fun currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration: IResolvable) {
        cdkBuilder.currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration: CurrencyDisplayFormatConfigurationProperty) {
        cdkBuilder.currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration.let(CurrencyDisplayFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ea4e3ccc6d56076970776058ad7d1a625e9fb4be23ed736853d3fd85e43fdba")
      override
          fun currencyDisplayFormatConfiguration(currencyDisplayFormatConfiguration: CurrencyDisplayFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          currencyDisplayFormatConfiguration(CurrencyDisplayFormatConfigurationProperty(currencyDisplayFormatConfiguration))

      override fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: IResolvable) {
        cdkBuilder.numberDisplayFormatConfiguration(numberDisplayFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty) {
        cdkBuilder.numberDisplayFormatConfiguration(numberDisplayFormatConfiguration.let(NumberDisplayFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ad3eb89d8d883fe4f97b50409cbf66c672d823084876604ac0e757c465bdae16")
      override
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty(numberDisplayFormatConfiguration))

      override
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: IResolvable) {
        cdkBuilder.percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty) {
        cdkBuilder.percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration.let(PercentageDisplayFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("50189b77cf9238a1f53625f0c310c3374bff5fc2600116e914a12a60e05d2e62")
      override
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty(percentageDisplayFormatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericFormatConfigurationProperty,
    ) : CdkObject(cdkObject), NumericFormatConfigurationProperty {
      override fun currencyDisplayFormatConfiguration(): Any? =
          unwrap(this).getCurrencyDisplayFormatConfiguration()

      override fun numberDisplayFormatConfiguration(): Any? =
          unwrap(this).getNumberDisplayFormatConfiguration()

      override fun percentageDisplayFormatConfiguration(): Any? =
          unwrap(this).getPercentageDisplayFormatConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          NumericFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NumericFormatConfigurationProperty):
          NumericFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericFormatConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericFormatConfigurationProperty
    }
  }

  public interface CategoryFilterProperty {
    public fun column(): Any

    public fun configuration(): Any

    public fun filterId(): String

    @CdkDslMarker
    public interface Builder {
      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("69383cc541430391af45b7ddfb61f346c26434a14c3db78c61d953224b5c06b4")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun configuration(configuration: IResolvable)

      public fun configuration(configuration: CategoryFilterConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3002fa8580707a054cf3788d438756a01fc261db88878c0d9a865276587a6346")
      public
          fun configuration(configuration: CategoryFilterConfigurationProperty.Builder.() -> Unit)

      public fun filterId(filterId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterProperty.builder()

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("69383cc541430391af45b7ddfb61f346c26434a14c3db78c61d953224b5c06b4")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun configuration(configuration: IResolvable) {
        cdkBuilder.configuration(configuration.let(IResolvable::unwrap))
      }

      override fun configuration(configuration: CategoryFilterConfigurationProperty) {
        cdkBuilder.configuration(configuration.let(CategoryFilterConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3002fa8580707a054cf3788d438756a01fc261db88878c0d9a865276587a6346")
      override
          fun configuration(configuration: CategoryFilterConfigurationProperty.Builder.() -> Unit):
          Unit = configuration(CategoryFilterConfigurationProperty(configuration))

      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterProperty,
    ) : CdkObject(cdkObject), CategoryFilterProperty {
      override fun column(): Any = unwrap(this).getColumn()

      override fun configuration(): Any = unwrap(this).getConfiguration()

      override fun filterId(): String = unwrap(this).getFilterId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): CategoryFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterProperty):
          CategoryFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CategoryFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryFilterProperty
    }
  }

  public interface VisibleRangeOptionsProperty {
    public fun percentRange(): Any? = unwrap(this).getPercentRange()

    @CdkDslMarker
    public interface Builder {
      public fun percentRange(percentRange: IResolvable)

      public fun percentRange(percentRange: PercentVisibleRangeProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("70df5392a8705c1dd3510c97d3acc0ce91d489256a816709ae0152272dfb9577")
      public fun percentRange(percentRange: PercentVisibleRangeProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisibleRangeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisibleRangeOptionsProperty.builder()

      override fun percentRange(percentRange: IResolvable) {
        cdkBuilder.percentRange(percentRange.let(IResolvable::unwrap))
      }

      override fun percentRange(percentRange: PercentVisibleRangeProperty) {
        cdkBuilder.percentRange(percentRange.let(PercentVisibleRangeProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("70df5392a8705c1dd3510c97d3acc0ce91d489256a816709ae0152272dfb9577")
      override fun percentRange(percentRange: PercentVisibleRangeProperty.Builder.() -> Unit): Unit
          = percentRange(PercentVisibleRangeProperty(percentRange))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisibleRangeOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisibleRangeOptionsProperty,
    ) : CdkObject(cdkObject), VisibleRangeOptionsProperty {
      override fun percentRange(): Any? = unwrap(this).getPercentRange()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): VisibleRangeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.VisibleRangeOptionsProperty):
          VisibleRangeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisibleRangeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisibleRangeOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisibleRangeOptionsProperty
    }
  }

  public interface FontSizeProperty {
    public fun relative(): String? = unwrap(this).getRelative()

    @CdkDslMarker
    public interface Builder {
      public fun relative(relative: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontSizeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontSizeProperty.builder()

      override fun relative(relative: String) {
        cdkBuilder.relative(relative)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.FontSizeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontSizeProperty,
    ) : CdkObject(cdkObject), FontSizeProperty {
      override fun relative(): String? = unwrap(this).getRelative()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FontSizeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FontSizeProperty):
          FontSizeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FontSizeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontSizeProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontSizeProperty
    }
  }

  public interface GaugeChartArcConditionalFormattingProperty {
    public fun foregroundColor(): Any? = unwrap(this).getForegroundColor()

    @CdkDslMarker
    public interface Builder {
      public fun foregroundColor(foregroundColor: IResolvable)

      public fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eae1c1ff9d3296198d7c1b5d6366aaaadfd4dd6d91097bd7555362fe8a4c08a3")
      public
          fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartArcConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartArcConditionalFormattingProperty.builder()

      override fun foregroundColor(foregroundColor: IResolvable) {
        cdkBuilder.foregroundColor(foregroundColor.let(IResolvable::unwrap))
      }

      override fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty) {
        cdkBuilder.foregroundColor(foregroundColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eae1c1ff9d3296198d7c1b5d6366aaaadfd4dd6d91097bd7555362fe8a4c08a3")
      override
          fun foregroundColor(foregroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit):
          Unit = foregroundColor(ConditionalFormattingColorProperty(foregroundColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartArcConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartArcConditionalFormattingProperty,
    ) : CdkObject(cdkObject), GaugeChartArcConditionalFormattingProperty {
      override fun foregroundColor(): Any? = unwrap(this).getForegroundColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GaugeChartArcConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartArcConditionalFormattingProperty):
          GaugeChartArcConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GaugeChartArcConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartArcConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GaugeChartArcConditionalFormattingProperty
    }
  }

  public interface TableFieldOptionsProperty {
    public fun order(): List<String> = unwrap(this).getOrder() ?: emptyList()

    public fun pinnedFieldOptions(): Any? = unwrap(this).getPinnedFieldOptions()

    public fun selectedFieldOptions(): Any? = unwrap(this).getSelectedFieldOptions()

    @CdkDslMarker
    public interface Builder {
      public fun order(order: List<String>)

      public fun order(vararg order: String)

      public fun pinnedFieldOptions(pinnedFieldOptions: IResolvable)

      public fun pinnedFieldOptions(pinnedFieldOptions: TablePinnedFieldOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0ed92c22b650b72c25c25b1fd40757bd023d43d8727380dacc77db14a1e0fa7f")
      public
          fun pinnedFieldOptions(pinnedFieldOptions: TablePinnedFieldOptionsProperty.Builder.() -> Unit)

      public fun selectedFieldOptions(selectedFieldOptions: IResolvable)

      public fun selectedFieldOptions(selectedFieldOptions: List<Any>)

      public fun selectedFieldOptions(vararg selectedFieldOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionsProperty.builder()

      override fun order(order: List<String>) {
        cdkBuilder.order(order)
      }

      override fun order(vararg order: String): Unit = order(order.toList())

      override fun pinnedFieldOptions(pinnedFieldOptions: IResolvable) {
        cdkBuilder.pinnedFieldOptions(pinnedFieldOptions.let(IResolvable::unwrap))
      }

      override fun pinnedFieldOptions(pinnedFieldOptions: TablePinnedFieldOptionsProperty) {
        cdkBuilder.pinnedFieldOptions(pinnedFieldOptions.let(TablePinnedFieldOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0ed92c22b650b72c25c25b1fd40757bd023d43d8727380dacc77db14a1e0fa7f")
      override
          fun pinnedFieldOptions(pinnedFieldOptions: TablePinnedFieldOptionsProperty.Builder.() -> Unit):
          Unit = pinnedFieldOptions(TablePinnedFieldOptionsProperty(pinnedFieldOptions))

      override fun selectedFieldOptions(selectedFieldOptions: IResolvable) {
        cdkBuilder.selectedFieldOptions(selectedFieldOptions.let(IResolvable::unwrap))
      }

      override fun selectedFieldOptions(selectedFieldOptions: List<Any>) {
        cdkBuilder.selectedFieldOptions(selectedFieldOptions)
      }

      override fun selectedFieldOptions(vararg selectedFieldOptions: Any): Unit =
          selectedFieldOptions(selectedFieldOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionsProperty,
    ) : CdkObject(cdkObject), TableFieldOptionsProperty {
      override fun order(): List<String> = unwrap(this).getOrder() ?: emptyList()

      override fun pinnedFieldOptions(): Any? = unwrap(this).getPinnedFieldOptions()

      override fun selectedFieldOptions(): Any? = unwrap(this).getSelectedFieldOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TableFieldOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionsProperty):
          TableFieldOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldOptionsProperty
    }
  }

  public interface SectionBasedLayoutConfigurationProperty {
    public fun bodySections(): Any

    public fun canvasSizeOptions(): Any

    public fun footerSections(): Any

    public fun headerSections(): Any

    @CdkDslMarker
    public interface Builder {
      public fun bodySections(bodySections: IResolvable)

      public fun bodySections(bodySections: List<Any>)

      public fun bodySections(vararg bodySections: Any)

      public fun canvasSizeOptions(canvasSizeOptions: IResolvable)

      public fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4b51b5f761492e3fe4cf6126d4ccb6dfe452193c73aafc7c6ffb457bedb93644")
      public
          fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty.Builder.() -> Unit)

      public fun footerSections(footerSections: IResolvable)

      public fun footerSections(footerSections: List<Any>)

      public fun footerSections(vararg footerSections: Any)

      public fun headerSections(headerSections: IResolvable)

      public fun headerSections(headerSections: List<Any>)

      public fun headerSections(vararg headerSections: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutConfigurationProperty.builder()

      override fun bodySections(bodySections: IResolvable) {
        cdkBuilder.bodySections(bodySections.let(IResolvable::unwrap))
      }

      override fun bodySections(bodySections: List<Any>) {
        cdkBuilder.bodySections(bodySections)
      }

      override fun bodySections(vararg bodySections: Any): Unit =
          bodySections(bodySections.toList())

      override fun canvasSizeOptions(canvasSizeOptions: IResolvable) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(IResolvable::unwrap))
      }

      override
          fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(SectionBasedLayoutCanvasSizeOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4b51b5f761492e3fe4cf6126d4ccb6dfe452193c73aafc7c6ffb457bedb93644")
      override
          fun canvasSizeOptions(canvasSizeOptions: SectionBasedLayoutCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit = canvasSizeOptions(SectionBasedLayoutCanvasSizeOptionsProperty(canvasSizeOptions))

      override fun footerSections(footerSections: IResolvable) {
        cdkBuilder.footerSections(footerSections.let(IResolvable::unwrap))
      }

      override fun footerSections(footerSections: List<Any>) {
        cdkBuilder.footerSections(footerSections)
      }

      override fun footerSections(vararg footerSections: Any): Unit =
          footerSections(footerSections.toList())

      override fun headerSections(headerSections: IResolvable) {
        cdkBuilder.headerSections(headerSections.let(IResolvable::unwrap))
      }

      override fun headerSections(headerSections: List<Any>) {
        cdkBuilder.headerSections(headerSections)
      }

      override fun headerSections(vararg headerSections: Any): Unit =
          headerSections(headerSections.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutConfigurationProperty,
    ) : CdkObject(cdkObject), SectionBasedLayoutConfigurationProperty {
      override fun bodySections(): Any = unwrap(this).getBodySections()

      override fun canvasSizeOptions(): Any = unwrap(this).getCanvasSizeOptions()

      override fun footerSections(): Any = unwrap(this).getFooterSections()

      override fun headerSections(): Any = unwrap(this).getHeaderSections()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SectionBasedLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutConfigurationProperty):
          SectionBasedLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionBasedLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutConfigurationProperty
    }
  }

  public interface FunnelChartVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: FunnelChartConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("80ef6e05316c0f3617ae56beb99cd66eb93e4369d0faf9bd232e4422d3a75196")
      public
          fun chartConfiguration(chartConfiguration: FunnelChartConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf993e4f0a85cdda885d5623641236ca52b2d0724a2cf6b8cafca8a8bd93caa1")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d0de19fd067730efd36b15fea1fd5b93ed6f42736e1416dee352a1e8dda33974")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: FunnelChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(FunnelChartConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("80ef6e05316c0f3617ae56beb99cd66eb93e4369d0faf9bd232e4422d3a75196")
      override
          fun chartConfiguration(chartConfiguration: FunnelChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(FunnelChartConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf993e4f0a85cdda885d5623641236ca52b2d0724a2cf6b8cafca8a8bd93caa1")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d0de19fd067730efd36b15fea1fd5b93ed6f42736e1416dee352a1e8dda33974")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartVisualProperty,
    ) : CdkObject(cdkObject), FunnelChartVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FunnelChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartVisualProperty):
          FunnelChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FunnelChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartVisualProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartVisualProperty
    }
  }

  public interface SmallMultiplesAxisPropertiesProperty {
    public fun placement(): String? = unwrap(this).getPlacement()

    public fun scale(): String? = unwrap(this).getScale()

    @CdkDslMarker
    public interface Builder {
      public fun placement(placement: String)

      public fun scale(scale: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesAxisPropertiesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesAxisPropertiesProperty.builder()

      override fun placement(placement: String) {
        cdkBuilder.placement(placement)
      }

      override fun scale(scale: String) {
        cdkBuilder.scale(scale)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesAxisPropertiesProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesAxisPropertiesProperty,
    ) : CdkObject(cdkObject), SmallMultiplesAxisPropertiesProperty {
      override fun placement(): String? = unwrap(this).getPlacement()

      override fun scale(): String? = unwrap(this).getScale()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SmallMultiplesAxisPropertiesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesAxisPropertiesProperty):
          SmallMultiplesAxisPropertiesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SmallMultiplesAxisPropertiesProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesAxisPropertiesProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SmallMultiplesAxisPropertiesProperty
    }
  }

  public interface DefaultFreeFormLayoutConfigurationProperty {
    public fun canvasSizeOptions(): Any

    @CdkDslMarker
    public interface Builder {
      public fun canvasSizeOptions(canvasSizeOptions: IResolvable)

      public fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("55c9d06fbac9304ee151a11d67f7e2364923ea98491edadca6a466f3b672be59")
      public
          fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultFreeFormLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultFreeFormLayoutConfigurationProperty.builder()

      override fun canvasSizeOptions(canvasSizeOptions: IResolvable) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(IResolvable::unwrap))
      }

      override fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(FreeFormLayoutCanvasSizeOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("55c9d06fbac9304ee151a11d67f7e2364923ea98491edadca6a466f3b672be59")
      override
          fun canvasSizeOptions(canvasSizeOptions: FreeFormLayoutCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit = canvasSizeOptions(FreeFormLayoutCanvasSizeOptionsProperty(canvasSizeOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultFreeFormLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultFreeFormLayoutConfigurationProperty,
    ) : CdkObject(cdkObject), DefaultFreeFormLayoutConfigurationProperty {
      override fun canvasSizeOptions(): Any = unwrap(this).getCanvasSizeOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DefaultFreeFormLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultFreeFormLayoutConfigurationProperty):
          DefaultFreeFormLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DefaultFreeFormLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultFreeFormLayoutConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultFreeFormLayoutConfigurationProperty
    }
  }

  public interface DataSetSchemaProperty {
    public fun columnSchemaList(): Any? = unwrap(this).getColumnSchemaList()

    @CdkDslMarker
    public interface Builder {
      public fun columnSchemaList(columnSchemaList: IResolvable)

      public fun columnSchemaList(columnSchemaList: List<Any>)

      public fun columnSchemaList(vararg columnSchemaList: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetSchemaProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetSchemaProperty.builder()

      override fun columnSchemaList(columnSchemaList: IResolvable) {
        cdkBuilder.columnSchemaList(columnSchemaList.let(IResolvable::unwrap))
      }

      override fun columnSchemaList(columnSchemaList: List<Any>) {
        cdkBuilder.columnSchemaList(columnSchemaList)
      }

      override fun columnSchemaList(vararg columnSchemaList: Any): Unit =
          columnSchemaList(columnSchemaList.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetSchemaProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetSchemaProperty,
    ) : CdkObject(cdkObject), DataSetSchemaProperty {
      override fun columnSchemaList(): Any? = unwrap(this).getColumnSchemaList()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataSetSchemaProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetSchemaProperty):
          DataSetSchemaProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataSetSchemaProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetSchemaProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetSchemaProperty
    }
  }

  public interface ForecastComputationProperty {
    public fun computationId(): String

    public fun customSeasonalityValue(): Number? = unwrap(this).getCustomSeasonalityValue()

    public fun lowerBoundary(): Number? = unwrap(this).getLowerBoundary()

    public fun name(): String? = unwrap(this).getName()

    public fun periodsBackward(): Number? = unwrap(this).getPeriodsBackward()

    public fun periodsForward(): Number? = unwrap(this).getPeriodsForward()

    public fun predictionInterval(): Number? = unwrap(this).getPredictionInterval()

    public fun seasonality(): String? = unwrap(this).getSeasonality()

    public fun time(): Any? = unwrap(this).getTime()

    public fun upperBoundary(): Number? = unwrap(this).getUpperBoundary()

    public fun `value`(): Any? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun computationId(computationId: String)

      public fun customSeasonalityValue(customSeasonalityValue: Number)

      public fun lowerBoundary(lowerBoundary: Number)

      public fun name(name: String)

      public fun periodsBackward(periodsBackward: Number)

      public fun periodsForward(periodsForward: Number)

      public fun predictionInterval(predictionInterval: Number)

      public fun seasonality(seasonality: String)

      public fun time(time: IResolvable)

      public fun time(time: DimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f650cd4cd24dc093e1fca2bf1e5dc407bee578b05e3ee5733eab5f4d1297a9f0")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)

      public fun upperBoundary(upperBoundary: Number)

      public fun `value`(`value`: IResolvable)

      public fun `value`(`value`: MeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dab721a07ebb26d87dd5e014d381ab26201bb3e41e06a6a589355a700487b0f7")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastComputationProperty.builder()

      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      override fun customSeasonalityValue(customSeasonalityValue: Number) {
        cdkBuilder.customSeasonalityValue(customSeasonalityValue)
      }

      override fun lowerBoundary(lowerBoundary: Number) {
        cdkBuilder.lowerBoundary(lowerBoundary)
      }

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun periodsBackward(periodsBackward: Number) {
        cdkBuilder.periodsBackward(periodsBackward)
      }

      override fun periodsForward(periodsForward: Number) {
        cdkBuilder.periodsForward(periodsForward)
      }

      override fun predictionInterval(predictionInterval: Number) {
        cdkBuilder.predictionInterval(predictionInterval)
      }

      override fun seasonality(seasonality: String) {
        cdkBuilder.seasonality(seasonality)
      }

      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f650cd4cd24dc093e1fca2bf1e5dc407bee578b05e3ee5733eab5f4d1297a9f0")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      override fun upperBoundary(upperBoundary: Number) {
        cdkBuilder.upperBoundary(upperBoundary)
      }

      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dab721a07ebb26d87dd5e014d381ab26201bb3e41e06a6a589355a700487b0f7")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastComputationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastComputationProperty,
    ) : CdkObject(cdkObject), ForecastComputationProperty {
      override fun computationId(): String = unwrap(this).getComputationId()

      override fun customSeasonalityValue(): Number? = unwrap(this).getCustomSeasonalityValue()

      override fun lowerBoundary(): Number? = unwrap(this).getLowerBoundary()

      override fun name(): String? = unwrap(this).getName()

      override fun periodsBackward(): Number? = unwrap(this).getPeriodsBackward()

      override fun periodsForward(): Number? = unwrap(this).getPeriodsForward()

      override fun predictionInterval(): Number? = unwrap(this).getPredictionInterval()

      override fun seasonality(): String? = unwrap(this).getSeasonality()

      override fun time(): Any? = unwrap(this).getTime()

      override fun upperBoundary(): Number? = unwrap(this).getUpperBoundary()

      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ForecastComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastComputationProperty):
          ForecastComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ForecastComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastComputationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastComputationProperty
    }
  }

  public interface ComparisonFormatConfigurationProperty {
    public fun numberDisplayFormatConfiguration(): Any? =
        unwrap(this).getNumberDisplayFormatConfiguration()

    public fun percentageDisplayFormatConfiguration(): Any? =
        unwrap(this).getPercentageDisplayFormatConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: IResolvable)

      public
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f6e5989fcb25b8c059290a79e7d4cb192aa59bbcd40af03d85b31acd1a34f8b3")
      public
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty.Builder.() -> Unit)

      public
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: IResolvable)

      public
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("904f969e9ad5924d7ea8f6df3f73d097d7a540fff87bf5d78fe4e631d29c366b")
      public
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonFormatConfigurationProperty.builder()

      override fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: IResolvable) {
        cdkBuilder.numberDisplayFormatConfiguration(numberDisplayFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty) {
        cdkBuilder.numberDisplayFormatConfiguration(numberDisplayFormatConfiguration.let(NumberDisplayFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f6e5989fcb25b8c059290a79e7d4cb192aa59bbcd40af03d85b31acd1a34f8b3")
      override
          fun numberDisplayFormatConfiguration(numberDisplayFormatConfiguration: NumberDisplayFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          numberDisplayFormatConfiguration(NumberDisplayFormatConfigurationProperty(numberDisplayFormatConfiguration))

      override
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: IResolvable) {
        cdkBuilder.percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty) {
        cdkBuilder.percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration.let(PercentageDisplayFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("904f969e9ad5924d7ea8f6df3f73d097d7a540fff87bf5d78fe4e631d29c366b")
      override
          fun percentageDisplayFormatConfiguration(percentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          percentageDisplayFormatConfiguration(PercentageDisplayFormatConfigurationProperty(percentageDisplayFormatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonFormatConfigurationProperty,
    ) : CdkObject(cdkObject), ComparisonFormatConfigurationProperty {
      override fun numberDisplayFormatConfiguration(): Any? =
          unwrap(this).getNumberDisplayFormatConfiguration()

      override fun percentageDisplayFormatConfiguration(): Any? =
          unwrap(this).getPercentageDisplayFormatConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ComparisonFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonFormatConfigurationProperty):
          ComparisonFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComparisonFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonFormatConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonFormatConfigurationProperty
    }
  }

  public interface HistogramConfigurationProperty {
    public fun binOptions(): Any? = unwrap(this).getBinOptions()

    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun tooltip(): Any? = unwrap(this).getTooltip()

    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    public fun xAxisDisplayOptions(): Any? = unwrap(this).getXAxisDisplayOptions()

    public fun xAxisLabelOptions(): Any? = unwrap(this).getXAxisLabelOptions()

    public fun yAxisDisplayOptions(): Any? = unwrap(this).getYAxisDisplayOptions()

    @CdkDslMarker
    public interface Builder {
      public fun binOptions(binOptions: IResolvable)

      public fun binOptions(binOptions: HistogramBinOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6f7f3dcc60be97dd4edf5af86242086df2849087bc011b304b6ca86983fdf66d")
      public fun binOptions(binOptions: HistogramBinOptionsProperty.Builder.() -> Unit)

      public fun dataLabels(dataLabels: IResolvable)

      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e97cec502a2838a080edb158df5b94e54e340e3fbc1663487b59ce21a8683613")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: HistogramFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c0238272525520663970f59c2e32321c22b07d172e2b516661f6f2d65fdd8886")
      public fun fieldWells(fieldWells: HistogramFieldWellsProperty.Builder.() -> Unit)

      public fun tooltip(tooltip: IResolvable)

      public fun tooltip(tooltip: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d3afa0f4138eefecf123992faf7ae433f0de3029bb46a21423281c05de4cbc8a")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      public fun visualPalette(visualPalette: IResolvable)

      public fun visualPalette(visualPalette: VisualPaletteProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2eb42d26bea1adfdbb419e366c21972e4267d5f530bc5c7d3af01ae8571c1f38")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)

      public fun xAxisDisplayOptions(xAxisDisplayOptions: IResolvable)

      public fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d6653e4125db61227127362bae12ae1aeb9de9e852a41a4ca48d401ef30d1a7c")
      public
          fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun xAxisLabelOptions(xAxisLabelOptions: IResolvable)

      public fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0b39d066275bffbbd6c59840d6c6fa5dfb7b507182f5caf504440bad8f94d0b1")
      public
          fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun yAxisDisplayOptions(yAxisDisplayOptions: IResolvable)

      public fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f80b2d93b4234b166662a9d5d1a60cfed99a8f5adeb53ceff68655322ae6cee9")
      public
          fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramConfigurationProperty.builder()

      override fun binOptions(binOptions: IResolvable) {
        cdkBuilder.binOptions(binOptions.let(IResolvable::unwrap))
      }

      override fun binOptions(binOptions: HistogramBinOptionsProperty) {
        cdkBuilder.binOptions(binOptions.let(HistogramBinOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6f7f3dcc60be97dd4edf5af86242086df2849087bc011b304b6ca86983fdf66d")
      override fun binOptions(binOptions: HistogramBinOptionsProperty.Builder.() -> Unit): Unit =
          binOptions(HistogramBinOptionsProperty(binOptions))

      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e97cec502a2838a080edb158df5b94e54e340e3fbc1663487b59ce21a8683613")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: HistogramFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(HistogramFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c0238272525520663970f59c2e32321c22b07d172e2b516661f6f2d65fdd8886")
      override fun fieldWells(fieldWells: HistogramFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(HistogramFieldWellsProperty(fieldWells))

      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d3afa0f4138eefecf123992faf7ae433f0de3029bb46a21423281c05de4cbc8a")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2eb42d26bea1adfdbb419e366c21972e4267d5f530bc5c7d3af01ae8571c1f38")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      override fun xAxisDisplayOptions(xAxisDisplayOptions: IResolvable) {
        cdkBuilder.xAxisDisplayOptions(xAxisDisplayOptions.let(IResolvable::unwrap))
      }

      override fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.xAxisDisplayOptions(xAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d6653e4125db61227127362bae12ae1aeb9de9e852a41a4ca48d401ef30d1a7c")
      override
          fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = xAxisDisplayOptions(AxisDisplayOptionsProperty(xAxisDisplayOptions))

      override fun xAxisLabelOptions(xAxisLabelOptions: IResolvable) {
        cdkBuilder.xAxisLabelOptions(xAxisLabelOptions.let(IResolvable::unwrap))
      }

      override fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.xAxisLabelOptions(xAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0b39d066275bffbbd6c59840d6c6fa5dfb7b507182f5caf504440bad8f94d0b1")
      override
          fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = xAxisLabelOptions(ChartAxisLabelOptionsProperty(xAxisLabelOptions))

      override fun yAxisDisplayOptions(yAxisDisplayOptions: IResolvable) {
        cdkBuilder.yAxisDisplayOptions(yAxisDisplayOptions.let(IResolvable::unwrap))
      }

      override fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.yAxisDisplayOptions(yAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f80b2d93b4234b166662a9d5d1a60cfed99a8f5adeb53ceff68655322ae6cee9")
      override
          fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = yAxisDisplayOptions(AxisDisplayOptionsProperty(yAxisDisplayOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramConfigurationProperty,
    ) : CdkObject(cdkObject), HistogramConfigurationProperty {
      override fun binOptions(): Any? = unwrap(this).getBinOptions()

      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun tooltip(): Any? = unwrap(this).getTooltip()

      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()

      override fun xAxisDisplayOptions(): Any? = unwrap(this).getXAxisDisplayOptions()

      override fun xAxisLabelOptions(): Any? = unwrap(this).getXAxisLabelOptions()

      override fun yAxisDisplayOptions(): Any? = unwrap(this).getYAxisDisplayOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): HistogramConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramConfigurationProperty):
          HistogramConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HistogramConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramConfigurationProperty
    }
  }

  public interface PredefinedHierarchyProperty {
    public fun columns(): Any

    public fun drillDownFilters(): Any? = unwrap(this).getDrillDownFilters()

    public fun hierarchyId(): String

    @CdkDslMarker
    public interface Builder {
      public fun columns(columns: IResolvable)

      public fun columns(columns: List<Any>)

      public fun columns(vararg columns: Any)

      public fun drillDownFilters(drillDownFilters: IResolvable)

      public fun drillDownFilters(drillDownFilters: List<Any>)

      public fun drillDownFilters(vararg drillDownFilters: Any)

      public fun hierarchyId(hierarchyId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PredefinedHierarchyProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PredefinedHierarchyProperty.builder()

      override fun columns(columns: IResolvable) {
        cdkBuilder.columns(columns.let(IResolvable::unwrap))
      }

      override fun columns(columns: List<Any>) {
        cdkBuilder.columns(columns)
      }

      override fun columns(vararg columns: Any): Unit = columns(columns.toList())

      override fun drillDownFilters(drillDownFilters: IResolvable) {
        cdkBuilder.drillDownFilters(drillDownFilters.let(IResolvable::unwrap))
      }

      override fun drillDownFilters(drillDownFilters: List<Any>) {
        cdkBuilder.drillDownFilters(drillDownFilters)
      }

      override fun drillDownFilters(vararg drillDownFilters: Any): Unit =
          drillDownFilters(drillDownFilters.toList())

      override fun hierarchyId(hierarchyId: String) {
        cdkBuilder.hierarchyId(hierarchyId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PredefinedHierarchyProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PredefinedHierarchyProperty,
    ) : CdkObject(cdkObject), PredefinedHierarchyProperty {
      override fun columns(): Any = unwrap(this).getColumns()

      override fun drillDownFilters(): Any? = unwrap(this).getDrillDownFilters()

      override fun hierarchyId(): String = unwrap(this).getHierarchyId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PredefinedHierarchyProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PredefinedHierarchyProperty):
          PredefinedHierarchyProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PredefinedHierarchyProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PredefinedHierarchyProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PredefinedHierarchyProperty
    }
  }

  public interface FilterTextAreaControlProperty {
    public fun delimiter(): String? = unwrap(this).getDelimiter()

    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun filterControlId(): String

    public fun sourceFilterId(): String

    public fun title(): String

    @CdkDslMarker
    public interface Builder {
      public fun delimiter(delimiter: String)

      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6a176239cabb787676a1ff7738aa7560600640a6c1077ff8d4b96586f8d8f800")
      public
          fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun filterControlId(filterControlId: String)

      public fun sourceFilterId(sourceFilterId: String)

      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextAreaControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextAreaControlProperty.builder()

      override fun delimiter(delimiter: String) {
        cdkBuilder.delimiter(delimiter)
      }

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(TextAreaControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6a176239cabb787676a1ff7738aa7560600640a6c1077ff8d4b96586f8d8f800")
      override
          fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(TextAreaControlDisplayOptionsProperty(displayOptions))

      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextAreaControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextAreaControlProperty,
    ) : CdkObject(cdkObject), FilterTextAreaControlProperty {
      override fun delimiter(): String? = unwrap(this).getDelimiter()

      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilterTextAreaControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextAreaControlProperty):
          FilterTextAreaControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterTextAreaControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextAreaControlProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterTextAreaControlProperty
    }
  }

  public interface ReferenceLineDataConfigurationProperty {
    public fun axisBinding(): String? = unwrap(this).getAxisBinding()

    public fun dynamicConfiguration(): Any? = unwrap(this).getDynamicConfiguration()

    public fun seriesType(): String? = unwrap(this).getSeriesType()

    public fun staticConfiguration(): Any? = unwrap(this).getStaticConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun axisBinding(axisBinding: String)

      public fun dynamicConfiguration(dynamicConfiguration: IResolvable)

      public
          fun dynamicConfiguration(dynamicConfiguration: ReferenceLineDynamicDataConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fc7885f02d5203a553160bec13fb525922b25df0e00f06b5a00d467f0a1207fc")
      public
          fun dynamicConfiguration(dynamicConfiguration: ReferenceLineDynamicDataConfigurationProperty.Builder.() -> Unit)

      public fun seriesType(seriesType: String)

      public fun staticConfiguration(staticConfiguration: IResolvable)

      public
          fun staticConfiguration(staticConfiguration: ReferenceLineStaticDataConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ddb45434f3c759cb2871918b280316ca67eb2f4ade1b768089a99e08506455ce")
      public
          fun staticConfiguration(staticConfiguration: ReferenceLineStaticDataConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDataConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDataConfigurationProperty.builder()

      override fun axisBinding(axisBinding: String) {
        cdkBuilder.axisBinding(axisBinding)
      }

      override fun dynamicConfiguration(dynamicConfiguration: IResolvable) {
        cdkBuilder.dynamicConfiguration(dynamicConfiguration.let(IResolvable::unwrap))
      }

      override
          fun dynamicConfiguration(dynamicConfiguration: ReferenceLineDynamicDataConfigurationProperty) {
        cdkBuilder.dynamicConfiguration(dynamicConfiguration.let(ReferenceLineDynamicDataConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fc7885f02d5203a553160bec13fb525922b25df0e00f06b5a00d467f0a1207fc")
      override
          fun dynamicConfiguration(dynamicConfiguration: ReferenceLineDynamicDataConfigurationProperty.Builder.() -> Unit):
          Unit =
          dynamicConfiguration(ReferenceLineDynamicDataConfigurationProperty(dynamicConfiguration))

      override fun seriesType(seriesType: String) {
        cdkBuilder.seriesType(seriesType)
      }

      override fun staticConfiguration(staticConfiguration: IResolvable) {
        cdkBuilder.staticConfiguration(staticConfiguration.let(IResolvable::unwrap))
      }

      override
          fun staticConfiguration(staticConfiguration: ReferenceLineStaticDataConfigurationProperty) {
        cdkBuilder.staticConfiguration(staticConfiguration.let(ReferenceLineStaticDataConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ddb45434f3c759cb2871918b280316ca67eb2f4ade1b768089a99e08506455ce")
      override
          fun staticConfiguration(staticConfiguration: ReferenceLineStaticDataConfigurationProperty.Builder.() -> Unit):
          Unit =
          staticConfiguration(ReferenceLineStaticDataConfigurationProperty(staticConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDataConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDataConfigurationProperty,
    ) : CdkObject(cdkObject), ReferenceLineDataConfigurationProperty {
      override fun axisBinding(): String? = unwrap(this).getAxisBinding()

      override fun dynamicConfiguration(): Any? = unwrap(this).getDynamicConfiguration()

      override fun seriesType(): String? = unwrap(this).getSeriesType()

      override fun staticConfiguration(): Any? = unwrap(this).getStaticConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineDataConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDataConfigurationProperty):
          ReferenceLineDataConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineDataConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDataConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDataConfigurationProperty
    }
  }

  public interface TextFieldControlDisplayOptionsProperty {
    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    public fun placeholderOptions(): Any? = unwrap(this).getPlaceholderOptions()

    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    @CdkDslMarker
    public interface Builder {
      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("50ccee95f75f9c10e267c85a89bc017008070653c95e21bd618185a91f6bd823")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      public fun placeholderOptions(placeholderOptions: IResolvable)

      public fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("72ed176153b2dd91ca2733edb5f4f997230c8c5f3cb3c0514c22798a43b336ac")
      public
          fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty.Builder.() -> Unit)

      public fun titleOptions(titleOptions: IResolvable)

      public fun titleOptions(titleOptions: LabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fef384489baabb371606346206d175cb3e1cd916cf1743ded7c18d82c80ac37d")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextFieldControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextFieldControlDisplayOptionsProperty.builder()

      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("50ccee95f75f9c10e267c85a89bc017008070653c95e21bd618185a91f6bd823")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      override fun placeholderOptions(placeholderOptions: IResolvable) {
        cdkBuilder.placeholderOptions(placeholderOptions.let(IResolvable::unwrap))
      }

      override fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty) {
        cdkBuilder.placeholderOptions(placeholderOptions.let(TextControlPlaceholderOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("72ed176153b2dd91ca2733edb5f4f997230c8c5f3cb3c0514c22798a43b336ac")
      override
          fun placeholderOptions(placeholderOptions: TextControlPlaceholderOptionsProperty.Builder.() -> Unit):
          Unit = placeholderOptions(TextControlPlaceholderOptionsProperty(placeholderOptions))

      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fef384489baabb371606346206d175cb3e1cd916cf1743ded7c18d82c80ac37d")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextFieldControlDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextFieldControlDisplayOptionsProperty,
    ) : CdkObject(cdkObject), TextFieldControlDisplayOptionsProperty {
      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      override fun placeholderOptions(): Any? = unwrap(this).getPlaceholderOptions()

      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TextFieldControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TextFieldControlDisplayOptionsProperty):
          TextFieldControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TextFieldControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextFieldControlDisplayOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextFieldControlDisplayOptionsProperty
    }
  }

  public interface PercentileAggregationProperty {
    public fun percentileValue(): Number? = unwrap(this).getPercentileValue()

    @CdkDslMarker
    public interface Builder {
      public fun percentileValue(percentileValue: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentileAggregationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentileAggregationProperty.builder()

      override fun percentileValue(percentileValue: Number) {
        cdkBuilder.percentileValue(percentileValue)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentileAggregationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentileAggregationProperty,
    ) : CdkObject(cdkObject), PercentileAggregationProperty {
      override fun percentileValue(): Number? = unwrap(this).getPercentileValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PercentileAggregationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PercentileAggregationProperty):
          PercentileAggregationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PercentileAggregationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentileAggregationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentileAggregationProperty
    }
  }

  public interface AggregationFunctionProperty {
    public fun attributeAggregationFunction(): Any? = unwrap(this).getAttributeAggregationFunction()

    public fun categoricalAggregationFunction(): String? =
        unwrap(this).getCategoricalAggregationFunction()

    public fun dateAggregationFunction(): String? = unwrap(this).getDateAggregationFunction()

    public fun numericalAggregationFunction(): Any? = unwrap(this).getNumericalAggregationFunction()

    @CdkDslMarker
    public interface Builder {
      public fun attributeAggregationFunction(attributeAggregationFunction: IResolvable)

      public
          fun attributeAggregationFunction(attributeAggregationFunction: AttributeAggregationFunctionProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("52aca005dbfe7d1a44fa0127c4f36153c78ee7d939a11b8a1fd2568060c45530")
      public
          fun attributeAggregationFunction(attributeAggregationFunction: AttributeAggregationFunctionProperty.Builder.() -> Unit)

      public fun categoricalAggregationFunction(categoricalAggregationFunction: String)

      public fun dateAggregationFunction(dateAggregationFunction: String)

      public fun numericalAggregationFunction(numericalAggregationFunction: IResolvable)

      public
          fun numericalAggregationFunction(numericalAggregationFunction: NumericalAggregationFunctionProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0ff73f85ba0babe988f6e1d0a8b1d427e140bd79fcf3ee8fedc2d2c75776fb47")
      public
          fun numericalAggregationFunction(numericalAggregationFunction: NumericalAggregationFunctionProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationFunctionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationFunctionProperty.builder()

      override fun attributeAggregationFunction(attributeAggregationFunction: IResolvable) {
        cdkBuilder.attributeAggregationFunction(attributeAggregationFunction.let(IResolvable::unwrap))
      }

      override
          fun attributeAggregationFunction(attributeAggregationFunction: AttributeAggregationFunctionProperty) {
        cdkBuilder.attributeAggregationFunction(attributeAggregationFunction.let(AttributeAggregationFunctionProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("52aca005dbfe7d1a44fa0127c4f36153c78ee7d939a11b8a1fd2568060c45530")
      override
          fun attributeAggregationFunction(attributeAggregationFunction: AttributeAggregationFunctionProperty.Builder.() -> Unit):
          Unit =
          attributeAggregationFunction(AttributeAggregationFunctionProperty(attributeAggregationFunction))

      override fun categoricalAggregationFunction(categoricalAggregationFunction: String) {
        cdkBuilder.categoricalAggregationFunction(categoricalAggregationFunction)
      }

      override fun dateAggregationFunction(dateAggregationFunction: String) {
        cdkBuilder.dateAggregationFunction(dateAggregationFunction)
      }

      override fun numericalAggregationFunction(numericalAggregationFunction: IResolvable) {
        cdkBuilder.numericalAggregationFunction(numericalAggregationFunction.let(IResolvable::unwrap))
      }

      override
          fun numericalAggregationFunction(numericalAggregationFunction: NumericalAggregationFunctionProperty) {
        cdkBuilder.numericalAggregationFunction(numericalAggregationFunction.let(NumericalAggregationFunctionProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0ff73f85ba0babe988f6e1d0a8b1d427e140bd79fcf3ee8fedc2d2c75776fb47")
      override
          fun numericalAggregationFunction(numericalAggregationFunction: NumericalAggregationFunctionProperty.Builder.() -> Unit):
          Unit =
          numericalAggregationFunction(NumericalAggregationFunctionProperty(numericalAggregationFunction))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationFunctionProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationFunctionProperty,
    ) : CdkObject(cdkObject), AggregationFunctionProperty {
      override fun attributeAggregationFunction(): Any? =
          unwrap(this).getAttributeAggregationFunction()

      override fun categoricalAggregationFunction(): String? =
          unwrap(this).getCategoricalAggregationFunction()

      override fun dateAggregationFunction(): String? = unwrap(this).getDateAggregationFunction()

      override fun numericalAggregationFunction(): Any? =
          unwrap(this).getNumericalAggregationFunction()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AggregationFunctionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationFunctionProperty):
          AggregationFunctionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AggregationFunctionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationFunctionProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AggregationFunctionProperty
    }
  }

  public interface DefaultNewSheetConfigurationProperty {
    public fun interactiveLayoutConfiguration(): Any? =
        unwrap(this).getInteractiveLayoutConfiguration()

    public fun paginatedLayoutConfiguration(): Any? = unwrap(this).getPaginatedLayoutConfiguration()

    public fun sheetContentType(): String? = unwrap(this).getSheetContentType()

    @CdkDslMarker
    public interface Builder {
      public fun interactiveLayoutConfiguration(interactiveLayoutConfiguration: IResolvable)

      public
          fun interactiveLayoutConfiguration(interactiveLayoutConfiguration: DefaultInteractiveLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("91519db5f47fbd273dbf552640d1cc732b9d6b2b16c46f236e930278bcb5c123")
      public
          fun interactiveLayoutConfiguration(interactiveLayoutConfiguration: DefaultInteractiveLayoutConfigurationProperty.Builder.() -> Unit)

      public fun paginatedLayoutConfiguration(paginatedLayoutConfiguration: IResolvable)

      public
          fun paginatedLayoutConfiguration(paginatedLayoutConfiguration: DefaultPaginatedLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("731ec70d4b51273adea2135aef4dfca415ee92fef3b7fe783a890b83602b9976")
      public
          fun paginatedLayoutConfiguration(paginatedLayoutConfiguration: DefaultPaginatedLayoutConfigurationProperty.Builder.() -> Unit)

      public fun sheetContentType(sheetContentType: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultNewSheetConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultNewSheetConfigurationProperty.builder()

      override fun interactiveLayoutConfiguration(interactiveLayoutConfiguration: IResolvable) {
        cdkBuilder.interactiveLayoutConfiguration(interactiveLayoutConfiguration.let(IResolvable::unwrap))
      }

      override
          fun interactiveLayoutConfiguration(interactiveLayoutConfiguration: DefaultInteractiveLayoutConfigurationProperty) {
        cdkBuilder.interactiveLayoutConfiguration(interactiveLayoutConfiguration.let(DefaultInteractiveLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("91519db5f47fbd273dbf552640d1cc732b9d6b2b16c46f236e930278bcb5c123")
      override
          fun interactiveLayoutConfiguration(interactiveLayoutConfiguration: DefaultInteractiveLayoutConfigurationProperty.Builder.() -> Unit):
          Unit =
          interactiveLayoutConfiguration(DefaultInteractiveLayoutConfigurationProperty(interactiveLayoutConfiguration))

      override fun paginatedLayoutConfiguration(paginatedLayoutConfiguration: IResolvable) {
        cdkBuilder.paginatedLayoutConfiguration(paginatedLayoutConfiguration.let(IResolvable::unwrap))
      }

      override
          fun paginatedLayoutConfiguration(paginatedLayoutConfiguration: DefaultPaginatedLayoutConfigurationProperty) {
        cdkBuilder.paginatedLayoutConfiguration(paginatedLayoutConfiguration.let(DefaultPaginatedLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("731ec70d4b51273adea2135aef4dfca415ee92fef3b7fe783a890b83602b9976")
      override
          fun paginatedLayoutConfiguration(paginatedLayoutConfiguration: DefaultPaginatedLayoutConfigurationProperty.Builder.() -> Unit):
          Unit =
          paginatedLayoutConfiguration(DefaultPaginatedLayoutConfigurationProperty(paginatedLayoutConfiguration))

      override fun sheetContentType(sheetContentType: String) {
        cdkBuilder.sheetContentType(sheetContentType)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultNewSheetConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultNewSheetConfigurationProperty,
    ) : CdkObject(cdkObject), DefaultNewSheetConfigurationProperty {
      override fun interactiveLayoutConfiguration(): Any? =
          unwrap(this).getInteractiveLayoutConfiguration()

      override fun paginatedLayoutConfiguration(): Any? =
          unwrap(this).getPaginatedLayoutConfiguration()

      override fun sheetContentType(): String? = unwrap(this).getSheetContentType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DefaultNewSheetConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultNewSheetConfigurationProperty):
          DefaultNewSheetConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DefaultNewSheetConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultNewSheetConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultNewSheetConfigurationProperty
    }
  }

  public interface HistogramBinOptionsProperty {
    public fun binCount(): Any? = unwrap(this).getBinCount()

    public fun binWidth(): Any? = unwrap(this).getBinWidth()

    public fun selectedBinType(): String? = unwrap(this).getSelectedBinType()

    public fun startValue(): Number? = unwrap(this).getStartValue()

    @CdkDslMarker
    public interface Builder {
      public fun binCount(binCount: IResolvable)

      public fun binCount(binCount: BinCountOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c0a6cde9a4758629147c261a3e80476d3e24c0271e0e6371358bc709e778e5a1")
      public fun binCount(binCount: BinCountOptionsProperty.Builder.() -> Unit)

      public fun binWidth(binWidth: IResolvable)

      public fun binWidth(binWidth: BinWidthOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fbe37d27cb4d55ee31542ca3a9a51000188bde00a38e0ec751a1485caaa22eb4")
      public fun binWidth(binWidth: BinWidthOptionsProperty.Builder.() -> Unit)

      public fun selectedBinType(selectedBinType: String)

      public fun startValue(startValue: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramBinOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramBinOptionsProperty.builder()

      override fun binCount(binCount: IResolvable) {
        cdkBuilder.binCount(binCount.let(IResolvable::unwrap))
      }

      override fun binCount(binCount: BinCountOptionsProperty) {
        cdkBuilder.binCount(binCount.let(BinCountOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c0a6cde9a4758629147c261a3e80476d3e24c0271e0e6371358bc709e778e5a1")
      override fun binCount(binCount: BinCountOptionsProperty.Builder.() -> Unit): Unit =
          binCount(BinCountOptionsProperty(binCount))

      override fun binWidth(binWidth: IResolvable) {
        cdkBuilder.binWidth(binWidth.let(IResolvable::unwrap))
      }

      override fun binWidth(binWidth: BinWidthOptionsProperty) {
        cdkBuilder.binWidth(binWidth.let(BinWidthOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fbe37d27cb4d55ee31542ca3a9a51000188bde00a38e0ec751a1485caaa22eb4")
      override fun binWidth(binWidth: BinWidthOptionsProperty.Builder.() -> Unit): Unit =
          binWidth(BinWidthOptionsProperty(binWidth))

      override fun selectedBinType(selectedBinType: String) {
        cdkBuilder.selectedBinType(selectedBinType)
      }

      override fun startValue(startValue: Number) {
        cdkBuilder.startValue(startValue)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramBinOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramBinOptionsProperty,
    ) : CdkObject(cdkObject), HistogramBinOptionsProperty {
      override fun binCount(): Any? = unwrap(this).getBinCount()

      override fun binWidth(): Any? = unwrap(this).getBinWidth()

      override fun selectedBinType(): String? = unwrap(this).getSelectedBinType()

      override fun startValue(): Number? = unwrap(this).getStartValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): HistogramBinOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramBinOptionsProperty):
          HistogramBinOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HistogramBinOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramBinOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramBinOptionsProperty
    }
  }

  public interface StringValueWhenUnsetConfigurationProperty {
    public fun customValue(): String? = unwrap(this).getCustomValue()

    public fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()

    @CdkDslMarker
    public interface Builder {
      public fun customValue(customValue: String)

      public fun valueWhenUnsetOption(valueWhenUnsetOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringValueWhenUnsetConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringValueWhenUnsetConfigurationProperty.builder()

      override fun customValue(customValue: String) {
        cdkBuilder.customValue(customValue)
      }

      override fun valueWhenUnsetOption(valueWhenUnsetOption: String) {
        cdkBuilder.valueWhenUnsetOption(valueWhenUnsetOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringValueWhenUnsetConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringValueWhenUnsetConfigurationProperty,
    ) : CdkObject(cdkObject), StringValueWhenUnsetConfigurationProperty {
      override fun customValue(): String? = unwrap(this).getCustomValue()

      override fun valueWhenUnsetOption(): String? = unwrap(this).getValueWhenUnsetOption()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          StringValueWhenUnsetConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.StringValueWhenUnsetConfigurationProperty):
          StringValueWhenUnsetConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: StringValueWhenUnsetConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringValueWhenUnsetConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringValueWhenUnsetConfigurationProperty
    }
  }

  public interface CustomParameterValuesProperty {
    public fun dateTimeValues(): List<String> = unwrap(this).getDateTimeValues() ?: emptyList()

    public fun decimalValues(): Any? = unwrap(this).getDecimalValues()

    public fun integerValues(): Any? = unwrap(this).getIntegerValues()

    public fun stringValues(): List<String> = unwrap(this).getStringValues() ?: emptyList()

    @CdkDslMarker
    public interface Builder {
      public fun dateTimeValues(dateTimeValues: List<String>)

      public fun dateTimeValues(vararg dateTimeValues: String)

      public fun decimalValues(decimalValues: IResolvable)

      public fun decimalValues(decimalValues: List<Number>)

      public fun decimalValues(vararg decimalValues: Number)

      public fun integerValues(integerValues: IResolvable)

      public fun integerValues(integerValues: List<Number>)

      public fun integerValues(vararg integerValues: Number)

      public fun stringValues(stringValues: List<String>)

      public fun stringValues(vararg stringValues: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomParameterValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomParameterValuesProperty.builder()

      override fun dateTimeValues(dateTimeValues: List<String>) {
        cdkBuilder.dateTimeValues(dateTimeValues)
      }

      override fun dateTimeValues(vararg dateTimeValues: String): Unit =
          dateTimeValues(dateTimeValues.toList())

      override fun decimalValues(decimalValues: IResolvable) {
        cdkBuilder.decimalValues(decimalValues.let(IResolvable::unwrap))
      }

      override fun decimalValues(decimalValues: List<Number>) {
        cdkBuilder.decimalValues(decimalValues)
      }

      override fun decimalValues(vararg decimalValues: Number): Unit =
          decimalValues(decimalValues.toList())

      override fun integerValues(integerValues: IResolvable) {
        cdkBuilder.integerValues(integerValues.let(IResolvable::unwrap))
      }

      override fun integerValues(integerValues: List<Number>) {
        cdkBuilder.integerValues(integerValues)
      }

      override fun integerValues(vararg integerValues: Number): Unit =
          integerValues(integerValues.toList())

      override fun stringValues(stringValues: List<String>) {
        cdkBuilder.stringValues(stringValues)
      }

      override fun stringValues(vararg stringValues: String): Unit =
          stringValues(stringValues.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomParameterValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomParameterValuesProperty,
    ) : CdkObject(cdkObject), CustomParameterValuesProperty {
      override fun dateTimeValues(): List<String> = unwrap(this).getDateTimeValues() ?: emptyList()

      override fun decimalValues(): Any? = unwrap(this).getDecimalValues()

      override fun integerValues(): Any? = unwrap(this).getIntegerValues()

      override fun stringValues(): List<String> = unwrap(this).getStringValues() ?: emptyList()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): CustomParameterValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CustomParameterValuesProperty):
          CustomParameterValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomParameterValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomParameterValuesProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomParameterValuesProperty
    }
  }

  public interface SectionBasedLayoutPaperCanvasSizeOptionsProperty {
    public fun paperMargin(): Any? = unwrap(this).getPaperMargin()

    public fun paperOrientation(): String? = unwrap(this).getPaperOrientation()

    public fun paperSize(): String? = unwrap(this).getPaperSize()

    @CdkDslMarker
    public interface Builder {
      public fun paperMargin(paperMargin: IResolvable)

      public fun paperMargin(paperMargin: SpacingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9fe81d7c15c989ca1595d679bb0bd176d881fc759251646aed6278f6bc9d4d2a")
      public fun paperMargin(paperMargin: SpacingProperty.Builder.() -> Unit)

      public fun paperOrientation(paperOrientation: String)

      public fun paperSize(paperSize: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutPaperCanvasSizeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutPaperCanvasSizeOptionsProperty.builder()

      override fun paperMargin(paperMargin: IResolvable) {
        cdkBuilder.paperMargin(paperMargin.let(IResolvable::unwrap))
      }

      override fun paperMargin(paperMargin: SpacingProperty) {
        cdkBuilder.paperMargin(paperMargin.let(SpacingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9fe81d7c15c989ca1595d679bb0bd176d881fc759251646aed6278f6bc9d4d2a")
      override fun paperMargin(paperMargin: SpacingProperty.Builder.() -> Unit): Unit =
          paperMargin(SpacingProperty(paperMargin))

      override fun paperOrientation(paperOrientation: String) {
        cdkBuilder.paperOrientation(paperOrientation)
      }

      override fun paperSize(paperSize: String) {
        cdkBuilder.paperSize(paperSize)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutPaperCanvasSizeOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutPaperCanvasSizeOptionsProperty,
    ) : CdkObject(cdkObject), SectionBasedLayoutPaperCanvasSizeOptionsProperty {
      override fun paperMargin(): Any? = unwrap(this).getPaperMargin()

      override fun paperOrientation(): String? = unwrap(this).getPaperOrientation()

      override fun paperSize(): String? = unwrap(this).getPaperSize()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SectionBasedLayoutPaperCanvasSizeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutPaperCanvasSizeOptionsProperty):
          SectionBasedLayoutPaperCanvasSizeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionBasedLayoutPaperCanvasSizeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutPaperCanvasSizeOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutPaperCanvasSizeOptionsProperty
    }
  }

  public interface FilterListConfigurationProperty {
    public fun categoryValues(): List<String> = unwrap(this).getCategoryValues() ?: emptyList()

    public fun matchOperator(): String

    public fun nullOption(): String? = unwrap(this).getNullOption()

    public fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()

    @CdkDslMarker
    public interface Builder {
      public fun categoryValues(categoryValues: List<String>)

      public fun categoryValues(vararg categoryValues: String)

      public fun matchOperator(matchOperator: String)

      public fun nullOption(nullOption: String)

      public fun selectAllOptions(selectAllOptions: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListConfigurationProperty.builder()

      override fun categoryValues(categoryValues: List<String>) {
        cdkBuilder.categoryValues(categoryValues)
      }

      override fun categoryValues(vararg categoryValues: String): Unit =
          categoryValues(categoryValues.toList())

      override fun matchOperator(matchOperator: String) {
        cdkBuilder.matchOperator(matchOperator)
      }

      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      override fun selectAllOptions(selectAllOptions: String) {
        cdkBuilder.selectAllOptions(selectAllOptions)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListConfigurationProperty,
    ) : CdkObject(cdkObject), FilterListConfigurationProperty {
      override fun categoryValues(): List<String> = unwrap(this).getCategoryValues() ?: emptyList()

      override fun matchOperator(): String = unwrap(this).getMatchOperator()

      override fun nullOption(): String? = unwrap(this).getNullOption()

      override fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilterListConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListConfigurationProperty):
          FilterListConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterListConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListConfigurationProperty
    }
  }

  public interface TotalOptionsProperty {
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    public fun placement(): String? = unwrap(this).getPlacement()

    public fun scrollStatus(): String? = unwrap(this).getScrollStatus()

    public fun totalAggregationOptions(): Any? = unwrap(this).getTotalAggregationOptions()

    public fun totalCellStyle(): Any? = unwrap(this).getTotalCellStyle()

    public fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun customLabel(customLabel: String)

      public fun placement(placement: String)

      public fun scrollStatus(scrollStatus: String)

      public fun totalAggregationOptions(totalAggregationOptions: IResolvable)

      public fun totalAggregationOptions(totalAggregationOptions: List<Any>)

      public fun totalAggregationOptions(vararg totalAggregationOptions: Any)

      public fun totalCellStyle(totalCellStyle: IResolvable)

      public fun totalCellStyle(totalCellStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2f98c5b8a50707d3afb723a4c9047058f36974be600f7d6bcffe7cc97a981be8")
      public fun totalCellStyle(totalCellStyle: TableCellStyleProperty.Builder.() -> Unit)

      public fun totalsVisibility(totalsVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalOptionsProperty.builder()

      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      override fun placement(placement: String) {
        cdkBuilder.placement(placement)
      }

      override fun scrollStatus(scrollStatus: String) {
        cdkBuilder.scrollStatus(scrollStatus)
      }

      override fun totalAggregationOptions(totalAggregationOptions: IResolvable) {
        cdkBuilder.totalAggregationOptions(totalAggregationOptions.let(IResolvable::unwrap))
      }

      override fun totalAggregationOptions(totalAggregationOptions: List<Any>) {
        cdkBuilder.totalAggregationOptions(totalAggregationOptions)
      }

      override fun totalAggregationOptions(vararg totalAggregationOptions: Any): Unit =
          totalAggregationOptions(totalAggregationOptions.toList())

      override fun totalCellStyle(totalCellStyle: IResolvable) {
        cdkBuilder.totalCellStyle(totalCellStyle.let(IResolvable::unwrap))
      }

      override fun totalCellStyle(totalCellStyle: TableCellStyleProperty) {
        cdkBuilder.totalCellStyle(totalCellStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2f98c5b8a50707d3afb723a4c9047058f36974be600f7d6bcffe7cc97a981be8")
      override fun totalCellStyle(totalCellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          totalCellStyle(TableCellStyleProperty(totalCellStyle))

      override fun totalsVisibility(totalsVisibility: String) {
        cdkBuilder.totalsVisibility(totalsVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalOptionsProperty,
    ) : CdkObject(cdkObject), TotalOptionsProperty {
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      override fun placement(): String? = unwrap(this).getPlacement()

      override fun scrollStatus(): String? = unwrap(this).getScrollStatus()

      override fun totalAggregationOptions(): Any? = unwrap(this).getTotalAggregationOptions()

      override fun totalCellStyle(): Any? = unwrap(this).getTotalCellStyle()

      override fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TotalOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TotalOptionsProperty):
          TotalOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TotalOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalOptionsProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalOptionsProperty
    }
  }

  public interface TemplateErrorProperty {
    public fun message(): String? = unwrap(this).getMessage()

    public fun type(): String? = unwrap(this).getType()

    public fun violatedEntities(): Any? = unwrap(this).getViolatedEntities()

    @CdkDslMarker
    public interface Builder {
      public fun message(message: String)

      public fun type(type: String)

      public fun violatedEntities(violatedEntities: IResolvable)

      public fun violatedEntities(violatedEntities: List<Any>)

      public fun violatedEntities(vararg violatedEntities: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateErrorProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateErrorProperty.builder()

      override fun message(message: String) {
        cdkBuilder.message(message)
      }

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      override fun violatedEntities(violatedEntities: IResolvable) {
        cdkBuilder.violatedEntities(violatedEntities.let(IResolvable::unwrap))
      }

      override fun violatedEntities(violatedEntities: List<Any>) {
        cdkBuilder.violatedEntities(violatedEntities)
      }

      override fun violatedEntities(vararg violatedEntities: Any): Unit =
          violatedEntities(violatedEntities.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateErrorProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateErrorProperty,
    ) : CdkObject(cdkObject), TemplateErrorProperty {
      override fun message(): String? = unwrap(this).getMessage()

      override fun type(): String? = unwrap(this).getType()

      override fun violatedEntities(): Any? = unwrap(this).getViolatedEntities()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TemplateErrorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateErrorProperty):
          TemplateErrorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TemplateErrorProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateErrorProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateErrorProperty
    }
  }

  public interface ValidationStrategyProperty {
    public fun mode(): String

    @CdkDslMarker
    public interface Builder {
      public fun mode(mode: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ValidationStrategyProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ValidationStrategyProperty.builder()

      override fun mode(mode: String) {
        cdkBuilder.mode(mode)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ValidationStrategyProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ValidationStrategyProperty,
    ) : CdkObject(cdkObject), ValidationStrategyProperty {
      override fun mode(): String = unwrap(this).getMode()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ValidationStrategyProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ValidationStrategyProperty):
          ValidationStrategyProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ValidationStrategyProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ValidationStrategyProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ValidationStrategyProperty
    }
  }

  public interface VisualCustomActionOperationProperty {
    public fun filterOperation(): Any? = unwrap(this).getFilterOperation()

    public fun navigationOperation(): Any? = unwrap(this).getNavigationOperation()

    public fun setParametersOperation(): Any? = unwrap(this).getSetParametersOperation()

    public fun urlOperation(): Any? = unwrap(this).getUrlOperation()

    @CdkDslMarker
    public interface Builder {
      public fun filterOperation(filterOperation: IResolvable)

      public fun filterOperation(filterOperation: CustomActionFilterOperationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7a24a7711befb35f994a14bda8e21003ba90a325f6cadf18440b06c6fb6fe408")
      public
          fun filterOperation(filterOperation: CustomActionFilterOperationProperty.Builder.() -> Unit)

      public fun navigationOperation(navigationOperation: IResolvable)

      public fun navigationOperation(navigationOperation: CustomActionNavigationOperationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5a650b558de8fc730720a1c7b05ae0c18049d09a9036e36c865056c813ecd5ff")
      public
          fun navigationOperation(navigationOperation: CustomActionNavigationOperationProperty.Builder.() -> Unit)

      public fun parametersOperation(setParametersOperation: IResolvable)

      public
          fun parametersOperation(setParametersOperation: CustomActionSetParametersOperationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("951c27ba366ce802aa822087dc94d7f61b856814d1fae70f87aacf76b727f454")
      public
          fun parametersOperation(setParametersOperation: CustomActionSetParametersOperationProperty.Builder.() -> Unit)

      public fun urlOperation(urlOperation: IResolvable)

      public fun urlOperation(urlOperation: CustomActionURLOperationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d985e3ba121a7c81f8015bb82767d430511afee9f69c72d01db34adf95461484")
      public fun urlOperation(urlOperation: CustomActionURLOperationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionOperationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionOperationProperty.builder()

      override fun filterOperation(filterOperation: IResolvable) {
        cdkBuilder.filterOperation(filterOperation.let(IResolvable::unwrap))
      }

      override fun filterOperation(filterOperation: CustomActionFilterOperationProperty) {
        cdkBuilder.filterOperation(filterOperation.let(CustomActionFilterOperationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7a24a7711befb35f994a14bda8e21003ba90a325f6cadf18440b06c6fb6fe408")
      override
          fun filterOperation(filterOperation: CustomActionFilterOperationProperty.Builder.() -> Unit):
          Unit = filterOperation(CustomActionFilterOperationProperty(filterOperation))

      override fun navigationOperation(navigationOperation: IResolvable) {
        cdkBuilder.navigationOperation(navigationOperation.let(IResolvable::unwrap))
      }

      override
          fun navigationOperation(navigationOperation: CustomActionNavigationOperationProperty) {
        cdkBuilder.navigationOperation(navigationOperation.let(CustomActionNavigationOperationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5a650b558de8fc730720a1c7b05ae0c18049d09a9036e36c865056c813ecd5ff")
      override
          fun navigationOperation(navigationOperation: CustomActionNavigationOperationProperty.Builder.() -> Unit):
          Unit = navigationOperation(CustomActionNavigationOperationProperty(navigationOperation))

      override fun parametersOperation(setParametersOperation: IResolvable) {
        cdkBuilder.setParametersOperation(setParametersOperation.let(IResolvable::unwrap))
      }

      override
          fun parametersOperation(setParametersOperation: CustomActionSetParametersOperationProperty) {
        cdkBuilder.setParametersOperation(setParametersOperation.let(CustomActionSetParametersOperationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("951c27ba366ce802aa822087dc94d7f61b856814d1fae70f87aacf76b727f454")
      override
          fun parametersOperation(setParametersOperation: CustomActionSetParametersOperationProperty.Builder.() -> Unit):
          Unit =
          parametersOperation(CustomActionSetParametersOperationProperty(setParametersOperation))

      override fun urlOperation(urlOperation: IResolvable) {
        cdkBuilder.urlOperation(urlOperation.let(IResolvable::unwrap))
      }

      override fun urlOperation(urlOperation: CustomActionURLOperationProperty) {
        cdkBuilder.urlOperation(urlOperation.let(CustomActionURLOperationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d985e3ba121a7c81f8015bb82767d430511afee9f69c72d01db34adf95461484")
      override fun urlOperation(urlOperation: CustomActionURLOperationProperty.Builder.() -> Unit):
          Unit = urlOperation(CustomActionURLOperationProperty(urlOperation))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionOperationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionOperationProperty,
    ) : CdkObject(cdkObject), VisualCustomActionOperationProperty {
      override fun filterOperation(): Any? = unwrap(this).getFilterOperation()

      override fun navigationOperation(): Any? = unwrap(this).getNavigationOperation()

      override fun setParametersOperation(): Any? = unwrap(this).getSetParametersOperation()

      override fun urlOperation(): Any? = unwrap(this).getUrlOperation()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          VisualCustomActionOperationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionOperationProperty):
          VisualCustomActionOperationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisualCustomActionOperationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionOperationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualCustomActionOperationProperty
    }
  }

  public interface DefaultGridLayoutConfigurationProperty {
    public fun canvasSizeOptions(): Any

    @CdkDslMarker
    public interface Builder {
      public fun canvasSizeOptions(canvasSizeOptions: IResolvable)

      public fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf1a6e2cf18e4e6ae62b2c2b72326f0e444b861e42b90ed870696e5d0de8a99a")
      public
          fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultGridLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultGridLayoutConfigurationProperty.builder()

      override fun canvasSizeOptions(canvasSizeOptions: IResolvable) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(IResolvable::unwrap))
      }

      override fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(GridLayoutCanvasSizeOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bf1a6e2cf18e4e6ae62b2c2b72326f0e444b861e42b90ed870696e5d0de8a99a")
      override
          fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit = canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty(canvasSizeOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultGridLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultGridLayoutConfigurationProperty,
    ) : CdkObject(cdkObject), DefaultGridLayoutConfigurationProperty {
      override fun canvasSizeOptions(): Any = unwrap(this).getCanvasSizeOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DefaultGridLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultGridLayoutConfigurationProperty):
          DefaultGridLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DefaultGridLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultGridLayoutConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultGridLayoutConfigurationProperty
    }
  }

  public interface FieldTooltipItemProperty {
    public fun fieldId(): String

    public fun label(): String? = unwrap(this).getLabel()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun fieldId(fieldId: String)

      public fun label(label: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldTooltipItemProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldTooltipItemProperty.builder()

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun label(label: String) {
        cdkBuilder.label(label)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldTooltipItemProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldTooltipItemProperty,
    ) : CdkObject(cdkObject), FieldTooltipItemProperty {
      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun label(): String? = unwrap(this).getLabel()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FieldTooltipItemProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FieldTooltipItemProperty):
          FieldTooltipItemProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FieldTooltipItemProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldTooltipItemProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldTooltipItemProperty
    }
  }

  public interface ForecastScenarioProperty {
    public fun whatIfPointScenario(): Any? = unwrap(this).getWhatIfPointScenario()

    public fun whatIfRangeScenario(): Any? = unwrap(this).getWhatIfRangeScenario()

    @CdkDslMarker
    public interface Builder {
      public fun whatIfPointScenario(whatIfPointScenario: IResolvable)

      public fun whatIfPointScenario(whatIfPointScenario: WhatIfPointScenarioProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("45846652ee7145f4e6f8a1c4e820e61e7417d3cc2e73d603268a758616236ed2")
      public
          fun whatIfPointScenario(whatIfPointScenario: WhatIfPointScenarioProperty.Builder.() -> Unit)

      public fun whatIfRangeScenario(whatIfRangeScenario: IResolvable)

      public fun whatIfRangeScenario(whatIfRangeScenario: WhatIfRangeScenarioProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8c9eb18181b0e2ba27834db30dffdc9a1206eaafcf5fcafed9a9c25d66c9618d")
      public
          fun whatIfRangeScenario(whatIfRangeScenario: WhatIfRangeScenarioProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastScenarioProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastScenarioProperty.builder()

      override fun whatIfPointScenario(whatIfPointScenario: IResolvable) {
        cdkBuilder.whatIfPointScenario(whatIfPointScenario.let(IResolvable::unwrap))
      }

      override fun whatIfPointScenario(whatIfPointScenario: WhatIfPointScenarioProperty) {
        cdkBuilder.whatIfPointScenario(whatIfPointScenario.let(WhatIfPointScenarioProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("45846652ee7145f4e6f8a1c4e820e61e7417d3cc2e73d603268a758616236ed2")
      override
          fun whatIfPointScenario(whatIfPointScenario: WhatIfPointScenarioProperty.Builder.() -> Unit):
          Unit = whatIfPointScenario(WhatIfPointScenarioProperty(whatIfPointScenario))

      override fun whatIfRangeScenario(whatIfRangeScenario: IResolvable) {
        cdkBuilder.whatIfRangeScenario(whatIfRangeScenario.let(IResolvable::unwrap))
      }

      override fun whatIfRangeScenario(whatIfRangeScenario: WhatIfRangeScenarioProperty) {
        cdkBuilder.whatIfRangeScenario(whatIfRangeScenario.let(WhatIfRangeScenarioProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8c9eb18181b0e2ba27834db30dffdc9a1206eaafcf5fcafed9a9c25d66c9618d")
      override
          fun whatIfRangeScenario(whatIfRangeScenario: WhatIfRangeScenarioProperty.Builder.() -> Unit):
          Unit = whatIfRangeScenario(WhatIfRangeScenarioProperty(whatIfRangeScenario))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastScenarioProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastScenarioProperty,
    ) : CdkObject(cdkObject), ForecastScenarioProperty {
      override fun whatIfPointScenario(): Any? = unwrap(this).getWhatIfPointScenario()

      override fun whatIfRangeScenario(): Any? = unwrap(this).getWhatIfRangeScenario()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ForecastScenarioProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastScenarioProperty):
          ForecastScenarioProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ForecastScenarioProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastScenarioProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastScenarioProperty
    }
  }

  public interface ColumnGroupSchemaProperty {
    public fun columnGroupColumnSchemaList(): Any? = unwrap(this).getColumnGroupColumnSchemaList()

    public fun name(): String? = unwrap(this).getName()

    @CdkDslMarker
    public interface Builder {
      public fun columnGroupColumnSchemaList(columnGroupColumnSchemaList: IResolvable)

      public fun columnGroupColumnSchemaList(columnGroupColumnSchemaList: List<Any>)

      public fun columnGroupColumnSchemaList(vararg columnGroupColumnSchemaList: Any)

      public fun name(name: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupSchemaProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupSchemaProperty.builder()

      override fun columnGroupColumnSchemaList(columnGroupColumnSchemaList: IResolvable) {
        cdkBuilder.columnGroupColumnSchemaList(columnGroupColumnSchemaList.let(IResolvable::unwrap))
      }

      override fun columnGroupColumnSchemaList(columnGroupColumnSchemaList: List<Any>) {
        cdkBuilder.columnGroupColumnSchemaList(columnGroupColumnSchemaList)
      }

      override fun columnGroupColumnSchemaList(vararg columnGroupColumnSchemaList: Any): Unit =
          columnGroupColumnSchemaList(columnGroupColumnSchemaList.toList())

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupSchemaProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupSchemaProperty,
    ) : CdkObject(cdkObject), ColumnGroupSchemaProperty {
      override fun columnGroupColumnSchemaList(): Any? =
          unwrap(this).getColumnGroupColumnSchemaList()

      override fun name(): String? = unwrap(this).getName()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnGroupSchemaProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupSchemaProperty):
          ColumnGroupSchemaProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnGroupSchemaProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupSchemaProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupSchemaProperty
    }
  }

  public interface FieldSeriesItemProperty {
    public fun axisBinding(): String

    public fun fieldId(): String

    public fun settings(): Any? = unwrap(this).getSettings()

    @CdkDslMarker
    public interface Builder {
      public fun axisBinding(axisBinding: String)

      public fun fieldId(fieldId: String)

      public fun tings(settings: IResolvable)

      public fun tings(settings: LineChartSeriesSettingsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e50838e96955e9b70226bf34b80d58e9f597713d2c6ffc33fc0ac9129175f790")
      public fun tings(settings: LineChartSeriesSettingsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSeriesItemProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSeriesItemProperty.builder()

      override fun axisBinding(axisBinding: String) {
        cdkBuilder.axisBinding(axisBinding)
      }

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun tings(settings: IResolvable) {
        cdkBuilder.settings(settings.let(IResolvable::unwrap))
      }

      override fun tings(settings: LineChartSeriesSettingsProperty) {
        cdkBuilder.settings(settings.let(LineChartSeriesSettingsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e50838e96955e9b70226bf34b80d58e9f597713d2c6ffc33fc0ac9129175f790")
      override fun tings(settings: LineChartSeriesSettingsProperty.Builder.() -> Unit): Unit =
          tings(LineChartSeriesSettingsProperty(settings))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSeriesItemProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSeriesItemProperty,
    ) : CdkObject(cdkObject), FieldSeriesItemProperty {
      override fun axisBinding(): String = unwrap(this).getAxisBinding()

      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun settings(): Any? = unwrap(this).getSettings()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FieldSeriesItemProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSeriesItemProperty):
          FieldSeriesItemProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FieldSeriesItemProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSeriesItemProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSeriesItemProperty
    }
  }

  public interface SankeyDiagramAggregatedFieldWellsProperty {
    public fun destination(): Any? = unwrap(this).getDestination()

    public fun source(): Any? = unwrap(this).getSource()

    public fun weight(): Any? = unwrap(this).getWeight()

    @CdkDslMarker
    public interface Builder {
      public fun destination(destination: IResolvable)

      public fun destination(destination: List<Any>)

      public fun destination(vararg destination: Any)

      public fun source(source: IResolvable)

      public fun source(source: List<Any>)

      public fun source(vararg source: Any)

      public fun weight(weight: IResolvable)

      public fun weight(weight: List<Any>)

      public fun weight(vararg weight: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramAggregatedFieldWellsProperty.builder()

      override fun destination(destination: IResolvable) {
        cdkBuilder.destination(destination.let(IResolvable::unwrap))
      }

      override fun destination(destination: List<Any>) {
        cdkBuilder.destination(destination)
      }

      override fun destination(vararg destination: Any): Unit = destination(destination.toList())

      override fun source(source: IResolvable) {
        cdkBuilder.source(source.let(IResolvable::unwrap))
      }

      override fun source(source: List<Any>) {
        cdkBuilder.source(source)
      }

      override fun source(vararg source: Any): Unit = source(source.toList())

      override fun weight(weight: IResolvable) {
        cdkBuilder.weight(weight.let(IResolvable::unwrap))
      }

      override fun weight(weight: List<Any>) {
        cdkBuilder.weight(weight)
      }

      override fun weight(vararg weight: Any): Unit = weight(weight.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), SankeyDiagramAggregatedFieldWellsProperty {
      override fun destination(): Any? = unwrap(this).getDestination()

      override fun source(): Any? = unwrap(this).getSource()

      override fun weight(): Any? = unwrap(this).getWeight()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SankeyDiagramAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramAggregatedFieldWellsProperty):
          SankeyDiagramAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SankeyDiagramAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramAggregatedFieldWellsProperty
    }
  }

  public interface TableFieldCustomTextContentProperty {
    public fun fontConfiguration(): Any

    public fun `value`(): String? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun fontConfiguration(fontConfiguration: IResolvable)

      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f2441da16d201d9d287e4e98a1a247ef2f23fd673fc7fdaaa88c5b2a32cad1eb")
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      public fun `value`(`value`: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomTextContentProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomTextContentProperty.builder()

      override fun fontConfiguration(fontConfiguration: IResolvable) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(IResolvable::unwrap))
      }

      override fun fontConfiguration(fontConfiguration: FontConfigurationProperty) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f2441da16d201d9d287e4e98a1a247ef2f23fd673fc7fdaaa88c5b2a32cad1eb")
      override
          fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = fontConfiguration(FontConfigurationProperty(fontConfiguration))

      override fun `value`(`value`: String) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomTextContentProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomTextContentProperty,
    ) : CdkObject(cdkObject), TableFieldCustomTextContentProperty {
      override fun fontConfiguration(): Any = unwrap(this).getFontConfiguration()

      override fun `value`(): String? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableFieldCustomTextContentProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomTextContentProperty):
          TableFieldCustomTextContentProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldCustomTextContentProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomTextContentProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomTextContentProperty
    }
  }

  public interface IntegerParameterDeclarationProperty {
    public fun defaultValues(): Any? = unwrap(this).getDefaultValues()

    public fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

    public fun name(): String

    public fun parameterValueType(): String

    public fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()

    @CdkDslMarker
    public interface Builder {
      public fun defaultValues(defaultValues: IResolvable)

      public fun defaultValues(defaultValues: IntegerDefaultValuesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("673e33095c33672c13f6b793ef8461131f578acff0fae1cabd2fc1e7d99a290d")
      public fun defaultValues(defaultValues: IntegerDefaultValuesProperty.Builder.() -> Unit)

      public fun mappedDataSetParameters(mappedDataSetParameters: IResolvable)

      public fun mappedDataSetParameters(mappedDataSetParameters: List<Any>)

      public fun mappedDataSetParameters(vararg mappedDataSetParameters: Any)

      public fun name(name: String)

      public fun parameterValueType(parameterValueType: String)

      public fun valueWhenUnset(valueWhenUnset: IResolvable)

      public fun valueWhenUnset(valueWhenUnset: IntegerValueWhenUnsetConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bdcfaebe91fc6fcc9eafd1c14e1b90a886f6c224ed5cb9358baca5becae1cbec")
      public
          fun valueWhenUnset(valueWhenUnset: IntegerValueWhenUnsetConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerParameterDeclarationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerParameterDeclarationProperty.builder()

      override fun defaultValues(defaultValues: IResolvable) {
        cdkBuilder.defaultValues(defaultValues.let(IResolvable::unwrap))
      }

      override fun defaultValues(defaultValues: IntegerDefaultValuesProperty) {
        cdkBuilder.defaultValues(defaultValues.let(IntegerDefaultValuesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("673e33095c33672c13f6b793ef8461131f578acff0fae1cabd2fc1e7d99a290d")
      override fun defaultValues(defaultValues: IntegerDefaultValuesProperty.Builder.() -> Unit):
          Unit = defaultValues(IntegerDefaultValuesProperty(defaultValues))

      override fun mappedDataSetParameters(mappedDataSetParameters: IResolvable) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters.let(IResolvable::unwrap))
      }

      override fun mappedDataSetParameters(mappedDataSetParameters: List<Any>) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters)
      }

      override fun mappedDataSetParameters(vararg mappedDataSetParameters: Any): Unit =
          mappedDataSetParameters(mappedDataSetParameters.toList())

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun parameterValueType(parameterValueType: String) {
        cdkBuilder.parameterValueType(parameterValueType)
      }

      override fun valueWhenUnset(valueWhenUnset: IResolvable) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(IResolvable::unwrap))
      }

      override fun valueWhenUnset(valueWhenUnset: IntegerValueWhenUnsetConfigurationProperty) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(IntegerValueWhenUnsetConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bdcfaebe91fc6fcc9eafd1c14e1b90a886f6c224ed5cb9358baca5becae1cbec")
      override
          fun valueWhenUnset(valueWhenUnset: IntegerValueWhenUnsetConfigurationProperty.Builder.() -> Unit):
          Unit = valueWhenUnset(IntegerValueWhenUnsetConfigurationProperty(valueWhenUnset))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerParameterDeclarationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerParameterDeclarationProperty,
    ) : CdkObject(cdkObject), IntegerParameterDeclarationProperty {
      override fun defaultValues(): Any? = unwrap(this).getDefaultValues()

      override fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

      override fun name(): String = unwrap(this).getName()

      override fun parameterValueType(): String = unwrap(this).getParameterValueType()

      override fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          IntegerParameterDeclarationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerParameterDeclarationProperty):
          IntegerParameterDeclarationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: IntegerParameterDeclarationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerParameterDeclarationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerParameterDeclarationProperty
    }
  }

  public interface AxisScaleProperty {
    public fun linear(): Any? = unwrap(this).getLinear()

    public fun logarithmic(): Any? = unwrap(this).getLogarithmic()

    @CdkDslMarker
    public interface Builder {
      public fun linear(linear: IResolvable)

      public fun linear(linear: AxisLinearScaleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1fdb62189ff639c8101341ae36b8e6ab0fd0a7a5bed7dbc005faced7e70101f4")
      public fun linear(linear: AxisLinearScaleProperty.Builder.() -> Unit)

      public fun logarithmic(logarithmic: IResolvable)

      public fun logarithmic(logarithmic: AxisLogarithmicScaleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3c1097f3e9245ec9d84a6e808a726801ca54422a056e06e37924ce33f6e26b0b")
      public fun logarithmic(logarithmic: AxisLogarithmicScaleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisScaleProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisScaleProperty.builder()

      override fun linear(linear: IResolvable) {
        cdkBuilder.linear(linear.let(IResolvable::unwrap))
      }

      override fun linear(linear: AxisLinearScaleProperty) {
        cdkBuilder.linear(linear.let(AxisLinearScaleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1fdb62189ff639c8101341ae36b8e6ab0fd0a7a5bed7dbc005faced7e70101f4")
      override fun linear(linear: AxisLinearScaleProperty.Builder.() -> Unit): Unit =
          linear(AxisLinearScaleProperty(linear))

      override fun logarithmic(logarithmic: IResolvable) {
        cdkBuilder.logarithmic(logarithmic.let(IResolvable::unwrap))
      }

      override fun logarithmic(logarithmic: AxisLogarithmicScaleProperty) {
        cdkBuilder.logarithmic(logarithmic.let(AxisLogarithmicScaleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3c1097f3e9245ec9d84a6e808a726801ca54422a056e06e37924ce33f6e26b0b")
      override fun logarithmic(logarithmic: AxisLogarithmicScaleProperty.Builder.() -> Unit): Unit =
          logarithmic(AxisLogarithmicScaleProperty(logarithmic))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.AxisScaleProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisScaleProperty,
    ) : CdkObject(cdkObject), AxisScaleProperty {
      override fun linear(): Any? = unwrap(this).getLinear()

      override fun logarithmic(): Any? = unwrap(this).getLogarithmic()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AxisScaleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AxisScaleProperty):
          AxisScaleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisScaleProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisScaleProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisScaleProperty
    }
  }

  public interface KPIActualValueConditionalFormattingProperty {
    public fun icon(): Any? = unwrap(this).getIcon()

    public fun textColor(): Any? = unwrap(this).getTextColor()

    @CdkDslMarker
    public interface Builder {
      public fun icon(icon: IResolvable)

      public fun icon(icon: ConditionalFormattingIconProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c0aabd7555d6c8bc30474dd50021c68d68181ca0fbf25c88a4c9b06a95058674")
      public fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit)

      public fun textColor(textColor: IResolvable)

      public fun textColor(textColor: ConditionalFormattingColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a5b73b1b0153d8c9dcd12e8108243924a08fe8e82b9c8bad4d5019a961322394")
      public fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIActualValueConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIActualValueConditionalFormattingProperty.builder()

      override fun icon(icon: IResolvable) {
        cdkBuilder.icon(icon.let(IResolvable::unwrap))
      }

      override fun icon(icon: ConditionalFormattingIconProperty) {
        cdkBuilder.icon(icon.let(ConditionalFormattingIconProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c0aabd7555d6c8bc30474dd50021c68d68181ca0fbf25c88a4c9b06a95058674")
      override fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit): Unit =
          icon(ConditionalFormattingIconProperty(icon))

      override fun textColor(textColor: IResolvable) {
        cdkBuilder.textColor(textColor.let(IResolvable::unwrap))
      }

      override fun textColor(textColor: ConditionalFormattingColorProperty) {
        cdkBuilder.textColor(textColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a5b73b1b0153d8c9dcd12e8108243924a08fe8e82b9c8bad4d5019a961322394")
      override fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit): Unit
          = textColor(ConditionalFormattingColorProperty(textColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIActualValueConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIActualValueConditionalFormattingProperty,
    ) : CdkObject(cdkObject), KPIActualValueConditionalFormattingProperty {
      override fun icon(): Any? = unwrap(this).getIcon()

      override fun textColor(): Any? = unwrap(this).getTextColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          KPIActualValueConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPIActualValueConditionalFormattingProperty):
          KPIActualValueConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIActualValueConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIActualValueConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIActualValueConditionalFormattingProperty
    }
  }

  public interface SheetVisualScopingConfigurationProperty {
    public fun scope(): String

    public fun sheetId(): String

    public fun visualIds(): List<String> = unwrap(this).getVisualIds() ?: emptyList()

    @CdkDslMarker
    public interface Builder {
      public fun scope(scope: String)

      public fun sheetId(sheetId: String)

      public fun visualIds(visualIds: List<String>)

      public fun visualIds(vararg visualIds: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetVisualScopingConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetVisualScopingConfigurationProperty.builder()

      override fun scope(scope: String) {
        cdkBuilder.scope(scope)
      }

      override fun sheetId(sheetId: String) {
        cdkBuilder.sheetId(sheetId)
      }

      override fun visualIds(visualIds: List<String>) {
        cdkBuilder.visualIds(visualIds)
      }

      override fun visualIds(vararg visualIds: String): Unit = visualIds(visualIds.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetVisualScopingConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetVisualScopingConfigurationProperty,
    ) : CdkObject(cdkObject), SheetVisualScopingConfigurationProperty {
      override fun scope(): String = unwrap(this).getScope()

      override fun sheetId(): String = unwrap(this).getSheetId()

      override fun visualIds(): List<String> = unwrap(this).getVisualIds() ?: emptyList()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SheetVisualScopingConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SheetVisualScopingConfigurationProperty):
          SheetVisualScopingConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetVisualScopingConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetVisualScopingConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetVisualScopingConfigurationProperty
    }
  }

  public interface ListControlDisplayOptionsProperty {
    public fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

    public fun searchOptions(): Any? = unwrap(this).getSearchOptions()

    public fun selectAllOptions(): Any? = unwrap(this).getSelectAllOptions()

    public fun titleOptions(): Any? = unwrap(this).getTitleOptions()

    @CdkDslMarker
    public interface Builder {
      public fun infoIconLabelOptions(infoIconLabelOptions: IResolvable)

      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4e2b155ec9e78d5ac5044be905fa26a3455ec080ac60af651887911b2f5176c2")
      public
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit)

      public fun searchOptions(searchOptions: IResolvable)

      public fun searchOptions(searchOptions: ListControlSearchOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cb62b6326eabeb3fb4e7398ff18e105b7c5aeebd552e212573ce2536b7262ab8")
      public fun searchOptions(searchOptions: ListControlSearchOptionsProperty.Builder.() -> Unit)

      public fun selectAllOptions(selectAllOptions: IResolvable)

      public fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3369018dc47520d10eabb0adf7894267ba7622f1e3bbfcd60cc2447ff81a46cf")
      public
          fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty.Builder.() -> Unit)

      public fun titleOptions(titleOptions: IResolvable)

      public fun titleOptions(titleOptions: LabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("428cdc7c28dc6ae394b9da67440d8416f5c8ecab20e9fcb989b259135fa7c79a")
      public fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlDisplayOptionsProperty.builder()

      override fun infoIconLabelOptions(infoIconLabelOptions: IResolvable) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty) {
        cdkBuilder.infoIconLabelOptions(infoIconLabelOptions.let(SheetControlInfoIconLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4e2b155ec9e78d5ac5044be905fa26a3455ec080ac60af651887911b2f5176c2")
      override
          fun infoIconLabelOptions(infoIconLabelOptions: SheetControlInfoIconLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          infoIconLabelOptions(SheetControlInfoIconLabelOptionsProperty(infoIconLabelOptions))

      override fun searchOptions(searchOptions: IResolvable) {
        cdkBuilder.searchOptions(searchOptions.let(IResolvable::unwrap))
      }

      override fun searchOptions(searchOptions: ListControlSearchOptionsProperty) {
        cdkBuilder.searchOptions(searchOptions.let(ListControlSearchOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cb62b6326eabeb3fb4e7398ff18e105b7c5aeebd552e212573ce2536b7262ab8")
      override
          fun searchOptions(searchOptions: ListControlSearchOptionsProperty.Builder.() -> Unit):
          Unit = searchOptions(ListControlSearchOptionsProperty(searchOptions))

      override fun selectAllOptions(selectAllOptions: IResolvable) {
        cdkBuilder.selectAllOptions(selectAllOptions.let(IResolvable::unwrap))
      }

      override fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty) {
        cdkBuilder.selectAllOptions(selectAllOptions.let(ListControlSelectAllOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3369018dc47520d10eabb0adf7894267ba7622f1e3bbfcd60cc2447ff81a46cf")
      override
          fun selectAllOptions(selectAllOptions: ListControlSelectAllOptionsProperty.Builder.() -> Unit):
          Unit = selectAllOptions(ListControlSelectAllOptionsProperty(selectAllOptions))

      override fun titleOptions(titleOptions: IResolvable) {
        cdkBuilder.titleOptions(titleOptions.let(IResolvable::unwrap))
      }

      override fun titleOptions(titleOptions: LabelOptionsProperty) {
        cdkBuilder.titleOptions(titleOptions.let(LabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("428cdc7c28dc6ae394b9da67440d8416f5c8ecab20e9fcb989b259135fa7c79a")
      override fun titleOptions(titleOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          titleOptions(LabelOptionsProperty(titleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlDisplayOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlDisplayOptionsProperty,
    ) : CdkObject(cdkObject), ListControlDisplayOptionsProperty {
      override fun infoIconLabelOptions(): Any? = unwrap(this).getInfoIconLabelOptions()

      override fun searchOptions(): Any? = unwrap(this).getSearchOptions()

      override fun selectAllOptions(): Any? = unwrap(this).getSelectAllOptions()

      override fun titleOptions(): Any? = unwrap(this).getTitleOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ListControlDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlDisplayOptionsProperty):
          ListControlDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ListControlDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlDisplayOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ListControlDisplayOptionsProperty
    }
  }

  public interface ConditionalFormattingColorProperty {
    public fun gradient(): Any? = unwrap(this).getGradient()

    public fun solid(): Any? = unwrap(this).getSolid()

    @CdkDslMarker
    public interface Builder {
      public fun gradient(gradient: IResolvable)

      public fun gradient(gradient: ConditionalFormattingGradientColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ea9e9125222a07234618429da9b2921f15e23d2ffb813601be20c3ae7478bf8")
      public fun gradient(gradient: ConditionalFormattingGradientColorProperty.Builder.() -> Unit)

      public fun solid(solid: IResolvable)

      public fun solid(solid: ConditionalFormattingSolidColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8c583cc70ae74c121be37f2b049f2d5d81f90972f39e8ad25aac3615c7f62f0d")
      public fun solid(solid: ConditionalFormattingSolidColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingColorProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingColorProperty.builder()

      override fun gradient(gradient: IResolvable) {
        cdkBuilder.gradient(gradient.let(IResolvable::unwrap))
      }

      override fun gradient(gradient: ConditionalFormattingGradientColorProperty) {
        cdkBuilder.gradient(gradient.let(ConditionalFormattingGradientColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ea9e9125222a07234618429da9b2921f15e23d2ffb813601be20c3ae7478bf8")
      override
          fun gradient(gradient: ConditionalFormattingGradientColorProperty.Builder.() -> Unit):
          Unit = gradient(ConditionalFormattingGradientColorProperty(gradient))

      override fun solid(solid: IResolvable) {
        cdkBuilder.solid(solid.let(IResolvable::unwrap))
      }

      override fun solid(solid: ConditionalFormattingSolidColorProperty) {
        cdkBuilder.solid(solid.let(ConditionalFormattingSolidColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8c583cc70ae74c121be37f2b049f2d5d81f90972f39e8ad25aac3615c7f62f0d")
      override fun solid(solid: ConditionalFormattingSolidColorProperty.Builder.() -> Unit): Unit =
          solid(ConditionalFormattingSolidColorProperty(solid))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingColorProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingColorProperty,
    ) : CdkObject(cdkObject), ConditionalFormattingColorProperty {
      override fun gradient(): Any? = unwrap(this).getGradient()

      override fun solid(): Any? = unwrap(this).getSolid()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingColorProperty):
          ConditionalFormattingColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingColorProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingColorProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingColorProperty
    }
  }

  public interface PanelConfigurationProperty {
    public fun backgroundColor(): String? = unwrap(this).getBackgroundColor()

    public fun backgroundVisibility(): String? = unwrap(this).getBackgroundVisibility()

    public fun borderColor(): String? = unwrap(this).getBorderColor()

    public fun borderStyle(): String? = unwrap(this).getBorderStyle()

    public fun borderThickness(): String? = unwrap(this).getBorderThickness()

    public fun borderVisibility(): String? = unwrap(this).getBorderVisibility()

    public fun gutterSpacing(): String? = unwrap(this).getGutterSpacing()

    public fun gutterVisibility(): String? = unwrap(this).getGutterVisibility()

    public fun title(): Any? = unwrap(this).getTitle()

    @CdkDslMarker
    public interface Builder {
      public fun backgroundColor(backgroundColor: String)

      public fun backgroundVisibility(backgroundVisibility: String)

      public fun borderColor(borderColor: String)

      public fun borderStyle(borderStyle: String)

      public fun borderThickness(borderThickness: String)

      public fun borderVisibility(borderVisibility: String)

      public fun gutterSpacing(gutterSpacing: String)

      public fun gutterVisibility(gutterVisibility: String)

      public fun title(title: IResolvable)

      public fun title(title: PanelTitleOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ee0d538d498c3ba08d4bb7e8419103e0c9b556582d50bae672bc9bcdafeaceb")
      public fun title(title: PanelTitleOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PanelConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PanelConfigurationProperty.builder()

      override fun backgroundColor(backgroundColor: String) {
        cdkBuilder.backgroundColor(backgroundColor)
      }

      override fun backgroundVisibility(backgroundVisibility: String) {
        cdkBuilder.backgroundVisibility(backgroundVisibility)
      }

      override fun borderColor(borderColor: String) {
        cdkBuilder.borderColor(borderColor)
      }

      override fun borderStyle(borderStyle: String) {
        cdkBuilder.borderStyle(borderStyle)
      }

      override fun borderThickness(borderThickness: String) {
        cdkBuilder.borderThickness(borderThickness)
      }

      override fun borderVisibility(borderVisibility: String) {
        cdkBuilder.borderVisibility(borderVisibility)
      }

      override fun gutterSpacing(gutterSpacing: String) {
        cdkBuilder.gutterSpacing(gutterSpacing)
      }

      override fun gutterVisibility(gutterVisibility: String) {
        cdkBuilder.gutterVisibility(gutterVisibility)
      }

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: PanelTitleOptionsProperty) {
        cdkBuilder.title(title.let(PanelTitleOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ee0d538d498c3ba08d4bb7e8419103e0c9b556582d50bae672bc9bcdafeaceb")
      override fun title(title: PanelTitleOptionsProperty.Builder.() -> Unit): Unit =
          title(PanelTitleOptionsProperty(title))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PanelConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PanelConfigurationProperty,
    ) : CdkObject(cdkObject), PanelConfigurationProperty {
      override fun backgroundColor(): String? = unwrap(this).getBackgroundColor()

      override fun backgroundVisibility(): String? = unwrap(this).getBackgroundVisibility()

      override fun borderColor(): String? = unwrap(this).getBorderColor()

      override fun borderStyle(): String? = unwrap(this).getBorderStyle()

      override fun borderThickness(): String? = unwrap(this).getBorderThickness()

      override fun borderVisibility(): String? = unwrap(this).getBorderVisibility()

      override fun gutterSpacing(): String? = unwrap(this).getGutterSpacing()

      override fun gutterVisibility(): String? = unwrap(this).getGutterVisibility()

      override fun title(): Any? = unwrap(this).getTitle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PanelConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PanelConfigurationProperty):
          PanelConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PanelConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PanelConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PanelConfigurationProperty
    }
  }

  public interface DataLabelTypeProperty {
    public fun dataPathLabelType(): Any? = unwrap(this).getDataPathLabelType()

    public fun fieldLabelType(): Any? = unwrap(this).getFieldLabelType()

    public fun maximumLabelType(): Any? = unwrap(this).getMaximumLabelType()

    public fun minimumLabelType(): Any? = unwrap(this).getMinimumLabelType()

    public fun rangeEndsLabelType(): Any? = unwrap(this).getRangeEndsLabelType()

    @CdkDslMarker
    public interface Builder {
      public fun dataPathLabelType(dataPathLabelType: IResolvable)

      public fun dataPathLabelType(dataPathLabelType: DataPathLabelTypeProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ddb7cee9cb38c0992d807ea604430b695013e6b837cecf2fcaeb1ada86fb7666")
      public fun dataPathLabelType(dataPathLabelType: DataPathLabelTypeProperty.Builder.() -> Unit)

      public fun fieldLabelType(fieldLabelType: IResolvable)

      public fun fieldLabelType(fieldLabelType: FieldLabelTypeProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2737ed9f14e30c503bc1862ab55f15dc3cb88c063e26ab9a2fba915d17ae5c7c")
      public fun fieldLabelType(fieldLabelType: FieldLabelTypeProperty.Builder.() -> Unit)

      public fun maximumLabelType(maximumLabelType: IResolvable)

      public fun maximumLabelType(maximumLabelType: MaximumLabelTypeProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("74c20614c520084c387907171de9048f10e49ac5248d56376a01e5e1676a100c")
      public fun maximumLabelType(maximumLabelType: MaximumLabelTypeProperty.Builder.() -> Unit)

      public fun minimumLabelType(minimumLabelType: IResolvable)

      public fun minimumLabelType(minimumLabelType: MinimumLabelTypeProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("35dd0f18a9ab8661eae4e8eb36130d8ac67c0f89cf63eb2806f2c310a5c2d07f")
      public fun minimumLabelType(minimumLabelType: MinimumLabelTypeProperty.Builder.() -> Unit)

      public fun rangeEndsLabelType(rangeEndsLabelType: IResolvable)

      public fun rangeEndsLabelType(rangeEndsLabelType: RangeEndsLabelTypeProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("366bbb628f56b80c537a8680609d63ed17285d15fe8e51d95feb7fdcd43b2f3f")
      public
          fun rangeEndsLabelType(rangeEndsLabelType: RangeEndsLabelTypeProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelTypeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelTypeProperty.builder()

      override fun dataPathLabelType(dataPathLabelType: IResolvable) {
        cdkBuilder.dataPathLabelType(dataPathLabelType.let(IResolvable::unwrap))
      }

      override fun dataPathLabelType(dataPathLabelType: DataPathLabelTypeProperty) {
        cdkBuilder.dataPathLabelType(dataPathLabelType.let(DataPathLabelTypeProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ddb7cee9cb38c0992d807ea604430b695013e6b837cecf2fcaeb1ada86fb7666")
      override
          fun dataPathLabelType(dataPathLabelType: DataPathLabelTypeProperty.Builder.() -> Unit):
          Unit = dataPathLabelType(DataPathLabelTypeProperty(dataPathLabelType))

      override fun fieldLabelType(fieldLabelType: IResolvable) {
        cdkBuilder.fieldLabelType(fieldLabelType.let(IResolvable::unwrap))
      }

      override fun fieldLabelType(fieldLabelType: FieldLabelTypeProperty) {
        cdkBuilder.fieldLabelType(fieldLabelType.let(FieldLabelTypeProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2737ed9f14e30c503bc1862ab55f15dc3cb88c063e26ab9a2fba915d17ae5c7c")
      override fun fieldLabelType(fieldLabelType: FieldLabelTypeProperty.Builder.() -> Unit): Unit =
          fieldLabelType(FieldLabelTypeProperty(fieldLabelType))

      override fun maximumLabelType(maximumLabelType: IResolvable) {
        cdkBuilder.maximumLabelType(maximumLabelType.let(IResolvable::unwrap))
      }

      override fun maximumLabelType(maximumLabelType: MaximumLabelTypeProperty) {
        cdkBuilder.maximumLabelType(maximumLabelType.let(MaximumLabelTypeProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("74c20614c520084c387907171de9048f10e49ac5248d56376a01e5e1676a100c")
      override fun maximumLabelType(maximumLabelType: MaximumLabelTypeProperty.Builder.() -> Unit):
          Unit = maximumLabelType(MaximumLabelTypeProperty(maximumLabelType))

      override fun minimumLabelType(minimumLabelType: IResolvable) {
        cdkBuilder.minimumLabelType(minimumLabelType.let(IResolvable::unwrap))
      }

      override fun minimumLabelType(minimumLabelType: MinimumLabelTypeProperty) {
        cdkBuilder.minimumLabelType(minimumLabelType.let(MinimumLabelTypeProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("35dd0f18a9ab8661eae4e8eb36130d8ac67c0f89cf63eb2806f2c310a5c2d07f")
      override fun minimumLabelType(minimumLabelType: MinimumLabelTypeProperty.Builder.() -> Unit):
          Unit = minimumLabelType(MinimumLabelTypeProperty(minimumLabelType))

      override fun rangeEndsLabelType(rangeEndsLabelType: IResolvable) {
        cdkBuilder.rangeEndsLabelType(rangeEndsLabelType.let(IResolvable::unwrap))
      }

      override fun rangeEndsLabelType(rangeEndsLabelType: RangeEndsLabelTypeProperty) {
        cdkBuilder.rangeEndsLabelType(rangeEndsLabelType.let(RangeEndsLabelTypeProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("366bbb628f56b80c537a8680609d63ed17285d15fe8e51d95feb7fdcd43b2f3f")
      override
          fun rangeEndsLabelType(rangeEndsLabelType: RangeEndsLabelTypeProperty.Builder.() -> Unit):
          Unit = rangeEndsLabelType(RangeEndsLabelTypeProperty(rangeEndsLabelType))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelTypeProperty,
    ) : CdkObject(cdkObject), DataLabelTypeProperty {
      override fun dataPathLabelType(): Any? = unwrap(this).getDataPathLabelType()

      override fun fieldLabelType(): Any? = unwrap(this).getFieldLabelType()

      override fun maximumLabelType(): Any? = unwrap(this).getMaximumLabelType()

      override fun minimumLabelType(): Any? = unwrap(this).getMinimumLabelType()

      override fun rangeEndsLabelType(): Any? = unwrap(this).getRangeEndsLabelType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataLabelTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelTypeProperty):
          DataLabelTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataLabelTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelTypeProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelTypeProperty
    }
  }

  public interface BarChartVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: BarChartConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e383b26eb05d877be55a2147847606b57b13be70929ae4c3cb02c7920e5223e7")
      public
          fun chartConfiguration(chartConfiguration: BarChartConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6a9e71828fa864df2fdd4721b2be72b09679997827f19d41f17b282b1e8c6f7d")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cc1a4cfb4723be1b7de34e3ea31920af66d57d1dd8767094b736c038aa32e1a9")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: BarChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(BarChartConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e383b26eb05d877be55a2147847606b57b13be70929ae4c3cb02c7920e5223e7")
      override
          fun chartConfiguration(chartConfiguration: BarChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(BarChartConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6a9e71828fa864df2fdd4721b2be72b09679997827f19d41f17b282b1e8c6f7d")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cc1a4cfb4723be1b7de34e3ea31920af66d57d1dd8767094b736c038aa32e1a9")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartVisualProperty,
    ) : CdkObject(cdkObject), BarChartVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): BarChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartVisualProperty):
          BarChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BarChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartVisualProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartVisualProperty
    }
  }

  public interface LongFormatTextProperty {
    public fun plainText(): String? = unwrap(this).getPlainText()

    public fun richText(): String? = unwrap(this).getRichText()

    @CdkDslMarker
    public interface Builder {
      public fun plainText(plainText: String)

      public fun richText(richText: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LongFormatTextProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LongFormatTextProperty.builder()

      override fun plainText(plainText: String) {
        cdkBuilder.plainText(plainText)
      }

      override fun richText(richText: String) {
        cdkBuilder.richText(richText)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LongFormatTextProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LongFormatTextProperty,
    ) : CdkObject(cdkObject), LongFormatTextProperty {
      override fun plainText(): String? = unwrap(this).getPlainText()

      override fun richText(): String? = unwrap(this).getRichText()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): LongFormatTextProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LongFormatTextProperty):
          LongFormatTextProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LongFormatTextProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LongFormatTextProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LongFormatTextProperty
    }
  }

  public interface EmptyVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun dataSetIdentifier(): String

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun dataSetIdentifier(dataSetIdentifier: String)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.EmptyVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.EmptyVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.EmptyVisualProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.EmptyVisualProperty,
    ) : CdkObject(cdkObject), EmptyVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun dataSetIdentifier(): String = unwrap(this).getDataSetIdentifier()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): EmptyVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.EmptyVisualProperty):
          EmptyVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: EmptyVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.EmptyVisualProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.EmptyVisualProperty
    }
  }

  public interface ShapeConditionalFormatProperty {
    public fun backgroundColor(): Any

    @CdkDslMarker
    public interface Builder {
      public fun backgroundColor(backgroundColor: IResolvable)

      public fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ba1e0a0e5c3ee8ef97e216fdb6478b3712f816bd257d337c003c8c3d1ddfe81f")
      public
          fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ShapeConditionalFormatProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ShapeConditionalFormatProperty.builder()

      override fun backgroundColor(backgroundColor: IResolvable) {
        cdkBuilder.backgroundColor(backgroundColor.let(IResolvable::unwrap))
      }

      override fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty) {
        cdkBuilder.backgroundColor(backgroundColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ba1e0a0e5c3ee8ef97e216fdb6478b3712f816bd257d337c003c8c3d1ddfe81f")
      override
          fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit):
          Unit = backgroundColor(ConditionalFormattingColorProperty(backgroundColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ShapeConditionalFormatProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ShapeConditionalFormatProperty,
    ) : CdkObject(cdkObject), ShapeConditionalFormatProperty {
      override fun backgroundColor(): Any = unwrap(this).getBackgroundColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ShapeConditionalFormatProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ShapeConditionalFormatProperty):
          ShapeConditionalFormatProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ShapeConditionalFormatProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ShapeConditionalFormatProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ShapeConditionalFormatProperty
    }
  }

  public interface ClusterMarkerConfigurationProperty {
    public fun clusterMarker(): Any? = unwrap(this).getClusterMarker()

    @CdkDslMarker
    public interface Builder {
      public fun clusterMarker(clusterMarker: IResolvable)

      public fun clusterMarker(clusterMarker: ClusterMarkerProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("005cff2f079034ebc08bee23974123c14954484138589a87b3b7512370fa8dd6")
      public fun clusterMarker(clusterMarker: ClusterMarkerProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerConfigurationProperty.builder()

      override fun clusterMarker(clusterMarker: IResolvable) {
        cdkBuilder.clusterMarker(clusterMarker.let(IResolvable::unwrap))
      }

      override fun clusterMarker(clusterMarker: ClusterMarkerProperty) {
        cdkBuilder.clusterMarker(clusterMarker.let(ClusterMarkerProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("005cff2f079034ebc08bee23974123c14954484138589a87b3b7512370fa8dd6")
      override fun clusterMarker(clusterMarker: ClusterMarkerProperty.Builder.() -> Unit): Unit =
          clusterMarker(ClusterMarkerProperty(clusterMarker))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerConfigurationProperty,
    ) : CdkObject(cdkObject), ClusterMarkerConfigurationProperty {
      override fun clusterMarker(): Any? = unwrap(this).getClusterMarker()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ClusterMarkerConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerConfigurationProperty):
          ClusterMarkerConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ClusterMarkerConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ClusterMarkerConfigurationProperty
    }
  }

  public interface FilledMapConfigurationProperty {
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun legend(): Any? = unwrap(this).getLegend()

    public fun mapStyleOptions(): Any? = unwrap(this).getMapStyleOptions()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun tooltip(): Any? = unwrap(this).getTooltip()

    public fun windowOptions(): Any? = unwrap(this).getWindowOptions()

    @CdkDslMarker
    public interface Builder {
      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: FilledMapFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f4d794379783a07ebabd00ba19cf0bf8d5a601cec468ac2680cfb9701cc31a45")
      public fun fieldWells(fieldWells: FilledMapFieldWellsProperty.Builder.() -> Unit)

      public fun legend(legend: IResolvable)

      public fun legend(legend: LegendOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("56ec149b1afbe1991f99af34975f7539ffadbc2b548a8d59a28aae09b41be367")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      public fun mapStyleOptions(mapStyleOptions: IResolvable)

      public fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b70f19da1a96b69b2e213f84018cff4cfc87dd6e8a7e959306bae135f162c46d")
      public
          fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: FilledMapSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ac70b1f0333d4e8b67f7242d2046a30f4304a10571bc3c17eb7404a9298c4a80")
      public
          fun sortConfiguration(sortConfiguration: FilledMapSortConfigurationProperty.Builder.() -> Unit)

      public fun tooltip(tooltip: IResolvable)

      public fun tooltip(tooltip: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2542bba0b36e1001cd820191779a44c255a047d021437ed4b25e4107db28d917")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      public fun windowOptions(windowOptions: IResolvable)

      public fun windowOptions(windowOptions: GeospatialWindowOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("14bb5c3585b205a02bdf217c8d4df5a1c6113cbfc7281709a80e097e0cd86184")
      public fun windowOptions(windowOptions: GeospatialWindowOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConfigurationProperty.builder()

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: FilledMapFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(FilledMapFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f4d794379783a07ebabd00ba19cf0bf8d5a601cec468ac2680cfb9701cc31a45")
      override fun fieldWells(fieldWells: FilledMapFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(FilledMapFieldWellsProperty(fieldWells))

      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("56ec149b1afbe1991f99af34975f7539ffadbc2b548a8d59a28aae09b41be367")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      override fun mapStyleOptions(mapStyleOptions: IResolvable) {
        cdkBuilder.mapStyleOptions(mapStyleOptions.let(IResolvable::unwrap))
      }

      override fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty) {
        cdkBuilder.mapStyleOptions(mapStyleOptions.let(GeospatialMapStyleOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b70f19da1a96b69b2e213f84018cff4cfc87dd6e8a7e959306bae135f162c46d")
      override
          fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty.Builder.() -> Unit):
          Unit = mapStyleOptions(GeospatialMapStyleOptionsProperty(mapStyleOptions))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: FilledMapSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(FilledMapSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ac70b1f0333d4e8b67f7242d2046a30f4304a10571bc3c17eb7404a9298c4a80")
      override
          fun sortConfiguration(sortConfiguration: FilledMapSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(FilledMapSortConfigurationProperty(sortConfiguration))

      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2542bba0b36e1001cd820191779a44c255a047d021437ed4b25e4107db28d917")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      override fun windowOptions(windowOptions: IResolvable) {
        cdkBuilder.windowOptions(windowOptions.let(IResolvable::unwrap))
      }

      override fun windowOptions(windowOptions: GeospatialWindowOptionsProperty) {
        cdkBuilder.windowOptions(windowOptions.let(GeospatialWindowOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("14bb5c3585b205a02bdf217c8d4df5a1c6113cbfc7281709a80e097e0cd86184")
      override fun windowOptions(windowOptions: GeospatialWindowOptionsProperty.Builder.() -> Unit):
          Unit = windowOptions(GeospatialWindowOptionsProperty(windowOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConfigurationProperty,
    ) : CdkObject(cdkObject), FilledMapConfigurationProperty {
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun legend(): Any? = unwrap(this).getLegend()

      override fun mapStyleOptions(): Any? = unwrap(this).getMapStyleOptions()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun tooltip(): Any? = unwrap(this).getTooltip()

      override fun windowOptions(): Any? = unwrap(this).getWindowOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilledMapConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConfigurationProperty):
          FilledMapConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapConfigurationProperty
    }
  }

  public interface FilterOperationTargetVisualsConfigurationProperty {
    public fun sameSheetTargetVisualConfiguration(): Any? =
        unwrap(this).getSameSheetTargetVisualConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration: IResolvable)

      public
          fun sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration: SameSheetTargetVisualConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7d7bed0563b71c9d06cc6b5f802666f6d943abf1ab4b6f57df0c8bf5b307a113")
      public
          fun sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration: SameSheetTargetVisualConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationTargetVisualsConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationTargetVisualsConfigurationProperty.builder()

      override
          fun sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration: IResolvable) {
        cdkBuilder.sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration.let(IResolvable::unwrap))
      }

      override
          fun sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration: SameSheetTargetVisualConfigurationProperty) {
        cdkBuilder.sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration.let(SameSheetTargetVisualConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7d7bed0563b71c9d06cc6b5f802666f6d943abf1ab4b6f57df0c8bf5b307a113")
      override
          fun sameSheetTargetVisualConfiguration(sameSheetTargetVisualConfiguration: SameSheetTargetVisualConfigurationProperty.Builder.() -> Unit):
          Unit =
          sameSheetTargetVisualConfiguration(SameSheetTargetVisualConfigurationProperty(sameSheetTargetVisualConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationTargetVisualsConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationTargetVisualsConfigurationProperty,
    ) : CdkObject(cdkObject), FilterOperationTargetVisualsConfigurationProperty {
      override fun sameSheetTargetVisualConfiguration(): Any? =
          unwrap(this).getSameSheetTargetVisualConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilterOperationTargetVisualsConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationTargetVisualsConfigurationProperty):
          FilterOperationTargetVisualsConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterOperationTargetVisualsConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationTargetVisualsConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterOperationTargetVisualsConfigurationProperty
    }
  }

  public interface ItemsLimitConfigurationProperty {
    public fun itemsLimit(): Number? = unwrap(this).getItemsLimit()

    public fun otherCategories(): String? = unwrap(this).getOtherCategories()

    @CdkDslMarker
    public interface Builder {
      public fun itemsLimit(itemsLimit: Number)

      public fun otherCategories(otherCategories: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ItemsLimitConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ItemsLimitConfigurationProperty.builder()

      override fun itemsLimit(itemsLimit: Number) {
        cdkBuilder.itemsLimit(itemsLimit)
      }

      override fun otherCategories(otherCategories: String) {
        cdkBuilder.otherCategories(otherCategories)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ItemsLimitConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ItemsLimitConfigurationProperty,
    ) : CdkObject(cdkObject), ItemsLimitConfigurationProperty {
      override fun itemsLimit(): Number? = unwrap(this).getItemsLimit()

      override fun otherCategories(): String? = unwrap(this).getOtherCategories()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ItemsLimitConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ItemsLimitConfigurationProperty):
          ItemsLimitConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ItemsLimitConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ItemsLimitConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ItemsLimitConfigurationProperty
    }
  }

  public interface KPIVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: KPIConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d03d43f88c52917eb43e2e3883aedd5ee6e6258a7313ec3c717e14384a84c625")
      public fun chartConfiguration(chartConfiguration: KPIConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun conditionalFormatting(conditionalFormatting: IResolvable)

      public fun conditionalFormatting(conditionalFormatting: KPIConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("842eb605f8fcc07df55f0fc61ef0a16323a4340384c0d4b1c130aa62ea53ad53")
      public
          fun conditionalFormatting(conditionalFormatting: KPIConditionalFormattingProperty.Builder.() -> Unit)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("95a41fb09f24e00f8a0597df74400daf4865c7306804e69898bb68b3f47b8600")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a108e6558fab221e179df10ac7f16f0e3127e6e27a8cae5cef0e8d89d2a44c26")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: KPIConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(KPIConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d03d43f88c52917eb43e2e3883aedd5ee6e6258a7313ec3c717e14384a84c625")
      override
          fun chartConfiguration(chartConfiguration: KPIConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(KPIConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun conditionalFormatting(conditionalFormatting: IResolvable) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(IResolvable::unwrap))
      }

      override fun conditionalFormatting(conditionalFormatting: KPIConditionalFormattingProperty) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(KPIConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("842eb605f8fcc07df55f0fc61ef0a16323a4340384c0d4b1c130aa62ea53ad53")
      override
          fun conditionalFormatting(conditionalFormatting: KPIConditionalFormattingProperty.Builder.() -> Unit):
          Unit = conditionalFormatting(KPIConditionalFormattingProperty(conditionalFormatting))

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("95a41fb09f24e00f8a0597df74400daf4865c7306804e69898bb68b3f47b8600")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a108e6558fab221e179df10ac7f16f0e3127e6e27a8cae5cef0e8d89d2a44c26")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualProperty,
    ) : CdkObject(cdkObject), KPIVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): KPIVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualProperty):
          KPIVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualProperty
    }
  }

  public interface TableRowConditionalFormattingProperty {
    public fun backgroundColor(): Any? = unwrap(this).getBackgroundColor()

    public fun textColor(): Any? = unwrap(this).getTextColor()

    @CdkDslMarker
    public interface Builder {
      public fun backgroundColor(backgroundColor: IResolvable)

      public fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c5039edf72146a87aebf1d58e384b9f2406dee99438ac5e7bd98c23785f5fd89")
      public
          fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit)

      public fun textColor(textColor: IResolvable)

      public fun textColor(textColor: ConditionalFormattingColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8fc5640aa5cbb895bffb088b81e4338020b68c17791efe3ad85cb89129834695")
      public fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableRowConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableRowConditionalFormattingProperty.builder()

      override fun backgroundColor(backgroundColor: IResolvable) {
        cdkBuilder.backgroundColor(backgroundColor.let(IResolvable::unwrap))
      }

      override fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty) {
        cdkBuilder.backgroundColor(backgroundColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c5039edf72146a87aebf1d58e384b9f2406dee99438ac5e7bd98c23785f5fd89")
      override
          fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit):
          Unit = backgroundColor(ConditionalFormattingColorProperty(backgroundColor))

      override fun textColor(textColor: IResolvable) {
        cdkBuilder.textColor(textColor.let(IResolvable::unwrap))
      }

      override fun textColor(textColor: ConditionalFormattingColorProperty) {
        cdkBuilder.textColor(textColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8fc5640aa5cbb895bffb088b81e4338020b68c17791efe3ad85cb89129834695")
      override fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit): Unit
          = textColor(ConditionalFormattingColorProperty(textColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableRowConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableRowConditionalFormattingProperty,
    ) : CdkObject(cdkObject), TableRowConditionalFormattingProperty {
      override fun backgroundColor(): Any? = unwrap(this).getBackgroundColor()

      override fun textColor(): Any? = unwrap(this).getTextColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableRowConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableRowConditionalFormattingProperty):
          TableRowConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableRowConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableRowConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableRowConditionalFormattingProperty
    }
  }

  public interface SheetProperty {
    public fun name(): String? = unwrap(this).getName()

    public fun sheetId(): String? = unwrap(this).getSheetId()

    @CdkDslMarker
    public interface Builder {
      public fun name(name: String)

      public fun sheetId(sheetId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetProperty.builder()

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun sheetId(sheetId: String) {
        cdkBuilder.sheetId(sheetId)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.SheetProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SheetProperty,
    ) : CdkObject(cdkObject), SheetProperty {
      override fun name(): String? = unwrap(this).getName()

      override fun sheetId(): String? = unwrap(this).getSheetId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SheetProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SheetProperty):
          SheetProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetProperty
    }
  }

  public interface DateMeasureFieldProperty {
    public fun aggregationFunction(): String? = unwrap(this).getAggregationFunction()

    public fun column(): Any

    public fun fieldId(): String

    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun aggregationFunction(aggregationFunction: String)

      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0dc24eeb4e19641209b5c5aa640eb35e1b35c72d37a4496ea4f475eb554d48c1")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun fieldId(fieldId: String)

      public fun formatConfiguration(formatConfiguration: IResolvable)

      public fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8d4fe514f42e3a952469f9a2f50927a28ad41ec7561231c462ea26a1d93bdfe8")
      public
          fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateMeasureFieldProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateMeasureFieldProperty.builder()

      override fun aggregationFunction(aggregationFunction: String) {
        cdkBuilder.aggregationFunction(aggregationFunction)
      }

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0dc24eeb4e19641209b5c5aa640eb35e1b35c72d37a4496ea4f475eb554d48c1")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      override fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(DateTimeFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8d4fe514f42e3a952469f9a2f50927a28ad41ec7561231c462ea26a1d93bdfe8")
      override
          fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(DateTimeFormatConfigurationProperty(formatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateMeasureFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateMeasureFieldProperty,
    ) : CdkObject(cdkObject), DateMeasureFieldProperty {
      override fun aggregationFunction(): String? = unwrap(this).getAggregationFunction()

      override fun column(): Any = unwrap(this).getColumn()

      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DateMeasureFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DateMeasureFieldProperty):
          DateMeasureFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateMeasureFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateMeasureFieldProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateMeasureFieldProperty
    }
  }

  public interface BarChartConfigurationProperty {
    public fun barsArrangement(): String? = unwrap(this).getBarsArrangement()

    public fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    public fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

    public fun contributionAnalysisDefaults(): Any? = unwrap(this).getContributionAnalysisDefaults()

    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun legend(): Any? = unwrap(this).getLegend()

    public fun orientation(): String? = unwrap(this).getOrientation()

    public fun referenceLines(): Any? = unwrap(this).getReferenceLines()

    public fun smallMultiplesOptions(): Any? = unwrap(this).getSmallMultiplesOptions()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun tooltip(): Any? = unwrap(this).getTooltip()

    public fun valueAxis(): Any? = unwrap(this).getValueAxis()

    public fun valueLabelOptions(): Any? = unwrap(this).getValueLabelOptions()

    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    @CdkDslMarker
    public interface Builder {
      public fun barsArrangement(barsArrangement: String)

      public fun categoryAxis(categoryAxis: IResolvable)

      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9d9b69c47678e612a64cf5a19b00fd434c0ccd4529f2970c78f643a5cb7399c1")
      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ce92088db8cf5d9fa8cc4c7b219e805541abf6b58c68130e1e5b2d859490fe5b")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun colorLabelOptions(colorLabelOptions: IResolvable)

      public fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("13391911239b54f5dcecc2dfbdfb897dbf467dad4f6aa8c32b5b6269d1ff81da")
      public
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun contributionAnalysisDefaults(contributionAnalysisDefaults: IResolvable)

      public fun contributionAnalysisDefaults(contributionAnalysisDefaults: List<Any>)

      public fun contributionAnalysisDefaults(vararg contributionAnalysisDefaults: Any)

      public fun dataLabels(dataLabels: IResolvable)

      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bfbc79ccacaa35c5a7d4073852c30fa2e58c64d98f2d946f5c8f2125272a2385")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: BarChartFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("820772a29fec6092e4f7e6286f8755eddb90f3f45c8f07c10af3e16a31ede1ef")
      public fun fieldWells(fieldWells: BarChartFieldWellsProperty.Builder.() -> Unit)

      public fun legend(legend: IResolvable)

      public fun legend(legend: LegendOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6f89130480b6c3f7650ade755ea37757c5f076de6e741a04e03fd9573a74b174")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      public fun orientation(orientation: String)

      public fun referenceLines(referenceLines: IResolvable)

      public fun referenceLines(referenceLines: List<Any>)

      public fun referenceLines(vararg referenceLines: Any)

      public fun smallMultiplesOptions(smallMultiplesOptions: IResolvable)

      public fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0b97e5b971657924b42e06bf1df786498db6e838cf4a5e5a7c6bd31b6084e9e4")
      public
          fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: BarChartSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c6b2fd152ec26a34c207a26332881c11da0ca554dded89351fdee0fe17958b33")
      public
          fun sortConfiguration(sortConfiguration: BarChartSortConfigurationProperty.Builder.() -> Unit)

      public fun tooltip(tooltip: IResolvable)

      public fun tooltip(tooltip: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be9013976965e0b6d8e4fa57447be1636541af4b41818a0653f9a03fbb3f5a6a")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      public fun valueAxis(valueAxis: IResolvable)

      public fun valueAxis(valueAxis: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6d84497fa691bfec655dc1eeae3281674de017f5c72530a6363d99d8db73f725")
      public fun valueAxis(valueAxis: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun valueLabelOptions(valueLabelOptions: IResolvable)

      public fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("98555dfa03c436deb51d22c7063d485919b0bce47bd52e1072720d1165aa493a")
      public
          fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun visualPalette(visualPalette: IResolvable)

      public fun visualPalette(visualPalette: VisualPaletteProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be3381368e64d559af9f08c1454774636d09ffaae6490094330ff25c4e4bb022")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartConfigurationProperty.builder()

      override fun barsArrangement(barsArrangement: String) {
        cdkBuilder.barsArrangement(barsArrangement)
      }

      override fun categoryAxis(categoryAxis: IResolvable) {
        cdkBuilder.categoryAxis(categoryAxis.let(IResolvable::unwrap))
      }

      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty) {
        cdkBuilder.categoryAxis(categoryAxis.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9d9b69c47678e612a64cf5a19b00fd434c0ccd4529f2970c78f643a5cb7399c1")
      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          categoryAxis(AxisDisplayOptionsProperty(categoryAxis))

      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ce92088db8cf5d9fa8cc4c7b219e805541abf6b58c68130e1e5b2d859490fe5b")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      override fun colorLabelOptions(colorLabelOptions: IResolvable) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(IResolvable::unwrap))
      }

      override fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("13391911239b54f5dcecc2dfbdfb897dbf467dad4f6aa8c32b5b6269d1ff81da")
      override
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = colorLabelOptions(ChartAxisLabelOptionsProperty(colorLabelOptions))

      override fun contributionAnalysisDefaults(contributionAnalysisDefaults: IResolvable) {
        cdkBuilder.contributionAnalysisDefaults(contributionAnalysisDefaults.let(IResolvable::unwrap))
      }

      override fun contributionAnalysisDefaults(contributionAnalysisDefaults: List<Any>) {
        cdkBuilder.contributionAnalysisDefaults(contributionAnalysisDefaults)
      }

      override fun contributionAnalysisDefaults(vararg contributionAnalysisDefaults: Any): Unit =
          contributionAnalysisDefaults(contributionAnalysisDefaults.toList())

      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bfbc79ccacaa35c5a7d4073852c30fa2e58c64d98f2d946f5c8f2125272a2385")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: BarChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(BarChartFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("820772a29fec6092e4f7e6286f8755eddb90f3f45c8f07c10af3e16a31ede1ef")
      override fun fieldWells(fieldWells: BarChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(BarChartFieldWellsProperty(fieldWells))

      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6f89130480b6c3f7650ade755ea37757c5f076de6e741a04e03fd9573a74b174")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      override fun orientation(orientation: String) {
        cdkBuilder.orientation(orientation)
      }

      override fun referenceLines(referenceLines: IResolvable) {
        cdkBuilder.referenceLines(referenceLines.let(IResolvable::unwrap))
      }

      override fun referenceLines(referenceLines: List<Any>) {
        cdkBuilder.referenceLines(referenceLines)
      }

      override fun referenceLines(vararg referenceLines: Any): Unit =
          referenceLines(referenceLines.toList())

      override fun smallMultiplesOptions(smallMultiplesOptions: IResolvable) {
        cdkBuilder.smallMultiplesOptions(smallMultiplesOptions.let(IResolvable::unwrap))
      }

      override fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty) {
        cdkBuilder.smallMultiplesOptions(smallMultiplesOptions.let(SmallMultiplesOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0b97e5b971657924b42e06bf1df786498db6e838cf4a5e5a7c6bd31b6084e9e4")
      override
          fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty.Builder.() -> Unit):
          Unit = smallMultiplesOptions(SmallMultiplesOptionsProperty(smallMultiplesOptions))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: BarChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(BarChartSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c6b2fd152ec26a34c207a26332881c11da0ca554dded89351fdee0fe17958b33")
      override
          fun sortConfiguration(sortConfiguration: BarChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(BarChartSortConfigurationProperty(sortConfiguration))

      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be9013976965e0b6d8e4fa57447be1636541af4b41818a0653f9a03fbb3f5a6a")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      override fun valueAxis(valueAxis: IResolvable) {
        cdkBuilder.valueAxis(valueAxis.let(IResolvable::unwrap))
      }

      override fun valueAxis(valueAxis: AxisDisplayOptionsProperty) {
        cdkBuilder.valueAxis(valueAxis.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6d84497fa691bfec655dc1eeae3281674de017f5c72530a6363d99d8db73f725")
      override fun valueAxis(valueAxis: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          valueAxis(AxisDisplayOptionsProperty(valueAxis))

      override fun valueLabelOptions(valueLabelOptions: IResolvable) {
        cdkBuilder.valueLabelOptions(valueLabelOptions.let(IResolvable::unwrap))
      }

      override fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.valueLabelOptions(valueLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("98555dfa03c436deb51d22c7063d485919b0bce47bd52e1072720d1165aa493a")
      override
          fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = valueLabelOptions(ChartAxisLabelOptionsProperty(valueLabelOptions))

      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be3381368e64d559af9f08c1454774636d09ffaae6490094330ff25c4e4bb022")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartConfigurationProperty,
    ) : CdkObject(cdkObject), BarChartConfigurationProperty {
      override fun barsArrangement(): String? = unwrap(this).getBarsArrangement()

      override fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      override fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

      override fun contributionAnalysisDefaults(): Any? =
          unwrap(this).getContributionAnalysisDefaults()

      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun legend(): Any? = unwrap(this).getLegend()

      override fun orientation(): String? = unwrap(this).getOrientation()

      override fun referenceLines(): Any? = unwrap(this).getReferenceLines()

      override fun smallMultiplesOptions(): Any? = unwrap(this).getSmallMultiplesOptions()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun tooltip(): Any? = unwrap(this).getTooltip()

      override fun valueAxis(): Any? = unwrap(this).getValueAxis()

      override fun valueLabelOptions(): Any? = unwrap(this).getValueLabelOptions()

      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): BarChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartConfigurationProperty):
          BarChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BarChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartConfigurationProperty
    }
  }

  public interface ReferenceLineLabelConfigurationProperty {
    public fun customLabelConfiguration(): Any? = unwrap(this).getCustomLabelConfiguration()

    public fun fontColor(): String? = unwrap(this).getFontColor()

    public fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

    public fun horizontalPosition(): String? = unwrap(this).getHorizontalPosition()

    public fun valueLabelConfiguration(): Any? = unwrap(this).getValueLabelConfiguration()

    public fun verticalPosition(): String? = unwrap(this).getVerticalPosition()

    @CdkDslMarker
    public interface Builder {
      public fun customLabelConfiguration(customLabelConfiguration: IResolvable)

      public
          fun customLabelConfiguration(customLabelConfiguration: ReferenceLineCustomLabelConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3f25596f8069a59cf5c50500a502f0cc259893b3407455ad969275ab086f0cb1")
      public
          fun customLabelConfiguration(customLabelConfiguration: ReferenceLineCustomLabelConfigurationProperty.Builder.() -> Unit)

      public fun fontColor(fontColor: String)

      public fun fontConfiguration(fontConfiguration: IResolvable)

      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cd6178db81a6c8c5702d0139d3bb881aa825e4ef6b2baa9aa5603471ee2f821a")
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      public fun horizontalPosition(horizontalPosition: String)

      public fun valueLabelConfiguration(valueLabelConfiguration: IResolvable)

      public
          fun valueLabelConfiguration(valueLabelConfiguration: ReferenceLineValueLabelConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("193db95a07b4faaacf0e97fc65931ad119c3c9abfc7da3a4743bae30bcd615f8")
      public
          fun valueLabelConfiguration(valueLabelConfiguration: ReferenceLineValueLabelConfigurationProperty.Builder.() -> Unit)

      public fun verticalPosition(verticalPosition: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineLabelConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineLabelConfigurationProperty.builder()

      override fun customLabelConfiguration(customLabelConfiguration: IResolvable) {
        cdkBuilder.customLabelConfiguration(customLabelConfiguration.let(IResolvable::unwrap))
      }

      override
          fun customLabelConfiguration(customLabelConfiguration: ReferenceLineCustomLabelConfigurationProperty) {
        cdkBuilder.customLabelConfiguration(customLabelConfiguration.let(ReferenceLineCustomLabelConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3f25596f8069a59cf5c50500a502f0cc259893b3407455ad969275ab086f0cb1")
      override
          fun customLabelConfiguration(customLabelConfiguration: ReferenceLineCustomLabelConfigurationProperty.Builder.() -> Unit):
          Unit =
          customLabelConfiguration(ReferenceLineCustomLabelConfigurationProperty(customLabelConfiguration))

      override fun fontColor(fontColor: String) {
        cdkBuilder.fontColor(fontColor)
      }

      override fun fontConfiguration(fontConfiguration: IResolvable) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(IResolvable::unwrap))
      }

      override fun fontConfiguration(fontConfiguration: FontConfigurationProperty) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cd6178db81a6c8c5702d0139d3bb881aa825e4ef6b2baa9aa5603471ee2f821a")
      override
          fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = fontConfiguration(FontConfigurationProperty(fontConfiguration))

      override fun horizontalPosition(horizontalPosition: String) {
        cdkBuilder.horizontalPosition(horizontalPosition)
      }

      override fun valueLabelConfiguration(valueLabelConfiguration: IResolvable) {
        cdkBuilder.valueLabelConfiguration(valueLabelConfiguration.let(IResolvable::unwrap))
      }

      override
          fun valueLabelConfiguration(valueLabelConfiguration: ReferenceLineValueLabelConfigurationProperty) {
        cdkBuilder.valueLabelConfiguration(valueLabelConfiguration.let(ReferenceLineValueLabelConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("193db95a07b4faaacf0e97fc65931ad119c3c9abfc7da3a4743bae30bcd615f8")
      override
          fun valueLabelConfiguration(valueLabelConfiguration: ReferenceLineValueLabelConfigurationProperty.Builder.() -> Unit):
          Unit =
          valueLabelConfiguration(ReferenceLineValueLabelConfigurationProperty(valueLabelConfiguration))

      override fun verticalPosition(verticalPosition: String) {
        cdkBuilder.verticalPosition(verticalPosition)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineLabelConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineLabelConfigurationProperty,
    ) : CdkObject(cdkObject), ReferenceLineLabelConfigurationProperty {
      override fun customLabelConfiguration(): Any? = unwrap(this).getCustomLabelConfiguration()

      override fun fontColor(): String? = unwrap(this).getFontColor()

      override fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

      override fun horizontalPosition(): String? = unwrap(this).getHorizontalPosition()

      override fun valueLabelConfiguration(): Any? = unwrap(this).getValueLabelConfiguration()

      override fun verticalPosition(): String? = unwrap(this).getVerticalPosition()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineLabelConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineLabelConfigurationProperty):
          ReferenceLineLabelConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineLabelConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineLabelConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineLabelConfigurationProperty
    }
  }

  public interface VisualSubtitleLabelOptionsProperty {
    public fun formatText(): Any? = unwrap(this).getFormatText()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun formatText(formatText: IResolvable)

      public fun formatText(formatText: LongFormatTextProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7cb81230aeba269dd84be620d271affa98ec58c3cedf0fa9e9d23597881921de")
      public fun formatText(formatText: LongFormatTextProperty.Builder.() -> Unit)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualSubtitleLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualSubtitleLabelOptionsProperty.builder()

      override fun formatText(formatText: IResolvable) {
        cdkBuilder.formatText(formatText.let(IResolvable::unwrap))
      }

      override fun formatText(formatText: LongFormatTextProperty) {
        cdkBuilder.formatText(formatText.let(LongFormatTextProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7cb81230aeba269dd84be620d271affa98ec58c3cedf0fa9e9d23597881921de")
      override fun formatText(formatText: LongFormatTextProperty.Builder.() -> Unit): Unit =
          formatText(LongFormatTextProperty(formatText))

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualSubtitleLabelOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualSubtitleLabelOptionsProperty,
    ) : CdkObject(cdkObject), VisualSubtitleLabelOptionsProperty {
      override fun formatText(): Any? = unwrap(this).getFormatText()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          VisualSubtitleLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.VisualSubtitleLabelOptionsProperty):
          VisualSubtitleLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisualSubtitleLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualSubtitleLabelOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualSubtitleLabelOptionsProperty
    }
  }

  public interface TreeMapFieldWellsProperty {
    public fun treeMapAggregatedFieldWells(): Any? = unwrap(this).getTreeMapAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun treeMapAggregatedFieldWells(treeMapAggregatedFieldWells: IResolvable)

      public
          fun treeMapAggregatedFieldWells(treeMapAggregatedFieldWells: TreeMapAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5af903c6f666e0117851e0ecd63907b6c5a7a3707578397b057ea228db037494")
      public
          fun treeMapAggregatedFieldWells(treeMapAggregatedFieldWells: TreeMapAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapFieldWellsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapFieldWellsProperty.builder()

      override fun treeMapAggregatedFieldWells(treeMapAggregatedFieldWells: IResolvable) {
        cdkBuilder.treeMapAggregatedFieldWells(treeMapAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun treeMapAggregatedFieldWells(treeMapAggregatedFieldWells: TreeMapAggregatedFieldWellsProperty) {
        cdkBuilder.treeMapAggregatedFieldWells(treeMapAggregatedFieldWells.let(TreeMapAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5af903c6f666e0117851e0ecd63907b6c5a7a3707578397b057ea228db037494")
      override
          fun treeMapAggregatedFieldWells(treeMapAggregatedFieldWells: TreeMapAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          treeMapAggregatedFieldWells(TreeMapAggregatedFieldWellsProperty(treeMapAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapFieldWellsProperty,
    ) : CdkObject(cdkObject), TreeMapFieldWellsProperty {
      override fun treeMapAggregatedFieldWells(): Any? =
          unwrap(this).getTreeMapAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TreeMapFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapFieldWellsProperty):
          TreeMapFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TreeMapFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapFieldWellsProperty
    }
  }

  public interface TableStyleTargetProperty {
    public fun cellType(): String

    @CdkDslMarker
    public interface Builder {
      public fun cellType(cellType: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableStyleTargetProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableStyleTargetProperty.builder()

      override fun cellType(cellType: String) {
        cdkBuilder.cellType(cellType)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableStyleTargetProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableStyleTargetProperty,
    ) : CdkObject(cdkObject), TableStyleTargetProperty {
      override fun cellType(): String = unwrap(this).getCellType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TableStyleTargetProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableStyleTargetProperty):
          TableStyleTargetProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableStyleTargetProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableStyleTargetProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableStyleTargetProperty
    }
  }

  public interface BinCountOptionsProperty {
    public fun `value`(): Number? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BinCountOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BinCountOptionsProperty.builder()

      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BinCountOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BinCountOptionsProperty,
    ) : CdkObject(cdkObject), BinCountOptionsProperty {
      override fun `value`(): Number? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): BinCountOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BinCountOptionsProperty):
          BinCountOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BinCountOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BinCountOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BinCountOptionsProperty
    }
  }

  public interface BarChartFieldWellsProperty {
    public fun barChartAggregatedFieldWells(): Any? = unwrap(this).getBarChartAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun barChartAggregatedFieldWells(barChartAggregatedFieldWells: IResolvable)

      public
          fun barChartAggregatedFieldWells(barChartAggregatedFieldWells: BarChartAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e801c493fb4ca8a074e7925b6ac770c968cb7d7f1818dea352bc01af1f95f71c")
      public
          fun barChartAggregatedFieldWells(barChartAggregatedFieldWells: BarChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartFieldWellsProperty.builder()

      override fun barChartAggregatedFieldWells(barChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.barChartAggregatedFieldWells(barChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun barChartAggregatedFieldWells(barChartAggregatedFieldWells: BarChartAggregatedFieldWellsProperty) {
        cdkBuilder.barChartAggregatedFieldWells(barChartAggregatedFieldWells.let(BarChartAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e801c493fb4ca8a074e7925b6ac770c968cb7d7f1818dea352bc01af1f95f71c")
      override
          fun barChartAggregatedFieldWells(barChartAggregatedFieldWells: BarChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          barChartAggregatedFieldWells(BarChartAggregatedFieldWellsProperty(barChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartFieldWellsProperty,
    ) : CdkObject(cdkObject), BarChartFieldWellsProperty {
      override fun barChartAggregatedFieldWells(): Any? =
          unwrap(this).getBarChartAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): BarChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartFieldWellsProperty):
          BarChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BarChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartFieldWellsProperty
    }
  }

  public interface TopBottomMoversComputationProperty {
    public fun category(): Any? = unwrap(this).getCategory()

    public fun computationId(): String

    public fun moverSize(): Number? = unwrap(this).getMoverSize()

    public fun name(): String? = unwrap(this).getName()

    public fun sortOrder(): String? = unwrap(this).getSortOrder()

    public fun time(): Any? = unwrap(this).getTime()

    public fun type(): String

    public fun `value`(): Any? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun category(category: IResolvable)

      public fun category(category: DimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7e5d6c0a309131dfb952c55d4100486efeb5e42835a56886d85d510cceeff1d3")
      public fun category(category: DimensionFieldProperty.Builder.() -> Unit)

      public fun computationId(computationId: String)

      public fun moverSize(moverSize: Number)

      public fun name(name: String)

      public fun sortOrder(sortOrder: String)

      public fun time(time: IResolvable)

      public fun time(time: DimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4640d93a674c8f96519375e2ac246382455bff6b715bb5fbb1b937afa2f3c75f")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)

      public fun type(type: String)

      public fun `value`(`value`: IResolvable)

      public fun `value`(`value`: MeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("35974355807e7989c3e030aa74f2a62a7c5e2357f3d48ca4b692d7869403e4fb")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomMoversComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomMoversComputationProperty.builder()

      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      override fun category(category: DimensionFieldProperty) {
        cdkBuilder.category(category.let(DimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7e5d6c0a309131dfb952c55d4100486efeb5e42835a56886d85d510cceeff1d3")
      override fun category(category: DimensionFieldProperty.Builder.() -> Unit): Unit =
          category(DimensionFieldProperty(category))

      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      override fun moverSize(moverSize: Number) {
        cdkBuilder.moverSize(moverSize)
      }

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun sortOrder(sortOrder: String) {
        cdkBuilder.sortOrder(sortOrder)
      }

      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4640d93a674c8f96519375e2ac246382455bff6b715bb5fbb1b937afa2f3c75f")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("35974355807e7989c3e030aa74f2a62a7c5e2357f3d48ca4b692d7869403e4fb")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomMoversComputationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomMoversComputationProperty,
    ) : CdkObject(cdkObject), TopBottomMoversComputationProperty {
      override fun category(): Any? = unwrap(this).getCategory()

      override fun computationId(): String = unwrap(this).getComputationId()

      override fun moverSize(): Number? = unwrap(this).getMoverSize()

      override fun name(): String? = unwrap(this).getName()

      override fun sortOrder(): String? = unwrap(this).getSortOrder()

      override fun time(): Any? = unwrap(this).getTime()

      override fun type(): String = unwrap(this).getType()

      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TopBottomMoversComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomMoversComputationProperty):
          TopBottomMoversComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TopBottomMoversComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomMoversComputationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomMoversComputationProperty
    }
  }

  public interface CustomFilterListConfigurationProperty {
    public fun categoryValues(): List<String> = unwrap(this).getCategoryValues() ?: emptyList()

    public fun matchOperator(): String

    public fun nullOption(): String

    public fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()

    @CdkDslMarker
    public interface Builder {
      public fun categoryValues(categoryValues: List<String>)

      public fun categoryValues(vararg categoryValues: String)

      public fun matchOperator(matchOperator: String)

      public fun nullOption(nullOption: String)

      public fun selectAllOptions(selectAllOptions: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterListConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterListConfigurationProperty.builder()

      override fun categoryValues(categoryValues: List<String>) {
        cdkBuilder.categoryValues(categoryValues)
      }

      override fun categoryValues(vararg categoryValues: String): Unit =
          categoryValues(categoryValues.toList())

      override fun matchOperator(matchOperator: String) {
        cdkBuilder.matchOperator(matchOperator)
      }

      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      override fun selectAllOptions(selectAllOptions: String) {
        cdkBuilder.selectAllOptions(selectAllOptions)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterListConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterListConfigurationProperty,
    ) : CdkObject(cdkObject), CustomFilterListConfigurationProperty {
      override fun categoryValues(): List<String> = unwrap(this).getCategoryValues() ?: emptyList()

      override fun matchOperator(): String = unwrap(this).getMatchOperator()

      override fun nullOption(): String = unwrap(this).getNullOption()

      override fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomFilterListConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterListConfigurationProperty):
          CustomFilterListConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomFilterListConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterListConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterListConfigurationProperty
    }
  }

  public interface DataBarsOptionsProperty {
    public fun fieldId(): String

    public fun negativeColor(): String? = unwrap(this).getNegativeColor()

    public fun positiveColor(): String? = unwrap(this).getPositiveColor()

    @CdkDslMarker
    public interface Builder {
      public fun fieldId(fieldId: String)

      public fun negativeColor(negativeColor: String)

      public fun positiveColor(positiveColor: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataBarsOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataBarsOptionsProperty.builder()

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun negativeColor(negativeColor: String) {
        cdkBuilder.negativeColor(negativeColor)
      }

      override fun positiveColor(positiveColor: String) {
        cdkBuilder.positiveColor(positiveColor)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataBarsOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataBarsOptionsProperty,
    ) : CdkObject(cdkObject), DataBarsOptionsProperty {
      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun negativeColor(): String? = unwrap(this).getNegativeColor()

      override fun positiveColor(): String? = unwrap(this).getPositiveColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataBarsOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataBarsOptionsProperty):
          DataBarsOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataBarsOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataBarsOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataBarsOptionsProperty
    }
  }

  public interface TableOptionsProperty {
    public fun cellStyle(): Any? = unwrap(this).getCellStyle()

    public fun headerStyle(): Any? = unwrap(this).getHeaderStyle()

    public fun orientation(): String? = unwrap(this).getOrientation()

    public fun rowAlternateColorOptions(): Any? = unwrap(this).getRowAlternateColorOptions()

    @CdkDslMarker
    public interface Builder {
      public fun cellStyle(cellStyle: IResolvable)

      public fun cellStyle(cellStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e427cc30222d218bef4e3452ea7c2f40ed95fe4ee8290409d2314844d793fded")
      public fun cellStyle(cellStyle: TableCellStyleProperty.Builder.() -> Unit)

      public fun headerStyle(headerStyle: IResolvable)

      public fun headerStyle(headerStyle: TableCellStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("64bc8232f4bdd43e8701b821db4d849458ccdaed28d56eb6fc481940e989071f")
      public fun headerStyle(headerStyle: TableCellStyleProperty.Builder.() -> Unit)

      public fun orientation(orientation: String)

      public fun rowAlternateColorOptions(rowAlternateColorOptions: IResolvable)

      public
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("81dfe99ecbaa75829ae9ce9de29842ba453d1e5a538007c51b63d0cbd18f87f3")
      public
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableOptionsProperty.builder()

      override fun cellStyle(cellStyle: IResolvable) {
        cdkBuilder.cellStyle(cellStyle.let(IResolvable::unwrap))
      }

      override fun cellStyle(cellStyle: TableCellStyleProperty) {
        cdkBuilder.cellStyle(cellStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e427cc30222d218bef4e3452ea7c2f40ed95fe4ee8290409d2314844d793fded")
      override fun cellStyle(cellStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          cellStyle(TableCellStyleProperty(cellStyle))

      override fun headerStyle(headerStyle: IResolvable) {
        cdkBuilder.headerStyle(headerStyle.let(IResolvable::unwrap))
      }

      override fun headerStyle(headerStyle: TableCellStyleProperty) {
        cdkBuilder.headerStyle(headerStyle.let(TableCellStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("64bc8232f4bdd43e8701b821db4d849458ccdaed28d56eb6fc481940e989071f")
      override fun headerStyle(headerStyle: TableCellStyleProperty.Builder.() -> Unit): Unit =
          headerStyle(TableCellStyleProperty(headerStyle))

      override fun orientation(orientation: String) {
        cdkBuilder.orientation(orientation)
      }

      override fun rowAlternateColorOptions(rowAlternateColorOptions: IResolvable) {
        cdkBuilder.rowAlternateColorOptions(rowAlternateColorOptions.let(IResolvable::unwrap))
      }

      override
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty) {
        cdkBuilder.rowAlternateColorOptions(rowAlternateColorOptions.let(RowAlternateColorOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("81dfe99ecbaa75829ae9ce9de29842ba453d1e5a538007c51b63d0cbd18f87f3")
      override
          fun rowAlternateColorOptions(rowAlternateColorOptions: RowAlternateColorOptionsProperty.Builder.() -> Unit):
          Unit =
          rowAlternateColorOptions(RowAlternateColorOptionsProperty(rowAlternateColorOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableOptionsProperty,
    ) : CdkObject(cdkObject), TableOptionsProperty {
      override fun cellStyle(): Any? = unwrap(this).getCellStyle()

      override fun headerStyle(): Any? = unwrap(this).getHeaderStyle()

      override fun orientation(): String? = unwrap(this).getOrientation()

      override fun rowAlternateColorOptions(): Any? = unwrap(this).getRowAlternateColorOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TableOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableOptionsProperty):
          TableOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableOptionsProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableOptionsProperty
    }
  }

  public interface LineChartConfigurationProperty {
    public fun contributionAnalysisDefaults(): Any? = unwrap(this).getContributionAnalysisDefaults()

    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    public fun defaultSeriesSettings(): Any? = unwrap(this).getDefaultSeriesSettings()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun forecastConfigurations(): Any? = unwrap(this).getForecastConfigurations()

    public fun legend(): Any? = unwrap(this).getLegend()

    public fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

    public fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

    public fun referenceLines(): Any? = unwrap(this).getReferenceLines()

    public fun secondaryYAxisDisplayOptions(): Any? = unwrap(this).getSecondaryYAxisDisplayOptions()

    public fun secondaryYAxisLabelOptions(): Any? = unwrap(this).getSecondaryYAxisLabelOptions()

    public fun series(): Any? = unwrap(this).getSeries()

    public fun smallMultiplesOptions(): Any? = unwrap(this).getSmallMultiplesOptions()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun tooltip(): Any? = unwrap(this).getTooltip()

    public fun type(): String? = unwrap(this).getType()

    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    public fun xAxisDisplayOptions(): Any? = unwrap(this).getXAxisDisplayOptions()

    public fun xAxisLabelOptions(): Any? = unwrap(this).getXAxisLabelOptions()

    @CdkDslMarker
    public interface Builder {
      public fun contributionAnalysisDefaults(contributionAnalysisDefaults: IResolvable)

      public fun contributionAnalysisDefaults(contributionAnalysisDefaults: List<Any>)

      public fun contributionAnalysisDefaults(vararg contributionAnalysisDefaults: Any)

      public fun dataLabels(dataLabels: IResolvable)

      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5219f8032b7d125a5664e63c4fd27af86c098501506d060f65a8f84421ba131e")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      public fun defaultSeriesSettings(defaultSeriesSettings: IResolvable)

      public
          fun defaultSeriesSettings(defaultSeriesSettings: LineChartDefaultSeriesSettingsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f6f53b1ce8c113835dcfbf2085463884ed45fadc3b64f5104a59c7a0f7ba1359")
      public
          fun defaultSeriesSettings(defaultSeriesSettings: LineChartDefaultSeriesSettingsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: LineChartFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b49e523ab0d7f251df709e0515783a458432055f560e78ca0227297033f56325")
      public fun fieldWells(fieldWells: LineChartFieldWellsProperty.Builder.() -> Unit)

      public fun forecastConfigurations(forecastConfigurations: IResolvable)

      public fun forecastConfigurations(forecastConfigurations: List<Any>)

      public fun forecastConfigurations(vararg forecastConfigurations: Any)

      public fun legend(legend: IResolvable)

      public fun legend(legend: LegendOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("db6493a14a8a63b7244433c57020c1cf2654a22f43d1982cb29674e414358b08")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable)

      public
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("716b47eb4a245832bd925b77ba12ba07b368f963dbccbbcc697943f1d444f85a")
      public
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable)

      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("029d8977a59ab920035b92f1b3fd714aa89c15f57147f796fceb3d80108011a7")
      public
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun referenceLines(referenceLines: IResolvable)

      public fun referenceLines(referenceLines: List<Any>)

      public fun referenceLines(vararg referenceLines: Any)

      public fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: IResolvable)

      public
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d29e4eec9aebc0b6a3bcbdb094c081c285181e2ebb0b301f7aa7e598ba88e401")
      public
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: IResolvable)

      public
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0034ab355da490e9df92ee32a32599c73e51e0c197906a2edf22e672bba3a442")
      public
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun series(series: IResolvable)

      public fun series(series: List<Any>)

      public fun series(vararg series: Any)

      public fun smallMultiplesOptions(smallMultiplesOptions: IResolvable)

      public fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("018224b2f1e68009e4050d22a67b627f1d9a5eb4929a837aa82987ef02cfbb61")
      public
          fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: LineChartSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6803fafaa59b77c95c2d0d243135b196097b30bb36810a660f8de2366cb124ef")
      public
          fun sortConfiguration(sortConfiguration: LineChartSortConfigurationProperty.Builder.() -> Unit)

      public fun tooltip(tooltip: IResolvable)

      public fun tooltip(tooltip: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5945b9bab45c02591404ca0728a0ed6d273fa743b1bd5b2827366b2ae85c3060")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      public fun type(type: String)

      public fun visualPalette(visualPalette: IResolvable)

      public fun visualPalette(visualPalette: VisualPaletteProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("30f2a74b085fc8e87eca0a8ad6ac54fb458eae2e0f7f89e8ddf49bdeda361c89")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)

      public fun xAxisDisplayOptions(xAxisDisplayOptions: IResolvable)

      public fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7bdda1f5931a8ec897963421dae4ec1df1f02039e51fd88df9d80e492d16ac32")
      public
          fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun xAxisLabelOptions(xAxisLabelOptions: IResolvable)

      public fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("03b748ea7d05b3e3c2013cba6e9aafc9d841bc8a260a221582f43eb489ee617f")
      public
          fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartConfigurationProperty.builder()

      override fun contributionAnalysisDefaults(contributionAnalysisDefaults: IResolvable) {
        cdkBuilder.contributionAnalysisDefaults(contributionAnalysisDefaults.let(IResolvable::unwrap))
      }

      override fun contributionAnalysisDefaults(contributionAnalysisDefaults: List<Any>) {
        cdkBuilder.contributionAnalysisDefaults(contributionAnalysisDefaults)
      }

      override fun contributionAnalysisDefaults(vararg contributionAnalysisDefaults: Any): Unit =
          contributionAnalysisDefaults(contributionAnalysisDefaults.toList())

      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5219f8032b7d125a5664e63c4fd27af86c098501506d060f65a8f84421ba131e")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      override fun defaultSeriesSettings(defaultSeriesSettings: IResolvable) {
        cdkBuilder.defaultSeriesSettings(defaultSeriesSettings.let(IResolvable::unwrap))
      }

      override
          fun defaultSeriesSettings(defaultSeriesSettings: LineChartDefaultSeriesSettingsProperty) {
        cdkBuilder.defaultSeriesSettings(defaultSeriesSettings.let(LineChartDefaultSeriesSettingsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f6f53b1ce8c113835dcfbf2085463884ed45fadc3b64f5104a59c7a0f7ba1359")
      override
          fun defaultSeriesSettings(defaultSeriesSettings: LineChartDefaultSeriesSettingsProperty.Builder.() -> Unit):
          Unit =
          defaultSeriesSettings(LineChartDefaultSeriesSettingsProperty(defaultSeriesSettings))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: LineChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(LineChartFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b49e523ab0d7f251df709e0515783a458432055f560e78ca0227297033f56325")
      override fun fieldWells(fieldWells: LineChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(LineChartFieldWellsProperty(fieldWells))

      override fun forecastConfigurations(forecastConfigurations: IResolvable) {
        cdkBuilder.forecastConfigurations(forecastConfigurations.let(IResolvable::unwrap))
      }

      override fun forecastConfigurations(forecastConfigurations: List<Any>) {
        cdkBuilder.forecastConfigurations(forecastConfigurations)
      }

      override fun forecastConfigurations(vararg forecastConfigurations: Any): Unit =
          forecastConfigurations(forecastConfigurations.toList())

      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("db6493a14a8a63b7244433c57020c1cf2654a22f43d1982cb29674e414358b08")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      override fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(IResolvable::unwrap))
      }

      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(LineSeriesAxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("716b47eb4a245832bd925b77ba12ba07b368f963dbccbbcc697943f1d444f85a")
      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit =
          primaryYAxisDisplayOptions(LineSeriesAxisDisplayOptionsProperty(primaryYAxisDisplayOptions))

      override fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("029d8977a59ab920035b92f1b3fd714aa89c15f57147f796fceb3d80108011a7")
      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisLabelOptions(ChartAxisLabelOptionsProperty(primaryYAxisLabelOptions))

      override fun referenceLines(referenceLines: IResolvable) {
        cdkBuilder.referenceLines(referenceLines.let(IResolvable::unwrap))
      }

      override fun referenceLines(referenceLines: List<Any>) {
        cdkBuilder.referenceLines(referenceLines)
      }

      override fun referenceLines(vararg referenceLines: Any): Unit =
          referenceLines(referenceLines.toList())

      override fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: IResolvable) {
        cdkBuilder.secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions.let(IResolvable::unwrap))
      }

      override
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty) {
        cdkBuilder.secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions.let(LineSeriesAxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d29e4eec9aebc0b6a3bcbdb094c081c285181e2ebb0b301f7aa7e598ba88e401")
      override
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: LineSeriesAxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit =
          secondaryYAxisDisplayOptions(LineSeriesAxisDisplayOptionsProperty(secondaryYAxisDisplayOptions))

      override fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: IResolvable) {
        cdkBuilder.secondaryYAxisLabelOptions(secondaryYAxisLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.secondaryYAxisLabelOptions(secondaryYAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0034ab355da490e9df92ee32a32599c73e51e0c197906a2edf22e672bba3a442")
      override
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          secondaryYAxisLabelOptions(ChartAxisLabelOptionsProperty(secondaryYAxisLabelOptions))

      override fun series(series: IResolvable) {
        cdkBuilder.series(series.let(IResolvable::unwrap))
      }

      override fun series(series: List<Any>) {
        cdkBuilder.series(series)
      }

      override fun series(vararg series: Any): Unit = series(series.toList())

      override fun smallMultiplesOptions(smallMultiplesOptions: IResolvable) {
        cdkBuilder.smallMultiplesOptions(smallMultiplesOptions.let(IResolvable::unwrap))
      }

      override fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty) {
        cdkBuilder.smallMultiplesOptions(smallMultiplesOptions.let(SmallMultiplesOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("018224b2f1e68009e4050d22a67b627f1d9a5eb4929a837aa82987ef02cfbb61")
      override
          fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty.Builder.() -> Unit):
          Unit = smallMultiplesOptions(SmallMultiplesOptionsProperty(smallMultiplesOptions))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: LineChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(LineChartSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6803fafaa59b77c95c2d0d243135b196097b30bb36810a660f8de2366cb124ef")
      override
          fun sortConfiguration(sortConfiguration: LineChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(LineChartSortConfigurationProperty(sortConfiguration))

      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5945b9bab45c02591404ca0728a0ed6d273fa743b1bd5b2827366b2ae85c3060")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("30f2a74b085fc8e87eca0a8ad6ac54fb458eae2e0f7f89e8ddf49bdeda361c89")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      override fun xAxisDisplayOptions(xAxisDisplayOptions: IResolvable) {
        cdkBuilder.xAxisDisplayOptions(xAxisDisplayOptions.let(IResolvable::unwrap))
      }

      override fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.xAxisDisplayOptions(xAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7bdda1f5931a8ec897963421dae4ec1df1f02039e51fd88df9d80e492d16ac32")
      override
          fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = xAxisDisplayOptions(AxisDisplayOptionsProperty(xAxisDisplayOptions))

      override fun xAxisLabelOptions(xAxisLabelOptions: IResolvable) {
        cdkBuilder.xAxisLabelOptions(xAxisLabelOptions.let(IResolvable::unwrap))
      }

      override fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.xAxisLabelOptions(xAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("03b748ea7d05b3e3c2013cba6e9aafc9d841bc8a260a221582f43eb489ee617f")
      override
          fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = xAxisLabelOptions(ChartAxisLabelOptionsProperty(xAxisLabelOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartConfigurationProperty,
    ) : CdkObject(cdkObject), LineChartConfigurationProperty {
      override fun contributionAnalysisDefaults(): Any? =
          unwrap(this).getContributionAnalysisDefaults()

      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      override fun defaultSeriesSettings(): Any? = unwrap(this).getDefaultSeriesSettings()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun forecastConfigurations(): Any? = unwrap(this).getForecastConfigurations()

      override fun legend(): Any? = unwrap(this).getLegend()

      override fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

      override fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

      override fun referenceLines(): Any? = unwrap(this).getReferenceLines()

      override fun secondaryYAxisDisplayOptions(): Any? =
          unwrap(this).getSecondaryYAxisDisplayOptions()

      override fun secondaryYAxisLabelOptions(): Any? = unwrap(this).getSecondaryYAxisLabelOptions()

      override fun series(): Any? = unwrap(this).getSeries()

      override fun smallMultiplesOptions(): Any? = unwrap(this).getSmallMultiplesOptions()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun tooltip(): Any? = unwrap(this).getTooltip()

      override fun type(): String? = unwrap(this).getType()

      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()

      override fun xAxisDisplayOptions(): Any? = unwrap(this).getXAxisDisplayOptions()

      override fun xAxisLabelOptions(): Any? = unwrap(this).getXAxisLabelOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): LineChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartConfigurationProperty):
          LineChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartConfigurationProperty
    }
  }

  public interface MetricComparisonComputationProperty {
    public fun computationId(): String

    public fun fromValue(): Any? = unwrap(this).getFromValue()

    public fun name(): String? = unwrap(this).getName()

    public fun targetValue(): Any? = unwrap(this).getTargetValue()

    public fun time(): Any? = unwrap(this).getTime()

    @CdkDslMarker
    public interface Builder {
      public fun computationId(computationId: String)

      public fun fromValue(fromValue: IResolvable)

      public fun fromValue(fromValue: MeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ea2332260635f22f0cae1345530acd7d34aee052c4bdb2e28b9b9a0f102c6f07")
      public fun fromValue(fromValue: MeasureFieldProperty.Builder.() -> Unit)

      public fun name(name: String)

      public fun targetValue(targetValue: IResolvable)

      public fun targetValue(targetValue: MeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d34554e5b744314420d151daec10f8917dfb83efaea773db495ccce8ce1b6156")
      public fun targetValue(targetValue: MeasureFieldProperty.Builder.() -> Unit)

      public fun time(time: IResolvable)

      public fun time(time: DimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("61707f2fc3157a7331e4a040e8b0d8be41c025c383ff2e5cce7d009756cb958d")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MetricComparisonComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.MetricComparisonComputationProperty.builder()

      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      override fun fromValue(fromValue: IResolvable) {
        cdkBuilder.fromValue(fromValue.let(IResolvable::unwrap))
      }

      override fun fromValue(fromValue: MeasureFieldProperty) {
        cdkBuilder.fromValue(fromValue.let(MeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ea2332260635f22f0cae1345530acd7d34aee052c4bdb2e28b9b9a0f102c6f07")
      override fun fromValue(fromValue: MeasureFieldProperty.Builder.() -> Unit): Unit =
          fromValue(MeasureFieldProperty(fromValue))

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun targetValue(targetValue: IResolvable) {
        cdkBuilder.targetValue(targetValue.let(IResolvable::unwrap))
      }

      override fun targetValue(targetValue: MeasureFieldProperty) {
        cdkBuilder.targetValue(targetValue.let(MeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d34554e5b744314420d151daec10f8917dfb83efaea773db495ccce8ce1b6156")
      override fun targetValue(targetValue: MeasureFieldProperty.Builder.() -> Unit): Unit =
          targetValue(MeasureFieldProperty(targetValue))

      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("61707f2fc3157a7331e4a040e8b0d8be41c025c383ff2e5cce7d009756cb958d")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.MetricComparisonComputationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MetricComparisonComputationProperty,
    ) : CdkObject(cdkObject), MetricComparisonComputationProperty {
      override fun computationId(): String = unwrap(this).getComputationId()

      override fun fromValue(): Any? = unwrap(this).getFromValue()

      override fun name(): String? = unwrap(this).getName()

      override fun targetValue(): Any? = unwrap(this).getTargetValue()

      override fun time(): Any? = unwrap(this).getTime()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          MetricComparisonComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.MetricComparisonComputationProperty):
          MetricComparisonComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MetricComparisonComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.MetricComparisonComputationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.MetricComparisonComputationProperty
    }
  }

  public interface SheetControlLayoutConfigurationProperty {
    public fun gridLayout(): Any? = unwrap(this).getGridLayout()

    @CdkDslMarker
    public interface Builder {
      public fun gridLayout(gridLayout: IResolvable)

      public fun gridLayout(gridLayout: GridLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9b59dd25f28aac3bccc272be0d03d07b5a39d34c562c77436907cfcadc3f3399")
      public fun gridLayout(gridLayout: GridLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutConfigurationProperty.builder()

      override fun gridLayout(gridLayout: IResolvable) {
        cdkBuilder.gridLayout(gridLayout.let(IResolvable::unwrap))
      }

      override fun gridLayout(gridLayout: GridLayoutConfigurationProperty) {
        cdkBuilder.gridLayout(gridLayout.let(GridLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9b59dd25f28aac3bccc272be0d03d07b5a39d34c562c77436907cfcadc3f3399")
      override fun gridLayout(gridLayout: GridLayoutConfigurationProperty.Builder.() -> Unit): Unit
          = gridLayout(GridLayoutConfigurationProperty(gridLayout))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutConfigurationProperty,
    ) : CdkObject(cdkObject), SheetControlLayoutConfigurationProperty {
      override fun gridLayout(): Any? = unwrap(this).getGridLayout()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SheetControlLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutConfigurationProperty):
          SheetControlLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetControlLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetControlLayoutConfigurationProperty
    }
  }

  public interface FreeFormLayoutElementBorderStyleProperty {
    public fun color(): String? = unwrap(this).getColor()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBorderStyleProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBorderStyleProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBorderStyleProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBorderStyleProperty,
    ) : CdkObject(cdkObject), FreeFormLayoutElementBorderStyleProperty {
      override fun color(): String? = unwrap(this).getColor()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FreeFormLayoutElementBorderStyleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBorderStyleProperty):
          FreeFormLayoutElementBorderStyleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormLayoutElementBorderStyleProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBorderStyleProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutElementBorderStyleProperty
    }
  }

  public interface SheetElementConfigurationOverridesProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementConfigurationOverridesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementConfigurationOverridesProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementConfigurationOverridesProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementConfigurationOverridesProperty,
    ) : CdkObject(cdkObject), SheetElementConfigurationOverridesProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SheetElementConfigurationOverridesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementConfigurationOverridesProperty):
          SheetElementConfigurationOverridesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetElementConfigurationOverridesProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementConfigurationOverridesProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetElementConfigurationOverridesProperty
    }
  }

  public interface FilterDateTimePickerControlProperty {
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun filterControlId(): String

    public fun sourceFilterId(): String

    public fun title(): String

    public fun type(): String? = unwrap(this).getType()

    @CdkDslMarker
    public interface Builder {
      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f9163a05fb15073e126a356c9b69643ff4b79ac7eef5dfde582037fe026c2a24")
      public
          fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun filterControlId(filterControlId: String)

      public fun sourceFilterId(sourceFilterId: String)

      public fun title(title: String)

      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDateTimePickerControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDateTimePickerControlProperty.builder()

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(DateTimePickerControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f9163a05fb15073e126a356c9b69643ff4b79ac7eef5dfde582037fe026c2a24")
      override
          fun displayOptions(displayOptions: DateTimePickerControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(DateTimePickerControlDisplayOptionsProperty(displayOptions))

      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDateTimePickerControlProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDateTimePickerControlProperty,
    ) : CdkObject(cdkObject), FilterDateTimePickerControlProperty {
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      override fun title(): String = unwrap(this).getTitle()

      override fun type(): String? = unwrap(this).getType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilterDateTimePickerControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDateTimePickerControlProperty):
          FilterDateTimePickerControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterDateTimePickerControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDateTimePickerControlProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDateTimePickerControlProperty
    }
  }

  public interface ComboChartFieldWellsProperty {
    public fun comboChartAggregatedFieldWells(): Any? =
        unwrap(this).getComboChartAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun comboChartAggregatedFieldWells(comboChartAggregatedFieldWells: IResolvable)

      public
          fun comboChartAggregatedFieldWells(comboChartAggregatedFieldWells: ComboChartAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a9bdfb90d3ab7796d735ee2d55c5435f0c0bff093ed14bc5109da4623f943223")
      public
          fun comboChartAggregatedFieldWells(comboChartAggregatedFieldWells: ComboChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartFieldWellsProperty.builder()

      override fun comboChartAggregatedFieldWells(comboChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.comboChartAggregatedFieldWells(comboChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun comboChartAggregatedFieldWells(comboChartAggregatedFieldWells: ComboChartAggregatedFieldWellsProperty) {
        cdkBuilder.comboChartAggregatedFieldWells(comboChartAggregatedFieldWells.let(ComboChartAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a9bdfb90d3ab7796d735ee2d55c5435f0c0bff093ed14bc5109da4623f943223")
      override
          fun comboChartAggregatedFieldWells(comboChartAggregatedFieldWells: ComboChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          comboChartAggregatedFieldWells(ComboChartAggregatedFieldWellsProperty(comboChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartFieldWellsProperty,
    ) : CdkObject(cdkObject), ComboChartFieldWellsProperty {
      override fun comboChartAggregatedFieldWells(): Any? =
          unwrap(this).getComboChartAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ComboChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartFieldWellsProperty):
          ComboChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComboChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartFieldWellsProperty
    }
  }

  public interface CategoricalMeasureFieldProperty {
    public fun aggregationFunction(): String? = unwrap(this).getAggregationFunction()

    public fun column(): Any

    public fun fieldId(): String

    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun aggregationFunction(aggregationFunction: String)

      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c146213565053fbb44b689813a94c630df2142fe4387d44214b35c931292529a")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun fieldId(fieldId: String)

      public fun formatConfiguration(formatConfiguration: IResolvable)

      public fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6ffd6e1c0dfbe07dd17ae9bf047e964dc8665b4801d1c0c512a534b4da00d147")
      public
          fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalMeasureFieldProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalMeasureFieldProperty.builder()

      override fun aggregationFunction(aggregationFunction: String) {
        cdkBuilder.aggregationFunction(aggregationFunction)
      }

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c146213565053fbb44b689813a94c630df2142fe4387d44214b35c931292529a")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      override fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(StringFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6ffd6e1c0dfbe07dd17ae9bf047e964dc8665b4801d1c0c512a534b4da00d147")
      override
          fun formatConfiguration(formatConfiguration: StringFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(StringFormatConfigurationProperty(formatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalMeasureFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalMeasureFieldProperty,
    ) : CdkObject(cdkObject), CategoricalMeasureFieldProperty {
      override fun aggregationFunction(): String? = unwrap(this).getAggregationFunction()

      override fun column(): Any = unwrap(this).getColumn()

      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): CategoricalMeasureFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalMeasureFieldProperty):
          CategoricalMeasureFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CategoricalMeasureFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalMeasureFieldProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoricalMeasureFieldProperty
    }
  }

  public interface TooltipOptionsProperty {
    public fun fieldBasedTooltip(): Any? = unwrap(this).getFieldBasedTooltip()

    public fun selectedTooltipType(): String? = unwrap(this).getSelectedTooltipType()

    public fun tooltipVisibility(): String? = unwrap(this).getTooltipVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun fieldBasedTooltip(fieldBasedTooltip: IResolvable)

      public fun fieldBasedTooltip(fieldBasedTooltip: FieldBasedTooltipProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5dfe1cf243e348a15f9cd98dca460de0b0237d31f3b1f990977a630adf90d6ff")
      public fun fieldBasedTooltip(fieldBasedTooltip: FieldBasedTooltipProperty.Builder.() -> Unit)

      public fun selectedTooltipType(selectedTooltipType: String)

      public fun tooltipVisibility(tooltipVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipOptionsProperty.builder()

      override fun fieldBasedTooltip(fieldBasedTooltip: IResolvable) {
        cdkBuilder.fieldBasedTooltip(fieldBasedTooltip.let(IResolvable::unwrap))
      }

      override fun fieldBasedTooltip(fieldBasedTooltip: FieldBasedTooltipProperty) {
        cdkBuilder.fieldBasedTooltip(fieldBasedTooltip.let(FieldBasedTooltipProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5dfe1cf243e348a15f9cd98dca460de0b0237d31f3b1f990977a630adf90d6ff")
      override
          fun fieldBasedTooltip(fieldBasedTooltip: FieldBasedTooltipProperty.Builder.() -> Unit):
          Unit = fieldBasedTooltip(FieldBasedTooltipProperty(fieldBasedTooltip))

      override fun selectedTooltipType(selectedTooltipType: String) {
        cdkBuilder.selectedTooltipType(selectedTooltipType)
      }

      override fun tooltipVisibility(tooltipVisibility: String) {
        cdkBuilder.tooltipVisibility(tooltipVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipOptionsProperty,
    ) : CdkObject(cdkObject), TooltipOptionsProperty {
      override fun fieldBasedTooltip(): Any? = unwrap(this).getFieldBasedTooltip()

      override fun selectedTooltipType(): String? = unwrap(this).getSelectedTooltipType()

      override fun tooltipVisibility(): String? = unwrap(this).getTooltipVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TooltipOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipOptionsProperty):
          TooltipOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TooltipOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TooltipOptionsProperty
    }
  }

  public interface ParameterTextFieldControlProperty {
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun parameterControlId(): String

    public fun sourceParameterName(): String

    public fun title(): String

    @CdkDslMarker
    public interface Builder {
      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("448d5f67ea81c5428a636de2e1c6ea358264349e4d0d97328d76e68acbbea930")
      public
          fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun parameterControlId(parameterControlId: String)

      public fun sourceParameterName(sourceParameterName: String)

      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextFieldControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextFieldControlProperty.builder()

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(TextFieldControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("448d5f67ea81c5428a636de2e1c6ea358264349e4d0d97328d76e68acbbea930")
      override
          fun displayOptions(displayOptions: TextFieldControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(TextFieldControlDisplayOptionsProperty(displayOptions))

      override fun parameterControlId(parameterControlId: String) {
        cdkBuilder.parameterControlId(parameterControlId)
      }

      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextFieldControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextFieldControlProperty,
    ) : CdkObject(cdkObject), ParameterTextFieldControlProperty {
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun parameterControlId(): String = unwrap(this).getParameterControlId()

      override fun sourceParameterName(): String = unwrap(this).getSourceParameterName()

      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ParameterTextFieldControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextFieldControlProperty):
          ParameterTextFieldControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterTextFieldControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextFieldControlProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextFieldControlProperty
    }
  }

  public interface BarChartAggregatedFieldWellsProperty {
    public fun category(): Any? = unwrap(this).getCategory()

    public fun colors(): Any? = unwrap(this).getColors()

    public fun smallMultiples(): Any? = unwrap(this).getSmallMultiples()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun category(category: IResolvable)

      public fun category(category: List<Any>)

      public fun category(vararg category: Any)

      public fun colors(colors: IResolvable)

      public fun colors(colors: List<Any>)

      public fun colors(vararg colors: Any)

      public fun smallMultiples(smallMultiples: IResolvable)

      public fun smallMultiples(smallMultiples: List<Any>)

      public fun smallMultiples(vararg smallMultiples: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartAggregatedFieldWellsProperty.builder()

      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      override fun category(vararg category: Any): Unit = category(category.toList())

      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      override fun smallMultiples(smallMultiples: IResolvable) {
        cdkBuilder.smallMultiples(smallMultiples.let(IResolvable::unwrap))
      }

      override fun smallMultiples(smallMultiples: List<Any>) {
        cdkBuilder.smallMultiples(smallMultiples)
      }

      override fun smallMultiples(vararg smallMultiples: Any): Unit =
          smallMultiples(smallMultiples.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), BarChartAggregatedFieldWellsProperty {
      override fun category(): Any? = unwrap(this).getCategory()

      override fun colors(): Any? = unwrap(this).getColors()

      override fun smallMultiples(): Any? = unwrap(this).getSmallMultiples()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          BarChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartAggregatedFieldWellsProperty):
          BarChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BarChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BarChartAggregatedFieldWellsProperty
    }
  }

  public interface SelectedSheetsFilterScopeConfigurationProperty {
    public fun sheetVisualScopingConfigurations(): Any? =
        unwrap(this).getSheetVisualScopingConfigurations()

    @CdkDslMarker
    public interface Builder {
      public fun sheetVisualScopingConfigurations(sheetVisualScopingConfigurations: IResolvable)

      public fun sheetVisualScopingConfigurations(sheetVisualScopingConfigurations: List<Any>)

      public fun sheetVisualScopingConfigurations(vararg sheetVisualScopingConfigurations: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SelectedSheetsFilterScopeConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SelectedSheetsFilterScopeConfigurationProperty.builder()

      override fun sheetVisualScopingConfigurations(sheetVisualScopingConfigurations: IResolvable) {
        cdkBuilder.sheetVisualScopingConfigurations(sheetVisualScopingConfigurations.let(IResolvable::unwrap))
      }

      override fun sheetVisualScopingConfigurations(sheetVisualScopingConfigurations: List<Any>) {
        cdkBuilder.sheetVisualScopingConfigurations(sheetVisualScopingConfigurations)
      }

      override fun sheetVisualScopingConfigurations(vararg sheetVisualScopingConfigurations: Any):
          Unit = sheetVisualScopingConfigurations(sheetVisualScopingConfigurations.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SelectedSheetsFilterScopeConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SelectedSheetsFilterScopeConfigurationProperty,
    ) : CdkObject(cdkObject), SelectedSheetsFilterScopeConfigurationProperty {
      override fun sheetVisualScopingConfigurations(): Any? =
          unwrap(this).getSheetVisualScopingConfigurations()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SelectedSheetsFilterScopeConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SelectedSheetsFilterScopeConfigurationProperty):
          SelectedSheetsFilterScopeConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SelectedSheetsFilterScopeConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SelectedSheetsFilterScopeConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SelectedSheetsFilterScopeConfigurationProperty
    }
  }

  public interface NumericalAggregationFunctionProperty {
    public fun percentileAggregation(): Any? = unwrap(this).getPercentileAggregation()

    public fun simpleNumericalAggregation(): String? = unwrap(this).getSimpleNumericalAggregation()

    @CdkDslMarker
    public interface Builder {
      public fun percentileAggregation(percentileAggregation: IResolvable)

      public fun percentileAggregation(percentileAggregation: PercentileAggregationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a5cca12095f479619e0cf9f97aa57ed9c760821f6203eb4f59bcf1d504e23e7d")
      public
          fun percentileAggregation(percentileAggregation: PercentileAggregationProperty.Builder.() -> Unit)

      public fun simpleNumericalAggregation(simpleNumericalAggregation: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalAggregationFunctionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalAggregationFunctionProperty.builder()

      override fun percentileAggregation(percentileAggregation: IResolvable) {
        cdkBuilder.percentileAggregation(percentileAggregation.let(IResolvable::unwrap))
      }

      override fun percentileAggregation(percentileAggregation: PercentileAggregationProperty) {
        cdkBuilder.percentileAggregation(percentileAggregation.let(PercentileAggregationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a5cca12095f479619e0cf9f97aa57ed9c760821f6203eb4f59bcf1d504e23e7d")
      override
          fun percentileAggregation(percentileAggregation: PercentileAggregationProperty.Builder.() -> Unit):
          Unit = percentileAggregation(PercentileAggregationProperty(percentileAggregation))

      override fun simpleNumericalAggregation(simpleNumericalAggregation: String) {
        cdkBuilder.simpleNumericalAggregation(simpleNumericalAggregation)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalAggregationFunctionProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalAggregationFunctionProperty,
    ) : CdkObject(cdkObject), NumericalAggregationFunctionProperty {
      override fun percentileAggregation(): Any? = unwrap(this).getPercentileAggregation()

      override fun simpleNumericalAggregation(): String? =
          unwrap(this).getSimpleNumericalAggregation()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          NumericalAggregationFunctionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalAggregationFunctionProperty):
          NumericalAggregationFunctionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericalAggregationFunctionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalAggregationFunctionProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericalAggregationFunctionProperty
    }
  }

  public interface WordCloudVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: WordCloudChartConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6cbd6c67942c0a23d3305d144e89c4a5ee80b34dc34582c191d3c5dffbe9d1c6")
      public
          fun chartConfiguration(chartConfiguration: WordCloudChartConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2d5546112a714f07b3fae4bdbc2af51efcf96db0ab830c71ba587fc3e2fa5a84")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3709b1d809964c23e5382571095e4cf96de67142f86c6140c30ef023031b5799")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: WordCloudChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(WordCloudChartConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6cbd6c67942c0a23d3305d144e89c4a5ee80b34dc34582c191d3c5dffbe9d1c6")
      override
          fun chartConfiguration(chartConfiguration: WordCloudChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(WordCloudChartConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2d5546112a714f07b3fae4bdbc2af51efcf96db0ab830c71ba587fc3e2fa5a84")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3709b1d809964c23e5382571095e4cf96de67142f86c6140c30ef023031b5799")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudVisualProperty,
    ) : CdkObject(cdkObject), WordCloudVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): WordCloudVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudVisualProperty):
          WordCloudVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WordCloudVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudVisualProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudVisualProperty
    }
  }

  public interface PieChartSortConfigurationProperty {
    public fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    public fun smallMultiplesLimitConfiguration(): Any? =
        unwrap(this).getSmallMultiplesLimitConfiguration()

    public fun smallMultiplesSort(): Any? = unwrap(this).getSmallMultiplesSort()

    @CdkDslMarker
    public interface Builder {
      public fun categoryItemsLimit(categoryItemsLimit: IResolvable)

      public fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1eeba08fa664a350f55a37939167d6b823b3c7a42b513ae2d1efffef261a3429")
      public
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun categorySort(categorySort: IResolvable)

      public fun categorySort(categorySort: List<Any>)

      public fun categorySort(vararg categorySort: Any)

      public fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: IResolvable)

      public
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f79b2a3362ddfe9361f5a536ccf87862896749ed605dfabd9e978b7a44592b5c")
      public
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun smallMultiplesSort(smallMultiplesSort: IResolvable)

      public fun smallMultiplesSort(smallMultiplesSort: List<Any>)

      public fun smallMultiplesSort(vararg smallMultiplesSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartSortConfigurationProperty.builder()

      override fun categoryItemsLimit(categoryItemsLimit: IResolvable) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(IResolvable::unwrap))
      }

      override fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1eeba08fa664a350f55a37939167d6b823b3c7a42b513ae2d1efffef261a3429")
      override
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = categoryItemsLimit(ItemsLimitConfigurationProperty(categoryItemsLimit))

      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      override fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: IResolvable) {
        cdkBuilder.smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration.let(IResolvable::unwrap))
      }

      override
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f79b2a3362ddfe9361f5a536ccf87862896749ed605dfabd9e978b7a44592b5c")
      override
          fun smallMultiplesLimitConfiguration(smallMultiplesLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          smallMultiplesLimitConfiguration(ItemsLimitConfigurationProperty(smallMultiplesLimitConfiguration))

      override fun smallMultiplesSort(smallMultiplesSort: IResolvable) {
        cdkBuilder.smallMultiplesSort(smallMultiplesSort.let(IResolvable::unwrap))
      }

      override fun smallMultiplesSort(smallMultiplesSort: List<Any>) {
        cdkBuilder.smallMultiplesSort(smallMultiplesSort)
      }

      override fun smallMultiplesSort(vararg smallMultiplesSort: Any): Unit =
          smallMultiplesSort(smallMultiplesSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartSortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartSortConfigurationProperty,
    ) : CdkObject(cdkObject), PieChartSortConfigurationProperty {
      override fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

      override fun categorySort(): Any? = unwrap(this).getCategorySort()

      override fun smallMultiplesLimitConfiguration(): Any? =
          unwrap(this).getSmallMultiplesLimitConfiguration()

      override fun smallMultiplesSort(): Any? = unwrap(this).getSmallMultiplesSort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PieChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartSortConfigurationProperty):
          PieChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PieChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartSortConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartSortConfigurationProperty
    }
  }

  public interface FunnelChartDataLabelOptionsProperty {
    public fun categoryLabelVisibility(): String? = unwrap(this).getCategoryLabelVisibility()

    public fun labelColor(): String? = unwrap(this).getLabelColor()

    public fun labelFontConfiguration(): Any? = unwrap(this).getLabelFontConfiguration()

    public fun measureDataLabelStyle(): String? = unwrap(this).getMeasureDataLabelStyle()

    public fun measureLabelVisibility(): String? = unwrap(this).getMeasureLabelVisibility()

    public fun position(): String? = unwrap(this).getPosition()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun categoryLabelVisibility(categoryLabelVisibility: String)

      public fun labelColor(labelColor: String)

      public fun labelFontConfiguration(labelFontConfiguration: IResolvable)

      public fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47be952beed3d43e3c7b89462623b2e4540dc1dae2550a79a507019d117de6b4")
      public
          fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      public fun measureDataLabelStyle(measureDataLabelStyle: String)

      public fun measureLabelVisibility(measureLabelVisibility: String)

      public fun position(position: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartDataLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartDataLabelOptionsProperty.builder()

      override fun categoryLabelVisibility(categoryLabelVisibility: String) {
        cdkBuilder.categoryLabelVisibility(categoryLabelVisibility)
      }

      override fun labelColor(labelColor: String) {
        cdkBuilder.labelColor(labelColor)
      }

      override fun labelFontConfiguration(labelFontConfiguration: IResolvable) {
        cdkBuilder.labelFontConfiguration(labelFontConfiguration.let(IResolvable::unwrap))
      }

      override fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty) {
        cdkBuilder.labelFontConfiguration(labelFontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("47be952beed3d43e3c7b89462623b2e4540dc1dae2550a79a507019d117de6b4")
      override
          fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = labelFontConfiguration(FontConfigurationProperty(labelFontConfiguration))

      override fun measureDataLabelStyle(measureDataLabelStyle: String) {
        cdkBuilder.measureDataLabelStyle(measureDataLabelStyle)
      }

      override fun measureLabelVisibility(measureLabelVisibility: String) {
        cdkBuilder.measureLabelVisibility(measureLabelVisibility)
      }

      override fun position(position: String) {
        cdkBuilder.position(position)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartDataLabelOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartDataLabelOptionsProperty,
    ) : CdkObject(cdkObject), FunnelChartDataLabelOptionsProperty {
      override fun categoryLabelVisibility(): String? = unwrap(this).getCategoryLabelVisibility()

      override fun labelColor(): String? = unwrap(this).getLabelColor()

      override fun labelFontConfiguration(): Any? = unwrap(this).getLabelFontConfiguration()

      override fun measureDataLabelStyle(): String? = unwrap(this).getMeasureDataLabelStyle()

      override fun measureLabelVisibility(): String? = unwrap(this).getMeasureLabelVisibility()

      override fun position(): String? = unwrap(this).getPosition()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FunnelChartDataLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartDataLabelOptionsProperty):
          FunnelChartDataLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FunnelChartDataLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartDataLabelOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FunnelChartDataLabelOptionsProperty
    }
  }

  public interface CascadingControlSourceProperty {
    public fun columnToMatch(): Any? = unwrap(this).getColumnToMatch()

    public fun sourceSheetControlId(): String? = unwrap(this).getSourceSheetControlId()

    @CdkDslMarker
    public interface Builder {
      public fun columnToMatch(columnToMatch: IResolvable)

      public fun columnToMatch(columnToMatch: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ac0828b35e61f7628c3048d68fee33a4d7796adf7c2ea880275dd66bea15fcc2")
      public fun columnToMatch(columnToMatch: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun sourceSheetControlId(sourceSheetControlId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlSourceProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlSourceProperty.builder()

      override fun columnToMatch(columnToMatch: IResolvable) {
        cdkBuilder.columnToMatch(columnToMatch.let(IResolvable::unwrap))
      }

      override fun columnToMatch(columnToMatch: ColumnIdentifierProperty) {
        cdkBuilder.columnToMatch(columnToMatch.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ac0828b35e61f7628c3048d68fee33a4d7796adf7c2ea880275dd66bea15fcc2")
      override fun columnToMatch(columnToMatch: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          columnToMatch(ColumnIdentifierProperty(columnToMatch))

      override fun sourceSheetControlId(sourceSheetControlId: String) {
        cdkBuilder.sourceSheetControlId(sourceSheetControlId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlSourceProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlSourceProperty,
    ) : CdkObject(cdkObject), CascadingControlSourceProperty {
      override fun columnToMatch(): Any? = unwrap(this).getColumnToMatch()

      override fun sourceSheetControlId(): String? = unwrap(this).getSourceSheetControlId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): CascadingControlSourceProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlSourceProperty):
          CascadingControlSourceProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CascadingControlSourceProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlSourceProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlSourceProperty
    }
  }

  public interface ColumnSortProperty {
    public fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

    public fun direction(): String

    public fun sortBy(): Any

    @CdkDslMarker
    public interface Builder {
      public fun aggregationFunction(aggregationFunction: IResolvable)

      public fun aggregationFunction(aggregationFunction: AggregationFunctionProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("69e02026c66f278cc12f00b9209f5c91efd215f97359f3aa3b030407cb195520")
      public
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit)

      public fun direction(direction: String)

      public fun sortBy(sortBy: IResolvable)

      public fun sortBy(sortBy: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6b2808ab5ad68fa015833fc53d25cec41e0a9d9b9ba739c8169ce37d76647f5d")
      public fun sortBy(sortBy: ColumnIdentifierProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSortProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSortProperty.builder()

      override fun aggregationFunction(aggregationFunction: IResolvable) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(IResolvable::unwrap))
      }

      override fun aggregationFunction(aggregationFunction: AggregationFunctionProperty) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(AggregationFunctionProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("69e02026c66f278cc12f00b9209f5c91efd215f97359f3aa3b030407cb195520")
      override
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit):
          Unit = aggregationFunction(AggregationFunctionProperty(aggregationFunction))

      override fun direction(direction: String) {
        cdkBuilder.direction(direction)
      }

      override fun sortBy(sortBy: IResolvable) {
        cdkBuilder.sortBy(sortBy.let(IResolvable::unwrap))
      }

      override fun sortBy(sortBy: ColumnIdentifierProperty) {
        cdkBuilder.sortBy(sortBy.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6b2808ab5ad68fa015833fc53d25cec41e0a9d9b9ba739c8169ce37d76647f5d")
      override fun sortBy(sortBy: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          sortBy(ColumnIdentifierProperty(sortBy))

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSortProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSortProperty,
    ) : CdkObject(cdkObject), ColumnSortProperty {
      override fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

      override fun direction(): String = unwrap(this).getDirection()

      override fun sortBy(): Any = unwrap(this).getSortBy()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnSortProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSortProperty):
          ColumnSortProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnSortProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSortProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnSortProperty
    }
  }

  public interface BoxPlotChartConfigurationProperty {
    public fun boxPlotOptions(): Any? = unwrap(this).getBoxPlotOptions()

    public fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun legend(): Any? = unwrap(this).getLegend()

    public fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

    public fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

    public fun referenceLines(): Any? = unwrap(this).getReferenceLines()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun tooltip(): Any? = unwrap(this).getTooltip()

    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    @CdkDslMarker
    public interface Builder {
      public fun boxPlotOptions(boxPlotOptions: IResolvable)

      public fun boxPlotOptions(boxPlotOptions: BoxPlotOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7267314a7e0c72a3db58c996d2e3d9eeb54728841eb31e460635ea3264fbc559")
      public fun boxPlotOptions(boxPlotOptions: BoxPlotOptionsProperty.Builder.() -> Unit)

      public fun categoryAxis(categoryAxis: IResolvable)

      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a9991c5fd7d6a97a6ce07085dcd48ec9fd1ad36e565e589e6f45630d4b0f9893")
      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3462f3a606c2a576c0ac58f8ea1767fbd6d9bf42eb97816327fe730c5ba3f31d")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: BoxPlotFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93233442d8dd678aad448e596e5ff2ab7512e55056cbd32991d8f4e6bd1c411d")
      public fun fieldWells(fieldWells: BoxPlotFieldWellsProperty.Builder.() -> Unit)

      public fun legend(legend: IResolvable)

      public fun legend(legend: LegendOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3445af6ab169485bbc9377c08a34b7616b5443b0e19c00a5293638e36e3b6ac5")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable)

      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a5cde57f312339b3f776cc0d4e494f860220ca60fb72ff9255e928b6944573fb")
      public
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable)

      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b54f1d6adc14522fd1cba036c4cd08184016f59c2b5d76c9eef4eefce9b5026c")
      public
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun referenceLines(referenceLines: IResolvable)

      public fun referenceLines(referenceLines: List<Any>)

      public fun referenceLines(vararg referenceLines: Any)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: BoxPlotSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("37ed785b52e9f5a8737e33e7e75cdfa700f8311683f702b23edf3eb2e7a20a2a")
      public
          fun sortConfiguration(sortConfiguration: BoxPlotSortConfigurationProperty.Builder.() -> Unit)

      public fun tooltip(tooltip: IResolvable)

      public fun tooltip(tooltip: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ed8f29df9028ba7ba06b4370854b9d8a0339d1c7f9eff2115db3cdaa8374290")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      public fun visualPalette(visualPalette: IResolvable)

      public fun visualPalette(visualPalette: VisualPaletteProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ef4ad221439d4abbeb868a7b197547bf0712598984da08333d679d14aa3061d")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotChartConfigurationProperty.builder()

      override fun boxPlotOptions(boxPlotOptions: IResolvable) {
        cdkBuilder.boxPlotOptions(boxPlotOptions.let(IResolvable::unwrap))
      }

      override fun boxPlotOptions(boxPlotOptions: BoxPlotOptionsProperty) {
        cdkBuilder.boxPlotOptions(boxPlotOptions.let(BoxPlotOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7267314a7e0c72a3db58c996d2e3d9eeb54728841eb31e460635ea3264fbc559")
      override fun boxPlotOptions(boxPlotOptions: BoxPlotOptionsProperty.Builder.() -> Unit): Unit =
          boxPlotOptions(BoxPlotOptionsProperty(boxPlotOptions))

      override fun categoryAxis(categoryAxis: IResolvable) {
        cdkBuilder.categoryAxis(categoryAxis.let(IResolvable::unwrap))
      }

      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty) {
        cdkBuilder.categoryAxis(categoryAxis.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a9991c5fd7d6a97a6ce07085dcd48ec9fd1ad36e565e589e6f45630d4b0f9893")
      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          categoryAxis(AxisDisplayOptionsProperty(categoryAxis))

      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3462f3a606c2a576c0ac58f8ea1767fbd6d9bf42eb97816327fe730c5ba3f31d")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: BoxPlotFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(BoxPlotFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93233442d8dd678aad448e596e5ff2ab7512e55056cbd32991d8f4e6bd1c411d")
      override fun fieldWells(fieldWells: BoxPlotFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(BoxPlotFieldWellsProperty(fieldWells))

      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3445af6ab169485bbc9377c08a34b7616b5443b0e19c00a5293638e36e3b6ac5")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      override fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(IResolvable::unwrap))
      }

      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a5cde57f312339b3f776cc0d4e494f860220ca60fb72ff9255e928b6944573fb")
      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisDisplayOptions(AxisDisplayOptionsProperty(primaryYAxisDisplayOptions))

      override fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b54f1d6adc14522fd1cba036c4cd08184016f59c2b5d76c9eef4eefce9b5026c")
      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisLabelOptions(ChartAxisLabelOptionsProperty(primaryYAxisLabelOptions))

      override fun referenceLines(referenceLines: IResolvable) {
        cdkBuilder.referenceLines(referenceLines.let(IResolvable::unwrap))
      }

      override fun referenceLines(referenceLines: List<Any>) {
        cdkBuilder.referenceLines(referenceLines)
      }

      override fun referenceLines(vararg referenceLines: Any): Unit =
          referenceLines(referenceLines.toList())

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: BoxPlotSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(BoxPlotSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("37ed785b52e9f5a8737e33e7e75cdfa700f8311683f702b23edf3eb2e7a20a2a")
      override
          fun sortConfiguration(sortConfiguration: BoxPlotSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(BoxPlotSortConfigurationProperty(sortConfiguration))

      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ed8f29df9028ba7ba06b4370854b9d8a0339d1c7f9eff2115db3cdaa8374290")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ef4ad221439d4abbeb868a7b197547bf0712598984da08333d679d14aa3061d")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotChartConfigurationProperty,
    ) : CdkObject(cdkObject), BoxPlotChartConfigurationProperty {
      override fun boxPlotOptions(): Any? = unwrap(this).getBoxPlotOptions()

      override fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun legend(): Any? = unwrap(this).getLegend()

      override fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

      override fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

      override fun referenceLines(): Any? = unwrap(this).getReferenceLines()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun tooltip(): Any? = unwrap(this).getTooltip()

      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          BoxPlotChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotChartConfigurationProperty):
          BoxPlotChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotChartConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotChartConfigurationProperty
    }
  }

  public interface PivotTableFieldCollapseStateTargetProperty {
    public fun fieldDataPathValues(): Any? = unwrap(this).getFieldDataPathValues()

    public fun fieldId(): String? = unwrap(this).getFieldId()

    @CdkDslMarker
    public interface Builder {
      public fun fieldDataPathValues(fieldDataPathValues: IResolvable)

      public fun fieldDataPathValues(fieldDataPathValues: List<Any>)

      public fun fieldDataPathValues(vararg fieldDataPathValues: Any)

      public fun fieldId(fieldId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateTargetProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateTargetProperty.builder()

      override fun fieldDataPathValues(fieldDataPathValues: IResolvable) {
        cdkBuilder.fieldDataPathValues(fieldDataPathValues.let(IResolvable::unwrap))
      }

      override fun fieldDataPathValues(fieldDataPathValues: List<Any>) {
        cdkBuilder.fieldDataPathValues(fieldDataPathValues)
      }

      override fun fieldDataPathValues(vararg fieldDataPathValues: Any): Unit =
          fieldDataPathValues(fieldDataPathValues.toList())

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateTargetProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateTargetProperty,
    ) : CdkObject(cdkObject), PivotTableFieldCollapseStateTargetProperty {
      override fun fieldDataPathValues(): Any? = unwrap(this).getFieldDataPathValues()

      override fun fieldId(): String? = unwrap(this).getFieldId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableFieldCollapseStateTargetProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateTargetProperty):
          PivotTableFieldCollapseStateTargetProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableFieldCollapseStateTargetProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateTargetProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldCollapseStateTargetProperty
    }
  }

  public interface RelativeDatesFilterProperty {
    public fun anchorDateConfiguration(): Any

    public fun column(): Any

    public fun excludePeriodConfiguration(): Any? = unwrap(this).getExcludePeriodConfiguration()

    public fun filterId(): String

    public fun minimumGranularity(): String? = unwrap(this).getMinimumGranularity()

    public fun nullOption(): String

    public fun parameterName(): String? = unwrap(this).getParameterName()

    public fun relativeDateType(): String

    public fun relativeDateValue(): Number? = unwrap(this).getRelativeDateValue()

    public fun timeGranularity(): String

    @CdkDslMarker
    public interface Builder {
      public fun anchorDateConfiguration(anchorDateConfiguration: IResolvable)

      public fun anchorDateConfiguration(anchorDateConfiguration: AnchorDateConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0f3d9c003e83c8be41b6704e8f3207444a9a1ac8cf4df4310b65218dfc342f4c")
      public
          fun anchorDateConfiguration(anchorDateConfiguration: AnchorDateConfigurationProperty.Builder.() -> Unit)

      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5bbb81633a2411cab300b9ce2d3188cc8fa99c1a07007dfca86438a487de50e2")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun excludePeriodConfiguration(excludePeriodConfiguration: IResolvable)

      public
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b0cd28182a0577a5dd04a14441c7746092b2af0d510b3f2a7da0b079c3dadb2e")
      public
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty.Builder.() -> Unit)

      public fun filterId(filterId: String)

      public fun minimumGranularity(minimumGranularity: String)

      public fun nullOption(nullOption: String)

      public fun parameterName(parameterName: String)

      public fun relativeDateType(relativeDateType: String)

      public fun relativeDateValue(relativeDateValue: Number)

      public fun timeGranularity(timeGranularity: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDatesFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDatesFilterProperty.builder()

      override fun anchorDateConfiguration(anchorDateConfiguration: IResolvable) {
        cdkBuilder.anchorDateConfiguration(anchorDateConfiguration.let(IResolvable::unwrap))
      }

      override
          fun anchorDateConfiguration(anchorDateConfiguration: AnchorDateConfigurationProperty) {
        cdkBuilder.anchorDateConfiguration(anchorDateConfiguration.let(AnchorDateConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0f3d9c003e83c8be41b6704e8f3207444a9a1ac8cf4df4310b65218dfc342f4c")
      override
          fun anchorDateConfiguration(anchorDateConfiguration: AnchorDateConfigurationProperty.Builder.() -> Unit):
          Unit = anchorDateConfiguration(AnchorDateConfigurationProperty(anchorDateConfiguration))

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5bbb81633a2411cab300b9ce2d3188cc8fa99c1a07007dfca86438a487de50e2")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun excludePeriodConfiguration(excludePeriodConfiguration: IResolvable) {
        cdkBuilder.excludePeriodConfiguration(excludePeriodConfiguration.let(IResolvable::unwrap))
      }

      override
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty) {
        cdkBuilder.excludePeriodConfiguration(excludePeriodConfiguration.let(ExcludePeriodConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b0cd28182a0577a5dd04a14441c7746092b2af0d510b3f2a7da0b079c3dadb2e")
      override
          fun excludePeriodConfiguration(excludePeriodConfiguration: ExcludePeriodConfigurationProperty.Builder.() -> Unit):
          Unit =
          excludePeriodConfiguration(ExcludePeriodConfigurationProperty(excludePeriodConfiguration))

      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      override fun minimumGranularity(minimumGranularity: String) {
        cdkBuilder.minimumGranularity(minimumGranularity)
      }

      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      override fun parameterName(parameterName: String) {
        cdkBuilder.parameterName(parameterName)
      }

      override fun relativeDateType(relativeDateType: String) {
        cdkBuilder.relativeDateType(relativeDateType)
      }

      override fun relativeDateValue(relativeDateValue: Number) {
        cdkBuilder.relativeDateValue(relativeDateValue)
      }

      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDatesFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDatesFilterProperty,
    ) : CdkObject(cdkObject), RelativeDatesFilterProperty {
      override fun anchorDateConfiguration(): Any = unwrap(this).getAnchorDateConfiguration()

      override fun column(): Any = unwrap(this).getColumn()

      override fun excludePeriodConfiguration(): Any? = unwrap(this).getExcludePeriodConfiguration()

      override fun filterId(): String = unwrap(this).getFilterId()

      override fun minimumGranularity(): String? = unwrap(this).getMinimumGranularity()

      override fun nullOption(): String = unwrap(this).getNullOption()

      override fun parameterName(): String? = unwrap(this).getParameterName()

      override fun relativeDateType(): String = unwrap(this).getRelativeDateType()

      override fun relativeDateValue(): Number? = unwrap(this).getRelativeDateValue()

      override fun timeGranularity(): String = unwrap(this).getTimeGranularity()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): RelativeDatesFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDatesFilterProperty):
          RelativeDatesFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RelativeDatesFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDatesFilterProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.RelativeDatesFilterProperty
    }
  }

  public interface RollingDateConfigurationProperty {
    public fun dataSetIdentifier(): String? = unwrap(this).getDataSetIdentifier()

    public fun expression(): String

    @CdkDslMarker
    public interface Builder {
      public fun dataSetIdentifier(dataSetIdentifier: String)

      public fun expression(expression: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RollingDateConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.RollingDateConfigurationProperty.builder()

      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.RollingDateConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RollingDateConfigurationProperty,
    ) : CdkObject(cdkObject), RollingDateConfigurationProperty {
      override fun dataSetIdentifier(): String? = unwrap(this).getDataSetIdentifier()

      override fun expression(): String = unwrap(this).getExpression()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): RollingDateConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.RollingDateConfigurationProperty):
          RollingDateConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RollingDateConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.RollingDateConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.RollingDateConfigurationProperty
    }
  }

  public interface ScatterPlotConfigurationProperty {
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun legend(): Any? = unwrap(this).getLegend()

    public fun tooltip(): Any? = unwrap(this).getTooltip()

    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    public fun xAxisDisplayOptions(): Any? = unwrap(this).getXAxisDisplayOptions()

    public fun xAxisLabelOptions(): Any? = unwrap(this).getXAxisLabelOptions()

    public fun yAxisDisplayOptions(): Any? = unwrap(this).getYAxisDisplayOptions()

    public fun yAxisLabelOptions(): Any? = unwrap(this).getYAxisLabelOptions()

    @CdkDslMarker
    public interface Builder {
      public fun dataLabels(dataLabels: IResolvable)

      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0c972987ebf7f91c72fc61d1656fc4c173a3cfce4e961affa422d0ef5ec98f51")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: ScatterPlotFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("010cac7c1bab94aff4ab342d0a455bb1736fe998bfcb279edc58d272ae1368b1")
      public fun fieldWells(fieldWells: ScatterPlotFieldWellsProperty.Builder.() -> Unit)

      public fun legend(legend: IResolvable)

      public fun legend(legend: LegendOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f5abe52a3003e315006cf37307a9aebf4f700851f465e597b3b07ab7db3ec1f7")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      public fun tooltip(tooltip: IResolvable)

      public fun tooltip(tooltip: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ac6bb19971e57adde334d66fa3e840b39d1f3aeab7ace32fd29998c26b02cb71")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      public fun visualPalette(visualPalette: IResolvable)

      public fun visualPalette(visualPalette: VisualPaletteProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("55e6f6ed0fce857aa5f0cf0f2480245f18559ea4b6f4a653cf6fd3e09d129c4b")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)

      public fun xAxisDisplayOptions(xAxisDisplayOptions: IResolvable)

      public fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6e5b1bb686d9731977557bfd425f3477309d5142f93c4cef1b07beb17b8f3b51")
      public
          fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun xAxisLabelOptions(xAxisLabelOptions: IResolvable)

      public fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e2c668db89decdfdbc12a2e6ecb446d6aa3cca4f61a5df58a801e355ed69951d")
      public
          fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun yAxisDisplayOptions(yAxisDisplayOptions: IResolvable)

      public fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("db28d82b82277cd129e2f001439961ccc65f6dcde0c6b89df606a354ae200759")
      public
          fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun yAxisLabelOptions(yAxisLabelOptions: IResolvable)

      public fun yAxisLabelOptions(yAxisLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b17bd0f3f19d3e32fae278ebc3dc8b67f4fa24c6bdf983ac6789fc1e85ba6ce4")
      public
          fun yAxisLabelOptions(yAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotConfigurationProperty.builder()

      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0c972987ebf7f91c72fc61d1656fc4c173a3cfce4e961affa422d0ef5ec98f51")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: ScatterPlotFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(ScatterPlotFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("010cac7c1bab94aff4ab342d0a455bb1736fe998bfcb279edc58d272ae1368b1")
      override fun fieldWells(fieldWells: ScatterPlotFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(ScatterPlotFieldWellsProperty(fieldWells))

      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f5abe52a3003e315006cf37307a9aebf4f700851f465e597b3b07ab7db3ec1f7")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ac6bb19971e57adde334d66fa3e840b39d1f3aeab7ace32fd29998c26b02cb71")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("55e6f6ed0fce857aa5f0cf0f2480245f18559ea4b6f4a653cf6fd3e09d129c4b")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      override fun xAxisDisplayOptions(xAxisDisplayOptions: IResolvable) {
        cdkBuilder.xAxisDisplayOptions(xAxisDisplayOptions.let(IResolvable::unwrap))
      }

      override fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.xAxisDisplayOptions(xAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6e5b1bb686d9731977557bfd425f3477309d5142f93c4cef1b07beb17b8f3b51")
      override
          fun xAxisDisplayOptions(xAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = xAxisDisplayOptions(AxisDisplayOptionsProperty(xAxisDisplayOptions))

      override fun xAxisLabelOptions(xAxisLabelOptions: IResolvable) {
        cdkBuilder.xAxisLabelOptions(xAxisLabelOptions.let(IResolvable::unwrap))
      }

      override fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.xAxisLabelOptions(xAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e2c668db89decdfdbc12a2e6ecb446d6aa3cca4f61a5df58a801e355ed69951d")
      override
          fun xAxisLabelOptions(xAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = xAxisLabelOptions(ChartAxisLabelOptionsProperty(xAxisLabelOptions))

      override fun yAxisDisplayOptions(yAxisDisplayOptions: IResolvable) {
        cdkBuilder.yAxisDisplayOptions(yAxisDisplayOptions.let(IResolvable::unwrap))
      }

      override fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.yAxisDisplayOptions(yAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("db28d82b82277cd129e2f001439961ccc65f6dcde0c6b89df606a354ae200759")
      override
          fun yAxisDisplayOptions(yAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = yAxisDisplayOptions(AxisDisplayOptionsProperty(yAxisDisplayOptions))

      override fun yAxisLabelOptions(yAxisLabelOptions: IResolvable) {
        cdkBuilder.yAxisLabelOptions(yAxisLabelOptions.let(IResolvable::unwrap))
      }

      override fun yAxisLabelOptions(yAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.yAxisLabelOptions(yAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b17bd0f3f19d3e32fae278ebc3dc8b67f4fa24c6bdf983ac6789fc1e85ba6ce4")
      override
          fun yAxisLabelOptions(yAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = yAxisLabelOptions(ChartAxisLabelOptionsProperty(yAxisLabelOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotConfigurationProperty,
    ) : CdkObject(cdkObject), ScatterPlotConfigurationProperty {
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun legend(): Any? = unwrap(this).getLegend()

      override fun tooltip(): Any? = unwrap(this).getTooltip()

      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()

      override fun xAxisDisplayOptions(): Any? = unwrap(this).getXAxisDisplayOptions()

      override fun xAxisLabelOptions(): Any? = unwrap(this).getXAxisLabelOptions()

      override fun yAxisDisplayOptions(): Any? = unwrap(this).getYAxisDisplayOptions()

      override fun yAxisLabelOptions(): Any? = unwrap(this).getYAxisLabelOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ScatterPlotConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotConfigurationProperty):
          ScatterPlotConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ScatterPlotConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotConfigurationProperty
    }
  }

  public interface PivotTableConditionalFormattingProperty {
    public fun conditionalFormattingOptions(): Any? = unwrap(this).getConditionalFormattingOptions()

    @CdkDslMarker
    public interface Builder {
      public fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable)

      public fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>)

      public fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingProperty.builder()

      override fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions.let(IResolvable::unwrap))
      }

      override fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions)
      }

      override fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any): Unit =
          conditionalFormattingOptions(conditionalFormattingOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingProperty,
    ) : CdkObject(cdkObject), PivotTableConditionalFormattingProperty {
      override fun conditionalFormattingOptions(): Any? =
          unwrap(this).getConditionalFormattingOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingProperty):
          PivotTableConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingProperty
    }
  }

  public interface DecimalParameterDeclarationProperty {
    public fun defaultValues(): Any? = unwrap(this).getDefaultValues()

    public fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

    public fun name(): String

    public fun parameterValueType(): String

    public fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()

    @CdkDslMarker
    public interface Builder {
      public fun defaultValues(defaultValues: IResolvable)

      public fun defaultValues(defaultValues: DecimalDefaultValuesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("50d5dd31551a8f98c576fbd7982575c69ccc656f00454206014b28b45dd62959")
      public fun defaultValues(defaultValues: DecimalDefaultValuesProperty.Builder.() -> Unit)

      public fun mappedDataSetParameters(mappedDataSetParameters: IResolvable)

      public fun mappedDataSetParameters(mappedDataSetParameters: List<Any>)

      public fun mappedDataSetParameters(vararg mappedDataSetParameters: Any)

      public fun name(name: String)

      public fun parameterValueType(parameterValueType: String)

      public fun valueWhenUnset(valueWhenUnset: IResolvable)

      public fun valueWhenUnset(valueWhenUnset: DecimalValueWhenUnsetConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ada486095fe8118a3c24cb739a3fb55f6dd181e06700c1ec9e0b03b083af2174")
      public
          fun valueWhenUnset(valueWhenUnset: DecimalValueWhenUnsetConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalParameterDeclarationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalParameterDeclarationProperty.builder()

      override fun defaultValues(defaultValues: IResolvable) {
        cdkBuilder.defaultValues(defaultValues.let(IResolvable::unwrap))
      }

      override fun defaultValues(defaultValues: DecimalDefaultValuesProperty) {
        cdkBuilder.defaultValues(defaultValues.let(DecimalDefaultValuesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("50d5dd31551a8f98c576fbd7982575c69ccc656f00454206014b28b45dd62959")
      override fun defaultValues(defaultValues: DecimalDefaultValuesProperty.Builder.() -> Unit):
          Unit = defaultValues(DecimalDefaultValuesProperty(defaultValues))

      override fun mappedDataSetParameters(mappedDataSetParameters: IResolvable) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters.let(IResolvable::unwrap))
      }

      override fun mappedDataSetParameters(mappedDataSetParameters: List<Any>) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters)
      }

      override fun mappedDataSetParameters(vararg mappedDataSetParameters: Any): Unit =
          mappedDataSetParameters(mappedDataSetParameters.toList())

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun parameterValueType(parameterValueType: String) {
        cdkBuilder.parameterValueType(parameterValueType)
      }

      override fun valueWhenUnset(valueWhenUnset: IResolvable) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(IResolvable::unwrap))
      }

      override fun valueWhenUnset(valueWhenUnset: DecimalValueWhenUnsetConfigurationProperty) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(DecimalValueWhenUnsetConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ada486095fe8118a3c24cb739a3fb55f6dd181e06700c1ec9e0b03b083af2174")
      override
          fun valueWhenUnset(valueWhenUnset: DecimalValueWhenUnsetConfigurationProperty.Builder.() -> Unit):
          Unit = valueWhenUnset(DecimalValueWhenUnsetConfigurationProperty(valueWhenUnset))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalParameterDeclarationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalParameterDeclarationProperty,
    ) : CdkObject(cdkObject), DecimalParameterDeclarationProperty {
      override fun defaultValues(): Any? = unwrap(this).getDefaultValues()

      override fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

      override fun name(): String = unwrap(this).getName()

      override fun parameterValueType(): String = unwrap(this).getParameterValueType()

      override fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DecimalParameterDeclarationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalParameterDeclarationProperty):
          DecimalParameterDeclarationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DecimalParameterDeclarationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalParameterDeclarationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalParameterDeclarationProperty
    }
  }

  public interface PivotTableVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: PivotTableConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ffc9140afbe2e9709a6488a77af28522394ab933c6f90cf31ad204195cee579e")
      public
          fun chartConfiguration(chartConfiguration: PivotTableConfigurationProperty.Builder.() -> Unit)

      public fun conditionalFormatting(conditionalFormatting: IResolvable)

      public
          fun conditionalFormatting(conditionalFormatting: PivotTableConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9763c8d5ce4d178a8f1d11c2749c2fd29bab557aa3d9377f99240c42022bdc78")
      public
          fun conditionalFormatting(conditionalFormatting: PivotTableConditionalFormattingProperty.Builder.() -> Unit)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("487e2a00e315b47dd08d4d063548649a99840046b72720d63fd708b344aad948")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("23dd944f5b963a788b5500ccf08c44c05701c1857c8eee1f0be54105bd0799d8")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: PivotTableConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(PivotTableConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ffc9140afbe2e9709a6488a77af28522394ab933c6f90cf31ad204195cee579e")
      override
          fun chartConfiguration(chartConfiguration: PivotTableConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(PivotTableConfigurationProperty(chartConfiguration))

      override fun conditionalFormatting(conditionalFormatting: IResolvable) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(IResolvable::unwrap))
      }

      override
          fun conditionalFormatting(conditionalFormatting: PivotTableConditionalFormattingProperty) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(PivotTableConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9763c8d5ce4d178a8f1d11c2749c2fd29bab557aa3d9377f99240c42022bdc78")
      override
          fun conditionalFormatting(conditionalFormatting: PivotTableConditionalFormattingProperty.Builder.() -> Unit):
          Unit =
          conditionalFormatting(PivotTableConditionalFormattingProperty(conditionalFormatting))

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("487e2a00e315b47dd08d4d063548649a99840046b72720d63fd708b344aad948")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("23dd944f5b963a788b5500ccf08c44c05701c1857c8eee1f0be54105bd0799d8")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableVisualProperty,
    ) : CdkObject(cdkObject), PivotTableVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableVisualProperty):
          PivotTableVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableVisualProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableVisualProperty
    }
  }

  public interface FieldSortOptionsProperty {
    public fun columnSort(): Any? = unwrap(this).getColumnSort()

    public fun fieldSort(): Any? = unwrap(this).getFieldSort()

    @CdkDslMarker
    public interface Builder {
      public fun columnSort(columnSort: IResolvable)

      public fun columnSort(columnSort: ColumnSortProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b69ff76aa420e633b6fa19e540ad30955e07b8f50d4cee3b2c066b50dea7896")
      public fun columnSort(columnSort: ColumnSortProperty.Builder.() -> Unit)

      public fun fieldSort(fieldSort: IResolvable)

      public fun fieldSort(fieldSort: FieldSortProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eecdce5bb63092a119a5201cdf448bd53305afbe917d1f8b69804c00dd7b6358")
      public fun fieldSort(fieldSort: FieldSortProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortOptionsProperty.builder()

      override fun columnSort(columnSort: IResolvable) {
        cdkBuilder.columnSort(columnSort.let(IResolvable::unwrap))
      }

      override fun columnSort(columnSort: ColumnSortProperty) {
        cdkBuilder.columnSort(columnSort.let(ColumnSortProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b69ff76aa420e633b6fa19e540ad30955e07b8f50d4cee3b2c066b50dea7896")
      override fun columnSort(columnSort: ColumnSortProperty.Builder.() -> Unit): Unit =
          columnSort(ColumnSortProperty(columnSort))

      override fun fieldSort(fieldSort: IResolvable) {
        cdkBuilder.fieldSort(fieldSort.let(IResolvable::unwrap))
      }

      override fun fieldSort(fieldSort: FieldSortProperty) {
        cdkBuilder.fieldSort(fieldSort.let(FieldSortProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eecdce5bb63092a119a5201cdf448bd53305afbe917d1f8b69804c00dd7b6358")
      override fun fieldSort(fieldSort: FieldSortProperty.Builder.() -> Unit): Unit =
          fieldSort(FieldSortProperty(fieldSort))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortOptionsProperty,
    ) : CdkObject(cdkObject), FieldSortOptionsProperty {
      override fun columnSort(): Any? = unwrap(this).getColumnSort()

      override fun fieldSort(): Any? = unwrap(this).getFieldSort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FieldSortOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortOptionsProperty):
          FieldSortOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FieldSortOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortOptionsProperty
    }
  }

  public interface AxisLabelOptionsProperty {
    public fun applyTo(): Any? = unwrap(this).getApplyTo()

    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    public fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun applyTo(applyTo: IResolvable)

      public fun applyTo(applyTo: AxisLabelReferenceOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a6abe6c0c91010b434b500a9812b69d3535ee51c1e69d12fe4c7269bcfc03a02")
      public fun applyTo(applyTo: AxisLabelReferenceOptionsProperty.Builder.() -> Unit)

      public fun customLabel(customLabel: String)

      public fun fontConfiguration(fontConfiguration: IResolvable)

      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b93baeacf2b2b736b9cedad1fbfb576f28e5c46885e1983bb1d5a85ba7855a36")
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelOptionsProperty.builder()

      override fun applyTo(applyTo: IResolvable) {
        cdkBuilder.applyTo(applyTo.let(IResolvable::unwrap))
      }

      override fun applyTo(applyTo: AxisLabelReferenceOptionsProperty) {
        cdkBuilder.applyTo(applyTo.let(AxisLabelReferenceOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a6abe6c0c91010b434b500a9812b69d3535ee51c1e69d12fe4c7269bcfc03a02")
      override fun applyTo(applyTo: AxisLabelReferenceOptionsProperty.Builder.() -> Unit): Unit =
          applyTo(AxisLabelReferenceOptionsProperty(applyTo))

      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      override fun fontConfiguration(fontConfiguration: IResolvable) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(IResolvable::unwrap))
      }

      override fun fontConfiguration(fontConfiguration: FontConfigurationProperty) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b93baeacf2b2b736b9cedad1fbfb576f28e5c46885e1983bb1d5a85ba7855a36")
      override
          fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = fontConfiguration(FontConfigurationProperty(fontConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelOptionsProperty,
    ) : CdkObject(cdkObject), AxisLabelOptionsProperty {
      override fun applyTo(): Any? = unwrap(this).getApplyTo()

      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      override fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AxisLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelOptionsProperty):
          AxisLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelOptionsProperty
    }
  }

  public interface VisualPaletteProperty {
    public fun chartColor(): String? = unwrap(this).getChartColor()

    public fun colorMap(): Any? = unwrap(this).getColorMap()

    @CdkDslMarker
    public interface Builder {
      public fun chartColor(chartColor: String)

      public fun colorMap(colorMap: IResolvable)

      public fun colorMap(colorMap: List<Any>)

      public fun colorMap(vararg colorMap: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualPaletteProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualPaletteProperty.builder()

      override fun chartColor(chartColor: String) {
        cdkBuilder.chartColor(chartColor)
      }

      override fun colorMap(colorMap: IResolvable) {
        cdkBuilder.colorMap(colorMap.let(IResolvable::unwrap))
      }

      override fun colorMap(colorMap: List<Any>) {
        cdkBuilder.colorMap(colorMap)
      }

      override fun colorMap(vararg colorMap: Any): Unit = colorMap(colorMap.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualPaletteProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualPaletteProperty,
    ) : CdkObject(cdkObject), VisualPaletteProperty {
      override fun chartColor(): String? = unwrap(this).getChartColor()

      override fun colorMap(): Any? = unwrap(this).getColorMap()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): VisualPaletteProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.VisualPaletteProperty):
          VisualPaletteProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: VisualPaletteProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualPaletteProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.VisualPaletteProperty
    }
  }

  public interface RadarChartAreaStyleSettingsProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAreaStyleSettingsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAreaStyleSettingsProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAreaStyleSettingsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAreaStyleSettingsProperty,
    ) : CdkObject(cdkObject), RadarChartAreaStyleSettingsProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          RadarChartAreaStyleSettingsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAreaStyleSettingsProperty):
          RadarChartAreaStyleSettingsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartAreaStyleSettingsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAreaStyleSettingsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartAreaStyleSettingsProperty
    }
  }

  public interface LabelOptionsProperty {
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    public fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun customLabel(customLabel: String)

      public fun fontConfiguration(fontConfiguration: IResolvable)

      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4187ecb1f9976632d5009d7037a9ec5cdde2e4e96c11612cdb04bfc43fa5d49d")
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LabelOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LabelOptionsProperty.builder()

      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      override fun fontConfiguration(fontConfiguration: IResolvable) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(IResolvable::unwrap))
      }

      override fun fontConfiguration(fontConfiguration: FontConfigurationProperty) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4187ecb1f9976632d5009d7037a9ec5cdde2e4e96c11612cdb04bfc43fa5d49d")
      override
          fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = fontConfiguration(FontConfigurationProperty(fontConfiguration))

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LabelOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LabelOptionsProperty,
    ) : CdkObject(cdkObject), LabelOptionsProperty {
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      override fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): LabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LabelOptionsProperty):
          LabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LabelOptionsProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LabelOptionsProperty
    }
  }

  public interface PercentageDisplayFormatConfigurationProperty {
    public fun decimalPlacesConfiguration(): Any? = unwrap(this).getDecimalPlacesConfiguration()

    public fun negativeValueConfiguration(): Any? = unwrap(this).getNegativeValueConfiguration()

    public fun nullValueFormatConfiguration(): Any? = unwrap(this).getNullValueFormatConfiguration()

    public fun prefix(): String? = unwrap(this).getPrefix()

    public fun separatorConfiguration(): Any? = unwrap(this).getSeparatorConfiguration()

    public fun suffix(): String? = unwrap(this).getSuffix()

    @CdkDslMarker
    public interface Builder {
      public fun decimalPlacesConfiguration(decimalPlacesConfiguration: IResolvable)

      public
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5e92695b293d91a924456ea6b733758817287e687c391615d9c753b4caa60e7a")
      public
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty.Builder.() -> Unit)

      public fun negativeValueConfiguration(negativeValueConfiguration: IResolvable)

      public
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2c7eae5a7b2e2d6d78685c46ac09bba00f13d2bb97976f46c2ac45a2aeb2570d")
      public
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty.Builder.() -> Unit)

      public fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable)

      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cd4fe51dfb0046e10e05bdf3f9116dd562befca1c06e359ceefad73f9591d9c7")
      public
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit)

      public fun prefix(prefix: String)

      public fun separatorConfiguration(separatorConfiguration: IResolvable)

      public
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("49528339b674e8c9c5cdef6f1f5cb1adb6dc36f70b810998c0e8bea9019f7e2a")
      public
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty.Builder.() -> Unit)

      public fun suffix(suffix: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentageDisplayFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentageDisplayFormatConfigurationProperty.builder()

      override fun decimalPlacesConfiguration(decimalPlacesConfiguration: IResolvable) {
        cdkBuilder.decimalPlacesConfiguration(decimalPlacesConfiguration.let(IResolvable::unwrap))
      }

      override
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty) {
        cdkBuilder.decimalPlacesConfiguration(decimalPlacesConfiguration.let(DecimalPlacesConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5e92695b293d91a924456ea6b733758817287e687c391615d9c753b4caa60e7a")
      override
          fun decimalPlacesConfiguration(decimalPlacesConfiguration: DecimalPlacesConfigurationProperty.Builder.() -> Unit):
          Unit =
          decimalPlacesConfiguration(DecimalPlacesConfigurationProperty(decimalPlacesConfiguration))

      override fun negativeValueConfiguration(negativeValueConfiguration: IResolvable) {
        cdkBuilder.negativeValueConfiguration(negativeValueConfiguration.let(IResolvable::unwrap))
      }

      override
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty) {
        cdkBuilder.negativeValueConfiguration(negativeValueConfiguration.let(NegativeValueConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2c7eae5a7b2e2d6d78685c46ac09bba00f13d2bb97976f46c2ac45a2aeb2570d")
      override
          fun negativeValueConfiguration(negativeValueConfiguration: NegativeValueConfigurationProperty.Builder.() -> Unit):
          Unit =
          negativeValueConfiguration(NegativeValueConfigurationProperty(negativeValueConfiguration))

      override fun nullValueFormatConfiguration(nullValueFormatConfiguration: IResolvable) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(IResolvable::unwrap))
      }

      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty) {
        cdkBuilder.nullValueFormatConfiguration(nullValueFormatConfiguration.let(NullValueFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cd4fe51dfb0046e10e05bdf3f9116dd562befca1c06e359ceefad73f9591d9c7")
      override
          fun nullValueFormatConfiguration(nullValueFormatConfiguration: NullValueFormatConfigurationProperty.Builder.() -> Unit):
          Unit =
          nullValueFormatConfiguration(NullValueFormatConfigurationProperty(nullValueFormatConfiguration))

      override fun prefix(prefix: String) {
        cdkBuilder.prefix(prefix)
      }

      override fun separatorConfiguration(separatorConfiguration: IResolvable) {
        cdkBuilder.separatorConfiguration(separatorConfiguration.let(IResolvable::unwrap))
      }

      override
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty) {
        cdkBuilder.separatorConfiguration(separatorConfiguration.let(NumericSeparatorConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("49528339b674e8c9c5cdef6f1f5cb1adb6dc36f70b810998c0e8bea9019f7e2a")
      override
          fun separatorConfiguration(separatorConfiguration: NumericSeparatorConfigurationProperty.Builder.() -> Unit):
          Unit =
          separatorConfiguration(NumericSeparatorConfigurationProperty(separatorConfiguration))

      override fun suffix(suffix: String) {
        cdkBuilder.suffix(suffix)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentageDisplayFormatConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentageDisplayFormatConfigurationProperty,
    ) : CdkObject(cdkObject), PercentageDisplayFormatConfigurationProperty {
      override fun decimalPlacesConfiguration(): Any? = unwrap(this).getDecimalPlacesConfiguration()

      override fun negativeValueConfiguration(): Any? = unwrap(this).getNegativeValueConfiguration()

      override fun nullValueFormatConfiguration(): Any? =
          unwrap(this).getNullValueFormatConfiguration()

      override fun prefix(): String? = unwrap(this).getPrefix()

      override fun separatorConfiguration(): Any? = unwrap(this).getSeparatorConfiguration()

      override fun suffix(): String? = unwrap(this).getSuffix()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PercentageDisplayFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PercentageDisplayFormatConfigurationProperty):
          PercentageDisplayFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PercentageDisplayFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentageDisplayFormatConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PercentageDisplayFormatConfigurationProperty
    }
  }

  public interface ColumnIdentifierProperty {
    public fun columnName(): String

    public fun dataSetIdentifier(): String

    @CdkDslMarker
    public interface Builder {
      public fun columnName(columnName: String)

      public fun dataSetIdentifier(dataSetIdentifier: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnIdentifierProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnIdentifierProperty.builder()

      override fun columnName(columnName: String) {
        cdkBuilder.columnName(columnName)
      }

      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnIdentifierProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnIdentifierProperty,
    ) : CdkObject(cdkObject), ColumnIdentifierProperty {
      override fun columnName(): String = unwrap(this).getColumnName()

      override fun dataSetIdentifier(): String = unwrap(this).getDataSetIdentifier()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnIdentifierProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnIdentifierProperty):
          ColumnIdentifierProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnIdentifierProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnIdentifierProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnIdentifierProperty
    }
  }

  public interface AxisLogarithmicScaleProperty {
    public fun base(): Number? = unwrap(this).getBase()

    @CdkDslMarker
    public interface Builder {
      public fun base(base: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLogarithmicScaleProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLogarithmicScaleProperty.builder()

      override fun base(base: Number) {
        cdkBuilder.base(base)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLogarithmicScaleProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLogarithmicScaleProperty,
    ) : CdkObject(cdkObject), AxisLogarithmicScaleProperty {
      override fun base(): Number? = unwrap(this).getBase()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AxisLogarithmicScaleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLogarithmicScaleProperty):
          AxisLogarithmicScaleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisLogarithmicScaleProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLogarithmicScaleProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLogarithmicScaleProperty
    }
  }

  public interface GridLayoutElementProperty {
    public fun columnIndex(): Number? = unwrap(this).getColumnIndex()

    public fun columnSpan(): Number

    public fun elementId(): String

    public fun elementType(): String

    public fun rowIndex(): Number? = unwrap(this).getRowIndex()

    public fun rowSpan(): Number

    @CdkDslMarker
    public interface Builder {
      public fun columnIndex(columnIndex: Number)

      public fun columnSpan(columnSpan: Number)

      public fun elementId(elementId: String)

      public fun elementType(elementType: String)

      public fun rowIndex(rowIndex: Number)

      public fun rowSpan(rowSpan: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutElementProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutElementProperty.builder()

      override fun columnIndex(columnIndex: Number) {
        cdkBuilder.columnIndex(columnIndex)
      }

      override fun columnSpan(columnSpan: Number) {
        cdkBuilder.columnSpan(columnSpan)
      }

      override fun elementId(elementId: String) {
        cdkBuilder.elementId(elementId)
      }

      override fun elementType(elementType: String) {
        cdkBuilder.elementType(elementType)
      }

      override fun rowIndex(rowIndex: Number) {
        cdkBuilder.rowIndex(rowIndex)
      }

      override fun rowSpan(rowSpan: Number) {
        cdkBuilder.rowSpan(rowSpan)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutElementProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutElementProperty,
    ) : CdkObject(cdkObject), GridLayoutElementProperty {
      override fun columnIndex(): Number? = unwrap(this).getColumnIndex()

      override fun columnSpan(): Number = unwrap(this).getColumnSpan()

      override fun elementId(): String = unwrap(this).getElementId()

      override fun elementType(): String = unwrap(this).getElementType()

      override fun rowIndex(): Number? = unwrap(this).getRowIndex()

      override fun rowSpan(): Number = unwrap(this).getRowSpan()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GridLayoutElementProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutElementProperty):
          GridLayoutElementProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GridLayoutElementProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutElementProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutElementProperty
    }
  }

  public interface TopBottomFilterProperty {
    public fun aggregationSortConfigurations(): Any

    public fun column(): Any

    public fun filterId(): String

    public fun limit(): Number? = unwrap(this).getLimit()

    public fun parameterName(): String? = unwrap(this).getParameterName()

    public fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

    @CdkDslMarker
    public interface Builder {
      public fun aggregationSortConfigurations(aggregationSortConfigurations: IResolvable)

      public fun aggregationSortConfigurations(aggregationSortConfigurations: List<Any>)

      public fun aggregationSortConfigurations(vararg aggregationSortConfigurations: Any)

      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de165dc2b3021765b89f4c4472cb1032b185b985fb743deb32cd6664232841b4")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun filterId(filterId: String)

      public fun limit(limit: Number)

      public fun parameterName(parameterName: String)

      public fun timeGranularity(timeGranularity: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomFilterProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomFilterProperty.builder()

      override fun aggregationSortConfigurations(aggregationSortConfigurations: IResolvable) {
        cdkBuilder.aggregationSortConfigurations(aggregationSortConfigurations.let(IResolvable::unwrap))
      }

      override fun aggregationSortConfigurations(aggregationSortConfigurations: List<Any>) {
        cdkBuilder.aggregationSortConfigurations(aggregationSortConfigurations)
      }

      override fun aggregationSortConfigurations(vararg aggregationSortConfigurations: Any): Unit =
          aggregationSortConfigurations(aggregationSortConfigurations.toList())

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("de165dc2b3021765b89f4c4472cb1032b185b985fb743deb32cd6664232841b4")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      override fun limit(limit: Number) {
        cdkBuilder.limit(limit)
      }

      override fun parameterName(parameterName: String) {
        cdkBuilder.parameterName(parameterName)
      }

      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomFilterProperty,
    ) : CdkObject(cdkObject), TopBottomFilterProperty {
      override fun aggregationSortConfigurations(): Any =
          unwrap(this).getAggregationSortConfigurations()

      override fun column(): Any = unwrap(this).getColumn()

      override fun filterId(): String = unwrap(this).getFilterId()

      override fun limit(): Number? = unwrap(this).getLimit()

      override fun parameterName(): String? = unwrap(this).getParameterName()

      override fun timeGranularity(): String? = unwrap(this).getTimeGranularity()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TopBottomFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomFilterProperty):
          TopBottomFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TopBottomFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomFilterProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TopBottomFilterProperty
    }
  }

  public interface SankeyDiagramVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: SankeyDiagramChartConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d8ff03c1d79f14b015ad16cc001b428d404dbe7a3119391f8b41b784732c532c")
      public
          fun chartConfiguration(chartConfiguration: SankeyDiagramChartConfigurationProperty.Builder.() -> Unit)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("21ec3ff8a484ec5cdd7af570f41d8483e73fb0dacc10121886955dead4f7a8c2")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("71e658e2c400e1aa2d826dd00cd0e516a2d564b49dfdb202e1cb6aa53fe6d2b0")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramVisualProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: SankeyDiagramChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(SankeyDiagramChartConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d8ff03c1d79f14b015ad16cc001b428d404dbe7a3119391f8b41b784732c532c")
      override
          fun chartConfiguration(chartConfiguration: SankeyDiagramChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(SankeyDiagramChartConfigurationProperty(chartConfiguration))

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("21ec3ff8a484ec5cdd7af570f41d8483e73fb0dacc10121886955dead4f7a8c2")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("71e658e2c400e1aa2d826dd00cd0e516a2d564b49dfdb202e1cb6aa53fe6d2b0")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramVisualProperty,
    ) : CdkObject(cdkObject), SankeyDiagramVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SankeyDiagramVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramVisualProperty):
          SankeyDiagramVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SankeyDiagramVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramVisualProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramVisualProperty
    }
  }

  public interface DefaultPaginatedLayoutConfigurationProperty {
    public fun sectionBased(): Any? = unwrap(this).getSectionBased()

    @CdkDslMarker
    public interface Builder {
      public fun sectionBased(sectionBased: IResolvable)

      public fun sectionBased(sectionBased: DefaultSectionBasedLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8c9a6a413c57a6870cd1efbe004e6382b65cbcf11d8e81421f21c51b437ac638")
      public
          fun sectionBased(sectionBased: DefaultSectionBasedLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultPaginatedLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultPaginatedLayoutConfigurationProperty.builder()

      override fun sectionBased(sectionBased: IResolvable) {
        cdkBuilder.sectionBased(sectionBased.let(IResolvable::unwrap))
      }

      override fun sectionBased(sectionBased: DefaultSectionBasedLayoutConfigurationProperty) {
        cdkBuilder.sectionBased(sectionBased.let(DefaultSectionBasedLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8c9a6a413c57a6870cd1efbe004e6382b65cbcf11d8e81421f21c51b437ac638")
      override
          fun sectionBased(sectionBased: DefaultSectionBasedLayoutConfigurationProperty.Builder.() -> Unit):
          Unit = sectionBased(DefaultSectionBasedLayoutConfigurationProperty(sectionBased))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultPaginatedLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultPaginatedLayoutConfigurationProperty,
    ) : CdkObject(cdkObject), DefaultPaginatedLayoutConfigurationProperty {
      override fun sectionBased(): Any? = unwrap(this).getSectionBased()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DefaultPaginatedLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultPaginatedLayoutConfigurationProperty):
          DefaultPaginatedLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DefaultPaginatedLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultPaginatedLayoutConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultPaginatedLayoutConfigurationProperty
    }
  }

  public interface ParameterControlProperty {
    public fun dateTimePicker(): Any? = unwrap(this).getDateTimePicker()

    public fun dropdown(): Any? = unwrap(this).getDropdown()

    public fun list(): Any? = unwrap(this).getList()

    public fun slider(): Any? = unwrap(this).getSlider()

    public fun textArea(): Any? = unwrap(this).getTextArea()

    public fun textField(): Any? = unwrap(this).getTextField()

    @CdkDslMarker
    public interface Builder {
      public fun dateTimePicker(dateTimePicker: IResolvable)

      public fun dateTimePicker(dateTimePicker: ParameterDateTimePickerControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2800558e8fa7fa61d80b1099f84927ba7f52d555e62cf55a6aa2ff75710bd39e")
      public
          fun dateTimePicker(dateTimePicker: ParameterDateTimePickerControlProperty.Builder.() -> Unit)

      public fun dropdown(dropdown: IResolvable)

      public fun dropdown(dropdown: ParameterDropDownControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a9be4ad40e0e3af674fd23a7ca2cfba755d99bb3d8adc1d38661a6f64d9acb9a")
      public fun dropdown(dropdown: ParameterDropDownControlProperty.Builder.() -> Unit)

      public fun list(list: IResolvable)

      public fun list(list: ParameterListControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8a25363a54fc421c157e750580c4d5036b3fe66dedf6495a3132a74f1af30d16")
      public fun list(list: ParameterListControlProperty.Builder.() -> Unit)

      public fun slider(slider: IResolvable)

      public fun slider(slider: ParameterSliderControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93cdab14f4767618280b92edba0bfdf9e18f530887f70a4d56dd91957531a446")
      public fun slider(slider: ParameterSliderControlProperty.Builder.() -> Unit)

      public fun textArea(textArea: IResolvable)

      public fun textArea(textArea: ParameterTextAreaControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be6ccd87631388470a6325c04693b8cc2bc4c4debb52f2d38bdfa1323f22eb6d")
      public fun textArea(textArea: ParameterTextAreaControlProperty.Builder.() -> Unit)

      public fun textField(textField: IResolvable)

      public fun textField(textField: ParameterTextFieldControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ca06e7bc503cdce16343f0d62e23d65a407e700ec372e848625ecbcf8bbd82ec")
      public fun textField(textField: ParameterTextFieldControlProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterControlProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterControlProperty.builder()

      override fun dateTimePicker(dateTimePicker: IResolvable) {
        cdkBuilder.dateTimePicker(dateTimePicker.let(IResolvable::unwrap))
      }

      override fun dateTimePicker(dateTimePicker: ParameterDateTimePickerControlProperty) {
        cdkBuilder.dateTimePicker(dateTimePicker.let(ParameterDateTimePickerControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2800558e8fa7fa61d80b1099f84927ba7f52d555e62cf55a6aa2ff75710bd39e")
      override
          fun dateTimePicker(dateTimePicker: ParameterDateTimePickerControlProperty.Builder.() -> Unit):
          Unit = dateTimePicker(ParameterDateTimePickerControlProperty(dateTimePicker))

      override fun dropdown(dropdown: IResolvable) {
        cdkBuilder.dropdown(dropdown.let(IResolvable::unwrap))
      }

      override fun dropdown(dropdown: ParameterDropDownControlProperty) {
        cdkBuilder.dropdown(dropdown.let(ParameterDropDownControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a9be4ad40e0e3af674fd23a7ca2cfba755d99bb3d8adc1d38661a6f64d9acb9a")
      override fun dropdown(dropdown: ParameterDropDownControlProperty.Builder.() -> Unit): Unit =
          dropdown(ParameterDropDownControlProperty(dropdown))

      override fun list(list: IResolvable) {
        cdkBuilder.list(list.let(IResolvable::unwrap))
      }

      override fun list(list: ParameterListControlProperty) {
        cdkBuilder.list(list.let(ParameterListControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8a25363a54fc421c157e750580c4d5036b3fe66dedf6495a3132a74f1af30d16")
      override fun list(list: ParameterListControlProperty.Builder.() -> Unit): Unit =
          list(ParameterListControlProperty(list))

      override fun slider(slider: IResolvable) {
        cdkBuilder.slider(slider.let(IResolvable::unwrap))
      }

      override fun slider(slider: ParameterSliderControlProperty) {
        cdkBuilder.slider(slider.let(ParameterSliderControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("93cdab14f4767618280b92edba0bfdf9e18f530887f70a4d56dd91957531a446")
      override fun slider(slider: ParameterSliderControlProperty.Builder.() -> Unit): Unit =
          slider(ParameterSliderControlProperty(slider))

      override fun textArea(textArea: IResolvable) {
        cdkBuilder.textArea(textArea.let(IResolvable::unwrap))
      }

      override fun textArea(textArea: ParameterTextAreaControlProperty) {
        cdkBuilder.textArea(textArea.let(ParameterTextAreaControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be6ccd87631388470a6325c04693b8cc2bc4c4debb52f2d38bdfa1323f22eb6d")
      override fun textArea(textArea: ParameterTextAreaControlProperty.Builder.() -> Unit): Unit =
          textArea(ParameterTextAreaControlProperty(textArea))

      override fun textField(textField: IResolvable) {
        cdkBuilder.textField(textField.let(IResolvable::unwrap))
      }

      override fun textField(textField: ParameterTextFieldControlProperty) {
        cdkBuilder.textField(textField.let(ParameterTextFieldControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ca06e7bc503cdce16343f0d62e23d65a407e700ec372e848625ecbcf8bbd82ec")
      override fun textField(textField: ParameterTextFieldControlProperty.Builder.() -> Unit): Unit
          = textField(ParameterTextFieldControlProperty(textField))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterControlProperty,
    ) : CdkObject(cdkObject), ParameterControlProperty {
      override fun dateTimePicker(): Any? = unwrap(this).getDateTimePicker()

      override fun dropdown(): Any? = unwrap(this).getDropdown()

      override fun list(): Any? = unwrap(this).getList()

      override fun slider(): Any? = unwrap(this).getSlider()

      override fun textArea(): Any? = unwrap(this).getTextArea()

      override fun textField(): Any? = unwrap(this).getTextField()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ParameterControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterControlProperty):
          ParameterControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterControlProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterControlProperty
    }
  }

  public interface TableInlineVisualizationProperty {
    public fun dataBars(): Any? = unwrap(this).getDataBars()

    @CdkDslMarker
    public interface Builder {
      public fun dataBars(dataBars: IResolvable)

      public fun dataBars(dataBars: DataBarsOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("07c592447d989af14488e9c77f6742329b7045b70dbe13860d552dfe04760662")
      public fun dataBars(dataBars: DataBarsOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableInlineVisualizationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableInlineVisualizationProperty.builder()

      override fun dataBars(dataBars: IResolvable) {
        cdkBuilder.dataBars(dataBars.let(IResolvable::unwrap))
      }

      override fun dataBars(dataBars: DataBarsOptionsProperty) {
        cdkBuilder.dataBars(dataBars.let(DataBarsOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("07c592447d989af14488e9c77f6742329b7045b70dbe13860d552dfe04760662")
      override fun dataBars(dataBars: DataBarsOptionsProperty.Builder.() -> Unit): Unit =
          dataBars(DataBarsOptionsProperty(dataBars))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableInlineVisualizationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableInlineVisualizationProperty,
    ) : CdkObject(cdkObject), TableInlineVisualizationProperty {
      override fun dataBars(): Any? = unwrap(this).getDataBars()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TableInlineVisualizationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableInlineVisualizationProperty):
          TableInlineVisualizationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableInlineVisualizationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableInlineVisualizationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableInlineVisualizationProperty
    }
  }

  public interface DataLabelOptionsProperty {
    public fun categoryLabelVisibility(): String? = unwrap(this).getCategoryLabelVisibility()

    public fun dataLabelTypes(): Any? = unwrap(this).getDataLabelTypes()

    public fun labelColor(): String? = unwrap(this).getLabelColor()

    public fun labelContent(): String? = unwrap(this).getLabelContent()

    public fun labelFontConfiguration(): Any? = unwrap(this).getLabelFontConfiguration()

    public fun measureLabelVisibility(): String? = unwrap(this).getMeasureLabelVisibility()

    public fun overlap(): String? = unwrap(this).getOverlap()

    public fun position(): String? = unwrap(this).getPosition()

    public fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun categoryLabelVisibility(categoryLabelVisibility: String)

      public fun dataLabelTypes(dataLabelTypes: IResolvable)

      public fun dataLabelTypes(dataLabelTypes: List<Any>)

      public fun dataLabelTypes(vararg dataLabelTypes: Any)

      public fun labelColor(labelColor: String)

      public fun labelContent(labelContent: String)

      public fun labelFontConfiguration(labelFontConfiguration: IResolvable)

      public fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("814171600959e02d4152e1b9c5802c10adbc3462e7c6e31ac439d2d58ae80382")
      public
          fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      public fun measureLabelVisibility(measureLabelVisibility: String)

      public fun overlap(overlap: String)

      public fun position(position: String)

      public fun totalsVisibility(totalsVisibility: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelOptionsProperty.builder()

      override fun categoryLabelVisibility(categoryLabelVisibility: String) {
        cdkBuilder.categoryLabelVisibility(categoryLabelVisibility)
      }

      override fun dataLabelTypes(dataLabelTypes: IResolvable) {
        cdkBuilder.dataLabelTypes(dataLabelTypes.let(IResolvable::unwrap))
      }

      override fun dataLabelTypes(dataLabelTypes: List<Any>) {
        cdkBuilder.dataLabelTypes(dataLabelTypes)
      }

      override fun dataLabelTypes(vararg dataLabelTypes: Any): Unit =
          dataLabelTypes(dataLabelTypes.toList())

      override fun labelColor(labelColor: String) {
        cdkBuilder.labelColor(labelColor)
      }

      override fun labelContent(labelContent: String) {
        cdkBuilder.labelContent(labelContent)
      }

      override fun labelFontConfiguration(labelFontConfiguration: IResolvable) {
        cdkBuilder.labelFontConfiguration(labelFontConfiguration.let(IResolvable::unwrap))
      }

      override fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty) {
        cdkBuilder.labelFontConfiguration(labelFontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("814171600959e02d4152e1b9c5802c10adbc3462e7c6e31ac439d2d58ae80382")
      override
          fun labelFontConfiguration(labelFontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = labelFontConfiguration(FontConfigurationProperty(labelFontConfiguration))

      override fun measureLabelVisibility(measureLabelVisibility: String) {
        cdkBuilder.measureLabelVisibility(measureLabelVisibility)
      }

      override fun overlap(overlap: String) {
        cdkBuilder.overlap(overlap)
      }

      override fun position(position: String) {
        cdkBuilder.position(position)
      }

      override fun totalsVisibility(totalsVisibility: String) {
        cdkBuilder.totalsVisibility(totalsVisibility)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelOptionsProperty,
    ) : CdkObject(cdkObject), DataLabelOptionsProperty {
      override fun categoryLabelVisibility(): String? = unwrap(this).getCategoryLabelVisibility()

      override fun dataLabelTypes(): Any? = unwrap(this).getDataLabelTypes()

      override fun labelColor(): String? = unwrap(this).getLabelColor()

      override fun labelContent(): String? = unwrap(this).getLabelContent()

      override fun labelFontConfiguration(): Any? = unwrap(this).getLabelFontConfiguration()

      override fun measureLabelVisibility(): String? = unwrap(this).getMeasureLabelVisibility()

      override fun overlap(): String? = unwrap(this).getOverlap()

      override fun position(): String? = unwrap(this).getPosition()

      override fun totalsVisibility(): String? = unwrap(this).getTotalsVisibility()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelOptionsProperty):
          DataLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataLabelOptionsProperty
    }
  }

  public interface AttributeAggregationFunctionProperty {
    public fun simpleAttributeAggregation(): String? = unwrap(this).getSimpleAttributeAggregation()

    public fun valueForMultipleValues(): String? = unwrap(this).getValueForMultipleValues()

    @CdkDslMarker
    public interface Builder {
      public fun simpleAttributeAggregation(simpleAttributeAggregation: String)

      public fun valueForMultipleValues(valueForMultipleValues: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AttributeAggregationFunctionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AttributeAggregationFunctionProperty.builder()

      override fun simpleAttributeAggregation(simpleAttributeAggregation: String) {
        cdkBuilder.simpleAttributeAggregation(simpleAttributeAggregation)
      }

      override fun valueForMultipleValues(valueForMultipleValues: String) {
        cdkBuilder.valueForMultipleValues(valueForMultipleValues)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AttributeAggregationFunctionProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AttributeAggregationFunctionProperty,
    ) : CdkObject(cdkObject), AttributeAggregationFunctionProperty {
      override fun simpleAttributeAggregation(): String? =
          unwrap(this).getSimpleAttributeAggregation()

      override fun valueForMultipleValues(): String? = unwrap(this).getValueForMultipleValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          AttributeAggregationFunctionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AttributeAggregationFunctionProperty):
          AttributeAggregationFunctionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AttributeAggregationFunctionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AttributeAggregationFunctionProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AttributeAggregationFunctionProperty
    }
  }

  public interface DateTimeParameterDeclarationProperty {
    public fun defaultValues(): Any? = unwrap(this).getDefaultValues()

    public fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

    public fun name(): String

    public fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

    public fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()

    @CdkDslMarker
    public interface Builder {
      public fun defaultValues(defaultValues: IResolvable)

      public fun defaultValues(defaultValues: DateTimeDefaultValuesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d8fcf1e480ada30e9637e89c119a8be9be8906570294100cda0ebacbf78c089f")
      public fun defaultValues(defaultValues: DateTimeDefaultValuesProperty.Builder.() -> Unit)

      public fun mappedDataSetParameters(mappedDataSetParameters: IResolvable)

      public fun mappedDataSetParameters(mappedDataSetParameters: List<Any>)

      public fun mappedDataSetParameters(vararg mappedDataSetParameters: Any)

      public fun name(name: String)

      public fun timeGranularity(timeGranularity: String)

      public fun valueWhenUnset(valueWhenUnset: IResolvable)

      public fun valueWhenUnset(valueWhenUnset: DateTimeValueWhenUnsetConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f8c4d7e8a66666f0ef3cc21072deb09177aee31fcbd30981b51b7d0feb5ea21c")
      public
          fun valueWhenUnset(valueWhenUnset: DateTimeValueWhenUnsetConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeParameterDeclarationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeParameterDeclarationProperty.builder()

      override fun defaultValues(defaultValues: IResolvable) {
        cdkBuilder.defaultValues(defaultValues.let(IResolvable::unwrap))
      }

      override fun defaultValues(defaultValues: DateTimeDefaultValuesProperty) {
        cdkBuilder.defaultValues(defaultValues.let(DateTimeDefaultValuesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d8fcf1e480ada30e9637e89c119a8be9be8906570294100cda0ebacbf78c089f")
      override fun defaultValues(defaultValues: DateTimeDefaultValuesProperty.Builder.() -> Unit):
          Unit = defaultValues(DateTimeDefaultValuesProperty(defaultValues))

      override fun mappedDataSetParameters(mappedDataSetParameters: IResolvable) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters.let(IResolvable::unwrap))
      }

      override fun mappedDataSetParameters(mappedDataSetParameters: List<Any>) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters)
      }

      override fun mappedDataSetParameters(vararg mappedDataSetParameters: Any): Unit =
          mappedDataSetParameters(mappedDataSetParameters.toList())

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      override fun valueWhenUnset(valueWhenUnset: IResolvable) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(IResolvable::unwrap))
      }

      override fun valueWhenUnset(valueWhenUnset: DateTimeValueWhenUnsetConfigurationProperty) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(DateTimeValueWhenUnsetConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f8c4d7e8a66666f0ef3cc21072deb09177aee31fcbd30981b51b7d0feb5ea21c")
      override
          fun valueWhenUnset(valueWhenUnset: DateTimeValueWhenUnsetConfigurationProperty.Builder.() -> Unit):
          Unit = valueWhenUnset(DateTimeValueWhenUnsetConfigurationProperty(valueWhenUnset))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeParameterDeclarationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeParameterDeclarationProperty,
    ) : CdkObject(cdkObject), DateTimeParameterDeclarationProperty {
      override fun defaultValues(): Any? = unwrap(this).getDefaultValues()

      override fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

      override fun name(): String = unwrap(this).getName()

      override fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

      override fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DateTimeParameterDeclarationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeParameterDeclarationProperty):
          DateTimeParameterDeclarationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimeParameterDeclarationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeParameterDeclarationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeParameterDeclarationProperty
    }
  }

  public interface ReferenceLineStyleConfigurationProperty {
    public fun color(): String? = unwrap(this).getColor()

    public fun pattern(): String? = unwrap(this).getPattern()

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)

      public fun pattern(pattern: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStyleConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStyleConfigurationProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      override fun pattern(pattern: String) {
        cdkBuilder.pattern(pattern)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStyleConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStyleConfigurationProperty,
    ) : CdkObject(cdkObject), ReferenceLineStyleConfigurationProperty {
      override fun color(): String? = unwrap(this).getColor()

      override fun pattern(): String? = unwrap(this).getPattern()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineStyleConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStyleConfigurationProperty):
          ReferenceLineStyleConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineStyleConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStyleConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineStyleConfigurationProperty
    }
  }

  public interface WordCloudAggregatedFieldWellsProperty {
    public fun groupBy(): Any? = unwrap(this).getGroupBy()

    public fun size(): Any? = unwrap(this).getSize()

    @CdkDslMarker
    public interface Builder {
      public fun groupBy(groupBy: IResolvable)

      public fun groupBy(groupBy: List<Any>)

      public fun groupBy(vararg groupBy: Any)

      public fun size(size: IResolvable)

      public fun size(size: List<Any>)

      public fun size(vararg size: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudAggregatedFieldWellsProperty.builder()

      override fun groupBy(groupBy: IResolvable) {
        cdkBuilder.groupBy(groupBy.let(IResolvable::unwrap))
      }

      override fun groupBy(groupBy: List<Any>) {
        cdkBuilder.groupBy(groupBy)
      }

      override fun groupBy(vararg groupBy: Any): Unit = groupBy(groupBy.toList())

      override fun size(size: IResolvable) {
        cdkBuilder.size(size.let(IResolvable::unwrap))
      }

      override fun size(size: List<Any>) {
        cdkBuilder.size(size)
      }

      override fun size(vararg size: Any): Unit = size(size.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), WordCloudAggregatedFieldWellsProperty {
      override fun groupBy(): Any? = unwrap(this).getGroupBy()

      override fun size(): Any? = unwrap(this).getSize()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          WordCloudAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudAggregatedFieldWellsProperty):
          WordCloudAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WordCloudAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudAggregatedFieldWellsProperty
    }
  }

  public interface DataPathSortProperty {
    public fun direction(): String

    public fun sortPaths(): Any

    @CdkDslMarker
    public interface Builder {
      public fun direction(direction: String)

      public fun sortPaths(sortPaths: IResolvable)

      public fun sortPaths(sortPaths: List<Any>)

      public fun sortPaths(vararg sortPaths: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathSortProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathSortProperty.builder()

      override fun direction(direction: String) {
        cdkBuilder.direction(direction)
      }

      override fun sortPaths(sortPaths: IResolvable) {
        cdkBuilder.sortPaths(sortPaths.let(IResolvable::unwrap))
      }

      override fun sortPaths(sortPaths: List<Any>) {
        cdkBuilder.sortPaths(sortPaths)
      }

      override fun sortPaths(vararg sortPaths: Any): Unit = sortPaths(sortPaths.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathSortProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathSortProperty,
    ) : CdkObject(cdkObject), DataPathSortProperty {
      override fun direction(): String = unwrap(this).getDirection()

      override fun sortPaths(): Any = unwrap(this).getSortPaths()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataPathSortProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathSortProperty):
          DataPathSortProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataPathSortProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathSortProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathSortProperty
    }
  }

  public interface GeospatialHeatmapDataColorProperty {
    public fun color(): String

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapDataColorProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapDataColorProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapDataColorProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapDataColorProperty,
    ) : CdkObject(cdkObject), GeospatialHeatmapDataColorProperty {
      override fun color(): String = unwrap(this).getColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialHeatmapDataColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapDataColorProperty):
          GeospatialHeatmapDataColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialHeatmapDataColorProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapDataColorProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapDataColorProperty
    }
  }

  public interface LineChartFieldWellsProperty {
    public fun lineChartAggregatedFieldWells(): Any? =
        unwrap(this).getLineChartAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun lineChartAggregatedFieldWells(lineChartAggregatedFieldWells: IResolvable)

      public
          fun lineChartAggregatedFieldWells(lineChartAggregatedFieldWells: LineChartAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ac912d0f5edd416c891447c295134a9f9aded44515cf81ab6302b02387a1cd2")
      public
          fun lineChartAggregatedFieldWells(lineChartAggregatedFieldWells: LineChartAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartFieldWellsProperty.builder()

      override fun lineChartAggregatedFieldWells(lineChartAggregatedFieldWells: IResolvable) {
        cdkBuilder.lineChartAggregatedFieldWells(lineChartAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun lineChartAggregatedFieldWells(lineChartAggregatedFieldWells: LineChartAggregatedFieldWellsProperty) {
        cdkBuilder.lineChartAggregatedFieldWells(lineChartAggregatedFieldWells.let(LineChartAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7ac912d0f5edd416c891447c295134a9f9aded44515cf81ab6302b02387a1cd2")
      override
          fun lineChartAggregatedFieldWells(lineChartAggregatedFieldWells: LineChartAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          lineChartAggregatedFieldWells(LineChartAggregatedFieldWellsProperty(lineChartAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartFieldWellsProperty,
    ) : CdkObject(cdkObject), LineChartFieldWellsProperty {
      override fun lineChartAggregatedFieldWells(): Any? =
          unwrap(this).getLineChartAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): LineChartFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartFieldWellsProperty):
          LineChartFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartFieldWellsProperty
    }
  }

  public interface DataColorProperty {
    public fun color(): String? = unwrap(this).getColor()

    public fun dataValue(): Number? = unwrap(this).getDataValue()

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)

      public fun dataValue(dataValue: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataColorProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataColorProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      override fun dataValue(dataValue: Number) {
        cdkBuilder.dataValue(dataValue)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.DataColorProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataColorProperty,
    ) : CdkObject(cdkObject), DataColorProperty {
      override fun color(): String? = unwrap(this).getColor()

      override fun dataValue(): Number? = unwrap(this).getDataValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataColorProperty):
          DataColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataColorProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataColorProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataColorProperty
    }
  }

  public interface StringParameterDeclarationProperty {
    public fun defaultValues(): Any? = unwrap(this).getDefaultValues()

    public fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

    public fun name(): String

    public fun parameterValueType(): String

    public fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()

    @CdkDslMarker
    public interface Builder {
      public fun defaultValues(defaultValues: IResolvable)

      public fun defaultValues(defaultValues: StringDefaultValuesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("41b8f1cbe11f80d6129110b452ab3d0bfdec133f7c59347385bd9436479e19a8")
      public fun defaultValues(defaultValues: StringDefaultValuesProperty.Builder.() -> Unit)

      public fun mappedDataSetParameters(mappedDataSetParameters: IResolvable)

      public fun mappedDataSetParameters(mappedDataSetParameters: List<Any>)

      public fun mappedDataSetParameters(vararg mappedDataSetParameters: Any)

      public fun name(name: String)

      public fun parameterValueType(parameterValueType: String)

      public fun valueWhenUnset(valueWhenUnset: IResolvable)

      public fun valueWhenUnset(valueWhenUnset: StringValueWhenUnsetConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cbc02def5642676ad1fe7ba4573172bc050cffed539ada8c1872350b06ae146e")
      public
          fun valueWhenUnset(valueWhenUnset: StringValueWhenUnsetConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringParameterDeclarationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringParameterDeclarationProperty.builder()

      override fun defaultValues(defaultValues: IResolvable) {
        cdkBuilder.defaultValues(defaultValues.let(IResolvable::unwrap))
      }

      override fun defaultValues(defaultValues: StringDefaultValuesProperty) {
        cdkBuilder.defaultValues(defaultValues.let(StringDefaultValuesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("41b8f1cbe11f80d6129110b452ab3d0bfdec133f7c59347385bd9436479e19a8")
      override fun defaultValues(defaultValues: StringDefaultValuesProperty.Builder.() -> Unit):
          Unit = defaultValues(StringDefaultValuesProperty(defaultValues))

      override fun mappedDataSetParameters(mappedDataSetParameters: IResolvable) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters.let(IResolvable::unwrap))
      }

      override fun mappedDataSetParameters(mappedDataSetParameters: List<Any>) {
        cdkBuilder.mappedDataSetParameters(mappedDataSetParameters)
      }

      override fun mappedDataSetParameters(vararg mappedDataSetParameters: Any): Unit =
          mappedDataSetParameters(mappedDataSetParameters.toList())

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun parameterValueType(parameterValueType: String) {
        cdkBuilder.parameterValueType(parameterValueType)
      }

      override fun valueWhenUnset(valueWhenUnset: IResolvable) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(IResolvable::unwrap))
      }

      override fun valueWhenUnset(valueWhenUnset: StringValueWhenUnsetConfigurationProperty) {
        cdkBuilder.valueWhenUnset(valueWhenUnset.let(StringValueWhenUnsetConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cbc02def5642676ad1fe7ba4573172bc050cffed539ada8c1872350b06ae146e")
      override
          fun valueWhenUnset(valueWhenUnset: StringValueWhenUnsetConfigurationProperty.Builder.() -> Unit):
          Unit = valueWhenUnset(StringValueWhenUnsetConfigurationProperty(valueWhenUnset))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringParameterDeclarationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringParameterDeclarationProperty,
    ) : CdkObject(cdkObject), StringParameterDeclarationProperty {
      override fun defaultValues(): Any? = unwrap(this).getDefaultValues()

      override fun mappedDataSetParameters(): Any? = unwrap(this).getMappedDataSetParameters()

      override fun name(): String = unwrap(this).getName()

      override fun parameterValueType(): String = unwrap(this).getParameterValueType()

      override fun valueWhenUnset(): Any? = unwrap(this).getValueWhenUnset()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          StringParameterDeclarationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.StringParameterDeclarationProperty):
          StringParameterDeclarationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: StringParameterDeclarationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringParameterDeclarationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.StringParameterDeclarationProperty
    }
  }

  public interface TablePaginatedReportOptionsProperty {
    public fun overflowColumnHeaderVisibility(): String? =
        unwrap(this).getOverflowColumnHeaderVisibility()

    public fun verticalOverflowVisibility(): String? = unwrap(this).getVerticalOverflowVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun overflowColumnHeaderVisibility(overflowColumnHeaderVisibility: String)

      public fun verticalOverflowVisibility(verticalOverflowVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TablePaginatedReportOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TablePaginatedReportOptionsProperty.builder()

      override fun overflowColumnHeaderVisibility(overflowColumnHeaderVisibility: String) {
        cdkBuilder.overflowColumnHeaderVisibility(overflowColumnHeaderVisibility)
      }

      override fun verticalOverflowVisibility(verticalOverflowVisibility: String) {
        cdkBuilder.verticalOverflowVisibility(verticalOverflowVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TablePaginatedReportOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TablePaginatedReportOptionsProperty,
    ) : CdkObject(cdkObject), TablePaginatedReportOptionsProperty {
      override fun overflowColumnHeaderVisibility(): String? =
          unwrap(this).getOverflowColumnHeaderVisibility()

      override fun verticalOverflowVisibility(): String? =
          unwrap(this).getVerticalOverflowVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TablePaginatedReportOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TablePaginatedReportOptionsProperty):
          TablePaginatedReportOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TablePaginatedReportOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TablePaginatedReportOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TablePaginatedReportOptionsProperty
    }
  }

  public interface TableCellStyleProperty {
    public fun backgroundColor(): String? = unwrap(this).getBackgroundColor()

    public fun border(): Any? = unwrap(this).getBorder()

    public fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

    public fun height(): Number? = unwrap(this).getHeight()

    public fun horizontalTextAlignment(): String? = unwrap(this).getHorizontalTextAlignment()

    public fun textWrap(): String? = unwrap(this).getTextWrap()

    public fun verticalTextAlignment(): String? = unwrap(this).getVerticalTextAlignment()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun backgroundColor(backgroundColor: String)

      public fun border(border: IResolvable)

      public fun border(border: GlobalTableBorderOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("54dc81ce08e3cf57e4d2181f75edfa12aaf775aacad52f78395dd19159877661")
      public fun border(border: GlobalTableBorderOptionsProperty.Builder.() -> Unit)

      public fun fontConfiguration(fontConfiguration: IResolvable)

      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6abaf7333dde6f0b92c3ce98afe4c9fcc003ee139cf76f336a6afebeb31dd3d7")
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      public fun height(height: Number)

      public fun horizontalTextAlignment(horizontalTextAlignment: String)

      public fun textWrap(textWrap: String)

      public fun verticalTextAlignment(verticalTextAlignment: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellStyleProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellStyleProperty.builder()

      override fun backgroundColor(backgroundColor: String) {
        cdkBuilder.backgroundColor(backgroundColor)
      }

      override fun border(border: IResolvable) {
        cdkBuilder.border(border.let(IResolvable::unwrap))
      }

      override fun border(border: GlobalTableBorderOptionsProperty) {
        cdkBuilder.border(border.let(GlobalTableBorderOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("54dc81ce08e3cf57e4d2181f75edfa12aaf775aacad52f78395dd19159877661")
      override fun border(border: GlobalTableBorderOptionsProperty.Builder.() -> Unit): Unit =
          border(GlobalTableBorderOptionsProperty(border))

      override fun fontConfiguration(fontConfiguration: IResolvable) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(IResolvable::unwrap))
      }

      override fun fontConfiguration(fontConfiguration: FontConfigurationProperty) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6abaf7333dde6f0b92c3ce98afe4c9fcc003ee139cf76f336a6afebeb31dd3d7")
      override
          fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = fontConfiguration(FontConfigurationProperty(fontConfiguration))

      override fun height(height: Number) {
        cdkBuilder.height(height)
      }

      override fun horizontalTextAlignment(horizontalTextAlignment: String) {
        cdkBuilder.horizontalTextAlignment(horizontalTextAlignment)
      }

      override fun textWrap(textWrap: String) {
        cdkBuilder.textWrap(textWrap)
      }

      override fun verticalTextAlignment(verticalTextAlignment: String) {
        cdkBuilder.verticalTextAlignment(verticalTextAlignment)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellStyleProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellStyleProperty,
    ) : CdkObject(cdkObject), TableCellStyleProperty {
      override fun backgroundColor(): String? = unwrap(this).getBackgroundColor()

      override fun border(): Any? = unwrap(this).getBorder()

      override fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

      override fun height(): Number? = unwrap(this).getHeight()

      override fun horizontalTextAlignment(): String? = unwrap(this).getHorizontalTextAlignment()

      override fun textWrap(): String? = unwrap(this).getTextWrap()

      override fun verticalTextAlignment(): String? = unwrap(this).getVerticalTextAlignment()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TableCellStyleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellStyleProperty):
          TableCellStyleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableCellStyleProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellStyleProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellStyleProperty
    }
  }

  public interface GlobalTableBorderOptionsProperty {
    public fun sideSpecificBorder(): Any? = unwrap(this).getSideSpecificBorder()

    public fun uniformBorder(): Any? = unwrap(this).getUniformBorder()

    @CdkDslMarker
    public interface Builder {
      public fun sideSpecificBorder(sideSpecificBorder: IResolvable)

      public fun sideSpecificBorder(sideSpecificBorder: TableSideBorderOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1cc20b3a74d77ec7db63da5ceb78a57537578e4a669f5e7183159764bd593e9a")
      public
          fun sideSpecificBorder(sideSpecificBorder: TableSideBorderOptionsProperty.Builder.() -> Unit)

      public fun uniformBorder(uniformBorder: IResolvable)

      public fun uniformBorder(uniformBorder: TableBorderOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("99ed20e87310d13fbea0eb82614b1129f34de50ab296d60fe4b4d1f08765a27a")
      public fun uniformBorder(uniformBorder: TableBorderOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GlobalTableBorderOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GlobalTableBorderOptionsProperty.builder()

      override fun sideSpecificBorder(sideSpecificBorder: IResolvable) {
        cdkBuilder.sideSpecificBorder(sideSpecificBorder.let(IResolvable::unwrap))
      }

      override fun sideSpecificBorder(sideSpecificBorder: TableSideBorderOptionsProperty) {
        cdkBuilder.sideSpecificBorder(sideSpecificBorder.let(TableSideBorderOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1cc20b3a74d77ec7db63da5ceb78a57537578e4a669f5e7183159764bd593e9a")
      override
          fun sideSpecificBorder(sideSpecificBorder: TableSideBorderOptionsProperty.Builder.() -> Unit):
          Unit = sideSpecificBorder(TableSideBorderOptionsProperty(sideSpecificBorder))

      override fun uniformBorder(uniformBorder: IResolvable) {
        cdkBuilder.uniformBorder(uniformBorder.let(IResolvable::unwrap))
      }

      override fun uniformBorder(uniformBorder: TableBorderOptionsProperty) {
        cdkBuilder.uniformBorder(uniformBorder.let(TableBorderOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("99ed20e87310d13fbea0eb82614b1129f34de50ab296d60fe4b4d1f08765a27a")
      override fun uniformBorder(uniformBorder: TableBorderOptionsProperty.Builder.() -> Unit): Unit
          = uniformBorder(TableBorderOptionsProperty(uniformBorder))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GlobalTableBorderOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GlobalTableBorderOptionsProperty,
    ) : CdkObject(cdkObject), GlobalTableBorderOptionsProperty {
      override fun sideSpecificBorder(): Any? = unwrap(this).getSideSpecificBorder()

      override fun uniformBorder(): Any? = unwrap(this).getUniformBorder()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GlobalTableBorderOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GlobalTableBorderOptionsProperty):
          GlobalTableBorderOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GlobalTableBorderOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GlobalTableBorderOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GlobalTableBorderOptionsProperty
    }
  }

  public interface FilterControlProperty {
    public fun dateTimePicker(): Any? = unwrap(this).getDateTimePicker()

    public fun dropdown(): Any? = unwrap(this).getDropdown()

    public fun list(): Any? = unwrap(this).getList()

    public fun relativeDateTime(): Any? = unwrap(this).getRelativeDateTime()

    public fun slider(): Any? = unwrap(this).getSlider()

    public fun textArea(): Any? = unwrap(this).getTextArea()

    public fun textField(): Any? = unwrap(this).getTextField()

    @CdkDslMarker
    public interface Builder {
      public fun dateTimePicker(dateTimePicker: IResolvable)

      public fun dateTimePicker(dateTimePicker: FilterDateTimePickerControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9729875ee734a19b47342940f11839147645664a9780b3edd48d0cfb15f7b397")
      public
          fun dateTimePicker(dateTimePicker: FilterDateTimePickerControlProperty.Builder.() -> Unit)

      public fun dropdown(dropdown: IResolvable)

      public fun dropdown(dropdown: FilterDropDownControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("56b27158306bcf517357403acfc5e71122e449e6b5774733375d9b33d6e1ed6e")
      public fun dropdown(dropdown: FilterDropDownControlProperty.Builder.() -> Unit)

      public fun list(list: IResolvable)

      public fun list(list: FilterListControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b888ddea4b9a47a2836de6af15846a734f2bb38c18285a2248fc606056bc38d4")
      public fun list(list: FilterListControlProperty.Builder.() -> Unit)

      public fun relativeDateTime(relativeDateTime: IResolvable)

      public fun relativeDateTime(relativeDateTime: FilterRelativeDateTimeControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3a3f7b25df7fe4135351cf456aa91c81bf1d209edc9414dc687b3ce6b7548462")
      public
          fun relativeDateTime(relativeDateTime: FilterRelativeDateTimeControlProperty.Builder.() -> Unit)

      public fun slider(slider: IResolvable)

      public fun slider(slider: FilterSliderControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a5905eacf9f09319602f14602add6152c7298772b93ef80279aeb28f732bba72")
      public fun slider(slider: FilterSliderControlProperty.Builder.() -> Unit)

      public fun textArea(textArea: IResolvable)

      public fun textArea(textArea: FilterTextAreaControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c7a1b80d956f8e1fd8376c2f4dd6937fbd782806bfb738e968a3cdb73969bb58")
      public fun textArea(textArea: FilterTextAreaControlProperty.Builder.() -> Unit)

      public fun textField(textField: IResolvable)

      public fun textField(textField: FilterTextFieldControlProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a53d134f92fb6cb80d83b5d3e9a8c520fe4f7c2f3c096bf8480e50de5e65da30")
      public fun textField(textField: FilterTextFieldControlProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterControlProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterControlProperty.builder()

      override fun dateTimePicker(dateTimePicker: IResolvable) {
        cdkBuilder.dateTimePicker(dateTimePicker.let(IResolvable::unwrap))
      }

      override fun dateTimePicker(dateTimePicker: FilterDateTimePickerControlProperty) {
        cdkBuilder.dateTimePicker(dateTimePicker.let(FilterDateTimePickerControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9729875ee734a19b47342940f11839147645664a9780b3edd48d0cfb15f7b397")
      override
          fun dateTimePicker(dateTimePicker: FilterDateTimePickerControlProperty.Builder.() -> Unit):
          Unit = dateTimePicker(FilterDateTimePickerControlProperty(dateTimePicker))

      override fun dropdown(dropdown: IResolvable) {
        cdkBuilder.dropdown(dropdown.let(IResolvable::unwrap))
      }

      override fun dropdown(dropdown: FilterDropDownControlProperty) {
        cdkBuilder.dropdown(dropdown.let(FilterDropDownControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("56b27158306bcf517357403acfc5e71122e449e6b5774733375d9b33d6e1ed6e")
      override fun dropdown(dropdown: FilterDropDownControlProperty.Builder.() -> Unit): Unit =
          dropdown(FilterDropDownControlProperty(dropdown))

      override fun list(list: IResolvable) {
        cdkBuilder.list(list.let(IResolvable::unwrap))
      }

      override fun list(list: FilterListControlProperty) {
        cdkBuilder.list(list.let(FilterListControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b888ddea4b9a47a2836de6af15846a734f2bb38c18285a2248fc606056bc38d4")
      override fun list(list: FilterListControlProperty.Builder.() -> Unit): Unit =
          list(FilterListControlProperty(list))

      override fun relativeDateTime(relativeDateTime: IResolvable) {
        cdkBuilder.relativeDateTime(relativeDateTime.let(IResolvable::unwrap))
      }

      override fun relativeDateTime(relativeDateTime: FilterRelativeDateTimeControlProperty) {
        cdkBuilder.relativeDateTime(relativeDateTime.let(FilterRelativeDateTimeControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3a3f7b25df7fe4135351cf456aa91c81bf1d209edc9414dc687b3ce6b7548462")
      override
          fun relativeDateTime(relativeDateTime: FilterRelativeDateTimeControlProperty.Builder.() -> Unit):
          Unit = relativeDateTime(FilterRelativeDateTimeControlProperty(relativeDateTime))

      override fun slider(slider: IResolvable) {
        cdkBuilder.slider(slider.let(IResolvable::unwrap))
      }

      override fun slider(slider: FilterSliderControlProperty) {
        cdkBuilder.slider(slider.let(FilterSliderControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a5905eacf9f09319602f14602add6152c7298772b93ef80279aeb28f732bba72")
      override fun slider(slider: FilterSliderControlProperty.Builder.() -> Unit): Unit =
          slider(FilterSliderControlProperty(slider))

      override fun textArea(textArea: IResolvable) {
        cdkBuilder.textArea(textArea.let(IResolvable::unwrap))
      }

      override fun textArea(textArea: FilterTextAreaControlProperty) {
        cdkBuilder.textArea(textArea.let(FilterTextAreaControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c7a1b80d956f8e1fd8376c2f4dd6937fbd782806bfb738e968a3cdb73969bb58")
      override fun textArea(textArea: FilterTextAreaControlProperty.Builder.() -> Unit): Unit =
          textArea(FilterTextAreaControlProperty(textArea))

      override fun textField(textField: IResolvable) {
        cdkBuilder.textField(textField.let(IResolvable::unwrap))
      }

      override fun textField(textField: FilterTextFieldControlProperty) {
        cdkBuilder.textField(textField.let(FilterTextFieldControlProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a53d134f92fb6cb80d83b5d3e9a8c520fe4f7c2f3c096bf8480e50de5e65da30")
      override fun textField(textField: FilterTextFieldControlProperty.Builder.() -> Unit): Unit =
          textField(FilterTextFieldControlProperty(textField))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterControlProperty,
    ) : CdkObject(cdkObject), FilterControlProperty {
      override fun dateTimePicker(): Any? = unwrap(this).getDateTimePicker()

      override fun dropdown(): Any? = unwrap(this).getDropdown()

      override fun list(): Any? = unwrap(this).getList()

      override fun relativeDateTime(): Any? = unwrap(this).getRelativeDateTime()

      override fun slider(): Any? = unwrap(this).getSlider()

      override fun textArea(): Any? = unwrap(this).getTextArea()

      override fun textField(): Any? = unwrap(this).getTextField()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilterControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterControlProperty):
          FilterControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterControlProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterControlProperty
    }
  }

  public interface KPIVisualStandardLayoutProperty {
    public fun type(): String

    @CdkDslMarker
    public interface Builder {
      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualStandardLayoutProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualStandardLayoutProperty.builder()

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualStandardLayoutProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualStandardLayoutProperty,
    ) : CdkObject(cdkObject), KPIVisualStandardLayoutProperty {
      override fun type(): String = unwrap(this).getType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): KPIVisualStandardLayoutProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualStandardLayoutProperty):
          KPIVisualStandardLayoutProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIVisualStandardLayoutProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualStandardLayoutProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIVisualStandardLayoutProperty
    }
  }

  public interface WhatIfRangeScenarioProperty {
    public fun endDate(): String

    public fun startDate(): String

    public fun `value`(): Number

    @CdkDslMarker
    public interface Builder {
      public fun endDate(endDate: String)

      public fun startDate(startDate: String)

      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfRangeScenarioProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfRangeScenarioProperty.builder()

      override fun endDate(endDate: String) {
        cdkBuilder.endDate(endDate)
      }

      override fun startDate(startDate: String) {
        cdkBuilder.startDate(startDate)
      }

      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfRangeScenarioProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfRangeScenarioProperty,
    ) : CdkObject(cdkObject), WhatIfRangeScenarioProperty {
      override fun endDate(): String = unwrap(this).getEndDate()

      override fun startDate(): String = unwrap(this).getStartDate()

      override fun `value`(): Number = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): WhatIfRangeScenarioProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfRangeScenarioProperty):
          WhatIfRangeScenarioProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WhatIfRangeScenarioProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfRangeScenarioProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfRangeScenarioProperty
    }
  }

  public interface ComparisonConfigurationProperty {
    public fun comparisonFormat(): Any? = unwrap(this).getComparisonFormat()

    public fun comparisonMethod(): String? = unwrap(this).getComparisonMethod()

    @CdkDslMarker
    public interface Builder {
      public fun comparisonFormat(comparisonFormat: IResolvable)

      public fun comparisonFormat(comparisonFormat: ComparisonFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c42d007c4e3f7978bcde8a934ad9b52a168806a547bd178c49683ef9ac90ec0c")
      public
          fun comparisonFormat(comparisonFormat: ComparisonFormatConfigurationProperty.Builder.() -> Unit)

      public fun comparisonMethod(comparisonMethod: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonConfigurationProperty.builder()

      override fun comparisonFormat(comparisonFormat: IResolvable) {
        cdkBuilder.comparisonFormat(comparisonFormat.let(IResolvable::unwrap))
      }

      override fun comparisonFormat(comparisonFormat: ComparisonFormatConfigurationProperty) {
        cdkBuilder.comparisonFormat(comparisonFormat.let(ComparisonFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c42d007c4e3f7978bcde8a934ad9b52a168806a547bd178c49683ef9ac90ec0c")
      override
          fun comparisonFormat(comparisonFormat: ComparisonFormatConfigurationProperty.Builder.() -> Unit):
          Unit = comparisonFormat(ComparisonFormatConfigurationProperty(comparisonFormat))

      override fun comparisonMethod(comparisonMethod: String) {
        cdkBuilder.comparisonMethod(comparisonMethod)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonConfigurationProperty,
    ) : CdkObject(cdkObject), ComparisonConfigurationProperty {
      override fun comparisonFormat(): Any? = unwrap(this).getComparisonFormat()

      override fun comparisonMethod(): String? = unwrap(this).getComparisonMethod()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ComparisonConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonConfigurationProperty):
          ComparisonConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComparisonConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComparisonConfigurationProperty
    }
  }

  public interface ColumnGroupColumnSchemaProperty {
    public fun name(): String? = unwrap(this).getName()

    @CdkDslMarker
    public interface Builder {
      public fun name(name: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupColumnSchemaProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupColumnSchemaProperty.builder()

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupColumnSchemaProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupColumnSchemaProperty,
    ) : CdkObject(cdkObject), ColumnGroupColumnSchemaProperty {
      override fun name(): String? = unwrap(this).getName()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnGroupColumnSchemaProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupColumnSchemaProperty):
          ColumnGroupColumnSchemaProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnGroupColumnSchemaProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupColumnSchemaProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnGroupColumnSchemaProperty
    }
  }

  public interface HeatMapFieldWellsProperty {
    public fun heatMapAggregatedFieldWells(): Any? = unwrap(this).getHeatMapAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun heatMapAggregatedFieldWells(heatMapAggregatedFieldWells: IResolvable)

      public
          fun heatMapAggregatedFieldWells(heatMapAggregatedFieldWells: HeatMapAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c650a06e70c65d415f4e3abcc9c931ceb4f2d5e6bfc93f064d9f9cbc68cbbc7")
      public
          fun heatMapAggregatedFieldWells(heatMapAggregatedFieldWells: HeatMapAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapFieldWellsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapFieldWellsProperty.builder()

      override fun heatMapAggregatedFieldWells(heatMapAggregatedFieldWells: IResolvable) {
        cdkBuilder.heatMapAggregatedFieldWells(heatMapAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun heatMapAggregatedFieldWells(heatMapAggregatedFieldWells: HeatMapAggregatedFieldWellsProperty) {
        cdkBuilder.heatMapAggregatedFieldWells(heatMapAggregatedFieldWells.let(HeatMapAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7c650a06e70c65d415f4e3abcc9c931ceb4f2d5e6bfc93f064d9f9cbc68cbbc7")
      override
          fun heatMapAggregatedFieldWells(heatMapAggregatedFieldWells: HeatMapAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          heatMapAggregatedFieldWells(HeatMapAggregatedFieldWellsProperty(heatMapAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapFieldWellsProperty,
    ) : CdkObject(cdkObject), HeatMapFieldWellsProperty {
      override fun heatMapAggregatedFieldWells(): Any? =
          unwrap(this).getHeatMapAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): HeatMapFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapFieldWellsProperty):
          HeatMapFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HeatMapFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapFieldWellsProperty
    }
  }

  public interface ContributionAnalysisDefaultProperty {
    public fun contributorDimensions(): Any

    public fun measureFieldId(): String

    @CdkDslMarker
    public interface Builder {
      public fun contributorDimensions(contributorDimensions: IResolvable)

      public fun contributorDimensions(contributorDimensions: List<Any>)

      public fun contributorDimensions(vararg contributorDimensions: Any)

      public fun measureFieldId(measureFieldId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ContributionAnalysisDefaultProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ContributionAnalysisDefaultProperty.builder()

      override fun contributorDimensions(contributorDimensions: IResolvable) {
        cdkBuilder.contributorDimensions(contributorDimensions.let(IResolvable::unwrap))
      }

      override fun contributorDimensions(contributorDimensions: List<Any>) {
        cdkBuilder.contributorDimensions(contributorDimensions)
      }

      override fun contributorDimensions(vararg contributorDimensions: Any): Unit =
          contributorDimensions(contributorDimensions.toList())

      override fun measureFieldId(measureFieldId: String) {
        cdkBuilder.measureFieldId(measureFieldId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ContributionAnalysisDefaultProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ContributionAnalysisDefaultProperty,
    ) : CdkObject(cdkObject), ContributionAnalysisDefaultProperty {
      override fun contributorDimensions(): Any = unwrap(this).getContributorDimensions()

      override fun measureFieldId(): String = unwrap(this).getMeasureFieldId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ContributionAnalysisDefaultProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ContributionAnalysisDefaultProperty):
          ContributionAnalysisDefaultProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ContributionAnalysisDefaultProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ContributionAnalysisDefaultProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ContributionAnalysisDefaultProperty
    }
  }

  public interface CustomActionURLOperationProperty {
    public fun urlTarget(): String

    public fun urlTemplate(): String

    @CdkDslMarker
    public interface Builder {
      public fun urlTarget(urlTarget: String)

      public fun urlTemplate(urlTemplate: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionURLOperationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionURLOperationProperty.builder()

      override fun urlTarget(urlTarget: String) {
        cdkBuilder.urlTarget(urlTarget)
      }

      override fun urlTemplate(urlTemplate: String) {
        cdkBuilder.urlTemplate(urlTemplate)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionURLOperationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionURLOperationProperty,
    ) : CdkObject(cdkObject), CustomActionURLOperationProperty {
      override fun urlTarget(): String = unwrap(this).getUrlTarget()

      override fun urlTemplate(): String = unwrap(this).getUrlTemplate()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): CustomActionURLOperationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionURLOperationProperty):
          CustomActionURLOperationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomActionURLOperationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionURLOperationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomActionURLOperationProperty
    }
  }

  public interface HeatMapVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: HeatMapConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6e794dbe1aaf5767a25bbe5a3c7f44018acd9abbd6bd97ec2a47c8c96186ff57")
      public
          fun chartConfiguration(chartConfiguration: HeatMapConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d62d122c01a19e347fbe650c9bbbd247abed857ae9ea9c4c2ca1a4b58e8ce230")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2f2f838b69b7f2c59083b4d7d0252da1da9bb3ead9e744edf639eb15a71e2dae")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: HeatMapConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(HeatMapConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6e794dbe1aaf5767a25bbe5a3c7f44018acd9abbd6bd97ec2a47c8c96186ff57")
      override
          fun chartConfiguration(chartConfiguration: HeatMapConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(HeatMapConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d62d122c01a19e347fbe650c9bbbd247abed857ae9ea9c4c2ca1a4b58e8ce230")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2f2f838b69b7f2c59083b4d7d0252da1da9bb3ead9e744edf639eb15a71e2dae")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapVisualProperty,
    ) : CdkObject(cdkObject), HeatMapVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): HeatMapVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapVisualProperty):
          HeatMapVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HeatMapVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapVisualProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapVisualProperty
    }
  }

  public interface DateDimensionFieldProperty {
    public fun column(): Any

    public fun dateGranularity(): String? = unwrap(this).getDateGranularity()

    public fun fieldId(): String

    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    public fun hierarchyId(): String? = unwrap(this).getHierarchyId()

    @CdkDslMarker
    public interface Builder {
      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0b6710af10c63cca17628dfc1827fedda3f151e8cc8232fa1c850291e475f8ee")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun dateGranularity(dateGranularity: String)

      public fun fieldId(fieldId: String)

      public fun formatConfiguration(formatConfiguration: IResolvable)

      public fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("524cc5712d1e169d365c912c09402d65964c22ba38614480a175708da39fe2f6")
      public
          fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty.Builder.() -> Unit)

      public fun hierarchyId(hierarchyId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateDimensionFieldProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateDimensionFieldProperty.builder()

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0b6710af10c63cca17628dfc1827fedda3f151e8cc8232fa1c850291e475f8ee")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun dateGranularity(dateGranularity: String) {
        cdkBuilder.dateGranularity(dateGranularity)
      }

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      override fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(DateTimeFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("524cc5712d1e169d365c912c09402d65964c22ba38614480a175708da39fe2f6")
      override
          fun formatConfiguration(formatConfiguration: DateTimeFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(DateTimeFormatConfigurationProperty(formatConfiguration))

      override fun hierarchyId(hierarchyId: String) {
        cdkBuilder.hierarchyId(hierarchyId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateDimensionFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateDimensionFieldProperty,
    ) : CdkObject(cdkObject), DateDimensionFieldProperty {
      override fun column(): Any = unwrap(this).getColumn()

      override fun dateGranularity(): String? = unwrap(this).getDateGranularity()

      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

      override fun hierarchyId(): String? = unwrap(this).getHierarchyId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DateDimensionFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DateDimensionFieldProperty):
          DateDimensionFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateDimensionFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateDimensionFieldProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateDimensionFieldProperty
    }
  }

  public interface WaterfallChartOptionsProperty {
    public fun totalBarLabel(): String? = unwrap(this).getTotalBarLabel()

    @CdkDslMarker
    public interface Builder {
      public fun totalBarLabel(totalBarLabel: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartOptionsProperty.builder()

      override fun totalBarLabel(totalBarLabel: String) {
        cdkBuilder.totalBarLabel(totalBarLabel)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartOptionsProperty,
    ) : CdkObject(cdkObject), WaterfallChartOptionsProperty {
      override fun totalBarLabel(): String? = unwrap(this).getTotalBarLabel()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): WaterfallChartOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartOptionsProperty):
          WaterfallChartOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WaterfallChartOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartOptionsProperty
    }
  }

  public interface DefaultInteractiveLayoutConfigurationProperty {
    public fun freeForm(): Any? = unwrap(this).getFreeForm()

    public fun grid(): Any? = unwrap(this).getGrid()

    @CdkDslMarker
    public interface Builder {
      public fun freeForm(freeForm: IResolvable)

      public fun freeForm(freeForm: DefaultFreeFormLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("938b814987374421ab14771d8b8072b39da84880ee300924e96b3b00c622a45d")
      public fun freeForm(freeForm: DefaultFreeFormLayoutConfigurationProperty.Builder.() -> Unit)

      public fun grid(grid: IResolvable)

      public fun grid(grid: DefaultGridLayoutConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c458742b483f2169bec94e77c70f1cc6c96626d3ae83866fe1153e828c7b2c64")
      public fun grid(grid: DefaultGridLayoutConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultInteractiveLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultInteractiveLayoutConfigurationProperty.builder()

      override fun freeForm(freeForm: IResolvable) {
        cdkBuilder.freeForm(freeForm.let(IResolvable::unwrap))
      }

      override fun freeForm(freeForm: DefaultFreeFormLayoutConfigurationProperty) {
        cdkBuilder.freeForm(freeForm.let(DefaultFreeFormLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("938b814987374421ab14771d8b8072b39da84880ee300924e96b3b00c622a45d")
      override
          fun freeForm(freeForm: DefaultFreeFormLayoutConfigurationProperty.Builder.() -> Unit):
          Unit = freeForm(DefaultFreeFormLayoutConfigurationProperty(freeForm))

      override fun grid(grid: IResolvable) {
        cdkBuilder.grid(grid.let(IResolvable::unwrap))
      }

      override fun grid(grid: DefaultGridLayoutConfigurationProperty) {
        cdkBuilder.grid(grid.let(DefaultGridLayoutConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c458742b483f2169bec94e77c70f1cc6c96626d3ae83866fe1153e828c7b2c64")
      override fun grid(grid: DefaultGridLayoutConfigurationProperty.Builder.() -> Unit): Unit =
          grid(DefaultGridLayoutConfigurationProperty(grid))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultInteractiveLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultInteractiveLayoutConfigurationProperty,
    ) : CdkObject(cdkObject), DefaultInteractiveLayoutConfigurationProperty {
      override fun freeForm(): Any? = unwrap(this).getFreeForm()

      override fun grid(): Any? = unwrap(this).getGrid()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          DefaultInteractiveLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultInteractiveLayoutConfigurationProperty):
          DefaultInteractiveLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DefaultInteractiveLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultInteractiveLayoutConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DefaultInteractiveLayoutConfigurationProperty
    }
  }

  public interface HistogramAggregatedFieldWellsProperty {
    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramAggregatedFieldWellsProperty.builder()

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), HistogramAggregatedFieldWellsProperty {
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          HistogramAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramAggregatedFieldWellsProperty):
          HistogramAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HistogramAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.HistogramAggregatedFieldWellsProperty
    }
  }

  public interface NumberFormatConfigurationProperty {
    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun formatConfiguration(formatConfiguration: IResolvable)

      public fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d0ef0975192193c28a1780a2129f895c29608597ba9c80a261861e0bfcbc1819")
      public
          fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumberFormatConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumberFormatConfigurationProperty.builder()

      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      override fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(NumericFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d0ef0975192193c28a1780a2129f895c29608597ba9c80a261861e0bfcbc1819")
      override
          fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(NumericFormatConfigurationProperty(formatConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumberFormatConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumberFormatConfigurationProperty,
    ) : CdkObject(cdkObject), NumberFormatConfigurationProperty {
      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          NumberFormatConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NumberFormatConfigurationProperty):
          NumberFormatConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumberFormatConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumberFormatConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumberFormatConfigurationProperty
    }
  }

  public interface CategoryDrillDownFilterProperty {
    public fun categoryValues(): List<String>

    public fun column(): Any

    @CdkDslMarker
    public interface Builder {
      public fun categoryValues(categoryValues: List<String>)

      public fun categoryValues(vararg categoryValues: String)

      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0cbb68cbf62ce5fe152ec8ed176b6cc84f20c43bffc298f00c829d329237302c")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryDrillDownFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryDrillDownFilterProperty.builder()

      override fun categoryValues(categoryValues: List<String>) {
        cdkBuilder.categoryValues(categoryValues)
      }

      override fun categoryValues(vararg categoryValues: String): Unit =
          categoryValues(categoryValues.toList())

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0cbb68cbf62ce5fe152ec8ed176b6cc84f20c43bffc298f00c829d329237302c")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryDrillDownFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryDrillDownFilterProperty,
    ) : CdkObject(cdkObject), CategoryDrillDownFilterProperty {
      override fun categoryValues(): List<String> = unwrap(this).getCategoryValues()

      override fun column(): Any = unwrap(this).getColumn()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): CategoryDrillDownFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryDrillDownFilterProperty):
          CategoryDrillDownFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CategoryDrillDownFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryDrillDownFilterProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CategoryDrillDownFilterProperty
    }
  }

  public interface DataPathValueProperty {
    public fun dataPathType(): Any? = unwrap(this).getDataPathType()

    public fun fieldId(): String? = unwrap(this).getFieldId()

    public fun fieldValue(): String? = unwrap(this).getFieldValue()

    @CdkDslMarker
    public interface Builder {
      public fun dataPathType(dataPathType: IResolvable)

      public fun dataPathType(dataPathType: DataPathTypeProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("78272d392d39716455c5b394ce1f86684c12669db27982db46ee0aa95a829ad1")
      public fun dataPathType(dataPathType: DataPathTypeProperty.Builder.() -> Unit)

      public fun fieldId(fieldId: String)

      public fun fieldValue(fieldValue: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathValueProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathValueProperty.builder()

      override fun dataPathType(dataPathType: IResolvable) {
        cdkBuilder.dataPathType(dataPathType.let(IResolvable::unwrap))
      }

      override fun dataPathType(dataPathType: DataPathTypeProperty) {
        cdkBuilder.dataPathType(dataPathType.let(DataPathTypeProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("78272d392d39716455c5b394ce1f86684c12669db27982db46ee0aa95a829ad1")
      override fun dataPathType(dataPathType: DataPathTypeProperty.Builder.() -> Unit): Unit =
          dataPathType(DataPathTypeProperty(dataPathType))

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun fieldValue(fieldValue: String) {
        cdkBuilder.fieldValue(fieldValue)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathValueProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathValueProperty,
    ) : CdkObject(cdkObject), DataPathValueProperty {
      override fun dataPathType(): Any? = unwrap(this).getDataPathType()

      override fun fieldId(): String? = unwrap(this).getFieldId()

      override fun fieldValue(): String? = unwrap(this).getFieldValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataPathValueProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathValueProperty):
          DataPathValueProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataPathValueProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathValueProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathValueProperty
    }
  }

  public interface ReferenceLineDynamicDataConfigurationProperty {
    public fun calculation(): Any

    public fun column(): Any

    public fun measureAggregationFunction(): Any? = unwrap(this).getMeasureAggregationFunction()

    @CdkDslMarker
    public interface Builder {
      public fun calculation(calculation: IResolvable)

      public fun calculation(calculation: NumericalAggregationFunctionProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("da29f3c1aa49a77ae32771869bdf4eb15729302c32b8bdb83754f01e1586f686")
      public fun calculation(calculation: NumericalAggregationFunctionProperty.Builder.() -> Unit)

      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("202f642cb0c9ee4016570d76fe9c84f3ecbff73b799e579c97d88c8ad46c4d70")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun measureAggregationFunction(measureAggregationFunction: IResolvable)

      public fun measureAggregationFunction(measureAggregationFunction: AggregationFunctionProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2511477dc116233f1036c6ba56b4454b142c413b15c1b09c8a6e720de2d82a27")
      public
          fun measureAggregationFunction(measureAggregationFunction: AggregationFunctionProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDynamicDataConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDynamicDataConfigurationProperty.builder()

      override fun calculation(calculation: IResolvable) {
        cdkBuilder.calculation(calculation.let(IResolvable::unwrap))
      }

      override fun calculation(calculation: NumericalAggregationFunctionProperty) {
        cdkBuilder.calculation(calculation.let(NumericalAggregationFunctionProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("da29f3c1aa49a77ae32771869bdf4eb15729302c32b8bdb83754f01e1586f686")
      override
          fun calculation(calculation: NumericalAggregationFunctionProperty.Builder.() -> Unit):
          Unit = calculation(NumericalAggregationFunctionProperty(calculation))

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("202f642cb0c9ee4016570d76fe9c84f3ecbff73b799e579c97d88c8ad46c4d70")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun measureAggregationFunction(measureAggregationFunction: IResolvable) {
        cdkBuilder.measureAggregationFunction(measureAggregationFunction.let(IResolvable::unwrap))
      }

      override
          fun measureAggregationFunction(measureAggregationFunction: AggregationFunctionProperty) {
        cdkBuilder.measureAggregationFunction(measureAggregationFunction.let(AggregationFunctionProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2511477dc116233f1036c6ba56b4454b142c413b15c1b09c8a6e720de2d82a27")
      override
          fun measureAggregationFunction(measureAggregationFunction: AggregationFunctionProperty.Builder.() -> Unit):
          Unit = measureAggregationFunction(AggregationFunctionProperty(measureAggregationFunction))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDynamicDataConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDynamicDataConfigurationProperty,
    ) : CdkObject(cdkObject), ReferenceLineDynamicDataConfigurationProperty {
      override fun calculation(): Any = unwrap(this).getCalculation()

      override fun column(): Any = unwrap(this).getColumn()

      override fun measureAggregationFunction(): Any? = unwrap(this).getMeasureAggregationFunction()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineDynamicDataConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDynamicDataConfigurationProperty):
          ReferenceLineDynamicDataConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineDynamicDataConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDynamicDataConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineDynamicDataConfigurationProperty
    }
  }

  public interface ScatterPlotUnaggregatedFieldWellsProperty {
    public fun category(): Any? = unwrap(this).getCategory()

    public fun label(): Any? = unwrap(this).getLabel()

    public fun size(): Any? = unwrap(this).getSize()

    public fun xAxis(): Any? = unwrap(this).getXAxis()

    public fun yAxis(): Any? = unwrap(this).getYAxis()

    @CdkDslMarker
    public interface Builder {
      public fun category(category: IResolvable)

      public fun category(category: List<Any>)

      public fun category(vararg category: Any)

      public fun label(label: IResolvable)

      public fun label(label: List<Any>)

      public fun label(vararg label: Any)

      public fun size(size: IResolvable)

      public fun size(size: List<Any>)

      public fun size(vararg size: Any)

      public fun xAxis(xAxis: IResolvable)

      public fun xAxis(xAxis: List<Any>)

      public fun xAxis(vararg xAxis: Any)

      public fun yAxis(yAxis: IResolvable)

      public fun yAxis(yAxis: List<Any>)

      public fun yAxis(vararg yAxis: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotUnaggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotUnaggregatedFieldWellsProperty.builder()

      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      override fun category(category: List<Any>) {
        cdkBuilder.category(category)
      }

      override fun category(vararg category: Any): Unit = category(category.toList())

      override fun label(label: IResolvable) {
        cdkBuilder.label(label.let(IResolvable::unwrap))
      }

      override fun label(label: List<Any>) {
        cdkBuilder.label(label)
      }

      override fun label(vararg label: Any): Unit = label(label.toList())

      override fun size(size: IResolvable) {
        cdkBuilder.size(size.let(IResolvable::unwrap))
      }

      override fun size(size: List<Any>) {
        cdkBuilder.size(size)
      }

      override fun size(vararg size: Any): Unit = size(size.toList())

      override fun xAxis(xAxis: IResolvable) {
        cdkBuilder.xAxis(xAxis.let(IResolvable::unwrap))
      }

      override fun xAxis(xAxis: List<Any>) {
        cdkBuilder.xAxis(xAxis)
      }

      override fun xAxis(vararg xAxis: Any): Unit = xAxis(xAxis.toList())

      override fun yAxis(yAxis: IResolvable) {
        cdkBuilder.yAxis(yAxis.let(IResolvable::unwrap))
      }

      override fun yAxis(yAxis: List<Any>) {
        cdkBuilder.yAxis(yAxis)
      }

      override fun yAxis(vararg yAxis: Any): Unit = yAxis(yAxis.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotUnaggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotUnaggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), ScatterPlotUnaggregatedFieldWellsProperty {
      override fun category(): Any? = unwrap(this).getCategory()

      override fun label(): Any? = unwrap(this).getLabel()

      override fun size(): Any? = unwrap(this).getSize()

      override fun xAxis(): Any? = unwrap(this).getXAxis()

      override fun yAxis(): Any? = unwrap(this).getYAxis()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ScatterPlotUnaggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotUnaggregatedFieldWellsProperty):
          ScatterPlotUnaggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ScatterPlotUnaggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotUnaggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotUnaggregatedFieldWellsProperty
    }
  }

  public interface FreeFormSectionLayoutConfigurationProperty {
    public fun elements(): Any

    @CdkDslMarker
    public interface Builder {
      public fun elements(elements: IResolvable)

      public fun elements(elements: List<Any>)

      public fun elements(vararg elements: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormSectionLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormSectionLayoutConfigurationProperty.builder()

      override fun elements(elements: IResolvable) {
        cdkBuilder.elements(elements.let(IResolvable::unwrap))
      }

      override fun elements(elements: List<Any>) {
        cdkBuilder.elements(elements)
      }

      override fun elements(vararg elements: Any): Unit = elements(elements.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormSectionLayoutConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormSectionLayoutConfigurationProperty,
    ) : CdkObject(cdkObject), FreeFormSectionLayoutConfigurationProperty {
      override fun elements(): Any = unwrap(this).getElements()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FreeFormSectionLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormSectionLayoutConfigurationProperty):
          FreeFormSectionLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormSectionLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormSectionLayoutConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormSectionLayoutConfigurationProperty
    }
  }

  public interface DateAxisOptionsProperty {
    public fun missingDateVisibility(): String? = unwrap(this).getMissingDateVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun missingDateVisibility(missingDateVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateAxisOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateAxisOptionsProperty.builder()

      override fun missingDateVisibility(missingDateVisibility: String) {
        cdkBuilder.missingDateVisibility(missingDateVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateAxisOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateAxisOptionsProperty,
    ) : CdkObject(cdkObject), DateAxisOptionsProperty {
      override fun missingDateVisibility(): String? = unwrap(this).getMissingDateVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DateAxisOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DateAxisOptionsProperty):
          DateAxisOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateAxisOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateAxisOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateAxisOptionsProperty
    }
  }

  public interface PivotTableRowsLabelOptionsProperty {
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun customLabel(customLabel: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableRowsLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableRowsLabelOptionsProperty.builder()

      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableRowsLabelOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableRowsLabelOptionsProperty,
    ) : CdkObject(cdkObject), PivotTableRowsLabelOptionsProperty {
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableRowsLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableRowsLabelOptionsProperty):
          PivotTableRowsLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableRowsLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableRowsLabelOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableRowsLabelOptionsProperty
    }
  }

  public interface TotalAggregationFunctionProperty {
    public fun simpleTotalAggregationFunction(): String? =
        unwrap(this).getSimpleTotalAggregationFunction()

    @CdkDslMarker
    public interface Builder {
      public fun simpleTotalAggregationFunction(simpleTotalAggregationFunction: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationFunctionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationFunctionProperty.builder()

      override fun simpleTotalAggregationFunction(simpleTotalAggregationFunction: String) {
        cdkBuilder.simpleTotalAggregationFunction(simpleTotalAggregationFunction)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationFunctionProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationFunctionProperty,
    ) : CdkObject(cdkObject), TotalAggregationFunctionProperty {
      override fun simpleTotalAggregationFunction(): String? =
          unwrap(this).getSimpleTotalAggregationFunction()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TotalAggregationFunctionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationFunctionProperty):
          TotalAggregationFunctionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TotalAggregationFunctionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationFunctionProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TotalAggregationFunctionProperty
    }
  }

  public interface AxisLabelReferenceOptionsProperty {
    public fun column(): Any

    public fun fieldId(): String

    @CdkDslMarker
    public interface Builder {
      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("35de4116bbf81f138b5b0ad34c09c41bec3e9df18c56e92cd882350395dc24d4")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun fieldId(fieldId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelReferenceOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelReferenceOptionsProperty.builder()

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("35de4116bbf81f138b5b0ad34c09c41bec3e9df18c56e92cd882350395dc24d4")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelReferenceOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelReferenceOptionsProperty,
    ) : CdkObject(cdkObject), AxisLabelReferenceOptionsProperty {
      override fun column(): Any = unwrap(this).getColumn()

      override fun fieldId(): String = unwrap(this).getFieldId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          AxisLabelReferenceOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelReferenceOptionsProperty):
          AxisLabelReferenceOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisLabelReferenceOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelReferenceOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisLabelReferenceOptionsProperty
    }
  }

  public interface DateTimeHierarchyProperty {
    public fun drillDownFilters(): Any? = unwrap(this).getDrillDownFilters()

    public fun hierarchyId(): String

    @CdkDslMarker
    public interface Builder {
      public fun drillDownFilters(drillDownFilters: IResolvable)

      public fun drillDownFilters(drillDownFilters: List<Any>)

      public fun drillDownFilters(vararg drillDownFilters: Any)

      public fun hierarchyId(hierarchyId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeHierarchyProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeHierarchyProperty.builder()

      override fun drillDownFilters(drillDownFilters: IResolvable) {
        cdkBuilder.drillDownFilters(drillDownFilters.let(IResolvable::unwrap))
      }

      override fun drillDownFilters(drillDownFilters: List<Any>) {
        cdkBuilder.drillDownFilters(drillDownFilters)
      }

      override fun drillDownFilters(vararg drillDownFilters: Any): Unit =
          drillDownFilters(drillDownFilters.toList())

      override fun hierarchyId(hierarchyId: String) {
        cdkBuilder.hierarchyId(hierarchyId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeHierarchyProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeHierarchyProperty,
    ) : CdkObject(cdkObject), DateTimeHierarchyProperty {
      override fun drillDownFilters(): Any? = unwrap(this).getDrillDownFilters()

      override fun hierarchyId(): String = unwrap(this).getHierarchyId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DateTimeHierarchyProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeHierarchyProperty):
          DateTimeHierarchyProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DateTimeHierarchyProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeHierarchyProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DateTimeHierarchyProperty
    }
  }

  public interface ParameterSelectableValuesProperty {
    public fun linkToDataSetColumn(): Any? = unwrap(this).getLinkToDataSetColumn()

    public fun values(): List<String> = unwrap(this).getValues() ?: emptyList()

    @CdkDslMarker
    public interface Builder {
      public fun linkToDataSetColumn(linkToDataSetColumn: IResolvable)

      public fun linkToDataSetColumn(linkToDataSetColumn: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9fa3e6063d6c75b1b1d7b02e5a7c7c098ebad11bbe3068f00682159cf6a406b4")
      public
          fun linkToDataSetColumn(linkToDataSetColumn: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun values(values: List<String>)

      public fun values(vararg values: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSelectableValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSelectableValuesProperty.builder()

      override fun linkToDataSetColumn(linkToDataSetColumn: IResolvable) {
        cdkBuilder.linkToDataSetColumn(linkToDataSetColumn.let(IResolvable::unwrap))
      }

      override fun linkToDataSetColumn(linkToDataSetColumn: ColumnIdentifierProperty) {
        cdkBuilder.linkToDataSetColumn(linkToDataSetColumn.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9fa3e6063d6c75b1b1d7b02e5a7c7c098ebad11bbe3068f00682159cf6a406b4")
      override
          fun linkToDataSetColumn(linkToDataSetColumn: ColumnIdentifierProperty.Builder.() -> Unit):
          Unit = linkToDataSetColumn(ColumnIdentifierProperty(linkToDataSetColumn))

      override fun values(values: List<String>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: String): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSelectableValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSelectableValuesProperty,
    ) : CdkObject(cdkObject), ParameterSelectableValuesProperty {
      override fun linkToDataSetColumn(): Any? = unwrap(this).getLinkToDataSetColumn()

      override fun values(): List<String> = unwrap(this).getValues() ?: emptyList()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ParameterSelectableValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSelectableValuesProperty):
          ParameterSelectableValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterSelectableValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSelectableValuesProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSelectableValuesProperty
    }
  }

  public interface CascadingControlConfigurationProperty {
    public fun sourceControls(): Any? = unwrap(this).getSourceControls()

    @CdkDslMarker
    public interface Builder {
      public fun sourceControls(sourceControls: IResolvable)

      public fun sourceControls(sourceControls: List<Any>)

      public fun sourceControls(vararg sourceControls: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlConfigurationProperty.builder()

      override fun sourceControls(sourceControls: IResolvable) {
        cdkBuilder.sourceControls(sourceControls.let(IResolvable::unwrap))
      }

      override fun sourceControls(sourceControls: List<Any>) {
        cdkBuilder.sourceControls(sourceControls)
      }

      override fun sourceControls(vararg sourceControls: Any): Unit =
          sourceControls(sourceControls.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlConfigurationProperty,
    ) : CdkObject(cdkObject), CascadingControlConfigurationProperty {
      override fun sourceControls(): Any? = unwrap(this).getSourceControls()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          CascadingControlConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlConfigurationProperty):
          CascadingControlConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CascadingControlConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CascadingControlConfigurationProperty
    }
  }

  public interface ThousandSeparatorOptionsProperty {
    public fun symbol(): String? = unwrap(this).getSymbol()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun symbol(symbol: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ThousandSeparatorOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ThousandSeparatorOptionsProperty.builder()

      override fun symbol(symbol: String) {
        cdkBuilder.symbol(symbol)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ThousandSeparatorOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ThousandSeparatorOptionsProperty,
    ) : CdkObject(cdkObject), ThousandSeparatorOptionsProperty {
      override fun symbol(): String? = unwrap(this).getSymbol()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ThousandSeparatorOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ThousandSeparatorOptionsProperty):
          ThousandSeparatorOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ThousandSeparatorOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ThousandSeparatorOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ThousandSeparatorOptionsProperty
    }
  }

  public interface CustomValuesConfigurationProperty {
    public fun customValues(): Any

    public fun includeNullValue(): Any? = unwrap(this).getIncludeNullValue()

    @CdkDslMarker
    public interface Builder {
      public fun customValues(customValues: IResolvable)

      public fun customValues(customValues: CustomParameterValuesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6e9467a74549078300bf0db7cb6b2789f5b2b25dd82591c75e185076ad9bc4f2")
      public fun customValues(customValues: CustomParameterValuesProperty.Builder.() -> Unit)

      public fun includeNullValue(includeNullValue: Boolean)

      public fun includeNullValue(includeNullValue: IResolvable)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomValuesConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomValuesConfigurationProperty.builder()

      override fun customValues(customValues: IResolvable) {
        cdkBuilder.customValues(customValues.let(IResolvable::unwrap))
      }

      override fun customValues(customValues: CustomParameterValuesProperty) {
        cdkBuilder.customValues(customValues.let(CustomParameterValuesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6e9467a74549078300bf0db7cb6b2789f5b2b25dd82591c75e185076ad9bc4f2")
      override fun customValues(customValues: CustomParameterValuesProperty.Builder.() -> Unit):
          Unit = customValues(CustomParameterValuesProperty(customValues))

      override fun includeNullValue(includeNullValue: Boolean) {
        cdkBuilder.includeNullValue(includeNullValue)
      }

      override fun includeNullValue(includeNullValue: IResolvable) {
        cdkBuilder.includeNullValue(includeNullValue.let(IResolvable::unwrap))
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomValuesConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomValuesConfigurationProperty,
    ) : CdkObject(cdkObject), CustomValuesConfigurationProperty {
      override fun customValues(): Any = unwrap(this).getCustomValues()

      override fun includeNullValue(): Any? = unwrap(this).getIncludeNullValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomValuesConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CustomValuesConfigurationProperty):
          CustomValuesConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomValuesConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomValuesConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomValuesConfigurationProperty
    }
  }

  public interface PanelTitleOptionsProperty {
    public fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

    public fun horizontalTextAlignment(): String? = unwrap(this).getHorizontalTextAlignment()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun fontConfiguration(fontConfiguration: IResolvable)

      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c4bc29d285720b85fada38fa0f07e7ac98abeae739cf2988cca0f3871a86fa5a")
      public fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit)

      public fun horizontalTextAlignment(horizontalTextAlignment: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PanelTitleOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PanelTitleOptionsProperty.builder()

      override fun fontConfiguration(fontConfiguration: IResolvable) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(IResolvable::unwrap))
      }

      override fun fontConfiguration(fontConfiguration: FontConfigurationProperty) {
        cdkBuilder.fontConfiguration(fontConfiguration.let(FontConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c4bc29d285720b85fada38fa0f07e7ac98abeae739cf2988cca0f3871a86fa5a")
      override
          fun fontConfiguration(fontConfiguration: FontConfigurationProperty.Builder.() -> Unit):
          Unit = fontConfiguration(FontConfigurationProperty(fontConfiguration))

      override fun horizontalTextAlignment(horizontalTextAlignment: String) {
        cdkBuilder.horizontalTextAlignment(horizontalTextAlignment)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PanelTitleOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PanelTitleOptionsProperty,
    ) : CdkObject(cdkObject), PanelTitleOptionsProperty {
      override fun fontConfiguration(): Any? = unwrap(this).getFontConfiguration()

      override fun horizontalTextAlignment(): String? = unwrap(this).getHorizontalTextAlignment()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PanelTitleOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PanelTitleOptionsProperty):
          PanelTitleOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PanelTitleOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PanelTitleOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PanelTitleOptionsProperty
    }
  }

  public interface PivotTableTotalOptionsProperty {
    public fun columnSubtotalOptions(): Any? = unwrap(this).getColumnSubtotalOptions()

    public fun columnTotalOptions(): Any? = unwrap(this).getColumnTotalOptions()

    public fun rowSubtotalOptions(): Any? = unwrap(this).getRowSubtotalOptions()

    public fun rowTotalOptions(): Any? = unwrap(this).getRowTotalOptions()

    @CdkDslMarker
    public interface Builder {
      public fun columnSubtotalOptions(columnSubtotalOptions: IResolvable)

      public fun columnSubtotalOptions(columnSubtotalOptions: SubtotalOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("98a90f7348cbab463be7f2ca7d76f6571e1ebc9f1ece96839e759421408e2c11")
      public
          fun columnSubtotalOptions(columnSubtotalOptions: SubtotalOptionsProperty.Builder.() -> Unit)

      public fun columnTotalOptions(columnTotalOptions: IResolvable)

      public fun columnTotalOptions(columnTotalOptions: PivotTotalOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("40e231880627b5d5c499c012fa0ff098e4140845d7697bcda2e44951c6cb9b03")
      public
          fun columnTotalOptions(columnTotalOptions: PivotTotalOptionsProperty.Builder.() -> Unit)

      public fun rowSubtotalOptions(rowSubtotalOptions: IResolvable)

      public fun rowSubtotalOptions(rowSubtotalOptions: SubtotalOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c8cc2e129556d644d5018012de7f3a715a7b25d77ef21efdab4cf381101d46a7")
      public fun rowSubtotalOptions(rowSubtotalOptions: SubtotalOptionsProperty.Builder.() -> Unit)

      public fun rowTotalOptions(rowTotalOptions: IResolvable)

      public fun rowTotalOptions(rowTotalOptions: PivotTotalOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cf784219a15bfa59fc3532f8bf91b218dc5b0875edbb55996cb1bb7fcf516d42")
      public fun rowTotalOptions(rowTotalOptions: PivotTotalOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableTotalOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableTotalOptionsProperty.builder()

      override fun columnSubtotalOptions(columnSubtotalOptions: IResolvable) {
        cdkBuilder.columnSubtotalOptions(columnSubtotalOptions.let(IResolvable::unwrap))
      }

      override fun columnSubtotalOptions(columnSubtotalOptions: SubtotalOptionsProperty) {
        cdkBuilder.columnSubtotalOptions(columnSubtotalOptions.let(SubtotalOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("98a90f7348cbab463be7f2ca7d76f6571e1ebc9f1ece96839e759421408e2c11")
      override
          fun columnSubtotalOptions(columnSubtotalOptions: SubtotalOptionsProperty.Builder.() -> Unit):
          Unit = columnSubtotalOptions(SubtotalOptionsProperty(columnSubtotalOptions))

      override fun columnTotalOptions(columnTotalOptions: IResolvable) {
        cdkBuilder.columnTotalOptions(columnTotalOptions.let(IResolvable::unwrap))
      }

      override fun columnTotalOptions(columnTotalOptions: PivotTotalOptionsProperty) {
        cdkBuilder.columnTotalOptions(columnTotalOptions.let(PivotTotalOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("40e231880627b5d5c499c012fa0ff098e4140845d7697bcda2e44951c6cb9b03")
      override
          fun columnTotalOptions(columnTotalOptions: PivotTotalOptionsProperty.Builder.() -> Unit):
          Unit = columnTotalOptions(PivotTotalOptionsProperty(columnTotalOptions))

      override fun rowSubtotalOptions(rowSubtotalOptions: IResolvable) {
        cdkBuilder.rowSubtotalOptions(rowSubtotalOptions.let(IResolvable::unwrap))
      }

      override fun rowSubtotalOptions(rowSubtotalOptions: SubtotalOptionsProperty) {
        cdkBuilder.rowSubtotalOptions(rowSubtotalOptions.let(SubtotalOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c8cc2e129556d644d5018012de7f3a715a7b25d77ef21efdab4cf381101d46a7")
      override
          fun rowSubtotalOptions(rowSubtotalOptions: SubtotalOptionsProperty.Builder.() -> Unit):
          Unit = rowSubtotalOptions(SubtotalOptionsProperty(rowSubtotalOptions))

      override fun rowTotalOptions(rowTotalOptions: IResolvable) {
        cdkBuilder.rowTotalOptions(rowTotalOptions.let(IResolvable::unwrap))
      }

      override fun rowTotalOptions(rowTotalOptions: PivotTotalOptionsProperty) {
        cdkBuilder.rowTotalOptions(rowTotalOptions.let(PivotTotalOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cf784219a15bfa59fc3532f8bf91b218dc5b0875edbb55996cb1bb7fcf516d42")
      override fun rowTotalOptions(rowTotalOptions: PivotTotalOptionsProperty.Builder.() -> Unit):
          Unit = rowTotalOptions(PivotTotalOptionsProperty(rowTotalOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableTotalOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableTotalOptionsProperty,
    ) : CdkObject(cdkObject), PivotTableTotalOptionsProperty {
      override fun columnSubtotalOptions(): Any? = unwrap(this).getColumnSubtotalOptions()

      override fun columnTotalOptions(): Any? = unwrap(this).getColumnTotalOptions()

      override fun rowSubtotalOptions(): Any? = unwrap(this).getRowSubtotalOptions()

      override fun rowTotalOptions(): Any? = unwrap(this).getRowTotalOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableTotalOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableTotalOptionsProperty):
          PivotTableTotalOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableTotalOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableTotalOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableTotalOptionsProperty
    }
  }

  public interface GeospatialMapVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: GeospatialMapConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d5272c9c68997e21d5754a5e6f45daa239a460250aa65751992c2349a1375538")
      public
          fun chartConfiguration(chartConfiguration: GeospatialMapConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cce71fd9ee583e7d0cc3054d2a249e674f9cc89459a4a39caa116f3934b3be0d")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("005f440b46aa44f9c9dcc4831b250829264ccdb68c9cdbcdcdefc51c0768531c")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapVisualProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: GeospatialMapConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(GeospatialMapConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d5272c9c68997e21d5754a5e6f45daa239a460250aa65751992c2349a1375538")
      override
          fun chartConfiguration(chartConfiguration: GeospatialMapConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(GeospatialMapConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cce71fd9ee583e7d0cc3054d2a249e674f9cc89459a4a39caa116f3934b3be0d")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("005f440b46aa44f9c9dcc4831b250829264ccdb68c9cdbcdcdefc51c0768531c")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapVisualProperty,
    ) : CdkObject(cdkObject), GeospatialMapVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GeospatialMapVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapVisualProperty):
          GeospatialMapVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialMapVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapVisualProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapVisualProperty
    }
  }

  public interface KPIConditionalFormattingOptionProperty {
    public fun actualValue(): Any? = unwrap(this).getActualValue()

    public fun comparisonValue(): Any? = unwrap(this).getComparisonValue()

    public fun primaryValue(): Any? = unwrap(this).getPrimaryValue()

    public fun progressBar(): Any? = unwrap(this).getProgressBar()

    @CdkDslMarker
    public interface Builder {
      public fun actualValue(actualValue: IResolvable)

      public fun actualValue(actualValue: KPIActualValueConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1452c68be7365495d6ace0c2cfcbae60d7f94413171bbe1aa888d207e0738b3e")
      public
          fun actualValue(actualValue: KPIActualValueConditionalFormattingProperty.Builder.() -> Unit)

      public fun comparisonValue(comparisonValue: IResolvable)

      public fun comparisonValue(comparisonValue: KPIComparisonValueConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e2ef81b77f35b8ce9bbc19211561300b197e87155ae9dbb271d7c9a6090673bd")
      public
          fun comparisonValue(comparisonValue: KPIComparisonValueConditionalFormattingProperty.Builder.() -> Unit)

      public fun primaryValue(primaryValue: IResolvable)

      public fun primaryValue(primaryValue: KPIPrimaryValueConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3a9a328831aae48b8d8d46a87cc9938d19711450732e9eb260d1a76f71fcccd5")
      public
          fun primaryValue(primaryValue: KPIPrimaryValueConditionalFormattingProperty.Builder.() -> Unit)

      public fun progressBar(progressBar: IResolvable)

      public fun progressBar(progressBar: KPIProgressBarConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fbb29209d1b98ccb12a488bfcc58e36656af6216c574e6e91f24976ae4029787")
      public
          fun progressBar(progressBar: KPIProgressBarConditionalFormattingProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingOptionProperty.builder()

      override fun actualValue(actualValue: IResolvable) {
        cdkBuilder.actualValue(actualValue.let(IResolvable::unwrap))
      }

      override fun actualValue(actualValue: KPIActualValueConditionalFormattingProperty) {
        cdkBuilder.actualValue(actualValue.let(KPIActualValueConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1452c68be7365495d6ace0c2cfcbae60d7f94413171bbe1aa888d207e0738b3e")
      override
          fun actualValue(actualValue: KPIActualValueConditionalFormattingProperty.Builder.() -> Unit):
          Unit = actualValue(KPIActualValueConditionalFormattingProperty(actualValue))

      override fun comparisonValue(comparisonValue: IResolvable) {
        cdkBuilder.comparisonValue(comparisonValue.let(IResolvable::unwrap))
      }

      override
          fun comparisonValue(comparisonValue: KPIComparisonValueConditionalFormattingProperty) {
        cdkBuilder.comparisonValue(comparisonValue.let(KPIComparisonValueConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e2ef81b77f35b8ce9bbc19211561300b197e87155ae9dbb271d7c9a6090673bd")
      override
          fun comparisonValue(comparisonValue: KPIComparisonValueConditionalFormattingProperty.Builder.() -> Unit):
          Unit = comparisonValue(KPIComparisonValueConditionalFormattingProperty(comparisonValue))

      override fun primaryValue(primaryValue: IResolvable) {
        cdkBuilder.primaryValue(primaryValue.let(IResolvable::unwrap))
      }

      override fun primaryValue(primaryValue: KPIPrimaryValueConditionalFormattingProperty) {
        cdkBuilder.primaryValue(primaryValue.let(KPIPrimaryValueConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3a9a328831aae48b8d8d46a87cc9938d19711450732e9eb260d1a76f71fcccd5")
      override
          fun primaryValue(primaryValue: KPIPrimaryValueConditionalFormattingProperty.Builder.() -> Unit):
          Unit = primaryValue(KPIPrimaryValueConditionalFormattingProperty(primaryValue))

      override fun progressBar(progressBar: IResolvable) {
        cdkBuilder.progressBar(progressBar.let(IResolvable::unwrap))
      }

      override fun progressBar(progressBar: KPIProgressBarConditionalFormattingProperty) {
        cdkBuilder.progressBar(progressBar.let(KPIProgressBarConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fbb29209d1b98ccb12a488bfcc58e36656af6216c574e6e91f24976ae4029787")
      override
          fun progressBar(progressBar: KPIProgressBarConditionalFormattingProperty.Builder.() -> Unit):
          Unit = progressBar(KPIProgressBarConditionalFormattingProperty(progressBar))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingOptionProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingOptionProperty,
    ) : CdkObject(cdkObject), KPIConditionalFormattingOptionProperty {
      override fun actualValue(): Any? = unwrap(this).getActualValue()

      override fun comparisonValue(): Any? = unwrap(this).getComparisonValue()

      override fun primaryValue(): Any? = unwrap(this).getPrimaryValue()

      override fun progressBar(): Any? = unwrap(this).getProgressBar()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          KPIConditionalFormattingOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingOptionProperty):
          KPIConditionalFormattingOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIConditionalFormattingOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingOptionProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingOptionProperty
    }
  }

  public interface SankeyDiagramFieldWellsProperty {
    public fun sankeyDiagramAggregatedFieldWells(): Any? =
        unwrap(this).getSankeyDiagramAggregatedFieldWells()

    @CdkDslMarker
    public interface Builder {
      public fun sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells: IResolvable)

      public
          fun sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells: SankeyDiagramAggregatedFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8e9fcb962b1100cfb1692953e1eef76568a0eeb4e17746a7ac39ba9ab037698b")
      public
          fun sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells: SankeyDiagramAggregatedFieldWellsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramFieldWellsProperty.builder()

      override
          fun sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells: IResolvable) {
        cdkBuilder.sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells.let(IResolvable::unwrap))
      }

      override
          fun sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells: SankeyDiagramAggregatedFieldWellsProperty) {
        cdkBuilder.sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells.let(SankeyDiagramAggregatedFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8e9fcb962b1100cfb1692953e1eef76568a0eeb4e17746a7ac39ba9ab037698b")
      override
          fun sankeyDiagramAggregatedFieldWells(sankeyDiagramAggregatedFieldWells: SankeyDiagramAggregatedFieldWellsProperty.Builder.() -> Unit):
          Unit =
          sankeyDiagramAggregatedFieldWells(SankeyDiagramAggregatedFieldWellsProperty(sankeyDiagramAggregatedFieldWells))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramFieldWellsProperty,
    ) : CdkObject(cdkObject), SankeyDiagramFieldWellsProperty {
      override fun sankeyDiagramAggregatedFieldWells(): Any? =
          unwrap(this).getSankeyDiagramAggregatedFieldWells()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SankeyDiagramFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramFieldWellsProperty):
          SankeyDiagramFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SankeyDiagramFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramFieldWellsProperty
    }
  }

  public interface PivotTableConditionalFormattingScopeProperty {
    public fun role(): String? = unwrap(this).getRole()

    @CdkDslMarker
    public interface Builder {
      public fun role(role: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingScopeProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingScopeProperty.builder()

      override fun role(role: String) {
        cdkBuilder.role(role)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingScopeProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingScopeProperty,
    ) : CdkObject(cdkObject), PivotTableConditionalFormattingScopeProperty {
      override fun role(): String? = unwrap(this).getRole()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableConditionalFormattingScopeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingScopeProperty):
          PivotTableConditionalFormattingScopeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableConditionalFormattingScopeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingScopeProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingScopeProperty
    }
  }

  public interface ParameterDropDownControlProperty {
    public fun cascadingControlConfiguration(): Any? =
        unwrap(this).getCascadingControlConfiguration()

    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun parameterControlId(): String

    public fun selectableValues(): Any? = unwrap(this).getSelectableValues()

    public fun sourceParameterName(): String

    public fun title(): String

    public fun type(): String? = unwrap(this).getType()

    @CdkDslMarker
    public interface Builder {
      public fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable)

      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a8f318a0fff567e4eaf8f67a18a7aedbe619db6817237e2652fc26b5d885127c")
      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit)

      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("67b456993c599fce839cc253ca105abc9697b7cf0b7ec4e9ed8766f05e58e96b")
      public
          fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun parameterControlId(parameterControlId: String)

      public fun selectableValues(selectableValues: IResolvable)

      public fun selectableValues(selectableValues: ParameterSelectableValuesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b56c1643c5ab0b42e2a2f92aedc9fa35f149d3c66d7ecf7878a773cd8ddff6c")
      public
          fun selectableValues(selectableValues: ParameterSelectableValuesProperty.Builder.() -> Unit)

      public fun sourceParameterName(sourceParameterName: String)

      public fun title(title: String)

      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDropDownControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDropDownControlProperty.builder()

      override fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(IResolvable::unwrap))
      }

      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(CascadingControlConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a8f318a0fff567e4eaf8f67a18a7aedbe619db6817237e2652fc26b5d885127c")
      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit):
          Unit =
          cascadingControlConfiguration(CascadingControlConfigurationProperty(cascadingControlConfiguration))

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(DropDownControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("67b456993c599fce839cc253ca105abc9697b7cf0b7ec4e9ed8766f05e58e96b")
      override
          fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(DropDownControlDisplayOptionsProperty(displayOptions))

      override fun parameterControlId(parameterControlId: String) {
        cdkBuilder.parameterControlId(parameterControlId)
      }

      override fun selectableValues(selectableValues: IResolvable) {
        cdkBuilder.selectableValues(selectableValues.let(IResolvable::unwrap))
      }

      override fun selectableValues(selectableValues: ParameterSelectableValuesProperty) {
        cdkBuilder.selectableValues(selectableValues.let(ParameterSelectableValuesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b56c1643c5ab0b42e2a2f92aedc9fa35f149d3c66d7ecf7878a773cd8ddff6c")
      override
          fun selectableValues(selectableValues: ParameterSelectableValuesProperty.Builder.() -> Unit):
          Unit = selectableValues(ParameterSelectableValuesProperty(selectableValues))

      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDropDownControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDropDownControlProperty,
    ) : CdkObject(cdkObject), ParameterDropDownControlProperty {
      override fun cascadingControlConfiguration(): Any? =
          unwrap(this).getCascadingControlConfiguration()

      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun parameterControlId(): String = unwrap(this).getParameterControlId()

      override fun selectableValues(): Any? = unwrap(this).getSelectableValues()

      override fun sourceParameterName(): String = unwrap(this).getSourceParameterName()

      override fun title(): String = unwrap(this).getTitle()

      override fun type(): String? = unwrap(this).getType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ParameterDropDownControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDropDownControlProperty):
          ParameterDropDownControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterDropDownControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDropDownControlProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterDropDownControlProperty
    }
  }

  public interface SectionStyleProperty {
    public fun height(): String? = unwrap(this).getHeight()

    public fun padding(): Any? = unwrap(this).getPadding()

    @CdkDslMarker
    public interface Builder {
      public fun height(height: String)

      public fun padding(padding: IResolvable)

      public fun padding(padding: SpacingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c8d5d0d8a8f52e48b702bf42c40ab8e62cdf3da71f417ce20a1597b74f2e2419")
      public fun padding(padding: SpacingProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionStyleProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionStyleProperty.builder()

      override fun height(height: String) {
        cdkBuilder.height(height)
      }

      override fun padding(padding: IResolvable) {
        cdkBuilder.padding(padding.let(IResolvable::unwrap))
      }

      override fun padding(padding: SpacingProperty) {
        cdkBuilder.padding(padding.let(SpacingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c8d5d0d8a8f52e48b702bf42c40ab8e62cdf3da71f417ce20a1597b74f2e2419")
      override fun padding(padding: SpacingProperty.Builder.() -> Unit): Unit =
          padding(SpacingProperty(padding))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionStyleProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionStyleProperty,
    ) : CdkObject(cdkObject), SectionStyleProperty {
      override fun height(): String? = unwrap(this).getHeight()

      override fun padding(): Any? = unwrap(this).getPadding()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SectionStyleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SectionStyleProperty):
          SectionStyleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionStyleProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionStyleProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionStyleProperty
    }
  }

  public interface ReferenceLineValueLabelConfigurationProperty {
    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    public fun relativePosition(): String? = unwrap(this).getRelativePosition()

    @CdkDslMarker
    public interface Builder {
      public fun formatConfiguration(formatConfiguration: IResolvable)

      public fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6360ee536f172a30c2cf9e43b86391e45ed69d6d88b8492ead1fb4b84bb62430")
      public
          fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit)

      public fun relativePosition(relativePosition: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineValueLabelConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineValueLabelConfigurationProperty.builder()

      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      override fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(NumericFormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6360ee536f172a30c2cf9e43b86391e45ed69d6d88b8492ead1fb4b84bb62430")
      override
          fun formatConfiguration(formatConfiguration: NumericFormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(NumericFormatConfigurationProperty(formatConfiguration))

      override fun relativePosition(relativePosition: String) {
        cdkBuilder.relativePosition(relativePosition)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineValueLabelConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineValueLabelConfigurationProperty,
    ) : CdkObject(cdkObject), ReferenceLineValueLabelConfigurationProperty {
      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

      override fun relativePosition(): String? = unwrap(this).getRelativePosition()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ReferenceLineValueLabelConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineValueLabelConfigurationProperty):
          ReferenceLineValueLabelConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ReferenceLineValueLabelConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineValueLabelConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ReferenceLineValueLabelConfigurationProperty
    }
  }

  public interface AnchorDateConfigurationProperty {
    public fun anchorOption(): String? = unwrap(this).getAnchorOption()

    public fun parameterName(): String? = unwrap(this).getParameterName()

    @CdkDslMarker
    public interface Builder {
      public fun anchorOption(anchorOption: String)

      public fun parameterName(parameterName: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AnchorDateConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AnchorDateConfigurationProperty.builder()

      override fun anchorOption(anchorOption: String) {
        cdkBuilder.anchorOption(anchorOption)
      }

      override fun parameterName(parameterName: String) {
        cdkBuilder.parameterName(parameterName)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AnchorDateConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AnchorDateConfigurationProperty,
    ) : CdkObject(cdkObject), AnchorDateConfigurationProperty {
      override fun anchorOption(): String? = unwrap(this).getAnchorOption()

      override fun parameterName(): String? = unwrap(this).getParameterName()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AnchorDateConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AnchorDateConfigurationProperty):
          AnchorDateConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AnchorDateConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AnchorDateConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AnchorDateConfigurationProperty
    }
  }

  public interface PivotTableConditionalFormattingOptionProperty {
    public fun cell(): Any? = unwrap(this).getCell()

    @CdkDslMarker
    public interface Builder {
      public fun cell(cell: IResolvable)

      public fun cell(cell: PivotTableCellConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("503522da9c21c11cedae9349f7b62530a0452bb5680eb717d3f53d63099c6e56")
      public fun cell(cell: PivotTableCellConditionalFormattingProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingOptionProperty.builder()

      override fun cell(cell: IResolvable) {
        cdkBuilder.cell(cell.let(IResolvable::unwrap))
      }

      override fun cell(cell: PivotTableCellConditionalFormattingProperty) {
        cdkBuilder.cell(cell.let(PivotTableCellConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("503522da9c21c11cedae9349f7b62530a0452bb5680eb717d3f53d63099c6e56")
      override fun cell(cell: PivotTableCellConditionalFormattingProperty.Builder.() -> Unit): Unit
          = cell(PivotTableCellConditionalFormattingProperty(cell))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingOptionProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingOptionProperty,
    ) : CdkObject(cdkObject), PivotTableConditionalFormattingOptionProperty {
      override fun cell(): Any? = unwrap(this).getCell()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableConditionalFormattingOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingOptionProperty):
          PivotTableConditionalFormattingOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableConditionalFormattingOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingOptionProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableConditionalFormattingOptionProperty
    }
  }

  public interface CalculatedFieldProperty {
    public fun dataSetIdentifier(): String

    public fun expression(): String

    public fun name(): String

    @CdkDslMarker
    public interface Builder {
      public fun dataSetIdentifier(dataSetIdentifier: String)

      public fun expression(expression: String)

      public fun name(name: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedFieldProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedFieldProperty.builder()

      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedFieldProperty,
    ) : CdkObject(cdkObject), CalculatedFieldProperty {
      override fun dataSetIdentifier(): String = unwrap(this).getDataSetIdentifier()

      override fun expression(): String = unwrap(this).getExpression()

      override fun name(): String = unwrap(this).getName()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): CalculatedFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedFieldProperty):
          CalculatedFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CalculatedFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedFieldProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CalculatedFieldProperty
    }
  }

  public interface NumericEqualityFilterProperty {
    public fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

    public fun column(): Any

    public fun filterId(): String

    public fun matchOperator(): String

    public fun nullOption(): String

    public fun parameterName(): String? = unwrap(this).getParameterName()

    public fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()

    public fun `value`(): Number? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun aggregationFunction(aggregationFunction: IResolvable)

      public fun aggregationFunction(aggregationFunction: AggregationFunctionProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd773f1c4a8046c5d54a4d18c30e6b15917785df69bb959532441a628ff8db07")
      public
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit)

      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8c4ce0e6be2215ff9d96e9a93eb1e08a064a6df678490080d6658f261e61df0d")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun filterId(filterId: String)

      public fun matchOperator(matchOperator: String)

      public fun nullOption(nullOption: String)

      public fun parameterName(parameterName: String)

      public fun selectAllOptions(selectAllOptions: String)

      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityFilterProperty.builder()

      override fun aggregationFunction(aggregationFunction: IResolvable) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(IResolvable::unwrap))
      }

      override fun aggregationFunction(aggregationFunction: AggregationFunctionProperty) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(AggregationFunctionProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dd773f1c4a8046c5d54a4d18c30e6b15917785df69bb959532441a628ff8db07")
      override
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit):
          Unit = aggregationFunction(AggregationFunctionProperty(aggregationFunction))

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8c4ce0e6be2215ff9d96e9a93eb1e08a064a6df678490080d6658f261e61df0d")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      override fun matchOperator(matchOperator: String) {
        cdkBuilder.matchOperator(matchOperator)
      }

      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      override fun parameterName(parameterName: String) {
        cdkBuilder.parameterName(parameterName)
      }

      override fun selectAllOptions(selectAllOptions: String) {
        cdkBuilder.selectAllOptions(selectAllOptions)
      }

      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityFilterProperty,
    ) : CdkObject(cdkObject), NumericEqualityFilterProperty {
      override fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

      override fun column(): Any = unwrap(this).getColumn()

      override fun filterId(): String = unwrap(this).getFilterId()

      override fun matchOperator(): String = unwrap(this).getMatchOperator()

      override fun nullOption(): String = unwrap(this).getNullOption()

      override fun parameterName(): String? = unwrap(this).getParameterName()

      override fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()

      override fun `value`(): Number? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): NumericEqualityFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityFilterProperty):
          NumericEqualityFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericEqualityFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityFilterProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericEqualityFilterProperty
    }
  }

  public interface ParameterTextAreaControlProperty {
    public fun delimiter(): String? = unwrap(this).getDelimiter()

    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun parameterControlId(): String

    public fun sourceParameterName(): String

    public fun title(): String

    @CdkDslMarker
    public interface Builder {
      public fun delimiter(delimiter: String)

      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e9a386613be01eefa389e04decdb3274b53166ffb405ec6ff59df6550e9978e7")
      public
          fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun parameterControlId(parameterControlId: String)

      public fun sourceParameterName(sourceParameterName: String)

      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextAreaControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextAreaControlProperty.builder()

      override fun delimiter(delimiter: String) {
        cdkBuilder.delimiter(delimiter)
      }

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(TextAreaControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e9a386613be01eefa389e04decdb3274b53166ffb405ec6ff59df6550e9978e7")
      override
          fun displayOptions(displayOptions: TextAreaControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(TextAreaControlDisplayOptionsProperty(displayOptions))

      override fun parameterControlId(parameterControlId: String) {
        cdkBuilder.parameterControlId(parameterControlId)
      }

      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextAreaControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextAreaControlProperty,
    ) : CdkObject(cdkObject), ParameterTextAreaControlProperty {
      override fun delimiter(): String? = unwrap(this).getDelimiter()

      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun parameterControlId(): String = unwrap(this).getParameterControlId()

      override fun sourceParameterName(): String = unwrap(this).getSourceParameterName()

      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ParameterTextAreaControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextAreaControlProperty):
          ParameterTextAreaControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterTextAreaControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextAreaControlProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterTextAreaControlProperty
    }
  }

  public interface KPIPrimaryValueConditionalFormattingProperty {
    public fun icon(): Any? = unwrap(this).getIcon()

    public fun textColor(): Any? = unwrap(this).getTextColor()

    @CdkDslMarker
    public interface Builder {
      public fun icon(icon: IResolvable)

      public fun icon(icon: ConditionalFormattingIconProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a0ae871d9ef9ebdba0da3c9052fc7cce473957c6487b70252021e36a3837e9f9")
      public fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit)

      public fun textColor(textColor: IResolvable)

      public fun textColor(textColor: ConditionalFormattingColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9b383bed36b43f7a5446199048b99b0d9e6ee638a006b9b9017312db245301e7")
      public fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIPrimaryValueConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIPrimaryValueConditionalFormattingProperty.builder()

      override fun icon(icon: IResolvable) {
        cdkBuilder.icon(icon.let(IResolvable::unwrap))
      }

      override fun icon(icon: ConditionalFormattingIconProperty) {
        cdkBuilder.icon(icon.let(ConditionalFormattingIconProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a0ae871d9ef9ebdba0da3c9052fc7cce473957c6487b70252021e36a3837e9f9")
      override fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit): Unit =
          icon(ConditionalFormattingIconProperty(icon))

      override fun textColor(textColor: IResolvable) {
        cdkBuilder.textColor(textColor.let(IResolvable::unwrap))
      }

      override fun textColor(textColor: ConditionalFormattingColorProperty) {
        cdkBuilder.textColor(textColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9b383bed36b43f7a5446199048b99b0d9e6ee638a006b9b9017312db245301e7")
      override fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit): Unit
          = textColor(ConditionalFormattingColorProperty(textColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIPrimaryValueConditionalFormattingProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIPrimaryValueConditionalFormattingProperty,
    ) : CdkObject(cdkObject), KPIPrimaryValueConditionalFormattingProperty {
      override fun icon(): Any? = unwrap(this).getIcon()

      override fun textColor(): Any? = unwrap(this).getTextColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          KPIPrimaryValueConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPIPrimaryValueConditionalFormattingProperty):
          KPIPrimaryValueConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIPrimaryValueConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIPrimaryValueConditionalFormattingProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIPrimaryValueConditionalFormattingProperty
    }
  }

  public interface TableCellImageSizingConfigurationProperty {
    public fun tableCellImageScalingConfiguration(): String? =
        unwrap(this).getTableCellImageScalingConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun tableCellImageScalingConfiguration(tableCellImageScalingConfiguration: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellImageSizingConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellImageSizingConfigurationProperty.builder()

      override fun tableCellImageScalingConfiguration(tableCellImageScalingConfiguration: String) {
        cdkBuilder.tableCellImageScalingConfiguration(tableCellImageScalingConfiguration)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellImageSizingConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellImageSizingConfigurationProperty,
    ) : CdkObject(cdkObject), TableCellImageSizingConfigurationProperty {
      override fun tableCellImageScalingConfiguration(): String? =
          unwrap(this).getTableCellImageScalingConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableCellImageSizingConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellImageSizingConfigurationProperty):
          TableCellImageSizingConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableCellImageSizingConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellImageSizingConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableCellImageSizingConfigurationProperty
    }
  }

  public interface ConditionalFormattingCustomIconConditionProperty {
    public fun color(): String? = unwrap(this).getColor()

    public fun displayConfiguration(): Any? = unwrap(this).getDisplayConfiguration()

    public fun expression(): String

    public fun iconOptions(): Any

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)

      public fun displayConfiguration(displayConfiguration: IResolvable)

      public
          fun displayConfiguration(displayConfiguration: ConditionalFormattingIconDisplayConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("616c59cf731a4d995532846b3d749efb610a6061f661ae9981c6181847455840")
      public
          fun displayConfiguration(displayConfiguration: ConditionalFormattingIconDisplayConfigurationProperty.Builder.() -> Unit)

      public fun expression(expression: String)

      public fun iconOptions(iconOptions: IResolvable)

      public fun iconOptions(iconOptions: ConditionalFormattingCustomIconOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1f89c2321fd1ac8590af00671afa2599ec2f926c01cfbf36160303f596ad4897")
      public
          fun iconOptions(iconOptions: ConditionalFormattingCustomIconOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconConditionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconConditionProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      override fun displayConfiguration(displayConfiguration: IResolvable) {
        cdkBuilder.displayConfiguration(displayConfiguration.let(IResolvable::unwrap))
      }

      override
          fun displayConfiguration(displayConfiguration: ConditionalFormattingIconDisplayConfigurationProperty) {
        cdkBuilder.displayConfiguration(displayConfiguration.let(ConditionalFormattingIconDisplayConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("616c59cf731a4d995532846b3d749efb610a6061f661ae9981c6181847455840")
      override
          fun displayConfiguration(displayConfiguration: ConditionalFormattingIconDisplayConfigurationProperty.Builder.() -> Unit):
          Unit =
          displayConfiguration(ConditionalFormattingIconDisplayConfigurationProperty(displayConfiguration))

      override fun expression(expression: String) {
        cdkBuilder.expression(expression)
      }

      override fun iconOptions(iconOptions: IResolvable) {
        cdkBuilder.iconOptions(iconOptions.let(IResolvable::unwrap))
      }

      override fun iconOptions(iconOptions: ConditionalFormattingCustomIconOptionsProperty) {
        cdkBuilder.iconOptions(iconOptions.let(ConditionalFormattingCustomIconOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1f89c2321fd1ac8590af00671afa2599ec2f926c01cfbf36160303f596ad4897")
      override
          fun iconOptions(iconOptions: ConditionalFormattingCustomIconOptionsProperty.Builder.() -> Unit):
          Unit = iconOptions(ConditionalFormattingCustomIconOptionsProperty(iconOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconConditionProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconConditionProperty,
    ) : CdkObject(cdkObject), ConditionalFormattingCustomIconConditionProperty {
      override fun color(): String? = unwrap(this).getColor()

      override fun displayConfiguration(): Any? = unwrap(this).getDisplayConfiguration()

      override fun expression(): String = unwrap(this).getExpression()

      override fun iconOptions(): Any = unwrap(this).getIconOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingCustomIconConditionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconConditionProperty):
          ConditionalFormattingCustomIconConditionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingCustomIconConditionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconConditionProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconConditionProperty
    }
  }

  public interface FieldSortProperty {
    public fun direction(): String

    public fun fieldId(): String

    @CdkDslMarker
    public interface Builder {
      public fun direction(direction: String)

      public fun fieldId(fieldId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortProperty.builder()

      override fun direction(direction: String) {
        cdkBuilder.direction(direction)
      }

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortProperty,
    ) : CdkObject(cdkObject), FieldSortProperty {
      override fun direction(): String = unwrap(this).getDirection()

      override fun fieldId(): String = unwrap(this).getFieldId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FieldSortProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortProperty):
          FieldSortProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FieldSortProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldSortProperty
    }
  }

  public interface PivotTableSortByProperty {
    public fun column(): Any? = unwrap(this).getColumn()

    public fun dataPath(): Any? = unwrap(this).getDataPath()

    public fun `field`(): Any? = unwrap(this).getField()

    @CdkDslMarker
    public interface Builder {
      public fun column(column: IResolvable)

      public fun column(column: ColumnSortProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eed61f2b45d84614b0612c4c53ac6279ca2e14a1ed89d6b6bc3ad4b179ee6105")
      public fun column(column: ColumnSortProperty.Builder.() -> Unit)

      public fun dataPath(dataPath: IResolvable)

      public fun dataPath(dataPath: DataPathSortProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("18d197008d948715e5a74bb8046a95bc5591d5fae5fe566181dca2bab77e7596")
      public fun dataPath(dataPath: DataPathSortProperty.Builder.() -> Unit)

      public fun `field`(`field`: IResolvable)

      public fun `field`(`field`: FieldSortProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("71e00978bc00296e8a5e822bc340073455cfd5db5879d3753f65697d83017eaf")
      public fun `field`(`field`: FieldSortProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortByProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortByProperty.builder()

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnSortProperty) {
        cdkBuilder.column(column.let(ColumnSortProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eed61f2b45d84614b0612c4c53ac6279ca2e14a1ed89d6b6bc3ad4b179ee6105")
      override fun column(column: ColumnSortProperty.Builder.() -> Unit): Unit =
          column(ColumnSortProperty(column))

      override fun dataPath(dataPath: IResolvable) {
        cdkBuilder.dataPath(dataPath.let(IResolvable::unwrap))
      }

      override fun dataPath(dataPath: DataPathSortProperty) {
        cdkBuilder.dataPath(dataPath.let(DataPathSortProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("18d197008d948715e5a74bb8046a95bc5591d5fae5fe566181dca2bab77e7596")
      override fun dataPath(dataPath: DataPathSortProperty.Builder.() -> Unit): Unit =
          dataPath(DataPathSortProperty(dataPath))

      override fun `field`(`field`: IResolvable) {
        cdkBuilder.`field`(`field`.let(IResolvable::unwrap))
      }

      override fun `field`(`field`: FieldSortProperty) {
        cdkBuilder.`field`(`field`.let(FieldSortProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("71e00978bc00296e8a5e822bc340073455cfd5db5879d3753f65697d83017eaf")
      override fun `field`(`field`: FieldSortProperty.Builder.() -> Unit): Unit =
          `field`(FieldSortProperty(`field`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortByProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortByProperty,
    ) : CdkObject(cdkObject), PivotTableSortByProperty {
      override fun column(): Any? = unwrap(this).getColumn()

      override fun dataPath(): Any? = unwrap(this).getDataPath()

      override fun `field`(): Any? = unwrap(this).getField()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableSortByProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortByProperty):
          PivotTableSortByProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableSortByProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortByProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortByProperty
    }
  }

  public interface TableUnaggregatedFieldWellsProperty {
    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableUnaggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableUnaggregatedFieldWellsProperty.builder()

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableUnaggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableUnaggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), TableUnaggregatedFieldWellsProperty {
      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableUnaggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableUnaggregatedFieldWellsProperty):
          TableUnaggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableUnaggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableUnaggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableUnaggregatedFieldWellsProperty
    }
  }

  public interface DataPathColorProperty {
    public fun color(): String

    public fun element(): Any

    public fun timeGranularity(): String? = unwrap(this).getTimeGranularity()

    @CdkDslMarker
    public interface Builder {
      public fun color(color: String)

      public fun element(element: IResolvable)

      public fun element(element: DataPathValueProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2cfa6e678ed5971141b174f829fd49e9f91c2cbca4214c3b91465afbc5ef24b5")
      public fun element(element: DataPathValueProperty.Builder.() -> Unit)

      public fun timeGranularity(timeGranularity: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathColorProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathColorProperty.builder()

      override fun color(color: String) {
        cdkBuilder.color(color)
      }

      override fun element(element: IResolvable) {
        cdkBuilder.element(element.let(IResolvable::unwrap))
      }

      override fun element(element: DataPathValueProperty) {
        cdkBuilder.element(element.let(DataPathValueProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2cfa6e678ed5971141b174f829fd49e9f91c2cbca4214c3b91465afbc5ef24b5")
      override fun element(element: DataPathValueProperty.Builder.() -> Unit): Unit =
          element(DataPathValueProperty(element))

      override fun timeGranularity(timeGranularity: String) {
        cdkBuilder.timeGranularity(timeGranularity)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathColorProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathColorProperty,
    ) : CdkObject(cdkObject), DataPathColorProperty {
      override fun color(): String = unwrap(this).getColor()

      override fun element(): Any = unwrap(this).getElement()

      override fun timeGranularity(): String? = unwrap(this).getTimeGranularity()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataPathColorProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathColorProperty):
          DataPathColorProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataPathColorProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathColorProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathColorProperty
    }
  }

  public interface SectionBasedLayoutCanvasSizeOptionsProperty {
    public fun paperCanvasSizeOptions(): Any? = unwrap(this).getPaperCanvasSizeOptions()

    @CdkDslMarker
    public interface Builder {
      public fun paperCanvasSizeOptions(paperCanvasSizeOptions: IResolvable)

      public
          fun paperCanvasSizeOptions(paperCanvasSizeOptions: SectionBasedLayoutPaperCanvasSizeOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0c5acb4ab658328032d4c41a0a4735aa7f3f9e4a701c9a09262e44ddfe19707a")
      public
          fun paperCanvasSizeOptions(paperCanvasSizeOptions: SectionBasedLayoutPaperCanvasSizeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutCanvasSizeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutCanvasSizeOptionsProperty.builder()

      override fun paperCanvasSizeOptions(paperCanvasSizeOptions: IResolvable) {
        cdkBuilder.paperCanvasSizeOptions(paperCanvasSizeOptions.let(IResolvable::unwrap))
      }

      override
          fun paperCanvasSizeOptions(paperCanvasSizeOptions: SectionBasedLayoutPaperCanvasSizeOptionsProperty) {
        cdkBuilder.paperCanvasSizeOptions(paperCanvasSizeOptions.let(SectionBasedLayoutPaperCanvasSizeOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0c5acb4ab658328032d4c41a0a4735aa7f3f9e4a701c9a09262e44ddfe19707a")
      override
          fun paperCanvasSizeOptions(paperCanvasSizeOptions: SectionBasedLayoutPaperCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit =
          paperCanvasSizeOptions(SectionBasedLayoutPaperCanvasSizeOptionsProperty(paperCanvasSizeOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutCanvasSizeOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutCanvasSizeOptionsProperty,
    ) : CdkObject(cdkObject), SectionBasedLayoutCanvasSizeOptionsProperty {
      override fun paperCanvasSizeOptions(): Any? = unwrap(this).getPaperCanvasSizeOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SectionBasedLayoutCanvasSizeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutCanvasSizeOptionsProperty):
          SectionBasedLayoutCanvasSizeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SectionBasedLayoutCanvasSizeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutCanvasSizeOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SectionBasedLayoutCanvasSizeOptionsProperty
    }
  }

  public interface WordCloudOptionsProperty {
    public fun cloudLayout(): String? = unwrap(this).getCloudLayout()

    public fun maximumStringLength(): Number? = unwrap(this).getMaximumStringLength()

    public fun wordCasing(): String? = unwrap(this).getWordCasing()

    public fun wordOrientation(): String? = unwrap(this).getWordOrientation()

    public fun wordPadding(): String? = unwrap(this).getWordPadding()

    public fun wordScaling(): String? = unwrap(this).getWordScaling()

    @CdkDslMarker
    public interface Builder {
      public fun cloudLayout(cloudLayout: String)

      public fun maximumStringLength(maximumStringLength: Number)

      public fun wordCasing(wordCasing: String)

      public fun wordOrientation(wordOrientation: String)

      public fun wordPadding(wordPadding: String)

      public fun wordScaling(wordScaling: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudOptionsProperty.builder()

      override fun cloudLayout(cloudLayout: String) {
        cdkBuilder.cloudLayout(cloudLayout)
      }

      override fun maximumStringLength(maximumStringLength: Number) {
        cdkBuilder.maximumStringLength(maximumStringLength)
      }

      override fun wordCasing(wordCasing: String) {
        cdkBuilder.wordCasing(wordCasing)
      }

      override fun wordOrientation(wordOrientation: String) {
        cdkBuilder.wordOrientation(wordOrientation)
      }

      override fun wordPadding(wordPadding: String) {
        cdkBuilder.wordPadding(wordPadding)
      }

      override fun wordScaling(wordScaling: String) {
        cdkBuilder.wordScaling(wordScaling)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudOptionsProperty,
    ) : CdkObject(cdkObject), WordCloudOptionsProperty {
      override fun cloudLayout(): String? = unwrap(this).getCloudLayout()

      override fun maximumStringLength(): Number? = unwrap(this).getMaximumStringLength()

      override fun wordCasing(): String? = unwrap(this).getWordCasing()

      override fun wordOrientation(): String? = unwrap(this).getWordOrientation()

      override fun wordPadding(): String? = unwrap(this).getWordPadding()

      override fun wordScaling(): String? = unwrap(this).getWordScaling()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): WordCloudOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudOptionsProperty):
          WordCloudOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WordCloudOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudOptionsProperty
    }
  }

  public interface DataPathLabelTypeProperty {
    public fun fieldId(): String? = unwrap(this).getFieldId()

    public fun fieldValue(): String? = unwrap(this).getFieldValue()

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun fieldId(fieldId: String)

      public fun fieldValue(fieldValue: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathLabelTypeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathLabelTypeProperty.builder()

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun fieldValue(fieldValue: String) {
        cdkBuilder.fieldValue(fieldValue)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathLabelTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathLabelTypeProperty,
    ) : CdkObject(cdkObject), DataPathLabelTypeProperty {
      override fun fieldId(): String? = unwrap(this).getFieldId()

      override fun fieldValue(): String? = unwrap(this).getFieldValue()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataPathLabelTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathLabelTypeProperty):
          DataPathLabelTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataPathLabelTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathLabelTypeProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataPathLabelTypeProperty
    }
  }

  public interface ParameterSliderControlProperty {
    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun maximumValue(): Number

    public fun minimumValue(): Number

    public fun parameterControlId(): String

    public fun sourceParameterName(): String

    public fun stepSize(): Number

    public fun title(): String

    @CdkDslMarker
    public interface Builder {
      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("215bac8c3fcd7a84aa70416d378c3f9c7ada21452f33d506c9b3ba04c3170808")
      public
          fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun maximumValue(maximumValue: Number)

      public fun minimumValue(minimumValue: Number)

      public fun parameterControlId(parameterControlId: String)

      public fun sourceParameterName(sourceParameterName: String)

      public fun stepSize(stepSize: Number)

      public fun title(title: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSliderControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSliderControlProperty.builder()

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(SliderControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("215bac8c3fcd7a84aa70416d378c3f9c7ada21452f33d506c9b3ba04c3170808")
      override
          fun displayOptions(displayOptions: SliderControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(SliderControlDisplayOptionsProperty(displayOptions))

      override fun maximumValue(maximumValue: Number) {
        cdkBuilder.maximumValue(maximumValue)
      }

      override fun minimumValue(minimumValue: Number) {
        cdkBuilder.minimumValue(minimumValue)
      }

      override fun parameterControlId(parameterControlId: String) {
        cdkBuilder.parameterControlId(parameterControlId)
      }

      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      override fun stepSize(stepSize: Number) {
        cdkBuilder.stepSize(stepSize)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSliderControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSliderControlProperty,
    ) : CdkObject(cdkObject), ParameterSliderControlProperty {
      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun maximumValue(): Number = unwrap(this).getMaximumValue()

      override fun minimumValue(): Number = unwrap(this).getMinimumValue()

      override fun parameterControlId(): String = unwrap(this).getParameterControlId()

      override fun sourceParameterName(): String = unwrap(this).getSourceParameterName()

      override fun stepSize(): Number = unwrap(this).getStepSize()

      override fun title(): String = unwrap(this).getTitle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ParameterSliderControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSliderControlProperty):
          ParameterSliderControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterSliderControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSliderControlProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterSliderControlProperty
    }
  }

  public interface PieChartConfigurationProperty {
    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    public fun contributionAnalysisDefaults(): Any? = unwrap(this).getContributionAnalysisDefaults()

    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    public fun donutOptions(): Any? = unwrap(this).getDonutOptions()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun legend(): Any? = unwrap(this).getLegend()

    public fun smallMultiplesOptions(): Any? = unwrap(this).getSmallMultiplesOptions()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun tooltip(): Any? = unwrap(this).getTooltip()

    public fun valueLabelOptions(): Any? = unwrap(this).getValueLabelOptions()

    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    @CdkDslMarker
    public interface Builder {
      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a15f41817228a650dd81da27e70c1d1c23b4a8b612015ae4f071fb10254b5f9e")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun contributionAnalysisDefaults(contributionAnalysisDefaults: IResolvable)

      public fun contributionAnalysisDefaults(contributionAnalysisDefaults: List<Any>)

      public fun contributionAnalysisDefaults(vararg contributionAnalysisDefaults: Any)

      public fun dataLabels(dataLabels: IResolvable)

      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b0fec59bb6dbb3fa3087fcd9e0c35c89247df705812687e6d06b419c1758e7b8")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      public fun donutOptions(donutOptions: IResolvable)

      public fun donutOptions(donutOptions: DonutOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d12005aaccf125c91950cf3a35b608b0a1e7f48db39cf3ac0448dcd8f9000885")
      public fun donutOptions(donutOptions: DonutOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: PieChartFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b1341ef8c67a957aedd6a9cd6ad420114deed0fb568e32d7bbfb1369a45038a")
      public fun fieldWells(fieldWells: PieChartFieldWellsProperty.Builder.() -> Unit)

      public fun legend(legend: IResolvable)

      public fun legend(legend: LegendOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b2127461bd78cc7dcce0d7fd1f9ef7c9a24ba38fe20ed8a1439422ed56449d0f")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      public fun smallMultiplesOptions(smallMultiplesOptions: IResolvable)

      public fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d31e36e8c5ed09e0fb75621973f76d3c6919fadffe3eff6f2b83d94de5882773")
      public
          fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: PieChartSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("afbdf0eafc097ad9917e878f57c84ea00dd4f76cb4986fcd712bdc819992e901")
      public
          fun sortConfiguration(sortConfiguration: PieChartSortConfigurationProperty.Builder.() -> Unit)

      public fun tooltip(tooltip: IResolvable)

      public fun tooltip(tooltip: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cbe719562d1d7cc2a390680b12b2ee25943117e7e17ec5586a90382eb15b20ad")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      public fun valueLabelOptions(valueLabelOptions: IResolvable)

      public fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2fdf7218c577ed1f118aa63a032b06f0fc013f83e171d4171946ea73c98da05d")
      public
          fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun visualPalette(visualPalette: IResolvable)

      public fun visualPalette(visualPalette: VisualPaletteProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bd2bf1b672c1e0e9476da35b0891581cfbf2cde1924792f8d83d2fdb4a03f78b")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartConfigurationProperty.builder()

      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a15f41817228a650dd81da27e70c1d1c23b4a8b612015ae4f071fb10254b5f9e")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      override fun contributionAnalysisDefaults(contributionAnalysisDefaults: IResolvable) {
        cdkBuilder.contributionAnalysisDefaults(contributionAnalysisDefaults.let(IResolvable::unwrap))
      }

      override fun contributionAnalysisDefaults(contributionAnalysisDefaults: List<Any>) {
        cdkBuilder.contributionAnalysisDefaults(contributionAnalysisDefaults)
      }

      override fun contributionAnalysisDefaults(vararg contributionAnalysisDefaults: Any): Unit =
          contributionAnalysisDefaults(contributionAnalysisDefaults.toList())

      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b0fec59bb6dbb3fa3087fcd9e0c35c89247df705812687e6d06b419c1758e7b8")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      override fun donutOptions(donutOptions: IResolvable) {
        cdkBuilder.donutOptions(donutOptions.let(IResolvable::unwrap))
      }

      override fun donutOptions(donutOptions: DonutOptionsProperty) {
        cdkBuilder.donutOptions(donutOptions.let(DonutOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d12005aaccf125c91950cf3a35b608b0a1e7f48db39cf3ac0448dcd8f9000885")
      override fun donutOptions(donutOptions: DonutOptionsProperty.Builder.() -> Unit): Unit =
          donutOptions(DonutOptionsProperty(donutOptions))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: PieChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(PieChartFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8b1341ef8c67a957aedd6a9cd6ad420114deed0fb568e32d7bbfb1369a45038a")
      override fun fieldWells(fieldWells: PieChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(PieChartFieldWellsProperty(fieldWells))

      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b2127461bd78cc7dcce0d7fd1f9ef7c9a24ba38fe20ed8a1439422ed56449d0f")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      override fun smallMultiplesOptions(smallMultiplesOptions: IResolvable) {
        cdkBuilder.smallMultiplesOptions(smallMultiplesOptions.let(IResolvable::unwrap))
      }

      override fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty) {
        cdkBuilder.smallMultiplesOptions(smallMultiplesOptions.let(SmallMultiplesOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d31e36e8c5ed09e0fb75621973f76d3c6919fadffe3eff6f2b83d94de5882773")
      override
          fun smallMultiplesOptions(smallMultiplesOptions: SmallMultiplesOptionsProperty.Builder.() -> Unit):
          Unit = smallMultiplesOptions(SmallMultiplesOptionsProperty(smallMultiplesOptions))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: PieChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(PieChartSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("afbdf0eafc097ad9917e878f57c84ea00dd4f76cb4986fcd712bdc819992e901")
      override
          fun sortConfiguration(sortConfiguration: PieChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(PieChartSortConfigurationProperty(sortConfiguration))

      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cbe719562d1d7cc2a390680b12b2ee25943117e7e17ec5586a90382eb15b20ad")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      override fun valueLabelOptions(valueLabelOptions: IResolvable) {
        cdkBuilder.valueLabelOptions(valueLabelOptions.let(IResolvable::unwrap))
      }

      override fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.valueLabelOptions(valueLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2fdf7218c577ed1f118aa63a032b06f0fc013f83e171d4171946ea73c98da05d")
      override
          fun valueLabelOptions(valueLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = valueLabelOptions(ChartAxisLabelOptionsProperty(valueLabelOptions))

      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bd2bf1b672c1e0e9476da35b0891581cfbf2cde1924792f8d83d2fdb4a03f78b")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartConfigurationProperty,
    ) : CdkObject(cdkObject), PieChartConfigurationProperty {
      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      override fun contributionAnalysisDefaults(): Any? =
          unwrap(this).getContributionAnalysisDefaults()

      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      override fun donutOptions(): Any? = unwrap(this).getDonutOptions()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun legend(): Any? = unwrap(this).getLegend()

      override fun smallMultiplesOptions(): Any? = unwrap(this).getSmallMultiplesOptions()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun tooltip(): Any? = unwrap(this).getTooltip()

      override fun valueLabelOptions(): Any? = unwrap(this).getValueLabelOptions()

      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PieChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartConfigurationProperty):
          PieChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PieChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PieChartConfigurationProperty
    }
  }

  public interface TemplateSourceTemplateProperty {
    public fun arn(): String

    @CdkDslMarker
    public interface Builder {
      public fun arn(arn: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceTemplateProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceTemplateProperty.builder()

      override fun arn(arn: String) {
        cdkBuilder.arn(arn)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceTemplateProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceTemplateProperty,
    ) : CdkObject(cdkObject), TemplateSourceTemplateProperty {
      override fun arn(): String = unwrap(this).getArn()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TemplateSourceTemplateProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceTemplateProperty):
          TemplateSourceTemplateProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TemplateSourceTemplateProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceTemplateProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceTemplateProperty
    }
  }

  public interface TreeMapConfigurationProperty {
    public fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

    public fun colorScale(): Any? = unwrap(this).getColorScale()

    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun groupLabelOptions(): Any? = unwrap(this).getGroupLabelOptions()

    public fun legend(): Any? = unwrap(this).getLegend()

    public fun sizeLabelOptions(): Any? = unwrap(this).getSizeLabelOptions()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun tooltip(): Any? = unwrap(this).getTooltip()

    @CdkDslMarker
    public interface Builder {
      public fun colorLabelOptions(colorLabelOptions: IResolvable)

      public fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("53d79071bbff9850ff7c74c9c39a1d42763b4ba72f00e929a3a829fe4a9ac3f7")
      public
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun colorScale(colorScale: IResolvable)

      public fun colorScale(colorScale: ColorScaleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3364495e5e9b156c570cbb1427bbfa1051d64ac79467db3bf5176f1f591f6af1")
      public fun colorScale(colorScale: ColorScaleProperty.Builder.() -> Unit)

      public fun dataLabels(dataLabels: IResolvable)

      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9ddaf5bd08c1e60aa9284567cfead45ea26f6276075dfb193d1e351cd43d7904")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: TreeMapFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("56b96bbb305eaee33f708818150e0ea8dc08033159f4bc6c13168a553cbe9ab9")
      public fun fieldWells(fieldWells: TreeMapFieldWellsProperty.Builder.() -> Unit)

      public fun groupLabelOptions(groupLabelOptions: IResolvable)

      public fun groupLabelOptions(groupLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7af2d68cf2e27bc999d434da805855d87dfa308920b5e18fff5b52c5fefdf0d0")
      public
          fun groupLabelOptions(groupLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun legend(legend: IResolvable)

      public fun legend(legend: LegendOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ff650099e1e02232f9a17729891f5b6abd44f16fcb98dc4a05e19104665c0807")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      public fun sizeLabelOptions(sizeLabelOptions: IResolvable)

      public fun sizeLabelOptions(sizeLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("285346f4f0ab755d6775df01bf6aadaf3128acaba4a1865228c1d7a099064d9f")
      public
          fun sizeLabelOptions(sizeLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: TreeMapSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b47d994a90853a7f834595ed6fa29140eaac5f02bfb01e2034e90aeca16615dc")
      public
          fun sortConfiguration(sortConfiguration: TreeMapSortConfigurationProperty.Builder.() -> Unit)

      public fun tooltip(tooltip: IResolvable)

      public fun tooltip(tooltip: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7a576e0b0fc455bb725ff9a26abddcf0edff3f3db0e52b61020fed1d0afd60e3")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapConfigurationProperty.builder()

      override fun colorLabelOptions(colorLabelOptions: IResolvable) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(IResolvable::unwrap))
      }

      override fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("53d79071bbff9850ff7c74c9c39a1d42763b4ba72f00e929a3a829fe4a9ac3f7")
      override
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = colorLabelOptions(ChartAxisLabelOptionsProperty(colorLabelOptions))

      override fun colorScale(colorScale: IResolvable) {
        cdkBuilder.colorScale(colorScale.let(IResolvable::unwrap))
      }

      override fun colorScale(colorScale: ColorScaleProperty) {
        cdkBuilder.colorScale(colorScale.let(ColorScaleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3364495e5e9b156c570cbb1427bbfa1051d64ac79467db3bf5176f1f591f6af1")
      override fun colorScale(colorScale: ColorScaleProperty.Builder.() -> Unit): Unit =
          colorScale(ColorScaleProperty(colorScale))

      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9ddaf5bd08c1e60aa9284567cfead45ea26f6276075dfb193d1e351cd43d7904")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: TreeMapFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(TreeMapFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("56b96bbb305eaee33f708818150e0ea8dc08033159f4bc6c13168a553cbe9ab9")
      override fun fieldWells(fieldWells: TreeMapFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(TreeMapFieldWellsProperty(fieldWells))

      override fun groupLabelOptions(groupLabelOptions: IResolvable) {
        cdkBuilder.groupLabelOptions(groupLabelOptions.let(IResolvable::unwrap))
      }

      override fun groupLabelOptions(groupLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.groupLabelOptions(groupLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7af2d68cf2e27bc999d434da805855d87dfa308920b5e18fff5b52c5fefdf0d0")
      override
          fun groupLabelOptions(groupLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = groupLabelOptions(ChartAxisLabelOptionsProperty(groupLabelOptions))

      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ff650099e1e02232f9a17729891f5b6abd44f16fcb98dc4a05e19104665c0807")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      override fun sizeLabelOptions(sizeLabelOptions: IResolvable) {
        cdkBuilder.sizeLabelOptions(sizeLabelOptions.let(IResolvable::unwrap))
      }

      override fun sizeLabelOptions(sizeLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.sizeLabelOptions(sizeLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("285346f4f0ab755d6775df01bf6aadaf3128acaba4a1865228c1d7a099064d9f")
      override
          fun sizeLabelOptions(sizeLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = sizeLabelOptions(ChartAxisLabelOptionsProperty(sizeLabelOptions))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: TreeMapSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(TreeMapSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b47d994a90853a7f834595ed6fa29140eaac5f02bfb01e2034e90aeca16615dc")
      override
          fun sortConfiguration(sortConfiguration: TreeMapSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(TreeMapSortConfigurationProperty(sortConfiguration))

      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7a576e0b0fc455bb725ff9a26abddcf0edff3f3db0e52b61020fed1d0afd60e3")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapConfigurationProperty,
    ) : CdkObject(cdkObject), TreeMapConfigurationProperty {
      override fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

      override fun colorScale(): Any? = unwrap(this).getColorScale()

      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun groupLabelOptions(): Any? = unwrap(this).getGroupLabelOptions()

      override fun legend(): Any? = unwrap(this).getLegend()

      override fun sizeLabelOptions(): Any? = unwrap(this).getSizeLabelOptions()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun tooltip(): Any? = unwrap(this).getTooltip()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TreeMapConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapConfigurationProperty):
          TreeMapConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TreeMapConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapConfigurationProperty
    }
  }

  public interface PivotTableFieldOptionProperty {
    public fun customLabel(): String? = unwrap(this).getCustomLabel()

    public fun fieldId(): String

    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun customLabel(customLabel: String)

      public fun fieldId(fieldId: String)

      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionProperty.builder()

      override fun customLabel(customLabel: String) {
        cdkBuilder.customLabel(customLabel)
      }

      override fun fieldId(fieldId: String) {
        cdkBuilder.fieldId(fieldId)
      }

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionProperty,
    ) : CdkObject(cdkObject), PivotTableFieldOptionProperty {
      override fun customLabel(): String? = unwrap(this).getCustomLabel()

      override fun fieldId(): String = unwrap(this).getFieldId()

      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PivotTableFieldOptionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionProperty):
          PivotTableFieldOptionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableFieldOptionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableFieldOptionProperty
    }
  }

  public interface ExplicitHierarchyProperty {
    public fun columns(): Any

    public fun drillDownFilters(): Any? = unwrap(this).getDrillDownFilters()

    public fun hierarchyId(): String

    @CdkDslMarker
    public interface Builder {
      public fun columns(columns: IResolvable)

      public fun columns(columns: List<Any>)

      public fun columns(vararg columns: Any)

      public fun drillDownFilters(drillDownFilters: IResolvable)

      public fun drillDownFilters(drillDownFilters: List<Any>)

      public fun drillDownFilters(vararg drillDownFilters: Any)

      public fun hierarchyId(hierarchyId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ExplicitHierarchyProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ExplicitHierarchyProperty.builder()

      override fun columns(columns: IResolvable) {
        cdkBuilder.columns(columns.let(IResolvable::unwrap))
      }

      override fun columns(columns: List<Any>) {
        cdkBuilder.columns(columns)
      }

      override fun columns(vararg columns: Any): Unit = columns(columns.toList())

      override fun drillDownFilters(drillDownFilters: IResolvable) {
        cdkBuilder.drillDownFilters(drillDownFilters.let(IResolvable::unwrap))
      }

      override fun drillDownFilters(drillDownFilters: List<Any>) {
        cdkBuilder.drillDownFilters(drillDownFilters)
      }

      override fun drillDownFilters(vararg drillDownFilters: Any): Unit =
          drillDownFilters(drillDownFilters.toList())

      override fun hierarchyId(hierarchyId: String) {
        cdkBuilder.hierarchyId(hierarchyId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ExplicitHierarchyProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ExplicitHierarchyProperty,
    ) : CdkObject(cdkObject), ExplicitHierarchyProperty {
      override fun columns(): Any = unwrap(this).getColumns()

      override fun drillDownFilters(): Any? = unwrap(this).getDrillDownFilters()

      override fun hierarchyId(): String = unwrap(this).getHierarchyId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ExplicitHierarchyProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ExplicitHierarchyProperty):
          ExplicitHierarchyProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ExplicitHierarchyProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ExplicitHierarchyProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ExplicitHierarchyProperty
    }
  }

  public interface TableSortConfigurationProperty {
    public fun paginationConfiguration(): Any? = unwrap(this).getPaginationConfiguration()

    public fun rowSort(): Any? = unwrap(this).getRowSort()

    @CdkDslMarker
    public interface Builder {
      public fun paginationConfiguration(paginationConfiguration: IResolvable)

      public fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b206c2dbbbdfe2a0a893d01f86d3b998b3788733a7ab1a214b67117c5f2f7a91")
      public
          fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty.Builder.() -> Unit)

      public fun rowSort(rowSort: IResolvable)

      public fun rowSort(rowSort: List<Any>)

      public fun rowSort(vararg rowSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableSortConfigurationProperty.builder()

      override fun paginationConfiguration(paginationConfiguration: IResolvable) {
        cdkBuilder.paginationConfiguration(paginationConfiguration.let(IResolvable::unwrap))
      }

      override
          fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty) {
        cdkBuilder.paginationConfiguration(paginationConfiguration.let(PaginationConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b206c2dbbbdfe2a0a893d01f86d3b998b3788733a7ab1a214b67117c5f2f7a91")
      override
          fun paginationConfiguration(paginationConfiguration: PaginationConfigurationProperty.Builder.() -> Unit):
          Unit = paginationConfiguration(PaginationConfigurationProperty(paginationConfiguration))

      override fun rowSort(rowSort: IResolvable) {
        cdkBuilder.rowSort(rowSort.let(IResolvable::unwrap))
      }

      override fun rowSort(rowSort: List<Any>) {
        cdkBuilder.rowSort(rowSort)
      }

      override fun rowSort(vararg rowSort: Any): Unit = rowSort(rowSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableSortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableSortConfigurationProperty,
    ) : CdkObject(cdkObject), TableSortConfigurationProperty {
      override fun paginationConfiguration(): Any? = unwrap(this).getPaginationConfiguration()

      override fun rowSort(): Any? = unwrap(this).getRowSort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TableSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableSortConfigurationProperty):
          TableSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableSortConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableSortConfigurationProperty
    }
  }

  public interface GeospatialMapConfigurationProperty {
    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun legend(): Any? = unwrap(this).getLegend()

    public fun mapStyleOptions(): Any? = unwrap(this).getMapStyleOptions()

    public fun pointStyleOptions(): Any? = unwrap(this).getPointStyleOptions()

    public fun tooltip(): Any? = unwrap(this).getTooltip()

    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    public fun windowOptions(): Any? = unwrap(this).getWindowOptions()

    @CdkDslMarker
    public interface Builder {
      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: GeospatialMapFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("983c13ad08f3d8b670cb818085524aa7f817db2cb0b7362ac5a32627336a3c78")
      public fun fieldWells(fieldWells: GeospatialMapFieldWellsProperty.Builder.() -> Unit)

      public fun legend(legend: IResolvable)

      public fun legend(legend: LegendOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("07d257d22187d985787532535ba093267a90a28d395f221d4c1accaa24326454")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      public fun mapStyleOptions(mapStyleOptions: IResolvable)

      public fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0da10d07e74769bff2c166a960f05e14db5152c95f890233a094d5bd1daf6552")
      public
          fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty.Builder.() -> Unit)

      public fun pointStyleOptions(pointStyleOptions: IResolvable)

      public fun pointStyleOptions(pointStyleOptions: GeospatialPointStyleOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0cfb4a9475ba4acfade92359f7408a4aff661084bcbb0a097faac4b8bb361b06")
      public
          fun pointStyleOptions(pointStyleOptions: GeospatialPointStyleOptionsProperty.Builder.() -> Unit)

      public fun tooltip(tooltip: IResolvable)

      public fun tooltip(tooltip: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2aff211e4f7f7bf4d605bd746b311677d9247172835d352931144820b533cf03")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      public fun visualPalette(visualPalette: IResolvable)

      public fun visualPalette(visualPalette: VisualPaletteProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0b03b22ed14f872ee6160c20fdc84124e9c0863903c9cde7f5605fadd70a4580")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)

      public fun windowOptions(windowOptions: IResolvable)

      public fun windowOptions(windowOptions: GeospatialWindowOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("45c82906c79293d2d5fa9aa7e58b353933634c6a8c0c4ecf1dd766419a261129")
      public fun windowOptions(windowOptions: GeospatialWindowOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapConfigurationProperty.builder()

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: GeospatialMapFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(GeospatialMapFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("983c13ad08f3d8b670cb818085524aa7f817db2cb0b7362ac5a32627336a3c78")
      override fun fieldWells(fieldWells: GeospatialMapFieldWellsProperty.Builder.() -> Unit): Unit
          = fieldWells(GeospatialMapFieldWellsProperty(fieldWells))

      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("07d257d22187d985787532535ba093267a90a28d395f221d4c1accaa24326454")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      override fun mapStyleOptions(mapStyleOptions: IResolvable) {
        cdkBuilder.mapStyleOptions(mapStyleOptions.let(IResolvable::unwrap))
      }

      override fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty) {
        cdkBuilder.mapStyleOptions(mapStyleOptions.let(GeospatialMapStyleOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0da10d07e74769bff2c166a960f05e14db5152c95f890233a094d5bd1daf6552")
      override
          fun mapStyleOptions(mapStyleOptions: GeospatialMapStyleOptionsProperty.Builder.() -> Unit):
          Unit = mapStyleOptions(GeospatialMapStyleOptionsProperty(mapStyleOptions))

      override fun pointStyleOptions(pointStyleOptions: IResolvable) {
        cdkBuilder.pointStyleOptions(pointStyleOptions.let(IResolvable::unwrap))
      }

      override fun pointStyleOptions(pointStyleOptions: GeospatialPointStyleOptionsProperty) {
        cdkBuilder.pointStyleOptions(pointStyleOptions.let(GeospatialPointStyleOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0cfb4a9475ba4acfade92359f7408a4aff661084bcbb0a097faac4b8bb361b06")
      override
          fun pointStyleOptions(pointStyleOptions: GeospatialPointStyleOptionsProperty.Builder.() -> Unit):
          Unit = pointStyleOptions(GeospatialPointStyleOptionsProperty(pointStyleOptions))

      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2aff211e4f7f7bf4d605bd746b311677d9247172835d352931144820b533cf03")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0b03b22ed14f872ee6160c20fdc84124e9c0863903c9cde7f5605fadd70a4580")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      override fun windowOptions(windowOptions: IResolvable) {
        cdkBuilder.windowOptions(windowOptions.let(IResolvable::unwrap))
      }

      override fun windowOptions(windowOptions: GeospatialWindowOptionsProperty) {
        cdkBuilder.windowOptions(windowOptions.let(GeospatialWindowOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("45c82906c79293d2d5fa9aa7e58b353933634c6a8c0c4ecf1dd766419a261129")
      override fun windowOptions(windowOptions: GeospatialWindowOptionsProperty.Builder.() -> Unit):
          Unit = windowOptions(GeospatialWindowOptionsProperty(windowOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapConfigurationProperty,
    ) : CdkObject(cdkObject), GeospatialMapConfigurationProperty {
      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun legend(): Any? = unwrap(this).getLegend()

      override fun mapStyleOptions(): Any? = unwrap(this).getMapStyleOptions()

      override fun pointStyleOptions(): Any? = unwrap(this).getPointStyleOptions()

      override fun tooltip(): Any? = unwrap(this).getTooltip()

      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()

      override fun windowOptions(): Any? = unwrap(this).getWindowOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialMapConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapConfigurationProperty):
          GeospatialMapConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialMapConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapConfigurationProperty
    }
  }

  public interface DecimalDefaultValuesProperty {
    public fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

    public fun staticValues(): Any? = unwrap(this).getStaticValues()

    @CdkDslMarker
    public interface Builder {
      public fun dynamicValue(dynamicValue: IResolvable)

      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5ca3b513c4584bd1a794d981108c3bb443702b45b5cd03f4fc0ec96941bae62a")
      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit)

      public fun staticValues(staticValues: IResolvable)

      public fun staticValues(staticValues: List<Number>)

      public fun staticValues(vararg staticValues: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalDefaultValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalDefaultValuesProperty.builder()

      override fun dynamicValue(dynamicValue: IResolvable) {
        cdkBuilder.dynamicValue(dynamicValue.let(IResolvable::unwrap))
      }

      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty) {
        cdkBuilder.dynamicValue(dynamicValue.let(DynamicDefaultValueProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5ca3b513c4584bd1a794d981108c3bb443702b45b5cd03f4fc0ec96941bae62a")
      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit): Unit
          = dynamicValue(DynamicDefaultValueProperty(dynamicValue))

      override fun staticValues(staticValues: IResolvable) {
        cdkBuilder.staticValues(staticValues.let(IResolvable::unwrap))
      }

      override fun staticValues(staticValues: List<Number>) {
        cdkBuilder.staticValues(staticValues)
      }

      override fun staticValues(vararg staticValues: Number): Unit =
          staticValues(staticValues.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalDefaultValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalDefaultValuesProperty,
    ) : CdkObject(cdkObject), DecimalDefaultValuesProperty {
      override fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

      override fun staticValues(): Any? = unwrap(this).getStaticValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DecimalDefaultValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalDefaultValuesProperty):
          DecimalDefaultValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DecimalDefaultValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalDefaultValuesProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DecimalDefaultValuesProperty
    }
  }

  public interface KPISortConfigurationProperty {
    public fun trendGroupSort(): Any? = unwrap(this).getTrendGroupSort()

    @CdkDslMarker
    public interface Builder {
      public fun trendGroupSort(trendGroupSort: IResolvable)

      public fun trendGroupSort(trendGroupSort: List<Any>)

      public fun trendGroupSort(vararg trendGroupSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPISortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPISortConfigurationProperty.builder()

      override fun trendGroupSort(trendGroupSort: IResolvable) {
        cdkBuilder.trendGroupSort(trendGroupSort.let(IResolvable::unwrap))
      }

      override fun trendGroupSort(trendGroupSort: List<Any>) {
        cdkBuilder.trendGroupSort(trendGroupSort)
      }

      override fun trendGroupSort(vararg trendGroupSort: Any): Unit =
          trendGroupSort(trendGroupSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPISortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPISortConfigurationProperty,
    ) : CdkObject(cdkObject), KPISortConfigurationProperty {
      override fun trendGroupSort(): Any? = unwrap(this).getTrendGroupSort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): KPISortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPISortConfigurationProperty):
          KPISortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPISortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPISortConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPISortConfigurationProperty
    }
  }

  public interface WordCloudSortConfigurationProperty {
    public fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    @CdkDslMarker
    public interface Builder {
      public fun categoryItemsLimit(categoryItemsLimit: IResolvable)

      public fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3db0bf64a9ced4d001b24ec490efb4c3983cefe0f24dd0586d51550443272a84")
      public
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun categorySort(categorySort: IResolvable)

      public fun categorySort(categorySort: List<Any>)

      public fun categorySort(vararg categorySort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudSortConfigurationProperty.builder()

      override fun categoryItemsLimit(categoryItemsLimit: IResolvable) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(IResolvable::unwrap))
      }

      override fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.categoryItemsLimit(categoryItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3db0bf64a9ced4d001b24ec490efb4c3983cefe0f24dd0586d51550443272a84")
      override
          fun categoryItemsLimit(categoryItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = categoryItemsLimit(ItemsLimitConfigurationProperty(categoryItemsLimit))

      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudSortConfigurationProperty,
    ) : CdkObject(cdkObject), WordCloudSortConfigurationProperty {
      override fun categoryItemsLimit(): Any? = unwrap(this).getCategoryItemsLimit()

      override fun categorySort(): Any? = unwrap(this).getCategorySort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          WordCloudSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudSortConfigurationProperty):
          WordCloudSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WordCloudSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudSortConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudSortConfigurationProperty
    }
  }

  public interface RadarChartSeriesSettingsProperty {
    public fun areaStyleSettings(): Any? = unwrap(this).getAreaStyleSettings()

    @CdkDslMarker
    public interface Builder {
      public fun areaStyleSettings(areaStyleSettings: IResolvable)

      public fun areaStyleSettings(areaStyleSettings: RadarChartAreaStyleSettingsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("050bbadde9bad6d270079886ea6f4107fd32752ea141db1c2b41d095a28aaec9")
      public
          fun areaStyleSettings(areaStyleSettings: RadarChartAreaStyleSettingsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSeriesSettingsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSeriesSettingsProperty.builder()

      override fun areaStyleSettings(areaStyleSettings: IResolvable) {
        cdkBuilder.areaStyleSettings(areaStyleSettings.let(IResolvable::unwrap))
      }

      override fun areaStyleSettings(areaStyleSettings: RadarChartAreaStyleSettingsProperty) {
        cdkBuilder.areaStyleSettings(areaStyleSettings.let(RadarChartAreaStyleSettingsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("050bbadde9bad6d270079886ea6f4107fd32752ea141db1c2b41d095a28aaec9")
      override
          fun areaStyleSettings(areaStyleSettings: RadarChartAreaStyleSettingsProperty.Builder.() -> Unit):
          Unit = areaStyleSettings(RadarChartAreaStyleSettingsProperty(areaStyleSettings))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSeriesSettingsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSeriesSettingsProperty,
    ) : CdkObject(cdkObject), RadarChartSeriesSettingsProperty {
      override fun areaStyleSettings(): Any? = unwrap(this).getAreaStyleSettings()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): RadarChartSeriesSettingsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSeriesSettingsProperty):
          RadarChartSeriesSettingsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartSeriesSettingsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSeriesSettingsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartSeriesSettingsProperty
    }
  }

  public interface ScatterPlotVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: ScatterPlotConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("caf94874554facf6d30cc43f72240c80de42624c3063b3d3477a08b4f0a06a66")
      public
          fun chartConfiguration(chartConfiguration: ScatterPlotConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("40ed21d1cd1fb748f21413c15ac5e1ae38791a2431efc4c0f644b895a4aff388")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("afa2c0cbd182293d5a6bce9b78eccf94955fb65dcc5c786ea9c94422f53add1d")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: ScatterPlotConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(ScatterPlotConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("caf94874554facf6d30cc43f72240c80de42624c3063b3d3477a08b4f0a06a66")
      override
          fun chartConfiguration(chartConfiguration: ScatterPlotConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(ScatterPlotConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("40ed21d1cd1fb748f21413c15ac5e1ae38791a2431efc4c0f644b895a4aff388")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("afa2c0cbd182293d5a6bce9b78eccf94955fb65dcc5c786ea9c94422f53add1d")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotVisualProperty,
    ) : CdkObject(cdkObject), ScatterPlotVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ScatterPlotVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotVisualProperty):
          ScatterPlotVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ScatterPlotVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotVisualProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ScatterPlotVisualProperty
    }
  }

  public interface InsightConfigurationProperty {
    public fun computations(): Any? = unwrap(this).getComputations()

    public fun customNarrative(): Any? = unwrap(this).getCustomNarrative()

    @CdkDslMarker
    public interface Builder {
      public fun computations(computations: IResolvable)

      public fun computations(computations: List<Any>)

      public fun computations(vararg computations: Any)

      public fun customNarrative(customNarrative: IResolvable)

      public fun customNarrative(customNarrative: CustomNarrativeOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("406ea646ca78d5d04c015adf0841fe1d1381d931b251bf05c43e39dc75b90912")
      public fun customNarrative(customNarrative: CustomNarrativeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.InsightConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.InsightConfigurationProperty.builder()

      override fun computations(computations: IResolvable) {
        cdkBuilder.computations(computations.let(IResolvable::unwrap))
      }

      override fun computations(computations: List<Any>) {
        cdkBuilder.computations(computations)
      }

      override fun computations(vararg computations: Any): Unit =
          computations(computations.toList())

      override fun customNarrative(customNarrative: IResolvable) {
        cdkBuilder.customNarrative(customNarrative.let(IResolvable::unwrap))
      }

      override fun customNarrative(customNarrative: CustomNarrativeOptionsProperty) {
        cdkBuilder.customNarrative(customNarrative.let(CustomNarrativeOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("406ea646ca78d5d04c015adf0841fe1d1381d931b251bf05c43e39dc75b90912")
      override
          fun customNarrative(customNarrative: CustomNarrativeOptionsProperty.Builder.() -> Unit):
          Unit = customNarrative(CustomNarrativeOptionsProperty(customNarrative))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.InsightConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.InsightConfigurationProperty,
    ) : CdkObject(cdkObject), InsightConfigurationProperty {
      override fun computations(): Any? = unwrap(this).getComputations()

      override fun customNarrative(): Any? = unwrap(this).getCustomNarrative()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): InsightConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.InsightConfigurationProperty):
          InsightConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: InsightConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.InsightConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.InsightConfigurationProperty
    }
  }

  public interface FilterDropDownControlProperty {
    public fun cascadingControlConfiguration(): Any? =
        unwrap(this).getCascadingControlConfiguration()

    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun filterControlId(): String

    public fun selectableValues(): Any? = unwrap(this).getSelectableValues()

    public fun sourceFilterId(): String

    public fun title(): String

    public fun type(): String? = unwrap(this).getType()

    @CdkDslMarker
    public interface Builder {
      public fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable)

      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3e9d9e55e4723ba2faa4a8814f0e737cdb40019274c96d25e8242f148aae0a4f")
      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit)

      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("64e0626fe39917731294de0931b37aa0cee2501aeb6280e40d38bff84000572e")
      public
          fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun filterControlId(filterControlId: String)

      public fun selectableValues(selectableValues: IResolvable)

      public fun selectableValues(selectableValues: FilterSelectableValuesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("74253f575ee08575c6369ed361efa203da7cee7cf4d51084f4dac657cf30c026")
      public
          fun selectableValues(selectableValues: FilterSelectableValuesProperty.Builder.() -> Unit)

      public fun sourceFilterId(sourceFilterId: String)

      public fun title(title: String)

      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDropDownControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDropDownControlProperty.builder()

      override fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(IResolvable::unwrap))
      }

      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(CascadingControlConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3e9d9e55e4723ba2faa4a8814f0e737cdb40019274c96d25e8242f148aae0a4f")
      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit):
          Unit =
          cascadingControlConfiguration(CascadingControlConfigurationProperty(cascadingControlConfiguration))

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(DropDownControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("64e0626fe39917731294de0931b37aa0cee2501aeb6280e40d38bff84000572e")
      override
          fun displayOptions(displayOptions: DropDownControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(DropDownControlDisplayOptionsProperty(displayOptions))

      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      override fun selectableValues(selectableValues: IResolvable) {
        cdkBuilder.selectableValues(selectableValues.let(IResolvable::unwrap))
      }

      override fun selectableValues(selectableValues: FilterSelectableValuesProperty) {
        cdkBuilder.selectableValues(selectableValues.let(FilterSelectableValuesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("74253f575ee08575c6369ed361efa203da7cee7cf4d51084f4dac657cf30c026")
      override
          fun selectableValues(selectableValues: FilterSelectableValuesProperty.Builder.() -> Unit):
          Unit = selectableValues(FilterSelectableValuesProperty(selectableValues))

      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDropDownControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDropDownControlProperty,
    ) : CdkObject(cdkObject), FilterDropDownControlProperty {
      override fun cascadingControlConfiguration(): Any? =
          unwrap(this).getCascadingControlConfiguration()

      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      override fun selectableValues(): Any? = unwrap(this).getSelectableValues()

      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      override fun title(): String = unwrap(this).getTitle()

      override fun type(): String? = unwrap(this).getType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilterDropDownControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDropDownControlProperty):
          FilterDropDownControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterDropDownControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDropDownControlProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterDropDownControlProperty
    }
  }

  public interface ForecastConfigurationProperty {
    public fun forecastProperties(): Any? = unwrap(this).getForecastProperties()

    public fun scenario(): Any? = unwrap(this).getScenario()

    @CdkDslMarker
    public interface Builder {
      public fun forecastProperties(forecastProperties: IResolvable)

      public fun forecastProperties(forecastProperties: TimeBasedForecastPropertiesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5782fe71819cb0cd287cf1d878ca8d1f93e84aafffd4db1ddfdf36570a0b3d20")
      public
          fun forecastProperties(forecastProperties: TimeBasedForecastPropertiesProperty.Builder.() -> Unit)

      public fun scenario(scenario: IResolvable)

      public fun scenario(scenario: ForecastScenarioProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("49aea93b26bf2857691615fa4f152fec3572d18f83364f10227b3383ee62a6fc")
      public fun scenario(scenario: ForecastScenarioProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastConfigurationProperty.builder()

      override fun forecastProperties(forecastProperties: IResolvable) {
        cdkBuilder.forecastProperties(forecastProperties.let(IResolvable::unwrap))
      }

      override fun forecastProperties(forecastProperties: TimeBasedForecastPropertiesProperty) {
        cdkBuilder.forecastProperties(forecastProperties.let(TimeBasedForecastPropertiesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5782fe71819cb0cd287cf1d878ca8d1f93e84aafffd4db1ddfdf36570a0b3d20")
      override
          fun forecastProperties(forecastProperties: TimeBasedForecastPropertiesProperty.Builder.() -> Unit):
          Unit = forecastProperties(TimeBasedForecastPropertiesProperty(forecastProperties))

      override fun scenario(scenario: IResolvable) {
        cdkBuilder.scenario(scenario.let(IResolvable::unwrap))
      }

      override fun scenario(scenario: ForecastScenarioProperty) {
        cdkBuilder.scenario(scenario.let(ForecastScenarioProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("49aea93b26bf2857691615fa4f152fec3572d18f83364f10227b3383ee62a6fc")
      override fun scenario(scenario: ForecastScenarioProperty.Builder.() -> Unit): Unit =
          scenario(ForecastScenarioProperty(scenario))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastConfigurationProperty,
    ) : CdkObject(cdkObject), ForecastConfigurationProperty {
      override fun forecastProperties(): Any? = unwrap(this).getForecastProperties()

      override fun scenario(): Any? = unwrap(this).getScenario()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ForecastConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastConfigurationProperty):
          ForecastConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ForecastConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ForecastConfigurationProperty
    }
  }

  public interface NumericAxisOptionsProperty {
    public fun range(): Any? = unwrap(this).getRange()

    public fun scale(): Any? = unwrap(this).getScale()

    @CdkDslMarker
    public interface Builder {
      public fun range(range: IResolvable)

      public fun range(range: AxisDisplayRangeProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("09248a45b8eaec9006d2a593a59ce90fd1c7346bf13446918a9deab0c9b4b537")
      public fun range(range: AxisDisplayRangeProperty.Builder.() -> Unit)

      public fun scale(scale: IResolvable)

      public fun scale(scale: AxisScaleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b914908ca74cf7de1c22b825ee9a5a9c59ac7c8a0443cacfe49c6da03a2c923")
      public fun scale(scale: AxisScaleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericAxisOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericAxisOptionsProperty.builder()

      override fun range(range: IResolvable) {
        cdkBuilder.range(range.let(IResolvable::unwrap))
      }

      override fun range(range: AxisDisplayRangeProperty) {
        cdkBuilder.range(range.let(AxisDisplayRangeProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("09248a45b8eaec9006d2a593a59ce90fd1c7346bf13446918a9deab0c9b4b537")
      override fun range(range: AxisDisplayRangeProperty.Builder.() -> Unit): Unit =
          range(AxisDisplayRangeProperty(range))

      override fun scale(scale: IResolvable) {
        cdkBuilder.scale(scale.let(IResolvable::unwrap))
      }

      override fun scale(scale: AxisScaleProperty) {
        cdkBuilder.scale(scale.let(AxisScaleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b914908ca74cf7de1c22b825ee9a5a9c59ac7c8a0443cacfe49c6da03a2c923")
      override fun scale(scale: AxisScaleProperty.Builder.() -> Unit): Unit =
          scale(AxisScaleProperty(scale))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericAxisOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericAxisOptionsProperty,
    ) : CdkObject(cdkObject), NumericAxisOptionsProperty {
      override fun range(): Any? = unwrap(this).getRange()

      override fun scale(): Any? = unwrap(this).getScale()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): NumericAxisOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NumericAxisOptionsProperty):
          NumericAxisOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericAxisOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericAxisOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericAxisOptionsProperty
    }
  }

  public interface ArcConfigurationProperty {
    public fun arcAngle(): Number? = unwrap(this).getArcAngle()

    public fun arcThickness(): String? = unwrap(this).getArcThickness()

    @CdkDslMarker
    public interface Builder {
      public fun arcAngle(arcAngle: Number)

      public fun arcThickness(arcThickness: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcConfigurationProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcConfigurationProperty.builder()

      override fun arcAngle(arcAngle: Number) {
        cdkBuilder.arcAngle(arcAngle)
      }

      override fun arcThickness(arcThickness: String) {
        cdkBuilder.arcThickness(arcThickness)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcConfigurationProperty,
    ) : CdkObject(cdkObject), ArcConfigurationProperty {
      override fun arcAngle(): Number? = unwrap(this).getArcAngle()

      override fun arcThickness(): String? = unwrap(this).getArcThickness()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ArcConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ArcConfigurationProperty):
          ArcConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ArcConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcConfigurationProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcConfigurationProperty
    }
  }

  public interface WordCloudChartConfigurationProperty {
    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun wordCloudOptions(): Any? = unwrap(this).getWordCloudOptions()

    @CdkDslMarker
    public interface Builder {
      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("39462eacbbe26db1492a67f97d7d03168c8fa5a178a5d88263a198e3caba25b8")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: WordCloudFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b872a9a7d1f0e3eff4ca4cf878a7ec91601e7138a9144f9337eeceda579a8cb4")
      public fun fieldWells(fieldWells: WordCloudFieldWellsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: WordCloudSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("92fe3bdbfd3200d02f04b979f57214461eec56faa71b0ceae5d43da3af36a683")
      public
          fun sortConfiguration(sortConfiguration: WordCloudSortConfigurationProperty.Builder.() -> Unit)

      public fun wordCloudOptions(wordCloudOptions: IResolvable)

      public fun wordCloudOptions(wordCloudOptions: WordCloudOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4e6ecd7affed59c60b809feb30245fe9aca24c2cd1d06001188fdc2fb73e362c")
      public fun wordCloudOptions(wordCloudOptions: WordCloudOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudChartConfigurationProperty.builder()

      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("39462eacbbe26db1492a67f97d7d03168c8fa5a178a5d88263a198e3caba25b8")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: WordCloudFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(WordCloudFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b872a9a7d1f0e3eff4ca4cf878a7ec91601e7138a9144f9337eeceda579a8cb4")
      override fun fieldWells(fieldWells: WordCloudFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(WordCloudFieldWellsProperty(fieldWells))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: WordCloudSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(WordCloudSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("92fe3bdbfd3200d02f04b979f57214461eec56faa71b0ceae5d43da3af36a683")
      override
          fun sortConfiguration(sortConfiguration: WordCloudSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(WordCloudSortConfigurationProperty(sortConfiguration))

      override fun wordCloudOptions(wordCloudOptions: IResolvable) {
        cdkBuilder.wordCloudOptions(wordCloudOptions.let(IResolvable::unwrap))
      }

      override fun wordCloudOptions(wordCloudOptions: WordCloudOptionsProperty) {
        cdkBuilder.wordCloudOptions(wordCloudOptions.let(WordCloudOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4e6ecd7affed59c60b809feb30245fe9aca24c2cd1d06001188fdc2fb73e362c")
      override fun wordCloudOptions(wordCloudOptions: WordCloudOptionsProperty.Builder.() -> Unit):
          Unit = wordCloudOptions(WordCloudOptionsProperty(wordCloudOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudChartConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudChartConfigurationProperty,
    ) : CdkObject(cdkObject), WordCloudChartConfigurationProperty {
      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun wordCloudOptions(): Any? = unwrap(this).getWordCloudOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          WordCloudChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudChartConfigurationProperty):
          WordCloudChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WordCloudChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudChartConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WordCloudChartConfigurationProperty
    }
  }

  public interface TextControlPlaceholderOptionsProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextControlPlaceholderOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextControlPlaceholderOptionsProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextControlPlaceholderOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextControlPlaceholderOptionsProperty,
    ) : CdkObject(cdkObject), TextControlPlaceholderOptionsProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TextControlPlaceholderOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TextControlPlaceholderOptionsProperty):
          TextControlPlaceholderOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TextControlPlaceholderOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextControlPlaceholderOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextControlPlaceholderOptionsProperty
    }
  }

  public interface ParameterListControlProperty {
    public fun cascadingControlConfiguration(): Any? =
        unwrap(this).getCascadingControlConfiguration()

    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun parameterControlId(): String

    public fun selectableValues(): Any? = unwrap(this).getSelectableValues()

    public fun sourceParameterName(): String

    public fun title(): String

    public fun type(): String? = unwrap(this).getType()

    @CdkDslMarker
    public interface Builder {
      public fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable)

      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5bdbdd41e3fe21621baf0549fb87f0ca30c357037207e0fcee1ef403bb807c35")
      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit)

      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: ListControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4fa8dcb254a22ffa84d97365293c7a77f25c13aaedc61a2ed20819583b943d14")
      public
          fun displayOptions(displayOptions: ListControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun parameterControlId(parameterControlId: String)

      public fun selectableValues(selectableValues: IResolvable)

      public fun selectableValues(selectableValues: ParameterSelectableValuesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("86ffc7499f2875f4eaed0f7ecaf680f9d6a1933cff32a941aee3dfbcbf21bf59")
      public
          fun selectableValues(selectableValues: ParameterSelectableValuesProperty.Builder.() -> Unit)

      public fun sourceParameterName(sourceParameterName: String)

      public fun title(title: String)

      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterListControlProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterListControlProperty.builder()

      override fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(IResolvable::unwrap))
      }

      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(CascadingControlConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5bdbdd41e3fe21621baf0549fb87f0ca30c357037207e0fcee1ef403bb807c35")
      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit):
          Unit =
          cascadingControlConfiguration(CascadingControlConfigurationProperty(cascadingControlConfiguration))

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: ListControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(ListControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4fa8dcb254a22ffa84d97365293c7a77f25c13aaedc61a2ed20819583b943d14")
      override
          fun displayOptions(displayOptions: ListControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(ListControlDisplayOptionsProperty(displayOptions))

      override fun parameterControlId(parameterControlId: String) {
        cdkBuilder.parameterControlId(parameterControlId)
      }

      override fun selectableValues(selectableValues: IResolvable) {
        cdkBuilder.selectableValues(selectableValues.let(IResolvable::unwrap))
      }

      override fun selectableValues(selectableValues: ParameterSelectableValuesProperty) {
        cdkBuilder.selectableValues(selectableValues.let(ParameterSelectableValuesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("86ffc7499f2875f4eaed0f7ecaf680f9d6a1933cff32a941aee3dfbcbf21bf59")
      override
          fun selectableValues(selectableValues: ParameterSelectableValuesProperty.Builder.() -> Unit):
          Unit = selectableValues(ParameterSelectableValuesProperty(selectableValues))

      override fun sourceParameterName(sourceParameterName: String) {
        cdkBuilder.sourceParameterName(sourceParameterName)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterListControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterListControlProperty,
    ) : CdkObject(cdkObject), ParameterListControlProperty {
      override fun cascadingControlConfiguration(): Any? =
          unwrap(this).getCascadingControlConfiguration()

      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun parameterControlId(): String = unwrap(this).getParameterControlId()

      override fun selectableValues(): Any? = unwrap(this).getSelectableValues()

      override fun sourceParameterName(): String = unwrap(this).getSourceParameterName()

      override fun title(): String = unwrap(this).getTitle()

      override fun type(): String? = unwrap(this).getType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ParameterListControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterListControlProperty):
          ParameterListControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ParameterListControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterListControlProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ParameterListControlProperty
    }
  }

  public interface TableFieldLinkContentConfigurationProperty {
    public fun customIconContent(): Any? = unwrap(this).getCustomIconContent()

    public fun customTextContent(): Any? = unwrap(this).getCustomTextContent()

    @CdkDslMarker
    public interface Builder {
      public fun customIconContent(customIconContent: IResolvable)

      public fun customIconContent(customIconContent: TableFieldCustomIconContentProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fd10b4d3c78e6b74fc48f04669d5a7931d9a40ef67f78051311132e2052c20b8")
      public
          fun customIconContent(customIconContent: TableFieldCustomIconContentProperty.Builder.() -> Unit)

      public fun customTextContent(customTextContent: IResolvable)

      public fun customTextContent(customTextContent: TableFieldCustomTextContentProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c137bf0d0affbb688914366e9c0a54263e960fb657c972de99afe87cec78c0e1")
      public
          fun customTextContent(customTextContent: TableFieldCustomTextContentProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkContentConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkContentConfigurationProperty.builder()

      override fun customIconContent(customIconContent: IResolvable) {
        cdkBuilder.customIconContent(customIconContent.let(IResolvable::unwrap))
      }

      override fun customIconContent(customIconContent: TableFieldCustomIconContentProperty) {
        cdkBuilder.customIconContent(customIconContent.let(TableFieldCustomIconContentProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fd10b4d3c78e6b74fc48f04669d5a7931d9a40ef67f78051311132e2052c20b8")
      override
          fun customIconContent(customIconContent: TableFieldCustomIconContentProperty.Builder.() -> Unit):
          Unit = customIconContent(TableFieldCustomIconContentProperty(customIconContent))

      override fun customTextContent(customTextContent: IResolvable) {
        cdkBuilder.customTextContent(customTextContent.let(IResolvable::unwrap))
      }

      override fun customTextContent(customTextContent: TableFieldCustomTextContentProperty) {
        cdkBuilder.customTextContent(customTextContent.let(TableFieldCustomTextContentProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c137bf0d0affbb688914366e9c0a54263e960fb657c972de99afe87cec78c0e1")
      override
          fun customTextContent(customTextContent: TableFieldCustomTextContentProperty.Builder.() -> Unit):
          Unit = customTextContent(TableFieldCustomTextContentProperty(customTextContent))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkContentConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkContentConfigurationProperty,
    ) : CdkObject(cdkObject), TableFieldLinkContentConfigurationProperty {
      override fun customIconContent(): Any? = unwrap(this).getCustomIconContent()

      override fun customTextContent(): Any? = unwrap(this).getCustomTextContent()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableFieldLinkContentConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkContentConfigurationProperty):
          TableFieldLinkContentConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldLinkContentConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkContentConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldLinkContentConfigurationProperty
    }
  }

  public interface PaginationConfigurationProperty {
    public fun pageNumber(): Number

    public fun pageSize(): Number

    @CdkDslMarker
    public interface Builder {
      public fun pageNumber(pageNumber: Number)

      public fun pageSize(pageSize: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PaginationConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PaginationConfigurationProperty.builder()

      override fun pageNumber(pageNumber: Number) {
        cdkBuilder.pageNumber(pageNumber)
      }

      override fun pageSize(pageSize: Number) {
        cdkBuilder.pageSize(pageSize)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PaginationConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PaginationConfigurationProperty,
    ) : CdkObject(cdkObject), PaginationConfigurationProperty {
      override fun pageNumber(): Number = unwrap(this).getPageNumber()

      override fun pageSize(): Number = unwrap(this).getPageSize()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): PaginationConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PaginationConfigurationProperty):
          PaginationConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PaginationConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PaginationConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PaginationConfigurationProperty
    }
  }

  public interface DonutCenterOptionsProperty {
    public fun labelVisibility(): String? = unwrap(this).getLabelVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun labelVisibility(labelVisibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DonutCenterOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DonutCenterOptionsProperty.builder()

      override fun labelVisibility(labelVisibility: String) {
        cdkBuilder.labelVisibility(labelVisibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DonutCenterOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DonutCenterOptionsProperty,
    ) : CdkObject(cdkObject), DonutCenterOptionsProperty {
      override fun labelVisibility(): String? = unwrap(this).getLabelVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DonutCenterOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DonutCenterOptionsProperty):
          DonutCenterOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DonutCenterOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DonutCenterOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DonutCenterOptionsProperty
    }
  }

  public interface ArcOptionsProperty {
    public fun arcThickness(): String? = unwrap(this).getArcThickness()

    @CdkDslMarker
    public interface Builder {
      public fun arcThickness(arcThickness: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcOptionsProperty.builder()

      override fun arcThickness(arcThickness: String) {
        cdkBuilder.arcThickness(arcThickness)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.ArcOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcOptionsProperty,
    ) : CdkObject(cdkObject), ArcOptionsProperty {
      override fun arcThickness(): String? = unwrap(this).getArcThickness()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ArcOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ArcOptionsProperty):
          ArcOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ArcOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcOptionsProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ArcOptionsProperty
    }
  }

  public interface UniqueValuesComputationProperty {
    public fun category(): Any? = unwrap(this).getCategory()

    public fun computationId(): String

    public fun name(): String? = unwrap(this).getName()

    @CdkDslMarker
    public interface Builder {
      public fun category(category: IResolvable)

      public fun category(category: DimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("79b2c707137f8b0b157bd80c7325714cd4477b12287b94914772c9208de8221b")
      public fun category(category: DimensionFieldProperty.Builder.() -> Unit)

      public fun computationId(computationId: String)

      public fun name(name: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.UniqueValuesComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.UniqueValuesComputationProperty.builder()

      override fun category(category: IResolvable) {
        cdkBuilder.category(category.let(IResolvable::unwrap))
      }

      override fun category(category: DimensionFieldProperty) {
        cdkBuilder.category(category.let(DimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("79b2c707137f8b0b157bd80c7325714cd4477b12287b94914772c9208de8221b")
      override fun category(category: DimensionFieldProperty.Builder.() -> Unit): Unit =
          category(DimensionFieldProperty(category))

      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.UniqueValuesComputationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.UniqueValuesComputationProperty,
    ) : CdkObject(cdkObject), UniqueValuesComputationProperty {
      override fun category(): Any? = unwrap(this).getCategory()

      override fun computationId(): String = unwrap(this).getComputationId()

      override fun name(): String? = unwrap(this).getName()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): UniqueValuesComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.UniqueValuesComputationProperty):
          UniqueValuesComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: UniqueValuesComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.UniqueValuesComputationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.UniqueValuesComputationProperty
    }
  }

  public interface FilledMapSortConfigurationProperty {
    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    @CdkDslMarker
    public interface Builder {
      public fun categorySort(categorySort: IResolvable)

      public fun categorySort(categorySort: List<Any>)

      public fun categorySort(vararg categorySort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapSortConfigurationProperty.builder()

      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapSortConfigurationProperty,
    ) : CdkObject(cdkObject), FilledMapSortConfigurationProperty {
      override fun categorySort(): Any? = unwrap(this).getCategorySort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FilledMapSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapSortConfigurationProperty):
          FilledMapSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapSortConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapSortConfigurationProperty
    }
  }

  public interface MaximumMinimumComputationProperty {
    public fun computationId(): String

    public fun name(): String? = unwrap(this).getName()

    public fun time(): Any? = unwrap(this).getTime()

    public fun type(): String

    public fun `value`(): Any? = unwrap(this).getValue()

    @CdkDslMarker
    public interface Builder {
      public fun computationId(computationId: String)

      public fun name(name: String)

      public fun time(time: IResolvable)

      public fun time(time: DimensionFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("16c899f8192f7658ec8e41dc78f7e0fd93165fb05ee49973fc71e96983f63fd9")
      public fun time(time: DimensionFieldProperty.Builder.() -> Unit)

      public fun type(type: String)

      public fun `value`(`value`: IResolvable)

      public fun `value`(`value`: MeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("53ab8a5bc6554c65c862ec36ccd5b04e79e9002dc0787833604d7a8a8264764e")
      public fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumMinimumComputationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumMinimumComputationProperty.builder()

      override fun computationId(computationId: String) {
        cdkBuilder.computationId(computationId)
      }

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun time(time: IResolvable) {
        cdkBuilder.time(time.let(IResolvable::unwrap))
      }

      override fun time(time: DimensionFieldProperty) {
        cdkBuilder.time(time.let(DimensionFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("16c899f8192f7658ec8e41dc78f7e0fd93165fb05ee49973fc71e96983f63fd9")
      override fun time(time: DimensionFieldProperty.Builder.() -> Unit): Unit =
          time(DimensionFieldProperty(time))

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      override fun `value`(`value`: IResolvable) {
        cdkBuilder.`value`(`value`.let(IResolvable::unwrap))
      }

      override fun `value`(`value`: MeasureFieldProperty) {
        cdkBuilder.`value`(`value`.let(MeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("53ab8a5bc6554c65c862ec36ccd5b04e79e9002dc0787833604d7a8a8264764e")
      override fun `value`(`value`: MeasureFieldProperty.Builder.() -> Unit): Unit =
          `value`(MeasureFieldProperty(`value`))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumMinimumComputationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumMinimumComputationProperty,
    ) : CdkObject(cdkObject), MaximumMinimumComputationProperty {
      override fun computationId(): String = unwrap(this).getComputationId()

      override fun name(): String? = unwrap(this).getName()

      override fun time(): Any? = unwrap(this).getTime()

      override fun type(): String = unwrap(this).getType()

      override fun `value`(): Any? = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          MaximumMinimumComputationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumMinimumComputationProperty):
          MaximumMinimumComputationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MaximumMinimumComputationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumMinimumComputationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.MaximumMinimumComputationProperty
    }
  }

  public interface FilterListControlProperty {
    public fun cascadingControlConfiguration(): Any? =
        unwrap(this).getCascadingControlConfiguration()

    public fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

    public fun filterControlId(): String

    public fun selectableValues(): Any? = unwrap(this).getSelectableValues()

    public fun sourceFilterId(): String

    public fun title(): String

    public fun type(): String? = unwrap(this).getType()

    @CdkDslMarker
    public interface Builder {
      public fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable)

      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e44830533750f7e2c9b622299b0ba0228995ecad2c476e8092b4f6ad70fb9f1b")
      public
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit)

      public fun displayOptions(displayOptions: IResolvable)

      public fun displayOptions(displayOptions: ListControlDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7922db71103283f84d6f7f1f29eb5e961d162ab44b048ea34effc758df00345b")
      public
          fun displayOptions(displayOptions: ListControlDisplayOptionsProperty.Builder.() -> Unit)

      public fun filterControlId(filterControlId: String)

      public fun selectableValues(selectableValues: IResolvable)

      public fun selectableValues(selectableValues: FilterSelectableValuesProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f915d55e97fe8e0e622b41e578693eee947af4b7356a58b910c83434b54ed04a")
      public
          fun selectableValues(selectableValues: FilterSelectableValuesProperty.Builder.() -> Unit)

      public fun sourceFilterId(sourceFilterId: String)

      public fun title(title: String)

      public fun type(type: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListControlProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListControlProperty.builder()

      override fun cascadingControlConfiguration(cascadingControlConfiguration: IResolvable) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(IResolvable::unwrap))
      }

      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty) {
        cdkBuilder.cascadingControlConfiguration(cascadingControlConfiguration.let(CascadingControlConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e44830533750f7e2c9b622299b0ba0228995ecad2c476e8092b4f6ad70fb9f1b")
      override
          fun cascadingControlConfiguration(cascadingControlConfiguration: CascadingControlConfigurationProperty.Builder.() -> Unit):
          Unit =
          cascadingControlConfiguration(CascadingControlConfigurationProperty(cascadingControlConfiguration))

      override fun displayOptions(displayOptions: IResolvable) {
        cdkBuilder.displayOptions(displayOptions.let(IResolvable::unwrap))
      }

      override fun displayOptions(displayOptions: ListControlDisplayOptionsProperty) {
        cdkBuilder.displayOptions(displayOptions.let(ListControlDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7922db71103283f84d6f7f1f29eb5e961d162ab44b048ea34effc758df00345b")
      override
          fun displayOptions(displayOptions: ListControlDisplayOptionsProperty.Builder.() -> Unit):
          Unit = displayOptions(ListControlDisplayOptionsProperty(displayOptions))

      override fun filterControlId(filterControlId: String) {
        cdkBuilder.filterControlId(filterControlId)
      }

      override fun selectableValues(selectableValues: IResolvable) {
        cdkBuilder.selectableValues(selectableValues.let(IResolvable::unwrap))
      }

      override fun selectableValues(selectableValues: FilterSelectableValuesProperty) {
        cdkBuilder.selectableValues(selectableValues.let(FilterSelectableValuesProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f915d55e97fe8e0e622b41e578693eee947af4b7356a58b910c83434b54ed04a")
      override
          fun selectableValues(selectableValues: FilterSelectableValuesProperty.Builder.() -> Unit):
          Unit = selectableValues(FilterSelectableValuesProperty(selectableValues))

      override fun sourceFilterId(sourceFilterId: String) {
        cdkBuilder.sourceFilterId(sourceFilterId)
      }

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      override fun type(type: String) {
        cdkBuilder.type(type)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListControlProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListControlProperty,
    ) : CdkObject(cdkObject), FilterListControlProperty {
      override fun cascadingControlConfiguration(): Any? =
          unwrap(this).getCascadingControlConfiguration()

      override fun displayOptions(): Any? = unwrap(this).getDisplayOptions()

      override fun filterControlId(): String = unwrap(this).getFilterControlId()

      override fun selectableValues(): Any? = unwrap(this).getSelectableValues()

      override fun sourceFilterId(): String = unwrap(this).getSourceFilterId()

      override fun title(): String = unwrap(this).getTitle()

      override fun type(): String? = unwrap(this).getType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilterListControlProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListControlProperty):
          FilterListControlProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterListControlProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListControlProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterListControlProperty
    }
  }

  public interface AxisDisplayRangeProperty {
    public fun dataDriven(): Any? = unwrap(this).getDataDriven()

    public fun minMax(): Any? = unwrap(this).getMinMax()

    @CdkDslMarker
    public interface Builder {
      public fun dataDriven(dataDriven: Any)

      public fun minMax(minMax: IResolvable)

      public fun minMax(minMax: AxisDisplayMinMaxRangeProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d8bb0e641208efd67efe68454c0e8930f7745f49517be018fbf21a66f7b158f7")
      public fun minMax(minMax: AxisDisplayMinMaxRangeProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayRangeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayRangeProperty.builder()

      override fun dataDriven(dataDriven: Any) {
        cdkBuilder.dataDriven(dataDriven)
      }

      override fun minMax(minMax: IResolvable) {
        cdkBuilder.minMax(minMax.let(IResolvable::unwrap))
      }

      override fun minMax(minMax: AxisDisplayMinMaxRangeProperty) {
        cdkBuilder.minMax(minMax.let(AxisDisplayMinMaxRangeProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d8bb0e641208efd67efe68454c0e8930f7745f49517be018fbf21a66f7b158f7")
      override fun minMax(minMax: AxisDisplayMinMaxRangeProperty.Builder.() -> Unit): Unit =
          minMax(AxisDisplayMinMaxRangeProperty(minMax))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayRangeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayRangeProperty,
    ) : CdkObject(cdkObject), AxisDisplayRangeProperty {
      override fun dataDriven(): Any? = unwrap(this).getDataDriven()

      override fun minMax(): Any? = unwrap(this).getMinMax()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AxisDisplayRangeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayRangeProperty):
          AxisDisplayRangeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisDisplayRangeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayRangeProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayRangeProperty
    }
  }

  public interface MeasureFieldProperty {
    public fun calculatedMeasureField(): Any? = unwrap(this).getCalculatedMeasureField()

    public fun categoricalMeasureField(): Any? = unwrap(this).getCategoricalMeasureField()

    public fun dateMeasureField(): Any? = unwrap(this).getDateMeasureField()

    public fun numericalMeasureField(): Any? = unwrap(this).getNumericalMeasureField()

    @CdkDslMarker
    public interface Builder {
      public fun calculatedMeasureField(calculatedMeasureField: IResolvable)

      public fun calculatedMeasureField(calculatedMeasureField: CalculatedMeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("85d88601ca550d8cf68b0597cab1dfdf71041535d06def9eef2004d8ee1fd74a")
      public
          fun calculatedMeasureField(calculatedMeasureField: CalculatedMeasureFieldProperty.Builder.() -> Unit)

      public fun categoricalMeasureField(categoricalMeasureField: IResolvable)

      public fun categoricalMeasureField(categoricalMeasureField: CategoricalMeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cccaa2631d0d00a3fb1f1f5900bbb7b13ca050b5c43634824c9d1ed51847ef9f")
      public
          fun categoricalMeasureField(categoricalMeasureField: CategoricalMeasureFieldProperty.Builder.() -> Unit)

      public fun dateMeasureField(dateMeasureField: IResolvable)

      public fun dateMeasureField(dateMeasureField: DateMeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6a6bb1c1a4bdf2917b05b73e2b53d487c5badfc0869d8d415a9fe77b0eef45b5")
      public fun dateMeasureField(dateMeasureField: DateMeasureFieldProperty.Builder.() -> Unit)

      public fun numericalMeasureField(numericalMeasureField: IResolvable)

      public fun numericalMeasureField(numericalMeasureField: NumericalMeasureFieldProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e88d38f0cfd7b4459bdcab4b1404037b1fa3593b221bbd7599e54231aa660ba1")
      public
          fun numericalMeasureField(numericalMeasureField: NumericalMeasureFieldProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MeasureFieldProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.MeasureFieldProperty.builder()

      override fun calculatedMeasureField(calculatedMeasureField: IResolvable) {
        cdkBuilder.calculatedMeasureField(calculatedMeasureField.let(IResolvable::unwrap))
      }

      override fun calculatedMeasureField(calculatedMeasureField: CalculatedMeasureFieldProperty) {
        cdkBuilder.calculatedMeasureField(calculatedMeasureField.let(CalculatedMeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("85d88601ca550d8cf68b0597cab1dfdf71041535d06def9eef2004d8ee1fd74a")
      override
          fun calculatedMeasureField(calculatedMeasureField: CalculatedMeasureFieldProperty.Builder.() -> Unit):
          Unit = calculatedMeasureField(CalculatedMeasureFieldProperty(calculatedMeasureField))

      override fun categoricalMeasureField(categoricalMeasureField: IResolvable) {
        cdkBuilder.categoricalMeasureField(categoricalMeasureField.let(IResolvable::unwrap))
      }

      override
          fun categoricalMeasureField(categoricalMeasureField: CategoricalMeasureFieldProperty) {
        cdkBuilder.categoricalMeasureField(categoricalMeasureField.let(CategoricalMeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("cccaa2631d0d00a3fb1f1f5900bbb7b13ca050b5c43634824c9d1ed51847ef9f")
      override
          fun categoricalMeasureField(categoricalMeasureField: CategoricalMeasureFieldProperty.Builder.() -> Unit):
          Unit = categoricalMeasureField(CategoricalMeasureFieldProperty(categoricalMeasureField))

      override fun dateMeasureField(dateMeasureField: IResolvable) {
        cdkBuilder.dateMeasureField(dateMeasureField.let(IResolvable::unwrap))
      }

      override fun dateMeasureField(dateMeasureField: DateMeasureFieldProperty) {
        cdkBuilder.dateMeasureField(dateMeasureField.let(DateMeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6a6bb1c1a4bdf2917b05b73e2b53d487c5badfc0869d8d415a9fe77b0eef45b5")
      override fun dateMeasureField(dateMeasureField: DateMeasureFieldProperty.Builder.() -> Unit):
          Unit = dateMeasureField(DateMeasureFieldProperty(dateMeasureField))

      override fun numericalMeasureField(numericalMeasureField: IResolvable) {
        cdkBuilder.numericalMeasureField(numericalMeasureField.let(IResolvable::unwrap))
      }

      override fun numericalMeasureField(numericalMeasureField: NumericalMeasureFieldProperty) {
        cdkBuilder.numericalMeasureField(numericalMeasureField.let(NumericalMeasureFieldProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e88d38f0cfd7b4459bdcab4b1404037b1fa3593b221bbd7599e54231aa660ba1")
      override
          fun numericalMeasureField(numericalMeasureField: NumericalMeasureFieldProperty.Builder.() -> Unit):
          Unit = numericalMeasureField(NumericalMeasureFieldProperty(numericalMeasureField))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.MeasureFieldProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MeasureFieldProperty,
    ) : CdkObject(cdkObject), MeasureFieldProperty {
      override fun calculatedMeasureField(): Any? = unwrap(this).getCalculatedMeasureField()

      override fun categoricalMeasureField(): Any? = unwrap(this).getCategoricalMeasureField()

      override fun dateMeasureField(): Any? = unwrap(this).getDateMeasureField()

      override fun numericalMeasureField(): Any? = unwrap(this).getNumericalMeasureField()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): MeasureFieldProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.MeasureFieldProperty):
          MeasureFieldProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MeasureFieldProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.MeasureFieldProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.MeasureFieldProperty
    }
  }

  public interface RadarChartVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: RadarChartConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b3832a77f4cf2b0bc67b1749cf4601ca20f28d3026fb3b9f11ca45da15fdc3a")
      public
          fun chartConfiguration(chartConfiguration: RadarChartConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3376d7602d9249efb190b21b72e1f14b7567062e650a5b6ae0944ba0105172be")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3c3da912519da53d36ea7c7b5592095d0d24c7403d975a701aed34832f2d12ea")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: RadarChartConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(RadarChartConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7b3832a77f4cf2b0bc67b1749cf4601ca20f28d3026fb3b9f11ca45da15fdc3a")
      override
          fun chartConfiguration(chartConfiguration: RadarChartConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(RadarChartConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3376d7602d9249efb190b21b72e1f14b7567062e650a5b6ae0944ba0105172be")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3c3da912519da53d36ea7c7b5592095d0d24c7403d975a701aed34832f2d12ea")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartVisualProperty,
    ) : CdkObject(cdkObject), RadarChartVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): RadarChartVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartVisualProperty):
          RadarChartVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartVisualProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartVisualProperty
    }
  }

  public interface CustomNarrativeOptionsProperty {
    public fun narrative(): String

    @CdkDslMarker
    public interface Builder {
      public fun narrative(narrative: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomNarrativeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomNarrativeOptionsProperty.builder()

      override fun narrative(narrative: String) {
        cdkBuilder.narrative(narrative)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomNarrativeOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomNarrativeOptionsProperty,
    ) : CdkObject(cdkObject), CustomNarrativeOptionsProperty {
      override fun narrative(): String = unwrap(this).getNarrative()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): CustomNarrativeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CustomNarrativeOptionsProperty):
          CustomNarrativeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomNarrativeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomNarrativeOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomNarrativeOptionsProperty
    }
  }

  public interface WaterfallChartAggregatedFieldWellsProperty {
    public fun breakdowns(): Any? = unwrap(this).getBreakdowns()

    public fun categories(): Any? = unwrap(this).getCategories()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun breakdowns(breakdowns: IResolvable)

      public fun breakdowns(breakdowns: List<Any>)

      public fun breakdowns(vararg breakdowns: Any)

      public fun categories(categories: IResolvable)

      public fun categories(categories: List<Any>)

      public fun categories(vararg categories: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartAggregatedFieldWellsProperty.builder()

      override fun breakdowns(breakdowns: IResolvable) {
        cdkBuilder.breakdowns(breakdowns.let(IResolvable::unwrap))
      }

      override fun breakdowns(breakdowns: List<Any>) {
        cdkBuilder.breakdowns(breakdowns)
      }

      override fun breakdowns(vararg breakdowns: Any): Unit = breakdowns(breakdowns.toList())

      override fun categories(categories: IResolvable) {
        cdkBuilder.categories(categories.let(IResolvable::unwrap))
      }

      override fun categories(categories: List<Any>) {
        cdkBuilder.categories(categories)
      }

      override fun categories(vararg categories: Any): Unit = categories(categories.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), WaterfallChartAggregatedFieldWellsProperty {
      override fun breakdowns(): Any? = unwrap(this).getBreakdowns()

      override fun categories(): Any? = unwrap(this).getCategories()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          WaterfallChartAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartAggregatedFieldWellsProperty):
          WaterfallChartAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WaterfallChartAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartAggregatedFieldWellsProperty
    }
  }

  public interface SankeyDiagramSortConfigurationProperty {
    public fun destinationItemsLimit(): Any? = unwrap(this).getDestinationItemsLimit()

    public fun sourceItemsLimit(): Any? = unwrap(this).getSourceItemsLimit()

    public fun weightSort(): Any? = unwrap(this).getWeightSort()

    @CdkDslMarker
    public interface Builder {
      public fun destinationItemsLimit(destinationItemsLimit: IResolvable)

      public fun destinationItemsLimit(destinationItemsLimit: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eae732dd142ce06870d75f17e43a92595dc59b55f86feb39c9370567c6dcf7ed")
      public
          fun destinationItemsLimit(destinationItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun sourceItemsLimit(sourceItemsLimit: IResolvable)

      public fun sourceItemsLimit(sourceItemsLimit: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("96d7f2637bd6a213e54804fb2116a720fad0d0a3e78f6e32a16508bf7858d430")
      public
          fun sourceItemsLimit(sourceItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun weightSort(weightSort: IResolvable)

      public fun weightSort(weightSort: List<Any>)

      public fun weightSort(vararg weightSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramSortConfigurationProperty.builder()

      override fun destinationItemsLimit(destinationItemsLimit: IResolvable) {
        cdkBuilder.destinationItemsLimit(destinationItemsLimit.let(IResolvable::unwrap))
      }

      override fun destinationItemsLimit(destinationItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.destinationItemsLimit(destinationItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("eae732dd142ce06870d75f17e43a92595dc59b55f86feb39c9370567c6dcf7ed")
      override
          fun destinationItemsLimit(destinationItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = destinationItemsLimit(ItemsLimitConfigurationProperty(destinationItemsLimit))

      override fun sourceItemsLimit(sourceItemsLimit: IResolvable) {
        cdkBuilder.sourceItemsLimit(sourceItemsLimit.let(IResolvable::unwrap))
      }

      override fun sourceItemsLimit(sourceItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.sourceItemsLimit(sourceItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("96d7f2637bd6a213e54804fb2116a720fad0d0a3e78f6e32a16508bf7858d430")
      override
          fun sourceItemsLimit(sourceItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = sourceItemsLimit(ItemsLimitConfigurationProperty(sourceItemsLimit))

      override fun weightSort(weightSort: IResolvable) {
        cdkBuilder.weightSort(weightSort.let(IResolvable::unwrap))
      }

      override fun weightSort(weightSort: List<Any>) {
        cdkBuilder.weightSort(weightSort)
      }

      override fun weightSort(vararg weightSort: Any): Unit = weightSort(weightSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramSortConfigurationProperty,
    ) : CdkObject(cdkObject), SankeyDiagramSortConfigurationProperty {
      override fun destinationItemsLimit(): Any? = unwrap(this).getDestinationItemsLimit()

      override fun sourceItemsLimit(): Any? = unwrap(this).getSourceItemsLimit()

      override fun weightSort(): Any? = unwrap(this).getWeightSort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SankeyDiagramSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramSortConfigurationProperty):
          SankeyDiagramSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SankeyDiagramSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramSortConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramSortConfigurationProperty
    }
  }

  public interface WaterfallChartConfigurationProperty {
    public fun categoryAxisDisplayOptions(): Any? = unwrap(this).getCategoryAxisDisplayOptions()

    public fun categoryAxisLabelOptions(): Any? = unwrap(this).getCategoryAxisLabelOptions()

    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun legend(): Any? = unwrap(this).getLegend()

    public fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

    public fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    public fun waterfallChartOptions(): Any? = unwrap(this).getWaterfallChartOptions()

    @CdkDslMarker
    public interface Builder {
      public fun categoryAxisDisplayOptions(categoryAxisDisplayOptions: IResolvable)

      public fun categoryAxisDisplayOptions(categoryAxisDisplayOptions: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6f25060091b64dc92a23b2161581dd102de4176377e679a3d13d836c676525d0")
      public
          fun categoryAxisDisplayOptions(categoryAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun categoryAxisLabelOptions(categoryAxisLabelOptions: IResolvable)

      public fun categoryAxisLabelOptions(categoryAxisLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4c2570ffb6a7fdaebd576b63aaf40c4bece7fcea4c4e1ba68004e227e69b0c9e")
      public
          fun categoryAxisLabelOptions(categoryAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun dataLabels(dataLabels: IResolvable)

      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("64927ae0cd341b21d02840da0bea6f645035f83746d4b53fd74dd40fdc4a83ce")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: WaterfallChartFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e6379b07f7d9c8b2c7b0d8c593940d3a2b19d4d9b160eb7e6f643574e3fcfab4")
      public fun fieldWells(fieldWells: WaterfallChartFieldWellsProperty.Builder.() -> Unit)

      public fun legend(legend: IResolvable)

      public fun legend(legend: LegendOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aebfea26f586ef09d83269289125b6921fda8eac0cf4071e3296cd2a76d49847")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable)

      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("37decddd700e7311730b09476082bf31a5a8bb3879e6c56d4ea95906ae5ee2cd")
      public
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable)

      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dc566c1a07eecb8813a055091a7e3210317b03b4e84f0a3b35161e331191712a")
      public
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: WaterfallChartSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e4b4b421dfa6d895b18954616a8075d37723088e26b54e12e1a2909d26e10c9d")
      public
          fun sortConfiguration(sortConfiguration: WaterfallChartSortConfigurationProperty.Builder.() -> Unit)

      public fun visualPalette(visualPalette: IResolvable)

      public fun visualPalette(visualPalette: VisualPaletteProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("27a83bfaee1cf76dc057bb1e3603aad0d5b43c44d3009bbea375606ee0523451")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)

      public fun waterfallChartOptions(waterfallChartOptions: IResolvable)

      public fun waterfallChartOptions(waterfallChartOptions: WaterfallChartOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0ef67dd58de52921dd1003ade0258d03b91c88d734a2eb1c1ec16646307e6bf1")
      public
          fun waterfallChartOptions(waterfallChartOptions: WaterfallChartOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartConfigurationProperty.builder()

      override fun categoryAxisDisplayOptions(categoryAxisDisplayOptions: IResolvable) {
        cdkBuilder.categoryAxisDisplayOptions(categoryAxisDisplayOptions.let(IResolvable::unwrap))
      }

      override
          fun categoryAxisDisplayOptions(categoryAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.categoryAxisDisplayOptions(categoryAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6f25060091b64dc92a23b2161581dd102de4176377e679a3d13d836c676525d0")
      override
          fun categoryAxisDisplayOptions(categoryAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = categoryAxisDisplayOptions(AxisDisplayOptionsProperty(categoryAxisDisplayOptions))

      override fun categoryAxisLabelOptions(categoryAxisLabelOptions: IResolvable) {
        cdkBuilder.categoryAxisLabelOptions(categoryAxisLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun categoryAxisLabelOptions(categoryAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryAxisLabelOptions(categoryAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4c2570ffb6a7fdaebd576b63aaf40c4bece7fcea4c4e1ba68004e227e69b0c9e")
      override
          fun categoryAxisLabelOptions(categoryAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryAxisLabelOptions(ChartAxisLabelOptionsProperty(categoryAxisLabelOptions))

      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("64927ae0cd341b21d02840da0bea6f645035f83746d4b53fd74dd40fdc4a83ce")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: WaterfallChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(WaterfallChartFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e6379b07f7d9c8b2c7b0d8c593940d3a2b19d4d9b160eb7e6f643574e3fcfab4")
      override fun fieldWells(fieldWells: WaterfallChartFieldWellsProperty.Builder.() -> Unit): Unit
          = fieldWells(WaterfallChartFieldWellsProperty(fieldWells))

      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("aebfea26f586ef09d83269289125b6921fda8eac0cf4071e3296cd2a76d49847")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      override fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(IResolvable::unwrap))
      }

      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("37decddd700e7311730b09476082bf31a5a8bb3879e6c56d4ea95906ae5ee2cd")
      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisDisplayOptions(AxisDisplayOptionsProperty(primaryYAxisDisplayOptions))

      override fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("dc566c1a07eecb8813a055091a7e3210317b03b4e84f0a3b35161e331191712a")
      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisLabelOptions(ChartAxisLabelOptionsProperty(primaryYAxisLabelOptions))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: WaterfallChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(WaterfallChartSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e4b4b421dfa6d895b18954616a8075d37723088e26b54e12e1a2909d26e10c9d")
      override
          fun sortConfiguration(sortConfiguration: WaterfallChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(WaterfallChartSortConfigurationProperty(sortConfiguration))

      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("27a83bfaee1cf76dc057bb1e3603aad0d5b43c44d3009bbea375606ee0523451")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      override fun waterfallChartOptions(waterfallChartOptions: IResolvable) {
        cdkBuilder.waterfallChartOptions(waterfallChartOptions.let(IResolvable::unwrap))
      }

      override fun waterfallChartOptions(waterfallChartOptions: WaterfallChartOptionsProperty) {
        cdkBuilder.waterfallChartOptions(waterfallChartOptions.let(WaterfallChartOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("0ef67dd58de52921dd1003ade0258d03b91c88d734a2eb1c1ec16646307e6bf1")
      override
          fun waterfallChartOptions(waterfallChartOptions: WaterfallChartOptionsProperty.Builder.() -> Unit):
          Unit = waterfallChartOptions(WaterfallChartOptionsProperty(waterfallChartOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartConfigurationProperty,
    ) : CdkObject(cdkObject), WaterfallChartConfigurationProperty {
      override fun categoryAxisDisplayOptions(): Any? = unwrap(this).getCategoryAxisDisplayOptions()

      override fun categoryAxisLabelOptions(): Any? = unwrap(this).getCategoryAxisLabelOptions()

      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun legend(): Any? = unwrap(this).getLegend()

      override fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

      override fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()

      override fun waterfallChartOptions(): Any? = unwrap(this).getWaterfallChartOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          WaterfallChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartConfigurationProperty):
          WaterfallChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WaterfallChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartConfigurationProperty
    }
  }

  public interface BoxPlotOptionsProperty {
    public fun allDataPointsVisibility(): String? = unwrap(this).getAllDataPointsVisibility()

    public fun outlierVisibility(): String? = unwrap(this).getOutlierVisibility()

    public fun styleOptions(): Any? = unwrap(this).getStyleOptions()

    @CdkDslMarker
    public interface Builder {
      public fun allDataPointsVisibility(allDataPointsVisibility: String)

      public fun outlierVisibility(outlierVisibility: String)

      public fun styleOptions(styleOptions: IResolvable)

      public fun styleOptions(styleOptions: BoxPlotStyleOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("98baa7db99f01d017b9657b2564d6ef875147dd60e3a58243d4e0c25f37e45ac")
      public fun styleOptions(styleOptions: BoxPlotStyleOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotOptionsProperty.builder()

      override fun allDataPointsVisibility(allDataPointsVisibility: String) {
        cdkBuilder.allDataPointsVisibility(allDataPointsVisibility)
      }

      override fun outlierVisibility(outlierVisibility: String) {
        cdkBuilder.outlierVisibility(outlierVisibility)
      }

      override fun styleOptions(styleOptions: IResolvable) {
        cdkBuilder.styleOptions(styleOptions.let(IResolvable::unwrap))
      }

      override fun styleOptions(styleOptions: BoxPlotStyleOptionsProperty) {
        cdkBuilder.styleOptions(styleOptions.let(BoxPlotStyleOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("98baa7db99f01d017b9657b2564d6ef875147dd60e3a58243d4e0c25f37e45ac")
      override fun styleOptions(styleOptions: BoxPlotStyleOptionsProperty.Builder.() -> Unit): Unit
          = styleOptions(BoxPlotStyleOptionsProperty(styleOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotOptionsProperty,
    ) : CdkObject(cdkObject), BoxPlotOptionsProperty {
      override fun allDataPointsVisibility(): String? = unwrap(this).getAllDataPointsVisibility()

      override fun outlierVisibility(): String? = unwrap(this).getOutlierVisibility()

      override fun styleOptions(): Any? = unwrap(this).getStyleOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): BoxPlotOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotOptionsProperty):
          BoxPlotOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BoxPlotOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotOptionsProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BoxPlotOptionsProperty
    }
  }

  public interface FontConfigurationProperty {
    public fun fontColor(): String? = unwrap(this).getFontColor()

    public fun fontDecoration(): String? = unwrap(this).getFontDecoration()

    public fun fontSize(): Any? = unwrap(this).getFontSize()

    public fun fontStyle(): String? = unwrap(this).getFontStyle()

    public fun fontWeight(): Any? = unwrap(this).getFontWeight()

    @CdkDslMarker
    public interface Builder {
      public fun fontColor(fontColor: String)

      public fun fontDecoration(fontDecoration: String)

      public fun fontSize(fontSize: IResolvable)

      public fun fontSize(fontSize: FontSizeProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("455521f0df907dbbef7f6e4a2280320c6f9fa03dc33aa6e712310f49ddf9f70c")
      public fun fontSize(fontSize: FontSizeProperty.Builder.() -> Unit)

      public fun fontStyle(fontStyle: String)

      public fun fontWeight(fontWeight: IResolvable)

      public fun fontWeight(fontWeight: FontWeightProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("454dea080a3b35342564f87e968303effc46a4d70078d686c177c6b77179f871")
      public fun fontWeight(fontWeight: FontWeightProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontConfigurationProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontConfigurationProperty.builder()

      override fun fontColor(fontColor: String) {
        cdkBuilder.fontColor(fontColor)
      }

      override fun fontDecoration(fontDecoration: String) {
        cdkBuilder.fontDecoration(fontDecoration)
      }

      override fun fontSize(fontSize: IResolvable) {
        cdkBuilder.fontSize(fontSize.let(IResolvable::unwrap))
      }

      override fun fontSize(fontSize: FontSizeProperty) {
        cdkBuilder.fontSize(fontSize.let(FontSizeProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("455521f0df907dbbef7f6e4a2280320c6f9fa03dc33aa6e712310f49ddf9f70c")
      override fun fontSize(fontSize: FontSizeProperty.Builder.() -> Unit): Unit =
          fontSize(FontSizeProperty(fontSize))

      override fun fontStyle(fontStyle: String) {
        cdkBuilder.fontStyle(fontStyle)
      }

      override fun fontWeight(fontWeight: IResolvable) {
        cdkBuilder.fontWeight(fontWeight.let(IResolvable::unwrap))
      }

      override fun fontWeight(fontWeight: FontWeightProperty) {
        cdkBuilder.fontWeight(fontWeight.let(FontWeightProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("454dea080a3b35342564f87e968303effc46a4d70078d686c177c6b77179f871")
      override fun fontWeight(fontWeight: FontWeightProperty.Builder.() -> Unit): Unit =
          fontWeight(FontWeightProperty(fontWeight))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontConfigurationProperty,
    ) : CdkObject(cdkObject), FontConfigurationProperty {
      override fun fontColor(): String? = unwrap(this).getFontColor()

      override fun fontDecoration(): String? = unwrap(this).getFontDecoration()

      override fun fontSize(): Any? = unwrap(this).getFontSize()

      override fun fontStyle(): String? = unwrap(this).getFontStyle()

      override fun fontWeight(): Any? = unwrap(this).getFontWeight()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FontConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FontConfigurationProperty):
          FontConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FontConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontConfigurationProperty
    }
  }

  public interface IntegerDefaultValuesProperty {
    public fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

    public fun staticValues(): Any? = unwrap(this).getStaticValues()

    @CdkDslMarker
    public interface Builder {
      public fun dynamicValue(dynamicValue: IResolvable)

      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2f8c8d24f3a21a5f17554431cde47dd242e34229b67fa8df68b277807a96429a")
      public fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit)

      public fun staticValues(staticValues: IResolvable)

      public fun staticValues(staticValues: List<Number>)

      public fun staticValues(vararg staticValues: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerDefaultValuesProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerDefaultValuesProperty.builder()

      override fun dynamicValue(dynamicValue: IResolvable) {
        cdkBuilder.dynamicValue(dynamicValue.let(IResolvable::unwrap))
      }

      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty) {
        cdkBuilder.dynamicValue(dynamicValue.let(DynamicDefaultValueProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2f8c8d24f3a21a5f17554431cde47dd242e34229b67fa8df68b277807a96429a")
      override fun dynamicValue(dynamicValue: DynamicDefaultValueProperty.Builder.() -> Unit): Unit
          = dynamicValue(DynamicDefaultValueProperty(dynamicValue))

      override fun staticValues(staticValues: IResolvable) {
        cdkBuilder.staticValues(staticValues.let(IResolvable::unwrap))
      }

      override fun staticValues(staticValues: List<Number>) {
        cdkBuilder.staticValues(staticValues)
      }

      override fun staticValues(vararg staticValues: Number): Unit =
          staticValues(staticValues.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerDefaultValuesProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerDefaultValuesProperty,
    ) : CdkObject(cdkObject), IntegerDefaultValuesProperty {
      override fun dynamicValue(): Any? = unwrap(this).getDynamicValue()

      override fun staticValues(): Any? = unwrap(this).getStaticValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): IntegerDefaultValuesProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerDefaultValuesProperty):
          IntegerDefaultValuesProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: IntegerDefaultValuesProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerDefaultValuesProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.IntegerDefaultValuesProperty
    }
  }

  public interface CustomFilterConfigurationProperty {
    public fun categoryValue(): String? = unwrap(this).getCategoryValue()

    public fun matchOperator(): String

    public fun nullOption(): String

    public fun parameterName(): String? = unwrap(this).getParameterName()

    public fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()

    @CdkDslMarker
    public interface Builder {
      public fun categoryValue(categoryValue: String)

      public fun matchOperator(matchOperator: String)

      public fun nullOption(nullOption: String)

      public fun parameterName(parameterName: String)

      public fun selectAllOptions(selectAllOptions: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterConfigurationProperty.builder()

      override fun categoryValue(categoryValue: String) {
        cdkBuilder.categoryValue(categoryValue)
      }

      override fun matchOperator(matchOperator: String) {
        cdkBuilder.matchOperator(matchOperator)
      }

      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      override fun parameterName(parameterName: String) {
        cdkBuilder.parameterName(parameterName)
      }

      override fun selectAllOptions(selectAllOptions: String) {
        cdkBuilder.selectAllOptions(selectAllOptions)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterConfigurationProperty,
    ) : CdkObject(cdkObject), CustomFilterConfigurationProperty {
      override fun categoryValue(): String? = unwrap(this).getCategoryValue()

      override fun matchOperator(): String = unwrap(this).getMatchOperator()

      override fun nullOption(): String = unwrap(this).getNullOption()

      override fun parameterName(): String? = unwrap(this).getParameterName()

      override fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          CustomFilterConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterConfigurationProperty):
          CustomFilterConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: CustomFilterConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.CustomFilterConfigurationProperty
    }
  }

  public interface LineSeriesAxisDisplayOptionsProperty {
    public fun axisOptions(): Any? = unwrap(this).getAxisOptions()

    public fun missingDataConfigurations(): Any? = unwrap(this).getMissingDataConfigurations()

    @CdkDslMarker
    public interface Builder {
      public fun axisOptions(axisOptions: IResolvable)

      public fun axisOptions(axisOptions: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("898e2a4c60333247ca06852389cc1eab33388ed5c859db385ea8ce8dc5cf0c51")
      public fun axisOptions(axisOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun missingDataConfigurations(missingDataConfigurations: IResolvable)

      public fun missingDataConfigurations(missingDataConfigurations: List<Any>)

      public fun missingDataConfigurations(vararg missingDataConfigurations: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineSeriesAxisDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineSeriesAxisDisplayOptionsProperty.builder()

      override fun axisOptions(axisOptions: IResolvable) {
        cdkBuilder.axisOptions(axisOptions.let(IResolvable::unwrap))
      }

      override fun axisOptions(axisOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.axisOptions(axisOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("898e2a4c60333247ca06852389cc1eab33388ed5c859db385ea8ce8dc5cf0c51")
      override fun axisOptions(axisOptions: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          axisOptions(AxisDisplayOptionsProperty(axisOptions))

      override fun missingDataConfigurations(missingDataConfigurations: IResolvable) {
        cdkBuilder.missingDataConfigurations(missingDataConfigurations.let(IResolvable::unwrap))
      }

      override fun missingDataConfigurations(missingDataConfigurations: List<Any>) {
        cdkBuilder.missingDataConfigurations(missingDataConfigurations)
      }

      override fun missingDataConfigurations(vararg missingDataConfigurations: Any): Unit =
          missingDataConfigurations(missingDataConfigurations.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineSeriesAxisDisplayOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineSeriesAxisDisplayOptionsProperty,
    ) : CdkObject(cdkObject), LineSeriesAxisDisplayOptionsProperty {
      override fun axisOptions(): Any? = unwrap(this).getAxisOptions()

      override fun missingDataConfigurations(): Any? = unwrap(this).getMissingDataConfigurations()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          LineSeriesAxisDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LineSeriesAxisDisplayOptionsProperty):
          LineSeriesAxisDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineSeriesAxisDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineSeriesAxisDisplayOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineSeriesAxisDisplayOptionsProperty
    }
  }

  public interface NumericRangeFilterProperty {
    public fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

    public fun column(): Any

    public fun filterId(): String

    public fun includeMaximum(): Any? = unwrap(this).getIncludeMaximum()

    public fun includeMinimum(): Any? = unwrap(this).getIncludeMinimum()

    public fun nullOption(): String

    public fun rangeMaximum(): Any? = unwrap(this).getRangeMaximum()

    public fun rangeMinimum(): Any? = unwrap(this).getRangeMinimum()

    public fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()

    @CdkDslMarker
    public interface Builder {
      public fun aggregationFunction(aggregationFunction: IResolvable)

      public fun aggregationFunction(aggregationFunction: AggregationFunctionProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ba89d8b650cc175f0ee5cbc3a2e60ee957f2c6a6836dc5f7bcf65f765a86d220")
      public
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit)

      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bc8cb9b3026af9c5d8ac21995ad4d7c06c2d215fd5c08a63ea64aa08d5dab831")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun filterId(filterId: String)

      public fun includeMaximum(includeMaximum: Boolean)

      public fun includeMaximum(includeMaximum: IResolvable)

      public fun includeMinimum(includeMinimum: Boolean)

      public fun includeMinimum(includeMinimum: IResolvable)

      public fun nullOption(nullOption: String)

      public fun rangeMaximum(rangeMaximum: IResolvable)

      public fun rangeMaximum(rangeMaximum: NumericRangeFilterValueProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("093690496752b15a85fa5df12d7b49a1541fc38b9dadcf05c38d3ab522478593")
      public fun rangeMaximum(rangeMaximum: NumericRangeFilterValueProperty.Builder.() -> Unit)

      public fun rangeMinimum(rangeMinimum: IResolvable)

      public fun rangeMinimum(rangeMinimum: NumericRangeFilterValueProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ed89680fc5eb97414d6b1f7187f0931ebe3804937799f44ce6ee3e7c81776be")
      public fun rangeMinimum(rangeMinimum: NumericRangeFilterValueProperty.Builder.() -> Unit)

      public fun selectAllOptions(selectAllOptions: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterProperty.builder()

      override fun aggregationFunction(aggregationFunction: IResolvable) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(IResolvable::unwrap))
      }

      override fun aggregationFunction(aggregationFunction: AggregationFunctionProperty) {
        cdkBuilder.aggregationFunction(aggregationFunction.let(AggregationFunctionProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ba89d8b650cc175f0ee5cbc3a2e60ee957f2c6a6836dc5f7bcf65f765a86d220")
      override
          fun aggregationFunction(aggregationFunction: AggregationFunctionProperty.Builder.() -> Unit):
          Unit = aggregationFunction(AggregationFunctionProperty(aggregationFunction))

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bc8cb9b3026af9c5d8ac21995ad4d7c06c2d215fd5c08a63ea64aa08d5dab831")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun filterId(filterId: String) {
        cdkBuilder.filterId(filterId)
      }

      override fun includeMaximum(includeMaximum: Boolean) {
        cdkBuilder.includeMaximum(includeMaximum)
      }

      override fun includeMaximum(includeMaximum: IResolvable) {
        cdkBuilder.includeMaximum(includeMaximum.let(IResolvable::unwrap))
      }

      override fun includeMinimum(includeMinimum: Boolean) {
        cdkBuilder.includeMinimum(includeMinimum)
      }

      override fun includeMinimum(includeMinimum: IResolvable) {
        cdkBuilder.includeMinimum(includeMinimum.let(IResolvable::unwrap))
      }

      override fun nullOption(nullOption: String) {
        cdkBuilder.nullOption(nullOption)
      }

      override fun rangeMaximum(rangeMaximum: IResolvable) {
        cdkBuilder.rangeMaximum(rangeMaximum.let(IResolvable::unwrap))
      }

      override fun rangeMaximum(rangeMaximum: NumericRangeFilterValueProperty) {
        cdkBuilder.rangeMaximum(rangeMaximum.let(NumericRangeFilterValueProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("093690496752b15a85fa5df12d7b49a1541fc38b9dadcf05c38d3ab522478593")
      override fun rangeMaximum(rangeMaximum: NumericRangeFilterValueProperty.Builder.() -> Unit):
          Unit = rangeMaximum(NumericRangeFilterValueProperty(rangeMaximum))

      override fun rangeMinimum(rangeMinimum: IResolvable) {
        cdkBuilder.rangeMinimum(rangeMinimum.let(IResolvable::unwrap))
      }

      override fun rangeMinimum(rangeMinimum: NumericRangeFilterValueProperty) {
        cdkBuilder.rangeMinimum(rangeMinimum.let(NumericRangeFilterValueProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3ed89680fc5eb97414d6b1f7187f0931ebe3804937799f44ce6ee3e7c81776be")
      override fun rangeMinimum(rangeMinimum: NumericRangeFilterValueProperty.Builder.() -> Unit):
          Unit = rangeMinimum(NumericRangeFilterValueProperty(rangeMinimum))

      override fun selectAllOptions(selectAllOptions: String) {
        cdkBuilder.selectAllOptions(selectAllOptions)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterProperty,
    ) : CdkObject(cdkObject), NumericRangeFilterProperty {
      override fun aggregationFunction(): Any? = unwrap(this).getAggregationFunction()

      override fun column(): Any = unwrap(this).getColumn()

      override fun filterId(): String = unwrap(this).getFilterId()

      override fun includeMaximum(): Any? = unwrap(this).getIncludeMaximum()

      override fun includeMinimum(): Any? = unwrap(this).getIncludeMinimum()

      override fun nullOption(): String = unwrap(this).getNullOption()

      override fun rangeMaximum(): Any? = unwrap(this).getRangeMaximum()

      override fun rangeMinimum(): Any? = unwrap(this).getRangeMinimum()

      override fun selectAllOptions(): String? = unwrap(this).getSelectAllOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): NumericRangeFilterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterProperty):
          NumericRangeFilterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericRangeFilterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericRangeFilterProperty
    }
  }

  public interface TreeMapAggregatedFieldWellsProperty {
    public fun colors(): Any? = unwrap(this).getColors()

    public fun groups(): Any? = unwrap(this).getGroups()

    public fun sizes(): Any? = unwrap(this).getSizes()

    @CdkDslMarker
    public interface Builder {
      public fun colors(colors: IResolvable)

      public fun colors(colors: List<Any>)

      public fun colors(vararg colors: Any)

      public fun groups(groups: IResolvable)

      public fun groups(groups: List<Any>)

      public fun groups(vararg groups: Any)

      public fun sizes(sizes: IResolvable)

      public fun sizes(sizes: List<Any>)

      public fun sizes(vararg sizes: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapAggregatedFieldWellsProperty.builder()

      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      override fun groups(groups: IResolvable) {
        cdkBuilder.groups(groups.let(IResolvable::unwrap))
      }

      override fun groups(groups: List<Any>) {
        cdkBuilder.groups(groups)
      }

      override fun groups(vararg groups: Any): Unit = groups(groups.toList())

      override fun sizes(sizes: IResolvable) {
        cdkBuilder.sizes(sizes.let(IResolvable::unwrap))
      }

      override fun sizes(sizes: List<Any>) {
        cdkBuilder.sizes(sizes)
      }

      override fun sizes(vararg sizes: Any): Unit = sizes(sizes.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), TreeMapAggregatedFieldWellsProperty {
      override fun colors(): Any? = unwrap(this).getColors()

      override fun groups(): Any? = unwrap(this).getGroups()

      override fun sizes(): Any? = unwrap(this).getSizes()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TreeMapAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapAggregatedFieldWellsProperty):
          TreeMapAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TreeMapAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapAggregatedFieldWellsProperty
    }
  }

  public interface GridLayoutConfigurationProperty {
    public fun canvasSizeOptions(): Any? = unwrap(this).getCanvasSizeOptions()

    public fun elements(): Any

    @CdkDslMarker
    public interface Builder {
      public fun canvasSizeOptions(canvasSizeOptions: IResolvable)

      public fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3f0080257a5433b6e90f388167dfb38bbd6bb5a4a0121705e78869b63b53a94a")
      public
          fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty.Builder.() -> Unit)

      public fun elements(elements: IResolvable)

      public fun elements(elements: List<Any>)

      public fun elements(vararg elements: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutConfigurationProperty.builder()

      override fun canvasSizeOptions(canvasSizeOptions: IResolvable) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(IResolvable::unwrap))
      }

      override fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty) {
        cdkBuilder.canvasSizeOptions(canvasSizeOptions.let(GridLayoutCanvasSizeOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3f0080257a5433b6e90f388167dfb38bbd6bb5a4a0121705e78869b63b53a94a")
      override
          fun canvasSizeOptions(canvasSizeOptions: GridLayoutCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit = canvasSizeOptions(GridLayoutCanvasSizeOptionsProperty(canvasSizeOptions))

      override fun elements(elements: IResolvable) {
        cdkBuilder.elements(elements.let(IResolvable::unwrap))
      }

      override fun elements(elements: List<Any>) {
        cdkBuilder.elements(elements)
      }

      override fun elements(vararg elements: Any): Unit = elements(elements.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutConfigurationProperty,
    ) : CdkObject(cdkObject), GridLayoutConfigurationProperty {
      override fun canvasSizeOptions(): Any? = unwrap(this).getCanvasSizeOptions()

      override fun elements(): Any = unwrap(this).getElements()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): GridLayoutConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutConfigurationProperty):
          GridLayoutConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GridLayoutConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutConfigurationProperty
    }
  }

  public interface TableAggregatedFieldWellsProperty {
    public fun groupBy(): Any? = unwrap(this).getGroupBy()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun groupBy(groupBy: IResolvable)

      public fun groupBy(groupBy: List<Any>)

      public fun groupBy(vararg groupBy: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableAggregatedFieldWellsProperty.builder()

      override fun groupBy(groupBy: IResolvable) {
        cdkBuilder.groupBy(groupBy.let(IResolvable::unwrap))
      }

      override fun groupBy(groupBy: List<Any>) {
        cdkBuilder.groupBy(groupBy)
      }

      override fun groupBy(vararg groupBy: Any): Unit = groupBy(groupBy.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableAggregatedFieldWellsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), TableAggregatedFieldWellsProperty {
      override fun groupBy(): Any? = unwrap(this).getGroupBy()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableAggregatedFieldWellsProperty):
          TableAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableAggregatedFieldWellsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableAggregatedFieldWellsProperty
    }
  }

  public interface MappedDataSetParameterProperty {
    public fun dataSetIdentifier(): String

    public fun dataSetParameterName(): String

    @CdkDslMarker
    public interface Builder {
      public fun dataSetIdentifier(dataSetIdentifier: String)

      public fun dataSetParameterName(dataSetParameterName: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MappedDataSetParameterProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.MappedDataSetParameterProperty.builder()

      override fun dataSetIdentifier(dataSetIdentifier: String) {
        cdkBuilder.dataSetIdentifier(dataSetIdentifier)
      }

      override fun dataSetParameterName(dataSetParameterName: String) {
        cdkBuilder.dataSetParameterName(dataSetParameterName)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.MappedDataSetParameterProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MappedDataSetParameterProperty,
    ) : CdkObject(cdkObject), MappedDataSetParameterProperty {
      override fun dataSetIdentifier(): String = unwrap(this).getDataSetIdentifier()

      override fun dataSetParameterName(): String = unwrap(this).getDataSetParameterName()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): MappedDataSetParameterProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.MappedDataSetParameterProperty):
          MappedDataSetParameterProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MappedDataSetParameterProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.MappedDataSetParameterProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.MappedDataSetParameterProperty
    }
  }

  public interface AxisTickLabelOptionsProperty {
    public fun labelOptions(): Any? = unwrap(this).getLabelOptions()

    public fun rotationAngle(): Number? = unwrap(this).getRotationAngle()

    @CdkDslMarker
    public interface Builder {
      public fun labelOptions(labelOptions: IResolvable)

      public fun labelOptions(labelOptions: LabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ce99be3c49ed1595befcffabd361835a4fc8766a2558d230bf0664dde9d313a")
      public fun labelOptions(labelOptions: LabelOptionsProperty.Builder.() -> Unit)

      public fun rotationAngle(rotationAngle: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisTickLabelOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisTickLabelOptionsProperty.builder()

      override fun labelOptions(labelOptions: IResolvable) {
        cdkBuilder.labelOptions(labelOptions.let(IResolvable::unwrap))
      }

      override fun labelOptions(labelOptions: LabelOptionsProperty) {
        cdkBuilder.labelOptions(labelOptions.let(LabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("8ce99be3c49ed1595befcffabd361835a4fc8766a2558d230bf0664dde9d313a")
      override fun labelOptions(labelOptions: LabelOptionsProperty.Builder.() -> Unit): Unit =
          labelOptions(LabelOptionsProperty(labelOptions))

      override fun rotationAngle(rotationAngle: Number) {
        cdkBuilder.rotationAngle(rotationAngle)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisTickLabelOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisTickLabelOptionsProperty,
    ) : CdkObject(cdkObject), AxisTickLabelOptionsProperty {
      override fun labelOptions(): Any? = unwrap(this).getLabelOptions()

      override fun rotationAngle(): Number? = unwrap(this).getRotationAngle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AxisTickLabelOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AxisTickLabelOptionsProperty):
          AxisTickLabelOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisTickLabelOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisTickLabelOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisTickLabelOptionsProperty
    }
  }

  public interface RangeEndsLabelTypeProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RangeEndsLabelTypeProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.RangeEndsLabelTypeProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.RangeEndsLabelTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RangeEndsLabelTypeProperty,
    ) : CdkObject(cdkObject), RangeEndsLabelTypeProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): RangeEndsLabelTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.RangeEndsLabelTypeProperty):
          RangeEndsLabelTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RangeEndsLabelTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.RangeEndsLabelTypeProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.RangeEndsLabelTypeProperty
    }
  }

  public interface TextConditionalFormatProperty {
    public fun backgroundColor(): Any? = unwrap(this).getBackgroundColor()

    public fun icon(): Any? = unwrap(this).getIcon()

    public fun textColor(): Any? = unwrap(this).getTextColor()

    @CdkDslMarker
    public interface Builder {
      public fun backgroundColor(backgroundColor: IResolvable)

      public fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("306336308b6456886297f016914a966b2f3c17da67b76e57f50895a04e9e6f6e")
      public
          fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit)

      public fun icon(icon: IResolvable)

      public fun icon(icon: ConditionalFormattingIconProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d0b2faa71161b81373a1b460f180a188712445e8762f131fd9a1828037316324")
      public fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit)

      public fun textColor(textColor: IResolvable)

      public fun textColor(textColor: ConditionalFormattingColorProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fa3c5dd5b592669d28711e9dae5d5dbaaa5b0971eac0dac078d65f93d40c798d")
      public fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextConditionalFormatProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextConditionalFormatProperty.builder()

      override fun backgroundColor(backgroundColor: IResolvable) {
        cdkBuilder.backgroundColor(backgroundColor.let(IResolvable::unwrap))
      }

      override fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty) {
        cdkBuilder.backgroundColor(backgroundColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("306336308b6456886297f016914a966b2f3c17da67b76e57f50895a04e9e6f6e")
      override
          fun backgroundColor(backgroundColor: ConditionalFormattingColorProperty.Builder.() -> Unit):
          Unit = backgroundColor(ConditionalFormattingColorProperty(backgroundColor))

      override fun icon(icon: IResolvable) {
        cdkBuilder.icon(icon.let(IResolvable::unwrap))
      }

      override fun icon(icon: ConditionalFormattingIconProperty) {
        cdkBuilder.icon(icon.let(ConditionalFormattingIconProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d0b2faa71161b81373a1b460f180a188712445e8762f131fd9a1828037316324")
      override fun icon(icon: ConditionalFormattingIconProperty.Builder.() -> Unit): Unit =
          icon(ConditionalFormattingIconProperty(icon))

      override fun textColor(textColor: IResolvable) {
        cdkBuilder.textColor(textColor.let(IResolvable::unwrap))
      }

      override fun textColor(textColor: ConditionalFormattingColorProperty) {
        cdkBuilder.textColor(textColor.let(ConditionalFormattingColorProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fa3c5dd5b592669d28711e9dae5d5dbaaa5b0971eac0dac078d65f93d40c798d")
      override fun textColor(textColor: ConditionalFormattingColorProperty.Builder.() -> Unit): Unit
          = textColor(ConditionalFormattingColorProperty(textColor))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextConditionalFormatProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextConditionalFormatProperty,
    ) : CdkObject(cdkObject), TextConditionalFormatProperty {
      override fun backgroundColor(): Any? = unwrap(this).getBackgroundColor()

      override fun icon(): Any? = unwrap(this).getIcon()

      override fun textColor(): Any? = unwrap(this).getTextColor()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TextConditionalFormatProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TextConditionalFormatProperty):
          TextConditionalFormatProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TextConditionalFormatProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextConditionalFormatProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TextConditionalFormatProperty
    }
  }

  public interface WaterfallChartSortConfigurationProperty {
    public fun breakdownItemsLimit(): Any? = unwrap(this).getBreakdownItemsLimit()

    public fun categorySort(): Any? = unwrap(this).getCategorySort()

    @CdkDslMarker
    public interface Builder {
      public fun breakdownItemsLimit(breakdownItemsLimit: IResolvable)

      public fun breakdownItemsLimit(breakdownItemsLimit: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ec823d122c4a00b01646d162b74d041c7025ebd633f345d3582fed3ee9e75737")
      public
          fun breakdownItemsLimit(breakdownItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun categorySort(categorySort: IResolvable)

      public fun categorySort(categorySort: List<Any>)

      public fun categorySort(vararg categorySort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartSortConfigurationProperty.builder()

      override fun breakdownItemsLimit(breakdownItemsLimit: IResolvable) {
        cdkBuilder.breakdownItemsLimit(breakdownItemsLimit.let(IResolvable::unwrap))
      }

      override fun breakdownItemsLimit(breakdownItemsLimit: ItemsLimitConfigurationProperty) {
        cdkBuilder.breakdownItemsLimit(breakdownItemsLimit.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("ec823d122c4a00b01646d162b74d041c7025ebd633f345d3582fed3ee9e75737")
      override
          fun breakdownItemsLimit(breakdownItemsLimit: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit = breakdownItemsLimit(ItemsLimitConfigurationProperty(breakdownItemsLimit))

      override fun categorySort(categorySort: IResolvable) {
        cdkBuilder.categorySort(categorySort.let(IResolvable::unwrap))
      }

      override fun categorySort(categorySort: List<Any>) {
        cdkBuilder.categorySort(categorySort)
      }

      override fun categorySort(vararg categorySort: Any): Unit =
          categorySort(categorySort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartSortConfigurationProperty,
    ) : CdkObject(cdkObject), WaterfallChartSortConfigurationProperty {
      override fun breakdownItemsLimit(): Any? = unwrap(this).getBreakdownItemsLimit()

      override fun categorySort(): Any? = unwrap(this).getCategorySort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          WaterfallChartSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartSortConfigurationProperty):
          WaterfallChartSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WaterfallChartSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartSortConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WaterfallChartSortConfigurationProperty
    }
  }

  public interface ConditionalFormattingCustomIconOptionsProperty {
    public fun icon(): String? = unwrap(this).getIcon()

    public fun unicodeIcon(): String? = unwrap(this).getUnicodeIcon()

    @CdkDslMarker
    public interface Builder {
      public fun icon(icon: String)

      public fun unicodeIcon(unicodeIcon: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconOptionsProperty.builder()

      override fun icon(icon: String) {
        cdkBuilder.icon(icon)
      }

      override fun unicodeIcon(unicodeIcon: String) {
        cdkBuilder.unicodeIcon(unicodeIcon)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconOptionsProperty,
    ) : CdkObject(cdkObject), ConditionalFormattingCustomIconOptionsProperty {
      override fun icon(): String? = unwrap(this).getIcon()

      override fun unicodeIcon(): String? = unwrap(this).getUnicodeIcon()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          ConditionalFormattingCustomIconOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconOptionsProperty):
          ConditionalFormattingCustomIconOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ConditionalFormattingCustomIconOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ConditionalFormattingCustomIconOptionsProperty
    }
  }

  public interface TreeMapSortConfigurationProperty {
    public fun treeMapGroupItemsLimitConfiguration(): Any? =
        unwrap(this).getTreeMapGroupItemsLimitConfiguration()

    public fun treeMapSort(): Any? = unwrap(this).getTreeMapSort()

    @CdkDslMarker
    public interface Builder {
      public
          fun treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration: IResolvable)

      public
          fun treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1cce85074845ff085c4177f45e46befadcac0eed09ab52483cfcd753e6392bcc")
      public
          fun treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun treeMapSort(treeMapSort: IResolvable)

      public fun treeMapSort(treeMapSort: List<Any>)

      public fun treeMapSort(vararg treeMapSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapSortConfigurationProperty.builder()

      override
          fun treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration: IResolvable) {
        cdkBuilder.treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration.let(IResolvable::unwrap))
      }

      override
          fun treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1cce85074845ff085c4177f45e46befadcac0eed09ab52483cfcd753e6392bcc")
      override
          fun treeMapGroupItemsLimitConfiguration(treeMapGroupItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          treeMapGroupItemsLimitConfiguration(ItemsLimitConfigurationProperty(treeMapGroupItemsLimitConfiguration))

      override fun treeMapSort(treeMapSort: IResolvable) {
        cdkBuilder.treeMapSort(treeMapSort.let(IResolvable::unwrap))
      }

      override fun treeMapSort(treeMapSort: List<Any>) {
        cdkBuilder.treeMapSort(treeMapSort)
      }

      override fun treeMapSort(vararg treeMapSort: Any): Unit = treeMapSort(treeMapSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapSortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapSortConfigurationProperty,
    ) : CdkObject(cdkObject), TreeMapSortConfigurationProperty {
      override fun treeMapGroupItemsLimitConfiguration(): Any? =
          unwrap(this).getTreeMapGroupItemsLimitConfiguration()

      override fun treeMapSort(): Any? = unwrap(this).getTreeMapSort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TreeMapSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapSortConfigurationProperty):
          TreeMapSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TreeMapSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapSortConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TreeMapSortConfigurationProperty
    }
  }

  public interface TableConfigurationProperty {
    public fun fieldOptions(): Any? = unwrap(this).getFieldOptions()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun paginatedReportOptions(): Any? = unwrap(this).getPaginatedReportOptions()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun tableInlineVisualizations(): Any? = unwrap(this).getTableInlineVisualizations()

    public fun tableOptions(): Any? = unwrap(this).getTableOptions()

    public fun totalOptions(): Any? = unwrap(this).getTotalOptions()

    @CdkDslMarker
    public interface Builder {
      public fun fieldOptions(fieldOptions: IResolvable)

      public fun fieldOptions(fieldOptions: TableFieldOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9e4fea0804a910454a40d8f728cb013517e9e7bd6f9b4e6b721dcaf33758e8c6")
      public fun fieldOptions(fieldOptions: TableFieldOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: TableFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7d600ad3833c0b9c0742c5f19047ee5d65c64efabf8ad5e0e7e078360a808b09")
      public fun fieldWells(fieldWells: TableFieldWellsProperty.Builder.() -> Unit)

      public fun paginatedReportOptions(paginatedReportOptions: IResolvable)

      public fun paginatedReportOptions(paginatedReportOptions: TablePaginatedReportOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b2d53c527fe1b90b971980e2d36d8ef173a53fc8ec0e79e3a2c755630bc5398e")
      public
          fun paginatedReportOptions(paginatedReportOptions: TablePaginatedReportOptionsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: TableSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a39a792c1334c501011ab5aba86ccc35c99f73b862e453a1c5c5bc71ff569aa0")
      public
          fun sortConfiguration(sortConfiguration: TableSortConfigurationProperty.Builder.() -> Unit)

      public fun tableInlineVisualizations(tableInlineVisualizations: IResolvable)

      public fun tableInlineVisualizations(tableInlineVisualizations: List<Any>)

      public fun tableInlineVisualizations(vararg tableInlineVisualizations: Any)

      public fun tableOptions(tableOptions: IResolvable)

      public fun tableOptions(tableOptions: TableOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7464a80dde1c78a175d4dc8b2bd2a638083547e2e033e4970106f2f45578f29f")
      public fun tableOptions(tableOptions: TableOptionsProperty.Builder.() -> Unit)

      public fun totalOptions(totalOptions: IResolvable)

      public fun totalOptions(totalOptions: TotalOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2e53d033bfee706760d757d658f676f52ee1f76fa387fb8cf880e7a012496243")
      public fun totalOptions(totalOptions: TotalOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConfigurationProperty.builder()

      override fun fieldOptions(fieldOptions: IResolvable) {
        cdkBuilder.fieldOptions(fieldOptions.let(IResolvable::unwrap))
      }

      override fun fieldOptions(fieldOptions: TableFieldOptionsProperty) {
        cdkBuilder.fieldOptions(fieldOptions.let(TableFieldOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9e4fea0804a910454a40d8f728cb013517e9e7bd6f9b4e6b721dcaf33758e8c6")
      override fun fieldOptions(fieldOptions: TableFieldOptionsProperty.Builder.() -> Unit): Unit =
          fieldOptions(TableFieldOptionsProperty(fieldOptions))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: TableFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(TableFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7d600ad3833c0b9c0742c5f19047ee5d65c64efabf8ad5e0e7e078360a808b09")
      override fun fieldWells(fieldWells: TableFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(TableFieldWellsProperty(fieldWells))

      override fun paginatedReportOptions(paginatedReportOptions: IResolvable) {
        cdkBuilder.paginatedReportOptions(paginatedReportOptions.let(IResolvable::unwrap))
      }

      override
          fun paginatedReportOptions(paginatedReportOptions: TablePaginatedReportOptionsProperty) {
        cdkBuilder.paginatedReportOptions(paginatedReportOptions.let(TablePaginatedReportOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b2d53c527fe1b90b971980e2d36d8ef173a53fc8ec0e79e3a2c755630bc5398e")
      override
          fun paginatedReportOptions(paginatedReportOptions: TablePaginatedReportOptionsProperty.Builder.() -> Unit):
          Unit = paginatedReportOptions(TablePaginatedReportOptionsProperty(paginatedReportOptions))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: TableSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(TableSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a39a792c1334c501011ab5aba86ccc35c99f73b862e453a1c5c5bc71ff569aa0")
      override
          fun sortConfiguration(sortConfiguration: TableSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(TableSortConfigurationProperty(sortConfiguration))

      override fun tableInlineVisualizations(tableInlineVisualizations: IResolvable) {
        cdkBuilder.tableInlineVisualizations(tableInlineVisualizations.let(IResolvable::unwrap))
      }

      override fun tableInlineVisualizations(tableInlineVisualizations: List<Any>) {
        cdkBuilder.tableInlineVisualizations(tableInlineVisualizations)
      }

      override fun tableInlineVisualizations(vararg tableInlineVisualizations: Any): Unit =
          tableInlineVisualizations(tableInlineVisualizations.toList())

      override fun tableOptions(tableOptions: IResolvable) {
        cdkBuilder.tableOptions(tableOptions.let(IResolvable::unwrap))
      }

      override fun tableOptions(tableOptions: TableOptionsProperty) {
        cdkBuilder.tableOptions(tableOptions.let(TableOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7464a80dde1c78a175d4dc8b2bd2a638083547e2e033e4970106f2f45578f29f")
      override fun tableOptions(tableOptions: TableOptionsProperty.Builder.() -> Unit): Unit =
          tableOptions(TableOptionsProperty(tableOptions))

      override fun totalOptions(totalOptions: IResolvable) {
        cdkBuilder.totalOptions(totalOptions.let(IResolvable::unwrap))
      }

      override fun totalOptions(totalOptions: TotalOptionsProperty) {
        cdkBuilder.totalOptions(totalOptions.let(TotalOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2e53d033bfee706760d757d658f676f52ee1f76fa387fb8cf880e7a012496243")
      override fun totalOptions(totalOptions: TotalOptionsProperty.Builder.() -> Unit): Unit =
          totalOptions(TotalOptionsProperty(totalOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConfigurationProperty,
    ) : CdkObject(cdkObject), TableConfigurationProperty {
      override fun fieldOptions(): Any? = unwrap(this).getFieldOptions()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun paginatedReportOptions(): Any? = unwrap(this).getPaginatedReportOptions()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun tableInlineVisualizations(): Any? = unwrap(this).getTableInlineVisualizations()

      override fun tableOptions(): Any? = unwrap(this).getTableOptions()

      override fun totalOptions(): Any? = unwrap(this).getTotalOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TableConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableConfigurationProperty):
          TableConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableConfigurationProperty
    }
  }

  public interface NumericSeparatorConfigurationProperty {
    public fun decimalSeparator(): String? = unwrap(this).getDecimalSeparator()

    public fun thousandsSeparator(): Any? = unwrap(this).getThousandsSeparator()

    @CdkDslMarker
    public interface Builder {
      public fun decimalSeparator(decimalSeparator: String)

      public fun thousandsSeparator(thousandsSeparator: IResolvable)

      public fun thousandsSeparator(thousandsSeparator: ThousandSeparatorOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a7915f934bfb6cc586ec3e4fcc6b1fbf0fb5b39244b77aad8a37184acff00ed8")
      public
          fun thousandsSeparator(thousandsSeparator: ThousandSeparatorOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericSeparatorConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericSeparatorConfigurationProperty.builder()

      override fun decimalSeparator(decimalSeparator: String) {
        cdkBuilder.decimalSeparator(decimalSeparator)
      }

      override fun thousandsSeparator(thousandsSeparator: IResolvable) {
        cdkBuilder.thousandsSeparator(thousandsSeparator.let(IResolvable::unwrap))
      }

      override fun thousandsSeparator(thousandsSeparator: ThousandSeparatorOptionsProperty) {
        cdkBuilder.thousandsSeparator(thousandsSeparator.let(ThousandSeparatorOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a7915f934bfb6cc586ec3e4fcc6b1fbf0fb5b39244b77aad8a37184acff00ed8")
      override
          fun thousandsSeparator(thousandsSeparator: ThousandSeparatorOptionsProperty.Builder.() -> Unit):
          Unit = thousandsSeparator(ThousandSeparatorOptionsProperty(thousandsSeparator))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericSeparatorConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericSeparatorConfigurationProperty,
    ) : CdkObject(cdkObject), NumericSeparatorConfigurationProperty {
      override fun decimalSeparator(): String? = unwrap(this).getDecimalSeparator()

      override fun thousandsSeparator(): Any? = unwrap(this).getThousandsSeparator()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          NumericSeparatorConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.NumericSeparatorConfigurationProperty):
          NumericSeparatorConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: NumericSeparatorConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericSeparatorConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.NumericSeparatorConfigurationProperty
    }
  }

  public interface AxisDisplayOptionsProperty {
    public fun axisLineVisibility(): String? = unwrap(this).getAxisLineVisibility()

    public fun axisOffset(): String? = unwrap(this).getAxisOffset()

    public fun dataOptions(): Any? = unwrap(this).getDataOptions()

    public fun gridLineVisibility(): String? = unwrap(this).getGridLineVisibility()

    public fun scrollbarOptions(): Any? = unwrap(this).getScrollbarOptions()

    public fun tickLabelOptions(): Any? = unwrap(this).getTickLabelOptions()

    @CdkDslMarker
    public interface Builder {
      public fun axisLineVisibility(axisLineVisibility: String)

      public fun axisOffset(axisOffset: String)

      public fun dataOptions(dataOptions: IResolvable)

      public fun dataOptions(dataOptions: AxisDataOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fd23079089e1bead2e8d86887d23373b142e569f8e991b238f9f619e185d11ed")
      public fun dataOptions(dataOptions: AxisDataOptionsProperty.Builder.() -> Unit)

      public fun gridLineVisibility(gridLineVisibility: String)

      public fun scrollbarOptions(scrollbarOptions: IResolvable)

      public fun scrollbarOptions(scrollbarOptions: ScrollBarOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bea46a906c5f2a29243fbf88f840709dfe5dc98415063cd2a5801d80100c56af")
      public fun scrollbarOptions(scrollbarOptions: ScrollBarOptionsProperty.Builder.() -> Unit)

      public fun tickLabelOptions(tickLabelOptions: IResolvable)

      public fun tickLabelOptions(tickLabelOptions: AxisTickLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f6d4c4d5a0853628099dcbb0a43f188266e2a8e5d0a9025139dbd2803460f10")
      public fun tickLabelOptions(tickLabelOptions: AxisTickLabelOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayOptionsProperty.builder()

      override fun axisLineVisibility(axisLineVisibility: String) {
        cdkBuilder.axisLineVisibility(axisLineVisibility)
      }

      override fun axisOffset(axisOffset: String) {
        cdkBuilder.axisOffset(axisOffset)
      }

      override fun dataOptions(dataOptions: IResolvable) {
        cdkBuilder.dataOptions(dataOptions.let(IResolvable::unwrap))
      }

      override fun dataOptions(dataOptions: AxisDataOptionsProperty) {
        cdkBuilder.dataOptions(dataOptions.let(AxisDataOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fd23079089e1bead2e8d86887d23373b142e569f8e991b238f9f619e185d11ed")
      override fun dataOptions(dataOptions: AxisDataOptionsProperty.Builder.() -> Unit): Unit =
          dataOptions(AxisDataOptionsProperty(dataOptions))

      override fun gridLineVisibility(gridLineVisibility: String) {
        cdkBuilder.gridLineVisibility(gridLineVisibility)
      }

      override fun scrollbarOptions(scrollbarOptions: IResolvable) {
        cdkBuilder.scrollbarOptions(scrollbarOptions.let(IResolvable::unwrap))
      }

      override fun scrollbarOptions(scrollbarOptions: ScrollBarOptionsProperty) {
        cdkBuilder.scrollbarOptions(scrollbarOptions.let(ScrollBarOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bea46a906c5f2a29243fbf88f840709dfe5dc98415063cd2a5801d80100c56af")
      override fun scrollbarOptions(scrollbarOptions: ScrollBarOptionsProperty.Builder.() -> Unit):
          Unit = scrollbarOptions(ScrollBarOptionsProperty(scrollbarOptions))

      override fun tickLabelOptions(tickLabelOptions: IResolvable) {
        cdkBuilder.tickLabelOptions(tickLabelOptions.let(IResolvable::unwrap))
      }

      override fun tickLabelOptions(tickLabelOptions: AxisTickLabelOptionsProperty) {
        cdkBuilder.tickLabelOptions(tickLabelOptions.let(AxisTickLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f6d4c4d5a0853628099dcbb0a43f188266e2a8e5d0a9025139dbd2803460f10")
      override
          fun tickLabelOptions(tickLabelOptions: AxisTickLabelOptionsProperty.Builder.() -> Unit):
          Unit = tickLabelOptions(AxisTickLabelOptionsProperty(tickLabelOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayOptionsProperty,
    ) : CdkObject(cdkObject), AxisDisplayOptionsProperty {
      override fun axisLineVisibility(): String? = unwrap(this).getAxisLineVisibility()

      override fun axisOffset(): String? = unwrap(this).getAxisOffset()

      override fun dataOptions(): Any? = unwrap(this).getDataOptions()

      override fun gridLineVisibility(): String? = unwrap(this).getGridLineVisibility()

      override fun scrollbarOptions(): Any? = unwrap(this).getScrollbarOptions()

      override fun tickLabelOptions(): Any? = unwrap(this).getTickLabelOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): AxisDisplayOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayOptionsProperty):
          AxisDisplayOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: AxisDisplayOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.AxisDisplayOptionsProperty
    }
  }

  public interface FreeFormLayoutCanvasSizeOptionsProperty {
    public fun screenCanvasSizeOptions(): Any? = unwrap(this).getScreenCanvasSizeOptions()

    @CdkDslMarker
    public interface Builder {
      public fun screenCanvasSizeOptions(screenCanvasSizeOptions: IResolvable)

      public
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: FreeFormLayoutScreenCanvasSizeOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c6b29e1aa029437d6f12d530cd587a1c90a2a894cd6427b0c818cc8a51e2dc20")
      public
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: FreeFormLayoutScreenCanvasSizeOptionsProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutCanvasSizeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutCanvasSizeOptionsProperty.builder()

      override fun screenCanvasSizeOptions(screenCanvasSizeOptions: IResolvable) {
        cdkBuilder.screenCanvasSizeOptions(screenCanvasSizeOptions.let(IResolvable::unwrap))
      }

      override
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: FreeFormLayoutScreenCanvasSizeOptionsProperty) {
        cdkBuilder.screenCanvasSizeOptions(screenCanvasSizeOptions.let(FreeFormLayoutScreenCanvasSizeOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c6b29e1aa029437d6f12d530cd587a1c90a2a894cd6427b0c818cc8a51e2dc20")
      override
          fun screenCanvasSizeOptions(screenCanvasSizeOptions: FreeFormLayoutScreenCanvasSizeOptionsProperty.Builder.() -> Unit):
          Unit =
          screenCanvasSizeOptions(FreeFormLayoutScreenCanvasSizeOptionsProperty(screenCanvasSizeOptions))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutCanvasSizeOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutCanvasSizeOptionsProperty,
    ) : CdkObject(cdkObject), FreeFormLayoutCanvasSizeOptionsProperty {
      override fun screenCanvasSizeOptions(): Any? = unwrap(this).getScreenCanvasSizeOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          FreeFormLayoutCanvasSizeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutCanvasSizeOptionsProperty):
          FreeFormLayoutCanvasSizeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FreeFormLayoutCanvasSizeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutCanvasSizeOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FreeFormLayoutCanvasSizeOptionsProperty
    }
  }

  public interface BodySectionConfigurationProperty {
    public fun content(): Any

    public fun pageBreakConfiguration(): Any? = unwrap(this).getPageBreakConfiguration()

    public fun sectionId(): String

    public fun style(): Any? = unwrap(this).getStyle()

    @CdkDslMarker
    public interface Builder {
      public fun content(content: IResolvable)

      public fun content(content: BodySectionContentProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("710c153a1dd78b4789bd13d73bdaf2e1c6e22692315afce6d1eff6990623178b")
      public fun content(content: BodySectionContentProperty.Builder.() -> Unit)

      public fun pageBreakConfiguration(pageBreakConfiguration: IResolvable)

      public
          fun pageBreakConfiguration(pageBreakConfiguration: SectionPageBreakConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6552a4e573a0fa5489538249cdd9badd802ab132b0821b2a2dab64c6519b3aba")
      public
          fun pageBreakConfiguration(pageBreakConfiguration: SectionPageBreakConfigurationProperty.Builder.() -> Unit)

      public fun sectionId(sectionId: String)

      public fun style(style: IResolvable)

      public fun style(style: SectionStyleProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5f44c3aac5d36bb3937b5d0272b8b4d11fcdfec66061780c78a3b65ab4c072d2")
      public fun style(style: SectionStyleProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionConfigurationProperty.builder()

      override fun content(content: IResolvable) {
        cdkBuilder.content(content.let(IResolvable::unwrap))
      }

      override fun content(content: BodySectionContentProperty) {
        cdkBuilder.content(content.let(BodySectionContentProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("710c153a1dd78b4789bd13d73bdaf2e1c6e22692315afce6d1eff6990623178b")
      override fun content(content: BodySectionContentProperty.Builder.() -> Unit): Unit =
          content(BodySectionContentProperty(content))

      override fun pageBreakConfiguration(pageBreakConfiguration: IResolvable) {
        cdkBuilder.pageBreakConfiguration(pageBreakConfiguration.let(IResolvable::unwrap))
      }

      override
          fun pageBreakConfiguration(pageBreakConfiguration: SectionPageBreakConfigurationProperty) {
        cdkBuilder.pageBreakConfiguration(pageBreakConfiguration.let(SectionPageBreakConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6552a4e573a0fa5489538249cdd9badd802ab132b0821b2a2dab64c6519b3aba")
      override
          fun pageBreakConfiguration(pageBreakConfiguration: SectionPageBreakConfigurationProperty.Builder.() -> Unit):
          Unit =
          pageBreakConfiguration(SectionPageBreakConfigurationProperty(pageBreakConfiguration))

      override fun sectionId(sectionId: String) {
        cdkBuilder.sectionId(sectionId)
      }

      override fun style(style: IResolvable) {
        cdkBuilder.style(style.let(IResolvable::unwrap))
      }

      override fun style(style: SectionStyleProperty) {
        cdkBuilder.style(style.let(SectionStyleProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5f44c3aac5d36bb3937b5d0272b8b4d11fcdfec66061780c78a3b65ab4c072d2")
      override fun style(style: SectionStyleProperty.Builder.() -> Unit): Unit =
          style(SectionStyleProperty(style))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionConfigurationProperty,
    ) : CdkObject(cdkObject), BodySectionConfigurationProperty {
      override fun content(): Any = unwrap(this).getContent()

      override fun pageBreakConfiguration(): Any? = unwrap(this).getPageBreakConfiguration()

      override fun sectionId(): String = unwrap(this).getSectionId()

      override fun style(): Any? = unwrap(this).getStyle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): BodySectionConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionConfigurationProperty):
          BodySectionConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: BodySectionConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.BodySectionConfigurationProperty
    }
  }

  public interface RadarChartConfigurationProperty {
    public fun alternateBandColorsVisibility(): String? =
        unwrap(this).getAlternateBandColorsVisibility()

    public fun alternateBandEvenColor(): String? = unwrap(this).getAlternateBandEvenColor()

    public fun alternateBandOddColor(): String? = unwrap(this).getAlternateBandOddColor()

    public fun axesRangeScale(): String? = unwrap(this).getAxesRangeScale()

    public fun baseSeriesSettings(): Any? = unwrap(this).getBaseSeriesSettings()

    public fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    public fun colorAxis(): Any? = unwrap(this).getColorAxis()

    public fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun legend(): Any? = unwrap(this).getLegend()

    public fun shape(): String? = unwrap(this).getShape()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun startAngle(): Number? = unwrap(this).getStartAngle()

    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    @CdkDslMarker
    public interface Builder {
      public fun alternateBandColorsVisibility(alternateBandColorsVisibility: String)

      public fun alternateBandEvenColor(alternateBandEvenColor: String)

      public fun alternateBandOddColor(alternateBandOddColor: String)

      public fun axesRangeScale(axesRangeScale: String)

      public fun baseSeriesSettings(baseSeriesSettings: IResolvable)

      public fun baseSeriesSettings(baseSeriesSettings: RadarChartSeriesSettingsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("68f7447234ab09a01c91a01c58af0995f876b7298095777f68d9efded3d640e2")
      public
          fun baseSeriesSettings(baseSeriesSettings: RadarChartSeriesSettingsProperty.Builder.() -> Unit)

      public fun categoryAxis(categoryAxis: IResolvable)

      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fa6185b4234ded9f7644b42b219cbe3cbb25e2a7d6ccb482f0a808d8e150548e")
      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b5b501ef562fd7c564cde0794c4e64bba1c604cd1d7e30c33fb6c8310b27cd58")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun colorAxis(colorAxis: IResolvable)

      public fun colorAxis(colorAxis: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2bf1fe327101b7f80670aa9eea4ecc18d576791a6eb9fc2fc2945820d424b4f")
      public fun colorAxis(colorAxis: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun colorLabelOptions(colorLabelOptions: IResolvable)

      public fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e58248611e909a30cb129f342380e4a3896c340241629fd120f5deac048e33b3")
      public
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: RadarChartFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4433eefdf9b507ca75e11af5510c874c333c748e33e40d75a785ad8ee7ca3532")
      public fun fieldWells(fieldWells: RadarChartFieldWellsProperty.Builder.() -> Unit)

      public fun legend(legend: IResolvable)

      public fun legend(legend: LegendOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f87fd8d9627cea3b4599e300d5671e5add440e15743ab45435ef78e5274b2d16")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      public fun shape(shape: String)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: RadarChartSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b6411fb6738e6c3ad77bb36662ece7383478f427b88c12005b2f554b9bcfabf3")
      public
          fun sortConfiguration(sortConfiguration: RadarChartSortConfigurationProperty.Builder.() -> Unit)

      public fun startAngle(startAngle: Number)

      public fun visualPalette(visualPalette: IResolvable)

      public fun visualPalette(visualPalette: VisualPaletteProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("33fb98f09887e1ad8583ad391d63566bb80037cb9144ef67cf82da6d6fc0923c")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartConfigurationProperty.builder()

      override fun alternateBandColorsVisibility(alternateBandColorsVisibility: String) {
        cdkBuilder.alternateBandColorsVisibility(alternateBandColorsVisibility)
      }

      override fun alternateBandEvenColor(alternateBandEvenColor: String) {
        cdkBuilder.alternateBandEvenColor(alternateBandEvenColor)
      }

      override fun alternateBandOddColor(alternateBandOddColor: String) {
        cdkBuilder.alternateBandOddColor(alternateBandOddColor)
      }

      override fun axesRangeScale(axesRangeScale: String) {
        cdkBuilder.axesRangeScale(axesRangeScale)
      }

      override fun baseSeriesSettings(baseSeriesSettings: IResolvable) {
        cdkBuilder.baseSeriesSettings(baseSeriesSettings.let(IResolvable::unwrap))
      }

      override fun baseSeriesSettings(baseSeriesSettings: RadarChartSeriesSettingsProperty) {
        cdkBuilder.baseSeriesSettings(baseSeriesSettings.let(RadarChartSeriesSettingsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("68f7447234ab09a01c91a01c58af0995f876b7298095777f68d9efded3d640e2")
      override
          fun baseSeriesSettings(baseSeriesSettings: RadarChartSeriesSettingsProperty.Builder.() -> Unit):
          Unit = baseSeriesSettings(RadarChartSeriesSettingsProperty(baseSeriesSettings))

      override fun categoryAxis(categoryAxis: IResolvable) {
        cdkBuilder.categoryAxis(categoryAxis.let(IResolvable::unwrap))
      }

      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty) {
        cdkBuilder.categoryAxis(categoryAxis.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("fa6185b4234ded9f7644b42b219cbe3cbb25e2a7d6ccb482f0a808d8e150548e")
      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          categoryAxis(AxisDisplayOptionsProperty(categoryAxis))

      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b5b501ef562fd7c564cde0794c4e64bba1c604cd1d7e30c33fb6c8310b27cd58")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      override fun colorAxis(colorAxis: IResolvable) {
        cdkBuilder.colorAxis(colorAxis.let(IResolvable::unwrap))
      }

      override fun colorAxis(colorAxis: AxisDisplayOptionsProperty) {
        cdkBuilder.colorAxis(colorAxis.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d2bf1fe327101b7f80670aa9eea4ecc18d576791a6eb9fc2fc2945820d424b4f")
      override fun colorAxis(colorAxis: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          colorAxis(AxisDisplayOptionsProperty(colorAxis))

      override fun colorLabelOptions(colorLabelOptions: IResolvable) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(IResolvable::unwrap))
      }

      override fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e58248611e909a30cb129f342380e4a3896c340241629fd120f5deac048e33b3")
      override
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = colorLabelOptions(ChartAxisLabelOptionsProperty(colorLabelOptions))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: RadarChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(RadarChartFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4433eefdf9b507ca75e11af5510c874c333c748e33e40d75a785ad8ee7ca3532")
      override fun fieldWells(fieldWells: RadarChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(RadarChartFieldWellsProperty(fieldWells))

      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f87fd8d9627cea3b4599e300d5671e5add440e15743ab45435ef78e5274b2d16")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      override fun shape(shape: String) {
        cdkBuilder.shape(shape)
      }

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: RadarChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(RadarChartSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b6411fb6738e6c3ad77bb36662ece7383478f427b88c12005b2f554b9bcfabf3")
      override
          fun sortConfiguration(sortConfiguration: RadarChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(RadarChartSortConfigurationProperty(sortConfiguration))

      override fun startAngle(startAngle: Number) {
        cdkBuilder.startAngle(startAngle)
      }

      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("33fb98f09887e1ad8583ad391d63566bb80037cb9144ef67cf82da6d6fc0923c")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartConfigurationProperty,
    ) : CdkObject(cdkObject), RadarChartConfigurationProperty {
      override fun alternateBandColorsVisibility(): String? =
          unwrap(this).getAlternateBandColorsVisibility()

      override fun alternateBandEvenColor(): String? = unwrap(this).getAlternateBandEvenColor()

      override fun alternateBandOddColor(): String? = unwrap(this).getAlternateBandOddColor()

      override fun axesRangeScale(): String? = unwrap(this).getAxesRangeScale()

      override fun baseSeriesSettings(): Any? = unwrap(this).getBaseSeriesSettings()

      override fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      override fun colorAxis(): Any? = unwrap(this).getColorAxis()

      override fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun legend(): Any? = unwrap(this).getLegend()

      override fun shape(): String? = unwrap(this).getShape()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun startAngle(): Number? = unwrap(this).getStartAngle()

      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): RadarChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartConfigurationProperty):
          RadarChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: RadarChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.RadarChartConfigurationProperty
    }
  }

  public interface SheetTextBoxProperty {
    public fun content(): String? = unwrap(this).getContent()

    public fun sheetTextBoxId(): String

    @CdkDslMarker
    public interface Builder {
      public fun content(content: String)

      public fun sheetTextBoxId(sheetTextBoxId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetTextBoxProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetTextBoxProperty.builder()

      override fun content(content: String) {
        cdkBuilder.content(content)
      }

      override fun sheetTextBoxId(sheetTextBoxId: String) {
        cdkBuilder.sheetTextBoxId(sheetTextBoxId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetTextBoxProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetTextBoxProperty,
    ) : CdkObject(cdkObject), SheetTextBoxProperty {
      override fun content(): String? = unwrap(this).getContent()

      override fun sheetTextBoxId(): String = unwrap(this).getSheetTextBoxId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SheetTextBoxProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SheetTextBoxProperty):
          SheetTextBoxProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetTextBoxProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetTextBoxProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetTextBoxProperty
    }
  }

  public interface ColumnHierarchyProperty {
    public fun dateTimeHierarchy(): Any? = unwrap(this).getDateTimeHierarchy()

    public fun explicitHierarchy(): Any? = unwrap(this).getExplicitHierarchy()

    public fun predefinedHierarchy(): Any? = unwrap(this).getPredefinedHierarchy()

    @CdkDslMarker
    public interface Builder {
      public fun dateTimeHierarchy(dateTimeHierarchy: IResolvable)

      public fun dateTimeHierarchy(dateTimeHierarchy: DateTimeHierarchyProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e1c13941bb9b16164bc0368cb053d311f9c669fc494f20ff3d495f14769f6526")
      public fun dateTimeHierarchy(dateTimeHierarchy: DateTimeHierarchyProperty.Builder.() -> Unit)

      public fun explicitHierarchy(explicitHierarchy: IResolvable)

      public fun explicitHierarchy(explicitHierarchy: ExplicitHierarchyProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c0377eb9bac254e0fb294e87c6f4613316dc55d605a135ff9240959aacc250b8")
      public fun explicitHierarchy(explicitHierarchy: ExplicitHierarchyProperty.Builder.() -> Unit)

      public fun predefinedHierarchy(predefinedHierarchy: IResolvable)

      public fun predefinedHierarchy(predefinedHierarchy: PredefinedHierarchyProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d077c1cc7572889da7eb9a8459548467b69b338f8c560d8443368fa23883c748")
      public
          fun predefinedHierarchy(predefinedHierarchy: PredefinedHierarchyProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnHierarchyProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnHierarchyProperty.builder()

      override fun dateTimeHierarchy(dateTimeHierarchy: IResolvable) {
        cdkBuilder.dateTimeHierarchy(dateTimeHierarchy.let(IResolvable::unwrap))
      }

      override fun dateTimeHierarchy(dateTimeHierarchy: DateTimeHierarchyProperty) {
        cdkBuilder.dateTimeHierarchy(dateTimeHierarchy.let(DateTimeHierarchyProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e1c13941bb9b16164bc0368cb053d311f9c669fc494f20ff3d495f14769f6526")
      override
          fun dateTimeHierarchy(dateTimeHierarchy: DateTimeHierarchyProperty.Builder.() -> Unit):
          Unit = dateTimeHierarchy(DateTimeHierarchyProperty(dateTimeHierarchy))

      override fun explicitHierarchy(explicitHierarchy: IResolvable) {
        cdkBuilder.explicitHierarchy(explicitHierarchy.let(IResolvable::unwrap))
      }

      override fun explicitHierarchy(explicitHierarchy: ExplicitHierarchyProperty) {
        cdkBuilder.explicitHierarchy(explicitHierarchy.let(ExplicitHierarchyProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("c0377eb9bac254e0fb294e87c6f4613316dc55d605a135ff9240959aacc250b8")
      override
          fun explicitHierarchy(explicitHierarchy: ExplicitHierarchyProperty.Builder.() -> Unit):
          Unit = explicitHierarchy(ExplicitHierarchyProperty(explicitHierarchy))

      override fun predefinedHierarchy(predefinedHierarchy: IResolvable) {
        cdkBuilder.predefinedHierarchy(predefinedHierarchy.let(IResolvable::unwrap))
      }

      override fun predefinedHierarchy(predefinedHierarchy: PredefinedHierarchyProperty) {
        cdkBuilder.predefinedHierarchy(predefinedHierarchy.let(PredefinedHierarchyProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("d077c1cc7572889da7eb9a8459548467b69b338f8c560d8443368fa23883c748")
      override
          fun predefinedHierarchy(predefinedHierarchy: PredefinedHierarchyProperty.Builder.() -> Unit):
          Unit = predefinedHierarchy(PredefinedHierarchyProperty(predefinedHierarchy))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnHierarchyProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnHierarchyProperty,
    ) : CdkObject(cdkObject), ColumnHierarchyProperty {
      override fun dateTimeHierarchy(): Any? = unwrap(this).getDateTimeHierarchy()

      override fun explicitHierarchy(): Any? = unwrap(this).getExplicitHierarchy()

      override fun predefinedHierarchy(): Any? = unwrap(this).getPredefinedHierarchy()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnHierarchyProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnHierarchyProperty):
          ColumnHierarchyProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnHierarchyProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnHierarchyProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnHierarchyProperty
    }
  }

  public interface FilterScopeConfigurationProperty {
    public fun allSheets(): Any? = unwrap(this).getAllSheets()

    public fun selectedSheets(): Any? = unwrap(this).getSelectedSheets()

    @CdkDslMarker
    public interface Builder {
      public fun allSheets(allSheets: Any)

      public fun selectedSheets(selectedSheets: IResolvable)

      public fun selectedSheets(selectedSheets: SelectedSheetsFilterScopeConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2456c8fbe8d90a38f186d3c9110ff8fd9c251994fd800f0b650e0b4f25930001")
      public
          fun selectedSheets(selectedSheets: SelectedSheetsFilterScopeConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterScopeConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterScopeConfigurationProperty.builder()

      override fun allSheets(allSheets: Any) {
        cdkBuilder.allSheets(allSheets)
      }

      override fun selectedSheets(selectedSheets: IResolvable) {
        cdkBuilder.selectedSheets(selectedSheets.let(IResolvable::unwrap))
      }

      override fun selectedSheets(selectedSheets: SelectedSheetsFilterScopeConfigurationProperty) {
        cdkBuilder.selectedSheets(selectedSheets.let(SelectedSheetsFilterScopeConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("2456c8fbe8d90a38f186d3c9110ff8fd9c251994fd800f0b650e0b4f25930001")
      override
          fun selectedSheets(selectedSheets: SelectedSheetsFilterScopeConfigurationProperty.Builder.() -> Unit):
          Unit = selectedSheets(SelectedSheetsFilterScopeConfigurationProperty(selectedSheets))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterScopeConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterScopeConfigurationProperty,
    ) : CdkObject(cdkObject), FilterScopeConfigurationProperty {
      override fun allSheets(): Any? = unwrap(this).getAllSheets()

      override fun selectedSheets(): Any? = unwrap(this).getSelectedSheets()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilterScopeConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilterScopeConfigurationProperty):
          FilterScopeConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilterScopeConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterScopeConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilterScopeConfigurationProperty
    }
  }

  public interface SheetDefinitionProperty {
    public fun contentType(): String? = unwrap(this).getContentType()

    public fun description(): String? = unwrap(this).getDescription()

    public fun filterControls(): Any? = unwrap(this).getFilterControls()

    public fun layouts(): Any? = unwrap(this).getLayouts()

    public fun name(): String? = unwrap(this).getName()

    public fun parameterControls(): Any? = unwrap(this).getParameterControls()

    public fun sheetControlLayouts(): Any? = unwrap(this).getSheetControlLayouts()

    public fun sheetId(): String

    public fun textBoxes(): Any? = unwrap(this).getTextBoxes()

    public fun title(): String? = unwrap(this).getTitle()

    public fun visuals(): Any? = unwrap(this).getVisuals()

    @CdkDslMarker
    public interface Builder {
      public fun contentType(contentType: String)

      public fun description(description: String)

      public fun filterControls(filterControls: IResolvable)

      public fun filterControls(filterControls: List<Any>)

      public fun filterControls(vararg filterControls: Any)

      public fun layouts(layouts: IResolvable)

      public fun layouts(layouts: List<Any>)

      public fun layouts(vararg layouts: Any)

      public fun name(name: String)

      public fun parameterControls(parameterControls: IResolvable)

      public fun parameterControls(parameterControls: List<Any>)

      public fun parameterControls(vararg parameterControls: Any)

      public fun sheetControlLayouts(sheetControlLayouts: IResolvable)

      public fun sheetControlLayouts(sheetControlLayouts: List<Any>)

      public fun sheetControlLayouts(vararg sheetControlLayouts: Any)

      public fun sheetId(sheetId: String)

      public fun textBoxes(textBoxes: IResolvable)

      public fun textBoxes(textBoxes: List<Any>)

      public fun textBoxes(vararg textBoxes: Any)

      public fun title(title: String)

      public fun visuals(visuals: IResolvable)

      public fun visuals(visuals: List<Any>)

      public fun visuals(vararg visuals: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetDefinitionProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetDefinitionProperty.builder()

      override fun contentType(contentType: String) {
        cdkBuilder.contentType(contentType)
      }

      override fun description(description: String) {
        cdkBuilder.description(description)
      }

      override fun filterControls(filterControls: IResolvable) {
        cdkBuilder.filterControls(filterControls.let(IResolvable::unwrap))
      }

      override fun filterControls(filterControls: List<Any>) {
        cdkBuilder.filterControls(filterControls)
      }

      override fun filterControls(vararg filterControls: Any): Unit =
          filterControls(filterControls.toList())

      override fun layouts(layouts: IResolvable) {
        cdkBuilder.layouts(layouts.let(IResolvable::unwrap))
      }

      override fun layouts(layouts: List<Any>) {
        cdkBuilder.layouts(layouts)
      }

      override fun layouts(vararg layouts: Any): Unit = layouts(layouts.toList())

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      override fun parameterControls(parameterControls: IResolvable) {
        cdkBuilder.parameterControls(parameterControls.let(IResolvable::unwrap))
      }

      override fun parameterControls(parameterControls: List<Any>) {
        cdkBuilder.parameterControls(parameterControls)
      }

      override fun parameterControls(vararg parameterControls: Any): Unit =
          parameterControls(parameterControls.toList())

      override fun sheetControlLayouts(sheetControlLayouts: IResolvable) {
        cdkBuilder.sheetControlLayouts(sheetControlLayouts.let(IResolvable::unwrap))
      }

      override fun sheetControlLayouts(sheetControlLayouts: List<Any>) {
        cdkBuilder.sheetControlLayouts(sheetControlLayouts)
      }

      override fun sheetControlLayouts(vararg sheetControlLayouts: Any): Unit =
          sheetControlLayouts(sheetControlLayouts.toList())

      override fun sheetId(sheetId: String) {
        cdkBuilder.sheetId(sheetId)
      }

      override fun textBoxes(textBoxes: IResolvable) {
        cdkBuilder.textBoxes(textBoxes.let(IResolvable::unwrap))
      }

      override fun textBoxes(textBoxes: List<Any>) {
        cdkBuilder.textBoxes(textBoxes)
      }

      override fun textBoxes(vararg textBoxes: Any): Unit = textBoxes(textBoxes.toList())

      override fun title(title: String) {
        cdkBuilder.title(title)
      }

      override fun visuals(visuals: IResolvable) {
        cdkBuilder.visuals(visuals.let(IResolvable::unwrap))
      }

      override fun visuals(visuals: List<Any>) {
        cdkBuilder.visuals(visuals)
      }

      override fun visuals(vararg visuals: Any): Unit = visuals(visuals.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetDefinitionProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetDefinitionProperty,
    ) : CdkObject(cdkObject), SheetDefinitionProperty {
      override fun contentType(): String? = unwrap(this).getContentType()

      override fun description(): String? = unwrap(this).getDescription()

      override fun filterControls(): Any? = unwrap(this).getFilterControls()

      override fun layouts(): Any? = unwrap(this).getLayouts()

      override fun name(): String? = unwrap(this).getName()

      override fun parameterControls(): Any? = unwrap(this).getParameterControls()

      override fun sheetControlLayouts(): Any? = unwrap(this).getSheetControlLayouts()

      override fun sheetId(): String = unwrap(this).getSheetId()

      override fun textBoxes(): Any? = unwrap(this).getTextBoxes()

      override fun title(): String? = unwrap(this).getTitle()

      override fun visuals(): Any? = unwrap(this).getVisuals()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): SheetDefinitionProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SheetDefinitionProperty):
          SheetDefinitionProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SheetDefinitionProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetDefinitionProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SheetDefinitionProperty
    }
  }

  public interface MinimumLabelTypeProperty {
    public fun visibility(): String? = unwrap(this).getVisibility()

    @CdkDslMarker
    public interface Builder {
      public fun visibility(visibility: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MinimumLabelTypeProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.MinimumLabelTypeProperty.builder()

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.MinimumLabelTypeProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.MinimumLabelTypeProperty,
    ) : CdkObject(cdkObject), MinimumLabelTypeProperty {
      override fun visibility(): String? = unwrap(this).getVisibility()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): MinimumLabelTypeProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.MinimumLabelTypeProperty):
          MinimumLabelTypeProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: MinimumLabelTypeProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.MinimumLabelTypeProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.MinimumLabelTypeProperty
    }
  }

  public interface GridLayoutScreenCanvasSizeOptionsProperty {
    public fun optimizedViewPortWidth(): String? = unwrap(this).getOptimizedViewPortWidth()

    public fun resizeOption(): String

    @CdkDslMarker
    public interface Builder {
      public fun optimizedViewPortWidth(optimizedViewPortWidth: String)

      public fun resizeOption(resizeOption: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutScreenCanvasSizeOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutScreenCanvasSizeOptionsProperty.builder()

      override fun optimizedViewPortWidth(optimizedViewPortWidth: String) {
        cdkBuilder.optimizedViewPortWidth(optimizedViewPortWidth)
      }

      override fun resizeOption(resizeOption: String) {
        cdkBuilder.resizeOption(resizeOption)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutScreenCanvasSizeOptionsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutScreenCanvasSizeOptionsProperty,
    ) : CdkObject(cdkObject), GridLayoutScreenCanvasSizeOptionsProperty {
      override fun optimizedViewPortWidth(): String? = unwrap(this).getOptimizedViewPortWidth()

      override fun resizeOption(): String = unwrap(this).getResizeOption()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GridLayoutScreenCanvasSizeOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutScreenCanvasSizeOptionsProperty):
          GridLayoutScreenCanvasSizeOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GridLayoutScreenCanvasSizeOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutScreenCanvasSizeOptionsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GridLayoutScreenCanvasSizeOptionsProperty
    }
  }

  public interface LineChartLineStyleSettingsProperty {
    public fun lineInterpolation(): String? = unwrap(this).getLineInterpolation()

    public fun lineStyle(): String? = unwrap(this).getLineStyle()

    public fun lineVisibility(): String? = unwrap(this).getLineVisibility()

    public fun lineWidth(): String? = unwrap(this).getLineWidth()

    @CdkDslMarker
    public interface Builder {
      public fun lineInterpolation(lineInterpolation: String)

      public fun lineStyle(lineStyle: String)

      public fun lineVisibility(lineVisibility: String)

      public fun lineWidth(lineWidth: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartLineStyleSettingsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartLineStyleSettingsProperty.builder()

      override fun lineInterpolation(lineInterpolation: String) {
        cdkBuilder.lineInterpolation(lineInterpolation)
      }

      override fun lineStyle(lineStyle: String) {
        cdkBuilder.lineStyle(lineStyle)
      }

      override fun lineVisibility(lineVisibility: String) {
        cdkBuilder.lineVisibility(lineVisibility)
      }

      override fun lineWidth(lineWidth: String) {
        cdkBuilder.lineWidth(lineWidth)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartLineStyleSettingsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartLineStyleSettingsProperty,
    ) : CdkObject(cdkObject), LineChartLineStyleSettingsProperty {
      override fun lineInterpolation(): String? = unwrap(this).getLineInterpolation()

      override fun lineStyle(): String? = unwrap(this).getLineStyle()

      override fun lineVisibility(): String? = unwrap(this).getLineVisibility()

      override fun lineWidth(): String? = unwrap(this).getLineWidth()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          LineChartLineStyleSettingsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartLineStyleSettingsProperty):
          LineChartLineStyleSettingsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LineChartLineStyleSettingsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartLineStyleSettingsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LineChartLineStyleSettingsProperty
    }
  }

  public interface TableFieldCustomIconContentProperty {
    public fun icon(): String? = unwrap(this).getIcon()

    @CdkDslMarker
    public interface Builder {
      public fun icon(icon: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomIconContentProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomIconContentProperty.builder()

      override fun icon(icon: String) {
        cdkBuilder.icon(icon)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomIconContentProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomIconContentProperty,
    ) : CdkObject(cdkObject), TableFieldCustomIconContentProperty {
      override fun icon(): String? = unwrap(this).getIcon()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          TableFieldCustomIconContentProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomIconContentProperty):
          TableFieldCustomIconContentProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TableFieldCustomIconContentProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomIconContentProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TableFieldCustomIconContentProperty
    }
  }

  public interface GeospatialHeatmapColorScaleProperty {
    public fun colors(): Any? = unwrap(this).getColors()

    @CdkDslMarker
    public interface Builder {
      public fun colors(colors: IResolvable)

      public fun colors(colors: List<Any>)

      public fun colors(vararg colors: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapColorScaleProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapColorScaleProperty.builder()

      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapColorScaleProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapColorScaleProperty,
    ) : CdkObject(cdkObject), GeospatialHeatmapColorScaleProperty {
      override fun colors(): Any? = unwrap(this).getColors()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialHeatmapColorScaleProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapColorScaleProperty):
          GeospatialHeatmapColorScaleProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialHeatmapColorScaleProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapColorScaleProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialHeatmapColorScaleProperty
    }
  }

  public interface PivotTableSortConfigurationProperty {
    public fun fieldSortOptions(): Any? = unwrap(this).getFieldSortOptions()

    @CdkDslMarker
    public interface Builder {
      public fun fieldSortOptions(fieldSortOptions: IResolvable)

      public fun fieldSortOptions(fieldSortOptions: List<Any>)

      public fun fieldSortOptions(vararg fieldSortOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortConfigurationProperty.builder()

      override fun fieldSortOptions(fieldSortOptions: IResolvable) {
        cdkBuilder.fieldSortOptions(fieldSortOptions.let(IResolvable::unwrap))
      }

      override fun fieldSortOptions(fieldSortOptions: List<Any>) {
        cdkBuilder.fieldSortOptions(fieldSortOptions)
      }

      override fun fieldSortOptions(vararg fieldSortOptions: Any): Unit =
          fieldSortOptions(fieldSortOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortConfigurationProperty,
    ) : CdkObject(cdkObject), PivotTableSortConfigurationProperty {
      override fun fieldSortOptions(): Any? = unwrap(this).getFieldSortOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          PivotTableSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortConfigurationProperty):
          PivotTableSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: PivotTableSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.PivotTableSortConfigurationProperty
    }
  }

  public interface HeatMapSortConfigurationProperty {
    public fun heatMapColumnItemsLimitConfiguration(): Any? =
        unwrap(this).getHeatMapColumnItemsLimitConfiguration()

    public fun heatMapColumnSort(): Any? = unwrap(this).getHeatMapColumnSort()

    public fun heatMapRowItemsLimitConfiguration(): Any? =
        unwrap(this).getHeatMapRowItemsLimitConfiguration()

    public fun heatMapRowSort(): Any? = unwrap(this).getHeatMapRowSort()

    @CdkDslMarker
    public interface Builder {
      public
          fun heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration: IResolvable)

      public
          fun heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7a68ddbc4feb49b5d15e867e8a94298e65fcb00080b2970d0b602bae46a82c3f")
      public
          fun heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun heatMapColumnSort(heatMapColumnSort: IResolvable)

      public fun heatMapColumnSort(heatMapColumnSort: List<Any>)

      public fun heatMapColumnSort(vararg heatMapColumnSort: Any)

      public fun heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration: IResolvable)

      public
          fun heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration: ItemsLimitConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("755c0ed43349acb12d3f32904dd275dfcfd5c981a7dde1a7e00ea3bd41e68864")
      public
          fun heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit)

      public fun heatMapRowSort(heatMapRowSort: IResolvable)

      public fun heatMapRowSort(heatMapRowSort: List<Any>)

      public fun heatMapRowSort(vararg heatMapRowSort: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapSortConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapSortConfigurationProperty.builder()

      override
          fun heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration: IResolvable) {
        cdkBuilder.heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration.let(IResolvable::unwrap))
      }

      override
          fun heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7a68ddbc4feb49b5d15e867e8a94298e65fcb00080b2970d0b602bae46a82c3f")
      override
          fun heatMapColumnItemsLimitConfiguration(heatMapColumnItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          heatMapColumnItemsLimitConfiguration(ItemsLimitConfigurationProperty(heatMapColumnItemsLimitConfiguration))

      override fun heatMapColumnSort(heatMapColumnSort: IResolvable) {
        cdkBuilder.heatMapColumnSort(heatMapColumnSort.let(IResolvable::unwrap))
      }

      override fun heatMapColumnSort(heatMapColumnSort: List<Any>) {
        cdkBuilder.heatMapColumnSort(heatMapColumnSort)
      }

      override fun heatMapColumnSort(vararg heatMapColumnSort: Any): Unit =
          heatMapColumnSort(heatMapColumnSort.toList())

      override
          fun heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration: IResolvable) {
        cdkBuilder.heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration.let(IResolvable::unwrap))
      }

      override
          fun heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration: ItemsLimitConfigurationProperty) {
        cdkBuilder.heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration.let(ItemsLimitConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("755c0ed43349acb12d3f32904dd275dfcfd5c981a7dde1a7e00ea3bd41e68864")
      override
          fun heatMapRowItemsLimitConfiguration(heatMapRowItemsLimitConfiguration: ItemsLimitConfigurationProperty.Builder.() -> Unit):
          Unit =
          heatMapRowItemsLimitConfiguration(ItemsLimitConfigurationProperty(heatMapRowItemsLimitConfiguration))

      override fun heatMapRowSort(heatMapRowSort: IResolvable) {
        cdkBuilder.heatMapRowSort(heatMapRowSort.let(IResolvable::unwrap))
      }

      override fun heatMapRowSort(heatMapRowSort: List<Any>) {
        cdkBuilder.heatMapRowSort(heatMapRowSort)
      }

      override fun heatMapRowSort(vararg heatMapRowSort: Any): Unit =
          heatMapRowSort(heatMapRowSort.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapSortConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapSortConfigurationProperty,
    ) : CdkObject(cdkObject), HeatMapSortConfigurationProperty {
      override fun heatMapColumnItemsLimitConfiguration(): Any? =
          unwrap(this).getHeatMapColumnItemsLimitConfiguration()

      override fun heatMapColumnSort(): Any? = unwrap(this).getHeatMapColumnSort()

      override fun heatMapRowItemsLimitConfiguration(): Any? =
          unwrap(this).getHeatMapRowItemsLimitConfiguration()

      override fun heatMapRowSort(): Any? = unwrap(this).getHeatMapRowSort()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): HeatMapSortConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapSortConfigurationProperty):
          HeatMapSortConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: HeatMapSortConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapSortConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.HeatMapSortConfigurationProperty
    }
  }

  public interface ComboChartConfigurationProperty {
    public fun barDataLabels(): Any? = unwrap(this).getBarDataLabels()

    public fun barsArrangement(): String? = unwrap(this).getBarsArrangement()

    public fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

    public fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

    public fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun legend(): Any? = unwrap(this).getLegend()

    public fun lineDataLabels(): Any? = unwrap(this).getLineDataLabels()

    public fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

    public fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

    public fun referenceLines(): Any? = unwrap(this).getReferenceLines()

    public fun secondaryYAxisDisplayOptions(): Any? = unwrap(this).getSecondaryYAxisDisplayOptions()

    public fun secondaryYAxisLabelOptions(): Any? = unwrap(this).getSecondaryYAxisLabelOptions()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    public fun tooltip(): Any? = unwrap(this).getTooltip()

    public fun visualPalette(): Any? = unwrap(this).getVisualPalette()

    @CdkDslMarker
    public interface Builder {
      public fun barDataLabels(barDataLabels: IResolvable)

      public fun barDataLabels(barDataLabels: DataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bbb175a340745646a2e9c5702ba88f7812e91343a07b3acb337a47f0d9a07404")
      public fun barDataLabels(barDataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      public fun barsArrangement(barsArrangement: String)

      public fun categoryAxis(categoryAxis: IResolvable)

      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3870d8ac3c2744865d5560577ae7752928f4e55153c367a495c81feb3aca0447")
      public fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun categoryLabelOptions(categoryLabelOptions: IResolvable)

      public fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a782f9dde168eea4aa8bb45a6579d60e88530b29182f567317e20994570227b6")
      public
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun colorLabelOptions(colorLabelOptions: IResolvable)

      public fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("232994014414c4314e91102f6de7186b53bec86f4b14864f0e028fddd61b754c")
      public
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: ComboChartFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a31fa70107170fab69f211a17c4f6a8ef436c77f19a77dd7362d6d5d022e172b")
      public fun fieldWells(fieldWells: ComboChartFieldWellsProperty.Builder.() -> Unit)

      public fun legend(legend: IResolvable)

      public fun legend(legend: LegendOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b6c3fc98e323895d9165eb0b531f39603d16b7f979c798a8892009d38859fdbd")
      public fun legend(legend: LegendOptionsProperty.Builder.() -> Unit)

      public fun lineDataLabels(lineDataLabels: IResolvable)

      public fun lineDataLabels(lineDataLabels: DataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1d24555f241eda844fdd54d77f249c156e9476817ddcb626bea658dbc7f7f003")
      public fun lineDataLabels(lineDataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable)

      public fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9ba1b29136322d87a662ed3796c8d031de531ab6ee6d5b1a9f4607cb0b9c0b82")
      public
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable)

      public fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("95725852da86bf70c909a6a306e71faa584dacb9f1e5817f140e8e585d47cf14")
      public
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun referenceLines(referenceLines: IResolvable)

      public fun referenceLines(referenceLines: List<Any>)

      public fun referenceLines(vararg referenceLines: Any)

      public fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: IResolvable)

      public
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: AxisDisplayOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("30d796bca1e0562e3eb5afb174d337297dfb84bd3094c0a9cbc58692c5fcd769")
      public
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit)

      public fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: IResolvable)

      public
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("34ffc5c2654339bf5f54d0708c8c78bf2878e517306b6ca136416a9ae3d16f7b")
      public
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: ComboChartSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f3265e5777087f41b8f660e713f9ece093a425053337e19dbefcb0b80e5a8d7b")
      public
          fun sortConfiguration(sortConfiguration: ComboChartSortConfigurationProperty.Builder.() -> Unit)

      public fun tooltip(tooltip: IResolvable)

      public fun tooltip(tooltip: TooltipOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4648456cc1e89c8e41f89d223667f089e46cfab68d32aa1bc952e8c248cc2a33")
      public fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit)

      public fun visualPalette(visualPalette: IResolvable)

      public fun visualPalette(visualPalette: VisualPaletteProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5d8562ffada12e2ff4ca2f49c4b99d212fc3aa0fb7ae8ec7eaecbbdbb9129afa")
      public fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartConfigurationProperty.builder()

      override fun barDataLabels(barDataLabels: IResolvable) {
        cdkBuilder.barDataLabels(barDataLabels.let(IResolvable::unwrap))
      }

      override fun barDataLabels(barDataLabels: DataLabelOptionsProperty) {
        cdkBuilder.barDataLabels(barDataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("bbb175a340745646a2e9c5702ba88f7812e91343a07b3acb337a47f0d9a07404")
      override fun barDataLabels(barDataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          barDataLabels(DataLabelOptionsProperty(barDataLabels))

      override fun barsArrangement(barsArrangement: String) {
        cdkBuilder.barsArrangement(barsArrangement)
      }

      override fun categoryAxis(categoryAxis: IResolvable) {
        cdkBuilder.categoryAxis(categoryAxis.let(IResolvable::unwrap))
      }

      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty) {
        cdkBuilder.categoryAxis(categoryAxis.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3870d8ac3c2744865d5560577ae7752928f4e55153c367a495c81feb3aca0447")
      override fun categoryAxis(categoryAxis: AxisDisplayOptionsProperty.Builder.() -> Unit): Unit =
          categoryAxis(AxisDisplayOptionsProperty(categoryAxis))

      override fun categoryLabelOptions(categoryLabelOptions: IResolvable) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(IResolvable::unwrap))
      }

      override fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.categoryLabelOptions(categoryLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a782f9dde168eea4aa8bb45a6579d60e88530b29182f567317e20994570227b6")
      override
          fun categoryLabelOptions(categoryLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = categoryLabelOptions(ChartAxisLabelOptionsProperty(categoryLabelOptions))

      override fun colorLabelOptions(colorLabelOptions: IResolvable) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(IResolvable::unwrap))
      }

      override fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.colorLabelOptions(colorLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("232994014414c4314e91102f6de7186b53bec86f4b14864f0e028fddd61b754c")
      override
          fun colorLabelOptions(colorLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = colorLabelOptions(ChartAxisLabelOptionsProperty(colorLabelOptions))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: ComboChartFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(ComboChartFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a31fa70107170fab69f211a17c4f6a8ef436c77f19a77dd7362d6d5d022e172b")
      override fun fieldWells(fieldWells: ComboChartFieldWellsProperty.Builder.() -> Unit): Unit =
          fieldWells(ComboChartFieldWellsProperty(fieldWells))

      override fun legend(legend: IResolvable) {
        cdkBuilder.legend(legend.let(IResolvable::unwrap))
      }

      override fun legend(legend: LegendOptionsProperty) {
        cdkBuilder.legend(legend.let(LegendOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("b6c3fc98e323895d9165eb0b531f39603d16b7f979c798a8892009d38859fdbd")
      override fun legend(legend: LegendOptionsProperty.Builder.() -> Unit): Unit =
          legend(LegendOptionsProperty(legend))

      override fun lineDataLabels(lineDataLabels: IResolvable) {
        cdkBuilder.lineDataLabels(lineDataLabels.let(IResolvable::unwrap))
      }

      override fun lineDataLabels(lineDataLabels: DataLabelOptionsProperty) {
        cdkBuilder.lineDataLabels(lineDataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("1d24555f241eda844fdd54d77f249c156e9476817ddcb626bea658dbc7f7f003")
      override fun lineDataLabels(lineDataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit
          = lineDataLabels(DataLabelOptionsProperty(lineDataLabels))

      override fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: IResolvable) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(IResolvable::unwrap))
      }

      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.primaryYAxisDisplayOptions(primaryYAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("9ba1b29136322d87a662ed3796c8d031de531ab6ee6d5b1a9f4607cb0b9c0b82")
      override
          fun primaryYAxisDisplayOptions(primaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisDisplayOptions(AxisDisplayOptionsProperty(primaryYAxisDisplayOptions))

      override fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: IResolvable) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.primaryYAxisLabelOptions(primaryYAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("95725852da86bf70c909a6a306e71faa584dacb9f1e5817f140e8e585d47cf14")
      override
          fun primaryYAxisLabelOptions(primaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit = primaryYAxisLabelOptions(ChartAxisLabelOptionsProperty(primaryYAxisLabelOptions))

      override fun referenceLines(referenceLines: IResolvable) {
        cdkBuilder.referenceLines(referenceLines.let(IResolvable::unwrap))
      }

      override fun referenceLines(referenceLines: List<Any>) {
        cdkBuilder.referenceLines(referenceLines)
      }

      override fun referenceLines(vararg referenceLines: Any): Unit =
          referenceLines(referenceLines.toList())

      override fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: IResolvable) {
        cdkBuilder.secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions.let(IResolvable::unwrap))
      }

      override
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: AxisDisplayOptionsProperty) {
        cdkBuilder.secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions.let(AxisDisplayOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("30d796bca1e0562e3eb5afb174d337297dfb84bd3094c0a9cbc58692c5fcd769")
      override
          fun secondaryYAxisDisplayOptions(secondaryYAxisDisplayOptions: AxisDisplayOptionsProperty.Builder.() -> Unit):
          Unit =
          secondaryYAxisDisplayOptions(AxisDisplayOptionsProperty(secondaryYAxisDisplayOptions))

      override fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: IResolvable) {
        cdkBuilder.secondaryYAxisLabelOptions(secondaryYAxisLabelOptions.let(IResolvable::unwrap))
      }

      override
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty) {
        cdkBuilder.secondaryYAxisLabelOptions(secondaryYAxisLabelOptions.let(ChartAxisLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("34ffc5c2654339bf5f54d0708c8c78bf2878e517306b6ca136416a9ae3d16f7b")
      override
          fun secondaryYAxisLabelOptions(secondaryYAxisLabelOptions: ChartAxisLabelOptionsProperty.Builder.() -> Unit):
          Unit =
          secondaryYAxisLabelOptions(ChartAxisLabelOptionsProperty(secondaryYAxisLabelOptions))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: ComboChartSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(ComboChartSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("f3265e5777087f41b8f660e713f9ece093a425053337e19dbefcb0b80e5a8d7b")
      override
          fun sortConfiguration(sortConfiguration: ComboChartSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(ComboChartSortConfigurationProperty(sortConfiguration))

      override fun tooltip(tooltip: IResolvable) {
        cdkBuilder.tooltip(tooltip.let(IResolvable::unwrap))
      }

      override fun tooltip(tooltip: TooltipOptionsProperty) {
        cdkBuilder.tooltip(tooltip.let(TooltipOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4648456cc1e89c8e41f89d223667f089e46cfab68d32aa1bc952e8c248cc2a33")
      override fun tooltip(tooltip: TooltipOptionsProperty.Builder.() -> Unit): Unit =
          tooltip(TooltipOptionsProperty(tooltip))

      override fun visualPalette(visualPalette: IResolvable) {
        cdkBuilder.visualPalette(visualPalette.let(IResolvable::unwrap))
      }

      override fun visualPalette(visualPalette: VisualPaletteProperty) {
        cdkBuilder.visualPalette(visualPalette.let(VisualPaletteProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5d8562ffada12e2ff4ca2f49c4b99d212fc3aa0fb7ae8ec7eaecbbdbb9129afa")
      override fun visualPalette(visualPalette: VisualPaletteProperty.Builder.() -> Unit): Unit =
          visualPalette(VisualPaletteProperty(visualPalette))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartConfigurationProperty,
    ) : CdkObject(cdkObject), ComboChartConfigurationProperty {
      override fun barDataLabels(): Any? = unwrap(this).getBarDataLabels()

      override fun barsArrangement(): String? = unwrap(this).getBarsArrangement()

      override fun categoryAxis(): Any? = unwrap(this).getCategoryAxis()

      override fun categoryLabelOptions(): Any? = unwrap(this).getCategoryLabelOptions()

      override fun colorLabelOptions(): Any? = unwrap(this).getColorLabelOptions()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun legend(): Any? = unwrap(this).getLegend()

      override fun lineDataLabels(): Any? = unwrap(this).getLineDataLabels()

      override fun primaryYAxisDisplayOptions(): Any? = unwrap(this).getPrimaryYAxisDisplayOptions()

      override fun primaryYAxisLabelOptions(): Any? = unwrap(this).getPrimaryYAxisLabelOptions()

      override fun referenceLines(): Any? = unwrap(this).getReferenceLines()

      override fun secondaryYAxisDisplayOptions(): Any? =
          unwrap(this).getSecondaryYAxisDisplayOptions()

      override fun secondaryYAxisLabelOptions(): Any? = unwrap(this).getSecondaryYAxisLabelOptions()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

      override fun tooltip(): Any? = unwrap(this).getTooltip()

      override fun visualPalette(): Any? = unwrap(this).getVisualPalette()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ComboChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartConfigurationProperty):
          ComboChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ComboChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ComboChartConfigurationProperty
    }
  }

  public interface DynamicDefaultValueProperty {
    public fun defaultValueColumn(): Any

    public fun groupNameColumn(): Any? = unwrap(this).getGroupNameColumn()

    public fun userNameColumn(): Any? = unwrap(this).getUserNameColumn()

    @CdkDslMarker
    public interface Builder {
      public fun defaultValueColumn(defaultValueColumn: IResolvable)

      public fun defaultValueColumn(defaultValueColumn: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e87d64f5f4c799a16233b12a805cb8d277d9849a56010aae2e0237b50b0bb03f")
      public fun defaultValueColumn(defaultValueColumn: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun groupNameColumn(groupNameColumn: IResolvable)

      public fun groupNameColumn(groupNameColumn: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4a2d81c28d314c7a53e6c6e99f264c12e1080925fde11260b1d110b6ffc3af7f")
      public fun groupNameColumn(groupNameColumn: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun userNameColumn(userNameColumn: IResolvable)

      public fun userNameColumn(userNameColumn: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("782b95d5a59d21ce746769e0c5b6b26e797194698dd7abf558249bee59f9073b")
      public fun userNameColumn(userNameColumn: ColumnIdentifierProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DynamicDefaultValueProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DynamicDefaultValueProperty.builder()

      override fun defaultValueColumn(defaultValueColumn: IResolvable) {
        cdkBuilder.defaultValueColumn(defaultValueColumn.let(IResolvable::unwrap))
      }

      override fun defaultValueColumn(defaultValueColumn: ColumnIdentifierProperty) {
        cdkBuilder.defaultValueColumn(defaultValueColumn.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("e87d64f5f4c799a16233b12a805cb8d277d9849a56010aae2e0237b50b0bb03f")
      override
          fun defaultValueColumn(defaultValueColumn: ColumnIdentifierProperty.Builder.() -> Unit):
          Unit = defaultValueColumn(ColumnIdentifierProperty(defaultValueColumn))

      override fun groupNameColumn(groupNameColumn: IResolvable) {
        cdkBuilder.groupNameColumn(groupNameColumn.let(IResolvable::unwrap))
      }

      override fun groupNameColumn(groupNameColumn: ColumnIdentifierProperty) {
        cdkBuilder.groupNameColumn(groupNameColumn.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4a2d81c28d314c7a53e6c6e99f264c12e1080925fde11260b1d110b6ffc3af7f")
      override fun groupNameColumn(groupNameColumn: ColumnIdentifierProperty.Builder.() -> Unit):
          Unit = groupNameColumn(ColumnIdentifierProperty(groupNameColumn))

      override fun userNameColumn(userNameColumn: IResolvable) {
        cdkBuilder.userNameColumn(userNameColumn.let(IResolvable::unwrap))
      }

      override fun userNameColumn(userNameColumn: ColumnIdentifierProperty) {
        cdkBuilder.userNameColumn(userNameColumn.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("782b95d5a59d21ce746769e0c5b6b26e797194698dd7abf558249bee59f9073b")
      override fun userNameColumn(userNameColumn: ColumnIdentifierProperty.Builder.() -> Unit): Unit
          = userNameColumn(ColumnIdentifierProperty(userNameColumn))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DynamicDefaultValueProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DynamicDefaultValueProperty,
    ) : CdkObject(cdkObject), DynamicDefaultValueProperty {
      override fun defaultValueColumn(): Any = unwrap(this).getDefaultValueColumn()

      override fun groupNameColumn(): Any? = unwrap(this).getGroupNameColumn()

      override fun userNameColumn(): Any? = unwrap(this).getUserNameColumn()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DynamicDefaultValueProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DynamicDefaultValueProperty):
          DynamicDefaultValueProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DynamicDefaultValueProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DynamicDefaultValueProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DynamicDefaultValueProperty
    }
  }

  public interface WhatIfPointScenarioProperty {
    public fun date(): String

    public fun `value`(): Number

    @CdkDslMarker
    public interface Builder {
      public fun date(date: String)

      public fun `value`(`value`: Number)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfPointScenarioProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfPointScenarioProperty.builder()

      override fun date(date: String) {
        cdkBuilder.date(date)
      }

      override fun `value`(`value`: Number) {
        cdkBuilder.`value`(`value`)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfPointScenarioProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfPointScenarioProperty,
    ) : CdkObject(cdkObject), WhatIfPointScenarioProperty {
      override fun date(): String = unwrap(this).getDate()

      override fun `value`(): Number = unwrap(this).getValue()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): WhatIfPointScenarioProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfPointScenarioProperty):
          WhatIfPointScenarioProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: WhatIfPointScenarioProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfPointScenarioProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.WhatIfPointScenarioProperty
    }
  }

  public interface GeospatialMapAggregatedFieldWellsProperty {
    public fun colors(): Any? = unwrap(this).getColors()

    public fun geospatial(): Any? = unwrap(this).getGeospatial()

    public fun values(): Any? = unwrap(this).getValues()

    @CdkDslMarker
    public interface Builder {
      public fun colors(colors: IResolvable)

      public fun colors(colors: List<Any>)

      public fun colors(vararg colors: Any)

      public fun geospatial(geospatial: IResolvable)

      public fun geospatial(geospatial: List<Any>)

      public fun geospatial(vararg geospatial: Any)

      public fun values(values: IResolvable)

      public fun values(values: List<Any>)

      public fun values(vararg values: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapAggregatedFieldWellsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapAggregatedFieldWellsProperty.builder()

      override fun colors(colors: IResolvable) {
        cdkBuilder.colors(colors.let(IResolvable::unwrap))
      }

      override fun colors(colors: List<Any>) {
        cdkBuilder.colors(colors)
      }

      override fun colors(vararg colors: Any): Unit = colors(colors.toList())

      override fun geospatial(geospatial: IResolvable) {
        cdkBuilder.geospatial(geospatial.let(IResolvable::unwrap))
      }

      override fun geospatial(geospatial: List<Any>) {
        cdkBuilder.geospatial(geospatial)
      }

      override fun geospatial(vararg geospatial: Any): Unit = geospatial(geospatial.toList())

      override fun values(values: IResolvable) {
        cdkBuilder.values(values.let(IResolvable::unwrap))
      }

      override fun values(values: List<Any>) {
        cdkBuilder.values(values)
      }

      override fun values(vararg values: Any): Unit = values(values.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapAggregatedFieldWellsProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapAggregatedFieldWellsProperty,
    ) : CdkObject(cdkObject), GeospatialMapAggregatedFieldWellsProperty {
      override fun colors(): Any? = unwrap(this).getColors()

      override fun geospatial(): Any? = unwrap(this).getGeospatial()

      override fun values(): Any? = unwrap(this).getValues()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialMapAggregatedFieldWellsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapAggregatedFieldWellsProperty):
          GeospatialMapAggregatedFieldWellsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialMapAggregatedFieldWellsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapAggregatedFieldWellsProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapAggregatedFieldWellsProperty
    }
  }

  public interface SankeyDiagramChartConfigurationProperty {
    public fun dataLabels(): Any? = unwrap(this).getDataLabels()

    public fun fieldWells(): Any? = unwrap(this).getFieldWells()

    public fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()

    @CdkDslMarker
    public interface Builder {
      public fun dataLabels(dataLabels: IResolvable)

      public fun dataLabels(dataLabels: DataLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("99fde9e797494015c753f77756cfdf0acc1774fbd00d3318a4f5a7672e88233b")
      public fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit)

      public fun fieldWells(fieldWells: IResolvable)

      public fun fieldWells(fieldWells: SankeyDiagramFieldWellsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5fb9b5121b7306a60c4f433104439d18caf45a404c716bd76f8dafc3c56bac2b")
      public fun fieldWells(fieldWells: SankeyDiagramFieldWellsProperty.Builder.() -> Unit)

      public fun sortConfiguration(sortConfiguration: IResolvable)

      public fun sortConfiguration(sortConfiguration: SankeyDiagramSortConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6c49baee611a987983ad02a27f058de5fd303ab198bf93250a7e0670bb44c334")
      public
          fun sortConfiguration(sortConfiguration: SankeyDiagramSortConfigurationProperty.Builder.() -> Unit)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramChartConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramChartConfigurationProperty.builder()

      override fun dataLabels(dataLabels: IResolvable) {
        cdkBuilder.dataLabels(dataLabels.let(IResolvable::unwrap))
      }

      override fun dataLabels(dataLabels: DataLabelOptionsProperty) {
        cdkBuilder.dataLabels(dataLabels.let(DataLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("99fde9e797494015c753f77756cfdf0acc1774fbd00d3318a4f5a7672e88233b")
      override fun dataLabels(dataLabels: DataLabelOptionsProperty.Builder.() -> Unit): Unit =
          dataLabels(DataLabelOptionsProperty(dataLabels))

      override fun fieldWells(fieldWells: IResolvable) {
        cdkBuilder.fieldWells(fieldWells.let(IResolvable::unwrap))
      }

      override fun fieldWells(fieldWells: SankeyDiagramFieldWellsProperty) {
        cdkBuilder.fieldWells(fieldWells.let(SankeyDiagramFieldWellsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("5fb9b5121b7306a60c4f433104439d18caf45a404c716bd76f8dafc3c56bac2b")
      override fun fieldWells(fieldWells: SankeyDiagramFieldWellsProperty.Builder.() -> Unit): Unit
          = fieldWells(SankeyDiagramFieldWellsProperty(fieldWells))

      override fun sortConfiguration(sortConfiguration: IResolvable) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(IResolvable::unwrap))
      }

      override fun sortConfiguration(sortConfiguration: SankeyDiagramSortConfigurationProperty) {
        cdkBuilder.sortConfiguration(sortConfiguration.let(SankeyDiagramSortConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("6c49baee611a987983ad02a27f058de5fd303ab198bf93250a7e0670bb44c334")
      override
          fun sortConfiguration(sortConfiguration: SankeyDiagramSortConfigurationProperty.Builder.() -> Unit):
          Unit = sortConfiguration(SankeyDiagramSortConfigurationProperty(sortConfiguration))

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramChartConfigurationProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramChartConfigurationProperty,
    ) : CdkObject(cdkObject), SankeyDiagramChartConfigurationProperty {
      override fun dataLabels(): Any? = unwrap(this).getDataLabels()

      override fun fieldWells(): Any? = unwrap(this).getFieldWells()

      override fun sortConfiguration(): Any? = unwrap(this).getSortConfiguration()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          SankeyDiagramChartConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramChartConfigurationProperty):
          SankeyDiagramChartConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: SankeyDiagramChartConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramChartConfigurationProperty
          = (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.SankeyDiagramChartConfigurationProperty
    }
  }

  public interface GeospatialMapStyleOptionsProperty {
    public fun baseMapStyle(): String? = unwrap(this).getBaseMapStyle()

    @CdkDslMarker
    public interface Builder {
      public fun baseMapStyle(baseMapStyle: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapStyleOptionsProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapStyleOptionsProperty.builder()

      override fun baseMapStyle(baseMapStyle: String) {
        cdkBuilder.baseMapStyle(baseMapStyle)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapStyleOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapStyleOptionsProperty,
    ) : CdkObject(cdkObject), GeospatialMapStyleOptionsProperty {
      override fun baseMapStyle(): String? = unwrap(this).getBaseMapStyle()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}):
          GeospatialMapStyleOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapStyleOptionsProperty):
          GeospatialMapStyleOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: GeospatialMapStyleOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapStyleOptionsProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.GeospatialMapStyleOptionsProperty
    }
  }

  public interface DataSetReferenceProperty {
    public fun dataSetArn(): String

    public fun dataSetPlaceholder(): String

    @CdkDslMarker
    public interface Builder {
      public fun dataSetArn(dataSetArn: String)

      public fun dataSetPlaceholder(dataSetPlaceholder: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetReferenceProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetReferenceProperty.builder()

      override fun dataSetArn(dataSetArn: String) {
        cdkBuilder.dataSetArn(dataSetArn)
      }

      override fun dataSetPlaceholder(dataSetPlaceholder: String) {
        cdkBuilder.dataSetPlaceholder(dataSetPlaceholder)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetReferenceProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetReferenceProperty,
    ) : CdkObject(cdkObject), DataSetReferenceProperty {
      override fun dataSetArn(): String = unwrap(this).getDataSetArn()

      override fun dataSetPlaceholder(): String = unwrap(this).getDataSetPlaceholder()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): DataSetReferenceProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetReferenceProperty):
          DataSetReferenceProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: DataSetReferenceProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetReferenceProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.DataSetReferenceProperty
    }
  }

  public interface FieldBasedTooltipProperty {
    public fun aggregationVisibility(): String? = unwrap(this).getAggregationVisibility()

    public fun tooltipFields(): Any? = unwrap(this).getTooltipFields()

    public fun tooltipTitleType(): String? = unwrap(this).getTooltipTitleType()

    @CdkDslMarker
    public interface Builder {
      public fun aggregationVisibility(aggregationVisibility: String)

      public fun tooltipFields(tooltipFields: IResolvable)

      public fun tooltipFields(tooltipFields: List<Any>)

      public fun tooltipFields(vararg tooltipFields: Any)

      public fun tooltipTitleType(tooltipTitleType: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldBasedTooltipProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldBasedTooltipProperty.builder()

      override fun aggregationVisibility(aggregationVisibility: String) {
        cdkBuilder.aggregationVisibility(aggregationVisibility)
      }

      override fun tooltipFields(tooltipFields: IResolvable) {
        cdkBuilder.tooltipFields(tooltipFields.let(IResolvable::unwrap))
      }

      override fun tooltipFields(tooltipFields: List<Any>) {
        cdkBuilder.tooltipFields(tooltipFields)
      }

      override fun tooltipFields(vararg tooltipFields: Any): Unit =
          tooltipFields(tooltipFields.toList())

      override fun tooltipTitleType(tooltipTitleType: String) {
        cdkBuilder.tooltipTitleType(tooltipTitleType)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldBasedTooltipProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldBasedTooltipProperty,
    ) : CdkObject(cdkObject), FieldBasedTooltipProperty {
      override fun aggregationVisibility(): String? = unwrap(this).getAggregationVisibility()

      override fun tooltipFields(): Any? = unwrap(this).getTooltipFields()

      override fun tooltipTitleType(): String? = unwrap(this).getTooltipTitleType()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FieldBasedTooltipProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FieldBasedTooltipProperty):
          FieldBasedTooltipProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FieldBasedTooltipProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldBasedTooltipProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FieldBasedTooltipProperty
    }
  }

  public interface KPIConditionalFormattingProperty {
    public fun conditionalFormattingOptions(): Any? = unwrap(this).getConditionalFormattingOptions()

    @CdkDslMarker
    public interface Builder {
      public fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable)

      public fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>)

      public fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingProperty.builder()

      override fun conditionalFormattingOptions(conditionalFormattingOptions: IResolvable) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions.let(IResolvable::unwrap))
      }

      override fun conditionalFormattingOptions(conditionalFormattingOptions: List<Any>) {
        cdkBuilder.conditionalFormattingOptions(conditionalFormattingOptions)
      }

      override fun conditionalFormattingOptions(vararg conditionalFormattingOptions: Any): Unit =
          conditionalFormattingOptions(conditionalFormattingOptions.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingProperty,
    ) : CdkObject(cdkObject), KPIConditionalFormattingProperty {
      override fun conditionalFormattingOptions(): Any? =
          unwrap(this).getConditionalFormattingOptions()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): KPIConditionalFormattingProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingProperty):
          KPIConditionalFormattingProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: KPIConditionalFormattingProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.KPIConditionalFormattingProperty
    }
  }

  public interface LegendOptionsProperty {
    public fun height(): String? = unwrap(this).getHeight()

    public fun position(): String? = unwrap(this).getPosition()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visibility(): String? = unwrap(this).getVisibility()

    public fun width(): String? = unwrap(this).getWidth()

    @CdkDslMarker
    public interface Builder {
      public fun height(height: String)

      public fun position(position: String)

      public fun title(title: IResolvable)

      public fun title(title: LabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a4d36ea1429ca22b345d5fbebeb561710e239425f7fea344171647650df37ca8")
      public fun title(title: LabelOptionsProperty.Builder.() -> Unit)

      public fun visibility(visibility: String)

      public fun width(width: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LegendOptionsProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.LegendOptionsProperty.builder()

      override fun height(height: String) {
        cdkBuilder.height(height)
      }

      override fun position(position: String) {
        cdkBuilder.position(position)
      }

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: LabelOptionsProperty) {
        cdkBuilder.title(title.let(LabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("a4d36ea1429ca22b345d5fbebeb561710e239425f7fea344171647650df37ca8")
      override fun title(title: LabelOptionsProperty.Builder.() -> Unit): Unit =
          title(LabelOptionsProperty(title))

      override fun visibility(visibility: String) {
        cdkBuilder.visibility(visibility)
      }

      override fun width(width: String) {
        cdkBuilder.width(width)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.LegendOptionsProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.LegendOptionsProperty,
    ) : CdkObject(cdkObject), LegendOptionsProperty {
      override fun height(): String? = unwrap(this).getHeight()

      override fun position(): String? = unwrap(this).getPosition()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visibility(): String? = unwrap(this).getVisibility()

      override fun width(): String? = unwrap(this).getWidth()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): LegendOptionsProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.LegendOptionsProperty):
          LegendOptionsProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: LegendOptionsProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.LegendOptionsProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.LegendOptionsProperty
    }
  }

  public interface ColumnConfigurationProperty {
    public fun colorsConfiguration(): Any? = unwrap(this).getColorsConfiguration()

    public fun column(): Any

    public fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

    public fun role(): String? = unwrap(this).getRole()

    @CdkDslMarker
    public interface Builder {
      public fun colorsConfiguration(colorsConfiguration: IResolvable)

      public fun colorsConfiguration(colorsConfiguration: ColorsConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7de8bbbbba64890e87b4284c67bfed7644c712c03ece26e320716a50f36410a9")
      public
          fun colorsConfiguration(colorsConfiguration: ColorsConfigurationProperty.Builder.() -> Unit)

      public fun column(column: IResolvable)

      public fun column(column: ColumnIdentifierProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3be2ee647b59d835994821ecb5acf45391c638d9a5edca6f7d86905e8364fc25")
      public fun column(column: ColumnIdentifierProperty.Builder.() -> Unit)

      public fun formatConfiguration(formatConfiguration: IResolvable)

      public fun formatConfiguration(formatConfiguration: FormatConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("200f6b9321ce3f1a4877bbd61690708b029d04322cf0bf68a170f86142e29085")
      public
          fun formatConfiguration(formatConfiguration: FormatConfigurationProperty.Builder.() -> Unit)

      public fun role(role: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnConfigurationProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnConfigurationProperty.builder()

      override fun colorsConfiguration(colorsConfiguration: IResolvable) {
        cdkBuilder.colorsConfiguration(colorsConfiguration.let(IResolvable::unwrap))
      }

      override fun colorsConfiguration(colorsConfiguration: ColorsConfigurationProperty) {
        cdkBuilder.colorsConfiguration(colorsConfiguration.let(ColorsConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("7de8bbbbba64890e87b4284c67bfed7644c712c03ece26e320716a50f36410a9")
      override
          fun colorsConfiguration(colorsConfiguration: ColorsConfigurationProperty.Builder.() -> Unit):
          Unit = colorsConfiguration(ColorsConfigurationProperty(colorsConfiguration))

      override fun column(column: IResolvable) {
        cdkBuilder.column(column.let(IResolvable::unwrap))
      }

      override fun column(column: ColumnIdentifierProperty) {
        cdkBuilder.column(column.let(ColumnIdentifierProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("3be2ee647b59d835994821ecb5acf45391c638d9a5edca6f7d86905e8364fc25")
      override fun column(column: ColumnIdentifierProperty.Builder.() -> Unit): Unit =
          column(ColumnIdentifierProperty(column))

      override fun formatConfiguration(formatConfiguration: IResolvable) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(IResolvable::unwrap))
      }

      override fun formatConfiguration(formatConfiguration: FormatConfigurationProperty) {
        cdkBuilder.formatConfiguration(formatConfiguration.let(FormatConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("200f6b9321ce3f1a4877bbd61690708b029d04322cf0bf68a170f86142e29085")
      override
          fun formatConfiguration(formatConfiguration: FormatConfigurationProperty.Builder.() -> Unit):
          Unit = formatConfiguration(FormatConfigurationProperty(formatConfiguration))

      override fun role(role: String) {
        cdkBuilder.role(role)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnConfigurationProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnConfigurationProperty,
    ) : CdkObject(cdkObject), ColumnConfigurationProperty {
      override fun colorsConfiguration(): Any? = unwrap(this).getColorsConfiguration()

      override fun column(): Any = unwrap(this).getColumn()

      override fun formatConfiguration(): Any? = unwrap(this).getFormatConfiguration()

      override fun role(): String? = unwrap(this).getRole()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): ColumnConfigurationProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnConfigurationProperty):
          ColumnConfigurationProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: ColumnConfigurationProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnConfigurationProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.ColumnConfigurationProperty
    }
  }

  public interface FontWeightProperty {
    public fun name(): String? = unwrap(this).getName()

    @CdkDslMarker
    public interface Builder {
      public fun name(name: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontWeightProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontWeightProperty.builder()

      override fun name(name: String) {
        cdkBuilder.name(name)
      }

      public fun build(): software.amazon.awscdk.services.quicksight.CfnTemplate.FontWeightProperty
          = cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontWeightProperty,
    ) : CdkObject(cdkObject), FontWeightProperty {
      override fun name(): String? = unwrap(this).getName()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FontWeightProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FontWeightProperty):
          FontWeightProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FontWeightProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontWeightProperty = (wrapped as
          CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FontWeightProperty
    }
  }

  public interface TemplateSourceAnalysisProperty {
    public fun arn(): String

    public fun dataSetReferences(): Any

    @CdkDslMarker
    public interface Builder {
      public fun arn(arn: String)

      public fun dataSetReferences(dataSetReferences: IResolvable)

      public fun dataSetReferences(dataSetReferences: List<Any>)

      public fun dataSetReferences(vararg dataSetReferences: Any)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceAnalysisProperty.Builder
          =
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceAnalysisProperty.builder()

      override fun arn(arn: String) {
        cdkBuilder.arn(arn)
      }

      override fun dataSetReferences(dataSetReferences: IResolvable) {
        cdkBuilder.dataSetReferences(dataSetReferences.let(IResolvable::unwrap))
      }

      override fun dataSetReferences(dataSetReferences: List<Any>) {
        cdkBuilder.dataSetReferences(dataSetReferences)
      }

      override fun dataSetReferences(vararg dataSetReferences: Any): Unit =
          dataSetReferences(dataSetReferences.toList())

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceAnalysisProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceAnalysisProperty,
    ) : CdkObject(cdkObject), TemplateSourceAnalysisProperty {
      override fun arn(): String = unwrap(this).getArn()

      override fun dataSetReferences(): Any = unwrap(this).getDataSetReferences()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): TemplateSourceAnalysisProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceAnalysisProperty):
          TemplateSourceAnalysisProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: TemplateSourceAnalysisProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceAnalysisProperty =
          (wrapped as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.TemplateSourceAnalysisProperty
    }
  }

  public interface FilledMapVisualProperty {
    public fun actions(): Any? = unwrap(this).getActions()

    public fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

    public fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

    public fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

    public fun subtitle(): Any? = unwrap(this).getSubtitle()

    public fun title(): Any? = unwrap(this).getTitle()

    public fun visualId(): String

    @CdkDslMarker
    public interface Builder {
      public fun actions(actions: IResolvable)

      public fun actions(actions: List<Any>)

      public fun actions(vararg actions: Any)

      public fun chartConfiguration(chartConfiguration: IResolvable)

      public fun chartConfiguration(chartConfiguration: FilledMapConfigurationProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("865459b73d4ade3c96da30228d5c35646e18ea975fc2c0eff95603458b14fd5e")
      public
          fun chartConfiguration(chartConfiguration: FilledMapConfigurationProperty.Builder.() -> Unit)

      public fun columnHierarchies(columnHierarchies: IResolvable)

      public fun columnHierarchies(columnHierarchies: List<Any>)

      public fun columnHierarchies(vararg columnHierarchies: Any)

      public fun conditionalFormatting(conditionalFormatting: IResolvable)

      public
          fun conditionalFormatting(conditionalFormatting: FilledMapConditionalFormattingProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be2383c10538478e938be87f2f75c650fd14105f0c8e4632c5872d5bc20264ca")
      public
          fun conditionalFormatting(conditionalFormatting: FilledMapConditionalFormattingProperty.Builder.() -> Unit)

      public fun subtitle(subtitle: IResolvable)

      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f83ed8546d04bb7cf3510abc0b9b8caaaf827389d75cc0f398b81080d2d4a07")
      public fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit)

      public fun title(title: IResolvable)

      public fun title(title: VisualTitleLabelOptionsProperty)

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("246e0e19dbbd9a1e10ef2bbce1ccf82cbb6cf6cbf635ad775887d5536a78557a")
      public fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit)

      public fun visualId(visualId: String)
    }

    private class BuilderImpl : Builder {
      private val cdkBuilder:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapVisualProperty.Builder =
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapVisualProperty.builder()

      override fun actions(actions: IResolvable) {
        cdkBuilder.actions(actions.let(IResolvable::unwrap))
      }

      override fun actions(actions: List<Any>) {
        cdkBuilder.actions(actions)
      }

      override fun actions(vararg actions: Any): Unit = actions(actions.toList())

      override fun chartConfiguration(chartConfiguration: IResolvable) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(IResolvable::unwrap))
      }

      override fun chartConfiguration(chartConfiguration: FilledMapConfigurationProperty) {
        cdkBuilder.chartConfiguration(chartConfiguration.let(FilledMapConfigurationProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("865459b73d4ade3c96da30228d5c35646e18ea975fc2c0eff95603458b14fd5e")
      override
          fun chartConfiguration(chartConfiguration: FilledMapConfigurationProperty.Builder.() -> Unit):
          Unit = chartConfiguration(FilledMapConfigurationProperty(chartConfiguration))

      override fun columnHierarchies(columnHierarchies: IResolvable) {
        cdkBuilder.columnHierarchies(columnHierarchies.let(IResolvable::unwrap))
      }

      override fun columnHierarchies(columnHierarchies: List<Any>) {
        cdkBuilder.columnHierarchies(columnHierarchies)
      }

      override fun columnHierarchies(vararg columnHierarchies: Any): Unit =
          columnHierarchies(columnHierarchies.toList())

      override fun conditionalFormatting(conditionalFormatting: IResolvable) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(IResolvable::unwrap))
      }

      override
          fun conditionalFormatting(conditionalFormatting: FilledMapConditionalFormattingProperty) {
        cdkBuilder.conditionalFormatting(conditionalFormatting.let(FilledMapConditionalFormattingProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("be2383c10538478e938be87f2f75c650fd14105f0c8e4632c5872d5bc20264ca")
      override
          fun conditionalFormatting(conditionalFormatting: FilledMapConditionalFormattingProperty.Builder.() -> Unit):
          Unit =
          conditionalFormatting(FilledMapConditionalFormattingProperty(conditionalFormatting))

      override fun subtitle(subtitle: IResolvable) {
        cdkBuilder.subtitle(subtitle.let(IResolvable::unwrap))
      }

      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty) {
        cdkBuilder.subtitle(subtitle.let(VisualSubtitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("4f83ed8546d04bb7cf3510abc0b9b8caaaf827389d75cc0f398b81080d2d4a07")
      override fun subtitle(subtitle: VisualSubtitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          subtitle(VisualSubtitleLabelOptionsProperty(subtitle))

      override fun title(title: IResolvable) {
        cdkBuilder.title(title.let(IResolvable::unwrap))
      }

      override fun title(title: VisualTitleLabelOptionsProperty) {
        cdkBuilder.title(title.let(VisualTitleLabelOptionsProperty::unwrap))
      }

      @kotlin.Suppress("INAPPLICABLE_JVM_NAME")
      @JvmName("246e0e19dbbd9a1e10ef2bbce1ccf82cbb6cf6cbf635ad775887d5536a78557a")
      override fun title(title: VisualTitleLabelOptionsProperty.Builder.() -> Unit): Unit =
          title(VisualTitleLabelOptionsProperty(title))

      override fun visualId(visualId: String) {
        cdkBuilder.visualId(visualId)
      }

      public fun build():
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapVisualProperty =
          cdkBuilder.build()
    }

    private class Wrapper(
      override val cdkObject:
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapVisualProperty,
    ) : CdkObject(cdkObject), FilledMapVisualProperty {
      override fun actions(): Any? = unwrap(this).getActions()

      override fun chartConfiguration(): Any? = unwrap(this).getChartConfiguration()

      override fun columnHierarchies(): Any? = unwrap(this).getColumnHierarchies()

      override fun conditionalFormatting(): Any? = unwrap(this).getConditionalFormatting()

      override fun subtitle(): Any? = unwrap(this).getSubtitle()

      override fun title(): Any? = unwrap(this).getTitle()

      override fun visualId(): String = unwrap(this).getVisualId()
    }

    public companion object {
      public operator fun invoke(block: Builder.() -> Unit = {}): FilledMapVisualProperty {
        val builderImpl = BuilderImpl()
        return Wrapper(builderImpl.apply(block).build())
      }

      internal
          fun wrap(cdkObject: software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapVisualProperty):
          FilledMapVisualProperty = Wrapper(cdkObject)

      internal fun unwrap(wrapped: FilledMapVisualProperty):
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapVisualProperty = (wrapped
          as CdkObject).cdkObject as
          software.amazon.awscdk.services.quicksight.CfnTemplate.FilledMapVisualProperty
    }
  }
}
